from enum import Enum
from typing import TypeVar, Generic

T = TypeVar('T')

class Signal(Generic[T]): pass

intptr = int
def default(comment: str): ...
class Variant:
    pass


class Side:
    SIDE_LEFT = 0
    SIDE_TOP = 1
    SIDE_RIGHT = 2
    SIDE_BOTTOM = 3
    
class Corner:
    CORNER_TOP_LEFT = 0
    CORNER_TOP_RIGHT = 1
    CORNER_BOTTOM_RIGHT = 2
    CORNER_BOTTOM_LEFT = 3
    
class Orientation:
    VERTICAL = 1
    HORIZONTAL = 0
    
class ClockDirection:
    CLOCKWISE = 0
    COUNTERCLOCKWISE = 1
    
class HorizontalAlignment:
    HORIZONTAL_ALIGNMENT_LEFT = 0
    HORIZONTAL_ALIGNMENT_CENTER = 1
    HORIZONTAL_ALIGNMENT_RIGHT = 2
    HORIZONTAL_ALIGNMENT_FILL = 3
    
class VerticalAlignment:
    VERTICAL_ALIGNMENT_TOP = 0
    VERTICAL_ALIGNMENT_CENTER = 1
    VERTICAL_ALIGNMENT_BOTTOM = 2
    VERTICAL_ALIGNMENT_FILL = 3
    
class InlineAlignment:
    INLINE_ALIGNMENT_TOP_TO = 0
    INLINE_ALIGNMENT_CENTER_TO = 1
    INLINE_ALIGNMENT_BASELINE_TO = 3
    INLINE_ALIGNMENT_BOTTOM_TO = 2
    INLINE_ALIGNMENT_TO_TOP = 0
    INLINE_ALIGNMENT_TO_CENTER = 4
    INLINE_ALIGNMENT_TO_BASELINE = 8
    INLINE_ALIGNMENT_TO_BOTTOM = 12
    INLINE_ALIGNMENT_TOP = 0
    INLINE_ALIGNMENT_CENTER = 5
    INLINE_ALIGNMENT_BOTTOM = 14
    INLINE_ALIGNMENT_IMAGE_MASK = 3
    INLINE_ALIGNMENT_TEXT_MASK = 12
    
class EulerOrder:
    EULER_ORDER_XYZ = 0
    EULER_ORDER_XZY = 1
    EULER_ORDER_YXZ = 2
    EULER_ORDER_YZX = 3
    EULER_ORDER_ZXY = 4
    EULER_ORDER_ZYX = 5
    
class Key:
    KEY_NONE = 0
    KEY_SPECIAL = 4194304
    KEY_ESCAPE = 4194305
    KEY_TAB = 4194306
    KEY_BACKTAB = 4194307
    KEY_BACKSPACE = 4194308
    KEY_ENTER = 4194309
    KEY_KP_ENTER = 4194310
    KEY_INSERT = 4194311
    KEY_DELETE = 4194312
    KEY_PAUSE = 4194313
    KEY_PRINT = 4194314
    KEY_SYSREQ = 4194315
    KEY_CLEAR = 4194316
    KEY_HOME = 4194317
    KEY_END = 4194318
    KEY_LEFT = 4194319
    KEY_UP = 4194320
    KEY_RIGHT = 4194321
    KEY_DOWN = 4194322
    KEY_PAGEUP = 4194323
    KEY_PAGEDOWN = 4194324
    KEY_SHIFT = 4194325
    KEY_CTRL = 4194326
    KEY_META = 4194327
    KEY_ALT = 4194328
    KEY_CAPSLOCK = 4194329
    KEY_NUMLOCK = 4194330
    KEY_SCROLLLOCK = 4194331
    KEY_F1 = 4194332
    KEY_F2 = 4194333
    KEY_F3 = 4194334
    KEY_F4 = 4194335
    KEY_F5 = 4194336
    KEY_F6 = 4194337
    KEY_F7 = 4194338
    KEY_F8 = 4194339
    KEY_F9 = 4194340
    KEY_F10 = 4194341
    KEY_F11 = 4194342
    KEY_F12 = 4194343
    KEY_F13 = 4194344
    KEY_F14 = 4194345
    KEY_F15 = 4194346
    KEY_F16 = 4194347
    KEY_F17 = 4194348
    KEY_F18 = 4194349
    KEY_F19 = 4194350
    KEY_F20 = 4194351
    KEY_F21 = 4194352
    KEY_F22 = 4194353
    KEY_F23 = 4194354
    KEY_F24 = 4194355
    KEY_F25 = 4194356
    KEY_F26 = 4194357
    KEY_F27 = 4194358
    KEY_F28 = 4194359
    KEY_F29 = 4194360
    KEY_F30 = 4194361
    KEY_F31 = 4194362
    KEY_F32 = 4194363
    KEY_F33 = 4194364
    KEY_F34 = 4194365
    KEY_F35 = 4194366
    KEY_KP_MULTIPLY = 4194433
    KEY_KP_DIVIDE = 4194434
    KEY_KP_SUBTRACT = 4194435
    KEY_KP_PERIOD = 4194436
    KEY_KP_ADD = 4194437
    KEY_KP_0 = 4194438
    KEY_KP_1 = 4194439
    KEY_KP_2 = 4194440
    KEY_KP_3 = 4194441
    KEY_KP_4 = 4194442
    KEY_KP_5 = 4194443
    KEY_KP_6 = 4194444
    KEY_KP_7 = 4194445
    KEY_KP_8 = 4194446
    KEY_KP_9 = 4194447
    KEY_MENU = 4194370
    KEY_HYPER = 4194371
    KEY_HELP = 4194373
    KEY_BACK = 4194376
    KEY_FORWARD = 4194377
    KEY_STOP = 4194378
    KEY_REFRESH = 4194379
    KEY_VOLUMEDOWN = 4194380
    KEY_VOLUMEMUTE = 4194381
    KEY_VOLUMEUP = 4194382
    KEY_MEDIAPLAY = 4194388
    KEY_MEDIASTOP = 4194389
    KEY_MEDIAPREVIOUS = 4194390
    KEY_MEDIANEXT = 4194391
    KEY_MEDIARECORD = 4194392
    KEY_HOMEPAGE = 4194393
    KEY_FAVORITES = 4194394
    KEY_SEARCH = 4194395
    KEY_STANDBY = 4194396
    KEY_OPENURL = 4194397
    KEY_LAUNCHMAIL = 4194398
    KEY_LAUNCHMEDIA = 4194399
    KEY_LAUNCH0 = 4194400
    KEY_LAUNCH1 = 4194401
    KEY_LAUNCH2 = 4194402
    KEY_LAUNCH3 = 4194403
    KEY_LAUNCH4 = 4194404
    KEY_LAUNCH5 = 4194405
    KEY_LAUNCH6 = 4194406
    KEY_LAUNCH7 = 4194407
    KEY_LAUNCH8 = 4194408
    KEY_LAUNCH9 = 4194409
    KEY_LAUNCHA = 4194410
    KEY_LAUNCHB = 4194411
    KEY_LAUNCHC = 4194412
    KEY_LAUNCHD = 4194413
    KEY_LAUNCHE = 4194414
    KEY_LAUNCHF = 4194415
    KEY_GLOBE = 4194416
    KEY_KEYBOARD = 4194417
    KEY_JIS_EISU = 4194418
    KEY_JIS_KANA = 4194419
    KEY_UNKNOWN = 8388607
    KEY_SPACE = 32
    KEY_EXCLAM = 33
    KEY_QUOTEDBL = 34
    KEY_NUMBERSIGN = 35
    KEY_DOLLAR = 36
    KEY_PERCENT = 37
    KEY_AMPERSAND = 38
    KEY_APOSTROPHE = 39
    KEY_PARENLEFT = 40
    KEY_PARENRIGHT = 41
    KEY_ASTERISK = 42
    KEY_PLUS = 43
    KEY_COMMA = 44
    KEY_MINUS = 45
    KEY_PERIOD = 46
    KEY_SLASH = 47
    KEY_0 = 48
    KEY_1 = 49
    KEY_2 = 50
    KEY_3 = 51
    KEY_4 = 52
    KEY_5 = 53
    KEY_6 = 54
    KEY_7 = 55
    KEY_8 = 56
    KEY_9 = 57
    KEY_COLON = 58
    KEY_SEMICOLON = 59
    KEY_LESS = 60
    KEY_EQUAL = 61
    KEY_GREATER = 62
    KEY_QUESTION = 63
    KEY_AT = 64
    KEY_A = 65
    KEY_B = 66
    KEY_C = 67
    KEY_D = 68
    KEY_E = 69
    KEY_F = 70
    KEY_G = 71
    KEY_H = 72
    KEY_I = 73
    KEY_J = 74
    KEY_K = 75
    KEY_L = 76
    KEY_M = 77
    KEY_N = 78
    KEY_O = 79
    KEY_P = 80
    KEY_Q = 81
    KEY_R = 82
    KEY_S = 83
    KEY_T = 84
    KEY_U = 85
    KEY_V = 86
    KEY_W = 87
    KEY_X = 88
    KEY_Y = 89
    KEY_Z = 90
    KEY_BRACKETLEFT = 91
    KEY_BACKSLASH = 92
    KEY_BRACKETRIGHT = 93
    KEY_ASCIICIRCUM = 94
    KEY_UNDERSCORE = 95
    KEY_QUOTELEFT = 96
    KEY_BRACELEFT = 123
    KEY_BAR = 124
    KEY_BRACERIGHT = 125
    KEY_ASCIITILDE = 126
    KEY_YEN = 165
    KEY_SECTION = 167
    
class KeyModifierMask:
    KEY_CODE_MASK = 8388607
    KEY_MODIFIER_MASK = 2130706432
    KEY_MASK_CMD_OR_CTRL = 16777216
    KEY_MASK_SHIFT = 33554432
    KEY_MASK_ALT = 67108864
    KEY_MASK_META = 134217728
    KEY_MASK_CTRL = 268435456
    KEY_MASK_KPAD = 536870912
    KEY_MASK_GROUP_SWITCH = 1073741824
    
class KeyLocation:
    KEY_LOCATION_UNSPECIFIED = 0
    KEY_LOCATION_LEFT = 1
    KEY_LOCATION_RIGHT = 2
    
class MouseButton:
    MOUSE_BUTTON_NONE = 0
    MOUSE_BUTTON_LEFT = 1
    MOUSE_BUTTON_RIGHT = 2
    MOUSE_BUTTON_MIDDLE = 3
    MOUSE_BUTTON_WHEEL_UP = 4
    MOUSE_BUTTON_WHEEL_DOWN = 5
    MOUSE_BUTTON_WHEEL_LEFT = 6
    MOUSE_BUTTON_WHEEL_RIGHT = 7
    MOUSE_BUTTON_XBUTTON1 = 8
    MOUSE_BUTTON_XBUTTON2 = 9
    
class MouseButtonMask:
    MOUSE_BUTTON_MASK_LEFT = 1
    MOUSE_BUTTON_MASK_RIGHT = 2
    MOUSE_BUTTON_MASK_MIDDLE = 4
    MOUSE_BUTTON_MASK_MB_XBUTTON1 = 128
    MOUSE_BUTTON_MASK_MB_XBUTTON2 = 256
    
class JoyButton:
    JOY_BUTTON_INVALID = -1
    JOY_BUTTON_A = 0
    JOY_BUTTON_B = 1
    JOY_BUTTON_X = 2
    JOY_BUTTON_Y = 3
    JOY_BUTTON_BACK = 4
    JOY_BUTTON_GUIDE = 5
    JOY_BUTTON_START = 6
    JOY_BUTTON_LEFT_STICK = 7
    JOY_BUTTON_RIGHT_STICK = 8
    JOY_BUTTON_LEFT_SHOULDER = 9
    JOY_BUTTON_RIGHT_SHOULDER = 10
    JOY_BUTTON_DPAD_UP = 11
    JOY_BUTTON_DPAD_DOWN = 12
    JOY_BUTTON_DPAD_LEFT = 13
    JOY_BUTTON_DPAD_RIGHT = 14
    JOY_BUTTON_MISC1 = 15
    JOY_BUTTON_PADDLE1 = 16
    JOY_BUTTON_PADDLE2 = 17
    JOY_BUTTON_PADDLE3 = 18
    JOY_BUTTON_PADDLE4 = 19
    JOY_BUTTON_TOUCHPAD = 20
    JOY_BUTTON_SDL_MAX = 21
    JOY_BUTTON_MAX = 128
    
class JoyAxis:
    JOY_AXIS_INVALID = -1
    JOY_AXIS_LEFT_X = 0
    JOY_AXIS_LEFT_Y = 1
    JOY_AXIS_RIGHT_X = 2
    JOY_AXIS_RIGHT_Y = 3
    JOY_AXIS_TRIGGER_LEFT = 4
    JOY_AXIS_TRIGGER_RIGHT = 5
    JOY_AXIS_SDL_MAX = 6
    JOY_AXIS_MAX = 10
    
class MIDIMessage:
    MIDI_MESSAGE_NONE = 0
    MIDI_MESSAGE_NOTE_OFF = 8
    MIDI_MESSAGE_NOTE_ON = 9
    MIDI_MESSAGE_AFTERTOUCH = 10
    MIDI_MESSAGE_CONTROL_CHANGE = 11
    MIDI_MESSAGE_PROGRAM_CHANGE = 12
    MIDI_MESSAGE_CHANNEL_PRESSURE = 13
    MIDI_MESSAGE_PITCH_BEND = 14
    MIDI_MESSAGE_SYSTEM_EXCLUSIVE = 240
    MIDI_MESSAGE_QUARTER_FRAME = 241
    MIDI_MESSAGE_SONG_POSITION_POINTER = 242
    MIDI_MESSAGE_SONG_SELECT = 243
    MIDI_MESSAGE_TUNE_REQUEST = 246
    MIDI_MESSAGE_TIMING_CLOCK = 248
    MIDI_MESSAGE_START = 250
    MIDI_MESSAGE_CONTINUE = 251
    MIDI_MESSAGE_STOP = 252
    MIDI_MESSAGE_ACTIVE_SENSING = 254
    MIDI_MESSAGE_SYSTEM_RESET = 255
    
class Error:
    OK = 0
    FAILED = 1
    ERR_UNAVAILABLE = 2
    ERR_UNCONFIGURED = 3
    ERR_UNAUTHORIZED = 4
    ERR_PARAMETER_RANGE_ERROR = 5
    ERR_OUT_OF_MEMORY = 6
    ERR_FILE_NOT_FOUND = 7
    ERR_FILE_BAD_DRIVE = 8
    ERR_FILE_BAD_PATH = 9
    ERR_FILE_NO_PERMISSION = 10
    ERR_FILE_ALREADY_IN_USE = 11
    ERR_FILE_CANT_OPEN = 12
    ERR_FILE_CANT_WRITE = 13
    ERR_FILE_CANT_READ = 14
    ERR_FILE_UNRECOGNIZED = 15
    ERR_FILE_CORRUPT = 16
    ERR_FILE_MISSING_DEPENDENCIES = 17
    ERR_FILE_EOF = 18
    ERR_CANT_OPEN = 19
    ERR_CANT_CREATE = 20
    ERR_QUERY_FAILED = 21
    ERR_ALREADY_IN_USE = 22
    ERR_LOCKED = 23
    ERR_TIMEOUT = 24
    ERR_CANT_CONNECT = 25
    ERR_CANT_RESOLVE = 26
    ERR_CONNECTION_ERROR = 27
    ERR_CANT_ACQUIRE_RESOURCE = 28
    ERR_CANT_FORK = 29
    ERR_INVALID_DATA = 30
    ERR_INVALID_PARAMETER = 31
    ERR_ALREADY_EXISTS = 32
    ERR_DOES_NOT_EXIST = 33
    ERR_DATABASE_CANT_READ = 34
    ERR_DATABASE_CANT_WRITE = 35
    ERR_COMPILATION_FAILED = 36
    ERR_METHOD_NOT_FOUND = 37
    ERR_LINK_FAILED = 38
    ERR_SCRIPT_FAILED = 39
    ERR_CYCLIC_LINK = 40
    ERR_INVALID_DECLARATION = 41
    ERR_DUPLICATE_SYMBOL = 42
    ERR_PARSE_ERROR = 43
    ERR_BUSY = 44
    ERR_SKIP = 45
    ERR_HELP = 46
    ERR_BUG = 47
    ERR_PRINTER_ON_FIRE = 48
    
class PropertyHint:
    PROPERTY_HINT_NONE = 0
    PROPERTY_HINT_RANGE = 1
    PROPERTY_HINT_ENUM = 2
    PROPERTY_HINT_ENUM_SUGGESTION = 3
    PROPERTY_HINT_EXP_EASING = 4
    PROPERTY_HINT_LINK = 5
    PROPERTY_HINT_FLAGS = 6
    PROPERTY_HINT_LAYERS_2D_RENDER = 7
    PROPERTY_HINT_LAYERS_2D_PHYSICS = 8
    PROPERTY_HINT_LAYERS_2D_NAVIGATION = 9
    PROPERTY_HINT_LAYERS_3D_RENDER = 10
    PROPERTY_HINT_LAYERS_3D_PHYSICS = 11
    PROPERTY_HINT_LAYERS_3D_NAVIGATION = 12
    PROPERTY_HINT_LAYERS_AVOIDANCE = 37
    PROPERTY_HINT_FILE = 13
    PROPERTY_HINT_DIR = 14
    PROPERTY_HINT_GLOBAL_FILE = 15
    PROPERTY_HINT_GLOBAL_DIR = 16
    PROPERTY_HINT_RESOURCE_TYPE = 17
    PROPERTY_HINT_MULTILINE_TEXT = 18
    PROPERTY_HINT_EXPRESSION = 19
    PROPERTY_HINT_PLACEHOLDER_TEXT = 20
    PROPERTY_HINT_COLOR_NO_ALPHA = 21
    PROPERTY_HINT_OBJECT_ID = 22
    PROPERTY_HINT_TYPE_STRING = 23
    PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE = 24
    PROPERTY_HINT_OBJECT_TOO_BIG = 25
    PROPERTY_HINT_NODE_PATH_VALID_TYPES = 26
    PROPERTY_HINT_SAVE_FILE = 27
    PROPERTY_HINT_GLOBAL_SAVE_FILE = 28
    PROPERTY_HINT_INT_IS_OBJECTID = 29
    PROPERTY_HINT_INT_IS_POINTER = 30
    PROPERTY_HINT_ARRAY_TYPE = 31
    PROPERTY_HINT_DICTIONARY_TYPE = 38
    PROPERTY_HINT_LOCALE_ID = 32
    PROPERTY_HINT_LOCALIZABLE_STRING = 33
    PROPERTY_HINT_NODE_TYPE = 34
    PROPERTY_HINT_HIDE_QUATERNION_EDIT = 35
    PROPERTY_HINT_PASSWORD = 36
    PROPERTY_HINT_TOOL_BUTTON = 39
    PROPERTY_HINT_ONESHOT = 40
    PROPERTY_HINT_MAX = 42
    
class PropertyUsageFlags:
    PROPERTY_USAGE_NONE = 0
    PROPERTY_USAGE_STORAGE = 2
    PROPERTY_USAGE_EDITOR = 4
    PROPERTY_USAGE_INTERNAL = 8
    PROPERTY_USAGE_CHECKABLE = 16
    PROPERTY_USAGE_CHECKED = 32
    PROPERTY_USAGE_GROUP = 64
    PROPERTY_USAGE_CATEGORY = 128
    PROPERTY_USAGE_SUBGROUP = 256
    PROPERTY_USAGE_CLASS_IS_BITFIELD = 512
    PROPERTY_USAGE_NO_INSTANCE_STATE = 1024
    PROPERTY_USAGE_RESTART_IF_CHANGED = 2048
    PROPERTY_USAGE_SCRIPT_VARIABLE = 4096
    PROPERTY_USAGE_STORE_IF_NULL = 8192
    PROPERTY_USAGE_UPDATE_ALL_IF_MODIFIED = 16384
    PROPERTY_USAGE_SCRIPT_DEFAULT_VALUE = 32768
    PROPERTY_USAGE_CLASS_IS_ENUM = 65536
    PROPERTY_USAGE_NIL_IS_VARIANT = 131072
    PROPERTY_USAGE_ARRAY = 262144
    PROPERTY_USAGE_ALWAYS_DUPLICATE = 524288
    PROPERTY_USAGE_NEVER_DUPLICATE = 1048576
    PROPERTY_USAGE_HIGH_END_GFX = 2097152
    PROPERTY_USAGE_NODE_PATH_FROM_SCENE_ROOT = 4194304
    PROPERTY_USAGE_RESOURCE_NOT_PERSISTENT = 8388608
    PROPERTY_USAGE_KEYING_INCREMENTS = 16777216
    PROPERTY_USAGE_DEFERRED_SET_RESOURCE = 33554432
    PROPERTY_USAGE_EDITOR_INSTANTIATE_OBJECT = 67108864
    PROPERTY_USAGE_EDITOR_BASIC_SETTING = 134217728
    PROPERTY_USAGE_READ_ONLY = 268435456
    PROPERTY_USAGE_SECRET = 536870912
    PROPERTY_USAGE_DEFAULT = 6
    PROPERTY_USAGE_NO_EDITOR = 2
    
class MethodFlags:
    METHOD_FLAG_NORMAL = 1
    METHOD_FLAG_EDITOR = 2
    METHOD_FLAG_CONST = 4
    METHOD_FLAG_VIRTUAL = 8
    METHOD_FLAG_VARARG = 16
    METHOD_FLAG_STATIC = 32
    METHOD_FLAG_OBJECT_CORE = 64
    METHOD_FLAG_VIRTUAL_REQUIRED = 128
    METHOD_FLAGS_DEFAULT = 1
    
class Variant_Type:
    TYPE_NIL = 0
    TYPE_BOOL = 1
    TYPE_INT = 2
    TYPE_FLOAT = 3
    TYPE_STRING = 4
    TYPE_VECTOR2 = 5
    TYPE_VECTOR2I = 6
    TYPE_RECT2 = 7
    TYPE_RECT2I = 8
    TYPE_VECTOR3 = 9
    TYPE_VECTOR3I = 10
    TYPE_TRANSFORM2D = 11
    TYPE_VECTOR4 = 12
    TYPE_VECTOR4I = 13
    TYPE_PLANE = 14
    TYPE_QUATERNION = 15
    TYPE_AABB = 16
    TYPE_BASIS = 17
    TYPE_TRANSFORM3D = 18
    TYPE_PROJECTION = 19
    TYPE_COLOR = 20
    TYPE_STRING_NAME = 21
    TYPE_NODE_PATH = 22
    TYPE_RID = 23
    TYPE_OBJECT = 24
    TYPE_CALLABLE = 25
    TYPE_SIGNAL = 26
    TYPE_DICTIONARY = 27
    TYPE_ARRAY = 28
    TYPE_PACKED_BYTE_ARRAY = 29
    TYPE_PACKED_INT32_ARRAY = 30
    TYPE_PACKED_INT64_ARRAY = 31
    TYPE_PACKED_FLOAT32_ARRAY = 32
    TYPE_PACKED_FLOAT64_ARRAY = 33
    TYPE_PACKED_STRING_ARRAY = 34
    TYPE_PACKED_VECTOR2_ARRAY = 35
    TYPE_PACKED_VECTOR3_ARRAY = 36
    TYPE_PACKED_COLOR_ARRAY = 37
    TYPE_PACKED_VECTOR4_ARRAY = 38
    TYPE_MAX = 39
    
class Variant_Operator:
    OP_EQUAL = 0
    OP_NOT_EQUAL = 1
    OP_LESS = 2
    OP_LESS_EQUAL = 3
    OP_GREATER = 4
    OP_GREATER_EQUAL = 5
    OP_ADD = 6
    OP_SUBTRACT = 7
    OP_MULTIPLY = 8
    OP_DIVIDE = 9
    OP_NEGATE = 10
    OP_POSITIVE = 11
    OP_MODULE = 12
    OP_POWER = 13
    OP_SHIFT_LEFT = 14
    OP_SHIFT_RIGHT = 15
    OP_BIT_AND = 16
    OP_BIT_OR = 17
    OP_BIT_XOR = 18
    OP_BIT_NEGATE = 19
    OP_AND = 20
    OP_OR = 21
    OP_XOR = 22
    OP_NOT = 23
    OP_IN = 24
    OP_MAX = 25
    
class Nil:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: bool) -> bool: ...
    def __ne__(self, other: bool) -> bool: ...
    def __eq__(self, other: int) -> bool: ...
    def __ne__(self, other: int) -> bool: ...
    def __eq__(self, other: float) -> bool: ...
    def __ne__(self, other: float) -> bool: ...
    def __eq__(self, other: 'String') -> bool: ...
    def __ne__(self, other: 'String') -> bool: ...
    def __eq__(self, other: 'Vector2') -> bool: ...
    def __ne__(self, other: 'Vector2') -> bool: ...
    def __eq__(self, other: 'Vector2i') -> bool: ...
    def __ne__(self, other: 'Vector2i') -> bool: ...
    def __eq__(self, other: 'Rect2') -> bool: ...
    def __ne__(self, other: 'Rect2') -> bool: ...
    def __eq__(self, other: 'Rect2i') -> bool: ...
    def __ne__(self, other: 'Rect2i') -> bool: ...
    def __eq__(self, other: 'Vector3') -> bool: ...
    def __ne__(self, other: 'Vector3') -> bool: ...
    def __eq__(self, other: 'Vector3i') -> bool: ...
    def __ne__(self, other: 'Vector3i') -> bool: ...
    def __eq__(self, other: 'Transform2D') -> bool: ...
    def __ne__(self, other: 'Transform2D') -> bool: ...
    def __eq__(self, other: 'Vector4') -> bool: ...
    def __ne__(self, other: 'Vector4') -> bool: ...
    def __eq__(self, other: 'Vector4i') -> bool: ...
    def __ne__(self, other: 'Vector4i') -> bool: ...
    def __eq__(self, other: 'Plane') -> bool: ...
    def __ne__(self, other: 'Plane') -> bool: ...
    def __eq__(self, other: 'Quaternion') -> bool: ...
    def __ne__(self, other: 'Quaternion') -> bool: ...
    def __eq__(self, other: 'AABB') -> bool: ...
    def __ne__(self, other: 'AABB') -> bool: ...
    def __eq__(self, other: 'Basis') -> bool: ...
    def __ne__(self, other: 'Basis') -> bool: ...
    def __eq__(self, other: 'Transform3D') -> bool: ...
    def __ne__(self, other: 'Transform3D') -> bool: ...
    def __eq__(self, other: 'Projection') -> bool: ...
    def __ne__(self, other: 'Projection') -> bool: ...
    def __eq__(self, other: 'Color') -> bool: ...
    def __ne__(self, other: 'Color') -> bool: ...
    def __eq__(self, other: 'StringName') -> bool: ...
    def __ne__(self, other: 'StringName') -> bool: ...
    def __eq__(self, other: 'NodePath') -> bool: ...
    def __ne__(self, other: 'NodePath') -> bool: ...
    def __eq__(self, other: 'RID') -> bool: ...
    def __ne__(self, other: 'RID') -> bool: ...
    def __eq__(self, other: 'Object') -> bool: ...
    def __ne__(self, other: 'Object') -> bool: ...
    def __eq__(self, other: 'Callable') -> bool: ...
    def __ne__(self, other: 'Callable') -> bool: ...
    def __eq__(self, other: 'Signal') -> bool: ...
    def __ne__(self, other: 'Signal') -> bool: ...
    def __eq__(self, other: 'Dictionary') -> bool: ...
    def __ne__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __eq__(self, other: 'Array') -> bool: ...
    def __ne__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedByteArray') -> bool: ...
    def __ne__(self, other: 'PackedByteArray') -> bool: ...
    def __eq__(self, other: 'PackedInt32Array') -> bool: ...
    def __ne__(self, other: 'PackedInt32Array') -> bool: ...
    def __eq__(self, other: 'PackedInt64Array') -> bool: ...
    def __ne__(self, other: 'PackedInt64Array') -> bool: ...
    def __eq__(self, other: 'PackedFloat32Array') -> bool: ...
    def __ne__(self, other: 'PackedFloat32Array') -> bool: ...
    def __eq__(self, other: 'PackedFloat64Array') -> bool: ...
    def __ne__(self, other: 'PackedFloat64Array') -> bool: ...
    def __eq__(self, other: 'PackedStringArray') -> bool: ...
    def __ne__(self, other: 'PackedStringArray') -> bool: ...
    def __eq__(self, other: 'PackedVector2Array') -> bool: ...
    def __ne__(self, other: 'PackedVector2Array') -> bool: ...
    def __eq__(self, other: 'PackedVector3Array') -> bool: ...
    def __ne__(self, other: 'PackedVector3Array') -> bool: ...
    def __eq__(self, other: 'PackedColorArray') -> bool: ...
    def __ne__(self, other: 'PackedColorArray') -> bool: ...
    def __eq__(self, other: 'PackedVector4Array') -> bool: ...
    def __ne__(self, other: 'PackedVector4Array') -> bool: ...
    
class bool:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: bool) -> bool: ...
    def __ne__(self, other: bool) -> bool: ...
    def __lt__(self, other: bool) -> bool: ...
    def __gt__(self, other: bool) -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    
class int:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> int: ...
    def __invert__(self) -> int: ...
    def __eq__(self, other: int) -> bool: ...
    def __ne__(self, other: int) -> bool: ...
    def __lt__(self, other: int) -> bool: ...
    def __le__(self, other: int) -> bool: ...
    def __gt__(self, other: int) -> bool: ...
    def __ge__(self, other: int) -> bool: ...
    def __add__(self, other: int) -> int: ...
    def __sub__(self, other: int) -> int: ...
    def __mul__(self, other: int) -> int: ...
    def __truediv__(self, other: int) -> int: ...
    def __mod__(self, other: int) -> int: ...
    def __pow__(self, other: int) -> int: ...
    def __lshift__(self, other: int) -> int: ...
    def __rshift__(self, other: int) -> int: ...
    def __and__(self, other: int) -> int: ...
    def __or__(self, other: int) -> int: ...
    def __xor__(self, other: int) -> int: ...
    def __eq__(self, other: float) -> bool: ...
    def __ne__(self, other: float) -> bool: ...
    def __lt__(self, other: float) -> bool: ...
    def __le__(self, other: float) -> bool: ...
    def __gt__(self, other: float) -> bool: ...
    def __ge__(self, other: float) -> bool: ...
    def __add__(self, other: float) -> float: ...
    def __sub__(self, other: float) -> float: ...
    def __mul__(self, other: float) -> float: ...
    def __truediv__(self, other: float) -> float: ...
    def __pow__(self, other: float) -> float: ...
    def __mul__(self, other: 'Vector2') -> 'Vector2': ...
    def __mul__(self, other: 'Vector2i') -> 'Vector2i': ...
    def __mul__(self, other: 'Vector3') -> 'Vector3': ...
    def __mul__(self, other: 'Vector3i') -> 'Vector3i': ...
    def __mul__(self, other: 'Vector4') -> 'Vector4': ...
    def __mul__(self, other: 'Vector4i') -> 'Vector4i': ...
    def __mul__(self, other: 'Quaternion') -> 'Quaternion': ...
    def __mul__(self, other: 'Color') -> 'Color': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'PackedByteArray') -> bool: ...
    def __contains__(self, other: 'PackedInt32Array') -> bool: ...
    def __contains__(self, other: 'PackedInt64Array') -> bool: ...
    def __contains__(self, other: 'PackedFloat32Array') -> bool: ...
    def __contains__(self, other: 'PackedFloat64Array') -> bool: ...
    
class float:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> float: ...
    def __eq__(self, other: int) -> bool: ...
    def __ne__(self, other: int) -> bool: ...
    def __lt__(self, other: int) -> bool: ...
    def __le__(self, other: int) -> bool: ...
    def __gt__(self, other: int) -> bool: ...
    def __ge__(self, other: int) -> bool: ...
    def __add__(self, other: int) -> float: ...
    def __sub__(self, other: int) -> float: ...
    def __mul__(self, other: int) -> float: ...
    def __truediv__(self, other: int) -> float: ...
    def __pow__(self, other: int) -> float: ...
    def __eq__(self, other: float) -> bool: ...
    def __ne__(self, other: float) -> bool: ...
    def __lt__(self, other: float) -> bool: ...
    def __le__(self, other: float) -> bool: ...
    def __gt__(self, other: float) -> bool: ...
    def __ge__(self, other: float) -> bool: ...
    def __add__(self, other: float) -> float: ...
    def __sub__(self, other: float) -> float: ...
    def __mul__(self, other: float) -> float: ...
    def __truediv__(self, other: float) -> float: ...
    def __pow__(self, other: float) -> float: ...
    def __mul__(self, other: 'Vector2') -> 'Vector2': ...
    def __mul__(self, other: 'Vector2i') -> 'Vector2': ...
    def __mul__(self, other: 'Vector3') -> 'Vector3': ...
    def __mul__(self, other: 'Vector3i') -> 'Vector3': ...
    def __mul__(self, other: 'Vector4') -> 'Vector4': ...
    def __mul__(self, other: 'Vector4i') -> 'Vector4': ...
    def __mul__(self, other: 'Quaternion') -> 'Quaternion': ...
    def __mul__(self, other: 'Color') -> 'Color': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'PackedByteArray') -> bool: ...
    def __contains__(self, other: 'PackedInt32Array') -> bool: ...
    def __contains__(self, other: 'PackedInt64Array') -> bool: ...
    def __contains__(self, other: 'PackedFloat32Array') -> bool: ...
    def __contains__(self, other: 'PackedFloat64Array') -> bool: ...
    
class String:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mod__(self, other: 'Variant') -> 'String': ...
    def __mod__(self, other: bool) -> 'String': ...
    def __mod__(self, other: int) -> 'String': ...
    def __mod__(self, other: float) -> 'String': ...
    def __eq__(self, other: 'String') -> bool: ...
    def __ne__(self, other: 'String') -> bool: ...
    def __lt__(self, other: 'String') -> bool: ...
    def __le__(self, other: 'String') -> bool: ...
    def __gt__(self, other: 'String') -> bool: ...
    def __ge__(self, other: 'String') -> bool: ...
    def __add__(self, other: 'String') -> 'String': ...
    def __mod__(self, other: 'String') -> 'String': ...
    def __contains__(self, other: 'String') -> bool: ...
    def __mod__(self, other: 'Vector2') -> 'String': ...
    def __mod__(self, other: 'Vector2i') -> 'String': ...
    def __mod__(self, other: 'Rect2') -> 'String': ...
    def __mod__(self, other: 'Rect2i') -> 'String': ...
    def __mod__(self, other: 'Vector3') -> 'String': ...
    def __mod__(self, other: 'Vector3i') -> 'String': ...
    def __mod__(self, other: 'Transform2D') -> 'String': ...
    def __mod__(self, other: 'Vector4') -> 'String': ...
    def __mod__(self, other: 'Vector4i') -> 'String': ...
    def __mod__(self, other: 'Plane') -> 'String': ...
    def __mod__(self, other: 'Quaternion') -> 'String': ...
    def __mod__(self, other: 'AABB') -> 'String': ...
    def __mod__(self, other: 'Basis') -> 'String': ...
    def __mod__(self, other: 'Transform3D') -> 'String': ...
    def __mod__(self, other: 'Projection') -> 'String': ...
    def __mod__(self, other: 'Color') -> 'String': ...
    def __eq__(self, other: 'StringName') -> bool: ...
    def __ne__(self, other: 'StringName') -> bool: ...
    def __add__(self, other: 'StringName') -> 'String': ...
    def __mod__(self, other: 'StringName') -> 'String': ...
    def __contains__(self, other: 'StringName') -> bool: ...
    def __mod__(self, other: 'NodePath') -> 'String': ...
    def __mod__(self, other: 'Object') -> 'String': ...
    def __contains__(self, other: 'Object') -> bool: ...
    def __mod__(self, other: 'Callable') -> 'String': ...
    def __mod__(self, other: 'Signal') -> 'String': ...
    def __mod__(self, other: 'Dictionary') -> 'String': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __mod__(self, other: 'Array') -> 'String': ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __mod__(self, other: 'PackedByteArray') -> 'String': ...
    def __mod__(self, other: 'PackedInt32Array') -> 'String': ...
    def __mod__(self, other: 'PackedInt64Array') -> 'String': ...
    def __mod__(self, other: 'PackedFloat32Array') -> 'String': ...
    def __mod__(self, other: 'PackedFloat64Array') -> 'String': ...
    def __mod__(self, other: 'PackedStringArray') -> 'String': ...
    def __contains__(self, other: 'PackedStringArray') -> bool: ...
    def __mod__(self, other: 'PackedVector2Array') -> 'String': ...
    def __mod__(self, other: 'PackedVector3Array') -> 'String': ...
    def __mod__(self, other: 'PackedColorArray') -> 'String': ...
    def __mod__(self, other: 'PackedVector4Array') -> 'String': ...
    def casecmp_to(self, to: 'String') -> int: ...
    def nocasecmp_to(self, to: 'String') -> int: ...
    def naturalcasecmp_to(self, to: 'String') -> int: ...
    def naturalnocasecmp_to(self, to: 'String') -> int: ...
    def filecasecmp_to(self, to: 'String') -> int: ...
    def filenocasecmp_to(self, to: 'String') -> int: ...
    def length(self) -> int: ...
    def substr(self, from_: int, len: int = default('''-1''')) -> 'String': ...
    def get_slice(self, delimiter: 'String', slice: int) -> 'String': ...
    def get_slicec(self, delimiter: int, slice: int) -> 'String': ...
    def get_slice_count(self, delimiter: 'String') -> int: ...
    def find(self, what: 'String', from_: int = default('''0''')) -> int: ...
    def findn(self, what: 'String', from_: int = default('''0''')) -> int: ...
    def count(self, what: 'String', from_: int = default('''0'''), to: int = default('''0''')) -> int: ...
    def countn(self, what: 'String', from_: int = default('''0'''), to: int = default('''0''')) -> int: ...
    def rfind(self, what: 'String', from_: int = default('''-1''')) -> int: ...
    def rfindn(self, what: 'String', from_: int = default('''-1''')) -> int: ...
    def match(self, expr: 'String') -> bool: ...
    def matchn(self, expr: 'String') -> bool: ...
    def begins_with(self, text: 'String') -> bool: ...
    def ends_with(self, text: 'String') -> bool: ...
    def is_subsequence_of(self, text: 'String') -> bool: ...
    def is_subsequence_ofn(self, text: 'String') -> bool: ...
    def bigrams(self) -> 'PackedStringArray': ...
    def similarity(self, text: 'String') -> float: ...
    def format(self, values: 'Variant', placeholder: 'String' = default('''"{_}"''')) -> 'String': ...
    def replace(self, what: 'String', forwhat: 'String') -> 'String': ...
    def replacen(self, what: 'String', forwhat: 'String') -> 'String': ...
    def repeat(self, count: int) -> 'String': ...
    def reverse(self) -> 'String': ...
    def insert(self, position: int, what: 'String') -> 'String': ...
    def erase(self, position: int, chars: int = default('''1''')) -> 'String': ...
    def capitalize(self) -> 'String': ...
    def to_camel_case(self) -> 'String': ...
    def to_pascal_case(self) -> 'String': ...
    def to_snake_case(self) -> 'String': ...
    def split(self, delimiter: 'String' = default('''""'''), allow_empty: bool = default('''true'''), maxsplit: int = default('''0''')) -> 'PackedStringArray': ...
    def rsplit(self, delimiter: 'String' = default('''""'''), allow_empty: bool = default('''true'''), maxsplit: int = default('''0''')) -> 'PackedStringArray': ...
    def split_floats(self, delimiter: 'String', allow_empty: bool = default('''true''')) -> 'PackedFloat64Array': ...
    def join(self, parts: 'PackedStringArray') -> 'String': ...
    def to_upper(self) -> 'String': ...
    def to_lower(self) -> 'String': ...
    def left(self, length: int) -> 'String': ...
    def right(self, length: int) -> 'String': ...
    def strip_edges(self, left: bool = default('''true'''), right: bool = default('''true''')) -> 'String': ...
    def strip_escapes(self) -> 'String': ...
    def lstrip(self, chars: 'String') -> 'String': ...
    def rstrip(self, chars: 'String') -> 'String': ...
    def get_extension(self) -> 'String': ...
    def get_basename(self) -> 'String': ...
    def path_join(self, file: 'String') -> 'String': ...
    def unicode_at(self, at: int) -> int: ...
    def indent(self, prefix: 'String') -> 'String': ...
    def dedent(self) -> 'String': ...
    def hash(self) -> int: ...
    def md5_text(self) -> 'String': ...
    def sha1_text(self) -> 'String': ...
    def sha256_text(self) -> 'String': ...
    def md5_buffer(self) -> 'PackedByteArray': ...
    def sha1_buffer(self) -> 'PackedByteArray': ...
    def sha256_buffer(self) -> 'PackedByteArray': ...
    def is_empty(self) -> bool: ...
    def contains(self, what: 'String') -> bool: ...
    def containsn(self, what: 'String') -> bool: ...
    def is_absolute_path(self) -> bool: ...
    def is_relative_path(self) -> bool: ...
    def simplify_path(self) -> 'String': ...
    def get_base_dir(self) -> 'String': ...
    def get_file(self) -> 'String': ...
    def xml_escape(self, escape_quotes: bool = default('''false''')) -> 'String': ...
    def xml_unescape(self) -> 'String': ...
    def uri_encode(self) -> 'String': ...
    def uri_decode(self) -> 'String': ...
    def c_escape(self) -> 'String': ...
    def c_unescape(self) -> 'String': ...
    def json_escape(self) -> 'String': ...
    def validate_node_name(self) -> 'String': ...
    def validate_filename(self) -> 'String': ...
    def is_valid_ascii_identifier(self) -> bool: ...
    def is_valid_unicode_identifier(self) -> bool: ...
    def is_valid_identifier(self) -> bool: ...
    def is_valid_int(self) -> bool: ...
    def is_valid_float(self) -> bool: ...
    def is_valid_hex_number(self, with_prefix: bool = default('''false''')) -> bool: ...
    def is_valid_html_color(self) -> bool: ...
    def is_valid_ip_address(self) -> bool: ...
    def is_valid_filename(self) -> bool: ...
    def to_int(self) -> int: ...
    def to_float(self) -> float: ...
    def hex_to_int(self) -> int: ...
    def bin_to_int(self) -> int: ...
    def lpad(self, min_length: int, character: 'String' = default('''" "''')) -> 'String': ...
    def rpad(self, min_length: int, character: 'String' = default('''" "''')) -> 'String': ...
    def pad_decimals(self, digits: int) -> 'String': ...
    def pad_zeros(self, digits: int) -> 'String': ...
    def trim_prefix(self, prefix: 'String') -> 'String': ...
    def trim_suffix(self, suffix: 'String') -> 'String': ...
    def to_ascii_buffer(self) -> 'PackedByteArray': ...
    def to_utf8_buffer(self) -> 'PackedByteArray': ...
    def to_utf16_buffer(self) -> 'PackedByteArray': ...
    def to_utf32_buffer(self) -> 'PackedByteArray': ...
    def hex_decode(self) -> 'PackedByteArray': ...
    def to_wchar_buffer(self) -> 'PackedByteArray': ...
    @staticmethod
    def num_scientific(number: float) -> 'String': ...
    @staticmethod
    def num(number: float, decimals: int = default('''-1''')) -> 'String': ...
    @staticmethod
    def num_int64(number: int, base: int = default('''10'''), capitalize_hex: bool = default('''false''')) -> 'String': ...
    @staticmethod
    def num_uint64(number: int, base: int = default('''10'''), capitalize_hex: bool = default('''false''')) -> 'String': ...
    @staticmethod
    def chr(char: int) -> 'String': ...
    @staticmethod
    def humanize_size(size: int) -> 'String': ...
    
class Vector2:
    ZERO = default('''Vector2(0, 0)''')
    ONE = default('''Vector2(1, 1)''')
    INF = default('''Vector2(float('inf'), float('inf'))''')
    LEFT = default('''Vector2(-1, 0)''')
    RIGHT = default('''Vector2(1, 0)''')
    UP = default('''Vector2(0, -1)''')
    DOWN = default('''Vector2(0, 1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Vector2': ...
    def __mul__(self, other: int) -> 'Vector2': ...
    def __truediv__(self, other: int) -> 'Vector2': ...
    def __mul__(self, other: float) -> 'Vector2': ...
    def __truediv__(self, other: float) -> 'Vector2': ...
    def __eq__(self, other: 'Vector2') -> bool: ...
    def __ne__(self, other: 'Vector2') -> bool: ...
    def __lt__(self, other: 'Vector2') -> bool: ...
    def __le__(self, other: 'Vector2') -> bool: ...
    def __gt__(self, other: 'Vector2') -> bool: ...
    def __ge__(self, other: 'Vector2') -> bool: ...
    def __add__(self, other: 'Vector2') -> 'Vector2': ...
    def __sub__(self, other: 'Vector2') -> 'Vector2': ...
    def __mul__(self, other: 'Vector2') -> 'Vector2': ...
    def __truediv__(self, other: 'Vector2') -> 'Vector2': ...
    def __mul__(self, other: 'Transform2D') -> 'Vector2': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'PackedVector2Array') -> bool: ...
    def angle(self) -> float: ...
    def angle_to(self, to: 'Vector2') -> float: ...
    def angle_to_point(self, to: 'Vector2') -> float: ...
    def direction_to(self, to: 'Vector2') -> 'Vector2': ...
    def distance_to(self, to: 'Vector2') -> float: ...
    def distance_squared_to(self, to: 'Vector2') -> float: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def limit_length(self, length: float = default('''1.0''')) -> 'Vector2': ...
    def normalized(self) -> 'Vector2': ...
    def is_normalized(self) -> bool: ...
    def is_equal_approx(self, to: 'Vector2') -> bool: ...
    def is_zero_approx(self) -> bool: ...
    def is_finite(self) -> bool: ...
    def posmod(self, mod: float) -> 'Vector2': ...
    def posmodv(self, modv: 'Vector2') -> 'Vector2': ...
    def project(self, b: 'Vector2') -> 'Vector2': ...
    def lerp(self, to: 'Vector2', weight: float) -> 'Vector2': ...
    def slerp(self, to: 'Vector2', weight: float) -> 'Vector2': ...
    def cubic_interpolate(self, b: 'Vector2', pre_a: 'Vector2', post_b: 'Vector2', weight: float) -> 'Vector2': ...
    def cubic_interpolate_in_time(self, b: 'Vector2', pre_a: 'Vector2', post_b: 'Vector2', weight: float, b_t: float, pre_a_t: float, post_b_t: float) -> 'Vector2': ...
    def bezier_interpolate(self, control_1: 'Vector2', control_2: 'Vector2', end: 'Vector2', t: float) -> 'Vector2': ...
    def bezier_derivative(self, control_1: 'Vector2', control_2: 'Vector2', end: 'Vector2', t: float) -> 'Vector2': ...
    def max_axis_index(self) -> int: ...
    def min_axis_index(self) -> int: ...
    def move_toward(self, to: 'Vector2', delta: float) -> 'Vector2': ...
    def rotated(self, angle: float) -> 'Vector2': ...
    def orthogonal(self) -> 'Vector2': ...
    def floor(self) -> 'Vector2': ...
    def ceil(self) -> 'Vector2': ...
    def round(self) -> 'Vector2': ...
    def aspect(self) -> float: ...
    def dot(self, with_: 'Vector2') -> float: ...
    def slide(self, n: 'Vector2') -> 'Vector2': ...
    def bounce(self, n: 'Vector2') -> 'Vector2': ...
    def reflect(self, line: 'Vector2') -> 'Vector2': ...
    def cross(self, with_: 'Vector2') -> float: ...
    def abs(self) -> 'Vector2': ...
    def sign(self) -> 'Vector2': ...
    def clamp(self, min: 'Vector2', max: 'Vector2') -> 'Vector2': ...
    def clampf(self, min: float, max: float) -> 'Vector2': ...
    def snapped(self, step: 'Vector2') -> 'Vector2': ...
    def snappedf(self, step: float) -> 'Vector2': ...
    def min(self, with_: 'Vector2') -> 'Vector2': ...
    def minf(self, with_: float) -> 'Vector2': ...
    def max(self, with_: 'Vector2') -> 'Vector2': ...
    def maxf(self, with_: float) -> 'Vector2': ...
    @staticmethod
    def from_angle(angle: float) -> 'Vector2': ...
    
class Vector2_Axis(Enum):
    AXIS_X = 0
    AXIS_Y = 1

class Vector2i:
    ZERO = default('''Vector2i(0, 0)''')
    ONE = default('''Vector2i(1, 1)''')
    MIN = default('''Vector2i(-2147483648, -2147483648)''')
    MAX = default('''Vector2i(2147483647, 2147483647)''')
    LEFT = default('''Vector2i(-1, 0)''')
    RIGHT = default('''Vector2i(1, 0)''')
    UP = default('''Vector2i(0, -1)''')
    DOWN = default('''Vector2i(0, 1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Vector2i': ...
    def __mul__(self, other: int) -> 'Vector2i': ...
    def __truediv__(self, other: int) -> 'Vector2i': ...
    def __mod__(self, other: int) -> 'Vector2i': ...
    def __mul__(self, other: float) -> 'Vector2': ...
    def __truediv__(self, other: float) -> 'Vector2': ...
    def __eq__(self, other: 'Vector2i') -> bool: ...
    def __ne__(self, other: 'Vector2i') -> bool: ...
    def __lt__(self, other: 'Vector2i') -> bool: ...
    def __le__(self, other: 'Vector2i') -> bool: ...
    def __gt__(self, other: 'Vector2i') -> bool: ...
    def __ge__(self, other: 'Vector2i') -> bool: ...
    def __add__(self, other: 'Vector2i') -> 'Vector2i': ...
    def __sub__(self, other: 'Vector2i') -> 'Vector2i': ...
    def __mul__(self, other: 'Vector2i') -> 'Vector2i': ...
    def __truediv__(self, other: 'Vector2i') -> 'Vector2i': ...
    def __mod__(self, other: 'Vector2i') -> 'Vector2i': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def aspect(self) -> float: ...
    def max_axis_index(self) -> int: ...
    def min_axis_index(self) -> int: ...
    def distance_to(self, to: 'Vector2i') -> float: ...
    def distance_squared_to(self, to: 'Vector2i') -> int: ...
    def length(self) -> float: ...
    def length_squared(self) -> int: ...
    def sign(self) -> 'Vector2i': ...
    def abs(self) -> 'Vector2i': ...
    def clamp(self, min: 'Vector2i', max: 'Vector2i') -> 'Vector2i': ...
    def clampi(self, min: int, max: int) -> 'Vector2i': ...
    def snapped(self, step: 'Vector2i') -> 'Vector2i': ...
    def snappedi(self, step: int) -> 'Vector2i': ...
    def min(self, with_: 'Vector2i') -> 'Vector2i': ...
    def mini(self, with_: int) -> 'Vector2i': ...
    def max(self, with_: 'Vector2i') -> 'Vector2i': ...
    def maxi(self, with_: int) -> 'Vector2i': ...
    
class Vector2i_Axis(Enum):
    AXIS_X = 0
    AXIS_Y = 1

class Rect2:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'Rect2') -> bool: ...
    def __ne__(self, other: 'Rect2') -> bool: ...
    def __mul__(self, other: 'Transform2D') -> 'Rect2': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def get_center(self) -> 'Vector2': ...
    def get_area(self) -> float: ...
    def has_area(self) -> bool: ...
    def has_point(self, point: 'Vector2') -> bool: ...
    def is_equal_approx(self, rect: 'Rect2') -> bool: ...
    def is_finite(self) -> bool: ...
    def intersects(self, b: 'Rect2', include_borders: bool = default('''false''')) -> bool: ...
    def encloses(self, b: 'Rect2') -> bool: ...
    def intersection(self, b: 'Rect2') -> 'Rect2': ...
    def merge(self, b: 'Rect2') -> 'Rect2': ...
    def expand(self, to: 'Vector2') -> 'Rect2': ...
    def get_support(self, direction: 'Vector2') -> 'Vector2': ...
    def grow(self, amount: float) -> 'Rect2': ...
    def grow_side(self, side: int, amount: float) -> 'Rect2': ...
    def grow_individual(self, left: float, top: float, right: float, bottom: float) -> 'Rect2': ...
    def abs(self) -> 'Rect2': ...
    
class Rect2i:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'Rect2i') -> bool: ...
    def __ne__(self, other: 'Rect2i') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def get_center(self) -> 'Vector2i': ...
    def get_area(self) -> int: ...
    def has_area(self) -> bool: ...
    def has_point(self, point: 'Vector2i') -> bool: ...
    def intersects(self, b: 'Rect2i') -> bool: ...
    def encloses(self, b: 'Rect2i') -> bool: ...
    def intersection(self, b: 'Rect2i') -> 'Rect2i': ...
    def merge(self, b: 'Rect2i') -> 'Rect2i': ...
    def expand(self, to: 'Vector2i') -> 'Rect2i': ...
    def grow(self, amount: int) -> 'Rect2i': ...
    def grow_side(self, side: int, amount: int) -> 'Rect2i': ...
    def grow_individual(self, left: int, top: int, right: int, bottom: int) -> 'Rect2i': ...
    def abs(self) -> 'Rect2i': ...
    
class Vector3:
    ZERO = default('''Vector3(0, 0, 0)''')
    ONE = default('''Vector3(1, 1, 1)''')
    INF = default('''Vector3(float('inf'), float('inf'), float('inf'))''')
    LEFT = default('''Vector3(-1, 0, 0)''')
    RIGHT = default('''Vector3(1, 0, 0)''')
    UP = default('''Vector3(0, 1, 0)''')
    DOWN = default('''Vector3(0, -1, 0)''')
    FORWARD = default('''Vector3(0, 0, -1)''')
    BACK = default('''Vector3(0, 0, 1)''')
    MODEL_LEFT = default('''Vector3(1, 0, 0)''')
    MODEL_RIGHT = default('''Vector3(-1, 0, 0)''')
    MODEL_TOP = default('''Vector3(0, 1, 0)''')
    MODEL_BOTTOM = default('''Vector3(0, -1, 0)''')
    MODEL_FRONT = default('''Vector3(0, 0, 1)''')
    MODEL_REAR = default('''Vector3(0, 0, -1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Vector3': ...
    def __mul__(self, other: int) -> 'Vector3': ...
    def __truediv__(self, other: int) -> 'Vector3': ...
    def __mul__(self, other: float) -> 'Vector3': ...
    def __truediv__(self, other: float) -> 'Vector3': ...
    def __eq__(self, other: 'Vector3') -> bool: ...
    def __ne__(self, other: 'Vector3') -> bool: ...
    def __lt__(self, other: 'Vector3') -> bool: ...
    def __le__(self, other: 'Vector3') -> bool: ...
    def __gt__(self, other: 'Vector3') -> bool: ...
    def __ge__(self, other: 'Vector3') -> bool: ...
    def __add__(self, other: 'Vector3') -> 'Vector3': ...
    def __sub__(self, other: 'Vector3') -> 'Vector3': ...
    def __mul__(self, other: 'Vector3') -> 'Vector3': ...
    def __truediv__(self, other: 'Vector3') -> 'Vector3': ...
    def __mul__(self, other: 'Quaternion') -> 'Vector3': ...
    def __mul__(self, other: 'Basis') -> 'Vector3': ...
    def __mul__(self, other: 'Transform3D') -> 'Vector3': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'PackedVector3Array') -> bool: ...
    def min_axis_index(self) -> int: ...
    def max_axis_index(self) -> int: ...
    def angle_to(self, to: 'Vector3') -> float: ...
    def signed_angle_to(self, to: 'Vector3', axis: 'Vector3') -> float: ...
    def direction_to(self, to: 'Vector3') -> 'Vector3': ...
    def distance_to(self, to: 'Vector3') -> float: ...
    def distance_squared_to(self, to: 'Vector3') -> float: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def limit_length(self, length: float = default('''1.0''')) -> 'Vector3': ...
    def normalized(self) -> 'Vector3': ...
    def is_normalized(self) -> bool: ...
    def is_equal_approx(self, to: 'Vector3') -> bool: ...
    def is_zero_approx(self) -> bool: ...
    def is_finite(self) -> bool: ...
    def inverse(self) -> 'Vector3': ...
    def clamp(self, min: 'Vector3', max: 'Vector3') -> 'Vector3': ...
    def clampf(self, min: float, max: float) -> 'Vector3': ...
    def snapped(self, step: 'Vector3') -> 'Vector3': ...
    def snappedf(self, step: float) -> 'Vector3': ...
    def rotated(self, axis: 'Vector3', angle: float) -> 'Vector3': ...
    def lerp(self, to: 'Vector3', weight: float) -> 'Vector3': ...
    def slerp(self, to: 'Vector3', weight: float) -> 'Vector3': ...
    def cubic_interpolate(self, b: 'Vector3', pre_a: 'Vector3', post_b: 'Vector3', weight: float) -> 'Vector3': ...
    def cubic_interpolate_in_time(self, b: 'Vector3', pre_a: 'Vector3', post_b: 'Vector3', weight: float, b_t: float, pre_a_t: float, post_b_t: float) -> 'Vector3': ...
    def bezier_interpolate(self, control_1: 'Vector3', control_2: 'Vector3', end: 'Vector3', t: float) -> 'Vector3': ...
    def bezier_derivative(self, control_1: 'Vector3', control_2: 'Vector3', end: 'Vector3', t: float) -> 'Vector3': ...
    def move_toward(self, to: 'Vector3', delta: float) -> 'Vector3': ...
    def dot(self, with_: 'Vector3') -> float: ...
    def cross(self, with_: 'Vector3') -> 'Vector3': ...
    def outer(self, with_: 'Vector3') -> 'Basis': ...
    def abs(self) -> 'Vector3': ...
    def floor(self) -> 'Vector3': ...
    def ceil(self) -> 'Vector3': ...
    def round(self) -> 'Vector3': ...
    def posmod(self, mod: float) -> 'Vector3': ...
    def posmodv(self, modv: 'Vector3') -> 'Vector3': ...
    def project(self, b: 'Vector3') -> 'Vector3': ...
    def slide(self, n: 'Vector3') -> 'Vector3': ...
    def bounce(self, n: 'Vector3') -> 'Vector3': ...
    def reflect(self, n: 'Vector3') -> 'Vector3': ...
    def sign(self) -> 'Vector3': ...
    def octahedron_encode(self) -> 'Vector2': ...
    def min(self, with_: 'Vector3') -> 'Vector3': ...
    def minf(self, with_: float) -> 'Vector3': ...
    def max(self, with_: 'Vector3') -> 'Vector3': ...
    def maxf(self, with_: float) -> 'Vector3': ...
    @staticmethod
    def octahedron_decode(uv: 'Vector2') -> 'Vector3': ...
    
class Vector3_Axis(Enum):
    AXIS_X = 0
    AXIS_Y = 1
    AXIS_Z = 2

class Vector3i:
    ZERO = default('''Vector3i(0, 0, 0)''')
    ONE = default('''Vector3i(1, 1, 1)''')
    MIN = default('''Vector3i(-2147483648, -2147483648, -2147483648)''')
    MAX = default('''Vector3i(2147483647, 2147483647, 2147483647)''')
    LEFT = default('''Vector3i(-1, 0, 0)''')
    RIGHT = default('''Vector3i(1, 0, 0)''')
    UP = default('''Vector3i(0, 1, 0)''')
    DOWN = default('''Vector3i(0, -1, 0)''')
    FORWARD = default('''Vector3i(0, 0, -1)''')
    BACK = default('''Vector3i(0, 0, 1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Vector3i': ...
    def __mul__(self, other: int) -> 'Vector3i': ...
    def __truediv__(self, other: int) -> 'Vector3i': ...
    def __mod__(self, other: int) -> 'Vector3i': ...
    def __mul__(self, other: float) -> 'Vector3': ...
    def __truediv__(self, other: float) -> 'Vector3': ...
    def __eq__(self, other: 'Vector3i') -> bool: ...
    def __ne__(self, other: 'Vector3i') -> bool: ...
    def __lt__(self, other: 'Vector3i') -> bool: ...
    def __le__(self, other: 'Vector3i') -> bool: ...
    def __gt__(self, other: 'Vector3i') -> bool: ...
    def __ge__(self, other: 'Vector3i') -> bool: ...
    def __add__(self, other: 'Vector3i') -> 'Vector3i': ...
    def __sub__(self, other: 'Vector3i') -> 'Vector3i': ...
    def __mul__(self, other: 'Vector3i') -> 'Vector3i': ...
    def __truediv__(self, other: 'Vector3i') -> 'Vector3i': ...
    def __mod__(self, other: 'Vector3i') -> 'Vector3i': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def min_axis_index(self) -> int: ...
    def max_axis_index(self) -> int: ...
    def distance_to(self, to: 'Vector3i') -> float: ...
    def distance_squared_to(self, to: 'Vector3i') -> int: ...
    def length(self) -> float: ...
    def length_squared(self) -> int: ...
    def sign(self) -> 'Vector3i': ...
    def abs(self) -> 'Vector3i': ...
    def clamp(self, min: 'Vector3i', max: 'Vector3i') -> 'Vector3i': ...
    def clampi(self, min: int, max: int) -> 'Vector3i': ...
    def snapped(self, step: 'Vector3i') -> 'Vector3i': ...
    def snappedi(self, step: int) -> 'Vector3i': ...
    def min(self, with_: 'Vector3i') -> 'Vector3i': ...
    def mini(self, with_: int) -> 'Vector3i': ...
    def max(self, with_: 'Vector3i') -> 'Vector3i': ...
    def maxi(self, with_: int) -> 'Vector3i': ...
    
class Vector3i_Axis(Enum):
    AXIS_X = 0
    AXIS_Y = 1
    AXIS_Z = 2

class Transform2D:
    IDENTITY = default('''Transform2D(1, 0, 0, 1, 0, 0)''')
    FLIP_X = default('''Transform2D(-1, 0, 0, 1, 0, 0)''')
    FLIP_Y = default('''Transform2D(1, 0, 0, -1, 0, 0)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mul__(self, other: int) -> 'Transform2D': ...
    def __truediv__(self, other: int) -> 'Transform2D': ...
    def __mul__(self, other: float) -> 'Transform2D': ...
    def __truediv__(self, other: float) -> 'Transform2D': ...
    def __mul__(self, other: 'Vector2') -> 'Vector2': ...
    def __mul__(self, other: 'Rect2') -> 'Rect2': ...
    def __eq__(self, other: 'Transform2D') -> bool: ...
    def __ne__(self, other: 'Transform2D') -> bool: ...
    def __mul__(self, other: 'Transform2D') -> 'Transform2D': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __mul__(self, other: 'PackedVector2Array') -> 'PackedVector2Array': ...
    def inverse(self) -> 'Transform2D': ...
    def affine_inverse(self) -> 'Transform2D': ...
    def get_rotation(self) -> float: ...
    def get_origin(self) -> 'Vector2': ...
    def get_scale(self) -> 'Vector2': ...
    def get_skew(self) -> float: ...
    def orthonormalized(self) -> 'Transform2D': ...
    def rotated(self, angle: float) -> 'Transform2D': ...
    def rotated_local(self, angle: float) -> 'Transform2D': ...
    def scaled(self, scale: 'Vector2') -> 'Transform2D': ...
    def scaled_local(self, scale: 'Vector2') -> 'Transform2D': ...
    def translated(self, offset: 'Vector2') -> 'Transform2D': ...
    def translated_local(self, offset: 'Vector2') -> 'Transform2D': ...
    def determinant(self) -> float: ...
    def basis_xform(self, v: 'Vector2') -> 'Vector2': ...
    def basis_xform_inv(self, v: 'Vector2') -> 'Vector2': ...
    def interpolate_with(self, xform: 'Transform2D', weight: float) -> 'Transform2D': ...
    def is_conformal(self) -> bool: ...
    def is_equal_approx(self, xform: 'Transform2D') -> bool: ...
    def is_finite(self) -> bool: ...
    def looking_at(self, target: 'Vector2' = default('''Vector2(0, 0)''')) -> 'Transform2D': ...
    
class Vector4:
    ZERO = default('''Vector4(0, 0, 0, 0)''')
    ONE = default('''Vector4(1, 1, 1, 1)''')
    INF = default('''Vector4(float('inf'), float('inf'), float('inf'), float('inf'))''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Vector4': ...
    def __mul__(self, other: int) -> 'Vector4': ...
    def __truediv__(self, other: int) -> 'Vector4': ...
    def __mul__(self, other: float) -> 'Vector4': ...
    def __truediv__(self, other: float) -> 'Vector4': ...
    def __eq__(self, other: 'Vector4') -> bool: ...
    def __ne__(self, other: 'Vector4') -> bool: ...
    def __lt__(self, other: 'Vector4') -> bool: ...
    def __le__(self, other: 'Vector4') -> bool: ...
    def __gt__(self, other: 'Vector4') -> bool: ...
    def __ge__(self, other: 'Vector4') -> bool: ...
    def __add__(self, other: 'Vector4') -> 'Vector4': ...
    def __sub__(self, other: 'Vector4') -> 'Vector4': ...
    def __mul__(self, other: 'Vector4') -> 'Vector4': ...
    def __truediv__(self, other: 'Vector4') -> 'Vector4': ...
    def __mul__(self, other: 'Projection') -> 'Vector4': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'PackedVector4Array') -> bool: ...
    def min_axis_index(self) -> int: ...
    def max_axis_index(self) -> int: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def abs(self) -> 'Vector4': ...
    def sign(self) -> 'Vector4': ...
    def floor(self) -> 'Vector4': ...
    def ceil(self) -> 'Vector4': ...
    def round(self) -> 'Vector4': ...
    def lerp(self, to: 'Vector4', weight: float) -> 'Vector4': ...
    def cubic_interpolate(self, b: 'Vector4', pre_a: 'Vector4', post_b: 'Vector4', weight: float) -> 'Vector4': ...
    def cubic_interpolate_in_time(self, b: 'Vector4', pre_a: 'Vector4', post_b: 'Vector4', weight: float, b_t: float, pre_a_t: float, post_b_t: float) -> 'Vector4': ...
    def posmod(self, mod: float) -> 'Vector4': ...
    def posmodv(self, modv: 'Vector4') -> 'Vector4': ...
    def snapped(self, step: 'Vector4') -> 'Vector4': ...
    def snappedf(self, step: float) -> 'Vector4': ...
    def clamp(self, min: 'Vector4', max: 'Vector4') -> 'Vector4': ...
    def clampf(self, min: float, max: float) -> 'Vector4': ...
    def normalized(self) -> 'Vector4': ...
    def is_normalized(self) -> bool: ...
    def direction_to(self, to: 'Vector4') -> 'Vector4': ...
    def distance_to(self, to: 'Vector4') -> float: ...
    def distance_squared_to(self, to: 'Vector4') -> float: ...
    def dot(self, with_: 'Vector4') -> float: ...
    def inverse(self) -> 'Vector4': ...
    def is_equal_approx(self, to: 'Vector4') -> bool: ...
    def is_zero_approx(self) -> bool: ...
    def is_finite(self) -> bool: ...
    def min(self, with_: 'Vector4') -> 'Vector4': ...
    def minf(self, with_: float) -> 'Vector4': ...
    def max(self, with_: 'Vector4') -> 'Vector4': ...
    def maxf(self, with_: float) -> 'Vector4': ...
    
class Vector4_Axis(Enum):
    AXIS_X = 0
    AXIS_Y = 1
    AXIS_Z = 2
    AXIS_W = 3

class Vector4i:
    ZERO = default('''Vector4i(0, 0, 0, 0)''')
    ONE = default('''Vector4i(1, 1, 1, 1)''')
    MIN = default('''Vector4i(-2147483648, -2147483648, -2147483648, -2147483648)''')
    MAX = default('''Vector4i(2147483647, 2147483647, 2147483647, 2147483647)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Vector4i': ...
    def __mul__(self, other: int) -> 'Vector4i': ...
    def __truediv__(self, other: int) -> 'Vector4i': ...
    def __mod__(self, other: int) -> 'Vector4i': ...
    def __mul__(self, other: float) -> 'Vector4': ...
    def __truediv__(self, other: float) -> 'Vector4': ...
    def __eq__(self, other: 'Vector4i') -> bool: ...
    def __ne__(self, other: 'Vector4i') -> bool: ...
    def __lt__(self, other: 'Vector4i') -> bool: ...
    def __le__(self, other: 'Vector4i') -> bool: ...
    def __gt__(self, other: 'Vector4i') -> bool: ...
    def __ge__(self, other: 'Vector4i') -> bool: ...
    def __add__(self, other: 'Vector4i') -> 'Vector4i': ...
    def __sub__(self, other: 'Vector4i') -> 'Vector4i': ...
    def __mul__(self, other: 'Vector4i') -> 'Vector4i': ...
    def __truediv__(self, other: 'Vector4i') -> 'Vector4i': ...
    def __mod__(self, other: 'Vector4i') -> 'Vector4i': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def min_axis_index(self) -> int: ...
    def max_axis_index(self) -> int: ...
    def length(self) -> float: ...
    def length_squared(self) -> int: ...
    def sign(self) -> 'Vector4i': ...
    def abs(self) -> 'Vector4i': ...
    def clamp(self, min: 'Vector4i', max: 'Vector4i') -> 'Vector4i': ...
    def clampi(self, min: int, max: int) -> 'Vector4i': ...
    def snapped(self, step: 'Vector4i') -> 'Vector4i': ...
    def snappedi(self, step: int) -> 'Vector4i': ...
    def min(self, with_: 'Vector4i') -> 'Vector4i': ...
    def mini(self, with_: int) -> 'Vector4i': ...
    def max(self, with_: 'Vector4i') -> 'Vector4i': ...
    def maxi(self, with_: int) -> 'Vector4i': ...
    def distance_to(self, to: 'Vector4i') -> float: ...
    def distance_squared_to(self, to: 'Vector4i') -> int: ...
    
class Vector4i_Axis(Enum):
    AXIS_X = 0
    AXIS_Y = 1
    AXIS_Z = 2
    AXIS_W = 3

class Plane:
    PLANE_YZ = default('''Plane(1, 0, 0, 0)''')
    PLANE_XZ = default('''Plane(0, 1, 0, 0)''')
    PLANE_XY = default('''Plane(0, 0, 1, 0)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Plane': ...
    def __eq__(self, other: 'Plane') -> bool: ...
    def __ne__(self, other: 'Plane') -> bool: ...
    def __mul__(self, other: 'Transform3D') -> 'Plane': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def normalized(self) -> 'Plane': ...
    def get_center(self) -> 'Vector3': ...
    def is_equal_approx(self, to_plane: 'Plane') -> bool: ...
    def is_finite(self) -> bool: ...
    def is_point_over(self, point: 'Vector3') -> bool: ...
    def distance_to(self, point: 'Vector3') -> float: ...
    def has_point(self, point: 'Vector3', tolerance: float = default('''1e-05''')) -> bool: ...
    def project(self, point: 'Vector3') -> 'Vector3': ...
    def intersect_3(self, b: 'Plane', c: 'Plane') -> 'Variant': ...
    def intersects_ray(self, from_: 'Vector3', dir: 'Vector3') -> 'Variant': ...
    def intersects_segment(self, from_: 'Vector3', to: 'Vector3') -> 'Variant': ...
    
class Quaternion:
    IDENTITY = default('''Quaternion(0, 0, 0, 1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Quaternion': ...
    def __mul__(self, other: int) -> 'Quaternion': ...
    def __truediv__(self, other: int) -> 'Quaternion': ...
    def __mul__(self, other: float) -> 'Quaternion': ...
    def __truediv__(self, other: float) -> 'Quaternion': ...
    def __mul__(self, other: 'Vector3') -> 'Vector3': ...
    def __eq__(self, other: 'Quaternion') -> bool: ...
    def __ne__(self, other: 'Quaternion') -> bool: ...
    def __add__(self, other: 'Quaternion') -> 'Quaternion': ...
    def __sub__(self, other: 'Quaternion') -> 'Quaternion': ...
    def __mul__(self, other: 'Quaternion') -> 'Quaternion': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def length(self) -> float: ...
    def length_squared(self) -> float: ...
    def normalized(self) -> 'Quaternion': ...
    def is_normalized(self) -> bool: ...
    def is_equal_approx(self, to: 'Quaternion') -> bool: ...
    def is_finite(self) -> bool: ...
    def inverse(self) -> 'Quaternion': ...
    def log(self) -> 'Quaternion': ...
    def exp(self) -> 'Quaternion': ...
    def angle_to(self, to: 'Quaternion') -> float: ...
    def dot(self, with_: 'Quaternion') -> float: ...
    def slerp(self, to: 'Quaternion', weight: float) -> 'Quaternion': ...
    def slerpni(self, to: 'Quaternion', weight: float) -> 'Quaternion': ...
    def spherical_cubic_interpolate(self, b: 'Quaternion', pre_a: 'Quaternion', post_b: 'Quaternion', weight: float) -> 'Quaternion': ...
    def spherical_cubic_interpolate_in_time(self, b: 'Quaternion', pre_a: 'Quaternion', post_b: 'Quaternion', weight: float, b_t: float, pre_a_t: float, post_b_t: float) -> 'Quaternion': ...
    def get_euler(self, order: int = default('''2''')) -> 'Vector3': ...
    @staticmethod
    def from_euler(euler: 'Vector3') -> 'Quaternion': ...
    def get_axis(self) -> 'Vector3': ...
    def get_angle(self) -> float: ...
    
class AABB:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'AABB') -> bool: ...
    def __ne__(self, other: 'AABB') -> bool: ...
    def __mul__(self, other: 'Transform3D') -> 'AABB': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def abs(self) -> 'AABB': ...
    def get_center(self) -> 'Vector3': ...
    def get_volume(self) -> float: ...
    def has_volume(self) -> bool: ...
    def has_surface(self) -> bool: ...
    def has_point(self, point: 'Vector3') -> bool: ...
    def is_equal_approx(self, aabb: 'AABB') -> bool: ...
    def is_finite(self) -> bool: ...
    def intersects(self, with_: 'AABB') -> bool: ...
    def encloses(self, with_: 'AABB') -> bool: ...
    def intersects_plane(self, plane: 'Plane') -> bool: ...
    def intersection(self, with_: 'AABB') -> 'AABB': ...
    def merge(self, with_: 'AABB') -> 'AABB': ...
    def expand(self, to_point: 'Vector3') -> 'AABB': ...
    def grow(self, by: float) -> 'AABB': ...
    def get_support(self, direction: 'Vector3') -> 'Vector3': ...
    def get_longest_axis(self) -> 'Vector3': ...
    def get_longest_axis_index(self) -> int: ...
    def get_longest_axis_size(self) -> float: ...
    def get_shortest_axis(self) -> 'Vector3': ...
    def get_shortest_axis_index(self) -> int: ...
    def get_shortest_axis_size(self) -> float: ...
    def get_endpoint(self, idx: int) -> 'Vector3': ...
    def intersects_segment(self, from_: 'Vector3', to: 'Vector3') -> 'Variant': ...
    def intersects_ray(self, from_: 'Vector3', dir: 'Vector3') -> 'Variant': ...
    
class Basis:
    IDENTITY = default('''Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)''')
    FLIP_X = default('''Basis(-1, 0, 0, 0, 1, 0, 0, 0, 1)''')
    FLIP_Y = default('''Basis(1, 0, 0, 0, -1, 0, 0, 0, 1)''')
    FLIP_Z = default('''Basis(1, 0, 0, 0, 1, 0, 0, 0, -1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mul__(self, other: int) -> 'Basis': ...
    def __truediv__(self, other: int) -> 'Basis': ...
    def __mul__(self, other: float) -> 'Basis': ...
    def __truediv__(self, other: float) -> 'Basis': ...
    def __mul__(self, other: 'Vector3') -> 'Vector3': ...
    def __eq__(self, other: 'Basis') -> bool: ...
    def __ne__(self, other: 'Basis') -> bool: ...
    def __mul__(self, other: 'Basis') -> 'Basis': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def inverse(self) -> 'Basis': ...
    def transposed(self) -> 'Basis': ...
    def orthonormalized(self) -> 'Basis': ...
    def determinant(self) -> float: ...
    def rotated(self, axis: 'Vector3', angle: float) -> 'Basis': ...
    def scaled(self, scale: 'Vector3') -> 'Basis': ...
    def get_scale(self) -> 'Vector3': ...
    def get_euler(self, order: int = default('''2''')) -> 'Vector3': ...
    def tdotx(self, with_: 'Vector3') -> float: ...
    def tdoty(self, with_: 'Vector3') -> float: ...
    def tdotz(self, with_: 'Vector3') -> float: ...
    def slerp(self, to: 'Basis', weight: float) -> 'Basis': ...
    def is_conformal(self) -> bool: ...
    def is_equal_approx(self, b: 'Basis') -> bool: ...
    def is_finite(self) -> bool: ...
    def get_rotation_quaternion(self) -> 'Quaternion': ...
    @staticmethod
    def looking_at(target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: bool = default('''false''')) -> 'Basis': ...
    @staticmethod
    def from_scale(scale: 'Vector3') -> 'Basis': ...
    @staticmethod
    def from_euler(euler: 'Vector3', order: int = default('''2''')) -> 'Basis': ...
    
class Transform3D:
    IDENTITY = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)''')
    FLIP_X = default('''Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)''')
    FLIP_Y = default('''Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)''')
    FLIP_Z = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mul__(self, other: int) -> 'Transform3D': ...
    def __truediv__(self, other: int) -> 'Transform3D': ...
    def __mul__(self, other: float) -> 'Transform3D': ...
    def __truediv__(self, other: float) -> 'Transform3D': ...
    def __mul__(self, other: 'Vector3') -> 'Vector3': ...
    def __mul__(self, other: 'Plane') -> 'Plane': ...
    def __mul__(self, other: 'AABB') -> 'AABB': ...
    def __eq__(self, other: 'Transform3D') -> bool: ...
    def __ne__(self, other: 'Transform3D') -> bool: ...
    def __mul__(self, other: 'Transform3D') -> 'Transform3D': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __mul__(self, other: 'PackedVector3Array') -> 'PackedVector3Array': ...
    def inverse(self) -> 'Transform3D': ...
    def affine_inverse(self) -> 'Transform3D': ...
    def orthonormalized(self) -> 'Transform3D': ...
    def rotated(self, axis: 'Vector3', angle: float) -> 'Transform3D': ...
    def rotated_local(self, axis: 'Vector3', angle: float) -> 'Transform3D': ...
    def scaled(self, scale: 'Vector3') -> 'Transform3D': ...
    def scaled_local(self, scale: 'Vector3') -> 'Transform3D': ...
    def translated(self, offset: 'Vector3') -> 'Transform3D': ...
    def translated_local(self, offset: 'Vector3') -> 'Transform3D': ...
    def looking_at(self, target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: bool = default('''false''')) -> 'Transform3D': ...
    def interpolate_with(self, xform: 'Transform3D', weight: float) -> 'Transform3D': ...
    def is_equal_approx(self, xform: 'Transform3D') -> bool: ...
    def is_finite(self) -> bool: ...
    
class Projection:
    IDENTITY = default('''Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)''')
    ZERO = default('''Projection(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mul__(self, other: 'Vector4') -> 'Vector4': ...
    def __eq__(self, other: 'Projection') -> bool: ...
    def __ne__(self, other: 'Projection') -> bool: ...
    def __mul__(self, other: 'Projection') -> 'Projection': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    @staticmethod
    def create_depth_correction(flip_y: bool) -> 'Projection': ...
    @staticmethod
    def create_light_atlas_rect(rect: 'Rect2') -> 'Projection': ...
    @staticmethod
    def create_perspective(fovy: float, aspect: float, z_near: float, z_far: float, flip_fov: bool = default('''false''')) -> 'Projection': ...
    @staticmethod
    def create_perspective_hmd(fovy: float, aspect: float, z_near: float, z_far: float, flip_fov: bool, eye: int, intraocular_dist: float, convergence_dist: float) -> 'Projection': ...
    @staticmethod
    def create_for_hmd(eye: int, aspect: float, intraocular_dist: float, display_width: float, display_to_lens: float, oversample: float, z_near: float, z_far: float) -> 'Projection': ...
    @staticmethod
    def create_orthogonal(left: float, right: float, bottom: float, top: float, z_near: float, z_far: float) -> 'Projection': ...
    @staticmethod
    def create_orthogonal_aspect(size: float, aspect: float, z_near: float, z_far: float, flip_fov: bool = default('''false''')) -> 'Projection': ...
    @staticmethod
    def create_frustum(left: float, right: float, bottom: float, top: float, z_near: float, z_far: float) -> 'Projection': ...
    @staticmethod
    def create_frustum_aspect(size: float, aspect: float, offset: 'Vector2', z_near: float, z_far: float, flip_fov: bool = default('''false''')) -> 'Projection': ...
    @staticmethod
    def create_fit_aabb(aabb: 'AABB') -> 'Projection': ...
    def determinant(self) -> float: ...
    def perspective_znear_adjusted(self, new_znear: float) -> 'Projection': ...
    def get_projection_plane(self, plane: int) -> 'Plane': ...
    def flipped_y(self) -> 'Projection': ...
    def jitter_offseted(self, offset: 'Vector2') -> 'Projection': ...
    @staticmethod
    def get_fovy(fovx: float, aspect: float) -> float: ...
    def get_z_far(self) -> float: ...
    def get_z_near(self) -> float: ...
    def get_aspect(self) -> float: ...
    def get_fov(self) -> float: ...
    def is_orthogonal(self) -> bool: ...
    def get_viewport_half_extents(self) -> 'Vector2': ...
    def get_far_plane_half_extents(self) -> 'Vector2': ...
    def inverse(self) -> 'Projection': ...
    def get_pixels_per_meter(self, for_pixel_width: int) -> int: ...
    def get_lod_multiplier(self) -> float: ...
    
class Projection_Planes(Enum):
    PLANE_NEAR = 0
    PLANE_FAR = 1
    PLANE_LEFT = 2
    PLANE_TOP = 3
    PLANE_RIGHT = 4
    PLANE_BOTTOM = 5

class Color:
    ALICE_BLUE = default('''Color(0.941176, 0.972549, 1, 1)''')
    ANTIQUE_WHITE = default('''Color(0.980392, 0.921569, 0.843137, 1)''')
    AQUA = default('''Color(0, 1, 1, 1)''')
    AQUAMARINE = default('''Color(0.498039, 1, 0.831373, 1)''')
    AZURE = default('''Color(0.941176, 1, 1, 1)''')
    BEIGE = default('''Color(0.960784, 0.960784, 0.862745, 1)''')
    BISQUE = default('''Color(1, 0.894118, 0.768627, 1)''')
    BLACK = default('''Color(0, 0, 0, 1)''')
    BLANCHED_ALMOND = default('''Color(1, 0.921569, 0.803922, 1)''')
    BLUE = default('''Color(0, 0, 1, 1)''')
    BLUE_VIOLET = default('''Color(0.541176, 0.168627, 0.886275, 1)''')
    BROWN = default('''Color(0.647059, 0.164706, 0.164706, 1)''')
    BURLYWOOD = default('''Color(0.870588, 0.721569, 0.529412, 1)''')
    CADET_BLUE = default('''Color(0.372549, 0.619608, 0.627451, 1)''')
    CHARTREUSE = default('''Color(0.498039, 1, 0, 1)''')
    CHOCOLATE = default('''Color(0.823529, 0.411765, 0.117647, 1)''')
    CORAL = default('''Color(1, 0.498039, 0.313726, 1)''')
    CORNFLOWER_BLUE = default('''Color(0.392157, 0.584314, 0.929412, 1)''')
    CORNSILK = default('''Color(1, 0.972549, 0.862745, 1)''')
    CRIMSON = default('''Color(0.862745, 0.0784314, 0.235294, 1)''')
    CYAN = default('''Color(0, 1, 1, 1)''')
    DARK_BLUE = default('''Color(0, 0, 0.545098, 1)''')
    DARK_CYAN = default('''Color(0, 0.545098, 0.545098, 1)''')
    DARK_GOLDENROD = default('''Color(0.721569, 0.52549, 0.0431373, 1)''')
    DARK_GRAY = default('''Color(0.662745, 0.662745, 0.662745, 1)''')
    DARK_GREEN = default('''Color(0, 0.392157, 0, 1)''')
    DARK_KHAKI = default('''Color(0.741176, 0.717647, 0.419608, 1)''')
    DARK_MAGENTA = default('''Color(0.545098, 0, 0.545098, 1)''')
    DARK_OLIVE_GREEN = default('''Color(0.333333, 0.419608, 0.184314, 1)''')
    DARK_ORANGE = default('''Color(1, 0.54902, 0, 1)''')
    DARK_ORCHID = default('''Color(0.6, 0.196078, 0.8, 1)''')
    DARK_RED = default('''Color(0.545098, 0, 0, 1)''')
    DARK_SALMON = default('''Color(0.913725, 0.588235, 0.478431, 1)''')
    DARK_SEA_GREEN = default('''Color(0.560784, 0.737255, 0.560784, 1)''')
    DARK_SLATE_BLUE = default('''Color(0.282353, 0.239216, 0.545098, 1)''')
    DARK_SLATE_GRAY = default('''Color(0.184314, 0.309804, 0.309804, 1)''')
    DARK_TURQUOISE = default('''Color(0, 0.807843, 0.819608, 1)''')
    DARK_VIOLET = default('''Color(0.580392, 0, 0.827451, 1)''')
    DEEP_PINK = default('''Color(1, 0.0784314, 0.576471, 1)''')
    DEEP_SKY_BLUE = default('''Color(0, 0.74902, 1, 1)''')
    DIM_GRAY = default('''Color(0.411765, 0.411765, 0.411765, 1)''')
    DODGER_BLUE = default('''Color(0.117647, 0.564706, 1, 1)''')
    FIREBRICK = default('''Color(0.698039, 0.133333, 0.133333, 1)''')
    FLORAL_WHITE = default('''Color(1, 0.980392, 0.941176, 1)''')
    FOREST_GREEN = default('''Color(0.133333, 0.545098, 0.133333, 1)''')
    FUCHSIA = default('''Color(1, 0, 1, 1)''')
    GAINSBORO = default('''Color(0.862745, 0.862745, 0.862745, 1)''')
    GHOST_WHITE = default('''Color(0.972549, 0.972549, 1, 1)''')
    GOLD = default('''Color(1, 0.843137, 0, 1)''')
    GOLDENROD = default('''Color(0.854902, 0.647059, 0.12549, 1)''')
    GRAY = default('''Color(0.745098, 0.745098, 0.745098, 1)''')
    GREEN = default('''Color(0, 1, 0, 1)''')
    GREEN_YELLOW = default('''Color(0.678431, 1, 0.184314, 1)''')
    HONEYDEW = default('''Color(0.941176, 1, 0.941176, 1)''')
    HOT_PINK = default('''Color(1, 0.411765, 0.705882, 1)''')
    INDIAN_RED = default('''Color(0.803922, 0.360784, 0.360784, 1)''')
    INDIGO = default('''Color(0.294118, 0, 0.509804, 1)''')
    IVORY = default('''Color(1, 1, 0.941176, 1)''')
    KHAKI = default('''Color(0.941176, 0.901961, 0.54902, 1)''')
    LAVENDER = default('''Color(0.901961, 0.901961, 0.980392, 1)''')
    LAVENDER_BLUSH = default('''Color(1, 0.941176, 0.960784, 1)''')
    LAWN_GREEN = default('''Color(0.486275, 0.988235, 0, 1)''')
    LEMON_CHIFFON = default('''Color(1, 0.980392, 0.803922, 1)''')
    LIGHT_BLUE = default('''Color(0.678431, 0.847059, 0.901961, 1)''')
    LIGHT_CORAL = default('''Color(0.941176, 0.501961, 0.501961, 1)''')
    LIGHT_CYAN = default('''Color(0.878431, 1, 1, 1)''')
    LIGHT_GOLDENROD = default('''Color(0.980392, 0.980392, 0.823529, 1)''')
    LIGHT_GRAY = default('''Color(0.827451, 0.827451, 0.827451, 1)''')
    LIGHT_GREEN = default('''Color(0.564706, 0.933333, 0.564706, 1)''')
    LIGHT_PINK = default('''Color(1, 0.713726, 0.756863, 1)''')
    LIGHT_SALMON = default('''Color(1, 0.627451, 0.478431, 1)''')
    LIGHT_SEA_GREEN = default('''Color(0.12549, 0.698039, 0.666667, 1)''')
    LIGHT_SKY_BLUE = default('''Color(0.529412, 0.807843, 0.980392, 1)''')
    LIGHT_SLATE_GRAY = default('''Color(0.466667, 0.533333, 0.6, 1)''')
    LIGHT_STEEL_BLUE = default('''Color(0.690196, 0.768627, 0.870588, 1)''')
    LIGHT_YELLOW = default('''Color(1, 1, 0.878431, 1)''')
    LIME = default('''Color(0, 1, 0, 1)''')
    LIME_GREEN = default('''Color(0.196078, 0.803922, 0.196078, 1)''')
    LINEN = default('''Color(0.980392, 0.941176, 0.901961, 1)''')
    MAGENTA = default('''Color(1, 0, 1, 1)''')
    MAROON = default('''Color(0.690196, 0.188235, 0.376471, 1)''')
    MEDIUM_AQUAMARINE = default('''Color(0.4, 0.803922, 0.666667, 1)''')
    MEDIUM_BLUE = default('''Color(0, 0, 0.803922, 1)''')
    MEDIUM_ORCHID = default('''Color(0.729412, 0.333333, 0.827451, 1)''')
    MEDIUM_PURPLE = default('''Color(0.576471, 0.439216, 0.858824, 1)''')
    MEDIUM_SEA_GREEN = default('''Color(0.235294, 0.701961, 0.443137, 1)''')
    MEDIUM_SLATE_BLUE = default('''Color(0.482353, 0.407843, 0.933333, 1)''')
    MEDIUM_SPRING_GREEN = default('''Color(0, 0.980392, 0.603922, 1)''')
    MEDIUM_TURQUOISE = default('''Color(0.282353, 0.819608, 0.8, 1)''')
    MEDIUM_VIOLET_RED = default('''Color(0.780392, 0.0823529, 0.521569, 1)''')
    MIDNIGHT_BLUE = default('''Color(0.0980392, 0.0980392, 0.439216, 1)''')
    MINT_CREAM = default('''Color(0.960784, 1, 0.980392, 1)''')
    MISTY_ROSE = default('''Color(1, 0.894118, 0.882353, 1)''')
    MOCCASIN = default('''Color(1, 0.894118, 0.709804, 1)''')
    NAVAJO_WHITE = default('''Color(1, 0.870588, 0.678431, 1)''')
    NAVY_BLUE = default('''Color(0, 0, 0.501961, 1)''')
    OLD_LACE = default('''Color(0.992157, 0.960784, 0.901961, 1)''')
    OLIVE = default('''Color(0.501961, 0.501961, 0, 1)''')
    OLIVE_DRAB = default('''Color(0.419608, 0.556863, 0.137255, 1)''')
    ORANGE = default('''Color(1, 0.647059, 0, 1)''')
    ORANGE_RED = default('''Color(1, 0.270588, 0, 1)''')
    ORCHID = default('''Color(0.854902, 0.439216, 0.839216, 1)''')
    PALE_GOLDENROD = default('''Color(0.933333, 0.909804, 0.666667, 1)''')
    PALE_GREEN = default('''Color(0.596078, 0.984314, 0.596078, 1)''')
    PALE_TURQUOISE = default('''Color(0.686275, 0.933333, 0.933333, 1)''')
    PALE_VIOLET_RED = default('''Color(0.858824, 0.439216, 0.576471, 1)''')
    PAPAYA_WHIP = default('''Color(1, 0.937255, 0.835294, 1)''')
    PEACH_PUFF = default('''Color(1, 0.854902, 0.72549, 1)''')
    PERU = default('''Color(0.803922, 0.521569, 0.247059, 1)''')
    PINK = default('''Color(1, 0.752941, 0.796078, 1)''')
    PLUM = default('''Color(0.866667, 0.627451, 0.866667, 1)''')
    POWDER_BLUE = default('''Color(0.690196, 0.878431, 0.901961, 1)''')
    PURPLE = default('''Color(0.627451, 0.12549, 0.941176, 1)''')
    REBECCA_PURPLE = default('''Color(0.4, 0.2, 0.6, 1)''')
    RED = default('''Color(1, 0, 0, 1)''')
    ROSY_BROWN = default('''Color(0.737255, 0.560784, 0.560784, 1)''')
    ROYAL_BLUE = default('''Color(0.254902, 0.411765, 0.882353, 1)''')
    SADDLE_BROWN = default('''Color(0.545098, 0.270588, 0.0745098, 1)''')
    SALMON = default('''Color(0.980392, 0.501961, 0.447059, 1)''')
    SANDY_BROWN = default('''Color(0.956863, 0.643137, 0.376471, 1)''')
    SEA_GREEN = default('''Color(0.180392, 0.545098, 0.341176, 1)''')
    SEASHELL = default('''Color(1, 0.960784, 0.933333, 1)''')
    SIENNA = default('''Color(0.627451, 0.321569, 0.176471, 1)''')
    SILVER = default('''Color(0.752941, 0.752941, 0.752941, 1)''')
    SKY_BLUE = default('''Color(0.529412, 0.807843, 0.921569, 1)''')
    SLATE_BLUE = default('''Color(0.415686, 0.352941, 0.803922, 1)''')
    SLATE_GRAY = default('''Color(0.439216, 0.501961, 0.564706, 1)''')
    SNOW = default('''Color(1, 0.980392, 0.980392, 1)''')
    SPRING_GREEN = default('''Color(0, 1, 0.498039, 1)''')
    STEEL_BLUE = default('''Color(0.27451, 0.509804, 0.705882, 1)''')
    TAN = default('''Color(0.823529, 0.705882, 0.54902, 1)''')
    TEAL = default('''Color(0, 0.501961, 0.501961, 1)''')
    THISTLE = default('''Color(0.847059, 0.74902, 0.847059, 1)''')
    TOMATO = default('''Color(1, 0.388235, 0.278431, 1)''')
    TRANSPARENT = default('''Color(1, 1, 1, 0)''')
    TURQUOISE = default('''Color(0.25098, 0.878431, 0.815686, 1)''')
    VIOLET = default('''Color(0.933333, 0.509804, 0.933333, 1)''')
    WEB_GRAY = default('''Color(0.501961, 0.501961, 0.501961, 1)''')
    WEB_GREEN = default('''Color(0, 0.501961, 0, 1)''')
    WEB_MAROON = default('''Color(0.501961, 0, 0, 1)''')
    WEB_PURPLE = default('''Color(0.501961, 0, 0.501961, 1)''')
    WHEAT = default('''Color(0.960784, 0.870588, 0.701961, 1)''')
    WHITE = default('''Color(1, 1, 1, 1)''')
    WHITE_SMOKE = default('''Color(0.960784, 0.960784, 0.960784, 1)''')
    YELLOW = default('''Color(1, 1, 0, 1)''')
    YELLOW_GREEN = default('''Color(0.603922, 0.803922, 0.196078, 1)''')
    
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __neg__(self) -> 'Color': ...
    def __mul__(self, other: int) -> 'Color': ...
    def __truediv__(self, other: int) -> 'Color': ...
    def __mul__(self, other: float) -> 'Color': ...
    def __truediv__(self, other: float) -> 'Color': ...
    def __eq__(self, other: 'Color') -> bool: ...
    def __ne__(self, other: 'Color') -> bool: ...
    def __add__(self, other: 'Color') -> 'Color': ...
    def __sub__(self, other: 'Color') -> 'Color': ...
    def __mul__(self, other: 'Color') -> 'Color': ...
    def __truediv__(self, other: 'Color') -> 'Color': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __contains__(self, other: 'PackedColorArray') -> bool: ...
    def to_argb32(self) -> int: ...
    def to_abgr32(self) -> int: ...
    def to_rgba32(self) -> int: ...
    def to_argb64(self) -> int: ...
    def to_abgr64(self) -> int: ...
    def to_rgba64(self) -> int: ...
    def to_html(self, with_alpha: bool = default('''true''')) -> 'String': ...
    def clamp(self, min: 'Color' = default('''Color(0, 0, 0, 0)'''), max: 'Color' = default('''Color(1, 1, 1, 1)''')) -> 'Color': ...
    def inverted(self) -> 'Color': ...
    def lerp(self, to: 'Color', weight: float) -> 'Color': ...
    def lightened(self, amount: float) -> 'Color': ...
    def darkened(self, amount: float) -> 'Color': ...
    def blend(self, over: 'Color') -> 'Color': ...
    def get_luminance(self) -> float: ...
    def srgb_to_linear(self) -> 'Color': ...
    def linear_to_srgb(self) -> 'Color': ...
    def is_equal_approx(self, to: 'Color') -> bool: ...
    @staticmethod
    def hex(hex: int) -> 'Color': ...
    @staticmethod
    def hex64(hex: int) -> 'Color': ...
    @staticmethod
    def html(rgba: 'String') -> 'Color': ...
    @staticmethod
    def html_is_valid(color: 'String') -> bool: ...
    @staticmethod
    def from_string(str: 'String', default: 'Color') -> 'Color': ...
    @staticmethod
    def from_hsv(h: float, s: float, v: float, alpha: float = default('''1.0''')) -> 'Color': ...
    @staticmethod
    def from_ok_hsl(h: float, s: float, l: float, alpha: float = default('''1.0''')) -> 'Color': ...
    @staticmethod
    def from_rgbe9995(rgbe: int) -> 'Color': ...
    @staticmethod
    def from_rgba8(r8: int, g8: int, b8: int, a8: int = default('''255''')) -> 'Color': ...
    
class StringName:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mod__(self, other: 'Variant') -> 'String': ...
    def __mod__(self, other: bool) -> 'String': ...
    def __mod__(self, other: int) -> 'String': ...
    def __mod__(self, other: float) -> 'String': ...
    def __eq__(self, other: 'String') -> bool: ...
    def __ne__(self, other: 'String') -> bool: ...
    def __add__(self, other: 'String') -> 'String': ...
    def __mod__(self, other: 'String') -> 'String': ...
    def __contains__(self, other: 'String') -> bool: ...
    def __mod__(self, other: 'Vector2') -> 'String': ...
    def __mod__(self, other: 'Vector2i') -> 'String': ...
    def __mod__(self, other: 'Rect2') -> 'String': ...
    def __mod__(self, other: 'Rect2i') -> 'String': ...
    def __mod__(self, other: 'Vector3') -> 'String': ...
    def __mod__(self, other: 'Vector3i') -> 'String': ...
    def __mod__(self, other: 'Transform2D') -> 'String': ...
    def __mod__(self, other: 'Vector4') -> 'String': ...
    def __mod__(self, other: 'Vector4i') -> 'String': ...
    def __mod__(self, other: 'Plane') -> 'String': ...
    def __mod__(self, other: 'Quaternion') -> 'String': ...
    def __mod__(self, other: 'AABB') -> 'String': ...
    def __mod__(self, other: 'Basis') -> 'String': ...
    def __mod__(self, other: 'Transform3D') -> 'String': ...
    def __mod__(self, other: 'Projection') -> 'String': ...
    def __mod__(self, other: 'Color') -> 'String': ...
    def __eq__(self, other: 'StringName') -> bool: ...
    def __ne__(self, other: 'StringName') -> bool: ...
    def __lt__(self, other: 'StringName') -> bool: ...
    def __le__(self, other: 'StringName') -> bool: ...
    def __gt__(self, other: 'StringName') -> bool: ...
    def __ge__(self, other: 'StringName') -> bool: ...
    def __add__(self, other: 'StringName') -> 'String': ...
    def __mod__(self, other: 'StringName') -> 'String': ...
    def __contains__(self, other: 'StringName') -> bool: ...
    def __mod__(self, other: 'NodePath') -> 'String': ...
    def __mod__(self, other: 'Object') -> 'String': ...
    def __contains__(self, other: 'Object') -> bool: ...
    def __mod__(self, other: 'Callable') -> 'String': ...
    def __mod__(self, other: 'Signal') -> 'String': ...
    def __mod__(self, other: 'Dictionary') -> 'String': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __mod__(self, other: 'Array') -> 'String': ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __mod__(self, other: 'PackedByteArray') -> 'String': ...
    def __mod__(self, other: 'PackedInt32Array') -> 'String': ...
    def __mod__(self, other: 'PackedInt64Array') -> 'String': ...
    def __mod__(self, other: 'PackedFloat32Array') -> 'String': ...
    def __mod__(self, other: 'PackedFloat64Array') -> 'String': ...
    def __mod__(self, other: 'PackedStringArray') -> 'String': ...
    def __contains__(self, other: 'PackedStringArray') -> bool: ...
    def __mod__(self, other: 'PackedVector2Array') -> 'String': ...
    def __mod__(self, other: 'PackedVector3Array') -> 'String': ...
    def __mod__(self, other: 'PackedColorArray') -> 'String': ...
    def __mod__(self, other: 'PackedVector4Array') -> 'String': ...
    def casecmp_to(self, to: 'String') -> int: ...
    def nocasecmp_to(self, to: 'String') -> int: ...
    def naturalcasecmp_to(self, to: 'String') -> int: ...
    def naturalnocasecmp_to(self, to: 'String') -> int: ...
    def filecasecmp_to(self, to: 'String') -> int: ...
    def filenocasecmp_to(self, to: 'String') -> int: ...
    def length(self) -> int: ...
    def substr(self, from_: int, len: int = default('''-1''')) -> 'String': ...
    def get_slice(self, delimiter: 'String', slice: int) -> 'String': ...
    def get_slicec(self, delimiter: int, slice: int) -> 'String': ...
    def get_slice_count(self, delimiter: 'String') -> int: ...
    def find(self, what: 'String', from_: int = default('''0''')) -> int: ...
    def findn(self, what: 'String', from_: int = default('''0''')) -> int: ...
    def count(self, what: 'String', from_: int = default('''0'''), to: int = default('''0''')) -> int: ...
    def countn(self, what: 'String', from_: int = default('''0'''), to: int = default('''0''')) -> int: ...
    def rfind(self, what: 'String', from_: int = default('''-1''')) -> int: ...
    def rfindn(self, what: 'String', from_: int = default('''-1''')) -> int: ...
    def match(self, expr: 'String') -> bool: ...
    def matchn(self, expr: 'String') -> bool: ...
    def begins_with(self, text: 'String') -> bool: ...
    def ends_with(self, text: 'String') -> bool: ...
    def is_subsequence_of(self, text: 'String') -> bool: ...
    def is_subsequence_ofn(self, text: 'String') -> bool: ...
    def bigrams(self) -> 'PackedStringArray': ...
    def similarity(self, text: 'String') -> float: ...
    def format(self, values: 'Variant', placeholder: 'String' = default('''"{_}"''')) -> 'String': ...
    def replace(self, what: 'String', forwhat: 'String') -> 'String': ...
    def replacen(self, what: 'String', forwhat: 'String') -> 'String': ...
    def repeat(self, count: int) -> 'String': ...
    def reverse(self) -> 'String': ...
    def insert(self, position: int, what: 'String') -> 'String': ...
    def erase(self, position: int, chars: int = default('''1''')) -> 'String': ...
    def capitalize(self) -> 'String': ...
    def to_camel_case(self) -> 'String': ...
    def to_pascal_case(self) -> 'String': ...
    def to_snake_case(self) -> 'String': ...
    def split(self, delimiter: 'String' = default('''""'''), allow_empty: bool = default('''true'''), maxsplit: int = default('''0''')) -> 'PackedStringArray': ...
    def rsplit(self, delimiter: 'String' = default('''""'''), allow_empty: bool = default('''true'''), maxsplit: int = default('''0''')) -> 'PackedStringArray': ...
    def split_floats(self, delimiter: 'String', allow_empty: bool = default('''true''')) -> 'PackedFloat64Array': ...
    def join(self, parts: 'PackedStringArray') -> 'String': ...
    def to_upper(self) -> 'String': ...
    def to_lower(self) -> 'String': ...
    def left(self, length: int) -> 'String': ...
    def right(self, length: int) -> 'String': ...
    def strip_edges(self, left: bool = default('''true'''), right: bool = default('''true''')) -> 'String': ...
    def strip_escapes(self) -> 'String': ...
    def lstrip(self, chars: 'String') -> 'String': ...
    def rstrip(self, chars: 'String') -> 'String': ...
    def get_extension(self) -> 'String': ...
    def get_basename(self) -> 'String': ...
    def path_join(self, file: 'String') -> 'String': ...
    def unicode_at(self, at: int) -> int: ...
    def indent(self, prefix: 'String') -> 'String': ...
    def dedent(self) -> 'String': ...
    def md5_text(self) -> 'String': ...
    def sha1_text(self) -> 'String': ...
    def sha256_text(self) -> 'String': ...
    def md5_buffer(self) -> 'PackedByteArray': ...
    def sha1_buffer(self) -> 'PackedByteArray': ...
    def sha256_buffer(self) -> 'PackedByteArray': ...
    def is_empty(self) -> bool: ...
    def contains(self, what: 'String') -> bool: ...
    def containsn(self, what: 'String') -> bool: ...
    def is_absolute_path(self) -> bool: ...
    def is_relative_path(self) -> bool: ...
    def simplify_path(self) -> 'String': ...
    def get_base_dir(self) -> 'String': ...
    def get_file(self) -> 'String': ...
    def xml_escape(self, escape_quotes: bool = default('''false''')) -> 'String': ...
    def xml_unescape(self) -> 'String': ...
    def uri_encode(self) -> 'String': ...
    def uri_decode(self) -> 'String': ...
    def c_escape(self) -> 'String': ...
    def c_unescape(self) -> 'String': ...
    def json_escape(self) -> 'String': ...
    def validate_node_name(self) -> 'String': ...
    def validate_filename(self) -> 'String': ...
    def is_valid_ascii_identifier(self) -> bool: ...
    def is_valid_unicode_identifier(self) -> bool: ...
    def is_valid_identifier(self) -> bool: ...
    def is_valid_int(self) -> bool: ...
    def is_valid_float(self) -> bool: ...
    def is_valid_hex_number(self, with_prefix: bool = default('''false''')) -> bool: ...
    def is_valid_html_color(self) -> bool: ...
    def is_valid_ip_address(self) -> bool: ...
    def is_valid_filename(self) -> bool: ...
    def to_int(self) -> int: ...
    def to_float(self) -> float: ...
    def hex_to_int(self) -> int: ...
    def bin_to_int(self) -> int: ...
    def lpad(self, min_length: int, character: 'String' = default('''" "''')) -> 'String': ...
    def rpad(self, min_length: int, character: 'String' = default('''" "''')) -> 'String': ...
    def pad_decimals(self, digits: int) -> 'String': ...
    def pad_zeros(self, digits: int) -> 'String': ...
    def trim_prefix(self, prefix: 'String') -> 'String': ...
    def trim_suffix(self, suffix: 'String') -> 'String': ...
    def to_ascii_buffer(self) -> 'PackedByteArray': ...
    def to_utf8_buffer(self) -> 'PackedByteArray': ...
    def to_utf16_buffer(self) -> 'PackedByteArray': ...
    def to_utf32_buffer(self) -> 'PackedByteArray': ...
    def hex_decode(self) -> 'PackedByteArray': ...
    def to_wchar_buffer(self) -> 'PackedByteArray': ...
    def hash(self) -> int: ...
    
class NodePath:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'NodePath') -> bool: ...
    def __ne__(self, other: 'NodePath') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def is_absolute(self) -> bool: ...
    def get_name_count(self) -> int: ...
    def get_name(self, idx: int) -> 'StringName': ...
    def get_subname_count(self) -> int: ...
    def hash(self) -> int: ...
    def get_subname(self, idx: int) -> 'StringName': ...
    def get_concatenated_names(self) -> 'StringName': ...
    def get_concatenated_subnames(self) -> 'StringName': ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'NodePath': ...
    def get_as_property_path(self) -> 'NodePath': ...
    def is_empty(self) -> bool: ...
    
class RID:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'RID') -> bool: ...
    def __ne__(self, other: 'RID') -> bool: ...
    def __lt__(self, other: 'RID') -> bool: ...
    def __le__(self, other: 'RID') -> bool: ...
    def __gt__(self, other: 'RID') -> bool: ...
    def __ge__(self, other: 'RID') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def is_valid(self) -> bool: ...
    def get_id(self) -> int: ...
    
class Callable:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'Callable') -> bool: ...
    def __ne__(self, other: 'Callable') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    @staticmethod
    def create(variant: 'Variant', method: 'StringName') -> 'Callable': ...
    def callv(self, arguments: 'Array') -> 'Variant': ...
    def is_null(self) -> bool: ...
    def is_custom(self) -> bool: ...
    def is_standard(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def get_object(self) -> 'Object': ...
    def get_object_id(self) -> int: ...
    def get_method(self) -> 'StringName': ...
    def get_argument_count(self) -> int: ...
    def get_bound_arguments_count(self) -> int: ...
    def get_bound_arguments(self) -> 'Array': ...
    def get_unbound_arguments_count(self) -> int: ...
    def hash(self) -> int: ...
    def bindv(self, arguments: 'Array') -> 'Callable': ...
    def unbind(self, argcount: int) -> 'Callable': ...
    def call(self, *arg) -> 'Variant': ...
    def call_deferred(self, *arg) -> None: ...
    def rpc(self, *arg) -> None: ...
    def rpc_id(self, peer_id: int, *arg) -> None: ...
    def bind(self, *arg) -> 'Callable': ...
    
class Signal:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'Signal') -> bool: ...
    def __ne__(self, other: 'Signal') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def is_null(self) -> bool: ...
    def get_object(self) -> 'Object': ...
    def get_object_id(self) -> int: ...
    def get_name(self) -> 'StringName': ...
    def connect(self, callable: 'Callable', flags: int = default('''0''')) -> int: ...
    def disconnect(self, callable: 'Callable') -> None: ...
    def is_connected(self, callable: 'Callable') -> bool: ...
    def get_connections(self) -> 'Array': ...
    def has_connections(self) -> bool: ...
    def emit(self, *arg) -> None: ...
    
class Dictionary:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __eq__(self, other: 'Dictionary') -> bool: ...
    def __ne__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def clear(self) -> None: ...
    def assign(self, dictionary: 'Dictionary') -> None: ...
    def sort(self) -> None: ...
    def merge(self, dictionary: 'Dictionary', overwrite: bool = default('''false''')) -> None: ...
    def merged(self, dictionary: 'Dictionary', overwrite: bool = default('''false''')) -> 'Dictionary': ...
    def has(self, key: 'Variant') -> bool: ...
    def has_all(self, keys: 'Array') -> bool: ...
    def find_key(self, value: 'Variant') -> 'Variant': ...
    def erase(self, key: 'Variant') -> bool: ...
    def hash(self) -> int: ...
    def keys(self) -> 'Array': ...
    def values(self) -> 'Array': ...
    def duplicate(self, deep: bool = default('''false''')) -> 'Dictionary': ...
    def get(self, key: 'Variant', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def get_or_add(self, key: 'Variant', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def set(self, key: 'Variant', value: 'Variant') -> bool: ...
    def is_typed(self) -> bool: ...
    def is_typed_key(self) -> bool: ...
    def is_typed_value(self) -> bool: ...
    def is_same_typed(self, dictionary: 'Dictionary') -> bool: ...
    def is_same_typed_key(self, dictionary: 'Dictionary') -> bool: ...
    def is_same_typed_value(self, dictionary: 'Dictionary') -> bool: ...
    def get_typed_key_builtin(self) -> int: ...
    def get_typed_value_builtin(self) -> int: ...
    def get_typed_key_class_name(self) -> 'StringName': ...
    def get_typed_value_class_name(self) -> 'StringName': ...
    def get_typed_key_script(self) -> 'Variant': ...
    def get_typed_value_script(self) -> 'Variant': ...
    def make_read_only(self) -> None: ...
    def is_read_only(self) -> bool: ...
    def recursive_equal(self, dictionary: 'Dictionary', recursion_count: int) -> bool: ...
    
class Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __eq__(self, other: 'Array') -> bool: ...
    def __ne__(self, other: 'Array') -> bool: ...
    def __lt__(self, other: 'Array') -> bool: ...
    def __le__(self, other: 'Array') -> bool: ...
    def __gt__(self, other: 'Array') -> bool: ...
    def __ge__(self, other: 'Array') -> bool: ...
    def __add__(self, other: 'Array') -> 'Array': ...
    def __contains__(self, other: 'Array') -> bool: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def clear(self) -> None: ...
    def hash(self) -> int: ...
    def assign(self, array: 'Array') -> None: ...
    def get(self, index: int) -> 'Variant': ...
    def set(self, index: int, value: 'Variant') -> None: ...
    def push_back(self, value: 'Variant') -> None: ...
    def push_front(self, value: 'Variant') -> None: ...
    def append(self, value: 'Variant') -> None: ...
    def append_array(self, array: 'Array') -> None: ...
    def resize(self, size: int) -> int: ...
    def insert(self, position: int, value: 'Variant') -> int: ...
    def remove_at(self, position: int) -> None: ...
    def fill(self, value: 'Variant') -> None: ...
    def erase(self, value: 'Variant') -> None: ...
    def front(self) -> 'Variant': ...
    def back(self) -> 'Variant': ...
    def pick_random(self) -> 'Variant': ...
    def find(self, what: 'Variant', from_: int = default('''0''')) -> int: ...
    def find_custom(self, method: 'Callable', from_: int = default('''0''')) -> int: ...
    def rfind(self, what: 'Variant', from_: int = default('''-1''')) -> int: ...
    def rfind_custom(self, method: 'Callable', from_: int = default('''-1''')) -> int: ...
    def count(self, value: 'Variant') -> int: ...
    def has(self, value: 'Variant') -> bool: ...
    def pop_back(self) -> 'Variant': ...
    def pop_front(self) -> 'Variant': ...
    def pop_at(self, position: int) -> 'Variant': ...
    def sort(self) -> None: ...
    def sort_custom(self, func: 'Callable') -> None: ...
    def shuffle(self) -> None: ...
    def bsearch(self, value: 'Variant', before: bool = default('''true''')) -> int: ...
    def bsearch_custom(self, value: 'Variant', func: 'Callable', before: bool = default('''true''')) -> int: ...
    def reverse(self) -> None: ...
    def duplicate(self, deep: bool = default('''false''')) -> 'Array': ...
    def slice(self, begin: int, end: int = default('''2147483647'''), step: int = default('''1'''), deep: bool = default('''false''')) -> 'Array': ...
    def filter(self, method: 'Callable') -> 'Array': ...
    def map(self, method: 'Callable') -> 'Array': ...
    def reduce(self, method: 'Callable', accum: 'Variant' = default('''null''')) -> 'Variant': ...
    def any(self, method: 'Callable') -> bool: ...
    def all(self, method: 'Callable') -> bool: ...
    def max(self) -> 'Variant': ...
    def min(self) -> 'Variant': ...
    def is_typed(self) -> bool: ...
    def is_same_typed(self, array: 'Array') -> bool: ...
    def get_typed_builtin(self) -> int: ...
    def get_typed_class_name(self) -> 'StringName': ...
    def get_typed_script(self) -> 'Variant': ...
    def make_read_only(self) -> None: ...
    def is_read_only(self) -> bool: ...
    
class PackedByteArray:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedByteArray') -> bool: ...
    def __ne__(self, other: 'PackedByteArray') -> bool: ...
    def __add__(self, other: 'PackedByteArray') -> 'PackedByteArray': ...
    def get(self, index: int) -> int: ...
    def set(self, index: int, value: int) -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: int) -> bool: ...
    def append(self, value: int) -> bool: ...
    def append_array(self, array: 'PackedByteArray') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: int) -> int: ...
    def fill(self, value: int) -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: int) -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: int, before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedByteArray': ...
    def find(self, value: int, from_: int = default('''0''')) -> int: ...
    def rfind(self, value: int, from_: int = default('''-1''')) -> int: ...
    def count(self, value: int) -> int: ...
    def get_string_from_ascii(self) -> 'String': ...
    def get_string_from_utf8(self) -> 'String': ...
    def get_string_from_utf16(self) -> 'String': ...
    def get_string_from_utf32(self) -> 'String': ...
    def get_string_from_wchar(self) -> 'String': ...
    def hex_encode(self) -> 'String': ...
    def compress(self, compression_mode: int = default('''0''')) -> 'PackedByteArray': ...
    def decompress(self, buffer_size: int, compression_mode: int = default('''0''')) -> 'PackedByteArray': ...
    def decompress_dynamic(self, max_output_size: int, compression_mode: int = default('''0''')) -> 'PackedByteArray': ...
    def decode_u8(self, byte_offset: int) -> int: ...
    def decode_s8(self, byte_offset: int) -> int: ...
    def decode_u16(self, byte_offset: int) -> int: ...
    def decode_s16(self, byte_offset: int) -> int: ...
    def decode_u32(self, byte_offset: int) -> int: ...
    def decode_s32(self, byte_offset: int) -> int: ...
    def decode_u64(self, byte_offset: int) -> int: ...
    def decode_s64(self, byte_offset: int) -> int: ...
    def decode_half(self, byte_offset: int) -> float: ...
    def decode_float(self, byte_offset: int) -> float: ...
    def decode_double(self, byte_offset: int) -> float: ...
    def has_encoded_var(self, byte_offset: int, allow_objects: bool = default('''false''')) -> bool: ...
    def decode_var(self, byte_offset: int, allow_objects: bool = default('''false''')) -> 'Variant': ...
    def decode_var_size(self, byte_offset: int, allow_objects: bool = default('''false''')) -> int: ...
    def to_int32_array(self) -> 'PackedInt32Array': ...
    def to_int64_array(self) -> 'PackedInt64Array': ...
    def to_float32_array(self) -> 'PackedFloat32Array': ...
    def to_float64_array(self) -> 'PackedFloat64Array': ...
    def encode_u8(self, byte_offset: int, value: int) -> None: ...
    def encode_s8(self, byte_offset: int, value: int) -> None: ...
    def encode_u16(self, byte_offset: int, value: int) -> None: ...
    def encode_s16(self, byte_offset: int, value: int) -> None: ...
    def encode_u32(self, byte_offset: int, value: int) -> None: ...
    def encode_s32(self, byte_offset: int, value: int) -> None: ...
    def encode_u64(self, byte_offset: int, value: int) -> None: ...
    def encode_s64(self, byte_offset: int, value: int) -> None: ...
    def encode_half(self, byte_offset: int, value: float) -> None: ...
    def encode_float(self, byte_offset: int, value: float) -> None: ...
    def encode_double(self, byte_offset: int, value: float) -> None: ...
    def encode_var(self, byte_offset: int, value: 'Variant', allow_objects: bool = default('''false''')) -> int: ...
    
class PackedInt32Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedInt32Array') -> bool: ...
    def __ne__(self, other: 'PackedInt32Array') -> bool: ...
    def __add__(self, other: 'PackedInt32Array') -> 'PackedInt32Array': ...
    def get(self, index: int) -> int: ...
    def set(self, index: int, value: int) -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: int) -> bool: ...
    def append(self, value: int) -> bool: ...
    def append_array(self, array: 'PackedInt32Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: int) -> int: ...
    def fill(self, value: int) -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: int) -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedInt32Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: int, before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedInt32Array': ...
    def find(self, value: int, from_: int = default('''0''')) -> int: ...
    def rfind(self, value: int, from_: int = default('''-1''')) -> int: ...
    def count(self, value: int) -> int: ...
    
class PackedInt64Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedInt64Array') -> bool: ...
    def __ne__(self, other: 'PackedInt64Array') -> bool: ...
    def __add__(self, other: 'PackedInt64Array') -> 'PackedInt64Array': ...
    def get(self, index: int) -> int: ...
    def set(self, index: int, value: int) -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: int) -> bool: ...
    def append(self, value: int) -> bool: ...
    def append_array(self, array: 'PackedInt64Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: int) -> int: ...
    def fill(self, value: int) -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: int) -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedInt64Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: int, before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedInt64Array': ...
    def find(self, value: int, from_: int = default('''0''')) -> int: ...
    def rfind(self, value: int, from_: int = default('''-1''')) -> int: ...
    def count(self, value: int) -> int: ...
    
class PackedFloat32Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedFloat32Array') -> bool: ...
    def __ne__(self, other: 'PackedFloat32Array') -> bool: ...
    def __add__(self, other: 'PackedFloat32Array') -> 'PackedFloat32Array': ...
    def get(self, index: int) -> float: ...
    def set(self, index: int, value: float) -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: float) -> bool: ...
    def append(self, value: float) -> bool: ...
    def append_array(self, array: 'PackedFloat32Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: float) -> int: ...
    def fill(self, value: float) -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: float) -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedFloat32Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: float, before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedFloat32Array': ...
    def find(self, value: float, from_: int = default('''0''')) -> int: ...
    def rfind(self, value: float, from_: int = default('''-1''')) -> int: ...
    def count(self, value: float) -> int: ...
    
class PackedFloat64Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedFloat64Array') -> bool: ...
    def __ne__(self, other: 'PackedFloat64Array') -> bool: ...
    def __add__(self, other: 'PackedFloat64Array') -> 'PackedFloat64Array': ...
    def get(self, index: int) -> float: ...
    def set(self, index: int, value: float) -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: float) -> bool: ...
    def append(self, value: float) -> bool: ...
    def append_array(self, array: 'PackedFloat64Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: float) -> int: ...
    def fill(self, value: float) -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: float) -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedFloat64Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: float, before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedFloat64Array': ...
    def find(self, value: float, from_: int = default('''0''')) -> int: ...
    def rfind(self, value: float, from_: int = default('''-1''')) -> int: ...
    def count(self, value: float) -> int: ...
    
class PackedStringArray:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedStringArray') -> bool: ...
    def __ne__(self, other: 'PackedStringArray') -> bool: ...
    def __add__(self, other: 'PackedStringArray') -> 'PackedStringArray': ...
    def get(self, index: int) -> 'String': ...
    def set(self, index: int, value: 'String') -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: 'String') -> bool: ...
    def append(self, value: 'String') -> bool: ...
    def append_array(self, array: 'PackedStringArray') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: 'String') -> int: ...
    def fill(self, value: 'String') -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: 'String') -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedStringArray': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'String', before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedStringArray': ...
    def find(self, value: 'String', from_: int = default('''0''')) -> int: ...
    def rfind(self, value: 'String', from_: int = default('''-1''')) -> int: ...
    def count(self, value: 'String') -> int: ...
    
class PackedVector2Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mul__(self, other: 'Transform2D') -> 'PackedVector2Array': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedVector2Array') -> bool: ...
    def __ne__(self, other: 'PackedVector2Array') -> bool: ...
    def __add__(self, other: 'PackedVector2Array') -> 'PackedVector2Array': ...
    def get(self, index: int) -> 'Vector2': ...
    def set(self, index: int, value: 'Vector2') -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: 'Vector2') -> bool: ...
    def append(self, value: 'Vector2') -> bool: ...
    def append_array(self, array: 'PackedVector2Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: 'Vector2') -> int: ...
    def fill(self, value: 'Vector2') -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: 'Vector2') -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedVector2Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Vector2', before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedVector2Array': ...
    def find(self, value: 'Vector2', from_: int = default('''0''')) -> int: ...
    def rfind(self, value: 'Vector2', from_: int = default('''-1''')) -> int: ...
    def count(self, value: 'Vector2') -> int: ...
    
class PackedVector3Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __mul__(self, other: 'Transform3D') -> 'PackedVector3Array': ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedVector3Array') -> bool: ...
    def __ne__(self, other: 'PackedVector3Array') -> bool: ...
    def __add__(self, other: 'PackedVector3Array') -> 'PackedVector3Array': ...
    def get(self, index: int) -> 'Vector3': ...
    def set(self, index: int, value: 'Vector3') -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: 'Vector3') -> bool: ...
    def append(self, value: 'Vector3') -> bool: ...
    def append_array(self, array: 'PackedVector3Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: 'Vector3') -> int: ...
    def fill(self, value: 'Vector3') -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: 'Vector3') -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedVector3Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Vector3', before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedVector3Array': ...
    def find(self, value: 'Vector3', from_: int = default('''0''')) -> int: ...
    def rfind(self, value: 'Vector3', from_: int = default('''-1''')) -> int: ...
    def count(self, value: 'Vector3') -> int: ...
    
class PackedColorArray:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedColorArray') -> bool: ...
    def __ne__(self, other: 'PackedColorArray') -> bool: ...
    def __add__(self, other: 'PackedColorArray') -> 'PackedColorArray': ...
    def get(self, index: int) -> 'Color': ...
    def set(self, index: int, value: 'Color') -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: 'Color') -> bool: ...
    def append(self, value: 'Color') -> bool: ...
    def append_array(self, array: 'PackedColorArray') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: 'Color') -> int: ...
    def fill(self, value: 'Color') -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: 'Color') -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedColorArray': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Color', before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedColorArray': ...
    def find(self, value: 'Color', from_: int = default('''0''')) -> int: ...
    def rfind(self, value: 'Color', from_: int = default('''-1''')) -> int: ...
    def count(self, value: 'Color') -> int: ...
    
class PackedVector4Array:
    def __eq__(self, other: 'Variant') -> bool: ...
    def __ne__(self, other: 'Variant') -> bool: ...
    def __contains__(self, other: 'Dictionary') -> bool: ...
    def __contains__(self, other: 'Array') -> bool: ...
    def __eq__(self, other: 'PackedVector4Array') -> bool: ...
    def __ne__(self, other: 'PackedVector4Array') -> bool: ...
    def __add__(self, other: 'PackedVector4Array') -> 'PackedVector4Array': ...
    def get(self, index: int) -> 'Vector4': ...
    def set(self, index: int, value: 'Vector4') -> None: ...
    def size(self) -> int: ...
    def is_empty(self) -> bool: ...
    def push_back(self, value: 'Vector4') -> bool: ...
    def append(self, value: 'Vector4') -> bool: ...
    def append_array(self, array: 'PackedVector4Array') -> None: ...
    def remove_at(self, index: int) -> None: ...
    def insert(self, at_index: int, value: 'Vector4') -> int: ...
    def fill(self, value: 'Vector4') -> None: ...
    def resize(self, new_size: int) -> int: ...
    def clear(self) -> None: ...
    def has(self, value: 'Vector4') -> bool: ...
    def reverse(self) -> None: ...
    def slice(self, begin: int, end: int = default('''2147483647''')) -> 'PackedVector4Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Vector4', before: bool = default('''true''')) -> int: ...
    def duplicate(self) -> 'PackedVector4Array': ...
    def find(self, value: 'Vector4', from_: int = default('''0''')) -> int: ...
    def rfind(self, value: 'Vector4', from_: int = default('''-1''')) -> int: ...
    def count(self, value: 'Vector4') -> int: ...
    
class AESContext(RefCounted):
    def start(self, mode: 'AESContext_Mode', key: 'PackedByteArray', iv: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'Error': ...
    def update(self, src: 'PackedByteArray') -> 'PackedByteArray': ...
    def get_iv_state(self) -> 'PackedByteArray': ...
    def finish(self) -> None: ...
    
class AESContext_Mode(Enum):
    MODE_ECB_ENCRYPT = 0
    MODE_ECB_DECRYPT = 1
    MODE_CBC_ENCRYPT = 2
    MODE_CBC_DECRYPT = 3
    MODE_MAX = 4

class AStar2D(RefCounted):
    def _estimate_cost(self, from_id: int, end_id: int) -> float: ...
    def _compute_cost(self, from_id: int, to_id: int) -> float: ...
    def get_available_point_id(self) -> int: ...
    def add_point(self, id: int, position: 'Vector2', weight_scale: float = default('''1.0''')) -> None: ...
    def get_point_position(self, id: int) -> 'Vector2': ...
    def set_point_position(self, id: int, position: 'Vector2') -> None: ...
    def get_point_weight_scale(self, id: int) -> float: ...
    def set_point_weight_scale(self, id: int, weight_scale: float) -> None: ...
    def remove_point(self, id: int) -> None: ...
    def has_point(self, id: int) -> bool: ...
    def get_point_connections(self, id: int) -> 'PackedInt64Array': ...
    def get_point_ids(self) -> 'PackedInt64Array': ...
    def set_point_disabled(self, id: int, disabled: bool = default('''true''')) -> None: ...
    def is_point_disabled(self, id: int) -> bool: ...
    def connect_points(self, id: int, to_id: int, bidirectional: bool = default('''true''')) -> None: ...
    def disconnect_points(self, id: int, to_id: int, bidirectional: bool = default('''true''')) -> None: ...
    def are_points_connected(self, id: int, to_id: int, bidirectional: bool = default('''true''')) -> bool: ...
    def get_point_count(self) -> int: ...
    def get_point_capacity(self) -> int: ...
    def reserve_space(self, num_nodes: int) -> None: ...
    def clear(self) -> None: ...
    def get_closest_point(self, to_position: 'Vector2', include_disabled: bool = default('''false''')) -> int: ...
    def get_closest_position_in_segment(self, to_position: 'Vector2') -> 'Vector2': ...
    def get_point_path(self, from_id: int, to_id: int, allow_partial_path: bool = default('''false''')) -> 'PackedVector2Array': ...
    def get_id_path(self, from_id: int, to_id: int, allow_partial_path: bool = default('''false''')) -> 'PackedInt64Array': ...
    
class AStar3D(RefCounted):
    def _estimate_cost(self, from_id: int, end_id: int) -> float: ...
    def _compute_cost(self, from_id: int, to_id: int) -> float: ...
    def get_available_point_id(self) -> int: ...
    def add_point(self, id: int, position: 'Vector3', weight_scale: float = default('''1.0''')) -> None: ...
    def get_point_position(self, id: int) -> 'Vector3': ...
    def set_point_position(self, id: int, position: 'Vector3') -> None: ...
    def get_point_weight_scale(self, id: int) -> float: ...
    def set_point_weight_scale(self, id: int, weight_scale: float) -> None: ...
    def remove_point(self, id: int) -> None: ...
    def has_point(self, id: int) -> bool: ...
    def get_point_connections(self, id: int) -> 'PackedInt64Array': ...
    def get_point_ids(self) -> 'PackedInt64Array': ...
    def set_point_disabled(self, id: int, disabled: bool = default('''true''')) -> None: ...
    def is_point_disabled(self, id: int) -> bool: ...
    def connect_points(self, id: int, to_id: int, bidirectional: bool = default('''true''')) -> None: ...
    def disconnect_points(self, id: int, to_id: int, bidirectional: bool = default('''true''')) -> None: ...
    def are_points_connected(self, id: int, to_id: int, bidirectional: bool = default('''true''')) -> bool: ...
    def get_point_count(self) -> int: ...
    def get_point_capacity(self) -> int: ...
    def reserve_space(self, num_nodes: int) -> None: ...
    def clear(self) -> None: ...
    def get_closest_point(self, to_position: 'Vector3', include_disabled: bool = default('''false''')) -> int: ...
    def get_closest_position_in_segment(self, to_position: 'Vector3') -> 'Vector3': ...
    def get_point_path(self, from_id: int, to_id: int, allow_partial_path: bool = default('''false''')) -> 'PackedVector3Array': ...
    def get_id_path(self, from_id: int, to_id: int, allow_partial_path: bool = default('''false''')) -> 'PackedInt64Array': ...
    
class AStarGrid2D(RefCounted):
    region: 'Rect2i'
    size: 'Vector2i'
    offset: 'Vector2'
    cell_size: 'Vector2'
    cell_shape: int
    jumping_enabled: bool
    default_compute_heuristic: int
    default_estimate_heuristic: int
    diagonal_mode: int
    def _estimate_cost(self, from_id: 'Vector2i', end_id: 'Vector2i') -> float: ...
    def _compute_cost(self, from_id: 'Vector2i', to_id: 'Vector2i') -> float: ...
    def set_region(self, region: 'Rect2i') -> None: ...
    def get_region(self) -> 'Rect2i': ...
    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_cell_size(self, cell_size: 'Vector2') -> None: ...
    def get_cell_size(self) -> 'Vector2': ...
    def set_cell_shape(self, cell_shape: 'AStarGrid2D_CellShape') -> None: ...
    def get_cell_shape(self) -> 'AStarGrid2D_CellShape': ...
    def is_in_bounds(self, x: int, y: int) -> bool: ...
    def is_in_boundsv(self, id: 'Vector2i') -> bool: ...
    def is_dirty(self) -> bool: ...
    def update(self) -> None: ...
    def set_jumping_enabled(self, enabled: bool) -> None: ...
    def is_jumping_enabled(self) -> bool: ...
    def set_diagonal_mode(self, mode: 'AStarGrid2D_DiagonalMode') -> None: ...
    def get_diagonal_mode(self) -> 'AStarGrid2D_DiagonalMode': ...
    def set_default_compute_heuristic(self, heuristic: 'AStarGrid2D_Heuristic') -> None: ...
    def get_default_compute_heuristic(self) -> 'AStarGrid2D_Heuristic': ...
    def set_default_estimate_heuristic(self, heuristic: 'AStarGrid2D_Heuristic') -> None: ...
    def get_default_estimate_heuristic(self) -> 'AStarGrid2D_Heuristic': ...
    def set_point_solid(self, id: 'Vector2i', solid: bool = default('''true''')) -> None: ...
    def is_point_solid(self, id: 'Vector2i') -> bool: ...
    def set_point_weight_scale(self, id: 'Vector2i', weight_scale: float) -> None: ...
    def get_point_weight_scale(self, id: 'Vector2i') -> float: ...
    def fill_solid_region(self, region: 'Rect2i', solid: bool = default('''true''')) -> None: ...
    def fill_weight_scale_region(self, region: 'Rect2i', weight_scale: float) -> None: ...
    def clear(self) -> None: ...
    def get_point_position(self, id: 'Vector2i') -> 'Vector2': ...
    def get_point_data_in_region(self, region: 'Rect2i') -> 'list[Dictionary]': ...
    def get_point_path(self, from_id: 'Vector2i', to_id: 'Vector2i', allow_partial_path: bool = default('''false''')) -> 'PackedVector2Array': ...
    def get_id_path(self, from_id: 'Vector2i', to_id: 'Vector2i', allow_partial_path: bool = default('''false''')) -> 'list[Vector2i]': ...
    
class AStarGrid2D_Heuristic(Enum):
    HEURISTIC_EUCLIDEAN = 0
    HEURISTIC_MANHATTAN = 1
    HEURISTIC_OCTILE = 2
    HEURISTIC_CHEBYSHEV = 3
    HEURISTIC_MAX = 4

class AStarGrid2D_DiagonalMode(Enum):
    DIAGONAL_MODE_ALWAYS = 0
    DIAGONAL_MODE_NEVER = 1
    DIAGONAL_MODE_AT_LEAST_ONE_WALKABLE = 2
    DIAGONAL_MODE_ONLY_IF_NO_OBSTACLES = 3
    DIAGONAL_MODE_MAX = 4

class AStarGrid2D_CellShape(Enum):
    CELL_SHAPE_SQUARE = 0
    CELL_SHAPE_ISOMETRIC_RIGHT = 1
    CELL_SHAPE_ISOMETRIC_DOWN = 2
    CELL_SHAPE_MAX = 3

class AcceptDialog(Window):
    ok_button_text: 'String'
    dialog_text: 'String'
    dialog_hide_on_ok: bool
    dialog_close_on_escape: bool
    dialog_autowrap: bool
    confirmed: Signal[Callable[[], None]]  # confirmed()
    canceled: Signal[Callable[[], None]]  # canceled()
    custom_action: Signal[Callable[['StringName'], None]]  # custom_action(action: 'StringName')
    def get_ok_button(self) -> 'Button': ...
    def get_label(self) -> 'Label': ...
    def set_hide_on_ok(self, enabled: bool) -> None: ...
    def get_hide_on_ok(self) -> bool: ...
    def set_close_on_escape(self, enabled: bool) -> None: ...
    def get_close_on_escape(self) -> bool: ...
    def add_button(self, text: 'String', right: bool = default('''false'''), action: 'String' = default('''""''')) -> 'Button': ...
    def add_cancel_button(self, name: 'String') -> 'Button': ...
    def remove_button(self, button: 'Button') -> None: ...
    def register_text_enter(self, line_edit: 'LineEdit') -> None: ...
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def set_autowrap(self, autowrap: bool) -> None: ...
    def has_autowrap(self) -> bool: ...
    def set_ok_button_text(self, text: 'String') -> None: ...
    def get_ok_button_text(self) -> 'String': ...
    
class AnimatableBody2D(StaticBody2D):
    sync_to_physics: bool
    def set_sync_to_physics(self, enable: bool) -> None: ...
    def is_sync_to_physics_enabled(self) -> bool: ...
    
class AnimatableBody3D(StaticBody3D):
    sync_to_physics: bool
    def set_sync_to_physics(self, enable: bool) -> None: ...
    def is_sync_to_physics_enabled(self) -> bool: ...
    
class AnimatedSprite2D(Node2D):
    sprite_frames: 'SpriteFrames'
    animation: 'StringName'
    autoplay: 'StringName'
    frame: int
    frame_progress: float
    speed_scale: float
    centered: bool
    offset: 'Vector2'
    flip_h: bool
    flip_v: bool
    sprite_frames_changed: Signal[Callable[[], None]]  # sprite_frames_changed()
    animation_changed: Signal[Callable[[], None]]  # animation_changed()
    frame_changed: Signal[Callable[[], None]]  # frame_changed()
    animation_looped: Signal[Callable[[], None]]  # animation_looped()
    animation_finished: Signal[Callable[[], None]]  # animation_finished()
    def set_sprite_frames(self, sprite_frames: 'SpriteFrames') -> None: ...
    def get_sprite_frames(self) -> 'SpriteFrames': ...
    def set_animation(self, name: 'StringName') -> None: ...
    def get_animation(self) -> 'StringName': ...
    def set_autoplay(self, name: 'String') -> None: ...
    def get_autoplay(self) -> 'String': ...
    def is_playing(self) -> bool: ...
    def play(self, name: 'StringName' = default('''&""'''), custom_speed: float = default('''1.0'''), from_end: bool = default('''false''')) -> None: ...
    def play_backwards(self, name: 'StringName' = default('''&""''')) -> None: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_centered(self, centered: bool) -> None: ...
    def is_centered(self) -> bool: ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_flip_h(self, flip_h: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_progress(self, progress: float) -> None: ...
    def get_frame_progress(self) -> float: ...
    def set_frame_and_progress(self, frame: int, progress: float) -> None: ...
    def set_speed_scale(self, speed_scale: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def get_playing_speed(self) -> float: ...
    
class AnimatedSprite3D(SpriteBase3D):
    sprite_frames: 'SpriteFrames'
    animation: 'StringName'
    autoplay: 'StringName'
    frame: int
    frame_progress: float
    speed_scale: float
    sprite_frames_changed: Signal[Callable[[], None]]  # sprite_frames_changed()
    animation_changed: Signal[Callable[[], None]]  # animation_changed()
    frame_changed: Signal[Callable[[], None]]  # frame_changed()
    animation_looped: Signal[Callable[[], None]]  # animation_looped()
    animation_finished: Signal[Callable[[], None]]  # animation_finished()
    def set_sprite_frames(self, sprite_frames: 'SpriteFrames') -> None: ...
    def get_sprite_frames(self) -> 'SpriteFrames': ...
    def set_animation(self, name: 'StringName') -> None: ...
    def get_animation(self) -> 'StringName': ...
    def set_autoplay(self, name: 'String') -> None: ...
    def get_autoplay(self) -> 'String': ...
    def is_playing(self) -> bool: ...
    def play(self, name: 'StringName' = default('''&""'''), custom_speed: float = default('''1.0'''), from_end: bool = default('''false''')) -> None: ...
    def play_backwards(self, name: 'StringName' = default('''&""''')) -> None: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_progress(self, progress: float) -> None: ...
    def get_frame_progress(self) -> float: ...
    def set_frame_and_progress(self, frame: int, progress: float) -> None: ...
    def set_speed_scale(self, speed_scale: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def get_playing_speed(self) -> float: ...
    
class AnimatedTexture(Texture2D):
    frames: int
    current_frame: int
    pause: bool
    one_shot: bool
    speed_scale: float
    MAX_FRAMES = 256
    
    def set_frames(self, frames: int) -> None: ...
    def get_frames(self) -> int: ...
    def set_current_frame(self, frame: int) -> None: ...
    def get_current_frame(self) -> int: ...
    def set_pause(self, pause: bool) -> None: ...
    def get_pause(self) -> bool: ...
    def set_one_shot(self, one_shot: bool) -> None: ...
    def get_one_shot(self) -> bool: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def set_frame_texture(self, frame: int, texture: 'Texture2D') -> None: ...
    def get_frame_texture(self, frame: int) -> 'Texture2D': ...
    def set_frame_duration(self, frame: int, duration: float) -> None: ...
    def get_frame_duration(self, frame: int) -> float: ...
    
class Animation(Resource):
    length: float
    loop_mode: int
    step: float
    capture_included: bool
    def add_track(self, type: 'Animation_TrackType', at_position: int = default('''-1''')) -> int: ...
    def remove_track(self, track_idx: int) -> None: ...
    def get_track_count(self) -> int: ...
    def track_get_type(self, track_idx: int) -> 'Animation_TrackType': ...
    def track_get_path(self, track_idx: int) -> 'NodePath': ...
    def track_set_path(self, track_idx: int, path: 'NodePath') -> None: ...
    def find_track(self, path: 'NodePath', type: 'Animation_TrackType') -> int: ...
    def track_move_up(self, track_idx: int) -> None: ...
    def track_move_down(self, track_idx: int) -> None: ...
    def track_move_to(self, track_idx: int, to_idx: int) -> None: ...
    def track_swap(self, track_idx: int, with_idx: int) -> None: ...
    def track_set_imported(self, track_idx: int, imported: bool) -> None: ...
    def track_is_imported(self, track_idx: int) -> bool: ...
    def track_set_enabled(self, track_idx: int, enabled: bool) -> None: ...
    def track_is_enabled(self, track_idx: int) -> bool: ...
    def position_track_insert_key(self, track_idx: int, time: float, position: 'Vector3') -> int: ...
    def rotation_track_insert_key(self, track_idx: int, time: float, rotation: 'Quaternion') -> int: ...
    def scale_track_insert_key(self, track_idx: int, time: float, scale: 'Vector3') -> int: ...
    def blend_shape_track_insert_key(self, track_idx: int, time: float, amount: float) -> int: ...
    def position_track_interpolate(self, track_idx: int, time_sec: float, backward: bool = default('''false''')) -> 'Vector3': ...
    def rotation_track_interpolate(self, track_idx: int, time_sec: float, backward: bool = default('''false''')) -> 'Quaternion': ...
    def scale_track_interpolate(self, track_idx: int, time_sec: float, backward: bool = default('''false''')) -> 'Vector3': ...
    def blend_shape_track_interpolate(self, track_idx: int, time_sec: float, backward: bool = default('''false''')) -> float: ...
    def track_insert_key(self, track_idx: int, time: float, key: 'Variant', transition: float = default('''1''')) -> int: ...
    def track_remove_key(self, track_idx: int, key_idx: int) -> None: ...
    def track_remove_key_at_time(self, track_idx: int, time: float) -> None: ...
    def track_set_key_value(self, track_idx: int, key: int, value: 'Variant') -> None: ...
    def track_set_key_transition(self, track_idx: int, key_idx: int, transition: float) -> None: ...
    def track_set_key_time(self, track_idx: int, key_idx: int, time: float) -> None: ...
    def track_get_key_transition(self, track_idx: int, key_idx: int) -> float: ...
    def track_get_key_count(self, track_idx: int) -> int: ...
    def track_get_key_value(self, track_idx: int, key_idx: int) -> 'Variant': ...
    def track_get_key_time(self, track_idx: int, key_idx: int) -> float: ...
    def track_find_key(self, track_idx: int, time: float, find_mode: 'Animation_FindMode' = default('''0'''), limit: bool = default('''false'''), backward: bool = default('''false''')) -> int: ...
    def track_set_interpolation_type(self, track_idx: int, interpolation: 'Animation_InterpolationType') -> None: ...
    def track_get_interpolation_type(self, track_idx: int) -> 'Animation_InterpolationType': ...
    def track_set_interpolation_loop_wrap(self, track_idx: int, interpolation: bool) -> None: ...
    def track_get_interpolation_loop_wrap(self, track_idx: int) -> bool: ...
    def track_is_compressed(self, track_idx: int) -> bool: ...
    def value_track_set_update_mode(self, track_idx: int, mode: 'Animation_UpdateMode') -> None: ...
    def value_track_get_update_mode(self, track_idx: int) -> 'Animation_UpdateMode': ...
    def value_track_interpolate(self, track_idx: int, time_sec: float, backward: bool = default('''false''')) -> 'Variant': ...
    def method_track_get_name(self, track_idx: int, key_idx: int) -> 'StringName': ...
    def method_track_get_params(self, track_idx: int, key_idx: int) -> 'Array': ...
    def bezier_track_insert_key(self, track_idx: int, time: float, value: float, in_handle: 'Vector2' = default('''Vector2(0, 0)'''), out_handle: 'Vector2' = default('''Vector2(0, 0)''')) -> int: ...
    def bezier_track_set_key_value(self, track_idx: int, key_idx: int, value: float) -> None: ...
    def bezier_track_set_key_in_handle(self, track_idx: int, key_idx: int, in_handle: 'Vector2', balanced_value_time_ratio: float = default('''1.0''')) -> None: ...
    def bezier_track_set_key_out_handle(self, track_idx: int, key_idx: int, out_handle: 'Vector2', balanced_value_time_ratio: float = default('''1.0''')) -> None: ...
    def bezier_track_get_key_value(self, track_idx: int, key_idx: int) -> float: ...
    def bezier_track_get_key_in_handle(self, track_idx: int, key_idx: int) -> 'Vector2': ...
    def bezier_track_get_key_out_handle(self, track_idx: int, key_idx: int) -> 'Vector2': ...
    def bezier_track_interpolate(self, track_idx: int, time: float) -> float: ...
    def audio_track_insert_key(self, track_idx: int, time: float, stream: 'Resource', start_offset: float = default('''0'''), end_offset: float = default('''0''')) -> int: ...
    def audio_track_set_key_stream(self, track_idx: int, key_idx: int, stream: 'Resource') -> None: ...
    def audio_track_set_key_start_offset(self, track_idx: int, key_idx: int, offset: float) -> None: ...
    def audio_track_set_key_end_offset(self, track_idx: int, key_idx: int, offset: float) -> None: ...
    def audio_track_get_key_stream(self, track_idx: int, key_idx: int) -> 'Resource': ...
    def audio_track_get_key_start_offset(self, track_idx: int, key_idx: int) -> float: ...
    def audio_track_get_key_end_offset(self, track_idx: int, key_idx: int) -> float: ...
    def audio_track_set_use_blend(self, track_idx: int, enable: bool) -> None: ...
    def audio_track_is_use_blend(self, track_idx: int) -> bool: ...
    def animation_track_insert_key(self, track_idx: int, time: float, animation: 'StringName') -> int: ...
    def animation_track_set_key_animation(self, track_idx: int, key_idx: int, animation: 'StringName') -> None: ...
    def animation_track_get_key_animation(self, track_idx: int, key_idx: int) -> 'StringName': ...
    def add_marker(self, name: 'StringName', time: float) -> None: ...
    def remove_marker(self, name: 'StringName') -> None: ...
    def has_marker(self, name: 'StringName') -> bool: ...
    def get_marker_at_time(self, time: float) -> 'StringName': ...
    def get_next_marker(self, time: float) -> 'StringName': ...
    def get_prev_marker(self, time: float) -> 'StringName': ...
    def get_marker_time(self, name: 'StringName') -> float: ...
    def get_marker_names(self) -> 'PackedStringArray': ...
    def get_marker_color(self, name: 'StringName') -> 'Color': ...
    def set_marker_color(self, name: 'StringName', color: 'Color') -> None: ...
    def set_length(self, time_sec: float) -> None: ...
    def get_length(self) -> float: ...
    def set_loop_mode(self, loop_mode: 'Animation_LoopMode') -> None: ...
    def get_loop_mode(self) -> 'Animation_LoopMode': ...
    def set_step(self, size_sec: float) -> None: ...
    def get_step(self) -> float: ...
    def clear(self) -> None: ...
    def copy_track(self, track_idx: int, to_animation: 'Animation') -> None: ...
    def optimize(self, allowed_velocity_err: float = default('''0.01'''), allowed_angular_err: float = default('''0.01'''), precision: int = default('''3''')) -> None: ...
    def compress(self, page_size: int = default('''8192'''), fps: int = default('''120'''), split_tolerance: float = default('''4.0''')) -> None: ...
    def is_capture_included(self) -> bool: ...
    
class Animation_TrackType(Enum):
    TYPE_VALUE = 0
    TYPE_POSITION_3D = 1
    TYPE_ROTATION_3D = 2
    TYPE_SCALE_3D = 3
    TYPE_BLEND_SHAPE = 4
    TYPE_METHOD = 5
    TYPE_BEZIER = 6
    TYPE_AUDIO = 7
    TYPE_ANIMATION = 8

class Animation_InterpolationType(Enum):
    INTERPOLATION_NEAREST = 0
    INTERPOLATION_LINEAR = 1
    INTERPOLATION_CUBIC = 2
    INTERPOLATION_LINEAR_ANGLE = 3
    INTERPOLATION_CUBIC_ANGLE = 4

class Animation_UpdateMode(Enum):
    UPDATE_CONTINUOUS = 0
    UPDATE_DISCRETE = 1
    UPDATE_CAPTURE = 2

class Animation_LoopMode(Enum):
    LOOP_NONE = 0
    LOOP_LINEAR = 1
    LOOP_PINGPONG = 2

class Animation_LoopedFlag(Enum):
    LOOPED_FLAG_NONE = 0
    LOOPED_FLAG_END = 1
    LOOPED_FLAG_START = 2

class Animation_FindMode(Enum):
    FIND_MODE_NEAREST = 0
    FIND_MODE_APPROX = 1
    FIND_MODE_EXACT = 2

class AnimationLibrary(Resource):
    animation_added: Signal[Callable[['StringName'], None]]  # animation_added(name: 'StringName')
    animation_removed: Signal[Callable[['StringName'], None]]  # animation_removed(name: 'StringName')
    animation_renamed: Signal[Callable[['StringName', 'StringName'], None]]  # animation_renamed(name: 'StringName', to_name: 'StringName')
    animation_changed: Signal[Callable[['StringName'], None]]  # animation_changed(name: 'StringName')
    def add_animation(self, name: 'StringName', animation: 'Animation') -> 'Error': ...
    def remove_animation(self, name: 'StringName') -> None: ...
    def rename_animation(self, name: 'StringName', newname: 'StringName') -> None: ...
    def has_animation(self, name: 'StringName') -> bool: ...
    def get_animation(self, name: 'StringName') -> 'Animation': ...
    def get_animation_list(self) -> 'list[StringName]': ...
    def get_animation_list_size(self) -> int: ...
    
class AnimationMixer(Node):
    active: bool
    deterministic: bool
    reset_on_save: bool
    root_node: 'NodePath'
    root_motion_track: 'NodePath'
    root_motion_local: bool
    audio_max_polyphony: int
    callback_mode_process: int
    callback_mode_method: int
    callback_mode_discrete: int
    animation_list_changed: Signal[Callable[[], None]]  # animation_list_changed()
    animation_libraries_updated: Signal[Callable[[], None]]  # animation_libraries_updated()
    animation_finished: Signal[Callable[['StringName'], None]]  # animation_finished(anim_name: 'StringName')
    animation_started: Signal[Callable[['StringName'], None]]  # animation_started(anim_name: 'StringName')
    caches_cleared: Signal[Callable[[], None]]  # caches_cleared()
    mixer_applied: Signal[Callable[[], None]]  # mixer_applied()
    mixer_updated: Signal[Callable[[], None]]  # mixer_updated()
    def _post_process_key_value(self, animation: 'Animation', track: int, value: 'Variant', object_id: int, object_sub_idx: int) -> 'Variant': ...
    def add_animation_library(self, name: 'StringName', library: 'AnimationLibrary') -> 'Error': ...
    def remove_animation_library(self, name: 'StringName') -> None: ...
    def rename_animation_library(self, name: 'StringName', newname: 'StringName') -> None: ...
    def has_animation_library(self, name: 'StringName') -> bool: ...
    def get_animation_library(self, name: 'StringName') -> 'AnimationLibrary': ...
    def get_animation_library_list(self) -> 'list[StringName]': ...
    def has_animation(self, name: 'StringName') -> bool: ...
    def get_animation(self, name: 'StringName') -> 'Animation': ...
    def get_animation_list(self) -> 'PackedStringArray': ...
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def set_deterministic(self, deterministic: bool) -> None: ...
    def is_deterministic(self) -> bool: ...
    def set_root_node(self, path: 'NodePath') -> None: ...
    def get_root_node(self) -> 'NodePath': ...
    def set_callback_mode_process(self, mode: 'AnimationMixer_AnimationCallbackModeProcess') -> None: ...
    def get_callback_mode_process(self) -> 'AnimationMixer_AnimationCallbackModeProcess': ...
    def set_callback_mode_method(self, mode: 'AnimationMixer_AnimationCallbackModeMethod') -> None: ...
    def get_callback_mode_method(self) -> 'AnimationMixer_AnimationCallbackModeMethod': ...
    def set_callback_mode_discrete(self, mode: 'AnimationMixer_AnimationCallbackModeDiscrete') -> None: ...
    def get_callback_mode_discrete(self) -> 'AnimationMixer_AnimationCallbackModeDiscrete': ...
    def set_audio_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_audio_max_polyphony(self) -> int: ...
    def set_root_motion_track(self, path: 'NodePath') -> None: ...
    def get_root_motion_track(self) -> 'NodePath': ...
    def set_root_motion_local(self, enabled: bool) -> None: ...
    def is_root_motion_local(self) -> bool: ...
    def get_root_motion_position(self) -> 'Vector3': ...
    def get_root_motion_rotation(self) -> 'Quaternion': ...
    def get_root_motion_scale(self) -> 'Vector3': ...
    def get_root_motion_position_accumulator(self) -> 'Vector3': ...
    def get_root_motion_rotation_accumulator(self) -> 'Quaternion': ...
    def get_root_motion_scale_accumulator(self) -> 'Vector3': ...
    def clear_caches(self) -> None: ...
    def advance(self, delta: float) -> None: ...
    def capture(self, name: 'StringName', duration: float, trans_type: 'Tween_TransitionType' = default('''0'''), ease_type: 'Tween_EaseType' = default('''0''')) -> None: ...
    def set_reset_on_save_enabled(self, enabled: bool) -> None: ...
    def is_reset_on_save_enabled(self) -> bool: ...
    def find_animation(self, animation: 'Animation') -> 'StringName': ...
    def find_animation_library(self, animation: 'Animation') -> 'StringName': ...
    
class AnimationMixer_AnimationCallbackModeProcess(Enum):
    ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS = 0
    ANIMATION_CALLBACK_MODE_PROCESS_IDLE = 1
    ANIMATION_CALLBACK_MODE_PROCESS_MANUAL = 2

class AnimationMixer_AnimationCallbackModeMethod(Enum):
    ANIMATION_CALLBACK_MODE_METHOD_DEFERRED = 0
    ANIMATION_CALLBACK_MODE_METHOD_IMMEDIATE = 1

class AnimationMixer_AnimationCallbackModeDiscrete(Enum):
    ANIMATION_CALLBACK_MODE_DISCRETE_DOMINANT = 0
    ANIMATION_CALLBACK_MODE_DISCRETE_RECESSIVE = 1
    ANIMATION_CALLBACK_MODE_DISCRETE_FORCE_CONTINUOUS = 2

class AnimationNode(Resource):
    filter_enabled: bool
    filters: 'Array'
    tree_changed: Signal[Callable[[], None]]  # tree_changed()
    animation_node_renamed: Signal[Callable[['int', 'String', 'String'], None]]  # animation_node_renamed(object_id: int, old_name: 'String', new_name: 'String')
    animation_node_removed: Signal[Callable[['int', 'String'], None]]  # animation_node_removed(object_id: int, name: 'String')
    def _get_child_nodes(self) -> 'Dictionary': ...
    def _get_parameter_list(self) -> 'Array': ...
    def _get_child_by_name(self, name: 'StringName') -> 'AnimationNode': ...
    def _get_parameter_default_value(self, parameter: 'StringName') -> 'Variant': ...
    def _is_parameter_read_only(self, parameter: 'StringName') -> bool: ...
    def _process(self, time: float, seek: bool, is_external_seeking: bool, test_only: bool) -> float: ...
    def _get_caption(self) -> 'String': ...
    def _has_filter(self) -> bool: ...
    def add_input(self, name: 'String') -> bool: ...
    def remove_input(self, index: int) -> None: ...
    def set_input_name(self, input: int, name: 'String') -> bool: ...
    def get_input_name(self, input: int) -> 'String': ...
    def get_input_count(self) -> int: ...
    def find_input(self, name: 'String') -> int: ...
    def set_filter_path(self, path: 'NodePath', enable: bool) -> None: ...
    def is_path_filtered(self, path: 'NodePath') -> bool: ...
    def set_filter_enabled(self, enable: bool) -> None: ...
    def is_filter_enabled(self) -> bool: ...
    def get_processing_animation_tree_instance_id(self) -> int: ...
    def is_process_testing(self) -> bool: ...
    def blend_animation(self, animation: 'StringName', time: float, delta: float, seeked: bool, is_external_seeking: bool, blend: float, looped_flag: 'Animation_LoopedFlag' = default('''0''')) -> None: ...
    def blend_node(self, name: 'StringName', node: 'AnimationNode', time: float, seek: bool, is_external_seeking: bool, blend: float, filter: 'AnimationNode_FilterAction' = default('''0'''), sync: bool = default('''true'''), test_only: bool = default('''false''')) -> float: ...
    def blend_input(self, input_index: int, time: float, seek: bool, is_external_seeking: bool, blend: float, filter: 'AnimationNode_FilterAction' = default('''0'''), sync: bool = default('''true'''), test_only: bool = default('''false''')) -> float: ...
    def set_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def get_parameter(self, name: 'StringName') -> 'Variant': ...
    
class AnimationNode_FilterAction(Enum):
    FILTER_IGNORE = 0
    FILTER_PASS = 1
    FILTER_STOP = 2
    FILTER_BLEND = 3

class AnimationNodeAdd2(AnimationNodeSync):
    pass
    
class AnimationNodeAdd3(AnimationNodeSync):
    pass
    
class AnimationNodeAnimation(AnimationRootNode):
    animation: 'StringName'
    play_mode: int
    advance_on_start: bool
    use_custom_timeline: bool
    timeline_length: float
    stretch_time_scale: bool
    start_offset: float
    loop_mode: int
    def set_animation(self, name: 'StringName') -> None: ...
    def get_animation(self) -> 'StringName': ...
    def set_play_mode(self, mode: 'AnimationNodeAnimation_PlayMode') -> None: ...
    def get_play_mode(self) -> 'AnimationNodeAnimation_PlayMode': ...
    def set_advance_on_start(self, advance_on_start: bool) -> None: ...
    def is_advance_on_start(self) -> bool: ...
    def set_use_custom_timeline(self, use_custom_timeline: bool) -> None: ...
    def is_using_custom_timeline(self) -> bool: ...
    def set_timeline_length(self, timeline_length: float) -> None: ...
    def get_timeline_length(self) -> float: ...
    def set_stretch_time_scale(self, stretch_time_scale: bool) -> None: ...
    def is_stretching_time_scale(self) -> bool: ...
    def set_start_offset(self, start_offset: float) -> None: ...
    def get_start_offset(self) -> float: ...
    def set_loop_mode(self, loop_mode: 'Animation_LoopMode') -> None: ...
    def get_loop_mode(self) -> 'Animation_LoopMode': ...
    
class AnimationNodeAnimation_PlayMode(Enum):
    PLAY_MODE_FORWARD = 0
    PLAY_MODE_BACKWARD = 1

class AnimationNodeBlend2(AnimationNodeSync):
    pass
    
class AnimationNodeBlend3(AnimationNodeSync):
    pass
    
class AnimationNodeBlendSpace1D(AnimationRootNode):
    min_space: float
    max_space: float
    snap: float
    value_label: 'String'
    blend_mode: int
    sync: bool
    def add_blend_point(self, node: 'AnimationRootNode', pos: float, at_index: int = default('''-1''')) -> None: ...
    def set_blend_point_position(self, point: int, pos: float) -> None: ...
    def get_blend_point_position(self, point: int) -> float: ...
    def set_blend_point_node(self, point: int, node: 'AnimationRootNode') -> None: ...
    def get_blend_point_node(self, point: int) -> 'AnimationRootNode': ...
    def remove_blend_point(self, point: int) -> None: ...
    def get_blend_point_count(self) -> int: ...
    def set_min_space(self, min_space: float) -> None: ...
    def get_min_space(self) -> float: ...
    def set_max_space(self, max_space: float) -> None: ...
    def get_max_space(self) -> float: ...
    def set_snap(self, snap: float) -> None: ...
    def get_snap(self) -> float: ...
    def set_value_label(self, text: 'String') -> None: ...
    def get_value_label(self) -> 'String': ...
    def set_blend_mode(self, mode: 'AnimationNodeBlendSpace1D_BlendMode') -> None: ...
    def get_blend_mode(self) -> 'AnimationNodeBlendSpace1D_BlendMode': ...
    def set_use_sync(self, enable: bool) -> None: ...
    def is_using_sync(self) -> bool: ...
    
class AnimationNodeBlendSpace1D_BlendMode(Enum):
    BLEND_MODE_INTERPOLATED = 0
    BLEND_MODE_DISCRETE = 1
    BLEND_MODE_DISCRETE_CARRY = 2

class AnimationNodeBlendSpace2D(AnimationRootNode):
    auto_triangles: bool
    triangles: 'PackedInt32Array'
    min_space: 'Vector2'
    max_space: 'Vector2'
    snap: 'Vector2'
    x_label: 'String'
    y_label: 'String'
    blend_mode: int
    sync: bool
    triangles_updated: Signal[Callable[[], None]]  # triangles_updated()
    def add_blend_point(self, node: 'AnimationRootNode', pos: 'Vector2', at_index: int = default('''-1''')) -> None: ...
    def set_blend_point_position(self, point: int, pos: 'Vector2') -> None: ...
    def get_blend_point_position(self, point: int) -> 'Vector2': ...
    def set_blend_point_node(self, point: int, node: 'AnimationRootNode') -> None: ...
    def get_blend_point_node(self, point: int) -> 'AnimationRootNode': ...
    def remove_blend_point(self, point: int) -> None: ...
    def get_blend_point_count(self) -> int: ...
    def add_triangle(self, x: int, y: int, z: int, at_index: int = default('''-1''')) -> None: ...
    def get_triangle_point(self, triangle: int, point: int) -> int: ...
    def remove_triangle(self, triangle: int) -> None: ...
    def get_triangle_count(self) -> int: ...
    def set_min_space(self, min_space: 'Vector2') -> None: ...
    def get_min_space(self) -> 'Vector2': ...
    def set_max_space(self, max_space: 'Vector2') -> None: ...
    def get_max_space(self) -> 'Vector2': ...
    def set_snap(self, snap: 'Vector2') -> None: ...
    def get_snap(self) -> 'Vector2': ...
    def set_x_label(self, text: 'String') -> None: ...
    def get_x_label(self) -> 'String': ...
    def set_y_label(self, text: 'String') -> None: ...
    def get_y_label(self) -> 'String': ...
    def set_auto_triangles(self, enable: bool) -> None: ...
    def get_auto_triangles(self) -> bool: ...
    def set_blend_mode(self, mode: 'AnimationNodeBlendSpace2D_BlendMode') -> None: ...
    def get_blend_mode(self) -> 'AnimationNodeBlendSpace2D_BlendMode': ...
    def set_use_sync(self, enable: bool) -> None: ...
    def is_using_sync(self) -> bool: ...
    
class AnimationNodeBlendSpace2D_BlendMode(Enum):
    BLEND_MODE_INTERPOLATED = 0
    BLEND_MODE_DISCRETE = 1
    BLEND_MODE_DISCRETE_CARRY = 2

class AnimationNodeBlendTree(AnimationRootNode):
    graph_offset: 'Vector2'
    CONNECTION_OK = 0
    CONNECTION_ERROR_NO_INPUT = 1
    CONNECTION_ERROR_NO_INPUT_INDEX = 2
    CONNECTION_ERROR_NO_OUTPUT = 3
    CONNECTION_ERROR_SAME_NODE = 4
    CONNECTION_ERROR_CONNECTION_EXISTS = 5
    
    node_changed: Signal[Callable[['StringName'], None]]  # node_changed(node_name: 'StringName')
    def add_node(self, name: 'StringName', node: 'AnimationNode', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def get_node(self, name: 'StringName') -> 'AnimationNode': ...
    def remove_node(self, name: 'StringName') -> None: ...
    def rename_node(self, name: 'StringName', new_name: 'StringName') -> None: ...
    def has_node(self, name: 'StringName') -> bool: ...
    def connect_node(self, input_node: 'StringName', input_index: int, output_node: 'StringName') -> None: ...
    def disconnect_node(self, input_node: 'StringName', input_index: int) -> None: ...
    def set_node_position(self, name: 'StringName', position: 'Vector2') -> None: ...
    def get_node_position(self, name: 'StringName') -> 'Vector2': ...
    def set_graph_offset(self, offset: 'Vector2') -> None: ...
    def get_graph_offset(self) -> 'Vector2': ...
    
class AnimationNodeExtension(AnimationNode):
    def _process_animation_node(self, playback_info: 'PackedFloat64Array', test_only: bool) -> 'PackedFloat32Array': ...
    @staticmethod
    def is_looping(node_info: 'PackedFloat32Array') -> bool: ...
    @staticmethod
    def get_remaining_time(node_info: 'PackedFloat32Array', break_loop: bool) -> float: ...
    
class AnimationNodeOneShot(AnimationNodeSync):
    mix_mode: int
    fadein_time: float
    fadein_curve: 'Curve'
    fadeout_time: float
    fadeout_curve: 'Curve'
    break_loop_at_end: bool
    autorestart: bool
    autorestart_delay: float
    autorestart_random_delay: float
    def set_fadein_time(self, time: float) -> None: ...
    def get_fadein_time(self) -> float: ...
    def set_fadein_curve(self, curve: 'Curve') -> None: ...
    def get_fadein_curve(self) -> 'Curve': ...
    def set_fadeout_time(self, time: float) -> None: ...
    def get_fadeout_time(self) -> float: ...
    def set_fadeout_curve(self, curve: 'Curve') -> None: ...
    def get_fadeout_curve(self) -> 'Curve': ...
    def set_break_loop_at_end(self, enable: bool) -> None: ...
    def is_loop_broken_at_end(self) -> bool: ...
    def set_autorestart(self, active: bool) -> None: ...
    def has_autorestart(self) -> bool: ...
    def set_autorestart_delay(self, time: float) -> None: ...
    def get_autorestart_delay(self) -> float: ...
    def set_autorestart_random_delay(self, time: float) -> None: ...
    def get_autorestart_random_delay(self) -> float: ...
    def set_mix_mode(self, mode: 'AnimationNodeOneShot_MixMode') -> None: ...
    def get_mix_mode(self) -> 'AnimationNodeOneShot_MixMode': ...
    
class AnimationNodeOneShot_OneShotRequest(Enum):
    ONE_SHOT_REQUEST_NONE = 0
    ONE_SHOT_REQUEST_FIRE = 1
    ONE_SHOT_REQUEST_ABORT = 2
    ONE_SHOT_REQUEST_FADE_OUT = 3

class AnimationNodeOneShot_MixMode(Enum):
    MIX_MODE_BLEND = 0
    MIX_MODE_ADD = 1

class AnimationNodeOutput(AnimationNode):
    pass
    
class AnimationNodeStateMachine(AnimationRootNode):
    state_machine_type: int
    allow_transition_to_self: bool
    reset_ends: bool
    def add_node(self, name: 'StringName', node: 'AnimationNode', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def replace_node(self, name: 'StringName', node: 'AnimationNode') -> None: ...
    def get_node(self, name: 'StringName') -> 'AnimationNode': ...
    def remove_node(self, name: 'StringName') -> None: ...
    def rename_node(self, name: 'StringName', new_name: 'StringName') -> None: ...
    def has_node(self, name: 'StringName') -> bool: ...
    def get_node_name(self, node: 'AnimationNode') -> 'StringName': ...
    def set_node_position(self, name: 'StringName', position: 'Vector2') -> None: ...
    def get_node_position(self, name: 'StringName') -> 'Vector2': ...
    def has_transition(self, from_: 'StringName', to: 'StringName') -> bool: ...
    def add_transition(self, from_: 'StringName', to: 'StringName', transition: 'AnimationNodeStateMachineTransition') -> None: ...
    def get_transition(self, idx: int) -> 'AnimationNodeStateMachineTransition': ...
    def get_transition_from(self, idx: int) -> 'StringName': ...
    def get_transition_to(self, idx: int) -> 'StringName': ...
    def get_transition_count(self) -> int: ...
    def remove_transition_by_index(self, idx: int) -> None: ...
    def remove_transition(self, from_: 'StringName', to: 'StringName') -> None: ...
    def set_graph_offset(self, offset: 'Vector2') -> None: ...
    def get_graph_offset(self) -> 'Vector2': ...
    def set_state_machine_type(self, state_machine_type: 'AnimationNodeStateMachine_StateMachineType') -> None: ...
    def get_state_machine_type(self) -> 'AnimationNodeStateMachine_StateMachineType': ...
    def set_allow_transition_to_self(self, enable: bool) -> None: ...
    def is_allow_transition_to_self(self) -> bool: ...
    def set_reset_ends(self, enable: bool) -> None: ...
    def are_ends_reset(self) -> bool: ...
    
class AnimationNodeStateMachine_StateMachineType(Enum):
    STATE_MACHINE_TYPE_ROOT = 0
    STATE_MACHINE_TYPE_NESTED = 1
    STATE_MACHINE_TYPE_GROUPED = 2

class AnimationNodeStateMachinePlayback(Resource):
    def travel(self, to_node: 'StringName', reset_on_teleport: bool = default('''true''')) -> None: ...
    def start(self, node: 'StringName', reset: bool = default('''true''')) -> None: ...
    def next(self) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_current_node(self) -> 'StringName': ...
    def get_current_play_position(self) -> float: ...
    def get_current_length(self) -> float: ...
    def get_fading_from_node(self) -> 'StringName': ...
    def get_travel_path(self) -> 'list[StringName]': ...
    
class AnimationNodeStateMachineTransition(Resource):
    xfade_time: float
    xfade_curve: 'Curve'
    break_loop_at_end: bool
    reset: bool
    priority: int
    switch_mode: int
    advance_mode: int
    advance_condition: 'StringName'
    advance_expression: 'String'
    advance_condition_changed: Signal[Callable[[], None]]  # advance_condition_changed()
    def set_switch_mode(self, mode: 'AnimationNodeStateMachineTransition_SwitchMode') -> None: ...
    def get_switch_mode(self) -> 'AnimationNodeStateMachineTransition_SwitchMode': ...
    def set_advance_mode(self, mode: 'AnimationNodeStateMachineTransition_AdvanceMode') -> None: ...
    def get_advance_mode(self) -> 'AnimationNodeStateMachineTransition_AdvanceMode': ...
    def set_advance_condition(self, name: 'StringName') -> None: ...
    def get_advance_condition(self) -> 'StringName': ...
    def set_xfade_time(self, secs: float) -> None: ...
    def get_xfade_time(self) -> float: ...
    def set_xfade_curve(self, curve: 'Curve') -> None: ...
    def get_xfade_curve(self) -> 'Curve': ...
    def set_break_loop_at_end(self, enable: bool) -> None: ...
    def is_loop_broken_at_end(self) -> bool: ...
    def set_reset(self, reset: bool) -> None: ...
    def is_reset(self) -> bool: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def set_advance_expression(self, text: 'String') -> None: ...
    def get_advance_expression(self) -> 'String': ...
    
class AnimationNodeStateMachineTransition_SwitchMode(Enum):
    SWITCH_MODE_IMMEDIATE = 0
    SWITCH_MODE_SYNC = 1
    SWITCH_MODE_AT_END = 2

class AnimationNodeStateMachineTransition_AdvanceMode(Enum):
    ADVANCE_MODE_DISABLED = 0
    ADVANCE_MODE_ENABLED = 1
    ADVANCE_MODE_AUTO = 2

class AnimationNodeSub2(AnimationNodeSync):
    pass
    
class AnimationNodeSync(AnimationNode):
    sync: bool
    def set_use_sync(self, enable: bool) -> None: ...
    def is_using_sync(self) -> bool: ...
    
class AnimationNodeTimeScale(AnimationNode):
    pass
    
class AnimationNodeTimeSeek(AnimationNode):
    explicit_elapse: bool
    def set_explicit_elapse(self, enable: bool) -> None: ...
    def is_explicit_elapse(self) -> bool: ...
    
class AnimationNodeTransition(AnimationNodeSync):
    xfade_time: float
    xfade_curve: 'Curve'
    allow_transition_to_self: bool
    input_count: int
    def set_input_count(self, input_count: int) -> None: ...
    def set_input_as_auto_advance(self, input: int, enable: bool) -> None: ...
    def is_input_set_as_auto_advance(self, input: int) -> bool: ...
    def set_input_break_loop_at_end(self, input: int, enable: bool) -> None: ...
    def is_input_loop_broken_at_end(self, input: int) -> bool: ...
    def set_input_reset(self, input: int, enable: bool) -> None: ...
    def is_input_reset(self, input: int) -> bool: ...
    def set_xfade_time(self, time: float) -> None: ...
    def get_xfade_time(self) -> float: ...
    def set_xfade_curve(self, curve: 'Curve') -> None: ...
    def get_xfade_curve(self) -> 'Curve': ...
    def set_allow_transition_to_self(self, enable: bool) -> None: ...
    def is_allow_transition_to_self(self) -> bool: ...
    
class AnimationPlayer(AnimationMixer):
    current_animation: 'StringName'
    assigned_animation: 'StringName'
    autoplay: 'StringName'
    current_animation_length: float
    current_animation_position: float
    playback_auto_capture: bool
    playback_auto_capture_duration: float
    playback_auto_capture_transition_type: int
    playback_auto_capture_ease_type: int
    playback_default_blend_time: float
    speed_scale: float
    movie_quit_on_finish: bool
    current_animation_changed: Signal[Callable[['String'], None]]  # current_animation_changed(name: 'String')
    animation_changed: Signal[Callable[['StringName', 'StringName'], None]]  # animation_changed(old_name: 'StringName', new_name: 'StringName')
    def animation_set_next(self, animation_from: 'StringName', animation_to: 'StringName') -> None: ...
    def animation_get_next(self, animation_from: 'StringName') -> 'StringName': ...
    def set_blend_time(self, animation_from: 'StringName', animation_to: 'StringName', sec: float) -> None: ...
    def get_blend_time(self, animation_from: 'StringName', animation_to: 'StringName') -> float: ...
    def set_default_blend_time(self, sec: float) -> None: ...
    def get_default_blend_time(self) -> float: ...
    def set_auto_capture(self, auto_capture: bool) -> None: ...
    def is_auto_capture(self) -> bool: ...
    def set_auto_capture_duration(self, auto_capture_duration: float) -> None: ...
    def get_auto_capture_duration(self) -> float: ...
    def set_auto_capture_transition_type(self, auto_capture_transition_type: 'Tween_TransitionType') -> None: ...
    def get_auto_capture_transition_type(self) -> 'Tween_TransitionType': ...
    def set_auto_capture_ease_type(self, auto_capture_ease_type: 'Tween_EaseType') -> None: ...
    def get_auto_capture_ease_type(self) -> 'Tween_EaseType': ...
    def play(self, name: 'StringName' = default('''&""'''), custom_blend: float = default('''-1'''), custom_speed: float = default('''1.0'''), from_end: bool = default('''false''')) -> None: ...
    def play_section_with_markers(self, name: 'StringName' = default('''&""'''), start_marker: 'StringName' = default('''&""'''), end_marker: 'StringName' = default('''&""'''), custom_blend: float = default('''-1'''), custom_speed: float = default('''1.0'''), from_end: bool = default('''false''')) -> None: ...
    def play_section(self, name: 'StringName' = default('''&""'''), start_time: float = default('''-1'''), end_time: float = default('''-1'''), custom_blend: float = default('''-1'''), custom_speed: float = default('''1.0'''), from_end: bool = default('''false''')) -> None: ...
    def play_backwards(self, name: 'StringName' = default('''&""'''), custom_blend: float = default('''-1''')) -> None: ...
    def play_section_with_markers_backwards(self, name: 'StringName' = default('''&""'''), start_marker: 'StringName' = default('''&""'''), end_marker: 'StringName' = default('''&""'''), custom_blend: float = default('''-1''')) -> None: ...
    def play_section_backwards(self, name: 'StringName' = default('''&""'''), start_time: float = default('''-1'''), end_time: float = default('''-1'''), custom_blend: float = default('''-1''')) -> None: ...
    def play_with_capture(self, name: 'StringName' = default('''&""'''), duration: float = default('''-1.0'''), custom_blend: float = default('''-1'''), custom_speed: float = default('''1.0'''), from_end: bool = default('''false'''), trans_type: 'Tween_TransitionType' = default('''0'''), ease_type: 'Tween_EaseType' = default('''0''')) -> None: ...
    def pause(self) -> None: ...
    def stop(self, keep_state: bool = default('''false''')) -> None: ...
    def is_playing(self) -> bool: ...
    def set_current_animation(self, animation: 'String') -> None: ...
    def get_current_animation(self) -> 'String': ...
    def set_assigned_animation(self, animation: 'String') -> None: ...
    def get_assigned_animation(self) -> 'String': ...
    def queue(self, name: 'StringName') -> None: ...
    def get_queue(self) -> 'PackedStringArray': ...
    def clear_queue(self) -> None: ...
    def set_speed_scale(self, speed: float) -> None: ...
    def get_speed_scale(self) -> float: ...
    def get_playing_speed(self) -> float: ...
    def set_autoplay(self, name: 'String') -> None: ...
    def get_autoplay(self) -> 'String': ...
    def set_movie_quit_on_finish_enabled(self, enabled: bool) -> None: ...
    def is_movie_quit_on_finish_enabled(self) -> bool: ...
    def get_current_animation_position(self) -> float: ...
    def get_current_animation_length(self) -> float: ...
    def set_section_with_markers(self, start_marker: 'StringName' = default('''&""'''), end_marker: 'StringName' = default('''&""''')) -> None: ...
    def set_section(self, start_time: float = default('''-1'''), end_time: float = default('''-1''')) -> None: ...
    def reset_section(self) -> None: ...
    def get_section_start_time(self) -> float: ...
    def get_section_end_time(self) -> float: ...
    def has_section(self) -> bool: ...
    def seek(self, seconds: float, update: bool = default('''false'''), update_only: bool = default('''false''')) -> None: ...
    def set_process_callback(self, mode: 'AnimationPlayer_AnimationProcessCallback') -> None: ...
    def get_process_callback(self) -> 'AnimationPlayer_AnimationProcessCallback': ...
    def set_method_call_mode(self, mode: 'AnimationPlayer_AnimationMethodCallMode') -> None: ...
    def get_method_call_mode(self) -> 'AnimationPlayer_AnimationMethodCallMode': ...
    def set_root(self, path: 'NodePath') -> None: ...
    def get_root(self) -> 'NodePath': ...
    
class AnimationPlayer_AnimationProcessCallback(Enum):
    ANIMATION_PROCESS_PHYSICS = 0
    ANIMATION_PROCESS_IDLE = 1
    ANIMATION_PROCESS_MANUAL = 2

class AnimationPlayer_AnimationMethodCallMode(Enum):
    ANIMATION_METHOD_CALL_DEFERRED = 0
    ANIMATION_METHOD_CALL_IMMEDIATE = 1

class AnimationRootNode(AnimationNode):
    pass
    
class AnimationTree(AnimationMixer):
    tree_root: 'AnimationRootNode'
    advance_expression_base_node: 'NodePath'
    anim_player: 'NodePath'
    animation_player_changed: Signal[Callable[[], None]]  # animation_player_changed()
    def set_tree_root(self, animation_node: 'AnimationRootNode') -> None: ...
    def get_tree_root(self) -> 'AnimationRootNode': ...
    def set_advance_expression_base_node(self, path: 'NodePath') -> None: ...
    def get_advance_expression_base_node(self) -> 'NodePath': ...
    def set_animation_player(self, path: 'NodePath') -> None: ...
    def get_animation_player(self) -> 'NodePath': ...
    def set_process_callback(self, mode: 'AnimationTree_AnimationProcessCallback') -> None: ...
    def get_process_callback(self) -> 'AnimationTree_AnimationProcessCallback': ...
    
class AnimationTree_AnimationProcessCallback(Enum):
    ANIMATION_PROCESS_PHYSICS = 0
    ANIMATION_PROCESS_IDLE = 1
    ANIMATION_PROCESS_MANUAL = 2

class Area2D(CollisionObject2D):
    monitoring: bool
    monitorable: bool
    priority: int
    gravity_space_override: int
    gravity_point: bool
    gravity_point_unit_distance: float
    gravity_point_center: 'Vector2'
    gravity_direction: 'Vector2'
    gravity: float
    linear_damp_space_override: int
    linear_damp: float
    angular_damp_space_override: int
    angular_damp: float
    audio_bus_override: bool
    audio_bus_name: 'StringName'
    body_shape_entered: Signal[Callable[['RID', 'Node2D', 'int', 'int'], None]]  # body_shape_entered(body_rid: 'RID', body: 'Node2D', body_shape_index: int, local_shape_index: int)
    body_shape_exited: Signal[Callable[['RID', 'Node2D', 'int', 'int'], None]]  # body_shape_exited(body_rid: 'RID', body: 'Node2D', body_shape_index: int, local_shape_index: int)
    body_entered: Signal[Callable[['Node2D'], None]]  # body_entered(body: 'Node2D')
    body_exited: Signal[Callable[['Node2D'], None]]  # body_exited(body: 'Node2D')
    area_shape_entered: Signal[Callable[['RID', 'Area2D', 'int', 'int'], None]]  # area_shape_entered(area_rid: 'RID', area: 'Area2D', area_shape_index: int, local_shape_index: int)
    area_shape_exited: Signal[Callable[['RID', 'Area2D', 'int', 'int'], None]]  # area_shape_exited(area_rid: 'RID', area: 'Area2D', area_shape_index: int, local_shape_index: int)
    area_entered: Signal[Callable[['Area2D'], None]]  # area_entered(area: 'Area2D')
    area_exited: Signal[Callable[['Area2D'], None]]  # area_exited(area: 'Area2D')
    def set_gravity_space_override_mode(self, space_override_mode: 'Area2D_SpaceOverride') -> None: ...
    def get_gravity_space_override_mode(self) -> 'Area2D_SpaceOverride': ...
    def set_gravity_is_point(self, enable: bool) -> None: ...
    def is_gravity_a_point(self) -> bool: ...
    def set_gravity_point_unit_distance(self, distance_scale: float) -> None: ...
    def get_gravity_point_unit_distance(self) -> float: ...
    def set_gravity_point_center(self, center: 'Vector2') -> None: ...
    def get_gravity_point_center(self) -> 'Vector2': ...
    def set_gravity_direction(self, direction: 'Vector2') -> None: ...
    def get_gravity_direction(self) -> 'Vector2': ...
    def set_gravity(self, gravity: float) -> None: ...
    def get_gravity(self) -> float: ...
    def set_linear_damp_space_override_mode(self, space_override_mode: 'Area2D_SpaceOverride') -> None: ...
    def get_linear_damp_space_override_mode(self) -> 'Area2D_SpaceOverride': ...
    def set_angular_damp_space_override_mode(self, space_override_mode: 'Area2D_SpaceOverride') -> None: ...
    def get_angular_damp_space_override_mode(self) -> 'Area2D_SpaceOverride': ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def set_monitoring(self, enable: bool) -> None: ...
    def is_monitoring(self) -> bool: ...
    def set_monitorable(self, enable: bool) -> None: ...
    def is_monitorable(self) -> bool: ...
    def get_overlapping_bodies(self) -> 'list[Node2D]': ...
    def get_overlapping_areas(self) -> 'list[Area2D]': ...
    def has_overlapping_bodies(self) -> bool: ...
    def has_overlapping_areas(self) -> bool: ...
    def overlaps_body(self, body: 'Node') -> bool: ...
    def overlaps_area(self, area: 'Node') -> bool: ...
    def set_audio_bus_name(self, name: 'StringName') -> None: ...
    def get_audio_bus_name(self) -> 'StringName': ...
    def set_audio_bus_override(self, enable: bool) -> None: ...
    def is_overriding_audio_bus(self) -> bool: ...
    
class Area2D_SpaceOverride(Enum):
    SPACE_OVERRIDE_DISABLED = 0
    SPACE_OVERRIDE_COMBINE = 1
    SPACE_OVERRIDE_COMBINE_REPLACE = 2
    SPACE_OVERRIDE_REPLACE = 3
    SPACE_OVERRIDE_REPLACE_COMBINE = 4

class Area3D(CollisionObject3D):
    monitoring: bool
    monitorable: bool
    priority: int
    gravity_space_override: int
    gravity_point: bool
    gravity_point_unit_distance: float
    gravity_point_center: 'Vector3'
    gravity_direction: 'Vector3'
    gravity: float
    linear_damp_space_override: int
    linear_damp: float
    angular_damp_space_override: int
    angular_damp: float
    wind_force_magnitude: float
    wind_attenuation_factor: float
    wind_source_path: 'NodePath'
    audio_bus_override: bool
    audio_bus_name: 'StringName'
    reverb_bus_enabled: bool
    reverb_bus_name: 'StringName'
    reverb_bus_amount: float
    reverb_bus_uniformity: float
    body_shape_entered: Signal[Callable[['RID', 'Node3D', 'int', 'int'], None]]  # body_shape_entered(body_rid: 'RID', body: 'Node3D', body_shape_index: int, local_shape_index: int)
    body_shape_exited: Signal[Callable[['RID', 'Node3D', 'int', 'int'], None]]  # body_shape_exited(body_rid: 'RID', body: 'Node3D', body_shape_index: int, local_shape_index: int)
    body_entered: Signal[Callable[['Node3D'], None]]  # body_entered(body: 'Node3D')
    body_exited: Signal[Callable[['Node3D'], None]]  # body_exited(body: 'Node3D')
    area_shape_entered: Signal[Callable[['RID', 'Area3D', 'int', 'int'], None]]  # area_shape_entered(area_rid: 'RID', area: 'Area3D', area_shape_index: int, local_shape_index: int)
    area_shape_exited: Signal[Callable[['RID', 'Area3D', 'int', 'int'], None]]  # area_shape_exited(area_rid: 'RID', area: 'Area3D', area_shape_index: int, local_shape_index: int)
    area_entered: Signal[Callable[['Area3D'], None]]  # area_entered(area: 'Area3D')
    area_exited: Signal[Callable[['Area3D'], None]]  # area_exited(area: 'Area3D')
    def set_gravity_space_override_mode(self, space_override_mode: 'Area3D_SpaceOverride') -> None: ...
    def get_gravity_space_override_mode(self) -> 'Area3D_SpaceOverride': ...
    def set_gravity_is_point(self, enable: bool) -> None: ...
    def is_gravity_a_point(self) -> bool: ...
    def set_gravity_point_unit_distance(self, distance_scale: float) -> None: ...
    def get_gravity_point_unit_distance(self) -> float: ...
    def set_gravity_point_center(self, center: 'Vector3') -> None: ...
    def get_gravity_point_center(self) -> 'Vector3': ...
    def set_gravity_direction(self, direction: 'Vector3') -> None: ...
    def get_gravity_direction(self) -> 'Vector3': ...
    def set_gravity(self, gravity: float) -> None: ...
    def get_gravity(self) -> float: ...
    def set_linear_damp_space_override_mode(self, space_override_mode: 'Area3D_SpaceOverride') -> None: ...
    def get_linear_damp_space_override_mode(self) -> 'Area3D_SpaceOverride': ...
    def set_angular_damp_space_override_mode(self, space_override_mode: 'Area3D_SpaceOverride') -> None: ...
    def get_angular_damp_space_override_mode(self) -> 'Area3D_SpaceOverride': ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def set_wind_force_magnitude(self, wind_force_magnitude: float) -> None: ...
    def get_wind_force_magnitude(self) -> float: ...
    def set_wind_attenuation_factor(self, wind_attenuation_factor: float) -> None: ...
    def get_wind_attenuation_factor(self) -> float: ...
    def set_wind_source_path(self, wind_source_path: 'NodePath') -> None: ...
    def get_wind_source_path(self) -> 'NodePath': ...
    def set_monitorable(self, enable: bool) -> None: ...
    def is_monitorable(self) -> bool: ...
    def set_monitoring(self, enable: bool) -> None: ...
    def is_monitoring(self) -> bool: ...
    def get_overlapping_bodies(self) -> 'list[Node3D]': ...
    def get_overlapping_areas(self) -> 'list[Area3D]': ...
    def has_overlapping_bodies(self) -> bool: ...
    def has_overlapping_areas(self) -> bool: ...
    def overlaps_body(self, body: 'Node') -> bool: ...
    def overlaps_area(self, area: 'Node') -> bool: ...
    def set_audio_bus_override(self, enable: bool) -> None: ...
    def is_overriding_audio_bus(self) -> bool: ...
    def set_audio_bus_name(self, name: 'StringName') -> None: ...
    def get_audio_bus_name(self) -> 'StringName': ...
    def set_use_reverb_bus(self, enable: bool) -> None: ...
    def is_using_reverb_bus(self) -> bool: ...
    def set_reverb_bus_name(self, name: 'StringName') -> None: ...
    def get_reverb_bus_name(self) -> 'StringName': ...
    def set_reverb_amount(self, amount: float) -> None: ...
    def get_reverb_amount(self) -> float: ...
    def set_reverb_uniformity(self, amount: float) -> None: ...
    def get_reverb_uniformity(self) -> float: ...
    
class Area3D_SpaceOverride(Enum):
    SPACE_OVERRIDE_DISABLED = 0
    SPACE_OVERRIDE_COMBINE = 1
    SPACE_OVERRIDE_COMBINE_REPLACE = 2
    SPACE_OVERRIDE_REPLACE = 3
    SPACE_OVERRIDE_REPLACE_COMBINE = 4

class ArrayMesh(Mesh):
    blend_shape_mode: int
    custom_aabb: 'AABB'
    shadow_mesh: 'ArrayMesh'
    def add_blend_shape(self, name: 'StringName') -> None: ...
    def get_blend_shape_count(self) -> int: ...
    def get_blend_shape_name(self, index: int) -> 'StringName': ...
    def set_blend_shape_name(self, index: int, name: 'StringName') -> None: ...
    def clear_blend_shapes(self) -> None: ...
    def set_blend_shape_mode(self, mode: 'Mesh_BlendShapeMode') -> None: ...
    def get_blend_shape_mode(self) -> 'Mesh_BlendShapeMode': ...
    def add_surface_from_arrays(self, primitive: 'Mesh_PrimitiveType', arrays: 'Array', blend_shapes: 'list[Array]' = default('''[]'''), lods: 'Dictionary' = default('''{}'''), flags: 'Mesh_ArrayFormat' = default('''0''')) -> None: ...
    def clear_surfaces(self) -> None: ...
    def surface_remove(self, surf_idx: int) -> None: ...
    def surface_update_vertex_region(self, surf_idx: int, offset: int, data: 'PackedByteArray') -> None: ...
    def surface_update_attribute_region(self, surf_idx: int, offset: int, data: 'PackedByteArray') -> None: ...
    def surface_update_skin_region(self, surf_idx: int, offset: int, data: 'PackedByteArray') -> None: ...
    def surface_get_array_len(self, surf_idx: int) -> int: ...
    def surface_get_array_index_len(self, surf_idx: int) -> int: ...
    def surface_get_format(self, surf_idx: int) -> 'Mesh_ArrayFormat': ...
    def surface_get_primitive_type(self, surf_idx: int) -> 'Mesh_PrimitiveType': ...
    def surface_find_by_name(self, name: 'String') -> int: ...
    def surface_set_name(self, surf_idx: int, name: 'String') -> None: ...
    def surface_get_name(self, surf_idx: int) -> 'String': ...
    def regen_normal_maps(self) -> None: ...
    def lightmap_unwrap(self, transform: 'Transform3D', texel_size: float) -> 'Error': ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    def set_shadow_mesh(self, mesh: 'ArrayMesh') -> None: ...
    def get_shadow_mesh(self) -> 'ArrayMesh': ...
    
class ArrayOccluder3D(Occluder3D):
    vertices: 'PackedVector3Array'
    indices: 'PackedInt32Array'
    def set_arrays(self, vertices: 'PackedVector3Array', indices: 'PackedInt32Array') -> None: ...
    def set_vertices(self, vertices: 'PackedVector3Array') -> None: ...
    def set_indices(self, indices: 'PackedInt32Array') -> None: ...
    
class AspectRatioContainer(Container):
    ratio: float
    stretch_mode: int
    alignment_horizontal: int
    alignment_vertical: int
    def set_ratio(self, ratio: float) -> None: ...
    def get_ratio(self) -> float: ...
    def set_stretch_mode(self, stretch_mode: 'AspectRatioContainer_StretchMode') -> None: ...
    def get_stretch_mode(self) -> 'AspectRatioContainer_StretchMode': ...
    def set_alignment_horizontal(self, alignment_horizontal: 'AspectRatioContainer_AlignmentMode') -> None: ...
    def get_alignment_horizontal(self) -> 'AspectRatioContainer_AlignmentMode': ...
    def set_alignment_vertical(self, alignment_vertical: 'AspectRatioContainer_AlignmentMode') -> None: ...
    def get_alignment_vertical(self) -> 'AspectRatioContainer_AlignmentMode': ...
    
class AspectRatioContainer_StretchMode(Enum):
    STRETCH_WIDTH_CONTROLS_HEIGHT = 0
    STRETCH_HEIGHT_CONTROLS_WIDTH = 1
    STRETCH_FIT = 2
    STRETCH_COVER = 3

class AspectRatioContainer_AlignmentMode(Enum):
    ALIGNMENT_BEGIN = 0
    ALIGNMENT_CENTER = 1
    ALIGNMENT_END = 2

class AtlasTexture(Texture2D):
    atlas: 'Texture2D'
    region: 'Rect2'
    margin: 'Rect2'
    filter_clip: bool
    def set_atlas(self, atlas: 'Texture2D') -> None: ...
    def get_atlas(self) -> 'Texture2D': ...
    def set_region(self, region: 'Rect2') -> None: ...
    def get_region(self) -> 'Rect2': ...
    def set_margin(self, margin: 'Rect2') -> None: ...
    def get_margin(self) -> 'Rect2': ...
    def set_filter_clip(self, enable: bool) -> None: ...
    def has_filter_clip(self) -> bool: ...
    
class AudioBusLayout(Resource):
    pass
    
class AudioEffect(Resource):
    def _instantiate(self) -> 'AudioEffectInstance': ...
    
class AudioEffectAmplify(AudioEffect):
    volume_db: float
    volume_linear: float
    def set_volume_db(self, volume: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_volume_linear(self, volume: float) -> None: ...
    def get_volume_linear(self) -> float: ...
    
class AudioEffectBandLimitFilter(AudioEffectFilter):
    pass
    
class AudioEffectBandPassFilter(AudioEffectFilter):
    pass
    
class AudioEffectCapture(AudioEffect):
    buffer_length: float
    def can_get_buffer(self, frames: int) -> bool: ...
    def get_buffer(self, frames: int) -> 'PackedVector2Array': ...
    def clear_buffer(self) -> None: ...
    def set_buffer_length(self, buffer_length_seconds: float) -> None: ...
    def get_buffer_length(self) -> float: ...
    def get_frames_available(self) -> int: ...
    def get_discarded_frames(self) -> int: ...
    def get_buffer_length_frames(self) -> int: ...
    def get_pushed_frames(self) -> int: ...
    
class AudioEffectChorus(AudioEffect):
    voice_count: int
    dry: float
    wet: float
    def set_voice_count(self, voices: int) -> None: ...
    def get_voice_count(self) -> int: ...
    def set_voice_delay_ms(self, voice_idx: int, delay_ms: float) -> None: ...
    def get_voice_delay_ms(self, voice_idx: int) -> float: ...
    def set_voice_rate_hz(self, voice_idx: int, rate_hz: float) -> None: ...
    def get_voice_rate_hz(self, voice_idx: int) -> float: ...
    def set_voice_depth_ms(self, voice_idx: int, depth_ms: float) -> None: ...
    def get_voice_depth_ms(self, voice_idx: int) -> float: ...
    def set_voice_level_db(self, voice_idx: int, level_db: float) -> None: ...
    def get_voice_level_db(self, voice_idx: int) -> float: ...
    def set_voice_cutoff_hz(self, voice_idx: int, cutoff_hz: float) -> None: ...
    def get_voice_cutoff_hz(self, voice_idx: int) -> float: ...
    def set_voice_pan(self, voice_idx: int, pan: float) -> None: ...
    def get_voice_pan(self, voice_idx: int) -> float: ...
    def set_wet(self, amount: float) -> None: ...
    def get_wet(self) -> float: ...
    def set_dry(self, amount: float) -> None: ...
    def get_dry(self) -> float: ...
    
class AudioEffectCompressor(AudioEffect):
    threshold: float
    ratio: float
    gain: float
    attack_us: float
    release_ms: float
    mix: float
    sidechain: 'StringName'
    def set_threshold(self, threshold: float) -> None: ...
    def get_threshold(self) -> float: ...
    def set_ratio(self, ratio: float) -> None: ...
    def get_ratio(self) -> float: ...
    def set_gain(self, gain: float) -> None: ...
    def get_gain(self) -> float: ...
    def set_attack_us(self, attack_us: float) -> None: ...
    def get_attack_us(self) -> float: ...
    def set_release_ms(self, release_ms: float) -> None: ...
    def get_release_ms(self) -> float: ...
    def set_mix(self, mix: float) -> None: ...
    def get_mix(self) -> float: ...
    def set_sidechain(self, sidechain: 'StringName') -> None: ...
    def get_sidechain(self) -> 'StringName': ...
    
class AudioEffectDelay(AudioEffect):
    dry: float
    tap1_active: bool
    tap1_delay_ms: float
    tap1_level_db: float
    tap1_pan: float
    tap2_active: bool
    tap2_delay_ms: float
    tap2_level_db: float
    tap2_pan: float
    feedback_active: bool
    feedback_delay_ms: float
    feedback_level_db: float
    feedback_lowpass: float
    def set_dry(self, amount: float) -> None: ...
    def get_dry(self) -> float: ...
    def set_tap1_active(self, amount: bool) -> None: ...
    def is_tap1_active(self) -> bool: ...
    def set_tap1_delay_ms(self, amount: float) -> None: ...
    def get_tap1_delay_ms(self) -> float: ...
    def set_tap1_level_db(self, amount: float) -> None: ...
    def get_tap1_level_db(self) -> float: ...
    def set_tap1_pan(self, amount: float) -> None: ...
    def get_tap1_pan(self) -> float: ...
    def set_tap2_active(self, amount: bool) -> None: ...
    def is_tap2_active(self) -> bool: ...
    def set_tap2_delay_ms(self, amount: float) -> None: ...
    def get_tap2_delay_ms(self) -> float: ...
    def set_tap2_level_db(self, amount: float) -> None: ...
    def get_tap2_level_db(self) -> float: ...
    def set_tap2_pan(self, amount: float) -> None: ...
    def get_tap2_pan(self) -> float: ...
    def set_feedback_active(self, amount: bool) -> None: ...
    def is_feedback_active(self) -> bool: ...
    def set_feedback_delay_ms(self, amount: float) -> None: ...
    def get_feedback_delay_ms(self) -> float: ...
    def set_feedback_level_db(self, amount: float) -> None: ...
    def get_feedback_level_db(self) -> float: ...
    def set_feedback_lowpass(self, amount: float) -> None: ...
    def get_feedback_lowpass(self) -> float: ...
    
class AudioEffectDistortion(AudioEffect):
    mode: int
    pre_gain: float
    keep_hf_hz: float
    drive: float
    post_gain: float
    def set_mode(self, mode: 'AudioEffectDistortion_Mode') -> None: ...
    def get_mode(self) -> 'AudioEffectDistortion_Mode': ...
    def set_pre_gain(self, pre_gain: float) -> None: ...
    def get_pre_gain(self) -> float: ...
    def set_keep_hf_hz(self, keep_hf_hz: float) -> None: ...
    def get_keep_hf_hz(self) -> float: ...
    def set_drive(self, drive: float) -> None: ...
    def get_drive(self) -> float: ...
    def set_post_gain(self, post_gain: float) -> None: ...
    def get_post_gain(self) -> float: ...
    
class AudioEffectDistortion_Mode(Enum):
    MODE_CLIP = 0
    MODE_ATAN = 1
    MODE_LOFI = 2
    MODE_OVERDRIVE = 3
    MODE_WAVESHAPE = 4

class AudioEffectEQ(AudioEffect):
    def set_band_gain_db(self, band_idx: int, volume_db: float) -> None: ...
    def get_band_gain_db(self, band_idx: int) -> float: ...
    def get_band_count(self) -> int: ...
    
class AudioEffectEQ10(AudioEffectEQ):
    pass
    
class AudioEffectEQ21(AudioEffectEQ):
    pass
    
class AudioEffectEQ6(AudioEffectEQ):
    pass
    
class AudioEffectFilter(AudioEffect):
    cutoff_hz: float
    resonance: float
    gain: float
    db: int
    def set_cutoff(self, freq: float) -> None: ...
    def get_cutoff(self) -> float: ...
    def set_resonance(self, amount: float) -> None: ...
    def get_resonance(self) -> float: ...
    def set_gain(self, amount: float) -> None: ...
    def get_gain(self) -> float: ...
    def set_db(self, amount: 'AudioEffectFilter_FilterDB') -> None: ...
    def get_db(self) -> 'AudioEffectFilter_FilterDB': ...
    
class AudioEffectFilter_FilterDB(Enum):
    FILTER_6DB = 0
    FILTER_12DB = 1
    FILTER_18DB = 2
    FILTER_24DB = 3

class AudioEffectHardLimiter(AudioEffect):
    pre_gain_db: float
    ceiling_db: float
    release: float
    def set_ceiling_db(self, ceiling: float) -> None: ...
    def get_ceiling_db(self) -> float: ...
    def set_pre_gain_db(self, p_pre_gain: float) -> None: ...
    def get_pre_gain_db(self) -> float: ...
    def set_release(self, p_release: float) -> None: ...
    def get_release(self) -> float: ...
    
class AudioEffectHighPassFilter(AudioEffectFilter):
    pass
    
class AudioEffectHighShelfFilter(AudioEffectFilter):
    pass
    
class AudioEffectInstance(RefCounted):
    def _process(self, src_buffer: 'intptr', dst_buffer: 'intptr', frame_count: int) -> None: ...
    def _process_silence(self) -> bool: ...
    
class AudioEffectLimiter(AudioEffect):
    ceiling_db: float
    threshold_db: float
    soft_clip_db: float
    soft_clip_ratio: float
    def set_ceiling_db(self, ceiling: float) -> None: ...
    def get_ceiling_db(self) -> float: ...
    def set_threshold_db(self, threshold: float) -> None: ...
    def get_threshold_db(self) -> float: ...
    def set_soft_clip_db(self, soft_clip: float) -> None: ...
    def get_soft_clip_db(self) -> float: ...
    def set_soft_clip_ratio(self, soft_clip: float) -> None: ...
    def get_soft_clip_ratio(self) -> float: ...
    
class AudioEffectLowPassFilter(AudioEffectFilter):
    pass
    
class AudioEffectLowShelfFilter(AudioEffectFilter):
    pass
    
class AudioEffectNotchFilter(AudioEffectFilter):
    pass
    
class AudioEffectPanner(AudioEffect):
    pan: float
    def set_pan(self, cpanume: float) -> None: ...
    def get_pan(self) -> float: ...
    
class AudioEffectPhaser(AudioEffect):
    range_min_hz: float
    range_max_hz: float
    rate_hz: float
    feedback: float
    depth: float
    def set_range_min_hz(self, hz: float) -> None: ...
    def get_range_min_hz(self) -> float: ...
    def set_range_max_hz(self, hz: float) -> None: ...
    def get_range_max_hz(self) -> float: ...
    def set_rate_hz(self, hz: float) -> None: ...
    def get_rate_hz(self) -> float: ...
    def set_feedback(self, fbk: float) -> None: ...
    def get_feedback(self) -> float: ...
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    
class AudioEffectPitchShift(AudioEffect):
    pitch_scale: float
    oversampling: float
    fft_size: int
    def set_pitch_scale(self, rate: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def set_oversampling(self, amount: int) -> None: ...
    def get_oversampling(self) -> int: ...
    def set_fft_size(self, size: 'AudioEffectPitchShift_FFTSize') -> None: ...
    def get_fft_size(self) -> 'AudioEffectPitchShift_FFTSize': ...
    
class AudioEffectPitchShift_FFTSize(Enum):
    FFT_SIZE_256 = 0
    FFT_SIZE_512 = 1
    FFT_SIZE_1024 = 2
    FFT_SIZE_2048 = 3
    FFT_SIZE_4096 = 4
    FFT_SIZE_MAX = 5

class AudioEffectRecord(AudioEffect):
    format: int
    def set_recording_active(self, record: bool) -> None: ...
    def is_recording_active(self) -> bool: ...
    def set_format(self, format: 'AudioStreamWAV_Format') -> None: ...
    def get_format(self) -> 'AudioStreamWAV_Format': ...
    def get_recording(self) -> 'AudioStreamWAV': ...
    
class AudioEffectReverb(AudioEffect):
    predelay_msec: float
    predelay_feedback: float
    room_size: float
    damping: float
    spread: float
    hipass: float
    dry: float
    wet: float
    def set_predelay_msec(self, msec: float) -> None: ...
    def get_predelay_msec(self) -> float: ...
    def set_predelay_feedback(self, feedback: float) -> None: ...
    def get_predelay_feedback(self) -> float: ...
    def set_room_size(self, size: float) -> None: ...
    def get_room_size(self) -> float: ...
    def set_damping(self, amount: float) -> None: ...
    def get_damping(self) -> float: ...
    def set_spread(self, amount: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_dry(self, amount: float) -> None: ...
    def get_dry(self) -> float: ...
    def set_wet(self, amount: float) -> None: ...
    def get_wet(self) -> float: ...
    def set_hpf(self, amount: float) -> None: ...
    def get_hpf(self) -> float: ...
    
class AudioEffectSpectrumAnalyzer(AudioEffect):
    buffer_length: float
    tap_back_pos: float
    fft_size: int
    def set_buffer_length(self, seconds: float) -> None: ...
    def get_buffer_length(self) -> float: ...
    def set_tap_back_pos(self, seconds: float) -> None: ...
    def get_tap_back_pos(self) -> float: ...
    def set_fft_size(self, size: 'AudioEffectSpectrumAnalyzer_FFTSize') -> None: ...
    def get_fft_size(self) -> 'AudioEffectSpectrumAnalyzer_FFTSize': ...
    
class AudioEffectSpectrumAnalyzer_FFTSize(Enum):
    FFT_SIZE_256 = 0
    FFT_SIZE_512 = 1
    FFT_SIZE_1024 = 2
    FFT_SIZE_2048 = 3
    FFT_SIZE_4096 = 4
    FFT_SIZE_MAX = 5

class AudioEffectSpectrumAnalyzerInstance(AudioEffectInstance):
    def get_magnitude_for_frequency_range(self, from_hz: float, to_hz: float, mode: 'AudioEffectSpectrumAnalyzerInstance_MagnitudeMode' = default('''1''')) -> 'Vector2': ...
    
class AudioEffectSpectrumAnalyzerInstance_MagnitudeMode(Enum):
    MAGNITUDE_AVERAGE = 0
    MAGNITUDE_MAX = 1

class AudioEffectStereoEnhance(AudioEffect):
    pan_pullout: float
    time_pullout_ms: float
    surround: float
    def set_pan_pullout(self, amount: float) -> None: ...
    def get_pan_pullout(self) -> float: ...
    def set_time_pullout(self, amount: float) -> None: ...
    def get_time_pullout(self) -> float: ...
    def set_surround(self, amount: float) -> None: ...
    def get_surround(self) -> float: ...
    
class AudioListener2D(Node2D):
    def make_current(self) -> None: ...
    def clear_current(self) -> None: ...
    def is_current(self) -> bool: ...
    
class AudioListener3D(Node3D):
    def make_current(self) -> None: ...
    def clear_current(self) -> None: ...
    def is_current(self) -> bool: ...
    def get_listener_transform(self) -> 'Transform3D': ...
    
class AudioSample(RefCounted):
    pass
    
class AudioSamplePlayback(RefCounted):
    pass
    
class AudioServer(Object):
    bus_count: int
    output_device: 'String'
    input_device: 'String'
    playback_speed_scale: float
    bus_layout_changed: Signal[Callable[[], None]]  # bus_layout_changed()
    bus_renamed: Signal[Callable[['int', 'StringName', 'StringName'], None]]  # bus_renamed(bus_index: int, old_name: 'StringName', new_name: 'StringName')
    def set_bus_count(self, amount: int) -> None: ...
    def get_bus_count(self) -> int: ...
    def remove_bus(self, index: int) -> None: ...
    def add_bus(self, at_position: int = default('''-1''')) -> None: ...
    def move_bus(self, index: int, to_index: int) -> None: ...
    def set_bus_name(self, bus_idx: int, name: 'String') -> None: ...
    def get_bus_name(self, bus_idx: int) -> 'String': ...
    def get_bus_index(self, bus_name: 'StringName') -> int: ...
    def get_bus_channels(self, bus_idx: int) -> int: ...
    def set_bus_volume_db(self, bus_idx: int, volume_db: float) -> None: ...
    def get_bus_volume_db(self, bus_idx: int) -> float: ...
    def set_bus_volume_linear(self, bus_idx: int, volume_linear: float) -> None: ...
    def get_bus_volume_linear(self, bus_idx: int) -> float: ...
    def set_bus_send(self, bus_idx: int, send: 'StringName') -> None: ...
    def get_bus_send(self, bus_idx: int) -> 'StringName': ...
    def set_bus_solo(self, bus_idx: int, enable: bool) -> None: ...
    def is_bus_solo(self, bus_idx: int) -> bool: ...
    def set_bus_mute(self, bus_idx: int, enable: bool) -> None: ...
    def is_bus_mute(self, bus_idx: int) -> bool: ...
    def set_bus_bypass_effects(self, bus_idx: int, enable: bool) -> None: ...
    def is_bus_bypassing_effects(self, bus_idx: int) -> bool: ...
    def add_bus_effect(self, bus_idx: int, effect: 'AudioEffect', at_position: int = default('''-1''')) -> None: ...
    def remove_bus_effect(self, bus_idx: int, effect_idx: int) -> None: ...
    def get_bus_effect_count(self, bus_idx: int) -> int: ...
    def get_bus_effect(self, bus_idx: int, effect_idx: int) -> 'AudioEffect': ...
    def get_bus_effect_instance(self, bus_idx: int, effect_idx: int, channel: int = default('''0''')) -> 'AudioEffectInstance': ...
    def swap_bus_effects(self, bus_idx: int, effect_idx: int, by_effect_idx: int) -> None: ...
    def set_bus_effect_enabled(self, bus_idx: int, effect_idx: int, enabled: bool) -> None: ...
    def is_bus_effect_enabled(self, bus_idx: int, effect_idx: int) -> bool: ...
    def get_bus_peak_volume_left_db(self, bus_idx: int, channel: int) -> float: ...
    def get_bus_peak_volume_right_db(self, bus_idx: int, channel: int) -> float: ...
    def set_playback_speed_scale(self, scale: float) -> None: ...
    def get_playback_speed_scale(self) -> float: ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def get_speaker_mode(self) -> 'AudioServer_SpeakerMode': ...
    def get_mix_rate(self) -> float: ...
    def get_input_mix_rate(self) -> float: ...
    def get_driver_name(self) -> 'String': ...
    def get_output_device_list(self) -> 'PackedStringArray': ...
    def get_output_device(self) -> 'String': ...
    def set_output_device(self, name: 'String') -> None: ...
    def get_time_to_next_mix(self) -> float: ...
    def get_time_since_last_mix(self) -> float: ...
    def get_output_latency(self) -> float: ...
    def get_input_device_list(self) -> 'PackedStringArray': ...
    def get_input_device(self) -> 'String': ...
    def set_input_device(self, name: 'String') -> None: ...
    def set_bus_layout(self, bus_layout: 'AudioBusLayout') -> None: ...
    def generate_bus_layout(self) -> 'AudioBusLayout': ...
    def set_enable_tagging_used_audio_streams(self, enable: bool) -> None: ...
    def is_stream_registered_as_sample(self, stream: 'AudioStream') -> bool: ...
    def register_stream_as_sample(self, stream: 'AudioStream') -> None: ...
    
class AudioServer_SpeakerMode(Enum):
    SPEAKER_MODE_STEREO = 0
    SPEAKER_SURROUND_31 = 1
    SPEAKER_SURROUND_51 = 2
    SPEAKER_SURROUND_71 = 3

class AudioServer_PlaybackType(Enum):
    PLAYBACK_TYPE_DEFAULT = 0
    PLAYBACK_TYPE_STREAM = 1
    PLAYBACK_TYPE_SAMPLE = 2
    PLAYBACK_TYPE_MAX = 3

class AudioStream(Resource):
    parameter_list_changed: Signal[Callable[[], None]]  # parameter_list_changed()
    def _instantiate_playback(self) -> 'AudioStreamPlayback': ...
    def _get_stream_name(self) -> 'String': ...
    def _get_length(self) -> float: ...
    def _is_monophonic(self) -> bool: ...
    def _get_bpm(self) -> float: ...
    def _get_beat_count(self) -> int: ...
    def _get_parameter_list(self) -> 'list[Dictionary]': ...
    def _has_loop(self) -> bool: ...
    def _get_bar_beats(self) -> int: ...
    def get_length(self) -> float: ...
    def is_monophonic(self) -> bool: ...
    def instantiate_playback(self) -> 'AudioStreamPlayback': ...
    def can_be_sampled(self) -> bool: ...
    def generate_sample(self) -> 'AudioSample': ...
    def is_meta_stream(self) -> bool: ...
    
class AudioStreamGenerator(AudioStream):
    mix_rate_mode: int
    mix_rate: float
    buffer_length: float
    def set_mix_rate(self, hz: float) -> None: ...
    def get_mix_rate(self) -> float: ...
    def set_mix_rate_mode(self, mode: 'AudioStreamGenerator_AudioStreamGeneratorMixRate') -> None: ...
    def get_mix_rate_mode(self) -> 'AudioStreamGenerator_AudioStreamGeneratorMixRate': ...
    def set_buffer_length(self, seconds: float) -> None: ...
    def get_buffer_length(self) -> float: ...
    
class AudioStreamGenerator_AudioStreamGeneratorMixRate(Enum):
    MIX_RATE_OUTPUT = 0
    MIX_RATE_INPUT = 1
    MIX_RATE_CUSTOM = 2
    MIX_RATE_MAX = 3

class AudioStreamGeneratorPlayback(AudioStreamPlaybackResampled):
    def push_frame(self, frame: 'Vector2') -> bool: ...
    def can_push_buffer(self, amount: int) -> bool: ...
    def push_buffer(self, frames: 'PackedVector2Array') -> bool: ...
    def get_frames_available(self) -> int: ...
    def get_skips(self) -> int: ...
    def clear_buffer(self) -> None: ...
    
class AudioStreamInteractive(AudioStream):
    clip_count: int
    initial_clip: int
    CLIP_ANY = -1
    
    def set_clip_count(self, clip_count: int) -> None: ...
    def get_clip_count(self) -> int: ...
    def set_initial_clip(self, clip_index: int) -> None: ...
    def get_initial_clip(self) -> int: ...
    def set_clip_name(self, clip_index: int, name: 'StringName') -> None: ...
    def get_clip_name(self, clip_index: int) -> 'StringName': ...
    def set_clip_stream(self, clip_index: int, stream: 'AudioStream') -> None: ...
    def get_clip_stream(self, clip_index: int) -> 'AudioStream': ...
    def set_clip_auto_advance(self, clip_index: int, mode: 'AudioStreamInteractive_AutoAdvanceMode') -> None: ...
    def get_clip_auto_advance(self, clip_index: int) -> 'AudioStreamInteractive_AutoAdvanceMode': ...
    def set_clip_auto_advance_next_clip(self, clip_index: int, auto_advance_next_clip: int) -> None: ...
    def get_clip_auto_advance_next_clip(self, clip_index: int) -> int: ...
    def add_transition(self, from_clip: int, to_clip: int, from_time: 'AudioStreamInteractive_TransitionFromTime', to_time: 'AudioStreamInteractive_TransitionToTime', fade_mode: 'AudioStreamInteractive_FadeMode', fade_beats: float, use_filler_clip: bool = default('''false'''), filler_clip: int = default('''-1'''), hold_previous: bool = default('''false''')) -> None: ...
    def has_transition(self, from_clip: int, to_clip: int) -> bool: ...
    def erase_transition(self, from_clip: int, to_clip: int) -> None: ...
    def get_transition_list(self) -> 'PackedInt32Array': ...
    def get_transition_from_time(self, from_clip: int, to_clip: int) -> 'AudioStreamInteractive_TransitionFromTime': ...
    def get_transition_to_time(self, from_clip: int, to_clip: int) -> 'AudioStreamInteractive_TransitionToTime': ...
    def get_transition_fade_mode(self, from_clip: int, to_clip: int) -> 'AudioStreamInteractive_FadeMode': ...
    def get_transition_fade_beats(self, from_clip: int, to_clip: int) -> float: ...
    def is_transition_using_filler_clip(self, from_clip: int, to_clip: int) -> bool: ...
    def get_transition_filler_clip(self, from_clip: int, to_clip: int) -> int: ...
    def is_transition_holding_previous(self, from_clip: int, to_clip: int) -> bool: ...
    
class AudioStreamInteractive_TransitionFromTime(Enum):
    TRANSITION_FROM_TIME_IMMEDIATE = 0
    TRANSITION_FROM_TIME_NEXT_BEAT = 1
    TRANSITION_FROM_TIME_NEXT_BAR = 2
    TRANSITION_FROM_TIME_END = 3

class AudioStreamInteractive_TransitionToTime(Enum):
    TRANSITION_TO_TIME_SAME_POSITION = 0
    TRANSITION_TO_TIME_START = 1

class AudioStreamInteractive_FadeMode(Enum):
    FADE_DISABLED = 0
    FADE_IN = 1
    FADE_OUT = 2
    FADE_CROSS = 3
    FADE_AUTOMATIC = 4

class AudioStreamInteractive_AutoAdvanceMode(Enum):
    AUTO_ADVANCE_DISABLED = 0
    AUTO_ADVANCE_ENABLED = 1
    AUTO_ADVANCE_RETURN_TO_HOLD = 2

class AudioStreamMP3(AudioStream):
    data: 'PackedByteArray'
    bpm: float
    beat_count: int
    bar_beats: int
    loop: bool
    loop_offset: float
    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray') -> 'AudioStreamMP3': ...
    @staticmethod
    def load_from_file(path: 'String') -> 'AudioStreamMP3': ...
    def set_data(self, data: 'PackedByteArray') -> None: ...
    def get_data(self) -> 'PackedByteArray': ...
    def set_loop(self, enable: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_loop_offset(self, seconds: float) -> None: ...
    def get_loop_offset(self) -> float: ...
    def set_bpm(self, bpm: float) -> None: ...
    def get_bpm(self) -> float: ...
    def set_beat_count(self, count: int) -> None: ...
    def get_beat_count(self) -> int: ...
    def set_bar_beats(self, count: int) -> None: ...
    def get_bar_beats(self) -> int: ...
    
class AudioStreamMicrophone(AudioStream):
    pass
    
class AudioStreamOggVorbis(AudioStream):
    packet_sequence: 'Object'
    bpm: float
    beat_count: int
    bar_beats: int
    loop: bool
    loop_offset: float
    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray') -> 'AudioStreamOggVorbis': ...
    @staticmethod
    def load_from_file(path: 'String') -> 'AudioStreamOggVorbis': ...
    def set_packet_sequence(self, packet_sequence: 'OggPacketSequence') -> None: ...
    def get_packet_sequence(self) -> 'OggPacketSequence': ...
    def set_loop(self, enable: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_loop_offset(self, seconds: float) -> None: ...
    def get_loop_offset(self) -> float: ...
    def set_bpm(self, bpm: float) -> None: ...
    def get_bpm(self) -> float: ...
    def set_beat_count(self, count: int) -> None: ...
    def get_beat_count(self) -> int: ...
    def set_bar_beats(self, count: int) -> None: ...
    def get_bar_beats(self) -> int: ...
    
class AudioStreamPlayback(RefCounted):
    def _start(self, from_pos: float) -> None: ...
    def _stop(self) -> None: ...
    def _is_playing(self) -> bool: ...
    def _get_loop_count(self) -> int: ...
    def _get_playback_position(self) -> float: ...
    def _seek(self, position: float) -> None: ...
    def _mix(self, buffer: 'intptr', rate_scale: float, frames: int) -> int: ...
    def _tag_used_streams(self) -> None: ...
    def _set_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def _get_parameter(self, name: 'StringName') -> 'Variant': ...
    def set_sample_playback(self, playback_sample: 'AudioSamplePlayback') -> None: ...
    def get_sample_playback(self) -> 'AudioSamplePlayback': ...
    def mix_audio(self, rate_scale: float, frames: int) -> 'PackedVector2Array': ...
    def start(self, from_pos: float = default('''0.0''')) -> None: ...
    def seek(self, time: float = default('''0.0''')) -> None: ...
    def stop(self) -> None: ...
    def get_loop_count(self) -> int: ...
    def get_playback_position(self) -> float: ...
    def is_playing(self) -> bool: ...
    
class AudioStreamPlaybackInteractive(AudioStreamPlayback):
    def switch_to_clip_by_name(self, clip_name: 'StringName') -> None: ...
    def switch_to_clip(self, clip_index: int) -> None: ...
    def get_current_clip_index(self) -> int: ...
    
class AudioStreamPlaybackOggVorbis(AudioStreamPlaybackResampled):
    pass
    
class AudioStreamPlaybackPlaylist(AudioStreamPlayback):
    pass
    
class AudioStreamPlaybackPolyphonic(AudioStreamPlayback):
    INVALID_ID = -1
    
    def play_stream(self, stream: 'AudioStream', from_offset: float = default('''0'''), volume_db: float = default('''0'''), pitch_scale: float = default('''1.0'''), playback_type: 'AudioServer_PlaybackType' = default('''0'''), bus: 'StringName' = default('''&"Master"''')) -> int: ...
    def set_stream_volume(self, stream: int, volume_db: float) -> None: ...
    def set_stream_pitch_scale(self, stream: int, pitch_scale: float) -> None: ...
    def is_stream_playing(self, stream: int) -> bool: ...
    def stop_stream(self, stream: int) -> None: ...
    
class AudioStreamPlaybackResampled(AudioStreamPlayback):
    def _mix_resampled(self, dst_buffer: 'intptr', frame_count: int) -> int: ...
    def _get_stream_sampling_rate(self) -> float: ...
    def begin_resample(self) -> None: ...
    
class AudioStreamPlaybackSynchronized(AudioStreamPlayback):
    pass
    
class AudioStreamPlayer(Node):
    stream: 'AudioStream'
    volume_db: float
    volume_linear: float
    pitch_scale: float
    playing: bool
    autoplay: bool
    stream_paused: bool
    mix_target: int
    max_polyphony: int
    bus: 'StringName'
    playback_type: int
    finished: Signal[Callable[[], None]]  # finished()
    def set_stream(self, stream: 'AudioStream') -> None: ...
    def get_stream(self) -> 'AudioStream': ...
    def set_volume_db(self, volume_db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_volume_linear(self, volume_linear: float) -> None: ...
    def get_volume_linear(self) -> float: ...
    def set_pitch_scale(self, pitch_scale: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def play(self, from_position: float = default('''0.0''')) -> None: ...
    def seek(self, to_position: float) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_playback_position(self) -> float: ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def set_autoplay(self, enable: bool) -> None: ...
    def is_autoplay_enabled(self) -> bool: ...
    def set_mix_target(self, mix_target: 'AudioStreamPlayer_MixTarget') -> None: ...
    def get_mix_target(self) -> 'AudioStreamPlayer_MixTarget': ...
    def set_playing(self, enable: bool) -> None: ...
    def set_stream_paused(self, pause: bool) -> None: ...
    def get_stream_paused(self) -> bool: ...
    def set_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_max_polyphony(self) -> int: ...
    def has_stream_playback(self) -> bool: ...
    def get_stream_playback(self) -> 'AudioStreamPlayback': ...
    def set_playback_type(self, playback_type: 'AudioServer_PlaybackType') -> None: ...
    def get_playback_type(self) -> 'AudioServer_PlaybackType': ...
    
class AudioStreamPlayer_MixTarget(Enum):
    MIX_TARGET_STEREO = 0
    MIX_TARGET_SURROUND = 1
    MIX_TARGET_CENTER = 2

class AudioStreamPlayer2D(Node2D):
    stream: 'AudioStream'
    volume_db: float
    volume_linear: float
    pitch_scale: float
    playing: bool
    autoplay: bool
    stream_paused: bool
    max_distance: float
    attenuation: float
    max_polyphony: int
    panning_strength: float
    bus: 'StringName'
    area_mask: int
    playback_type: int
    finished: Signal[Callable[[], None]]  # finished()
    def set_stream(self, stream: 'AudioStream') -> None: ...
    def get_stream(self) -> 'AudioStream': ...
    def set_volume_db(self, volume_db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_volume_linear(self, volume_linear: float) -> None: ...
    def get_volume_linear(self) -> float: ...
    def set_pitch_scale(self, pitch_scale: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def play(self, from_position: float = default('''0.0''')) -> None: ...
    def seek(self, to_position: float) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_playback_position(self) -> float: ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def set_autoplay(self, enable: bool) -> None: ...
    def is_autoplay_enabled(self) -> bool: ...
    def set_playing(self, enable: bool) -> None: ...
    def set_max_distance(self, pixels: float) -> None: ...
    def get_max_distance(self) -> float: ...
    def set_attenuation(self, curve: float) -> None: ...
    def get_attenuation(self) -> float: ...
    def set_area_mask(self, mask: int) -> None: ...
    def get_area_mask(self) -> int: ...
    def set_stream_paused(self, pause: bool) -> None: ...
    def get_stream_paused(self) -> bool: ...
    def set_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_max_polyphony(self) -> int: ...
    def set_panning_strength(self, panning_strength: float) -> None: ...
    def get_panning_strength(self) -> float: ...
    def has_stream_playback(self) -> bool: ...
    def get_stream_playback(self) -> 'AudioStreamPlayback': ...
    def set_playback_type(self, playback_type: 'AudioServer_PlaybackType') -> None: ...
    def get_playback_type(self) -> 'AudioServer_PlaybackType': ...
    
class AudioStreamPlayer3D(Node3D):
    stream: 'AudioStream'
    attenuation_model: int
    volume_db: float
    volume_linear: float
    unit_size: float
    max_db: float
    pitch_scale: float
    playing: bool
    autoplay: bool
    stream_paused: bool
    max_distance: float
    max_polyphony: int
    panning_strength: float
    bus: 'StringName'
    area_mask: int
    playback_type: int
    emission_angle_enabled: bool
    emission_angle_degrees: float
    emission_angle_filter_attenuation_db: float
    attenuation_filter_cutoff_hz: float
    attenuation_filter_db: float
    doppler_tracking: int
    finished: Signal[Callable[[], None]]  # finished()
    def set_stream(self, stream: 'AudioStream') -> None: ...
    def get_stream(self) -> 'AudioStream': ...
    def set_volume_db(self, volume_db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_volume_linear(self, volume_linear: float) -> None: ...
    def get_volume_linear(self) -> float: ...
    def set_unit_size(self, unit_size: float) -> None: ...
    def get_unit_size(self) -> float: ...
    def set_max_db(self, max_db: float) -> None: ...
    def get_max_db(self) -> float: ...
    def set_pitch_scale(self, pitch_scale: float) -> None: ...
    def get_pitch_scale(self) -> float: ...
    def play(self, from_position: float = default('''0.0''')) -> None: ...
    def seek(self, to_position: float) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def get_playback_position(self) -> float: ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def set_autoplay(self, enable: bool) -> None: ...
    def is_autoplay_enabled(self) -> bool: ...
    def set_playing(self, enable: bool) -> None: ...
    def set_max_distance(self, meters: float) -> None: ...
    def get_max_distance(self) -> float: ...
    def set_area_mask(self, mask: int) -> None: ...
    def get_area_mask(self) -> int: ...
    def set_emission_angle(self, degrees: float) -> None: ...
    def get_emission_angle(self) -> float: ...
    def set_emission_angle_enabled(self, enabled: bool) -> None: ...
    def is_emission_angle_enabled(self) -> bool: ...
    def set_emission_angle_filter_attenuation_db(self, db: float) -> None: ...
    def get_emission_angle_filter_attenuation_db(self) -> float: ...
    def set_attenuation_filter_cutoff_hz(self, degrees: float) -> None: ...
    def get_attenuation_filter_cutoff_hz(self) -> float: ...
    def set_attenuation_filter_db(self, db: float) -> None: ...
    def get_attenuation_filter_db(self) -> float: ...
    def set_attenuation_model(self, model: 'AudioStreamPlayer3D_AttenuationModel') -> None: ...
    def get_attenuation_model(self) -> 'AudioStreamPlayer3D_AttenuationModel': ...
    def set_doppler_tracking(self, mode: 'AudioStreamPlayer3D_DopplerTracking') -> None: ...
    def get_doppler_tracking(self) -> 'AudioStreamPlayer3D_DopplerTracking': ...
    def set_stream_paused(self, pause: bool) -> None: ...
    def get_stream_paused(self) -> bool: ...
    def set_max_polyphony(self, max_polyphony: int) -> None: ...
    def get_max_polyphony(self) -> int: ...
    def set_panning_strength(self, panning_strength: float) -> None: ...
    def get_panning_strength(self) -> float: ...
    def has_stream_playback(self) -> bool: ...
    def get_stream_playback(self) -> 'AudioStreamPlayback': ...
    def set_playback_type(self, playback_type: 'AudioServer_PlaybackType') -> None: ...
    def get_playback_type(self) -> 'AudioServer_PlaybackType': ...
    
class AudioStreamPlayer3D_AttenuationModel(Enum):
    ATTENUATION_INVERSE_DISTANCE = 0
    ATTENUATION_INVERSE_SQUARE_DISTANCE = 1
    ATTENUATION_LOGARITHMIC = 2
    ATTENUATION_DISABLED = 3

class AudioStreamPlayer3D_DopplerTracking(Enum):
    DOPPLER_TRACKING_DISABLED = 0
    DOPPLER_TRACKING_IDLE_STEP = 1
    DOPPLER_TRACKING_PHYSICS_STEP = 2

class AudioStreamPlaylist(AudioStream):
    shuffle: bool
    loop: bool
    fade_time: float
    stream_count: int
    stream_0: 'AudioStream'
    stream_1: 'AudioStream'
    stream_2: 'AudioStream'
    stream_3: 'AudioStream'
    stream_4: 'AudioStream'
    stream_5: 'AudioStream'
    stream_6: 'AudioStream'
    stream_7: 'AudioStream'
    stream_8: 'AudioStream'
    stream_9: 'AudioStream'
    stream_10: 'AudioStream'
    stream_11: 'AudioStream'
    stream_12: 'AudioStream'
    stream_13: 'AudioStream'
    stream_14: 'AudioStream'
    stream_15: 'AudioStream'
    stream_16: 'AudioStream'
    stream_17: 'AudioStream'
    stream_18: 'AudioStream'
    stream_19: 'AudioStream'
    stream_20: 'AudioStream'
    stream_21: 'AudioStream'
    stream_22: 'AudioStream'
    stream_23: 'AudioStream'
    stream_24: 'AudioStream'
    stream_25: 'AudioStream'
    stream_26: 'AudioStream'
    stream_27: 'AudioStream'
    stream_28: 'AudioStream'
    stream_29: 'AudioStream'
    stream_30: 'AudioStream'
    stream_31: 'AudioStream'
    stream_32: 'AudioStream'
    stream_33: 'AudioStream'
    stream_34: 'AudioStream'
    stream_35: 'AudioStream'
    stream_36: 'AudioStream'
    stream_37: 'AudioStream'
    stream_38: 'AudioStream'
    stream_39: 'AudioStream'
    stream_40: 'AudioStream'
    stream_41: 'AudioStream'
    stream_42: 'AudioStream'
    stream_43: 'AudioStream'
    stream_44: 'AudioStream'
    stream_45: 'AudioStream'
    stream_46: 'AudioStream'
    stream_47: 'AudioStream'
    stream_48: 'AudioStream'
    stream_49: 'AudioStream'
    stream_50: 'AudioStream'
    stream_51: 'AudioStream'
    stream_52: 'AudioStream'
    stream_53: 'AudioStream'
    stream_54: 'AudioStream'
    stream_55: 'AudioStream'
    stream_56: 'AudioStream'
    stream_57: 'AudioStream'
    stream_58: 'AudioStream'
    stream_59: 'AudioStream'
    stream_60: 'AudioStream'
    stream_61: 'AudioStream'
    stream_62: 'AudioStream'
    stream_63: 'AudioStream'
    MAX_STREAMS = 64
    
    def set_stream_count(self, stream_count: int) -> None: ...
    def get_stream_count(self) -> int: ...
    def get_bpm(self) -> float: ...
    def set_list_stream(self, stream_index: int, audio_stream: 'AudioStream') -> None: ...
    def get_list_stream(self, stream_index: int) -> 'AudioStream': ...
    def set_shuffle(self, shuffle: bool) -> None: ...
    def get_shuffle(self) -> bool: ...
    def set_fade_time(self, dec: float) -> None: ...
    def get_fade_time(self) -> float: ...
    def set_loop(self, loop: bool) -> None: ...
    def has_loop(self) -> bool: ...
    
class AudioStreamPolyphonic(AudioStream):
    polyphony: int
    def set_polyphony(self, voices: int) -> None: ...
    def get_polyphony(self) -> int: ...
    
class AudioStreamRandomizer(AudioStream):
    playback_mode: int
    random_pitch: float
    random_volume_offset_db: float
    streams_count: int
    def add_stream(self, index: int, stream: 'AudioStream', weight: float = default('''1.0''')) -> None: ...
    def move_stream(self, index_from: int, index_to: int) -> None: ...
    def remove_stream(self, index: int) -> None: ...
    def set_stream(self, index: int, stream: 'AudioStream') -> None: ...
    def get_stream(self, index: int) -> 'AudioStream': ...
    def set_stream_probability_weight(self, index: int, weight: float) -> None: ...
    def get_stream_probability_weight(self, index: int) -> float: ...
    def set_streams_count(self, count: int) -> None: ...
    def get_streams_count(self) -> int: ...
    def set_random_pitch(self, scale: float) -> None: ...
    def get_random_pitch(self) -> float: ...
    def set_random_volume_offset_db(self, db_offset: float) -> None: ...
    def get_random_volume_offset_db(self) -> float: ...
    def set_playback_mode(self, mode: 'AudioStreamRandomizer_PlaybackMode') -> None: ...
    def get_playback_mode(self) -> 'AudioStreamRandomizer_PlaybackMode': ...
    
class AudioStreamRandomizer_PlaybackMode(Enum):
    PLAYBACK_RANDOM_NO_REPEATS = 0
    PLAYBACK_RANDOM = 1
    PLAYBACK_SEQUENTIAL = 2

class AudioStreamSynchronized(AudioStream):
    stream_count: int
    MAX_STREAMS = 32
    
    def set_stream_count(self, stream_count: int) -> None: ...
    def get_stream_count(self) -> int: ...
    def set_sync_stream(self, stream_index: int, audio_stream: 'AudioStream') -> None: ...
    def get_sync_stream(self, stream_index: int) -> 'AudioStream': ...
    def set_sync_stream_volume(self, stream_index: int, volume_db: float) -> None: ...
    def get_sync_stream_volume(self, stream_index: int) -> float: ...
    
class AudioStreamWAV(AudioStream):
    data: 'PackedByteArray'
    format: int
    loop_mode: int
    loop_begin: int
    loop_end: int
    mix_rate: int
    stereo: bool
    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray', options: 'Dictionary' = default('''{}''')) -> 'AudioStreamWAV': ...
    @staticmethod
    def load_from_file(path: 'String', options: 'Dictionary' = default('''{}''')) -> 'AudioStreamWAV': ...
    def set_data(self, data: 'PackedByteArray') -> None: ...
    def get_data(self) -> 'PackedByteArray': ...
    def set_format(self, format: 'AudioStreamWAV_Format') -> None: ...
    def get_format(self) -> 'AudioStreamWAV_Format': ...
    def set_loop_mode(self, loop_mode: 'AudioStreamWAV_LoopMode') -> None: ...
    def get_loop_mode(self) -> 'AudioStreamWAV_LoopMode': ...
    def set_loop_begin(self, loop_begin: int) -> None: ...
    def get_loop_begin(self) -> int: ...
    def set_loop_end(self, loop_end: int) -> None: ...
    def get_loop_end(self) -> int: ...
    def set_mix_rate(self, mix_rate: int) -> None: ...
    def get_mix_rate(self) -> int: ...
    def set_stereo(self, stereo: bool) -> None: ...
    def is_stereo(self) -> bool: ...
    def save_to_wav(self, path: 'String') -> 'Error': ...
    
class AudioStreamWAV_Format(Enum):
    FORMAT_8_BITS = 0
    FORMAT_16_BITS = 1
    FORMAT_IMA_ADPCM = 2
    FORMAT_QOA = 3

class AudioStreamWAV_LoopMode(Enum):
    LOOP_DISABLED = 0
    LOOP_FORWARD = 1
    LOOP_PINGPONG = 2
    LOOP_BACKWARD = 3

class BackBufferCopy(Node2D):
    copy_mode: int
    rect: 'Rect2'
    def set_rect(self, rect: 'Rect2') -> None: ...
    def get_rect(self) -> 'Rect2': ...
    def set_copy_mode(self, copy_mode: 'BackBufferCopy_CopyMode') -> None: ...
    def get_copy_mode(self) -> 'BackBufferCopy_CopyMode': ...
    
class BackBufferCopy_CopyMode(Enum):
    COPY_MODE_DISABLED = 0
    COPY_MODE_RECT = 1
    COPY_MODE_VIEWPORT = 2

class BaseButton(Control):
    disabled: bool
    toggle_mode: bool
    button_pressed: bool
    action_mode: int
    button_mask: int
    keep_pressed_outside: bool
    button_group: 'ButtonGroup'
    shortcut: 'Shortcut'
    shortcut_feedback: bool
    shortcut_in_tooltip: bool
    pressed: Signal[Callable[[], None]]  # pressed()
    button_up: Signal[Callable[[], None]]  # button_up()
    button_down: Signal[Callable[[], None]]  # button_down()
    toggled: Signal[Callable[['bool'], None]]  # toggled(toggled_on: bool)
    def _pressed(self) -> None: ...
    def _toggled(self, toggled_on: bool) -> None: ...
    def set_pressed(self, pressed: bool) -> None: ...
    def is_pressed(self) -> bool: ...
    def set_pressed_no_signal(self, pressed: bool) -> None: ...
    def is_hovered(self) -> bool: ...
    def set_toggle_mode(self, enabled: bool) -> None: ...
    def is_toggle_mode(self) -> bool: ...
    def set_shortcut_in_tooltip(self, enabled: bool) -> None: ...
    def is_shortcut_in_tooltip_enabled(self) -> bool: ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_action_mode(self, mode: 'BaseButton_ActionMode') -> None: ...
    def get_action_mode(self) -> 'BaseButton_ActionMode': ...
    def set_button_mask(self, mask: 'MouseButtonMask') -> None: ...
    def get_button_mask(self) -> 'MouseButtonMask': ...
    def get_draw_mode(self) -> 'BaseButton_DrawMode': ...
    def set_keep_pressed_outside(self, enabled: bool) -> None: ...
    def is_keep_pressed_outside(self) -> bool: ...
    def set_shortcut_feedback(self, enabled: bool) -> None: ...
    def is_shortcut_feedback(self) -> bool: ...
    def set_shortcut(self, shortcut: 'Shortcut') -> None: ...
    def get_shortcut(self) -> 'Shortcut': ...
    def set_button_group(self, button_group: 'ButtonGroup') -> None: ...
    def get_button_group(self) -> 'ButtonGroup': ...
    
class BaseButton_DrawMode(Enum):
    DRAW_NORMAL = 0
    DRAW_PRESSED = 1
    DRAW_HOVER = 2
    DRAW_DISABLED = 3
    DRAW_HOVER_PRESSED = 4

class BaseButton_ActionMode(Enum):
    ACTION_MODE_BUTTON_PRESS = 0
    ACTION_MODE_BUTTON_RELEASE = 1

class BaseMaterial3D(Material):
    transparency: int
    alpha_scissor_threshold: float
    alpha_hash_scale: float
    alpha_antialiasing_mode: int
    alpha_antialiasing_edge: float
    blend_mode: int
    cull_mode: int
    depth_draw_mode: int
    no_depth_test: bool
    shading_mode: int
    diffuse_mode: int
    specular_mode: int
    disable_ambient_light: bool
    disable_fog: bool
    vertex_color_use_as_albedo: bool
    vertex_color_is_srgb: bool
    albedo_color: 'Color'
    albedo_texture: 'Texture2D'
    albedo_texture_force_srgb: bool
    albedo_texture_msdf: bool
    orm_texture: 'Texture2D'
    metallic: float
    metallic_specular: float
    metallic_texture: 'Texture2D'
    metallic_texture_channel: int
    roughness: float
    roughness_texture: 'Texture2D'
    roughness_texture_channel: int
    emission_enabled: bool
    emission: 'Color'
    emission_energy_multiplier: float
    emission_intensity: float
    emission_operator: int
    emission_on_uv2: bool
    emission_texture: 'Texture2D'
    normal_enabled: bool
    normal_scale: float
    normal_texture: 'Texture2D'
    rim_enabled: bool
    rim: float
    rim_tint: float
    rim_texture: 'Texture2D'
    clearcoat_enabled: bool
    clearcoat: float
    clearcoat_roughness: float
    clearcoat_texture: 'Texture2D'
    anisotropy_enabled: bool
    anisotropy: float
    anisotropy_flowmap: 'Texture2D'
    ao_enabled: bool
    ao_light_affect: float
    ao_texture: 'Texture2D'
    ao_on_uv2: bool
    ao_texture_channel: int
    heightmap_enabled: bool
    heightmap_scale: float
    heightmap_deep_parallax: bool
    heightmap_min_layers: int
    heightmap_max_layers: int
    heightmap_flip_tangent: bool
    heightmap_flip_binormal: bool
    heightmap_texture: 'Texture2D'
    heightmap_flip_texture: bool
    subsurf_scatter_enabled: bool
    subsurf_scatter_strength: float
    subsurf_scatter_skin_mode: bool
    subsurf_scatter_texture: 'Texture2D'
    subsurf_scatter_transmittance_enabled: bool
    subsurf_scatter_transmittance_color: 'Color'
    subsurf_scatter_transmittance_texture: 'Texture2D'
    subsurf_scatter_transmittance_depth: float
    subsurf_scatter_transmittance_boost: float
    backlight_enabled: bool
    backlight: 'Color'
    backlight_texture: 'Texture2D'
    refraction_enabled: bool
    refraction_scale: float
    refraction_texture: 'Texture2D'
    refraction_texture_channel: int
    detail_enabled: bool
    detail_mask: 'Texture2D'
    detail_blend_mode: int
    detail_uv_layer: int
    detail_albedo: 'Texture2D'
    detail_normal: 'Texture2D'
    uv1_scale: 'Vector3'
    uv1_offset: 'Vector3'
    uv1_triplanar: bool
    uv1_triplanar_sharpness: float
    uv1_world_triplanar: bool
    uv2_scale: 'Vector3'
    uv2_offset: 'Vector3'
    uv2_triplanar: bool
    uv2_triplanar_sharpness: float
    uv2_world_triplanar: bool
    texture_filter: int
    texture_repeat: bool
    disable_receive_shadows: bool
    shadow_to_opacity: bool
    billboard_mode: int
    billboard_keep_scale: bool
    particles_anim_h_frames: int
    particles_anim_v_frames: int
    particles_anim_loop: bool
    grow: bool
    grow_amount: float
    fixed_size: bool
    use_point_size: bool
    point_size: float
    use_particle_trails: bool
    proximity_fade_enabled: bool
    proximity_fade_distance: float
    msdf_pixel_range: float
    msdf_outline_size: float
    distance_fade_mode: int
    distance_fade_min_distance: float
    distance_fade_max_distance: float
    def set_albedo(self, albedo: 'Color') -> None: ...
    def get_albedo(self) -> 'Color': ...
    def set_transparency(self, transparency: 'BaseMaterial3D_Transparency') -> None: ...
    def get_transparency(self) -> 'BaseMaterial3D_Transparency': ...
    def set_alpha_antialiasing(self, alpha_aa: 'BaseMaterial3D_AlphaAntiAliasing') -> None: ...
    def get_alpha_antialiasing(self) -> 'BaseMaterial3D_AlphaAntiAliasing': ...
    def set_alpha_antialiasing_edge(self, edge: float) -> None: ...
    def get_alpha_antialiasing_edge(self) -> float: ...
    def set_shading_mode(self, shading_mode: 'BaseMaterial3D_ShadingMode') -> None: ...
    def get_shading_mode(self) -> 'BaseMaterial3D_ShadingMode': ...
    def set_specular(self, specular: float) -> None: ...
    def get_specular(self) -> float: ...
    def set_metallic(self, metallic: float) -> None: ...
    def get_metallic(self) -> float: ...
    def set_roughness(self, roughness: float) -> None: ...
    def get_roughness(self) -> float: ...
    def set_emission(self, emission: 'Color') -> None: ...
    def get_emission(self) -> 'Color': ...
    def set_emission_energy_multiplier(self, emission_energy_multiplier: float) -> None: ...
    def get_emission_energy_multiplier(self) -> float: ...
    def set_emission_intensity(self, emission_energy_multiplier: float) -> None: ...
    def get_emission_intensity(self) -> float: ...
    def set_normal_scale(self, normal_scale: float) -> None: ...
    def get_normal_scale(self) -> float: ...
    def set_rim(self, rim: float) -> None: ...
    def get_rim(self) -> float: ...
    def set_rim_tint(self, rim_tint: float) -> None: ...
    def get_rim_tint(self) -> float: ...
    def set_clearcoat(self, clearcoat: float) -> None: ...
    def get_clearcoat(self) -> float: ...
    def set_clearcoat_roughness(self, clearcoat_roughness: float) -> None: ...
    def get_clearcoat_roughness(self) -> float: ...
    def set_anisotropy(self, anisotropy: float) -> None: ...
    def get_anisotropy(self) -> float: ...
    def set_heightmap_scale(self, heightmap_scale: float) -> None: ...
    def get_heightmap_scale(self) -> float: ...
    def set_subsurface_scattering_strength(self, strength: float) -> None: ...
    def get_subsurface_scattering_strength(self) -> float: ...
    def set_transmittance_color(self, color: 'Color') -> None: ...
    def get_transmittance_color(self) -> 'Color': ...
    def set_transmittance_depth(self, depth: float) -> None: ...
    def get_transmittance_depth(self) -> float: ...
    def set_transmittance_boost(self, boost: float) -> None: ...
    def get_transmittance_boost(self) -> float: ...
    def set_backlight(self, backlight: 'Color') -> None: ...
    def get_backlight(self) -> 'Color': ...
    def set_refraction(self, refraction: float) -> None: ...
    def get_refraction(self) -> float: ...
    def set_point_size(self, point_size: float) -> None: ...
    def get_point_size(self) -> float: ...
    def set_detail_uv(self, detail_uv: 'BaseMaterial3D_DetailUV') -> None: ...
    def get_detail_uv(self) -> 'BaseMaterial3D_DetailUV': ...
    def set_blend_mode(self, blend_mode: 'BaseMaterial3D_BlendMode') -> None: ...
    def get_blend_mode(self) -> 'BaseMaterial3D_BlendMode': ...
    def set_depth_draw_mode(self, depth_draw_mode: 'BaseMaterial3D_DepthDrawMode') -> None: ...
    def get_depth_draw_mode(self) -> 'BaseMaterial3D_DepthDrawMode': ...
    def set_cull_mode(self, cull_mode: 'BaseMaterial3D_CullMode') -> None: ...
    def get_cull_mode(self) -> 'BaseMaterial3D_CullMode': ...
    def set_diffuse_mode(self, diffuse_mode: 'BaseMaterial3D_DiffuseMode') -> None: ...
    def get_diffuse_mode(self) -> 'BaseMaterial3D_DiffuseMode': ...
    def set_specular_mode(self, specular_mode: 'BaseMaterial3D_SpecularMode') -> None: ...
    def get_specular_mode(self) -> 'BaseMaterial3D_SpecularMode': ...
    def set_flag(self, flag: 'BaseMaterial3D_Flags', enable: bool) -> None: ...
    def get_flag(self, flag: 'BaseMaterial3D_Flags') -> bool: ...
    def set_texture_filter(self, mode: 'BaseMaterial3D_TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'BaseMaterial3D_TextureFilter': ...
    def set_feature(self, feature: 'BaseMaterial3D_Feature', enable: bool) -> None: ...
    def get_feature(self, feature: 'BaseMaterial3D_Feature') -> bool: ...
    def set_texture(self, param: 'BaseMaterial3D_TextureParam', texture: 'Texture2D') -> None: ...
    def get_texture(self, param: 'BaseMaterial3D_TextureParam') -> 'Texture2D': ...
    def set_detail_blend_mode(self, detail_blend_mode: 'BaseMaterial3D_BlendMode') -> None: ...
    def get_detail_blend_mode(self) -> 'BaseMaterial3D_BlendMode': ...
    def set_uv1_scale(self, scale: 'Vector3') -> None: ...
    def get_uv1_scale(self) -> 'Vector3': ...
    def set_uv1_offset(self, offset: 'Vector3') -> None: ...
    def get_uv1_offset(self) -> 'Vector3': ...
    def set_uv1_triplanar_blend_sharpness(self, sharpness: float) -> None: ...
    def get_uv1_triplanar_blend_sharpness(self) -> float: ...
    def set_uv2_scale(self, scale: 'Vector3') -> None: ...
    def get_uv2_scale(self) -> 'Vector3': ...
    def set_uv2_offset(self, offset: 'Vector3') -> None: ...
    def get_uv2_offset(self) -> 'Vector3': ...
    def set_uv2_triplanar_blend_sharpness(self, sharpness: float) -> None: ...
    def get_uv2_triplanar_blend_sharpness(self) -> float: ...
    def set_billboard_mode(self, mode: 'BaseMaterial3D_BillboardMode') -> None: ...
    def get_billboard_mode(self) -> 'BaseMaterial3D_BillboardMode': ...
    def set_particles_anim_h_frames(self, frames: int) -> None: ...
    def get_particles_anim_h_frames(self) -> int: ...
    def set_particles_anim_v_frames(self, frames: int) -> None: ...
    def get_particles_anim_v_frames(self) -> int: ...
    def set_particles_anim_loop(self, loop: bool) -> None: ...
    def get_particles_anim_loop(self) -> bool: ...
    def set_heightmap_deep_parallax(self, enable: bool) -> None: ...
    def is_heightmap_deep_parallax_enabled(self) -> bool: ...
    def set_heightmap_deep_parallax_min_layers(self, layer: int) -> None: ...
    def get_heightmap_deep_parallax_min_layers(self) -> int: ...
    def set_heightmap_deep_parallax_max_layers(self, layer: int) -> None: ...
    def get_heightmap_deep_parallax_max_layers(self) -> int: ...
    def set_heightmap_deep_parallax_flip_tangent(self, flip: bool) -> None: ...
    def get_heightmap_deep_parallax_flip_tangent(self) -> bool: ...
    def set_heightmap_deep_parallax_flip_binormal(self, flip: bool) -> None: ...
    def get_heightmap_deep_parallax_flip_binormal(self) -> bool: ...
    def set_grow(self, amount: float) -> None: ...
    def get_grow(self) -> float: ...
    def set_emission_operator(self, operator: 'BaseMaterial3D_EmissionOperator') -> None: ...
    def get_emission_operator(self) -> 'BaseMaterial3D_EmissionOperator': ...
    def set_ao_light_affect(self, amount: float) -> None: ...
    def get_ao_light_affect(self) -> float: ...
    def set_alpha_scissor_threshold(self, threshold: float) -> None: ...
    def get_alpha_scissor_threshold(self) -> float: ...
    def set_alpha_hash_scale(self, threshold: float) -> None: ...
    def get_alpha_hash_scale(self) -> float: ...
    def set_grow_enabled(self, enable: bool) -> None: ...
    def is_grow_enabled(self) -> bool: ...
    def set_metallic_texture_channel(self, channel: 'BaseMaterial3D_TextureChannel') -> None: ...
    def get_metallic_texture_channel(self) -> 'BaseMaterial3D_TextureChannel': ...
    def set_roughness_texture_channel(self, channel: 'BaseMaterial3D_TextureChannel') -> None: ...
    def get_roughness_texture_channel(self) -> 'BaseMaterial3D_TextureChannel': ...
    def set_ao_texture_channel(self, channel: 'BaseMaterial3D_TextureChannel') -> None: ...
    def get_ao_texture_channel(self) -> 'BaseMaterial3D_TextureChannel': ...
    def set_refraction_texture_channel(self, channel: 'BaseMaterial3D_TextureChannel') -> None: ...
    def get_refraction_texture_channel(self) -> 'BaseMaterial3D_TextureChannel': ...
    def set_proximity_fade_enabled(self, enabled: bool) -> None: ...
    def is_proximity_fade_enabled(self) -> bool: ...
    def set_proximity_fade_distance(self, distance: float) -> None: ...
    def get_proximity_fade_distance(self) -> float: ...
    def set_msdf_pixel_range(self, range: float) -> None: ...
    def get_msdf_pixel_range(self) -> float: ...
    def set_msdf_outline_size(self, size: float) -> None: ...
    def get_msdf_outline_size(self) -> float: ...
    def set_distance_fade(self, mode: 'BaseMaterial3D_DistanceFadeMode') -> None: ...
    def get_distance_fade(self) -> 'BaseMaterial3D_DistanceFadeMode': ...
    def set_distance_fade_max_distance(self, distance: float) -> None: ...
    def get_distance_fade_max_distance(self) -> float: ...
    def set_distance_fade_min_distance(self, distance: float) -> None: ...
    def get_distance_fade_min_distance(self) -> float: ...
    
class BaseMaterial3D_TextureParam(Enum):
    TEXTURE_ALBEDO = 0
    TEXTURE_METALLIC = 1
    TEXTURE_ROUGHNESS = 2
    TEXTURE_EMISSION = 3
    TEXTURE_NORMAL = 4
    TEXTURE_RIM = 5
    TEXTURE_CLEARCOAT = 6
    TEXTURE_FLOWMAP = 7
    TEXTURE_AMBIENT_OCCLUSION = 8
    TEXTURE_HEIGHTMAP = 9
    TEXTURE_SUBSURFACE_SCATTERING = 10
    TEXTURE_SUBSURFACE_TRANSMITTANCE = 11
    TEXTURE_BACKLIGHT = 12
    TEXTURE_REFRACTION = 13
    TEXTURE_DETAIL_MASK = 14
    TEXTURE_DETAIL_ALBEDO = 15
    TEXTURE_DETAIL_NORMAL = 16
    TEXTURE_ORM = 17
    TEXTURE_MAX = 18

class BaseMaterial3D_TextureFilter(Enum):
    TEXTURE_FILTER_NEAREST = 0
    TEXTURE_FILTER_LINEAR = 1
    TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 2
    TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 3
    TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC = 4
    TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC = 5
    TEXTURE_FILTER_MAX = 6

class BaseMaterial3D_DetailUV(Enum):
    DETAIL_UV_1 = 0
    DETAIL_UV_2 = 1

class BaseMaterial3D_Transparency(Enum):
    TRANSPARENCY_DISABLED = 0
    TRANSPARENCY_ALPHA = 1
    TRANSPARENCY_ALPHA_SCISSOR = 2
    TRANSPARENCY_ALPHA_HASH = 3
    TRANSPARENCY_ALPHA_DEPTH_PRE_PASS = 4
    TRANSPARENCY_MAX = 5

class BaseMaterial3D_ShadingMode(Enum):
    SHADING_MODE_UNSHADED = 0
    SHADING_MODE_PER_PIXEL = 1
    SHADING_MODE_PER_VERTEX = 2
    SHADING_MODE_MAX = 3

class BaseMaterial3D_Feature(Enum):
    FEATURE_EMISSION = 0
    FEATURE_NORMAL_MAPPING = 1
    FEATURE_RIM = 2
    FEATURE_CLEARCOAT = 3
    FEATURE_ANISOTROPY = 4
    FEATURE_AMBIENT_OCCLUSION = 5
    FEATURE_HEIGHT_MAPPING = 6
    FEATURE_SUBSURFACE_SCATTERING = 7
    FEATURE_SUBSURFACE_TRANSMITTANCE = 8
    FEATURE_BACKLIGHT = 9
    FEATURE_REFRACTION = 10
    FEATURE_DETAIL = 11
    FEATURE_MAX = 12

class BaseMaterial3D_BlendMode(Enum):
    BLEND_MODE_MIX = 0
    BLEND_MODE_ADD = 1
    BLEND_MODE_SUB = 2
    BLEND_MODE_MUL = 3
    BLEND_MODE_PREMULT_ALPHA = 4

class BaseMaterial3D_AlphaAntiAliasing(Enum):
    ALPHA_ANTIALIASING_OFF = 0
    ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE = 1
    ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE_AND_TO_ONE = 2

class BaseMaterial3D_DepthDrawMode(Enum):
    DEPTH_DRAW_OPAQUE_ONLY = 0
    DEPTH_DRAW_ALWAYS = 1
    DEPTH_DRAW_DISABLED = 2

class BaseMaterial3D_CullMode(Enum):
    CULL_BACK = 0
    CULL_FRONT = 1
    CULL_DISABLED = 2

class BaseMaterial3D_Flags(Enum):
    FLAG_DISABLE_DEPTH_TEST = 0
    FLAG_ALBEDO_FROM_VERTEX_COLOR = 1
    FLAG_SRGB_VERTEX_COLOR = 2
    FLAG_USE_POINT_SIZE = 3
    FLAG_FIXED_SIZE = 4
    FLAG_BILLBOARD_KEEP_SCALE = 5
    FLAG_UV1_USE_TRIPLANAR = 6
    FLAG_UV2_USE_TRIPLANAR = 7
    FLAG_UV1_USE_WORLD_TRIPLANAR = 8
    FLAG_UV2_USE_WORLD_TRIPLANAR = 9
    FLAG_AO_ON_UV2 = 10
    FLAG_EMISSION_ON_UV2 = 11
    FLAG_ALBEDO_TEXTURE_FORCE_SRGB = 12
    FLAG_DONT_RECEIVE_SHADOWS = 13
    FLAG_DISABLE_AMBIENT_LIGHT = 14
    FLAG_USE_SHADOW_TO_OPACITY = 15
    FLAG_USE_TEXTURE_REPEAT = 16
    FLAG_INVERT_HEIGHTMAP = 17
    FLAG_SUBSURFACE_MODE_SKIN = 18
    FLAG_PARTICLE_TRAILS_MODE = 19
    FLAG_ALBEDO_TEXTURE_MSDF = 20
    FLAG_DISABLE_FOG = 21
    FLAG_MAX = 22

class BaseMaterial3D_DiffuseMode(Enum):
    DIFFUSE_BURLEY = 0
    DIFFUSE_LAMBERT = 1
    DIFFUSE_LAMBERT_WRAP = 2
    DIFFUSE_TOON = 3

class BaseMaterial3D_SpecularMode(Enum):
    SPECULAR_SCHLICK_GGX = 0
    SPECULAR_TOON = 1
    SPECULAR_DISABLED = 2

class BaseMaterial3D_BillboardMode(Enum):
    BILLBOARD_DISABLED = 0
    BILLBOARD_ENABLED = 1
    BILLBOARD_FIXED_Y = 2
    BILLBOARD_PARTICLES = 3

class BaseMaterial3D_TextureChannel(Enum):
    TEXTURE_CHANNEL_RED = 0
    TEXTURE_CHANNEL_GREEN = 1
    TEXTURE_CHANNEL_BLUE = 2
    TEXTURE_CHANNEL_ALPHA = 3
    TEXTURE_CHANNEL_GRAYSCALE = 4

class BaseMaterial3D_EmissionOperator(Enum):
    EMISSION_OP_ADD = 0
    EMISSION_OP_MULTIPLY = 1

class BaseMaterial3D_DistanceFadeMode(Enum):
    DISTANCE_FADE_DISABLED = 0
    DISTANCE_FADE_PIXEL_ALPHA = 1
    DISTANCE_FADE_PIXEL_DITHER = 2
    DISTANCE_FADE_OBJECT_DITHER = 3

class BitMap(Resource):
    data: 'Dictionary'
    def create(self, size: 'Vector2i') -> None: ...
    def create_from_image_alpha(self, image: 'Image', threshold: float = default('''0.1''')) -> None: ...
    def set_bitv(self, position: 'Vector2i', bit: bool) -> None: ...
    def set_bit(self, x: int, y: int, bit: bool) -> None: ...
    def get_bitv(self, position: 'Vector2i') -> bool: ...
    def get_bit(self, x: int, y: int) -> bool: ...
    def set_bit_rect(self, rect: 'Rect2i', bit: bool) -> None: ...
    def get_true_bit_count(self) -> int: ...
    def get_size(self) -> 'Vector2i': ...
    def resize(self, new_size: 'Vector2i') -> None: ...
    def grow_mask(self, pixels: int, rect: 'Rect2i') -> None: ...
    def convert_to_image(self) -> 'Image': ...
    def opaque_to_polygons(self, rect: 'Rect2i', epsilon: float = default('''2.0''')) -> 'list[PackedVector2Array]': ...
    
class Bone2D(Node2D):
    rest: 'Transform2D'
    def set_rest(self, rest: 'Transform2D') -> None: ...
    def get_rest(self) -> 'Transform2D': ...
    def apply_rest(self) -> None: ...
    def get_skeleton_rest(self) -> 'Transform2D': ...
    def get_index_in_skeleton(self) -> int: ...
    def set_autocalculate_length_and_angle(self, auto_calculate: bool) -> None: ...
    def get_autocalculate_length_and_angle(self) -> bool: ...
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_bone_angle(self, angle: float) -> None: ...
    def get_bone_angle(self) -> float: ...
    
class BoneAttachment3D(Node3D):
    bone_name: 'StringName'
    bone_idx: int
    override_pose: bool
    def get_skeleton(self) -> 'Skeleton3D': ...
    def set_bone_name(self, bone_name: 'String') -> None: ...
    def get_bone_name(self) -> 'String': ...
    def set_bone_idx(self, bone_idx: int) -> None: ...
    def get_bone_idx(self) -> int: ...
    def on_skeleton_update(self) -> None: ...
    def set_override_pose(self, override_pose: bool) -> None: ...
    def get_override_pose(self) -> bool: ...
    def set_use_external_skeleton(self, use_external_skeleton: bool) -> None: ...
    def get_use_external_skeleton(self) -> bool: ...
    def set_external_skeleton(self, external_skeleton: 'NodePath') -> None: ...
    def get_external_skeleton(self) -> 'NodePath': ...
    
class BoneMap(Resource):
    profile: 'SkeletonProfile'
    bone_map_updated: Signal[Callable[[], None]]  # bone_map_updated()
    profile_updated: Signal[Callable[[], None]]  # profile_updated()
    def get_profile(self) -> 'SkeletonProfile': ...
    def set_profile(self, profile: 'SkeletonProfile') -> None: ...
    def get_skeleton_bone_name(self, profile_bone_name: 'StringName') -> 'StringName': ...
    def set_skeleton_bone_name(self, profile_bone_name: 'StringName', skeleton_bone_name: 'StringName') -> None: ...
    def find_profile_bone_name(self, skeleton_bone_name: 'StringName') -> 'StringName': ...
    
class BoxContainer(Container):
    alignment: int
    vertical: bool
    def add_spacer(self, begin: bool) -> 'Control': ...
    def set_alignment(self, alignment: 'BoxContainer_AlignmentMode') -> None: ...
    def get_alignment(self) -> 'BoxContainer_AlignmentMode': ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...
    
class BoxContainer_AlignmentMode(Enum):
    ALIGNMENT_BEGIN = 0
    ALIGNMENT_CENTER = 1
    ALIGNMENT_END = 2

class BoxMesh(PrimitiveMesh):
    size: 'Vector3'
    subdivide_width: int
    subdivide_height: int
    subdivide_depth: int
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_subdivide_width(self, subdivide: int) -> None: ...
    def get_subdivide_width(self) -> int: ...
    def set_subdivide_height(self, divisions: int) -> None: ...
    def get_subdivide_height(self) -> int: ...
    def set_subdivide_depth(self, divisions: int) -> None: ...
    def get_subdivide_depth(self) -> int: ...
    
class BoxOccluder3D(Occluder3D):
    size: 'Vector3'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    
class BoxShape3D(Shape3D):
    size: 'Vector3'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    
class Button(BaseButton):
    text: 'String'
    icon: 'Texture2D'
    flat: bool
    alignment: int
    text_overrun_behavior: int
    autowrap_mode: int
    clip_text: bool
    icon_alignment: int
    vertical_icon_alignment: int
    expand_icon: bool
    text_direction: int
    language: 'String'
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer_OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer_OverrunBehavior': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer_AutowrapMode': ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_button_icon(self, texture: 'Texture2D') -> None: ...
    def get_button_icon(self) -> 'Texture2D': ...
    def set_flat(self, enabled: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_clip_text(self, enabled: bool) -> None: ...
    def get_clip_text(self) -> bool: ...
    def set_text_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_text_alignment(self) -> 'HorizontalAlignment': ...
    def set_icon_alignment(self, icon_alignment: 'HorizontalAlignment') -> None: ...
    def get_icon_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_icon_alignment(self, vertical_icon_alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_icon_alignment(self) -> 'VerticalAlignment': ...
    def set_expand_icon(self, enabled: bool) -> None: ...
    def is_expand_icon(self) -> bool: ...
    
class ButtonGroup(Resource):
    allow_unpress: bool
    pressed: Signal[Callable[['BaseButton'], None]]  # pressed(button: 'BaseButton')
    def get_pressed_button(self) -> 'BaseButton': ...
    def get_buttons(self) -> 'list[BaseButton]': ...
    def set_allow_unpress(self, enabled: bool) -> None: ...
    def is_allow_unpress(self) -> bool: ...
    
class CPUParticles2D(Node2D):
    emitting: bool
    amount: int
    texture: 'Texture2D'
    lifetime: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    use_fixed_seed: bool
    seed: int
    lifetime_randomness: float
    fixed_fps: int
    fract_delta: bool
    local_coords: bool
    draw_order: int
    emission_shape: int
    emission_sphere_radius: float
    emission_rect_extents: 'Vector2'
    emission_points: 'PackedVector2Array'
    emission_normals: 'PackedVector2Array'
    emission_colors: 'PackedColorArray'
    particle_flag_align_y: bool
    direction: 'Vector2'
    spread: float
    gravity: 'Vector2'
    initial_velocity_min: float
    initial_velocity_max: float
    angular_velocity_min: float
    angular_velocity_max: float
    angular_velocity_curve: 'Curve'
    orbit_velocity_min: float
    orbit_velocity_max: float
    orbit_velocity_curve: 'Curve'
    linear_accel_min: float
    linear_accel_max: float
    linear_accel_curve: 'Curve'
    radial_accel_min: float
    radial_accel_max: float
    radial_accel_curve: 'Curve'
    tangential_accel_min: float
    tangential_accel_max: float
    tangential_accel_curve: 'Curve'
    damping_min: float
    damping_max: float
    damping_curve: 'Curve'
    angle_min: float
    angle_max: float
    angle_curve: 'Curve'
    scale_amount_min: float
    scale_amount_max: float
    scale_amount_curve: 'Curve'
    split_scale: bool
    scale_curve_x: 'Curve'
    scale_curve_y: 'Curve'
    color: 'Color'
    color_ramp: 'Gradient'
    color_initial_ramp: 'Gradient'
    hue_variation_min: float
    hue_variation_max: float
    hue_variation_curve: 'Curve'
    anim_speed_min: float
    anim_speed_max: float
    anim_speed_curve: 'Curve'
    anim_offset_min: float
    anim_offset_max: float
    anim_offset_curve: 'Curve'
    finished: Signal[Callable[[], None]]  # finished()
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_lifetime_randomness(self, random: float) -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def request_particles_process(self, process_time: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_lifetime_randomness(self) -> float: ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_speed_scale(self) -> float: ...
    def set_use_fixed_seed(self, use_fixed_seed: bool) -> None: ...
    def get_use_fixed_seed(self) -> bool: ...
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def set_draw_order(self, order: 'CPUParticles2D_DrawOrder') -> None: ...
    def get_draw_order(self) -> 'CPUParticles2D_DrawOrder': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def restart(self, keep_seed: bool = default('''false''')) -> None: ...
    def set_direction(self, direction: 'Vector2') -> None: ...
    def get_direction(self) -> 'Vector2': ...
    def set_spread(self, spread: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_param_min(self, param: 'CPUParticles2D_Parameter', value: float) -> None: ...
    def get_param_min(self, param: 'CPUParticles2D_Parameter') -> float: ...
    def set_param_max(self, param: 'CPUParticles2D_Parameter', value: float) -> None: ...
    def get_param_max(self, param: 'CPUParticles2D_Parameter') -> float: ...
    def set_param_curve(self, param: 'CPUParticles2D_Parameter', curve: 'Curve') -> None: ...
    def get_param_curve(self, param: 'CPUParticles2D_Parameter') -> 'Curve': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_color_initial_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_initial_ramp(self) -> 'Gradient': ...
    def set_particle_flag(self, particle_flag: 'CPUParticles2D_ParticleFlags', enable: bool) -> None: ...
    def get_particle_flag(self, particle_flag: 'CPUParticles2D_ParticleFlags') -> bool: ...
    def set_emission_shape(self, shape: 'CPUParticles2D_EmissionShape') -> None: ...
    def get_emission_shape(self) -> 'CPUParticles2D_EmissionShape': ...
    def set_emission_sphere_radius(self, radius: float) -> None: ...
    def get_emission_sphere_radius(self) -> float: ...
    def set_emission_rect_extents(self, extents: 'Vector2') -> None: ...
    def get_emission_rect_extents(self) -> 'Vector2': ...
    def set_emission_points(self, array: 'PackedVector2Array') -> None: ...
    def get_emission_points(self) -> 'PackedVector2Array': ...
    def set_emission_normals(self, array: 'PackedVector2Array') -> None: ...
    def get_emission_normals(self) -> 'PackedVector2Array': ...
    def set_emission_colors(self, array: 'PackedColorArray') -> None: ...
    def get_emission_colors(self) -> 'PackedColorArray': ...
    def get_gravity(self) -> 'Vector2': ...
    def set_gravity(self, accel_vec: 'Vector2') -> None: ...
    def get_split_scale(self) -> bool: ...
    def set_split_scale(self, split_scale: bool) -> None: ...
    def get_scale_curve_x(self) -> 'Curve': ...
    def set_scale_curve_x(self, scale_curve: 'Curve') -> None: ...
    def get_scale_curve_y(self) -> 'Curve': ...
    def set_scale_curve_y(self, scale_curve: 'Curve') -> None: ...
    def convert_from_particles(self, particles: 'Node') -> None: ...
    
class CPUParticles2D_DrawOrder(Enum):
    DRAW_ORDER_INDEX = 0
    DRAW_ORDER_LIFETIME = 1

class CPUParticles2D_Parameter(Enum):
    PARAM_INITIAL_LINEAR_VELOCITY = 0
    PARAM_ANGULAR_VELOCITY = 1
    PARAM_ORBIT_VELOCITY = 2
    PARAM_LINEAR_ACCEL = 3
    PARAM_RADIAL_ACCEL = 4
    PARAM_TANGENTIAL_ACCEL = 5
    PARAM_DAMPING = 6
    PARAM_ANGLE = 7
    PARAM_SCALE = 8
    PARAM_HUE_VARIATION = 9
    PARAM_ANIM_SPEED = 10
    PARAM_ANIM_OFFSET = 11
    PARAM_MAX = 12

class CPUParticles2D_ParticleFlags(Enum):
    PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY = 0
    PARTICLE_FLAG_ROTATE_Y = 1
    PARTICLE_FLAG_DISABLE_Z = 2
    PARTICLE_FLAG_MAX = 3

class CPUParticles2D_EmissionShape(Enum):
    EMISSION_SHAPE_POINT = 0
    EMISSION_SHAPE_SPHERE = 1
    EMISSION_SHAPE_SPHERE_SURFACE = 2
    EMISSION_SHAPE_RECTANGLE = 3
    EMISSION_SHAPE_POINTS = 4
    EMISSION_SHAPE_DIRECTED_POINTS = 5
    EMISSION_SHAPE_MAX = 6

class CPUParticles3D(GeometryInstance3D):
    emitting: bool
    amount: int
    lifetime: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    use_fixed_seed: bool
    seed: int
    lifetime_randomness: float
    fixed_fps: int
    fract_delta: bool
    visibility_aabb: 'AABB'
    local_coords: bool
    draw_order: int
    mesh: 'Mesh'
    emission_shape: int
    emission_sphere_radius: float
    emission_box_extents: 'Vector3'
    emission_points: 'PackedVector3Array'
    emission_normals: 'PackedVector3Array'
    emission_colors: 'PackedColorArray'
    emission_ring_axis: 'Vector3'
    emission_ring_height: float
    emission_ring_radius: float
    emission_ring_inner_radius: float
    emission_ring_cone_angle: float
    particle_flag_align_y: bool
    particle_flag_rotate_y: bool
    particle_flag_disable_z: bool
    direction: 'Vector3'
    spread: float
    flatness: float
    gravity: 'Vector3'
    initial_velocity_min: float
    initial_velocity_max: float
    angular_velocity_min: float
    angular_velocity_max: float
    angular_velocity_curve: 'Curve'
    orbit_velocity_min: float
    orbit_velocity_max: float
    orbit_velocity_curve: 'Curve'
    linear_accel_min: float
    linear_accel_max: float
    linear_accel_curve: 'Curve'
    radial_accel_min: float
    radial_accel_max: float
    radial_accel_curve: 'Curve'
    tangential_accel_min: float
    tangential_accel_max: float
    tangential_accel_curve: 'Curve'
    damping_min: float
    damping_max: float
    damping_curve: 'Curve'
    angle_min: float
    angle_max: float
    angle_curve: 'Curve'
    scale_amount_min: float
    scale_amount_max: float
    scale_amount_curve: 'Curve'
    split_scale: bool
    scale_curve_x: 'Curve'
    scale_curve_y: 'Curve'
    scale_curve_z: 'Curve'
    color: 'Color'
    color_ramp: 'Gradient'
    color_initial_ramp: 'Gradient'
    hue_variation_min: float
    hue_variation_max: float
    hue_variation_curve: 'Curve'
    anim_speed_min: float
    anim_speed_max: float
    anim_speed_curve: 'Curve'
    anim_offset_min: float
    anim_offset_max: float
    anim_offset_curve: 'Curve'
    finished: Signal[Callable[[], None]]  # finished()
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_visibility_aabb(self, aabb: 'AABB') -> None: ...
    def set_lifetime_randomness(self, random: float) -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_visibility_aabb(self) -> 'AABB': ...
    def get_lifetime_randomness(self) -> float: ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_speed_scale(self) -> float: ...
    def set_draw_order(self, order: 'CPUParticles3D_DrawOrder') -> None: ...
    def get_draw_order(self) -> 'CPUParticles3D_DrawOrder': ...
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_use_fixed_seed(self, use_fixed_seed: bool) -> None: ...
    def get_use_fixed_seed(self) -> bool: ...
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def restart(self, keep_seed: bool = default('''false''')) -> None: ...
    def request_particles_process(self, process_time: float) -> None: ...
    def capture_aabb(self) -> 'AABB': ...
    def set_direction(self, direction: 'Vector3') -> None: ...
    def get_direction(self) -> 'Vector3': ...
    def set_spread(self, degrees: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_flatness(self, amount: float) -> None: ...
    def get_flatness(self) -> float: ...
    def set_param_min(self, param: 'CPUParticles3D_Parameter', value: float) -> None: ...
    def get_param_min(self, param: 'CPUParticles3D_Parameter') -> float: ...
    def set_param_max(self, param: 'CPUParticles3D_Parameter', value: float) -> None: ...
    def get_param_max(self, param: 'CPUParticles3D_Parameter') -> float: ...
    def set_param_curve(self, param: 'CPUParticles3D_Parameter', curve: 'Curve') -> None: ...
    def get_param_curve(self, param: 'CPUParticles3D_Parameter') -> 'Curve': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_color_initial_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_initial_ramp(self) -> 'Gradient': ...
    def set_particle_flag(self, particle_flag: 'CPUParticles3D_ParticleFlags', enable: bool) -> None: ...
    def get_particle_flag(self, particle_flag: 'CPUParticles3D_ParticleFlags') -> bool: ...
    def set_emission_shape(self, shape: 'CPUParticles3D_EmissionShape') -> None: ...
    def get_emission_shape(self) -> 'CPUParticles3D_EmissionShape': ...
    def set_emission_sphere_radius(self, radius: float) -> None: ...
    def get_emission_sphere_radius(self) -> float: ...
    def set_emission_box_extents(self, extents: 'Vector3') -> None: ...
    def get_emission_box_extents(self) -> 'Vector3': ...
    def set_emission_points(self, array: 'PackedVector3Array') -> None: ...
    def get_emission_points(self) -> 'PackedVector3Array': ...
    def set_emission_normals(self, array: 'PackedVector3Array') -> None: ...
    def get_emission_normals(self) -> 'PackedVector3Array': ...
    def set_emission_colors(self, array: 'PackedColorArray') -> None: ...
    def get_emission_colors(self) -> 'PackedColorArray': ...
    def set_emission_ring_axis(self, axis: 'Vector3') -> None: ...
    def get_emission_ring_axis(self) -> 'Vector3': ...
    def set_emission_ring_height(self, height: float) -> None: ...
    def get_emission_ring_height(self) -> float: ...
    def set_emission_ring_radius(self, radius: float) -> None: ...
    def get_emission_ring_radius(self) -> float: ...
    def set_emission_ring_inner_radius(self, inner_radius: float) -> None: ...
    def get_emission_ring_inner_radius(self) -> float: ...
    def set_emission_ring_cone_angle(self, cone_angle: float) -> None: ...
    def get_emission_ring_cone_angle(self) -> float: ...
    def get_gravity(self) -> 'Vector3': ...
    def set_gravity(self, accel_vec: 'Vector3') -> None: ...
    def get_split_scale(self) -> bool: ...
    def set_split_scale(self, split_scale: bool) -> None: ...
    def get_scale_curve_x(self) -> 'Curve': ...
    def set_scale_curve_x(self, scale_curve: 'Curve') -> None: ...
    def get_scale_curve_y(self) -> 'Curve': ...
    def set_scale_curve_y(self, scale_curve: 'Curve') -> None: ...
    def get_scale_curve_z(self) -> 'Curve': ...
    def set_scale_curve_z(self, scale_curve: 'Curve') -> None: ...
    def convert_from_particles(self, particles: 'Node') -> None: ...
    
class CPUParticles3D_DrawOrder(Enum):
    DRAW_ORDER_INDEX = 0
    DRAW_ORDER_LIFETIME = 1
    DRAW_ORDER_VIEW_DEPTH = 2

class CPUParticles3D_Parameter(Enum):
    PARAM_INITIAL_LINEAR_VELOCITY = 0
    PARAM_ANGULAR_VELOCITY = 1
    PARAM_ORBIT_VELOCITY = 2
    PARAM_LINEAR_ACCEL = 3
    PARAM_RADIAL_ACCEL = 4
    PARAM_TANGENTIAL_ACCEL = 5
    PARAM_DAMPING = 6
    PARAM_ANGLE = 7
    PARAM_SCALE = 8
    PARAM_HUE_VARIATION = 9
    PARAM_ANIM_SPEED = 10
    PARAM_ANIM_OFFSET = 11
    PARAM_MAX = 12

class CPUParticles3D_ParticleFlags(Enum):
    PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY = 0
    PARTICLE_FLAG_ROTATE_Y = 1
    PARTICLE_FLAG_DISABLE_Z = 2
    PARTICLE_FLAG_MAX = 3

class CPUParticles3D_EmissionShape(Enum):
    EMISSION_SHAPE_POINT = 0
    EMISSION_SHAPE_SPHERE = 1
    EMISSION_SHAPE_SPHERE_SURFACE = 2
    EMISSION_SHAPE_BOX = 3
    EMISSION_SHAPE_POINTS = 4
    EMISSION_SHAPE_DIRECTED_POINTS = 5
    EMISSION_SHAPE_RING = 6
    EMISSION_SHAPE_MAX = 7

class CSGBox3D(CSGPrimitive3D):
    size: 'Vector3'
    material: 'BaseMaterial3D'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    
class CSGCombiner3D(CSGShape3D):
    pass
    
class CSGCylinder3D(CSGPrimitive3D):
    radius: float
    height: float
    sides: int
    cone: bool
    smooth_faces: bool
    material: 'BaseMaterial3D'
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_sides(self, sides: int) -> None: ...
    def get_sides(self) -> int: ...
    def set_cone(self, cone: bool) -> None: ...
    def is_cone(self) -> bool: ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...
    
class CSGMesh3D(CSGPrimitive3D):
    mesh: 'Mesh'
    material: 'BaseMaterial3D'
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    
class CSGPolygon3D(CSGPrimitive3D):
    polygon: 'PackedVector2Array'
    mode: int
    depth: float
    spin_degrees: float
    spin_sides: int
    path_node: 'NodePath'
    path_interval_type: int
    path_interval: float
    path_simplify_angle: float
    path_rotation: int
    path_rotation_accurate: bool
    path_local: bool
    path_continuous_u: bool
    path_u_distance: float
    path_joined: bool
    smooth_faces: bool
    material: 'BaseMaterial3D'
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_mode(self, mode: 'CSGPolygon3D_Mode') -> None: ...
    def get_mode(self) -> 'CSGPolygon3D_Mode': ...
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    def set_spin_degrees(self, degrees: float) -> None: ...
    def get_spin_degrees(self) -> float: ...
    def set_spin_sides(self, spin_sides: int) -> None: ...
    def get_spin_sides(self) -> int: ...
    def set_path_node(self, path: 'NodePath') -> None: ...
    def get_path_node(self) -> 'NodePath': ...
    def set_path_interval_type(self, interval_type: 'CSGPolygon3D_PathIntervalType') -> None: ...
    def get_path_interval_type(self) -> 'CSGPolygon3D_PathIntervalType': ...
    def set_path_interval(self, interval: float) -> None: ...
    def get_path_interval(self) -> float: ...
    def set_path_simplify_angle(self, degrees: float) -> None: ...
    def get_path_simplify_angle(self) -> float: ...
    def set_path_rotation(self, path_rotation: 'CSGPolygon3D_PathRotation') -> None: ...
    def get_path_rotation(self) -> 'CSGPolygon3D_PathRotation': ...
    def set_path_rotation_accurate(self, enable: bool) -> None: ...
    def get_path_rotation_accurate(self) -> bool: ...
    def set_path_local(self, enable: bool) -> None: ...
    def is_path_local(self) -> bool: ...
    def set_path_continuous_u(self, enable: bool) -> None: ...
    def is_path_continuous_u(self) -> bool: ...
    def set_path_u_distance(self, distance: float) -> None: ...
    def get_path_u_distance(self) -> float: ...
    def set_path_joined(self, enable: bool) -> None: ...
    def is_path_joined(self) -> bool: ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...
    
class CSGPolygon3D_Mode(Enum):
    MODE_DEPTH = 0
    MODE_SPIN = 1
    MODE_PATH = 2

class CSGPolygon3D_PathRotation(Enum):
    PATH_ROTATION_POLYGON = 0
    PATH_ROTATION_PATH = 1
    PATH_ROTATION_PATH_FOLLOW = 2

class CSGPolygon3D_PathIntervalType(Enum):
    PATH_INTERVAL_DISTANCE = 0
    PATH_INTERVAL_SUBDIVIDE = 1

class CSGPrimitive3D(CSGShape3D):
    flip_faces: bool
    def set_flip_faces(self, flip_faces: bool) -> None: ...
    def get_flip_faces(self) -> bool: ...
    
class CSGShape3D(GeometryInstance3D):
    operation: int
    snap: float
    calculate_tangents: bool
    use_collision: bool
    collision_layer: int
    collision_mask: int
    collision_priority: float
    def is_root_shape(self) -> bool: ...
    def set_operation(self, operation: 'CSGShape3D_Operation') -> None: ...
    def get_operation(self) -> 'CSGShape3D_Operation': ...
    def set_snap(self, snap: float) -> None: ...
    def get_snap(self) -> float: ...
    def set_use_collision(self, operation: bool) -> None: ...
    def is_using_collision(self) -> bool: ...
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_calculate_tangents(self, enabled: bool) -> None: ...
    def is_calculating_tangents(self) -> bool: ...
    def get_meshes(self) -> 'Array': ...
    def bake_static_mesh(self) -> 'ArrayMesh': ...
    def bake_collision_shape(self) -> 'ConcavePolygonShape3D': ...
    
class CSGShape3D_Operation(Enum):
    OPERATION_UNION = 0
    OPERATION_INTERSECTION = 1
    OPERATION_SUBTRACTION = 2

class CSGSphere3D(CSGPrimitive3D):
    radius: float
    radial_segments: int
    rings: int
    smooth_faces: bool
    material: 'BaseMaterial3D'
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_radial_segments(self, radial_segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    
class CSGTorus3D(CSGPrimitive3D):
    inner_radius: float
    outer_radius: float
    sides: int
    ring_sides: int
    smooth_faces: bool
    material: 'BaseMaterial3D'
    def set_inner_radius(self, radius: float) -> None: ...
    def get_inner_radius(self) -> float: ...
    def set_outer_radius(self, radius: float) -> None: ...
    def get_outer_radius(self) -> float: ...
    def set_sides(self, sides: int) -> None: ...
    def get_sides(self) -> int: ...
    def set_ring_sides(self, sides: int) -> None: ...
    def get_ring_sides(self) -> int: ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_smooth_faces(self, smooth_faces: bool) -> None: ...
    def get_smooth_faces(self) -> bool: ...
    
class CallbackTweener(Tweener):
    def set_delay(self, delay: float) -> 'CallbackTweener': ...
    
class Camera2D(Node2D):
    offset: 'Vector2'
    anchor_mode: int
    ignore_rotation: bool
    enabled: bool
    zoom: 'Vector2'
    custom_viewport: 'Viewport'
    process_callback: int
    limit_left: int
    limit_top: int
    limit_right: int
    limit_bottom: int
    limit_smoothed: bool
    position_smoothing_enabled: bool
    position_smoothing_speed: float
    rotation_smoothing_enabled: bool
    rotation_smoothing_speed: float
    drag_horizontal_enabled: bool
    drag_vertical_enabled: bool
    drag_horizontal_offset: float
    drag_vertical_offset: float
    drag_left_margin: float
    drag_top_margin: float
    drag_right_margin: float
    drag_bottom_margin: float
    editor_draw_screen: bool
    editor_draw_limits: bool
    editor_draw_drag_margin: bool
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_anchor_mode(self, anchor_mode: 'Camera2D_AnchorMode') -> None: ...
    def get_anchor_mode(self) -> 'Camera2D_AnchorMode': ...
    def set_ignore_rotation(self, ignore: bool) -> None: ...
    def is_ignoring_rotation(self) -> bool: ...
    def set_process_callback(self, mode: 'Camera2D_Camera2DProcessCallback') -> None: ...
    def get_process_callback(self) -> 'Camera2D_Camera2DProcessCallback': ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def make_current(self) -> None: ...
    def is_current(self) -> bool: ...
    def set_limit(self, margin: 'Side', limit: int) -> None: ...
    def get_limit(self, margin: 'Side') -> int: ...
    def set_limit_smoothing_enabled(self, limit_smoothing_enabled: bool) -> None: ...
    def is_limit_smoothing_enabled(self) -> bool: ...
    def set_drag_vertical_enabled(self, enabled: bool) -> None: ...
    def is_drag_vertical_enabled(self) -> bool: ...
    def set_drag_horizontal_enabled(self, enabled: bool) -> None: ...
    def is_drag_horizontal_enabled(self) -> bool: ...
    def set_drag_vertical_offset(self, offset: float) -> None: ...
    def get_drag_vertical_offset(self) -> float: ...
    def set_drag_horizontal_offset(self, offset: float) -> None: ...
    def get_drag_horizontal_offset(self) -> float: ...
    def set_drag_margin(self, margin: 'Side', drag_margin: float) -> None: ...
    def get_drag_margin(self, margin: 'Side') -> float: ...
    def get_target_position(self) -> 'Vector2': ...
    def get_screen_center_position(self) -> 'Vector2': ...
    def set_zoom(self, zoom: 'Vector2') -> None: ...
    def get_zoom(self) -> 'Vector2': ...
    def set_custom_viewport(self, viewport: 'Node') -> None: ...
    def get_custom_viewport(self) -> 'Node': ...
    def set_position_smoothing_speed(self, position_smoothing_speed: float) -> None: ...
    def get_position_smoothing_speed(self) -> float: ...
    def set_position_smoothing_enabled(self, position_smoothing_speed: bool) -> None: ...
    def is_position_smoothing_enabled(self) -> bool: ...
    def set_rotation_smoothing_enabled(self, enabled: bool) -> None: ...
    def is_rotation_smoothing_enabled(self) -> bool: ...
    def set_rotation_smoothing_speed(self, speed: float) -> None: ...
    def get_rotation_smoothing_speed(self) -> float: ...
    def force_update_scroll(self) -> None: ...
    def reset_smoothing(self) -> None: ...
    def align(self) -> None: ...
    def set_screen_drawing_enabled(self, screen_drawing_enabled: bool) -> None: ...
    def is_screen_drawing_enabled(self) -> bool: ...
    def set_limit_drawing_enabled(self, limit_drawing_enabled: bool) -> None: ...
    def is_limit_drawing_enabled(self) -> bool: ...
    def set_margin_drawing_enabled(self, margin_drawing_enabled: bool) -> None: ...
    def is_margin_drawing_enabled(self) -> bool: ...
    
class Camera2D_AnchorMode(Enum):
    ANCHOR_MODE_FIXED_TOP_LEFT = 0
    ANCHOR_MODE_DRAG_CENTER = 1

class Camera2D_Camera2DProcessCallback(Enum):
    CAMERA2D_PROCESS_PHYSICS = 0
    CAMERA2D_PROCESS_IDLE = 1

class Camera3D(Node3D):
    keep_aspect: int
    cull_mask: int
    environment: 'Environment'
    attributes: 'CameraAttributesPractical'
    compositor: 'Compositor'
    h_offset: float
    v_offset: float
    doppler_tracking: int
    projection: int
    current: bool
    fov: float
    size: float
    frustum_offset: 'Vector2'
    near: float
    far: float
    def project_ray_normal(self, screen_point: 'Vector2') -> 'Vector3': ...
    def project_local_ray_normal(self, screen_point: 'Vector2') -> 'Vector3': ...
    def project_ray_origin(self, screen_point: 'Vector2') -> 'Vector3': ...
    def unproject_position(self, world_point: 'Vector3') -> 'Vector2': ...
    def is_position_behind(self, world_point: 'Vector3') -> bool: ...
    def project_position(self, screen_point: 'Vector2', z_depth: float) -> 'Vector3': ...
    def set_perspective(self, fov: float, z_near: float, z_far: float) -> None: ...
    def set_orthogonal(self, size: float, z_near: float, z_far: float) -> None: ...
    def set_frustum(self, size: float, offset: 'Vector2', z_near: float, z_far: float) -> None: ...
    def make_current(self) -> None: ...
    def clear_current(self, enable_next: bool = default('''true''')) -> None: ...
    def set_current(self, enabled: bool) -> None: ...
    def is_current(self) -> bool: ...
    def get_camera_transform(self) -> 'Transform3D': ...
    def get_camera_projection(self) -> 'Projection': ...
    def get_fov(self) -> float: ...
    def get_frustum_offset(self) -> 'Vector2': ...
    def get_size(self) -> float: ...
    def get_far(self) -> float: ...
    def get_near(self) -> float: ...
    def set_fov(self, fov: float) -> None: ...
    def set_frustum_offset(self, offset: 'Vector2') -> None: ...
    def set_size(self, size: float) -> None: ...
    def set_far(self, far: float) -> None: ...
    def set_near(self, near: float) -> None: ...
    def get_projection(self) -> 'Camera3D_ProjectionType': ...
    def set_projection(self, mode: 'Camera3D_ProjectionType') -> None: ...
    def set_h_offset(self, offset: float) -> None: ...
    def get_h_offset(self) -> float: ...
    def set_v_offset(self, offset: float) -> None: ...
    def get_v_offset(self) -> float: ...
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_environment(self, env: 'Environment') -> None: ...
    def get_environment(self) -> 'Environment': ...
    def set_attributes(self, env: 'CameraAttributes') -> None: ...
    def get_attributes(self) -> 'CameraAttributes': ...
    def set_compositor(self, compositor: 'Compositor') -> None: ...
    def get_compositor(self) -> 'Compositor': ...
    def set_keep_aspect_mode(self, mode: 'Camera3D_KeepAspect') -> None: ...
    def get_keep_aspect_mode(self) -> 'Camera3D_KeepAspect': ...
    def set_doppler_tracking(self, mode: 'Camera3D_DopplerTracking') -> None: ...
    def get_doppler_tracking(self) -> 'Camera3D_DopplerTracking': ...
    def get_frustum(self) -> 'list[Plane]': ...
    def is_position_in_frustum(self, world_point: 'Vector3') -> bool: ...
    def get_camera_rid(self) -> 'RID': ...
    def get_pyramid_shape_rid(self) -> 'RID': ...
    def set_cull_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_cull_mask_value(self, layer_number: int) -> bool: ...
    
class Camera3D_ProjectionType(Enum):
    PROJECTION_PERSPECTIVE = 0
    PROJECTION_ORTHOGONAL = 1
    PROJECTION_FRUSTUM = 2

class Camera3D_KeepAspect(Enum):
    KEEP_WIDTH = 0
    KEEP_HEIGHT = 1

class Camera3D_DopplerTracking(Enum):
    DOPPLER_TRACKING_DISABLED = 0
    DOPPLER_TRACKING_IDLE_STEP = 1
    DOPPLER_TRACKING_PHYSICS_STEP = 2

class CameraAttributes(Resource):
    exposure_sensitivity: float
    exposure_multiplier: float
    auto_exposure_enabled: bool
    auto_exposure_scale: float
    auto_exposure_speed: float
    def set_exposure_multiplier(self, multiplier: float) -> None: ...
    def get_exposure_multiplier(self) -> float: ...
    def set_exposure_sensitivity(self, sensitivity: float) -> None: ...
    def get_exposure_sensitivity(self) -> float: ...
    def set_auto_exposure_enabled(self, enabled: bool) -> None: ...
    def is_auto_exposure_enabled(self) -> bool: ...
    def set_auto_exposure_speed(self, exposure_speed: float) -> None: ...
    def get_auto_exposure_speed(self) -> float: ...
    def set_auto_exposure_scale(self, exposure_grey: float) -> None: ...
    def get_auto_exposure_scale(self) -> float: ...
    
class CameraAttributesPhysical(CameraAttributes):
    frustum_focus_distance: float
    frustum_focal_length: float
    frustum_near: float
    frustum_far: float
    exposure_aperture: float
    exposure_shutter_speed: float
    auto_exposure_min_exposure_value: float
    auto_exposure_max_exposure_value: float
    def set_aperture(self, aperture: float) -> None: ...
    def get_aperture(self) -> float: ...
    def set_shutter_speed(self, shutter_speed: float) -> None: ...
    def get_shutter_speed(self) -> float: ...
    def set_focal_length(self, focal_length: float) -> None: ...
    def get_focal_length(self) -> float: ...
    def set_focus_distance(self, focus_distance: float) -> None: ...
    def get_focus_distance(self) -> float: ...
    def set_near(self, near: float) -> None: ...
    def get_near(self) -> float: ...
    def set_far(self, far: float) -> None: ...
    def get_far(self) -> float: ...
    def get_fov(self) -> float: ...
    def set_auto_exposure_max_exposure_value(self, exposure_value_max: float) -> None: ...
    def get_auto_exposure_max_exposure_value(self) -> float: ...
    def set_auto_exposure_min_exposure_value(self, exposure_value_min: float) -> None: ...
    def get_auto_exposure_min_exposure_value(self) -> float: ...
    
class CameraAttributesPractical(CameraAttributes):
    dof_blur_far_enabled: bool
    dof_blur_far_distance: float
    dof_blur_far_transition: float
    dof_blur_near_enabled: bool
    dof_blur_near_distance: float
    dof_blur_near_transition: float
    dof_blur_amount: float
    auto_exposure_min_sensitivity: float
    auto_exposure_max_sensitivity: float
    def set_dof_blur_far_enabled(self, enabled: bool) -> None: ...
    def is_dof_blur_far_enabled(self) -> bool: ...
    def set_dof_blur_far_distance(self, distance: float) -> None: ...
    def get_dof_blur_far_distance(self) -> float: ...
    def set_dof_blur_far_transition(self, distance: float) -> None: ...
    def get_dof_blur_far_transition(self) -> float: ...
    def set_dof_blur_near_enabled(self, enabled: bool) -> None: ...
    def is_dof_blur_near_enabled(self) -> bool: ...
    def set_dof_blur_near_distance(self, distance: float) -> None: ...
    def get_dof_blur_near_distance(self) -> float: ...
    def set_dof_blur_near_transition(self, distance: float) -> None: ...
    def get_dof_blur_near_transition(self) -> float: ...
    def set_dof_blur_amount(self, amount: float) -> None: ...
    def get_dof_blur_amount(self) -> float: ...
    def set_auto_exposure_max_sensitivity(self, max_sensitivity: float) -> None: ...
    def get_auto_exposure_max_sensitivity(self) -> float: ...
    def set_auto_exposure_min_sensitivity(self, min_sensitivity: float) -> None: ...
    def get_auto_exposure_min_sensitivity(self) -> float: ...
    
class CameraFeed(RefCounted):
    feed_is_active: bool
    feed_transform: 'Transform2D'
    formats: 'Array'
    frame_changed: Signal[Callable[[], None]]  # frame_changed()
    format_changed: Signal[Callable[[], None]]  # format_changed()
    def _activate_feed(self) -> bool: ...
    def _deactivate_feed(self) -> None: ...
    def get_id(self) -> int: ...
    def is_active(self) -> bool: ...
    def set_active(self, active: bool) -> None: ...
    def get_name(self) -> 'String': ...
    def set_name(self, name: 'String') -> None: ...
    def get_position(self) -> 'CameraFeed_FeedPosition': ...
    def set_position(self, position: 'CameraFeed_FeedPosition') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def set_rgb_image(self, rgb_image: 'Image') -> None: ...
    def set_ycbcr_image(self, ycbcr_image: 'Image') -> None: ...
    def set_external(self, width: int, height: int) -> None: ...
    def get_texture_tex_id(self, feed_image_type: 'CameraServer_FeedImage') -> int: ...
    def get_datatype(self) -> 'CameraFeed_FeedDataType': ...
    def get_formats(self) -> 'Array': ...
    def set_format(self, index: int, parameters: 'Dictionary') -> bool: ...
    
class CameraFeed_FeedDataType(Enum):
    FEED_NOIMAGE = 0
    FEED_RGB = 1
    FEED_YCBCR = 2
    FEED_YCBCR_SEP = 3
    FEED_EXTERNAL = 4

class CameraFeed_FeedPosition(Enum):
    FEED_UNSPECIFIED = 0
    FEED_FRONT = 1
    FEED_BACK = 2

class CameraServer(Object):
    camera_feed_added: Signal[Callable[['int'], None]]  # camera_feed_added(id: int)
    camera_feed_removed: Signal[Callable[['int'], None]]  # camera_feed_removed(id: int)
    def get_feed(self, index: int) -> 'CameraFeed': ...
    def get_feed_count(self) -> int: ...
    def feeds(self) -> 'list[CameraFeed]': ...
    def add_feed(self, feed: 'CameraFeed') -> None: ...
    def remove_feed(self, feed: 'CameraFeed') -> None: ...
    
class CameraServer_FeedImage(Enum):
    FEED_RGBA_IMAGE = 0
    FEED_YCBCR_IMAGE = 0
    FEED_Y_IMAGE = 0
    FEED_CBCR_IMAGE = 1

class CameraTexture(Texture2D):
    camera_feed_id: int
    which_feed: int
    camera_is_active: bool
    def set_camera_feed_id(self, feed_id: int) -> None: ...
    def get_camera_feed_id(self) -> int: ...
    def set_which_feed(self, which_feed: 'CameraServer_FeedImage') -> None: ...
    def get_which_feed(self) -> 'CameraServer_FeedImage': ...
    def set_camera_active(self, active: bool) -> None: ...
    def get_camera_active(self) -> bool: ...
    
class CanvasGroup(Node2D):
    fit_margin: float
    clear_margin: float
    use_mipmaps: bool
    def set_fit_margin(self, fit_margin: float) -> None: ...
    def get_fit_margin(self) -> float: ...
    def set_clear_margin(self, clear_margin: float) -> None: ...
    def get_clear_margin(self) -> float: ...
    def set_use_mipmaps(self, use_mipmaps: bool) -> None: ...
    def is_using_mipmaps(self) -> bool: ...
    
class CanvasItem(Node):
    visible: bool
    modulate: 'Color'
    self_modulate: 'Color'
    show_behind_parent: bool
    top_level: bool
    clip_children: int
    light_mask: int
    visibility_layer: int
    z_index: int
    z_as_relative: bool
    y_sort_enabled: bool
    texture_filter: int
    texture_repeat: int
    material: 'CanvasItemMaterial'
    use_parent_material: bool
    NOTIFICATION_TRANSFORM_CHANGED = 2000
    NOTIFICATION_LOCAL_TRANSFORM_CHANGED = 35
    NOTIFICATION_DRAW = 30
    NOTIFICATION_VISIBILITY_CHANGED = 31
    NOTIFICATION_ENTER_CANVAS = 32
    NOTIFICATION_EXIT_CANVAS = 33
    NOTIFICATION_WORLD_2D_CHANGED = 36
    
    draw: Signal[Callable[[], None]]  # draw()
    visibility_changed: Signal[Callable[[], None]]  # visibility_changed()
    hidden: Signal[Callable[[], None]]  # hidden()
    item_rect_changed: Signal[Callable[[], None]]  # item_rect_changed()
    def _draw(self) -> None: ...
    def get_canvas_item(self) -> 'RID': ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def is_visible_in_tree(self) -> bool: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def queue_redraw(self) -> None: ...
    def move_to_front(self) -> None: ...
    def set_as_top_level(self, enable: bool) -> None: ...
    def is_set_as_top_level(self) -> bool: ...
    def set_light_mask(self, light_mask: int) -> None: ...
    def get_light_mask(self) -> int: ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_self_modulate(self, self_modulate: 'Color') -> None: ...
    def get_self_modulate(self) -> 'Color': ...
    def set_z_index(self, z_index: int) -> None: ...
    def get_z_index(self) -> int: ...
    def set_z_as_relative(self, enable: bool) -> None: ...
    def is_z_relative(self) -> bool: ...
    def set_y_sort_enabled(self, enabled: bool) -> None: ...
    def is_y_sort_enabled(self) -> bool: ...
    def set_draw_behind_parent(self, enable: bool) -> None: ...
    def is_draw_behind_parent_enabled(self) -> bool: ...
    def draw_line(self, from_: 'Vector2', to: 'Vector2', color: 'Color', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_dashed_line(self, from_: 'Vector2', to: 'Vector2', color: 'Color', width: float = default('''-1.0'''), dash: float = default('''2.0'''), aligned: bool = default('''true'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_polyline(self, points: 'PackedVector2Array', color: 'Color', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_polyline_colors(self, points: 'PackedVector2Array', colors: 'PackedColorArray', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_arc(self, center: 'Vector2', radius: float, start_angle: float, end_angle: float, point_count: int, color: 'Color', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_multiline(self, points: 'PackedVector2Array', color: 'Color', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_multiline_colors(self, points: 'PackedVector2Array', colors: 'PackedColorArray', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_rect(self, rect: 'Rect2', color: 'Color', filled: bool = default('''true'''), width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_circle(self, position: 'Vector2', radius: float, color: 'Color', filled: bool = default('''true'''), width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def draw_texture(self, texture: 'Texture2D', position: 'Vector2', modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_texture_rect(self, texture: 'Texture2D', rect: 'Rect2', tile: bool, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false''')) -> None: ...
    def draw_texture_rect_region(self, texture: 'Texture2D', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false'''), clip_uv: bool = default('''true''')) -> None: ...
    def draw_msdf_texture_rect_region(self, texture: 'Texture2D', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), outline: float = default('''0.0'''), pixel_range: float = default('''4.0'''), scale: float = default('''1.0''')) -> None: ...
    def draw_lcd_texture_rect_region(self, texture: 'Texture2D', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_style_box(self, style_box: 'StyleBox', rect: 'Rect2') -> None: ...
    def draw_primitive(self, points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array', texture: 'Texture2D' = default('''null''')) -> None: ...
    def draw_polygon(self, points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), texture: 'Texture2D' = default('''null''')) -> None: ...
    def draw_colored_polygon(self, points: 'PackedVector2Array', color: 'Color', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), texture: 'Texture2D' = default('''null''')) -> None: ...
    def draw_string(self, font: 'Font', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_multiline_string(self, font: 'Font', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), max_lines: int = default('''-1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer_LineBreakFlag' = default('''3'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_string_outline(self, font: 'Font', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), size: int = default('''1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_multiline_string_outline(self, font: 'Font', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), max_lines: int = default('''-1'''), size: int = default('''1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer_LineBreakFlag' = default('''3'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_char(self, font: 'Font', pos: 'Vector2', char: 'String', font_size: int = default('''16'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_char_outline(self, font: 'Font', pos: 'Vector2', char: 'String', font_size: int = default('''16'''), size: int = default('''-1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_mesh(self, mesh: 'Mesh', texture: 'Texture2D', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_multimesh(self, multimesh: 'MultiMesh', texture: 'Texture2D') -> None: ...
    def draw_set_transform(self, position: 'Vector2', rotation: float = default('''0.0'''), scale: 'Vector2' = default('''Vector2(1, 1)''')) -> None: ...
    def draw_set_transform_matrix(self, xform: 'Transform2D') -> None: ...
    def draw_animation_slice(self, animation_length: float, slice_begin: float, slice_end: float, offset: float = default('''0.0''')) -> None: ...
    def draw_end_animation(self) -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def get_global_transform(self) -> 'Transform2D': ...
    def get_global_transform_with_canvas(self) -> 'Transform2D': ...
    def get_viewport_transform(self) -> 'Transform2D': ...
    def get_viewport_rect(self) -> 'Rect2': ...
    def get_canvas_transform(self) -> 'Transform2D': ...
    def get_screen_transform(self) -> 'Transform2D': ...
    def get_local_mouse_position(self) -> 'Vector2': ...
    def get_global_mouse_position(self) -> 'Vector2': ...
    def get_canvas(self) -> 'RID': ...
    def get_canvas_layer_node(self) -> 'CanvasLayer': ...
    def get_world_2d(self) -> 'World2D': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_instance_shader_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def get_instance_shader_parameter(self, name: 'StringName') -> 'Variant': ...
    def set_use_parent_material(self, enable: bool) -> None: ...
    def get_use_parent_material(self) -> bool: ...
    def set_notify_local_transform(self, enable: bool) -> None: ...
    def is_local_transform_notification_enabled(self) -> bool: ...
    def set_notify_transform(self, enable: bool) -> None: ...
    def is_transform_notification_enabled(self) -> bool: ...
    def force_update_transform(self) -> None: ...
    def make_canvas_position_local(self, viewport_point: 'Vector2') -> 'Vector2': ...
    def make_input_local(self, event: 'InputEvent') -> 'InputEvent': ...
    def set_visibility_layer(self, layer: int) -> None: ...
    def get_visibility_layer(self) -> int: ...
    def set_visibility_layer_bit(self, layer: int, enabled: bool) -> None: ...
    def get_visibility_layer_bit(self, layer: int) -> bool: ...
    def set_texture_filter(self, mode: 'CanvasItem_TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'CanvasItem_TextureFilter': ...
    def set_texture_repeat(self, mode: 'CanvasItem_TextureRepeat') -> None: ...
    def get_texture_repeat(self) -> 'CanvasItem_TextureRepeat': ...
    def set_clip_children_mode(self, mode: 'CanvasItem_ClipChildrenMode') -> None: ...
    def get_clip_children_mode(self) -> 'CanvasItem_ClipChildrenMode': ...
    
class CanvasItem_TextureFilter(Enum):
    TEXTURE_FILTER_PARENT_NODE = 0
    TEXTURE_FILTER_NEAREST = 1
    TEXTURE_FILTER_LINEAR = 2
    TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 3
    TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 4
    TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC = 5
    TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC = 6
    TEXTURE_FILTER_MAX = 7

class CanvasItem_TextureRepeat(Enum):
    TEXTURE_REPEAT_PARENT_NODE = 0
    TEXTURE_REPEAT_DISABLED = 1
    TEXTURE_REPEAT_ENABLED = 2
    TEXTURE_REPEAT_MIRROR = 3
    TEXTURE_REPEAT_MAX = 4

class CanvasItem_ClipChildrenMode(Enum):
    CLIP_CHILDREN_DISABLED = 0
    CLIP_CHILDREN_ONLY = 1
    CLIP_CHILDREN_AND_DRAW = 2
    CLIP_CHILDREN_MAX = 3

class CanvasItemMaterial(Material):
    blend_mode: int
    light_mode: int
    particles_animation: bool
    particles_anim_h_frames: int
    particles_anim_v_frames: int
    particles_anim_loop: bool
    def set_blend_mode(self, blend_mode: 'CanvasItemMaterial_BlendMode') -> None: ...
    def get_blend_mode(self) -> 'CanvasItemMaterial_BlendMode': ...
    def set_light_mode(self, light_mode: 'CanvasItemMaterial_LightMode') -> None: ...
    def get_light_mode(self) -> 'CanvasItemMaterial_LightMode': ...
    def set_particles_animation(self, particles_anim: bool) -> None: ...
    def get_particles_animation(self) -> bool: ...
    def set_particles_anim_h_frames(self, frames: int) -> None: ...
    def get_particles_anim_h_frames(self) -> int: ...
    def set_particles_anim_v_frames(self, frames: int) -> None: ...
    def get_particles_anim_v_frames(self) -> int: ...
    def set_particles_anim_loop(self, loop: bool) -> None: ...
    def get_particles_anim_loop(self) -> bool: ...
    
class CanvasItemMaterial_BlendMode(Enum):
    BLEND_MODE_MIX = 0
    BLEND_MODE_ADD = 1
    BLEND_MODE_SUB = 2
    BLEND_MODE_MUL = 3
    BLEND_MODE_PREMULT_ALPHA = 4

class CanvasItemMaterial_LightMode(Enum):
    LIGHT_MODE_NORMAL = 0
    LIGHT_MODE_UNSHADED = 1
    LIGHT_MODE_LIGHT_ONLY = 2

class CanvasLayer(Node):
    layer: int
    visible: bool
    offset: 'Vector2'
    rotation: float
    scale: 'Vector2'
    transform: 'Transform2D'
    custom_viewport: 'Viewport'
    follow_viewport_enabled: bool
    follow_viewport_scale: float
    visibility_changed: Signal[Callable[[], None]]  # visibility_changed()
    def set_layer(self, layer: int) -> None: ...
    def get_layer(self) -> int: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def get_final_transform(self) -> 'Transform2D': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_rotation(self, radians: float) -> None: ...
    def get_rotation(self) -> float: ...
    def set_scale(self, scale: 'Vector2') -> None: ...
    def get_scale(self) -> 'Vector2': ...
    def set_follow_viewport(self, enable: bool) -> None: ...
    def is_following_viewport(self) -> bool: ...
    def set_follow_viewport_scale(self, scale: float) -> None: ...
    def get_follow_viewport_scale(self) -> float: ...
    def set_custom_viewport(self, viewport: 'Node') -> None: ...
    def get_custom_viewport(self) -> 'Node': ...
    def get_canvas(self) -> 'RID': ...
    
class CanvasModulate(Node2D):
    color: 'Color'
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    
class CanvasTexture(Texture2D):
    diffuse_texture: 'Texture2D'
    normal_texture: 'Texture2D'
    specular_texture: 'Texture2D'
    specular_color: 'Color'
    specular_shininess: float
    texture_filter: int
    texture_repeat: int
    def set_diffuse_texture(self, texture: 'Texture2D') -> None: ...
    def get_diffuse_texture(self) -> 'Texture2D': ...
    def set_normal_texture(self, texture: 'Texture2D') -> None: ...
    def get_normal_texture(self) -> 'Texture2D': ...
    def set_specular_texture(self, texture: 'Texture2D') -> None: ...
    def get_specular_texture(self) -> 'Texture2D': ...
    def set_specular_color(self, color: 'Color') -> None: ...
    def get_specular_color(self) -> 'Color': ...
    def set_specular_shininess(self, shininess: float) -> None: ...
    def get_specular_shininess(self) -> float: ...
    def set_texture_filter(self, filter: 'CanvasItem_TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'CanvasItem_TextureFilter': ...
    def set_texture_repeat(self, repeat: 'CanvasItem_TextureRepeat') -> None: ...
    def get_texture_repeat(self) -> 'CanvasItem_TextureRepeat': ...
    
class CapsuleMesh(PrimitiveMesh):
    radius: float
    height: float
    radial_segments: int
    rings: int
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_radial_segments(self, segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    
class CapsuleShape2D(Shape2D):
    radius: float
    height: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    
class CapsuleShape3D(Shape3D):
    radius: float
    height: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    
class CenterContainer(Container):
    use_top_left: bool
    def set_use_top_left(self, enable: bool) -> None: ...
    def is_using_top_left(self) -> bool: ...
    
class CharFXTransform(RefCounted):
    transform: 'Transform2D'
    range: 'Vector2i'
    elapsed_time: float
    visible: bool
    outline: bool
    offset: 'Vector2'
    color: 'Color'
    env: 'Dictionary'
    glyph_index: int
    glyph_count: int
    glyph_flags: int
    relative_index: int
    font: 'RID'
    def get_transform(self) -> 'Transform2D': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_range(self) -> 'Vector2i': ...
    def set_range(self, range: 'Vector2i') -> None: ...
    def get_elapsed_time(self) -> float: ...
    def set_elapsed_time(self, time: float) -> None: ...
    def is_visible(self) -> bool: ...
    def set_visibility(self, visibility: bool) -> None: ...
    def is_outline(self) -> bool: ...
    def set_outline(self, outline: bool) -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_environment(self) -> 'Dictionary': ...
    def set_environment(self, environment: 'Dictionary') -> None: ...
    def get_glyph_index(self) -> int: ...
    def set_glyph_index(self, glyph_index: int) -> None: ...
    def get_relative_index(self) -> int: ...
    def set_relative_index(self, relative_index: int) -> None: ...
    def get_glyph_count(self) -> int: ...
    def set_glyph_count(self, glyph_count: int) -> None: ...
    def get_glyph_flags(self) -> int: ...
    def set_glyph_flags(self, glyph_flags: int) -> None: ...
    def get_font(self) -> 'RID': ...
    def set_font(self, font: 'RID') -> None: ...
    
class CharacterBody2D(PhysicsBody2D):
    motion_mode: int
    up_direction: 'Vector2'
    velocity: 'Vector2'
    slide_on_ceiling: bool
    max_slides: int
    wall_min_slide_angle: float
    floor_stop_on_slope: bool
    floor_constant_speed: bool
    floor_block_on_wall: bool
    floor_max_angle: float
    floor_snap_length: float
    platform_on_leave: int
    platform_floor_layers: int
    platform_wall_layers: int
    safe_margin: float
    def move_and_slide(self) -> bool: ...
    def apply_floor_snap(self) -> None: ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_safe_margin(self, margin: float) -> None: ...
    def get_safe_margin(self) -> float: ...
    def is_floor_stop_on_slope_enabled(self) -> bool: ...
    def set_floor_stop_on_slope_enabled(self, enabled: bool) -> None: ...
    def set_floor_constant_speed_enabled(self, enabled: bool) -> None: ...
    def is_floor_constant_speed_enabled(self) -> bool: ...
    def set_floor_block_on_wall_enabled(self, enabled: bool) -> None: ...
    def is_floor_block_on_wall_enabled(self) -> bool: ...
    def set_slide_on_ceiling_enabled(self, enabled: bool) -> None: ...
    def is_slide_on_ceiling_enabled(self) -> bool: ...
    def set_platform_floor_layers(self, exclude_layer: int) -> None: ...
    def get_platform_floor_layers(self) -> int: ...
    def set_platform_wall_layers(self, exclude_layer: int) -> None: ...
    def get_platform_wall_layers(self) -> int: ...
    def get_max_slides(self) -> int: ...
    def set_max_slides(self, max_slides: int) -> None: ...
    def get_floor_max_angle(self) -> float: ...
    def set_floor_max_angle(self, radians: float) -> None: ...
    def get_floor_snap_length(self) -> float: ...
    def set_floor_snap_length(self, floor_snap_length: float) -> None: ...
    def get_wall_min_slide_angle(self) -> float: ...
    def set_wall_min_slide_angle(self, radians: float) -> None: ...
    def get_up_direction(self) -> 'Vector2': ...
    def set_up_direction(self, up_direction: 'Vector2') -> None: ...
    def set_motion_mode(self, mode: 'CharacterBody2D_MotionMode') -> None: ...
    def get_motion_mode(self) -> 'CharacterBody2D_MotionMode': ...
    def set_platform_on_leave(self, on_leave_apply_velocity: 'CharacterBody2D_PlatformOnLeave') -> None: ...
    def get_platform_on_leave(self) -> 'CharacterBody2D_PlatformOnLeave': ...
    def is_on_floor(self) -> bool: ...
    def is_on_floor_only(self) -> bool: ...
    def is_on_ceiling(self) -> bool: ...
    def is_on_ceiling_only(self) -> bool: ...
    def is_on_wall(self) -> bool: ...
    def is_on_wall_only(self) -> bool: ...
    def get_floor_normal(self) -> 'Vector2': ...
    def get_wall_normal(self) -> 'Vector2': ...
    def get_last_motion(self) -> 'Vector2': ...
    def get_position_delta(self) -> 'Vector2': ...
    def get_real_velocity(self) -> 'Vector2': ...
    def get_floor_angle(self, up_direction: 'Vector2' = default('''Vector2(0, -1)''')) -> float: ...
    def get_platform_velocity(self) -> 'Vector2': ...
    def get_slide_collision_count(self) -> int: ...
    def get_slide_collision(self, slide_idx: int) -> 'KinematicCollision2D': ...
    def get_last_slide_collision(self) -> 'KinematicCollision2D': ...
    
class CharacterBody2D_MotionMode(Enum):
    MOTION_MODE_GROUNDED = 0
    MOTION_MODE_FLOATING = 1

class CharacterBody2D_PlatformOnLeave(Enum):
    PLATFORM_ON_LEAVE_ADD_VELOCITY = 0
    PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY = 1
    PLATFORM_ON_LEAVE_DO_NOTHING = 2

class CharacterBody3D(PhysicsBody3D):
    motion_mode: int
    up_direction: 'Vector3'
    slide_on_ceiling: bool
    velocity: 'Vector3'
    max_slides: int
    wall_min_slide_angle: float
    floor_stop_on_slope: bool
    floor_constant_speed: bool
    floor_block_on_wall: bool
    floor_max_angle: float
    floor_snap_length: float
    platform_on_leave: int
    platform_floor_layers: int
    platform_wall_layers: int
    safe_margin: float
    def move_and_slide(self) -> bool: ...
    def apply_floor_snap(self) -> None: ...
    def set_velocity(self, velocity: 'Vector3') -> None: ...
    def get_velocity(self) -> 'Vector3': ...
    def set_safe_margin(self, margin: float) -> None: ...
    def get_safe_margin(self) -> float: ...
    def is_floor_stop_on_slope_enabled(self) -> bool: ...
    def set_floor_stop_on_slope_enabled(self, enabled: bool) -> None: ...
    def set_floor_constant_speed_enabled(self, enabled: bool) -> None: ...
    def is_floor_constant_speed_enabled(self) -> bool: ...
    def set_floor_block_on_wall_enabled(self, enabled: bool) -> None: ...
    def is_floor_block_on_wall_enabled(self) -> bool: ...
    def set_slide_on_ceiling_enabled(self, enabled: bool) -> None: ...
    def is_slide_on_ceiling_enabled(self) -> bool: ...
    def set_platform_floor_layers(self, exclude_layer: int) -> None: ...
    def get_platform_floor_layers(self) -> int: ...
    def set_platform_wall_layers(self, exclude_layer: int) -> None: ...
    def get_platform_wall_layers(self) -> int: ...
    def get_max_slides(self) -> int: ...
    def set_max_slides(self, max_slides: int) -> None: ...
    def get_floor_max_angle(self) -> float: ...
    def set_floor_max_angle(self, radians: float) -> None: ...
    def get_floor_snap_length(self) -> float: ...
    def set_floor_snap_length(self, floor_snap_length: float) -> None: ...
    def get_wall_min_slide_angle(self) -> float: ...
    def set_wall_min_slide_angle(self, radians: float) -> None: ...
    def get_up_direction(self) -> 'Vector3': ...
    def set_up_direction(self, up_direction: 'Vector3') -> None: ...
    def set_motion_mode(self, mode: 'CharacterBody3D_MotionMode') -> None: ...
    def get_motion_mode(self) -> 'CharacterBody3D_MotionMode': ...
    def set_platform_on_leave(self, on_leave_apply_velocity: 'CharacterBody3D_PlatformOnLeave') -> None: ...
    def get_platform_on_leave(self) -> 'CharacterBody3D_PlatformOnLeave': ...
    def is_on_floor(self) -> bool: ...
    def is_on_floor_only(self) -> bool: ...
    def is_on_ceiling(self) -> bool: ...
    def is_on_ceiling_only(self) -> bool: ...
    def is_on_wall(self) -> bool: ...
    def is_on_wall_only(self) -> bool: ...
    def get_floor_normal(self) -> 'Vector3': ...
    def get_wall_normal(self) -> 'Vector3': ...
    def get_last_motion(self) -> 'Vector3': ...
    def get_position_delta(self) -> 'Vector3': ...
    def get_real_velocity(self) -> 'Vector3': ...
    def get_floor_angle(self, up_direction: 'Vector3' = default('''Vector3(0, 1, 0)''')) -> float: ...
    def get_platform_velocity(self) -> 'Vector3': ...
    def get_platform_angular_velocity(self) -> 'Vector3': ...
    def get_slide_collision_count(self) -> int: ...
    def get_slide_collision(self, slide_idx: int) -> 'KinematicCollision3D': ...
    def get_last_slide_collision(self) -> 'KinematicCollision3D': ...
    
class CharacterBody3D_MotionMode(Enum):
    MOTION_MODE_GROUNDED = 0
    MOTION_MODE_FLOATING = 1

class CharacterBody3D_PlatformOnLeave(Enum):
    PLATFORM_ON_LEAVE_ADD_VELOCITY = 0
    PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY = 1
    PLATFORM_ON_LEAVE_DO_NOTHING = 2

class CheckBox(Button):
    pass
    
class CheckButton(Button):
    pass
    
class CircleShape2D(Shape2D):
    radius: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    
class ClassDB(Object):
    def get_class_list(self) -> 'PackedStringArray': ...
    def get_inheriters_from_class(self, class_: 'StringName') -> 'PackedStringArray': ...
    def get_parent_class(self, class_: 'StringName') -> 'StringName': ...
    def class_exists(self, class_: 'StringName') -> bool: ...
    def is_parent_class(self, class_: 'StringName', inherits: 'StringName') -> bool: ...
    def can_instantiate(self, class_: 'StringName') -> bool: ...
    def instantiate(self, class_: 'StringName') -> 'Variant': ...
    def class_get_api_type(self, class_: 'StringName') -> 'ClassDB_APIType': ...
    def class_has_signal(self, class_: 'StringName', signal: 'StringName') -> bool: ...
    def class_get_signal(self, class_: 'StringName', signal: 'StringName') -> 'Dictionary': ...
    def class_get_signal_list(self, class_: 'StringName', no_inheritance: bool = default('''false''')) -> 'list[Dictionary]': ...
    def class_get_property_list(self, class_: 'StringName', no_inheritance: bool = default('''false''')) -> 'list[Dictionary]': ...
    def class_get_property_getter(self, class_: 'StringName', property: 'StringName') -> 'StringName': ...
    def class_get_property_setter(self, class_: 'StringName', property: 'StringName') -> 'StringName': ...
    def class_get_property(self, object: 'Object', property: 'StringName') -> 'Variant': ...
    def class_set_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> 'Error': ...
    def class_get_property_default_value(self, class_: 'StringName', property: 'StringName') -> 'Variant': ...
    def class_has_method(self, class_: 'StringName', method: 'StringName', no_inheritance: bool = default('''false''')) -> bool: ...
    def class_get_method_argument_count(self, class_: 'StringName', method: 'StringName', no_inheritance: bool = default('''false''')) -> int: ...
    def class_get_method_list(self, class_: 'StringName', no_inheritance: bool = default('''false''')) -> 'list[Dictionary]': ...
    def class_call_static(self, class_: 'StringName', method: 'StringName', *arg) -> 'Variant': ...
    def class_get_integer_constant_list(self, class_: 'StringName', no_inheritance: bool = default('''false''')) -> 'PackedStringArray': ...
    def class_has_integer_constant(self, class_: 'StringName', name: 'StringName') -> bool: ...
    def class_get_integer_constant(self, class_: 'StringName', name: 'StringName') -> int: ...
    def class_has_enum(self, class_: 'StringName', name: 'StringName', no_inheritance: bool = default('''false''')) -> bool: ...
    def class_get_enum_list(self, class_: 'StringName', no_inheritance: bool = default('''false''')) -> 'PackedStringArray': ...
    def class_get_enum_constants(self, class_: 'StringName', enum: 'StringName', no_inheritance: bool = default('''false''')) -> 'PackedStringArray': ...
    def class_get_integer_constant_enum(self, class_: 'StringName', name: 'StringName', no_inheritance: bool = default('''false''')) -> 'StringName': ...
    def is_class_enum_bitfield(self, class_: 'StringName', enum: 'StringName', no_inheritance: bool = default('''false''')) -> bool: ...
    def is_class_enabled(self, class_: 'StringName') -> bool: ...
    
class ClassDB_APIType(Enum):
    API_CORE = 0
    API_EDITOR = 1
    API_EXTENSION = 2
    API_EDITOR_EXTENSION = 3
    API_NONE = 4

class CodeEdit(TextEdit):
    symbol_lookup_on_click: bool
    symbol_tooltip_on_hover: bool
    line_folding: bool
    line_length_guidelines: 'PackedInt32Array'
    gutters_draw_breakpoints_gutter: bool
    gutters_draw_bookmarks: bool
    gutters_draw_executing_lines: bool
    gutters_draw_line_numbers: bool
    gutters_zero_pad_line_numbers: bool
    gutters_draw_fold_gutter: bool
    delimiter_strings: 'PackedStringArray'
    delimiter_comments: 'PackedStringArray'
    code_completion_enabled: bool
    code_completion_prefixes: 'PackedStringArray'
    indent_size: int
    indent_use_spaces: bool
    indent_automatic: bool
    indent_automatic_prefixes: 'PackedStringArray'
    auto_brace_completion_enabled: bool
    auto_brace_completion_highlight_matching: bool
    auto_brace_completion_pairs: 'Dictionary'
    breakpoint_toggled: Signal[Callable[['int'], None]]  # breakpoint_toggled(line: int)
    code_completion_requested: Signal[Callable[[], None]]  # code_completion_requested()
    symbol_lookup: Signal[Callable[['String', 'int', 'int'], None]]  # symbol_lookup(symbol: 'String', line: int, column: int)
    symbol_validate: Signal[Callable[['String'], None]]  # symbol_validate(symbol: 'String')
    symbol_hovered: Signal[Callable[['String', 'int', 'int'], None]]  # symbol_hovered(symbol: 'String', line: int, column: int)
    def _confirm_code_completion(self, replace: bool) -> None: ...
    def _request_code_completion(self, force: bool) -> None: ...
    def _filter_code_completion_candidates(self, candidates: 'list[Dictionary]') -> 'list[Dictionary]': ...
    def set_indent_size(self, size: int) -> None: ...
    def get_indent_size(self) -> int: ...
    def set_indent_using_spaces(self, use_spaces: bool) -> None: ...
    def is_indent_using_spaces(self) -> bool: ...
    def set_auto_indent_enabled(self, enable: bool) -> None: ...
    def is_auto_indent_enabled(self) -> bool: ...
    def set_auto_indent_prefixes(self, prefixes: 'list[String]') -> None: ...
    def get_auto_indent_prefixes(self) -> 'list[String]': ...
    def do_indent(self) -> None: ...
    def indent_lines(self) -> None: ...
    def unindent_lines(self) -> None: ...
    def convert_indent(self, from_line: int = default('''-1'''), to_line: int = default('''-1''')) -> None: ...
    def set_auto_brace_completion_enabled(self, enable: bool) -> None: ...
    def is_auto_brace_completion_enabled(self) -> bool: ...
    def set_highlight_matching_braces_enabled(self, enable: bool) -> None: ...
    def is_highlight_matching_braces_enabled(self) -> bool: ...
    def add_auto_brace_completion_pair(self, start_key: 'String', end_key: 'String') -> None: ...
    def set_auto_brace_completion_pairs(self, pairs: 'Dictionary') -> None: ...
    def get_auto_brace_completion_pairs(self) -> 'Dictionary': ...
    def has_auto_brace_completion_open_key(self, open_key: 'String') -> bool: ...
    def has_auto_brace_completion_close_key(self, close_key: 'String') -> bool: ...
    def get_auto_brace_completion_close_key(self, open_key: 'String') -> 'String': ...
    def set_draw_breakpoints_gutter(self, enable: bool) -> None: ...
    def is_drawing_breakpoints_gutter(self) -> bool: ...
    def set_draw_bookmarks_gutter(self, enable: bool) -> None: ...
    def is_drawing_bookmarks_gutter(self) -> bool: ...
    def set_draw_executing_lines_gutter(self, enable: bool) -> None: ...
    def is_drawing_executing_lines_gutter(self) -> bool: ...
    def set_line_as_breakpoint(self, line: int, breakpointed: bool) -> None: ...
    def is_line_breakpointed(self, line: int) -> bool: ...
    def clear_breakpointed_lines(self) -> None: ...
    def get_breakpointed_lines(self) -> 'PackedInt32Array': ...
    def set_line_as_bookmarked(self, line: int, bookmarked: bool) -> None: ...
    def is_line_bookmarked(self, line: int) -> bool: ...
    def clear_bookmarked_lines(self) -> None: ...
    def get_bookmarked_lines(self) -> 'PackedInt32Array': ...
    def set_line_as_executing(self, line: int, executing: bool) -> None: ...
    def is_line_executing(self, line: int) -> bool: ...
    def clear_executing_lines(self) -> None: ...
    def get_executing_lines(self) -> 'PackedInt32Array': ...
    def set_draw_line_numbers(self, enable: bool) -> None: ...
    def is_draw_line_numbers_enabled(self) -> bool: ...
    def set_line_numbers_zero_padded(self, enable: bool) -> None: ...
    def is_line_numbers_zero_padded(self) -> bool: ...
    def set_draw_fold_gutter(self, enable: bool) -> None: ...
    def is_drawing_fold_gutter(self) -> bool: ...
    def set_line_folding_enabled(self, enabled: bool) -> None: ...
    def is_line_folding_enabled(self) -> bool: ...
    def can_fold_line(self, line: int) -> bool: ...
    def fold_line(self, line: int) -> None: ...
    def unfold_line(self, line: int) -> None: ...
    def fold_all_lines(self) -> None: ...
    def unfold_all_lines(self) -> None: ...
    def toggle_foldable_line(self, line: int) -> None: ...
    def toggle_foldable_lines_at_carets(self) -> None: ...
    def is_line_folded(self, line: int) -> bool: ...
    def get_folded_lines(self) -> 'list[int]': ...
    def create_code_region(self) -> None: ...
    def get_code_region_start_tag(self) -> 'String': ...
    def get_code_region_end_tag(self) -> 'String': ...
    def set_code_region_tags(self, start: 'String' = default('''"region"'''), end: 'String' = default('''"endregion"''')) -> None: ...
    def is_line_code_region_start(self, line: int) -> bool: ...
    def is_line_code_region_end(self, line: int) -> bool: ...
    def add_string_delimiter(self, start_key: 'String', end_key: 'String', line_only: bool = default('''false''')) -> None: ...
    def remove_string_delimiter(self, start_key: 'String') -> None: ...
    def has_string_delimiter(self, start_key: 'String') -> bool: ...
    def set_string_delimiters(self, string_delimiters: 'list[String]') -> None: ...
    def clear_string_delimiters(self) -> None: ...
    def get_string_delimiters(self) -> 'list[String]': ...
    def is_in_string(self, line: int, column: int = default('''-1''')) -> int: ...
    def add_comment_delimiter(self, start_key: 'String', end_key: 'String', line_only: bool = default('''false''')) -> None: ...
    def remove_comment_delimiter(self, start_key: 'String') -> None: ...
    def has_comment_delimiter(self, start_key: 'String') -> bool: ...
    def set_comment_delimiters(self, comment_delimiters: 'list[String]') -> None: ...
    def clear_comment_delimiters(self) -> None: ...
    def get_comment_delimiters(self) -> 'list[String]': ...
    def is_in_comment(self, line: int, column: int = default('''-1''')) -> int: ...
    def get_delimiter_start_key(self, delimiter_index: int) -> 'String': ...
    def get_delimiter_end_key(self, delimiter_index: int) -> 'String': ...
    def get_delimiter_start_position(self, line: int, column: int) -> 'Vector2': ...
    def get_delimiter_end_position(self, line: int, column: int) -> 'Vector2': ...
    def set_code_hint(self, code_hint: 'String') -> None: ...
    def set_code_hint_draw_below(self, draw_below: bool) -> None: ...
    def get_text_for_code_completion(self) -> 'String': ...
    def request_code_completion(self, force: bool = default('''false''')) -> None: ...
    def add_code_completion_option(self, type: 'CodeEdit_CodeCompletionKind', display_text: 'String', insert_text: 'String', text_color: 'Color' = default('''Color(1, 1, 1, 1)'''), icon: 'Resource' = default('''null'''), value: 'Variant' = default('''null'''), location: int = default('''1024''')) -> None: ...
    def update_code_completion_options(self, force: bool) -> None: ...
    def get_code_completion_options(self) -> 'list[Dictionary]': ...
    def get_code_completion_option(self, index: int) -> 'Dictionary': ...
    def get_code_completion_selected_index(self) -> int: ...
    def set_code_completion_selected_index(self, index: int) -> None: ...
    def confirm_code_completion(self, replace: bool = default('''false''')) -> None: ...
    def cancel_code_completion(self) -> None: ...
    def set_code_completion_enabled(self, enable: bool) -> None: ...
    def is_code_completion_enabled(self) -> bool: ...
    def set_code_completion_prefixes(self, prefixes: 'list[String]') -> None: ...
    def get_code_completion_prefixes(self) -> 'list[String]': ...
    def set_line_length_guidelines(self, guideline_columns: 'list[int]') -> None: ...
    def get_line_length_guidelines(self) -> 'list[int]': ...
    def set_symbol_lookup_on_click_enabled(self, enable: bool) -> None: ...
    def is_symbol_lookup_on_click_enabled(self) -> bool: ...
    def get_text_for_symbol_lookup(self) -> 'String': ...
    def get_text_with_cursor_char(self, line: int, column: int) -> 'String': ...
    def set_symbol_lookup_word_as_valid(self, valid: bool) -> None: ...
    def set_symbol_tooltip_on_hover_enabled(self, enable: bool) -> None: ...
    def is_symbol_tooltip_on_hover_enabled(self) -> bool: ...
    def move_lines_up(self) -> None: ...
    def move_lines_down(self) -> None: ...
    def delete_lines(self) -> None: ...
    def duplicate_selection(self) -> None: ...
    def duplicate_lines(self) -> None: ...
    
class CodeEdit_CodeCompletionKind(Enum):
    KIND_CLASS = 0
    KIND_FUNCTION = 1
    KIND_SIGNAL = 2
    KIND_VARIABLE = 3
    KIND_MEMBER = 4
    KIND_ENUM = 5
    KIND_CONSTANT = 6
    KIND_NODE_PATH = 7
    KIND_FILE_PATH = 8
    KIND_PLAIN_TEXT = 9

class CodeEdit_CodeCompletionLocation(Enum):
    LOCATION_LOCAL = 0
    LOCATION_PARENT_MASK = 256
    LOCATION_OTHER_USER_CODE = 512
    LOCATION_OTHER = 1024

class CodeHighlighter(SyntaxHighlighter):
    number_color: 'Color'
    symbol_color: 'Color'
    function_color: 'Color'
    member_variable_color: 'Color'
    keyword_colors: 'Dictionary'
    member_keyword_colors: 'Dictionary'
    color_regions: 'Dictionary'
    def add_keyword_color(self, keyword: 'String', color: 'Color') -> None: ...
    def remove_keyword_color(self, keyword: 'String') -> None: ...
    def has_keyword_color(self, keyword: 'String') -> bool: ...
    def get_keyword_color(self, keyword: 'String') -> 'Color': ...
    def set_keyword_colors(self, keywords: 'Dictionary') -> None: ...
    def clear_keyword_colors(self) -> None: ...
    def get_keyword_colors(self) -> 'Dictionary': ...
    def add_member_keyword_color(self, member_keyword: 'String', color: 'Color') -> None: ...
    def remove_member_keyword_color(self, member_keyword: 'String') -> None: ...
    def has_member_keyword_color(self, member_keyword: 'String') -> bool: ...
    def get_member_keyword_color(self, member_keyword: 'String') -> 'Color': ...
    def set_member_keyword_colors(self, member_keyword: 'Dictionary') -> None: ...
    def clear_member_keyword_colors(self) -> None: ...
    def get_member_keyword_colors(self) -> 'Dictionary': ...
    def add_color_region(self, start_key: 'String', end_key: 'String', color: 'Color', line_only: bool = default('''false''')) -> None: ...
    def remove_color_region(self, start_key: 'String') -> None: ...
    def has_color_region(self, start_key: 'String') -> bool: ...
    def set_color_regions(self, color_regions: 'Dictionary') -> None: ...
    def clear_color_regions(self) -> None: ...
    def get_color_regions(self) -> 'Dictionary': ...
    def set_function_color(self, color: 'Color') -> None: ...
    def get_function_color(self) -> 'Color': ...
    def set_number_color(self, color: 'Color') -> None: ...
    def get_number_color(self) -> 'Color': ...
    def set_symbol_color(self, color: 'Color') -> None: ...
    def get_symbol_color(self) -> 'Color': ...
    def set_member_variable_color(self, color: 'Color') -> None: ...
    def get_member_variable_color(self) -> 'Color': ...
    
class CollisionObject2D(Node2D):
    disable_mode: int
    collision_layer: int
    collision_mask: int
    collision_priority: float
    input_pickable: bool
    input_event: Signal[Callable[['Node', 'InputEvent', 'int'], None]]  # input_event(viewport: 'Node', event: 'InputEvent', shape_idx: int)
    mouse_entered: Signal[Callable[[], None]]  # mouse_entered()
    mouse_exited: Signal[Callable[[], None]]  # mouse_exited()
    mouse_shape_entered: Signal[Callable[['int'], None]]  # mouse_shape_entered(shape_idx: int)
    mouse_shape_exited: Signal[Callable[['int'], None]]  # mouse_shape_exited(shape_idx: int)
    def _input_event(self, viewport: 'Viewport', event: 'InputEvent', shape_idx: int) -> None: ...
    def _mouse_enter(self) -> None: ...
    def _mouse_exit(self) -> None: ...
    def _mouse_shape_enter(self, shape_idx: int) -> None: ...
    def _mouse_shape_exit(self, shape_idx: int) -> None: ...
    def get_rid(self) -> 'RID': ...
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_disable_mode(self, mode: 'CollisionObject2D_DisableMode') -> None: ...
    def get_disable_mode(self) -> 'CollisionObject2D_DisableMode': ...
    def set_pickable(self, enabled: bool) -> None: ...
    def is_pickable(self) -> bool: ...
    def create_shape_owner(self, owner: 'Object') -> int: ...
    def remove_shape_owner(self, owner_id: int) -> None: ...
    def get_shape_owners(self) -> 'PackedInt32Array': ...
    def shape_owner_set_transform(self, owner_id: int, transform: 'Transform2D') -> None: ...
    def shape_owner_get_transform(self, owner_id: int) -> 'Transform2D': ...
    def shape_owner_get_owner(self, owner_id: int) -> 'Object': ...
    def shape_owner_set_disabled(self, owner_id: int, disabled: bool) -> None: ...
    def is_shape_owner_disabled(self, owner_id: int) -> bool: ...
    def shape_owner_set_one_way_collision(self, owner_id: int, enable: bool) -> None: ...
    def is_shape_owner_one_way_collision_enabled(self, owner_id: int) -> bool: ...
    def shape_owner_set_one_way_collision_margin(self, owner_id: int, margin: float) -> None: ...
    def get_shape_owner_one_way_collision_margin(self, owner_id: int) -> float: ...
    def shape_owner_add_shape(self, owner_id: int, shape: 'Shape2D') -> None: ...
    def shape_owner_get_shape_count(self, owner_id: int) -> int: ...
    def shape_owner_get_shape(self, owner_id: int, shape_id: int) -> 'Shape2D': ...
    def shape_owner_get_shape_index(self, owner_id: int, shape_id: int) -> int: ...
    def shape_owner_remove_shape(self, owner_id: int, shape_id: int) -> None: ...
    def shape_owner_clear_shapes(self, owner_id: int) -> None: ...
    def shape_find_owner(self, shape_index: int) -> int: ...
    
class CollisionObject2D_DisableMode(Enum):
    DISABLE_MODE_REMOVE = 0
    DISABLE_MODE_MAKE_STATIC = 1
    DISABLE_MODE_KEEP_ACTIVE = 2

class CollisionObject3D(Node3D):
    disable_mode: int
    collision_layer: int
    collision_mask: int
    collision_priority: float
    input_ray_pickable: bool
    input_capture_on_drag: bool
    input_event: Signal[Callable[['Node', 'InputEvent', 'Vector3', 'Vector3', 'int'], None]]  # input_event(camera: 'Node', event: 'InputEvent', event_position: 'Vector3', normal: 'Vector3', shape_idx: int)
    mouse_entered: Signal[Callable[[], None]]  # mouse_entered()
    mouse_exited: Signal[Callable[[], None]]  # mouse_exited()
    def _input_event(self, camera: 'Camera3D', event: 'InputEvent', event_position: 'Vector3', normal: 'Vector3', shape_idx: int) -> None: ...
    def _mouse_enter(self) -> None: ...
    def _mouse_exit(self) -> None: ...
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_disable_mode(self, mode: 'CollisionObject3D_DisableMode') -> None: ...
    def get_disable_mode(self) -> 'CollisionObject3D_DisableMode': ...
    def set_ray_pickable(self, ray_pickable: bool) -> None: ...
    def is_ray_pickable(self) -> bool: ...
    def set_capture_input_on_drag(self, enable: bool) -> None: ...
    def get_capture_input_on_drag(self) -> bool: ...
    def get_rid(self) -> 'RID': ...
    def create_shape_owner(self, owner: 'Object') -> int: ...
    def remove_shape_owner(self, owner_id: int) -> None: ...
    def get_shape_owners(self) -> 'PackedInt32Array': ...
    def shape_owner_set_transform(self, owner_id: int, transform: 'Transform3D') -> None: ...
    def shape_owner_get_transform(self, owner_id: int) -> 'Transform3D': ...
    def shape_owner_get_owner(self, owner_id: int) -> 'Object': ...
    def shape_owner_set_disabled(self, owner_id: int, disabled: bool) -> None: ...
    def is_shape_owner_disabled(self, owner_id: int) -> bool: ...
    def shape_owner_add_shape(self, owner_id: int, shape: 'Shape3D') -> None: ...
    def shape_owner_get_shape_count(self, owner_id: int) -> int: ...
    def shape_owner_get_shape(self, owner_id: int, shape_id: int) -> 'Shape3D': ...
    def shape_owner_get_shape_index(self, owner_id: int, shape_id: int) -> int: ...
    def shape_owner_remove_shape(self, owner_id: int, shape_id: int) -> None: ...
    def shape_owner_clear_shapes(self, owner_id: int) -> None: ...
    def shape_find_owner(self, shape_index: int) -> int: ...
    
class CollisionObject3D_DisableMode(Enum):
    DISABLE_MODE_REMOVE = 0
    DISABLE_MODE_MAKE_STATIC = 1
    DISABLE_MODE_KEEP_ACTIVE = 2

class CollisionPolygon2D(Node2D):
    build_mode: int
    polygon: 'PackedVector2Array'
    disabled: bool
    one_way_collision: bool
    one_way_collision_margin: float
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_build_mode(self, build_mode: 'CollisionPolygon2D_BuildMode') -> None: ...
    def get_build_mode(self) -> 'CollisionPolygon2D_BuildMode': ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_one_way_collision(self, enabled: bool) -> None: ...
    def is_one_way_collision_enabled(self) -> bool: ...
    def set_one_way_collision_margin(self, margin: float) -> None: ...
    def get_one_way_collision_margin(self) -> float: ...
    
class CollisionPolygon2D_BuildMode(Enum):
    BUILD_SOLIDS = 0
    BUILD_SEGMENTS = 1

class CollisionPolygon3D(Node3D):
    depth: float
    disabled: bool
    polygon: 'PackedVector2Array'
    margin: float
    debug_color: 'Color'
    debug_fill: bool
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_debug_color(self, color: 'Color') -> None: ...
    def get_debug_color(self) -> 'Color': ...
    def set_enable_debug_fill(self, enable: bool) -> None: ...
    def get_enable_debug_fill(self) -> bool: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    
class CollisionShape2D(Node2D):
    shape: 'Shape2D'
    disabled: bool
    one_way_collision: bool
    one_way_collision_margin: float
    debug_color: 'Color'
    def set_shape(self, shape: 'Shape2D') -> None: ...
    def get_shape(self) -> 'Shape2D': ...
    def set_disabled(self, disabled: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def set_one_way_collision(self, enabled: bool) -> None: ...
    def is_one_way_collision_enabled(self) -> bool: ...
    def set_one_way_collision_margin(self, margin: float) -> None: ...
    def get_one_way_collision_margin(self) -> float: ...
    def set_debug_color(self, color: 'Color') -> None: ...
    def get_debug_color(self) -> 'Color': ...
    
class CollisionShape3D(Node3D):
    shape: 'Shape3D'
    disabled: bool
    debug_color: 'Color'
    debug_fill: bool
    def resource_changed(self, resource: 'Resource') -> None: ...
    def set_shape(self, shape: 'Shape3D') -> None: ...
    def get_shape(self) -> 'Shape3D': ...
    def set_disabled(self, enable: bool) -> None: ...
    def is_disabled(self) -> bool: ...
    def make_convex_from_siblings(self) -> None: ...
    def set_debug_color(self, color: 'Color') -> None: ...
    def get_debug_color(self) -> 'Color': ...
    def set_enable_debug_fill(self, enable: bool) -> None: ...
    def get_enable_debug_fill(self) -> bool: ...
    
class ColorPalette(Resource):
    colors: 'PackedColorArray'
    def set_colors(self, colors: 'PackedColorArray') -> None: ...
    def get_colors(self) -> 'PackedColorArray': ...
    
class ColorPicker(VBoxContainer):
    color: 'Color'
    edit_alpha: bool
    color_mode: int
    deferred_mode: bool
    picker_shape: int
    can_add_swatches: bool
    sampler_visible: bool
    color_modes_visible: bool
    sliders_visible: bool
    hex_visible: bool
    presets_visible: bool
    color_changed: Signal[Callable[['Color'], None]]  # color_changed(color: 'Color')
    preset_added: Signal[Callable[['Color'], None]]  # preset_added(color: 'Color')
    preset_removed: Signal[Callable[['Color'], None]]  # preset_removed(color: 'Color')
    def set_pick_color(self, color: 'Color') -> None: ...
    def get_pick_color(self) -> 'Color': ...
    def set_deferred_mode(self, mode: bool) -> None: ...
    def is_deferred_mode(self) -> bool: ...
    def set_color_mode(self, color_mode: 'ColorPicker_ColorModeType') -> None: ...
    def get_color_mode(self) -> 'ColorPicker_ColorModeType': ...
    def set_edit_alpha(self, show: bool) -> None: ...
    def is_editing_alpha(self) -> bool: ...
    def set_can_add_swatches(self, enabled: bool) -> None: ...
    def are_swatches_enabled(self) -> bool: ...
    def set_presets_visible(self, visible: bool) -> None: ...
    def are_presets_visible(self) -> bool: ...
    def set_modes_visible(self, visible: bool) -> None: ...
    def are_modes_visible(self) -> bool: ...
    def set_sampler_visible(self, visible: bool) -> None: ...
    def is_sampler_visible(self) -> bool: ...
    def set_sliders_visible(self, visible: bool) -> None: ...
    def are_sliders_visible(self) -> bool: ...
    def set_hex_visible(self, visible: bool) -> None: ...
    def is_hex_visible(self) -> bool: ...
    def add_preset(self, color: 'Color') -> None: ...
    def erase_preset(self, color: 'Color') -> None: ...
    def get_presets(self) -> 'PackedColorArray': ...
    def add_recent_preset(self, color: 'Color') -> None: ...
    def erase_recent_preset(self, color: 'Color') -> None: ...
    def get_recent_presets(self) -> 'PackedColorArray': ...
    def set_picker_shape(self, shape: 'ColorPicker_PickerShapeType') -> None: ...
    def get_picker_shape(self) -> 'ColorPicker_PickerShapeType': ...
    
class ColorPicker_ColorModeType(Enum):
    MODE_RGB = 0
    MODE_HSV = 1
    MODE_RAW = 2
    MODE_OKHSL = 3

class ColorPicker_PickerShapeType(Enum):
    SHAPE_HSV_RECTANGLE = 0
    SHAPE_HSV_WHEEL = 1
    SHAPE_VHS_CIRCLE = 2
    SHAPE_OKHSL_CIRCLE = 3
    SHAPE_NONE = 4

class ColorPickerButton(Button):
    color: 'Color'
    edit_alpha: bool
    color_changed: Signal[Callable[['Color'], None]]  # color_changed(color: 'Color')
    popup_closed: Signal[Callable[[], None]]  # popup_closed()
    picker_created: Signal[Callable[[], None]]  # picker_created()
    def set_pick_color(self, color: 'Color') -> None: ...
    def get_pick_color(self) -> 'Color': ...
    def get_picker(self) -> 'ColorPicker': ...
    def get_popup(self) -> 'PopupPanel': ...
    def set_edit_alpha(self, show: bool) -> None: ...
    def is_editing_alpha(self) -> bool: ...
    
class ColorRect(Control):
    color: 'Color'
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    
class Compositor(Resource):
    compositor_effects: 'list[24/17:CompositorEffect]'
    def set_compositor_effects(self, compositor_effects: 'list[CompositorEffect]') -> None: ...
    def get_compositor_effects(self) -> 'list[CompositorEffect]': ...
    
class CompositorEffect(Resource):
    enabled: bool
    effect_callback_type: int
    access_resolved_color: bool
    access_resolved_depth: bool
    needs_motion_vectors: bool
    needs_normal_roughness: bool
    needs_separate_specular: bool
    def _render_callback(self, effect_callback_type: int, render_data: 'RenderData') -> None: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def get_enabled(self) -> bool: ...
    def set_effect_callback_type(self, effect_callback_type: 'CompositorEffect_EffectCallbackType') -> None: ...
    def get_effect_callback_type(self) -> 'CompositorEffect_EffectCallbackType': ...
    def set_access_resolved_color(self, enable: bool) -> None: ...
    def get_access_resolved_color(self) -> bool: ...
    def set_access_resolved_depth(self, enable: bool) -> None: ...
    def get_access_resolved_depth(self) -> bool: ...
    def set_needs_motion_vectors(self, enable: bool) -> None: ...
    def get_needs_motion_vectors(self) -> bool: ...
    def set_needs_normal_roughness(self, enable: bool) -> None: ...
    def get_needs_normal_roughness(self) -> bool: ...
    def set_needs_separate_specular(self, enable: bool) -> None: ...
    def get_needs_separate_specular(self) -> bool: ...
    
class CompositorEffect_EffectCallbackType(Enum):
    EFFECT_CALLBACK_TYPE_PRE_OPAQUE = 0
    EFFECT_CALLBACK_TYPE_POST_OPAQUE = 1
    EFFECT_CALLBACK_TYPE_POST_SKY = 2
    EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT = 3
    EFFECT_CALLBACK_TYPE_POST_TRANSPARENT = 4
    EFFECT_CALLBACK_TYPE_MAX = 5

class CompressedCubemap(CompressedTextureLayered):
    pass
    
class CompressedCubemapArray(CompressedTextureLayered):
    pass
    
class CompressedTexture2D(Texture2D):
    load_path: 'String'
    def load(self, path: 'String') -> 'Error': ...
    def get_load_path(self) -> 'String': ...
    
class CompressedTexture2DArray(CompressedTextureLayered):
    pass
    
class CompressedTexture3D(Texture3D):
    load_path: 'String'
    def load(self, path: 'String') -> 'Error': ...
    def get_load_path(self) -> 'String': ...
    
class CompressedTextureLayered(TextureLayered):
    load_path: 'String'
    def load(self, path: 'String') -> 'Error': ...
    def get_load_path(self) -> 'String': ...
    
class ConcavePolygonShape2D(Shape2D):
    segments: 'PackedVector2Array'
    def set_segments(self, segments: 'PackedVector2Array') -> None: ...
    def get_segments(self) -> 'PackedVector2Array': ...
    
class ConcavePolygonShape3D(Shape3D):
    data: 'PackedVector3Array'
    backface_collision: bool
    def set_faces(self, faces: 'PackedVector3Array') -> None: ...
    def get_faces(self) -> 'PackedVector3Array': ...
    def set_backface_collision_enabled(self, enabled: bool) -> None: ...
    def is_backface_collision_enabled(self) -> bool: ...
    
class ConeTwistJoint3D(Joint3D):
    swing_span: float
    twist_span: float
    bias: float
    softness: float
    relaxation: float
    def set_param(self, param: 'ConeTwistJoint3D_Param', value: float) -> None: ...
    def get_param(self, param: 'ConeTwistJoint3D_Param') -> float: ...
    
class ConeTwistJoint3D_Param(Enum):
    PARAM_SWING_SPAN = 0
    PARAM_TWIST_SPAN = 1
    PARAM_BIAS = 2
    PARAM_SOFTNESS = 3
    PARAM_RELAXATION = 4
    PARAM_MAX = 5

class ConfigFile(RefCounted):
    def set_value(self, section: 'String', key: 'String', value: 'Variant') -> None: ...
    def get_value(self, section: 'String', key: 'String', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def has_section(self, section: 'String') -> bool: ...
    def has_section_key(self, section: 'String', key: 'String') -> bool: ...
    def get_sections(self) -> 'PackedStringArray': ...
    def get_section_keys(self, section: 'String') -> 'PackedStringArray': ...
    def erase_section(self, section: 'String') -> None: ...
    def erase_section_key(self, section: 'String', key: 'String') -> None: ...
    def load(self, path: 'String') -> 'Error': ...
    def parse(self, data: 'String') -> 'Error': ...
    def save(self, path: 'String') -> 'Error': ...
    def encode_to_text(self) -> 'String': ...
    def load_encrypted(self, path: 'String', key: 'PackedByteArray') -> 'Error': ...
    def load_encrypted_pass(self, path: 'String', password: 'String') -> 'Error': ...
    def save_encrypted(self, path: 'String', key: 'PackedByteArray') -> 'Error': ...
    def save_encrypted_pass(self, path: 'String', password: 'String') -> 'Error': ...
    def clear(self) -> None: ...
    
class ConfirmationDialog(AcceptDialog):
    cancel_button_text: 'String'
    def get_cancel_button(self) -> 'Button': ...
    def set_cancel_button_text(self, text: 'String') -> None: ...
    def get_cancel_button_text(self) -> 'String': ...
    
class Container(Control):
    NOTIFICATION_PRE_SORT_CHILDREN = 50
    NOTIFICATION_SORT_CHILDREN = 51
    
    pre_sort_children: Signal[Callable[[], None]]  # pre_sort_children()
    sort_children: Signal[Callable[[], None]]  # sort_children()
    def _get_allowed_size_flags_horizontal(self) -> 'PackedInt32Array': ...
    def _get_allowed_size_flags_vertical(self) -> 'PackedInt32Array': ...
    def queue_sort(self) -> None: ...
    def fit_child_in_rect(self, child: 'Control', rect: 'Rect2') -> None: ...
    
class Control(CanvasItem):
    clip_contents: bool
    custom_minimum_size: 'Vector2'
    layout_direction: int
    layout_mode: int
    anchors_preset: int
    anchor_left: float
    anchor_top: float
    anchor_right: float
    anchor_bottom: float
    offset_left: float
    offset_top: float
    offset_right: float
    offset_bottom: float
    grow_horizontal: int
    grow_vertical: int
    size: 'Vector2'
    position: 'Vector2'
    global_position: 'Vector2'
    rotation: float
    rotation_degrees: float
    scale: 'Vector2'
    pivot_offset: 'Vector2'
    size_flags_horizontal: int
    size_flags_vertical: int
    size_flags_stretch_ratio: float
    localize_numeral_system: bool
    auto_translate: bool
    tooltip_text: 'String'
    tooltip_auto_translate_mode: int
    focus_neighbor_left: 'NodePath'
    focus_neighbor_top: 'NodePath'
    focus_neighbor_right: 'NodePath'
    focus_neighbor_bottom: 'NodePath'
    focus_next: 'NodePath'
    focus_previous: 'NodePath'
    focus_mode: int
    mouse_filter: int
    mouse_force_pass_scroll_events: bool
    mouse_default_cursor_shape: int
    shortcut_context: 'Object'
    theme: 'Theme'
    theme_type_variation: 'String'
    NOTIFICATION_RESIZED = 40
    NOTIFICATION_MOUSE_ENTER = 41
    NOTIFICATION_MOUSE_EXIT = 42
    NOTIFICATION_MOUSE_ENTER_SELF = 60
    NOTIFICATION_MOUSE_EXIT_SELF = 61
    NOTIFICATION_FOCUS_ENTER = 43
    NOTIFICATION_FOCUS_EXIT = 44
    NOTIFICATION_THEME_CHANGED = 45
    NOTIFICATION_SCROLL_BEGIN = 47
    NOTIFICATION_SCROLL_END = 48
    NOTIFICATION_LAYOUT_DIRECTION_CHANGED = 49
    
    resized: Signal[Callable[[], None]]  # resized()
    gui_input: Signal[Callable[['InputEvent'], None]]  # gui_input(event: 'InputEvent')
    mouse_entered: Signal[Callable[[], None]]  # mouse_entered()
    mouse_exited: Signal[Callable[[], None]]  # mouse_exited()
    focus_entered: Signal[Callable[[], None]]  # focus_entered()
    focus_exited: Signal[Callable[[], None]]  # focus_exited()
    size_flags_changed: Signal[Callable[[], None]]  # size_flags_changed()
    minimum_size_changed: Signal[Callable[[], None]]  # minimum_size_changed()
    theme_changed: Signal[Callable[[], None]]  # theme_changed()
    def _has_point(self, point: 'Vector2') -> bool: ...
    def _structured_text_parser(self, args: 'Array', text: 'String') -> 'list[Vector3i]': ...
    def _get_minimum_size(self) -> 'Vector2': ...
    def _get_tooltip(self, at_position: 'Vector2') -> 'String': ...
    def _get_drag_data(self, at_position: 'Vector2') -> 'Variant': ...
    def _can_drop_data(self, at_position: 'Vector2', data: 'Variant') -> bool: ...
    def _drop_data(self, at_position: 'Vector2', data: 'Variant') -> None: ...
    def _make_custom_tooltip(self, for_text: 'String') -> 'Object': ...
    def _gui_input(self, event: 'InputEvent') -> None: ...
    def accept_event(self) -> None: ...
    def get_minimum_size(self) -> 'Vector2': ...
    def get_combined_minimum_size(self) -> 'Vector2': ...
    def set_anchors_preset(self, preset: 'Control_LayoutPreset', keep_offsets: bool = default('''false''')) -> None: ...
    def set_offsets_preset(self, preset: 'Control_LayoutPreset', resize_mode: 'Control_LayoutPresetMode' = default('''0'''), margin: int = default('''0''')) -> None: ...
    def set_anchors_and_offsets_preset(self, preset: 'Control_LayoutPreset', resize_mode: 'Control_LayoutPresetMode' = default('''0'''), margin: int = default('''0''')) -> None: ...
    def set_anchor(self, side: 'Side', anchor: float, keep_offset: bool = default('''false'''), push_opposite_anchor: bool = default('''true''')) -> None: ...
    def get_anchor(self, side: 'Side') -> float: ...
    def set_offset(self, side: 'Side', offset: float) -> None: ...
    def get_offset(self, offset: 'Side') -> float: ...
    def set_anchor_and_offset(self, side: 'Side', anchor: float, offset: float, push_opposite_anchor: bool = default('''false''')) -> None: ...
    def set_begin(self, position: 'Vector2') -> None: ...
    def set_end(self, position: 'Vector2') -> None: ...
    def set_position(self, position: 'Vector2', keep_offsets: bool = default('''false''')) -> None: ...
    def set_size(self, size: 'Vector2', keep_offsets: bool = default('''false''')) -> None: ...
    def reset_size(self) -> None: ...
    def set_custom_minimum_size(self, size: 'Vector2') -> None: ...
    def set_global_position(self, position: 'Vector2', keep_offsets: bool = default('''false''')) -> None: ...
    def set_rotation(self, radians: float) -> None: ...
    def set_rotation_degrees(self, degrees: float) -> None: ...
    def set_scale(self, scale: 'Vector2') -> None: ...
    def set_pivot_offset(self, pivot_offset: 'Vector2') -> None: ...
    def get_begin(self) -> 'Vector2': ...
    def get_end(self) -> 'Vector2': ...
    def get_position(self) -> 'Vector2': ...
    def get_size(self) -> 'Vector2': ...
    def get_rotation(self) -> float: ...
    def get_rotation_degrees(self) -> float: ...
    def get_scale(self) -> 'Vector2': ...
    def get_pivot_offset(self) -> 'Vector2': ...
    def get_custom_minimum_size(self) -> 'Vector2': ...
    def get_parent_area_size(self) -> 'Vector2': ...
    def get_global_position(self) -> 'Vector2': ...
    def get_screen_position(self) -> 'Vector2': ...
    def get_rect(self) -> 'Rect2': ...
    def get_global_rect(self) -> 'Rect2': ...
    def set_focus_mode(self, mode: 'Control_FocusMode') -> None: ...
    def get_focus_mode(self) -> 'Control_FocusMode': ...
    def has_focus(self) -> bool: ...
    def grab_focus(self) -> None: ...
    def release_focus(self) -> None: ...
    def find_prev_valid_focus(self) -> 'Control': ...
    def find_next_valid_focus(self) -> 'Control': ...
    def find_valid_focus_neighbor(self, side: 'Side') -> 'Control': ...
    def set_h_size_flags(self, flags: 'Control_SizeFlags') -> None: ...
    def get_h_size_flags(self) -> 'Control_SizeFlags': ...
    def set_stretch_ratio(self, ratio: float) -> None: ...
    def get_stretch_ratio(self) -> float: ...
    def set_v_size_flags(self, flags: 'Control_SizeFlags') -> None: ...
    def get_v_size_flags(self) -> 'Control_SizeFlags': ...
    def set_theme(self, theme: 'Theme') -> None: ...
    def get_theme(self) -> 'Theme': ...
    def set_theme_type_variation(self, theme_type: 'StringName') -> None: ...
    def get_theme_type_variation(self) -> 'StringName': ...
    def begin_bulk_theme_override(self) -> None: ...
    def end_bulk_theme_override(self) -> None: ...
    def add_theme_icon_override(self, name: 'StringName', texture: 'Texture2D') -> None: ...
    def add_theme_stylebox_override(self, name: 'StringName', stylebox: 'StyleBox') -> None: ...
    def add_theme_font_override(self, name: 'StringName', font: 'Font') -> None: ...
    def add_theme_font_size_override(self, name: 'StringName', font_size: int) -> None: ...
    def add_theme_color_override(self, name: 'StringName', color: 'Color') -> None: ...
    def add_theme_constant_override(self, name: 'StringName', constant: int) -> None: ...
    def remove_theme_icon_override(self, name: 'StringName') -> None: ...
    def remove_theme_stylebox_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_size_override(self, name: 'StringName') -> None: ...
    def remove_theme_color_override(self, name: 'StringName') -> None: ...
    def remove_theme_constant_override(self, name: 'StringName') -> None: ...
    def get_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Texture2D': ...
    def get_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'StyleBox': ...
    def get_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Font': ...
    def get_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> int: ...
    def get_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Color': ...
    def get_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> int: ...
    def has_theme_icon_override(self, name: 'StringName') -> bool: ...
    def has_theme_stylebox_override(self, name: 'StringName') -> bool: ...
    def has_theme_font_override(self, name: 'StringName') -> bool: ...
    def has_theme_font_size_override(self, name: 'StringName') -> bool: ...
    def has_theme_color_override(self, name: 'StringName') -> bool: ...
    def has_theme_constant_override(self, name: 'StringName') -> bool: ...
    def has_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def get_theme_default_base_scale(self) -> float: ...
    def get_theme_default_font(self) -> 'Font': ...
    def get_theme_default_font_size(self) -> int: ...
    def get_parent_control(self) -> 'Control': ...
    def set_h_grow_direction(self, direction: 'Control_GrowDirection') -> None: ...
    def get_h_grow_direction(self) -> 'Control_GrowDirection': ...
    def set_v_grow_direction(self, direction: 'Control_GrowDirection') -> None: ...
    def get_v_grow_direction(self) -> 'Control_GrowDirection': ...
    def set_tooltip_auto_translate_mode(self, mode: 'Node_AutoTranslateMode') -> None: ...
    def get_tooltip_auto_translate_mode(self) -> 'Node_AutoTranslateMode': ...
    def set_tooltip_text(self, hint: 'String') -> None: ...
    def get_tooltip_text(self) -> 'String': ...
    def get_tooltip(self, at_position: 'Vector2' = default('''Vector2(0, 0)''')) -> 'String': ...
    def set_default_cursor_shape(self, shape: 'Control_CursorShape') -> None: ...
    def get_default_cursor_shape(self) -> 'Control_CursorShape': ...
    def get_cursor_shape(self, position: 'Vector2' = default('''Vector2(0, 0)''')) -> 'Control_CursorShape': ...
    def set_focus_neighbor(self, side: 'Side', neighbor: 'NodePath') -> None: ...
    def get_focus_neighbor(self, side: 'Side') -> 'NodePath': ...
    def set_focus_next(self, next: 'NodePath') -> None: ...
    def get_focus_next(self) -> 'NodePath': ...
    def set_focus_previous(self, previous: 'NodePath') -> None: ...
    def get_focus_previous(self) -> 'NodePath': ...
    def force_drag(self, data: 'Variant', preview: 'Control') -> None: ...
    def set_mouse_filter(self, filter: 'Control_MouseFilter') -> None: ...
    def get_mouse_filter(self) -> 'Control_MouseFilter': ...
    def set_force_pass_scroll_events(self, force_pass_scroll_events: bool) -> None: ...
    def is_force_pass_scroll_events(self) -> bool: ...
    def set_clip_contents(self, enable: bool) -> None: ...
    def is_clipping_contents(self) -> bool: ...
    def grab_click_focus(self) -> None: ...
    def set_drag_forwarding(self, drag_func: 'Callable', can_drop_func: 'Callable', drop_func: 'Callable') -> None: ...
    def set_drag_preview(self, control: 'Control') -> None: ...
    def is_drag_successful(self) -> bool: ...
    def warp_mouse(self, position: 'Vector2') -> None: ...
    def set_shortcut_context(self, node: 'Node') -> None: ...
    def get_shortcut_context(self) -> 'Node': ...
    def update_minimum_size(self) -> None: ...
    def set_layout_direction(self, direction: 'Control_LayoutDirection') -> None: ...
    def get_layout_direction(self) -> 'Control_LayoutDirection': ...
    def is_layout_rtl(self) -> bool: ...
    def set_auto_translate(self, enable: bool) -> None: ...
    def is_auto_translating(self) -> bool: ...
    def set_localize_numeral_system(self, enable: bool) -> None: ...
    def is_localizing_numeral_system(self) -> bool: ...
    
class Control_FocusMode(Enum):
    FOCUS_NONE = 0
    FOCUS_CLICK = 1
    FOCUS_ALL = 2

class Control_CursorShape(Enum):
    CURSOR_ARROW = 0
    CURSOR_IBEAM = 1
    CURSOR_POINTING_HAND = 2
    CURSOR_CROSS = 3
    CURSOR_WAIT = 4
    CURSOR_BUSY = 5
    CURSOR_DRAG = 6
    CURSOR_CAN_DROP = 7
    CURSOR_FORBIDDEN = 8
    CURSOR_VSIZE = 9
    CURSOR_HSIZE = 10
    CURSOR_BDIAGSIZE = 11
    CURSOR_FDIAGSIZE = 12
    CURSOR_MOVE = 13
    CURSOR_VSPLIT = 14
    CURSOR_HSPLIT = 15
    CURSOR_HELP = 16

class Control_LayoutPreset(Enum):
    PRESET_TOP_LEFT = 0
    PRESET_TOP_RIGHT = 1
    PRESET_BOTTOM_LEFT = 2
    PRESET_BOTTOM_RIGHT = 3
    PRESET_CENTER_LEFT = 4
    PRESET_CENTER_TOP = 5
    PRESET_CENTER_RIGHT = 6
    PRESET_CENTER_BOTTOM = 7
    PRESET_CENTER = 8
    PRESET_LEFT_WIDE = 9
    PRESET_TOP_WIDE = 10
    PRESET_RIGHT_WIDE = 11
    PRESET_BOTTOM_WIDE = 12
    PRESET_VCENTER_WIDE = 13
    PRESET_HCENTER_WIDE = 14
    PRESET_FULL_RECT = 15

class Control_LayoutPresetMode(Enum):
    PRESET_MODE_MINSIZE = 0
    PRESET_MODE_KEEP_WIDTH = 1
    PRESET_MODE_KEEP_HEIGHT = 2
    PRESET_MODE_KEEP_SIZE = 3

class Control_SizeFlags(Enum):
    SIZE_SHRINK_BEGIN = 0
    SIZE_FILL = 1
    SIZE_EXPAND = 2
    SIZE_EXPAND_FILL = 3
    SIZE_SHRINK_CENTER = 4
    SIZE_SHRINK_END = 8

class Control_MouseFilter(Enum):
    MOUSE_FILTER_STOP = 0
    MOUSE_FILTER_PASS = 1
    MOUSE_FILTER_IGNORE = 2

class Control_GrowDirection(Enum):
    GROW_DIRECTION_BEGIN = 0
    GROW_DIRECTION_END = 1
    GROW_DIRECTION_BOTH = 2

class Control_Anchor(Enum):
    ANCHOR_BEGIN = 0
    ANCHOR_END = 1

class Control_LayoutDirection(Enum):
    LAYOUT_DIRECTION_INHERITED = 0
    LAYOUT_DIRECTION_APPLICATION_LOCALE = 1
    LAYOUT_DIRECTION_LTR = 2
    LAYOUT_DIRECTION_RTL = 3
    LAYOUT_DIRECTION_SYSTEM_LOCALE = 4
    LAYOUT_DIRECTION_MAX = 5
    LAYOUT_DIRECTION_LOCALE = 1

class Control_TextDirection(Enum):
    TEXT_DIRECTION_INHERITED = 3
    TEXT_DIRECTION_AUTO = 0
    TEXT_DIRECTION_LTR = 1
    TEXT_DIRECTION_RTL = 2

class ConvexPolygonShape2D(Shape2D):
    points: 'PackedVector2Array'
    def set_point_cloud(self, point_cloud: 'PackedVector2Array') -> None: ...
    def set_points(self, points: 'PackedVector2Array') -> None: ...
    def get_points(self) -> 'PackedVector2Array': ...
    
class ConvexPolygonShape3D(Shape3D):
    points: 'Array'
    def set_points(self, points: 'PackedVector3Array') -> None: ...
    def get_points(self) -> 'PackedVector3Array': ...
    
class Crypto(RefCounted):
    def generate_random_bytes(self, size: int) -> 'PackedByteArray': ...
    def generate_rsa(self, size: int) -> 'CryptoKey': ...
    def generate_self_signed_certificate(self, key: 'CryptoKey', issuer_name: 'String' = default('''"CN=myserver,O=myorganisation,C=IT"'''), not_before: 'String' = default('''"20140101000000"'''), not_after: 'String' = default('''"20340101000000"''')) -> 'X509Certificate': ...
    def sign(self, hash_type: 'HashingContext_HashType', hash: 'PackedByteArray', key: 'CryptoKey') -> 'PackedByteArray': ...
    def verify(self, hash_type: 'HashingContext_HashType', hash: 'PackedByteArray', signature: 'PackedByteArray', key: 'CryptoKey') -> bool: ...
    def encrypt(self, key: 'CryptoKey', plaintext: 'PackedByteArray') -> 'PackedByteArray': ...
    def decrypt(self, key: 'CryptoKey', ciphertext: 'PackedByteArray') -> 'PackedByteArray': ...
    def hmac_digest(self, hash_type: 'HashingContext_HashType', key: 'PackedByteArray', msg: 'PackedByteArray') -> 'PackedByteArray': ...
    def constant_time_compare(self, trusted: 'PackedByteArray', received: 'PackedByteArray') -> bool: ...
    
class CryptoKey(Resource):
    def save(self, path: 'String', public_only: bool = default('''false''')) -> 'Error': ...
    def load(self, path: 'String', public_only: bool = default('''false''')) -> 'Error': ...
    def is_public_only(self) -> bool: ...
    def save_to_string(self, public_only: bool = default('''false''')) -> 'String': ...
    def load_from_string(self, string_key: 'String', public_only: bool = default('''false''')) -> 'Error': ...
    
class Cubemap(ImageTextureLayered):
    def create_placeholder(self) -> 'Resource': ...
    
class CubemapArray(ImageTextureLayered):
    def create_placeholder(self) -> 'Resource': ...
    
class Curve(Resource):
    min_domain: float
    max_domain: float
    min_value: float
    max_value: float
    bake_resolution: int
    point_count: int
    range_changed: Signal[Callable[[], None]]  # range_changed()
    domain_changed: Signal[Callable[[], None]]  # domain_changed()
    def get_point_count(self) -> int: ...
    def set_point_count(self, count: int) -> None: ...
    def add_point(self, position: 'Vector2', left_tangent: float = default('''0'''), right_tangent: float = default('''0'''), left_mode: 'Curve_TangentMode' = default('''0'''), right_mode: 'Curve_TangentMode' = default('''0''')) -> int: ...
    def remove_point(self, index: int) -> None: ...
    def clear_points(self) -> None: ...
    def get_point_position(self, index: int) -> 'Vector2': ...
    def set_point_value(self, index: int, y: float) -> None: ...
    def set_point_offset(self, index: int, offset: float) -> int: ...
    def sample(self, offset: float) -> float: ...
    def sample_baked(self, offset: float) -> float: ...
    def get_point_left_tangent(self, index: int) -> float: ...
    def get_point_right_tangent(self, index: int) -> float: ...
    def get_point_left_mode(self, index: int) -> 'Curve_TangentMode': ...
    def get_point_right_mode(self, index: int) -> 'Curve_TangentMode': ...
    def set_point_left_tangent(self, index: int, tangent: float) -> None: ...
    def set_point_right_tangent(self, index: int, tangent: float) -> None: ...
    def set_point_left_mode(self, index: int, mode: 'Curve_TangentMode') -> None: ...
    def set_point_right_mode(self, index: int, mode: 'Curve_TangentMode') -> None: ...
    def get_min_value(self) -> float: ...
    def set_min_value(self, min: float) -> None: ...
    def get_max_value(self) -> float: ...
    def set_max_value(self, max: float) -> None: ...
    def get_value_range(self) -> float: ...
    def get_min_domain(self) -> float: ...
    def set_min_domain(self, min: float) -> None: ...
    def get_max_domain(self) -> float: ...
    def set_max_domain(self, max: float) -> None: ...
    def get_domain_range(self) -> float: ...
    def clean_dupes(self) -> None: ...
    def bake(self) -> None: ...
    def get_bake_resolution(self) -> int: ...
    def set_bake_resolution(self, resolution: int) -> None: ...
    
class Curve_TangentMode(Enum):
    TANGENT_FREE = 0
    TANGENT_LINEAR = 1
    TANGENT_MODE_COUNT = 2

class Curve2D(Resource):
    bake_interval: float
    point_count: int
    def get_point_count(self) -> int: ...
    def set_point_count(self, count: int) -> None: ...
    def add_point(self, position: 'Vector2', in_: 'Vector2' = default('''Vector2(0, 0)'''), out: 'Vector2' = default('''Vector2(0, 0)'''), index: int = default('''-1''')) -> None: ...
    def set_point_position(self, idx: int, position: 'Vector2') -> None: ...
    def get_point_position(self, idx: int) -> 'Vector2': ...
    def set_point_in(self, idx: int, position: 'Vector2') -> None: ...
    def get_point_in(self, idx: int) -> 'Vector2': ...
    def set_point_out(self, idx: int, position: 'Vector2') -> None: ...
    def get_point_out(self, idx: int) -> 'Vector2': ...
    def remove_point(self, idx: int) -> None: ...
    def clear_points(self) -> None: ...
    def sample(self, idx: int, t: float) -> 'Vector2': ...
    def samplef(self, fofs: float) -> 'Vector2': ...
    def set_bake_interval(self, distance: float) -> None: ...
    def get_bake_interval(self) -> float: ...
    def get_baked_length(self) -> float: ...
    def sample_baked(self, offset: float = default('''0.0'''), cubic: bool = default('''false''')) -> 'Vector2': ...
    def sample_baked_with_rotation(self, offset: float = default('''0.0'''), cubic: bool = default('''false''')) -> 'Transform2D': ...
    def get_baked_points(self) -> 'PackedVector2Array': ...
    def get_closest_point(self, to_point: 'Vector2') -> 'Vector2': ...
    def get_closest_offset(self, to_point: 'Vector2') -> float: ...
    def tessellate(self, max_stages: int = default('''5'''), tolerance_degrees: float = default('''4''')) -> 'PackedVector2Array': ...
    def tessellate_even_length(self, max_stages: int = default('''5'''), tolerance_length: float = default('''20.0''')) -> 'PackedVector2Array': ...
    
class Curve3D(Resource):
    closed: bool
    bake_interval: float
    point_count: int
    up_vector_enabled: bool
    def get_point_count(self) -> int: ...
    def set_point_count(self, count: int) -> None: ...
    def add_point(self, position: 'Vector3', in_: 'Vector3' = default('''Vector3(0, 0, 0)'''), out: 'Vector3' = default('''Vector3(0, 0, 0)'''), index: int = default('''-1''')) -> None: ...
    def set_point_position(self, idx: int, position: 'Vector3') -> None: ...
    def get_point_position(self, idx: int) -> 'Vector3': ...
    def set_point_tilt(self, idx: int, tilt: float) -> None: ...
    def get_point_tilt(self, idx: int) -> float: ...
    def set_point_in(self, idx: int, position: 'Vector3') -> None: ...
    def get_point_in(self, idx: int) -> 'Vector3': ...
    def set_point_out(self, idx: int, position: 'Vector3') -> None: ...
    def get_point_out(self, idx: int) -> 'Vector3': ...
    def remove_point(self, idx: int) -> None: ...
    def clear_points(self) -> None: ...
    def sample(self, idx: int, t: float) -> 'Vector3': ...
    def samplef(self, fofs: float) -> 'Vector3': ...
    def set_closed(self, closed: bool) -> None: ...
    def is_closed(self) -> bool: ...
    def set_bake_interval(self, distance: float) -> None: ...
    def get_bake_interval(self) -> float: ...
    def set_up_vector_enabled(self, enable: bool) -> None: ...
    def is_up_vector_enabled(self) -> bool: ...
    def get_baked_length(self) -> float: ...
    def sample_baked(self, offset: float = default('''0.0'''), cubic: bool = default('''false''')) -> 'Vector3': ...
    def sample_baked_with_rotation(self, offset: float = default('''0.0'''), cubic: bool = default('''false'''), apply_tilt: bool = default('''false''')) -> 'Transform3D': ...
    def sample_baked_up_vector(self, offset: float, apply_tilt: bool = default('''false''')) -> 'Vector3': ...
    def get_baked_points(self) -> 'PackedVector3Array': ...
    def get_baked_tilts(self) -> 'PackedFloat32Array': ...
    def get_baked_up_vectors(self) -> 'PackedVector3Array': ...
    def get_closest_point(self, to_point: 'Vector3') -> 'Vector3': ...
    def get_closest_offset(self, to_point: 'Vector3') -> float: ...
    def tessellate(self, max_stages: int = default('''5'''), tolerance_degrees: float = default('''4''')) -> 'PackedVector3Array': ...
    def tessellate_even_length(self, max_stages: int = default('''5'''), tolerance_length: float = default('''0.2''')) -> 'PackedVector3Array': ...
    
class CurveTexture(Texture2D):
    width: int
    texture_mode: int
    curve: 'Curve'
    def set_width(self, width: int) -> None: ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    def set_texture_mode(self, texture_mode: 'CurveTexture_TextureMode') -> None: ...
    def get_texture_mode(self) -> 'CurveTexture_TextureMode': ...
    
class CurveTexture_TextureMode(Enum):
    TEXTURE_MODE_RGB = 0
    TEXTURE_MODE_RED = 1

class CurveXYZTexture(Texture2D):
    width: int
    curve_x: 'Curve'
    curve_y: 'Curve'
    curve_z: 'Curve'
    def set_width(self, width: int) -> None: ...
    def set_curve_x(self, curve: 'Curve') -> None: ...
    def get_curve_x(self) -> 'Curve': ...
    def set_curve_y(self, curve: 'Curve') -> None: ...
    def get_curve_y(self) -> 'Curve': ...
    def set_curve_z(self, curve: 'Curve') -> None: ...
    def get_curve_z(self) -> 'Curve': ...
    
class CylinderMesh(PrimitiveMesh):
    top_radius: float
    bottom_radius: float
    height: float
    radial_segments: int
    rings: int
    cap_top: bool
    cap_bottom: bool
    def set_top_radius(self, radius: float) -> None: ...
    def get_top_radius(self) -> float: ...
    def set_bottom_radius(self, radius: float) -> None: ...
    def get_bottom_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_radial_segments(self, segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_cap_top(self, cap_top: bool) -> None: ...
    def is_cap_top(self) -> bool: ...
    def set_cap_bottom(self, cap_bottom: bool) -> None: ...
    def is_cap_bottom(self) -> bool: ...
    
class CylinderShape3D(Shape3D):
    height: float
    radius: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    
class DTLSServer(RefCounted):
    def setup(self, server_options: 'TLSOptions') -> 'Error': ...
    def take_connection(self, udp_peer: 'PacketPeerUDP') -> 'PacketPeerDTLS': ...
    
class DampedSpringJoint2D(Joint2D):
    length: float
    rest_length: float
    stiffness: float
    damping: float
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_rest_length(self, rest_length: float) -> None: ...
    def get_rest_length(self) -> float: ...
    def set_stiffness(self, stiffness: float) -> None: ...
    def get_stiffness(self) -> float: ...
    def set_damping(self, damping: float) -> None: ...
    def get_damping(self) -> float: ...
    
class Decal(VisualInstance3D):
    size: 'Vector3'
    texture_albedo: 'Texture2D'
    texture_normal: 'Texture2D'
    texture_orm: 'Texture2D'
    texture_emission: 'Texture2D'
    emission_energy: float
    modulate: 'Color'
    albedo_mix: float
    normal_fade: float
    upper_fade: float
    lower_fade: float
    distance_fade_enabled: bool
    distance_fade_begin: float
    distance_fade_length: float
    cull_mask: int
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_texture(self, type: 'Decal_DecalTexture', texture: 'Texture2D') -> None: ...
    def get_texture(self, type: 'Decal_DecalTexture') -> 'Texture2D': ...
    def set_emission_energy(self, energy: float) -> None: ...
    def get_emission_energy(self) -> float: ...
    def set_albedo_mix(self, energy: float) -> None: ...
    def get_albedo_mix(self) -> float: ...
    def set_modulate(self, color: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_upper_fade(self, fade: float) -> None: ...
    def get_upper_fade(self) -> float: ...
    def set_lower_fade(self, fade: float) -> None: ...
    def get_lower_fade(self) -> float: ...
    def set_normal_fade(self, fade: float) -> None: ...
    def get_normal_fade(self) -> float: ...
    def set_enable_distance_fade(self, enable: bool) -> None: ...
    def is_distance_fade_enabled(self) -> bool: ...
    def set_distance_fade_begin(self, distance: float) -> None: ...
    def get_distance_fade_begin(self) -> float: ...
    def set_distance_fade_length(self, distance: float) -> None: ...
    def get_distance_fade_length(self) -> float: ...
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    
class Decal_DecalTexture(Enum):
    TEXTURE_ALBEDO = 0
    TEXTURE_NORMAL = 1
    TEXTURE_ORM = 2
    TEXTURE_EMISSION = 3
    TEXTURE_MAX = 4

class DirAccess(RefCounted):
    include_navigational: bool
    include_hidden: bool
    @staticmethod
    def open(path: 'String') -> 'DirAccess': ...
    @staticmethod
    def get_open_error() -> 'Error': ...
    @staticmethod
    def create_temp(prefix: 'String' = default('''""'''), keep: bool = default('''false''')) -> 'DirAccess': ...
    def list_dir_begin(self) -> 'Error': ...
    def get_next(self) -> 'String': ...
    def current_is_dir(self) -> bool: ...
    def list_dir_end(self) -> None: ...
    def get_files(self) -> 'PackedStringArray': ...
    @staticmethod
    def get_files_at(path: 'String') -> 'PackedStringArray': ...
    def get_directories(self) -> 'PackedStringArray': ...
    @staticmethod
    def get_directories_at(path: 'String') -> 'PackedStringArray': ...
    @staticmethod
    def get_drive_count() -> int: ...
    @staticmethod
    def get_drive_name(idx: int) -> 'String': ...
    def get_current_drive(self) -> int: ...
    def change_dir(self, to_dir: 'String') -> 'Error': ...
    def get_current_dir(self, include_drive: bool = default('''true''')) -> 'String': ...
    def make_dir(self, path: 'String') -> 'Error': ...
    @staticmethod
    def make_dir_absolute(path: 'String') -> 'Error': ...
    def make_dir_recursive(self, path: 'String') -> 'Error': ...
    @staticmethod
    def make_dir_recursive_absolute(path: 'String') -> 'Error': ...
    def file_exists(self, path: 'String') -> bool: ...
    def dir_exists(self, path: 'String') -> bool: ...
    @staticmethod
    def dir_exists_absolute(path: 'String') -> bool: ...
    def get_space_left(self) -> int: ...
    def copy(self, from_: 'String', to: 'String', chmod_flags: int = default('''-1''')) -> 'Error': ...
    @staticmethod
    def copy_absolute(from_: 'String', to: 'String', chmod_flags: int = default('''-1''')) -> 'Error': ...
    def rename(self, from_: 'String', to: 'String') -> 'Error': ...
    @staticmethod
    def rename_absolute(from_: 'String', to: 'String') -> 'Error': ...
    def remove(self, path: 'String') -> 'Error': ...
    @staticmethod
    def remove_absolute(path: 'String') -> 'Error': ...
    def is_link(self, path: 'String') -> bool: ...
    def read_link(self, path: 'String') -> 'String': ...
    def create_link(self, source: 'String', target: 'String') -> 'Error': ...
    def is_bundle(self, path: 'String') -> bool: ...
    def set_include_navigational(self, enable: bool) -> None: ...
    def get_include_navigational(self) -> bool: ...
    def set_include_hidden(self, enable: bool) -> None: ...
    def get_include_hidden(self) -> bool: ...
    def is_case_sensitive(self, path: 'String') -> bool: ...
    
class DirectionalLight2D(Light2D):
    height: float
    max_distance: float
    def set_max_distance(self, pixels: float) -> None: ...
    def get_max_distance(self) -> float: ...
    
class DirectionalLight3D(Light3D):
    directional_shadow_mode: int
    directional_shadow_split_1: float
    directional_shadow_split_2: float
    directional_shadow_split_3: float
    directional_shadow_blend_splits: bool
    directional_shadow_fade_start: float
    directional_shadow_max_distance: float
    directional_shadow_pancake_size: float
    sky_mode: int
    def set_shadow_mode(self, mode: 'DirectionalLight3D_ShadowMode') -> None: ...
    def get_shadow_mode(self) -> 'DirectionalLight3D_ShadowMode': ...
    def set_blend_splits(self, enabled: bool) -> None: ...
    def is_blend_splits_enabled(self) -> bool: ...
    def set_sky_mode(self, mode: 'DirectionalLight3D_SkyMode') -> None: ...
    def get_sky_mode(self) -> 'DirectionalLight3D_SkyMode': ...
    
class DirectionalLight3D_ShadowMode(Enum):
    SHADOW_ORTHOGONAL = 0
    SHADOW_PARALLEL_2_SPLITS = 1
    SHADOW_PARALLEL_4_SPLITS = 2

class DirectionalLight3D_SkyMode(Enum):
    SKY_MODE_LIGHT_AND_SKY = 0
    SKY_MODE_LIGHT_ONLY = 1
    SKY_MODE_SKY_ONLY = 2

class DisplayServer(Object):
    SCREEN_WITH_MOUSE_FOCUS = -4
    SCREEN_WITH_KEYBOARD_FOCUS = -3
    SCREEN_PRIMARY = -2
    SCREEN_OF_MAIN_WINDOW = -1
    MAIN_WINDOW_ID = 0
    INVALID_WINDOW_ID = -1
    INVALID_INDICATOR_ID = -1
    
    def has_feature(self, feature: 'DisplayServer_Feature') -> bool: ...
    def get_name(self) -> 'String': ...
    def help_set_search_callbacks(self, search_callback: 'Callable', action_callback: 'Callable') -> None: ...
    def global_menu_set_popup_callbacks(self, menu_root: 'String', open_callback: 'Callable', close_callback: 'Callable') -> None: ...
    def global_menu_add_submenu_item(self, menu_root: 'String', label: 'String', submenu: 'String', index: int = default('''-1''')) -> int: ...
    def global_menu_add_item(self, menu_root: 'String', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_check_item(self, menu_root: 'String', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_icon_item(self, menu_root: 'String', icon: 'Texture2D', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_icon_check_item(self, menu_root: 'String', icon: 'Texture2D', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_radio_check_item(self, menu_root: 'String', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_icon_radio_check_item(self, menu_root: 'String', icon: 'Texture2D', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_multistate_item(self, menu_root: 'String', label: 'String', max_states: int, default_state: int, callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def global_menu_add_separator(self, menu_root: 'String', index: int = default('''-1''')) -> int: ...
    def global_menu_get_item_index_from_text(self, menu_root: 'String', text: 'String') -> int: ...
    def global_menu_get_item_index_from_tag(self, menu_root: 'String', tag: 'Variant') -> int: ...
    def global_menu_is_item_checked(self, menu_root: 'String', idx: int) -> bool: ...
    def global_menu_is_item_checkable(self, menu_root: 'String', idx: int) -> bool: ...
    def global_menu_is_item_radio_checkable(self, menu_root: 'String', idx: int) -> bool: ...
    def global_menu_get_item_callback(self, menu_root: 'String', idx: int) -> 'Callable': ...
    def global_menu_get_item_key_callback(self, menu_root: 'String', idx: int) -> 'Callable': ...
    def global_menu_get_item_tag(self, menu_root: 'String', idx: int) -> 'Variant': ...
    def global_menu_get_item_text(self, menu_root: 'String', idx: int) -> 'String': ...
    def global_menu_get_item_submenu(self, menu_root: 'String', idx: int) -> 'String': ...
    def global_menu_get_item_accelerator(self, menu_root: 'String', idx: int) -> 'Key': ...
    def global_menu_is_item_disabled(self, menu_root: 'String', idx: int) -> bool: ...
    def global_menu_is_item_hidden(self, menu_root: 'String', idx: int) -> bool: ...
    def global_menu_get_item_tooltip(self, menu_root: 'String', idx: int) -> 'String': ...
    def global_menu_get_item_state(self, menu_root: 'String', idx: int) -> int: ...
    def global_menu_get_item_max_states(self, menu_root: 'String', idx: int) -> int: ...
    def global_menu_get_item_icon(self, menu_root: 'String', idx: int) -> 'Texture2D': ...
    def global_menu_get_item_indentation_level(self, menu_root: 'String', idx: int) -> int: ...
    def global_menu_set_item_checked(self, menu_root: 'String', idx: int, checked: bool) -> None: ...
    def global_menu_set_item_checkable(self, menu_root: 'String', idx: int, checkable: bool) -> None: ...
    def global_menu_set_item_radio_checkable(self, menu_root: 'String', idx: int, checkable: bool) -> None: ...
    def global_menu_set_item_callback(self, menu_root: 'String', idx: int, callback: 'Callable') -> None: ...
    def global_menu_set_item_hover_callbacks(self, menu_root: 'String', idx: int, callback: 'Callable') -> None: ...
    def global_menu_set_item_key_callback(self, menu_root: 'String', idx: int, key_callback: 'Callable') -> None: ...
    def global_menu_set_item_tag(self, menu_root: 'String', idx: int, tag: 'Variant') -> None: ...
    def global_menu_set_item_text(self, menu_root: 'String', idx: int, text: 'String') -> None: ...
    def global_menu_set_item_submenu(self, menu_root: 'String', idx: int, submenu: 'String') -> None: ...
    def global_menu_set_item_accelerator(self, menu_root: 'String', idx: int, keycode: 'Key') -> None: ...
    def global_menu_set_item_disabled(self, menu_root: 'String', idx: int, disabled: bool) -> None: ...
    def global_menu_set_item_hidden(self, menu_root: 'String', idx: int, hidden: bool) -> None: ...
    def global_menu_set_item_tooltip(self, menu_root: 'String', idx: int, tooltip: 'String') -> None: ...
    def global_menu_set_item_state(self, menu_root: 'String', idx: int, state: int) -> None: ...
    def global_menu_set_item_max_states(self, menu_root: 'String', idx: int, max_states: int) -> None: ...
    def global_menu_set_item_icon(self, menu_root: 'String', idx: int, icon: 'Texture2D') -> None: ...
    def global_menu_set_item_indentation_level(self, menu_root: 'String', idx: int, level: int) -> None: ...
    def global_menu_get_item_count(self, menu_root: 'String') -> int: ...
    def global_menu_remove_item(self, menu_root: 'String', idx: int) -> None: ...
    def global_menu_clear(self, menu_root: 'String') -> None: ...
    def global_menu_get_system_menu_roots(self) -> 'Dictionary': ...
    def tts_is_speaking(self) -> bool: ...
    def tts_is_paused(self) -> bool: ...
    def tts_get_voices(self) -> 'list[Dictionary]': ...
    def tts_get_voices_for_language(self, language: 'String') -> 'PackedStringArray': ...
    def tts_speak(self, text: 'String', voice: 'String', volume: int = default('''50'''), pitch: float = default('''1.0'''), rate: float = default('''1.0'''), utterance_id: int = default('''0'''), interrupt: bool = default('''false''')) -> None: ...
    def tts_pause(self) -> None: ...
    def tts_resume(self) -> None: ...
    def tts_stop(self) -> None: ...
    def tts_set_utterance_callback(self, event: 'DisplayServer_TTSUtteranceEvent', callable: 'Callable') -> None: ...
    def is_dark_mode_supported(self) -> bool: ...
    def is_dark_mode(self) -> bool: ...
    def get_accent_color(self) -> 'Color': ...
    def get_base_color(self) -> 'Color': ...
    def set_system_theme_change_callback(self, callable: 'Callable') -> None: ...
    def mouse_set_mode(self, mouse_mode: 'DisplayServer_MouseMode') -> None: ...
    def mouse_get_mode(self) -> 'DisplayServer_MouseMode': ...
    def warp_mouse(self, position: 'Vector2i') -> None: ...
    def mouse_get_position(self) -> 'Vector2i': ...
    def mouse_get_button_state(self) -> 'MouseButtonMask': ...
    def clipboard_set(self, clipboard: 'String') -> None: ...
    def clipboard_get(self) -> 'String': ...
    def clipboard_get_image(self) -> 'Image': ...
    def clipboard_has(self) -> bool: ...
    def clipboard_has_image(self) -> bool: ...
    def clipboard_set_primary(self, clipboard_primary: 'String') -> None: ...
    def clipboard_get_primary(self) -> 'String': ...
    def get_display_cutouts(self) -> 'list[Rect2]': ...
    def get_display_safe_area(self) -> 'Rect2i': ...
    def get_screen_count(self) -> int: ...
    def get_primary_screen(self) -> int: ...
    def get_keyboard_focus_screen(self) -> int: ...
    def get_screen_from_rect(self, rect: 'Rect2') -> int: ...
    def screen_get_position(self, screen: int = default('''-1''')) -> 'Vector2i': ...
    def screen_get_size(self, screen: int = default('''-1''')) -> 'Vector2i': ...
    def screen_get_usable_rect(self, screen: int = default('''-1''')) -> 'Rect2i': ...
    def screen_get_dpi(self, screen: int = default('''-1''')) -> int: ...
    def screen_get_scale(self, screen: int = default('''-1''')) -> float: ...
    def is_touchscreen_available(self) -> bool: ...
    def screen_get_max_scale(self) -> float: ...
    def screen_get_refresh_rate(self, screen: int = default('''-1''')) -> float: ...
    def screen_get_pixel(self, position: 'Vector2i') -> 'Color': ...
    def screen_get_image(self, screen: int = default('''-1''')) -> 'Image': ...
    def screen_get_image_rect(self, rect: 'Rect2i') -> 'Image': ...
    def screen_set_orientation(self, orientation: 'DisplayServer_ScreenOrientation', screen: int = default('''-1''')) -> None: ...
    def screen_get_orientation(self, screen: int = default('''-1''')) -> 'DisplayServer_ScreenOrientation': ...
    def screen_set_keep_on(self, enable: bool) -> None: ...
    def screen_is_kept_on(self) -> bool: ...
    def get_window_list(self) -> 'PackedInt32Array': ...
    def get_window_at_screen_position(self, position: 'Vector2i') -> int: ...
    def window_get_native_handle(self, handle_type: 'DisplayServer_HandleType', window_id: int = default('''0''')) -> int: ...
    def window_get_active_popup(self) -> int: ...
    def window_set_popup_safe_rect(self, window: int, rect: 'Rect2i') -> None: ...
    def window_get_popup_safe_rect(self, window: int) -> 'Rect2i': ...
    def window_set_title(self, title: 'String', window_id: int = default('''0''')) -> None: ...
    def window_get_title_size(self, title: 'String', window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_set_mouse_passthrough(self, region: 'PackedVector2Array', window_id: int = default('''0''')) -> None: ...
    def window_get_current_screen(self, window_id: int = default('''0''')) -> int: ...
    def window_set_current_screen(self, screen: int, window_id: int = default('''0''')) -> None: ...
    def window_get_position(self, window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_get_position_with_decorations(self, window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_set_position(self, position: 'Vector2i', window_id: int = default('''0''')) -> None: ...
    def window_get_size(self, window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_set_size(self, size: 'Vector2i', window_id: int = default('''0''')) -> None: ...
    def window_set_rect_changed_callback(self, callback: 'Callable', window_id: int = default('''0''')) -> None: ...
    def window_set_window_event_callback(self, callback: 'Callable', window_id: int = default('''0''')) -> None: ...
    def window_set_input_event_callback(self, callback: 'Callable', window_id: int = default('''0''')) -> None: ...
    def window_set_input_text_callback(self, callback: 'Callable', window_id: int = default('''0''')) -> None: ...
    def window_set_drop_files_callback(self, callback: 'Callable', window_id: int = default('''0''')) -> None: ...
    def window_get_attached_instance_id(self, window_id: int = default('''0''')) -> int: ...
    def window_get_max_size(self, window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_set_max_size(self, max_size: 'Vector2i', window_id: int = default('''0''')) -> None: ...
    def window_get_min_size(self, window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_set_min_size(self, min_size: 'Vector2i', window_id: int = default('''0''')) -> None: ...
    def window_get_size_with_decorations(self, window_id: int = default('''0''')) -> 'Vector2i': ...
    def window_get_mode(self, window_id: int = default('''0''')) -> 'DisplayServer_WindowMode': ...
    def window_set_mode(self, mode: 'DisplayServer_WindowMode', window_id: int = default('''0''')) -> None: ...
    def window_set_flag(self, flag: 'DisplayServer_WindowFlags', enabled: bool, window_id: int = default('''0''')) -> None: ...
    def window_get_flag(self, flag: 'DisplayServer_WindowFlags', window_id: int = default('''0''')) -> bool: ...
    def window_set_window_buttons_offset(self, offset: 'Vector2i', window_id: int = default('''0''')) -> None: ...
    def window_get_safe_title_margins(self, window_id: int = default('''0''')) -> 'Vector3i': ...
    def window_request_attention(self, window_id: int = default('''0''')) -> None: ...
    def window_move_to_foreground(self, window_id: int = default('''0''')) -> None: ...
    def window_is_focused(self, window_id: int = default('''0''')) -> bool: ...
    def window_can_draw(self, window_id: int = default('''0''')) -> bool: ...
    def window_set_transient(self, window_id: int, parent_window_id: int) -> None: ...
    def window_set_exclusive(self, window_id: int, exclusive: bool) -> None: ...
    def window_set_ime_active(self, active: bool, window_id: int = default('''0''')) -> None: ...
    def window_set_ime_position(self, position: 'Vector2i', window_id: int = default('''0''')) -> None: ...
    def window_set_vsync_mode(self, vsync_mode: 'DisplayServer_VSyncMode', window_id: int = default('''0''')) -> None: ...
    def window_get_vsync_mode(self, window_id: int = default('''0''')) -> 'DisplayServer_VSyncMode': ...
    def window_is_maximize_allowed(self, window_id: int = default('''0''')) -> bool: ...
    def window_maximize_on_title_dbl_click(self) -> bool: ...
    def window_minimize_on_title_dbl_click(self) -> bool: ...
    def window_start_drag(self, window_id: int = default('''0''')) -> None: ...
    def window_start_resize(self, edge: 'DisplayServer_WindowResizeEdge', window_id: int = default('''0''')) -> None: ...
    def ime_get_selection(self) -> 'Vector2i': ...
    def ime_get_text(self) -> 'String': ...
    def virtual_keyboard_show(self, existing_text: 'String', position: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), type: 'DisplayServer_VirtualKeyboardType' = default('''0'''), max_length: int = default('''-1'''), cursor_start: int = default('''-1'''), cursor_end: int = default('''-1''')) -> None: ...
    def virtual_keyboard_hide(self) -> None: ...
    def virtual_keyboard_get_height(self) -> int: ...
    def has_hardware_keyboard(self) -> bool: ...
    def cursor_set_shape(self, shape: 'DisplayServer_CursorShape') -> None: ...
    def cursor_get_shape(self) -> 'DisplayServer_CursorShape': ...
    def cursor_set_custom_image(self, cursor: 'Resource', shape: 'DisplayServer_CursorShape' = default('''0'''), hotspot: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def get_swap_cancel_ok(self) -> bool: ...
    def enable_for_stealing_focus(self, process_id: int) -> None: ...
    def dialog_show(self, title: 'String', description: 'String', buttons: 'PackedStringArray', callback: 'Callable') -> 'Error': ...
    def dialog_input_text(self, title: 'String', description: 'String', existing_text: 'String', callback: 'Callable') -> 'Error': ...
    def file_dialog_show(self, title: 'String', current_directory: 'String', filename: 'String', show_hidden: bool, mode: 'DisplayServer_FileDialogMode', filters: 'PackedStringArray', callback: 'Callable') -> 'Error': ...
    def file_dialog_with_options_show(self, title: 'String', current_directory: 'String', root: 'String', filename: 'String', show_hidden: bool, mode: 'DisplayServer_FileDialogMode', filters: 'PackedStringArray', options: 'list[Dictionary]', callback: 'Callable') -> 'Error': ...
    def beep(self) -> None: ...
    def keyboard_get_layout_count(self) -> int: ...
    def keyboard_get_current_layout(self) -> int: ...
    def keyboard_set_current_layout(self, index: int) -> None: ...
    def keyboard_get_layout_language(self, index: int) -> 'String': ...
    def keyboard_get_layout_name(self, index: int) -> 'String': ...
    def keyboard_get_keycode_from_physical(self, keycode: 'Key') -> 'Key': ...
    def keyboard_get_label_from_physical(self, keycode: 'Key') -> 'Key': ...
    def show_emoji_and_symbol_picker(self) -> None: ...
    def process_events(self) -> None: ...
    def force_process_and_drop_events(self) -> None: ...
    def set_native_icon(self, filename: 'String') -> None: ...
    def set_icon(self, image: 'Image') -> None: ...
    def create_status_indicator(self, icon: 'Texture2D', tooltip: 'String', callback: 'Callable') -> int: ...
    def status_indicator_set_icon(self, id: int, icon: 'Texture2D') -> None: ...
    def status_indicator_set_tooltip(self, id: int, tooltip: 'String') -> None: ...
    def status_indicator_set_menu(self, id: int, menu_rid: 'RID') -> None: ...
    def status_indicator_set_callback(self, id: int, callback: 'Callable') -> None: ...
    def status_indicator_get_rect(self, id: int) -> 'Rect2': ...
    def delete_status_indicator(self, id: int) -> None: ...
    def tablet_get_driver_count(self) -> int: ...
    def tablet_get_driver_name(self, idx: int) -> 'String': ...
    def tablet_get_current_driver(self) -> 'String': ...
    def tablet_set_current_driver(self, name: 'String') -> None: ...
    def is_window_transparency_available(self) -> bool: ...
    def register_additional_output(self, object: 'Object') -> None: ...
    def unregister_additional_output(self, object: 'Object') -> None: ...
    def has_additional_outputs(self) -> bool: ...
    
class DisplayServer_Feature(Enum):
    FEATURE_GLOBAL_MENU = 0
    FEATURE_SUBWINDOWS = 1
    FEATURE_TOUCHSCREEN = 2
    FEATURE_MOUSE = 3
    FEATURE_MOUSE_WARP = 4
    FEATURE_CLIPBOARD = 5
    FEATURE_VIRTUAL_KEYBOARD = 6
    FEATURE_CURSOR_SHAPE = 7
    FEATURE_CUSTOM_CURSOR_SHAPE = 8
    FEATURE_NATIVE_DIALOG = 9
    FEATURE_IME = 10
    FEATURE_WINDOW_TRANSPARENCY = 11
    FEATURE_HIDPI = 12
    FEATURE_ICON = 13
    FEATURE_NATIVE_ICON = 14
    FEATURE_ORIENTATION = 15
    FEATURE_SWAP_BUFFERS = 16
    FEATURE_CLIPBOARD_PRIMARY = 18
    FEATURE_TEXT_TO_SPEECH = 19
    FEATURE_EXTEND_TO_TITLE = 20
    FEATURE_SCREEN_CAPTURE = 21
    FEATURE_STATUS_INDICATOR = 22
    FEATURE_NATIVE_HELP = 23
    FEATURE_NATIVE_DIALOG_INPUT = 24
    FEATURE_NATIVE_DIALOG_FILE = 25
    FEATURE_NATIVE_DIALOG_FILE_EXTRA = 26
    FEATURE_WINDOW_DRAG = 27
    FEATURE_SCREEN_EXCLUDE_FROM_CAPTURE = 28
    FEATURE_WINDOW_EMBEDDING = 29
    FEATURE_NATIVE_DIALOG_FILE_MIME = 30
    FEATURE_EMOJI_AND_SYMBOL_PICKER = 31

class DisplayServer_MouseMode(Enum):
    MOUSE_MODE_VISIBLE = 0
    MOUSE_MODE_HIDDEN = 1
    MOUSE_MODE_CAPTURED = 2
    MOUSE_MODE_CONFINED = 3
    MOUSE_MODE_CONFINED_HIDDEN = 4
    MOUSE_MODE_MAX = 5

class DisplayServer_ScreenOrientation(Enum):
    SCREEN_LANDSCAPE = 0
    SCREEN_PORTRAIT = 1
    SCREEN_REVERSE_LANDSCAPE = 2
    SCREEN_REVERSE_PORTRAIT = 3
    SCREEN_SENSOR_LANDSCAPE = 4
    SCREEN_SENSOR_PORTRAIT = 5
    SCREEN_SENSOR = 6

class DisplayServer_VirtualKeyboardType(Enum):
    KEYBOARD_TYPE_DEFAULT = 0
    KEYBOARD_TYPE_MULTILINE = 1
    KEYBOARD_TYPE_NUMBER = 2
    KEYBOARD_TYPE_NUMBER_DECIMAL = 3
    KEYBOARD_TYPE_PHONE = 4
    KEYBOARD_TYPE_EMAIL_ADDRESS = 5
    KEYBOARD_TYPE_PASSWORD = 6
    KEYBOARD_TYPE_URL = 7

class DisplayServer_CursorShape(Enum):
    CURSOR_ARROW = 0
    CURSOR_IBEAM = 1
    CURSOR_POINTING_HAND = 2
    CURSOR_CROSS = 3
    CURSOR_WAIT = 4
    CURSOR_BUSY = 5
    CURSOR_DRAG = 6
    CURSOR_CAN_DROP = 7
    CURSOR_FORBIDDEN = 8
    CURSOR_VSIZE = 9
    CURSOR_HSIZE = 10
    CURSOR_BDIAGSIZE = 11
    CURSOR_FDIAGSIZE = 12
    CURSOR_MOVE = 13
    CURSOR_VSPLIT = 14
    CURSOR_HSPLIT = 15
    CURSOR_HELP = 16
    CURSOR_MAX = 17

class DisplayServer_FileDialogMode(Enum):
    FILE_DIALOG_MODE_OPEN_FILE = 0
    FILE_DIALOG_MODE_OPEN_FILES = 1
    FILE_DIALOG_MODE_OPEN_DIR = 2
    FILE_DIALOG_MODE_OPEN_ANY = 3
    FILE_DIALOG_MODE_SAVE_FILE = 4

class DisplayServer_WindowMode(Enum):
    WINDOW_MODE_WINDOWED = 0
    WINDOW_MODE_MINIMIZED = 1
    WINDOW_MODE_MAXIMIZED = 2
    WINDOW_MODE_FULLSCREEN = 3
    WINDOW_MODE_EXCLUSIVE_FULLSCREEN = 4

class DisplayServer_WindowFlags(Enum):
    WINDOW_FLAG_RESIZE_DISABLED = 0
    WINDOW_FLAG_BORDERLESS = 1
    WINDOW_FLAG_ALWAYS_ON_TOP = 2
    WINDOW_FLAG_TRANSPARENT = 3
    WINDOW_FLAG_NO_FOCUS = 4
    WINDOW_FLAG_POPUP = 5
    WINDOW_FLAG_EXTEND_TO_TITLE = 6
    WINDOW_FLAG_MOUSE_PASSTHROUGH = 7
    WINDOW_FLAG_SHARP_CORNERS = 8
    WINDOW_FLAG_EXCLUDE_FROM_CAPTURE = 9
    WINDOW_FLAG_MAX = 10

class DisplayServer_WindowEvent(Enum):
    WINDOW_EVENT_MOUSE_ENTER = 0
    WINDOW_EVENT_MOUSE_EXIT = 1
    WINDOW_EVENT_FOCUS_IN = 2
    WINDOW_EVENT_FOCUS_OUT = 3
    WINDOW_EVENT_CLOSE_REQUEST = 4
    WINDOW_EVENT_GO_BACK_REQUEST = 5
    WINDOW_EVENT_DPI_CHANGE = 6
    WINDOW_EVENT_TITLEBAR_CHANGE = 7

class DisplayServer_WindowResizeEdge(Enum):
    WINDOW_EDGE_TOP_LEFT = 0
    WINDOW_EDGE_TOP = 1
    WINDOW_EDGE_TOP_RIGHT = 2
    WINDOW_EDGE_LEFT = 3
    WINDOW_EDGE_RIGHT = 4
    WINDOW_EDGE_BOTTOM_LEFT = 5
    WINDOW_EDGE_BOTTOM = 6
    WINDOW_EDGE_BOTTOM_RIGHT = 7
    WINDOW_EDGE_MAX = 8

class DisplayServer_VSyncMode(Enum):
    VSYNC_DISABLED = 0
    VSYNC_ENABLED = 1
    VSYNC_ADAPTIVE = 2
    VSYNC_MAILBOX = 3

class DisplayServer_HandleType(Enum):
    DISPLAY_HANDLE = 0
    WINDOW_HANDLE = 1
    WINDOW_VIEW = 2
    OPENGL_CONTEXT = 3
    EGL_DISPLAY = 4
    EGL_CONFIG = 5

class DisplayServer_TTSUtteranceEvent(Enum):
    TTS_UTTERANCE_STARTED = 0
    TTS_UTTERANCE_ENDED = 1
    TTS_UTTERANCE_CANCELED = 2
    TTS_UTTERANCE_BOUNDARY = 3

class ENetConnection(RefCounted):
    def create_host_bound(self, bind_address: 'String', bind_port: int, max_peers: int = default('''32'''), max_channels: int = default('''0'''), in_bandwidth: int = default('''0'''), out_bandwidth: int = default('''0''')) -> 'Error': ...
    def create_host(self, max_peers: int = default('''32'''), max_channels: int = default('''0'''), in_bandwidth: int = default('''0'''), out_bandwidth: int = default('''0''')) -> 'Error': ...
    def destroy(self) -> None: ...
    def connect_to_host(self, address: 'String', port: int, channels: int = default('''0'''), data: int = default('''0''')) -> 'ENetPacketPeer': ...
    def service(self, timeout: int = default('''0''')) -> 'Array': ...
    def flush(self) -> None: ...
    def bandwidth_limit(self, in_bandwidth: int = default('''0'''), out_bandwidth: int = default('''0''')) -> None: ...
    def channel_limit(self, limit: int) -> None: ...
    def broadcast(self, channel: int, packet: 'PackedByteArray', flags: int) -> None: ...
    def compress(self, mode: 'ENetConnection_CompressionMode') -> None: ...
    def dtls_server_setup(self, server_options: 'TLSOptions') -> 'Error': ...
    def dtls_client_setup(self, hostname: 'String', client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def refuse_new_connections(self, refuse: bool) -> None: ...
    def pop_statistic(self, statistic: 'ENetConnection_HostStatistic') -> float: ...
    def get_max_channels(self) -> int: ...
    def get_local_port(self) -> int: ...
    def get_peers(self) -> 'list[ENetPacketPeer]': ...
    def socket_send(self, destination_address: 'String', destination_port: int, packet: 'PackedByteArray') -> None: ...
    
class ENetConnection_CompressionMode(Enum):
    COMPRESS_NONE = 0
    COMPRESS_RANGE_CODER = 1
    COMPRESS_FASTLZ = 2
    COMPRESS_ZLIB = 3
    COMPRESS_ZSTD = 4

class ENetConnection_EventType(Enum):
    EVENT_ERROR = -1
    EVENT_NONE = 0
    EVENT_CONNECT = 1
    EVENT_DISCONNECT = 2
    EVENT_RECEIVE = 3

class ENetConnection_HostStatistic(Enum):
    HOST_TOTAL_SENT_DATA = 0
    HOST_TOTAL_SENT_PACKETS = 1
    HOST_TOTAL_RECEIVED_DATA = 2
    HOST_TOTAL_RECEIVED_PACKETS = 3

class ENetMultiplayerPeer(MultiplayerPeer):
    host: 'ENetConnection'
    def create_server(self, port: int, max_clients: int = default('''32'''), max_channels: int = default('''0'''), in_bandwidth: int = default('''0'''), out_bandwidth: int = default('''0''')) -> 'Error': ...
    def create_client(self, address: 'String', port: int, channel_count: int = default('''0'''), in_bandwidth: int = default('''0'''), out_bandwidth: int = default('''0'''), local_port: int = default('''0''')) -> 'Error': ...
    def create_mesh(self, unique_id: int) -> 'Error': ...
    def add_mesh_peer(self, peer_id: int, host: 'ENetConnection') -> 'Error': ...
    def set_bind_ip(self, ip: 'String') -> None: ...
    def get_host(self) -> 'ENetConnection': ...
    def get_peer(self, id: int) -> 'ENetPacketPeer': ...
    
class ENetPacketPeer(PacketPeer):
    PACKET_LOSS_SCALE = 65536
    PACKET_THROTTLE_SCALE = 32
    FLAG_RELIABLE = 1
    FLAG_UNSEQUENCED = 2
    FLAG_UNRELIABLE_FRAGMENT = 8
    
    def peer_disconnect(self, data: int = default('''0''')) -> None: ...
    def peer_disconnect_later(self, data: int = default('''0''')) -> None: ...
    def peer_disconnect_now(self, data: int = default('''0''')) -> None: ...
    def ping(self) -> None: ...
    def ping_interval(self, ping_interval: int) -> None: ...
    def reset(self) -> None: ...
    def send(self, channel: int, packet: 'PackedByteArray', flags: int) -> 'Error': ...
    def throttle_configure(self, interval: int, acceleration: int, deceleration: int) -> None: ...
    def set_timeout(self, timeout: int, timeout_min: int, timeout_max: int) -> None: ...
    def get_packet_flags(self) -> int: ...
    def get_remote_address(self) -> 'String': ...
    def get_remote_port(self) -> int: ...
    def get_statistic(self, statistic: 'ENetPacketPeer_PeerStatistic') -> float: ...
    def get_state(self) -> 'ENetPacketPeer_PeerState': ...
    def get_channels(self) -> int: ...
    def is_active(self) -> bool: ...
    
class ENetPacketPeer_PeerState(Enum):
    STATE_DISCONNECTED = 0
    STATE_CONNECTING = 1
    STATE_ACKNOWLEDGING_CONNECT = 2
    STATE_CONNECTION_PENDING = 3
    STATE_CONNECTION_SUCCEEDED = 4
    STATE_CONNECTED = 5
    STATE_DISCONNECT_LATER = 6
    STATE_DISCONNECTING = 7
    STATE_ACKNOWLEDGING_DISCONNECT = 8
    STATE_ZOMBIE = 9

class ENetPacketPeer_PeerStatistic(Enum):
    PEER_PACKET_LOSS = 0
    PEER_PACKET_LOSS_VARIANCE = 1
    PEER_PACKET_LOSS_EPOCH = 2
    PEER_ROUND_TRIP_TIME = 3
    PEER_ROUND_TRIP_TIME_VARIANCE = 4
    PEER_LAST_ROUND_TRIP_TIME = 5
    PEER_LAST_ROUND_TRIP_TIME_VARIANCE = 6
    PEER_PACKET_THROTTLE = 7
    PEER_PACKET_THROTTLE_LIMIT = 8
    PEER_PACKET_THROTTLE_COUNTER = 9
    PEER_PACKET_THROTTLE_EPOCH = 10
    PEER_PACKET_THROTTLE_ACCELERATION = 11
    PEER_PACKET_THROTTLE_DECELERATION = 12
    PEER_PACKET_THROTTLE_INTERVAL = 13

class EditorCommandPalette(ConfirmationDialog):
    def add_command(self, command_name: 'String', key_name: 'String', binded_callable: 'Callable', shortcut_text: 'String' = default('''"None"''')) -> None: ...
    def remove_command(self, key_name: 'String') -> None: ...
    
class EditorContextMenuPlugin(RefCounted):
    def _popup_menu(self, paths: 'PackedStringArray') -> None: ...
    def add_menu_shortcut(self, shortcut: 'Shortcut', callback: 'Callable') -> None: ...
    def add_context_menu_item(self, name: 'String', callback: 'Callable', icon: 'Texture2D' = default('''null''')) -> None: ...
    def add_context_menu_item_from_shortcut(self, name: 'String', shortcut: 'Shortcut', icon: 'Texture2D' = default('''null''')) -> None: ...
    def add_context_submenu_item(self, name: 'String', menu: 'PopupMenu', icon: 'Texture2D' = default('''null''')) -> None: ...
    
class EditorContextMenuPlugin_ContextMenuSlot(Enum):
    CONTEXT_SLOT_SCENE_TREE = 0
    CONTEXT_SLOT_FILESYSTEM = 1
    CONTEXT_SLOT_SCRIPT_EDITOR = 2
    CONTEXT_SLOT_FILESYSTEM_CREATE = 3
    CONTEXT_SLOT_SCRIPT_EDITOR_CODE = 4
    CONTEXT_SLOT_SCENE_TABS = 5
    CONTEXT_SLOT_2D_EDITOR = 6

class EditorDebuggerPlugin(RefCounted):
    def _setup_session(self, session_id: int) -> None: ...
    def _has_capture(self, capture: 'String') -> bool: ...
    def _capture(self, message: 'String', data: 'Array', session_id: int) -> bool: ...
    def _goto_script_line(self, script: 'Script', line: int) -> None: ...
    def _breakpoints_cleared_in_tree(self) -> None: ...
    def _breakpoint_set_in_tree(self, script: 'Script', line: int, enabled: bool) -> None: ...
    def get_session(self, id: int) -> 'EditorDebuggerSession': ...
    def get_sessions(self) -> 'Array': ...
    
class EditorDebuggerSession(RefCounted):
    started: Signal[Callable[[], None]]  # started()
    stopped: Signal[Callable[[], None]]  # stopped()
    breaked: Signal[Callable[['bool'], None]]  # breaked(can_debug: bool)
    continued: Signal[Callable[[], None]]  # continued()
    def send_message(self, message: 'String', data: 'Array' = default('''[]''')) -> None: ...
    def toggle_profiler(self, profiler: 'String', enable: bool, data: 'Array' = default('''[]''')) -> None: ...
    def is_breaked(self) -> bool: ...
    def is_debuggable(self) -> bool: ...
    def is_active(self) -> bool: ...
    def add_session_tab(self, control: 'Control') -> None: ...
    def remove_session_tab(self, control: 'Control') -> None: ...
    def set_breakpoint(self, path: 'String', line: int, enabled: bool) -> None: ...
    
class EditorExportPlatform(RefCounted):
    def get_os_name(self) -> 'String': ...
    def create_preset(self) -> 'EditorExportPreset': ...
    def find_export_template(self, template_file_name: 'String') -> 'Dictionary': ...
    def get_current_presets(self) -> 'Array': ...
    def save_pack(self, preset: 'EditorExportPreset', debug: bool, path: 'String', embed: bool = default('''false''')) -> 'Dictionary': ...
    def save_zip(self, preset: 'EditorExportPreset', debug: bool, path: 'String') -> 'Dictionary': ...
    def save_pack_patch(self, preset: 'EditorExportPreset', debug: bool, path: 'String') -> 'Dictionary': ...
    def save_zip_patch(self, preset: 'EditorExportPreset', debug: bool, path: 'String') -> 'Dictionary': ...
    def gen_export_flags(self, flags: 'EditorExportPlatform_DebugFlags') -> 'PackedStringArray': ...
    def export_project_files(self, preset: 'EditorExportPreset', debug: bool, save_cb: 'Callable', shared_cb: 'Callable' = default('''Callable()''')) -> 'Error': ...
    def export_project(self, preset: 'EditorExportPreset', debug: bool, path: 'String', flags: 'EditorExportPlatform_DebugFlags' = default('''0''')) -> 'Error': ...
    def export_pack(self, preset: 'EditorExportPreset', debug: bool, path: 'String', flags: 'EditorExportPlatform_DebugFlags' = default('''0''')) -> 'Error': ...
    def export_zip(self, preset: 'EditorExportPreset', debug: bool, path: 'String', flags: 'EditorExportPlatform_DebugFlags' = default('''0''')) -> 'Error': ...
    def export_pack_patch(self, preset: 'EditorExportPreset', debug: bool, path: 'String', patches: 'PackedStringArray' = default('''PackedStringArray()'''), flags: 'EditorExportPlatform_DebugFlags' = default('''0''')) -> 'Error': ...
    def export_zip_patch(self, preset: 'EditorExportPreset', debug: bool, path: 'String', patches: 'PackedStringArray' = default('''PackedStringArray()'''), flags: 'EditorExportPlatform_DebugFlags' = default('''0''')) -> 'Error': ...
    def clear_messages(self) -> None: ...
    def add_message(self, type: 'EditorExportPlatform_ExportMessageType', category: 'String', message: 'String') -> None: ...
    def get_message_count(self) -> int: ...
    def get_message_type(self, index: int) -> 'EditorExportPlatform_ExportMessageType': ...
    def get_message_category(self, index: int) -> 'String': ...
    def get_message_text(self, index: int) -> 'String': ...
    def get_worst_message_type(self) -> 'EditorExportPlatform_ExportMessageType': ...
    def ssh_run_on_remote(self, host: 'String', port: 'String', ssh_arg: 'PackedStringArray', cmd_args: 'String', output: 'Array' = default('''[]'''), port_fwd: int = default('''-1''')) -> 'Error': ...
    def ssh_run_on_remote_no_wait(self, host: 'String', port: 'String', ssh_args: 'PackedStringArray', cmd_args: 'String', port_fwd: int = default('''-1''')) -> int: ...
    def ssh_push_to_remote(self, host: 'String', port: 'String', scp_args: 'PackedStringArray', src_file: 'String', dst_file: 'String') -> 'Error': ...
    def get_internal_export_files(self, preset: 'EditorExportPreset', debug: bool) -> 'Dictionary': ...
    @staticmethod
    def get_forced_export_files() -> 'PackedStringArray': ...
    
class EditorExportPlatform_ExportMessageType(Enum):
    EXPORT_MESSAGE_NONE = 0
    EXPORT_MESSAGE_INFO = 1
    EXPORT_MESSAGE_WARNING = 2
    EXPORT_MESSAGE_ERROR = 3

class EditorExportPlatform_DebugFlags(Enum):
    DEBUG_FLAG_DUMB_CLIENT = 1
    DEBUG_FLAG_REMOTE_DEBUG = 2
    DEBUG_FLAG_REMOTE_DEBUG_LOCALHOST = 4
    DEBUG_FLAG_VIEW_COLLISIONS = 8
    DEBUG_FLAG_VIEW_NAVIGATION = 16

class EditorExportPlatformAndroid(EditorExportPlatform):
    pass
    
class EditorExportPlatformExtension(EditorExportPlatform):
    def _get_preset_features(self, preset: 'EditorExportPreset') -> 'PackedStringArray': ...
    def _is_executable(self, path: 'String') -> bool: ...
    def _get_export_options(self) -> 'list[Dictionary]': ...
    def _should_update_export_options(self) -> bool: ...
    def _get_export_option_visibility(self, preset: 'EditorExportPreset', option: 'String') -> bool: ...
    def _get_export_option_warning(self, preset: 'EditorExportPreset', option: 'StringName') -> 'String': ...
    def _get_os_name(self) -> 'String': ...
    def _get_name(self) -> 'String': ...
    def _get_logo(self) -> 'Texture2D': ...
    def _poll_export(self) -> bool: ...
    def _get_options_count(self) -> int: ...
    def _get_options_tooltip(self) -> 'String': ...
    def _get_option_icon(self, device: int) -> 'ImageTexture': ...
    def _get_option_label(self, device: int) -> 'String': ...
    def _get_option_tooltip(self, device: int) -> 'String': ...
    def _get_device_architecture(self, device: int) -> 'String': ...
    def _cleanup(self) -> None: ...
    def _run(self, preset: 'EditorExportPreset', device: int, debug_flags: 'EditorExportPlatform_DebugFlags') -> 'Error': ...
    def _get_run_icon(self) -> 'Texture2D': ...
    def _can_export(self, preset: 'EditorExportPreset', debug: bool) -> bool: ...
    def _has_valid_export_configuration(self, preset: 'EditorExportPreset', debug: bool) -> bool: ...
    def _has_valid_project_configuration(self, preset: 'EditorExportPreset') -> bool: ...
    def _get_binary_extensions(self, preset: 'EditorExportPreset') -> 'PackedStringArray': ...
    def _export_project(self, preset: 'EditorExportPreset', debug: bool, path: 'String', flags: 'EditorExportPlatform_DebugFlags') -> 'Error': ...
    def _export_pack(self, preset: 'EditorExportPreset', debug: bool, path: 'String', flags: 'EditorExportPlatform_DebugFlags') -> 'Error': ...
    def _export_zip(self, preset: 'EditorExportPreset', debug: bool, path: 'String', flags: 'EditorExportPlatform_DebugFlags') -> 'Error': ...
    def _export_pack_patch(self, preset: 'EditorExportPreset', debug: bool, path: 'String', patches: 'PackedStringArray', flags: 'EditorExportPlatform_DebugFlags') -> 'Error': ...
    def _export_zip_patch(self, preset: 'EditorExportPreset', debug: bool, path: 'String', patches: 'PackedStringArray', flags: 'EditorExportPlatform_DebugFlags') -> 'Error': ...
    def _get_platform_features(self) -> 'PackedStringArray': ...
    def _get_debug_protocol(self) -> 'String': ...
    def set_config_error(self, error_text: 'String') -> None: ...
    def get_config_error(self) -> 'String': ...
    def set_config_missing_templates(self, missing_templates: bool) -> None: ...
    def get_config_missing_templates(self) -> bool: ...
    
class EditorExportPlatformIOS(EditorExportPlatform):
    pass
    
class EditorExportPlatformLinuxBSD(EditorExportPlatformPC):
    pass
    
class EditorExportPlatformMacOS(EditorExportPlatform):
    pass
    
class EditorExportPlatformPC(EditorExportPlatform):
    pass
    
class EditorExportPlatformWeb(EditorExportPlatform):
    pass
    
class EditorExportPlatformWindows(EditorExportPlatformPC):
    pass
    
class EditorExportPlugin(RefCounted):
    def _export_file(self, path: 'String', type: 'String', features: 'PackedStringArray') -> None: ...
    def _export_begin(self, features: 'PackedStringArray', is_debug: bool, path: 'String', flags: int) -> None: ...
    def _export_end(self) -> None: ...
    def _begin_customize_resources(self, platform: 'EditorExportPlatform', features: 'PackedStringArray') -> bool: ...
    def _customize_resource(self, resource: 'Resource', path: 'String') -> 'Resource': ...
    def _begin_customize_scenes(self, platform: 'EditorExportPlatform', features: 'PackedStringArray') -> bool: ...
    def _customize_scene(self, scene: 'Node', path: 'String') -> 'Node': ...
    def _get_customization_configuration_hash(self) -> int: ...
    def _end_customize_scenes(self) -> None: ...
    def _end_customize_resources(self) -> None: ...
    def _get_export_options(self, platform: 'EditorExportPlatform') -> 'list[Dictionary]': ...
    def _get_export_options_overrides(self, platform: 'EditorExportPlatform') -> 'Dictionary': ...
    def _should_update_export_options(self, platform: 'EditorExportPlatform') -> bool: ...
    def _get_export_option_visibility(self, platform: 'EditorExportPlatform', option: 'String') -> bool: ...
    def _get_export_option_warning(self, platform: 'EditorExportPlatform', option: 'String') -> 'String': ...
    def _get_export_features(self, platform: 'EditorExportPlatform', debug: bool) -> 'PackedStringArray': ...
    def _get_name(self) -> 'String': ...
    def _supports_platform(self, platform: 'EditorExportPlatform') -> bool: ...
    def _get_android_dependencies(self, platform: 'EditorExportPlatform', debug: bool) -> 'PackedStringArray': ...
    def _get_android_dependencies_maven_repos(self, platform: 'EditorExportPlatform', debug: bool) -> 'PackedStringArray': ...
    def _get_android_libraries(self, platform: 'EditorExportPlatform', debug: bool) -> 'PackedStringArray': ...
    def _get_android_manifest_activity_element_contents(self, platform: 'EditorExportPlatform', debug: bool) -> 'String': ...
    def _get_android_manifest_application_element_contents(self, platform: 'EditorExportPlatform', debug: bool) -> 'String': ...
    def _get_android_manifest_element_contents(self, platform: 'EditorExportPlatform', debug: bool) -> 'String': ...
    def add_shared_object(self, path: 'String', tags: 'PackedStringArray', target: 'String') -> None: ...
    def add_ios_project_static_lib(self, path: 'String') -> None: ...
    def add_file(self, path: 'String', file: 'PackedByteArray', remap: bool) -> None: ...
    def add_ios_framework(self, path: 'String') -> None: ...
    def add_ios_embedded_framework(self, path: 'String') -> None: ...
    def add_ios_plist_content(self, plist_content: 'String') -> None: ...
    def add_ios_linker_flags(self, flags: 'String') -> None: ...
    def add_ios_bundle_file(self, path: 'String') -> None: ...
    def add_ios_cpp_code(self, code: 'String') -> None: ...
    def add_macos_plugin_file(self, path: 'String') -> None: ...
    def skip(self) -> None: ...
    def get_option(self, name: 'StringName') -> 'Variant': ...
    def get_export_preset(self) -> 'EditorExportPreset': ...
    def get_export_platform(self) -> 'EditorExportPlatform': ...
    
class EditorExportPreset(RefCounted):
    def has(self, property: 'StringName') -> bool: ...
    def get_files_to_export(self) -> 'PackedStringArray': ...
    def get_customized_files(self) -> 'Dictionary': ...
    def get_customized_files_count(self) -> int: ...
    def has_export_file(self, path: 'String') -> bool: ...
    def get_file_export_mode(self, path: 'String', default: 'EditorExportPreset_FileExportMode' = default('''0''')) -> 'EditorExportPreset_FileExportMode': ...
    def get_preset_name(self) -> 'String': ...
    def is_runnable(self) -> bool: ...
    def are_advanced_options_enabled(self) -> bool: ...
    def is_dedicated_server(self) -> bool: ...
    def get_export_filter(self) -> 'EditorExportPreset_ExportFilter': ...
    def get_include_filter(self) -> 'String': ...
    def get_exclude_filter(self) -> 'String': ...
    def get_custom_features(self) -> 'String': ...
    def get_patches(self) -> 'PackedStringArray': ...
    def get_export_path(self) -> 'String': ...
    def get_encryption_in_filter(self) -> 'String': ...
    def get_encryption_ex_filter(self) -> 'String': ...
    def get_encrypt_pck(self) -> bool: ...
    def get_encrypt_directory(self) -> bool: ...
    def get_encryption_key(self) -> 'String': ...
    def get_script_export_mode(self) -> int: ...
    def get_or_env(self, name: 'StringName', env_var: 'String') -> 'Variant': ...
    def get_version(self, name: 'StringName', windows_version: bool) -> 'String': ...
    
class EditorExportPreset_ExportFilter(Enum):
    EXPORT_ALL_RESOURCES = 0
    EXPORT_SELECTED_SCENES = 1
    EXPORT_SELECTED_RESOURCES = 2
    EXCLUDE_SELECTED_RESOURCES = 3
    EXPORT_CUSTOMIZED = 4

class EditorExportPreset_FileExportMode(Enum):
    MODE_FILE_NOT_CUSTOMIZED = 0
    MODE_FILE_STRIP = 1
    MODE_FILE_KEEP = 2
    MODE_FILE_REMOVE = 3

class EditorExportPreset_ScriptExportMode(Enum):
    MODE_SCRIPT_TEXT = 0
    MODE_SCRIPT_BINARY_TOKENS = 1
    MODE_SCRIPT_BINARY_TOKENS_COMPRESSED = 2

class EditorFeatureProfile(RefCounted):
    def set_disable_class(self, class_name: 'StringName', disable: bool) -> None: ...
    def is_class_disabled(self, class_name: 'StringName') -> bool: ...
    def set_disable_class_editor(self, class_name: 'StringName', disable: bool) -> None: ...
    def is_class_editor_disabled(self, class_name: 'StringName') -> bool: ...
    def set_disable_class_property(self, class_name: 'StringName', property: 'StringName', disable: bool) -> None: ...
    def is_class_property_disabled(self, class_name: 'StringName', property: 'StringName') -> bool: ...
    def set_disable_feature(self, feature: 'EditorFeatureProfile_Feature', disable: bool) -> None: ...
    def is_feature_disabled(self, feature: 'EditorFeatureProfile_Feature') -> bool: ...
    def get_feature_name(self, feature: 'EditorFeatureProfile_Feature') -> 'String': ...
    def save_to_file(self, path: 'String') -> 'Error': ...
    def load_from_file(self, path: 'String') -> 'Error': ...
    
class EditorFeatureProfile_Feature(Enum):
    FEATURE_3D = 0
    FEATURE_SCRIPT = 1
    FEATURE_ASSET_LIB = 2
    FEATURE_SCENE_TREE = 3
    FEATURE_NODE_DOCK = 4
    FEATURE_FILESYSTEM_DOCK = 5
    FEATURE_IMPORT_DOCK = 6
    FEATURE_HISTORY_DOCK = 7
    FEATURE_GAME = 8
    FEATURE_MAX = 9

class EditorFileDialog(ConfirmationDialog):
    access: int
    display_mode: int
    file_mode: int
    current_dir: 'String'
    current_file: 'String'
    current_path: 'String'
    filters: 'PackedStringArray'
    option_count: int
    show_hidden_files: bool
    disable_overwrite_warning: bool
    file_selected: Signal[Callable[['String'], None]]  # file_selected(path: 'String')
    files_selected: Signal[Callable[['PackedStringArray'], None]]  # files_selected(paths: 'PackedStringArray')
    dir_selected: Signal[Callable[['String'], None]]  # dir_selected(dir: 'String')
    filename_filter_changed: Signal[Callable[['String'], None]]  # filename_filter_changed(filter: 'String')
    def clear_filters(self) -> None: ...
    def add_filter(self, filter: 'String', description: 'String' = default('''""''')) -> None: ...
    def set_filters(self, filters: 'PackedStringArray') -> None: ...
    def get_filters(self) -> 'PackedStringArray': ...
    def get_option_name(self, option: int) -> 'String': ...
    def get_option_values(self, option: int) -> 'PackedStringArray': ...
    def get_option_default(self, option: int) -> int: ...
    def set_option_name(self, option: int, name: 'String') -> None: ...
    def set_option_values(self, option: int, values: 'PackedStringArray') -> None: ...
    def set_option_default(self, option: int, default_value_index: int) -> None: ...
    def set_option_count(self, count: int) -> None: ...
    def get_option_count(self) -> int: ...
    def add_option(self, name: 'String', values: 'PackedStringArray', default_value_index: int) -> None: ...
    def get_selected_options(self) -> 'Dictionary': ...
    def clear_filename_filter(self) -> None: ...
    def set_filename_filter(self, filter: 'String') -> None: ...
    def get_filename_filter(self) -> 'String': ...
    def get_current_dir(self) -> 'String': ...
    def get_current_file(self) -> 'String': ...
    def get_current_path(self) -> 'String': ...
    def set_current_dir(self, dir: 'String') -> None: ...
    def set_current_file(self, file: 'String') -> None: ...
    def set_current_path(self, path: 'String') -> None: ...
    def set_file_mode(self, mode: 'EditorFileDialog_FileMode') -> None: ...
    def get_file_mode(self) -> 'EditorFileDialog_FileMode': ...
    def get_vbox(self) -> 'VBoxContainer': ...
    def get_line_edit(self) -> 'LineEdit': ...
    def set_access(self, access: 'EditorFileDialog_Access') -> None: ...
    def get_access(self) -> 'EditorFileDialog_Access': ...
    def set_show_hidden_files(self, show: bool) -> None: ...
    def is_showing_hidden_files(self) -> bool: ...
    def set_display_mode(self, mode: 'EditorFileDialog_DisplayMode') -> None: ...
    def get_display_mode(self) -> 'EditorFileDialog_DisplayMode': ...
    def set_disable_overwrite_warning(self, disable: bool) -> None: ...
    def is_overwrite_warning_disabled(self) -> bool: ...
    def add_side_menu(self, menu: 'Control', title: 'String' = default('''""''')) -> None: ...
    def popup_file_dialog(self) -> None: ...
    def invalidate(self) -> None: ...
    
class EditorFileDialog_FileMode(Enum):
    FILE_MODE_OPEN_FILE = 0
    FILE_MODE_OPEN_FILES = 1
    FILE_MODE_OPEN_DIR = 2
    FILE_MODE_OPEN_ANY = 3
    FILE_MODE_SAVE_FILE = 4

class EditorFileDialog_Access(Enum):
    ACCESS_RESOURCES = 0
    ACCESS_USERDATA = 1
    ACCESS_FILESYSTEM = 2

class EditorFileDialog_DisplayMode(Enum):
    DISPLAY_THUMBNAILS = 0
    DISPLAY_LIST = 1

class EditorFileSystem(Node):
    filesystem_changed: Signal[Callable[[], None]]  # filesystem_changed()
    script_classes_updated: Signal[Callable[[], None]]  # script_classes_updated()
    sources_changed: Signal[Callable[['bool'], None]]  # sources_changed(exist: bool)
    resources_reimporting: Signal[Callable[['PackedStringArray'], None]]  # resources_reimporting(resources: 'PackedStringArray')
    resources_reimported: Signal[Callable[['PackedStringArray'], None]]  # resources_reimported(resources: 'PackedStringArray')
    resources_reload: Signal[Callable[['PackedStringArray'], None]]  # resources_reload(resources: 'PackedStringArray')
    def get_filesystem(self) -> 'EditorFileSystemDirectory': ...
    def is_scanning(self) -> bool: ...
    def get_scanning_progress(self) -> float: ...
    def scan(self) -> None: ...
    def scan_sources(self) -> None: ...
    def update_file(self, path: 'String') -> None: ...
    def get_filesystem_path(self, path: 'String') -> 'EditorFileSystemDirectory': ...
    def get_file_type(self, path: 'String') -> 'String': ...
    def reimport_files(self, files: 'PackedStringArray') -> None: ...
    
class EditorFileSystemDirectory(Object):
    def get_subdir_count(self) -> int: ...
    def get_subdir(self, idx: int) -> 'EditorFileSystemDirectory': ...
    def get_file_count(self) -> int: ...
    def get_file(self, idx: int) -> 'String': ...
    def get_file_path(self, idx: int) -> 'String': ...
    def get_file_type(self, idx: int) -> 'StringName': ...
    def get_file_script_class_name(self, idx: int) -> 'String': ...
    def get_file_script_class_extends(self, idx: int) -> 'String': ...
    def get_file_import_is_valid(self, idx: int) -> bool: ...
    def get_name(self) -> 'String': ...
    def get_path(self) -> 'String': ...
    def get_parent(self) -> 'EditorFileSystemDirectory': ...
    def find_file_index(self, name: 'String') -> int: ...
    def find_dir_index(self, name: 'String') -> int: ...
    
class EditorFileSystemImportFormatSupportQuery(RefCounted):
    def _is_active(self) -> bool: ...
    def _get_file_extensions(self) -> 'PackedStringArray': ...
    def _query(self) -> bool: ...
    
class EditorImportPlugin(ResourceImporter):
    def _get_importer_name(self) -> 'String': ...
    def _get_visible_name(self) -> 'String': ...
    def _get_preset_count(self) -> int: ...
    def _get_preset_name(self, preset_index: int) -> 'String': ...
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _get_import_options(self, path: 'String', preset_index: int) -> 'list[Dictionary]': ...
    def _get_save_extension(self) -> 'String': ...
    def _get_resource_type(self) -> 'String': ...
    def _get_priority(self) -> float: ...
    def _get_import_order(self) -> int: ...
    def _get_format_version(self) -> int: ...
    def _get_option_visibility(self, path: 'String', option_name: 'StringName', options: 'Dictionary') -> bool: ...
    def _import(self, source_file: 'String', save_path: 'String', options: 'Dictionary', platform_variants: 'list[String]', gen_files: 'list[String]') -> 'Error': ...
    def _can_import_threaded(self) -> bool: ...
    def append_import_external_resource(self, path: 'String', custom_options: 'Dictionary' = default('''{}'''), custom_importer: 'String' = default('''""'''), generator_parameters: 'Variant' = default('''null''')) -> 'Error': ...
    
class EditorInspector(ScrollContainer):
    property_selected: Signal[Callable[['String'], None]]  # property_selected(property: 'String')
    property_keyed: Signal[Callable[['String', 'Variant', 'bool'], None]]  # property_keyed(property: 'String', value: 'Variant', advance: bool)
    property_deleted: Signal[Callable[['String'], None]]  # property_deleted(property: 'String')
    resource_selected: Signal[Callable[['Resource', 'String'], None]]  # resource_selected(resource: 'Resource', path: 'String')
    object_id_selected: Signal[Callable[['int'], None]]  # object_id_selected(id: int)
    property_edited: Signal[Callable[['String'], None]]  # property_edited(property: 'String')
    property_toggled: Signal[Callable[['String', 'bool'], None]]  # property_toggled(property: 'String', checked: bool)
    edited_object_changed: Signal[Callable[[], None]]  # edited_object_changed()
    restart_requested: Signal[Callable[[], None]]  # restart_requested()
    def edit(self, object: 'Object') -> None: ...
    def get_selected_path(self) -> 'String': ...
    def get_edited_object(self) -> 'Object': ...
    @staticmethod
    def instantiate_property_editor(object: 'Object', type: 'Variant_Type', path: 'String', hint: 'PropertyHint', hint_text: 'String', usage: int, wide: bool = default('''false''')) -> 'EditorProperty': ...
    
class EditorInspectorPlugin(RefCounted):
    def _can_handle(self, object: 'Object') -> bool: ...
    def _parse_begin(self, object: 'Object') -> None: ...
    def _parse_category(self, object: 'Object', category: 'String') -> None: ...
    def _parse_group(self, object: 'Object', group: 'String') -> None: ...
    def _parse_property(self, object: 'Object', type: 'Variant_Type', name: 'String', hint_type: 'PropertyHint', hint_string: 'String', usage_flags: 'PropertyUsageFlags', wide: bool) -> bool: ...
    def _parse_end(self, object: 'Object') -> None: ...
    def add_custom_control(self, control: 'Control') -> None: ...
    def add_property_editor(self, property: 'String', editor: 'Control', add_to_end: bool = default('''false'''), label: 'String' = default('''""''')) -> None: ...
    def add_property_editor_for_multiple_properties(self, label: 'String', properties: 'PackedStringArray', editor: 'Control') -> None: ...
    
class EditorInterface(Object):
    distraction_free_mode: bool
    movie_maker_enabled: bool
    def restart_editor(self, save: bool = default('''true''')) -> None: ...
    def get_command_palette(self) -> 'EditorCommandPalette': ...
    def get_resource_filesystem(self) -> 'EditorFileSystem': ...
    def get_editor_paths(self) -> 'EditorPaths': ...
    def get_resource_previewer(self) -> 'EditorResourcePreview': ...
    def get_selection(self) -> 'EditorSelection': ...
    def get_editor_settings(self) -> 'EditorSettings': ...
    def get_editor_toaster(self) -> 'EditorToaster': ...
    def get_editor_undo_redo(self) -> 'EditorUndoRedoManager': ...
    def make_mesh_previews(self, meshes: 'list[Mesh]', preview_size: int) -> 'list[Texture2D]': ...
    def set_plugin_enabled(self, plugin: 'String', enabled: bool) -> None: ...
    def is_plugin_enabled(self, plugin: 'String') -> bool: ...
    def get_editor_theme(self) -> 'Theme': ...
    def get_base_control(self) -> 'Control': ...
    def get_editor_main_screen(self) -> 'VBoxContainer': ...
    def get_script_editor(self) -> 'ScriptEditor': ...
    def get_editor_viewport_2d(self) -> 'SubViewport': ...
    def get_editor_viewport_3d(self, idx: int = default('''0''')) -> 'SubViewport': ...
    def set_main_screen_editor(self, name: 'String') -> None: ...
    def set_distraction_free_mode(self, enter: bool) -> None: ...
    def is_distraction_free_mode_enabled(self) -> bool: ...
    def is_multi_window_enabled(self) -> bool: ...
    def get_editor_scale(self) -> float: ...
    def popup_dialog(self, dialog: 'Window', rect: 'Rect2i' = default('''Rect2i(0, 0, 0, 0)''')) -> None: ...
    def popup_dialog_centered(self, dialog: 'Window', minsize: 'Vector2i' = default('''Vector2i(0, 0)''')) -> None: ...
    def popup_dialog_centered_ratio(self, dialog: 'Window', ratio: float = default('''0.8''')) -> None: ...
    def popup_dialog_centered_clamped(self, dialog: 'Window', minsize: 'Vector2i' = default('''Vector2i(0, 0)'''), fallback_ratio: float = default('''0.75''')) -> None: ...
    def get_current_feature_profile(self) -> 'String': ...
    def set_current_feature_profile(self, profile_name: 'String') -> None: ...
    def popup_node_selector(self, callback: 'Callable', valid_types: 'list[StringName]' = default('''Array[StringName]([])'''), current_value: 'Node' = default('''null''')) -> None: ...
    def popup_property_selector(self, object: 'Object', callback: 'Callable', type_filter: 'PackedInt32Array' = default('''PackedInt32Array()'''), current_value: 'String' = default('''""''')) -> None: ...
    def popup_method_selector(self, object: 'Object', callback: 'Callable', current_value: 'String' = default('''""''')) -> None: ...
    def popup_quick_open(self, callback: 'Callable', base_types: 'list[StringName]' = default('''Array[StringName]([])''')) -> None: ...
    def popup_create_dialog(self, callback: 'Callable', base_type: 'StringName' = default('''""'''), current_type: 'String' = default('''""'''), dialog_title: 'String' = default('''""'''), type_blocklist: 'list[StringName]' = default('''Array[StringName]([])''')) -> None: ...
    def get_file_system_dock(self) -> 'FileSystemDock': ...
    def select_file(self, file: 'String') -> None: ...
    def get_selected_paths(self) -> 'PackedStringArray': ...
    def get_current_path(self) -> 'String': ...
    def get_current_directory(self) -> 'String': ...
    def get_inspector(self) -> 'EditorInspector': ...
    def inspect_object(self, object: 'Object', for_property: 'String' = default('''""'''), inspector_only: bool = default('''false''')) -> None: ...
    def edit_resource(self, resource: 'Resource') -> None: ...
    def edit_node(self, node: 'Node') -> None: ...
    def edit_script(self, script: 'Script', line: int = default('''-1'''), column: int = default('''0'''), grab_focus: bool = default('''true''')) -> None: ...
    def open_scene_from_path(self, scene_filepath: 'String', set_inherited: bool = default('''false''')) -> None: ...
    def reload_scene_from_path(self, scene_filepath: 'String') -> None: ...
    def get_open_scenes(self) -> 'PackedStringArray': ...
    def get_edited_scene_root(self) -> 'Node': ...
    def save_scene(self) -> 'Error': ...
    def save_scene_as(self, path: 'String', with_preview: bool = default('''true''')) -> None: ...
    def save_all_scenes(self) -> None: ...
    def mark_scene_as_unsaved(self) -> None: ...
    def play_main_scene(self) -> None: ...
    def play_current_scene(self) -> None: ...
    def play_custom_scene(self, scene_filepath: 'String') -> None: ...
    def stop_playing_scene(self) -> None: ...
    def is_playing_scene(self) -> bool: ...
    def get_playing_scene(self) -> 'String': ...
    def set_movie_maker_enabled(self, enabled: bool) -> None: ...
    def is_movie_maker_enabled(self) -> bool: ...
    
class EditorNode3DGizmo(Node3DGizmo):
    def _redraw(self) -> None: ...
    def _get_handle_name(self, id: int, secondary: bool) -> 'String': ...
    def _is_handle_highlighted(self, id: int, secondary: bool) -> bool: ...
    def _get_handle_value(self, id: int, secondary: bool) -> 'Variant': ...
    def _begin_handle_action(self, id: int, secondary: bool) -> None: ...
    def _set_handle(self, id: int, secondary: bool, camera: 'Camera3D', point: 'Vector2') -> None: ...
    def _commit_handle(self, id: int, secondary: bool, restore: 'Variant', cancel: bool) -> None: ...
    def _subgizmos_intersect_ray(self, camera: 'Camera3D', point: 'Vector2') -> int: ...
    def _subgizmos_intersect_frustum(self, camera: 'Camera3D', frustum: 'list[Plane]') -> 'PackedInt32Array': ...
    def _set_subgizmo_transform(self, id: int, transform: 'Transform3D') -> None: ...
    def _get_subgizmo_transform(self, id: int) -> 'Transform3D': ...
    def _commit_subgizmos(self, ids: 'PackedInt32Array', restores: 'list[Transform3D]', cancel: bool) -> None: ...
    def add_lines(self, lines: 'PackedVector3Array', material: 'Material', billboard: bool = default('''false'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def add_mesh(self, mesh: 'Mesh', material: 'Material' = default('''null'''), transform: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)'''), skeleton: 'SkinReference' = default('''null''')) -> None: ...
    def add_collision_segments(self, segments: 'PackedVector3Array') -> None: ...
    def add_collision_triangles(self, triangles: 'TriangleMesh') -> None: ...
    def add_unscaled_billboard(self, material: 'Material', default_scale: float = default('''1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def add_handles(self, handles: 'PackedVector3Array', material: 'Material', ids: 'PackedInt32Array', billboard: bool = default('''false'''), secondary: bool = default('''false''')) -> None: ...
    def set_node_3d(self, node: 'Node') -> None: ...
    def get_node_3d(self) -> 'Node3D': ...
    def get_plugin(self) -> 'EditorNode3DGizmoPlugin': ...
    def clear(self) -> None: ...
    def set_hidden(self, hidden: bool) -> None: ...
    def is_subgizmo_selected(self, id: int) -> bool: ...
    def get_subgizmo_selection(self) -> 'PackedInt32Array': ...
    
class EditorNode3DGizmoPlugin(Resource):
    def _has_gizmo(self, for_node_3d: 'Node3D') -> bool: ...
    def _create_gizmo(self, for_node_3d: 'Node3D') -> 'EditorNode3DGizmo': ...
    def _get_gizmo_name(self) -> 'String': ...
    def _get_priority(self) -> int: ...
    def _can_be_hidden(self) -> bool: ...
    def _is_selectable_when_hidden(self) -> bool: ...
    def _redraw(self, gizmo: 'EditorNode3DGizmo') -> None: ...
    def _get_handle_name(self, gizmo: 'EditorNode3DGizmo', handle_id: int, secondary: bool) -> 'String': ...
    def _is_handle_highlighted(self, gizmo: 'EditorNode3DGizmo', handle_id: int, secondary: bool) -> bool: ...
    def _get_handle_value(self, gizmo: 'EditorNode3DGizmo', handle_id: int, secondary: bool) -> 'Variant': ...
    def _begin_handle_action(self, gizmo: 'EditorNode3DGizmo', handle_id: int, secondary: bool) -> None: ...
    def _set_handle(self, gizmo: 'EditorNode3DGizmo', handle_id: int, secondary: bool, camera: 'Camera3D', screen_pos: 'Vector2') -> None: ...
    def _commit_handle(self, gizmo: 'EditorNode3DGizmo', handle_id: int, secondary: bool, restore: 'Variant', cancel: bool) -> None: ...
    def _subgizmos_intersect_ray(self, gizmo: 'EditorNode3DGizmo', camera: 'Camera3D', screen_pos: 'Vector2') -> int: ...
    def _subgizmos_intersect_frustum(self, gizmo: 'EditorNode3DGizmo', camera: 'Camera3D', frustum_planes: 'list[Plane]') -> 'PackedInt32Array': ...
    def _get_subgizmo_transform(self, gizmo: 'EditorNode3DGizmo', subgizmo_id: int) -> 'Transform3D': ...
    def _set_subgizmo_transform(self, gizmo: 'EditorNode3DGizmo', subgizmo_id: int, transform: 'Transform3D') -> None: ...
    def _commit_subgizmos(self, gizmo: 'EditorNode3DGizmo', ids: 'PackedInt32Array', restores: 'list[Transform3D]', cancel: bool) -> None: ...
    def create_material(self, name: 'String', color: 'Color', billboard: bool = default('''false'''), on_top: bool = default('''false'''), use_vertex_color: bool = default('''false''')) -> None: ...
    def create_icon_material(self, name: 'String', texture: 'Texture2D', on_top: bool = default('''false'''), color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def create_handle_material(self, name: 'String', billboard: bool = default('''false'''), texture: 'Texture2D' = default('''null''')) -> None: ...
    def add_material(self, name: 'String', material: 'StandardMaterial3D') -> None: ...
    def get_material(self, name: 'String', gizmo: 'EditorNode3DGizmo' = default('''null''')) -> 'StandardMaterial3D': ...
    
class EditorPaths(Object):
    def get_data_dir(self) -> 'String': ...
    def get_config_dir(self) -> 'String': ...
    def get_cache_dir(self) -> 'String': ...
    def is_self_contained(self) -> bool: ...
    def get_self_contained_file(self) -> 'String': ...
    def get_project_settings_dir(self) -> 'String': ...
    
class EditorPlugin(Node):
    scene_changed: Signal[Callable[['Node'], None]]  # scene_changed(scene_root: 'Node')
    scene_closed: Signal[Callable[['String'], None]]  # scene_closed(filepath: 'String')
    main_screen_changed: Signal[Callable[['String'], None]]  # main_screen_changed(screen_name: 'String')
    resource_saved: Signal[Callable[['Resource'], None]]  # resource_saved(resource: 'Resource')
    scene_saved: Signal[Callable[['String'], None]]  # scene_saved(filepath: 'String')
    project_settings_changed: Signal[Callable[[], None]]  # project_settings_changed()
    def _forward_canvas_gui_input(self, event: 'InputEvent') -> bool: ...
    def _forward_canvas_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _forward_canvas_force_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _forward_3d_gui_input(self, viewport_camera: 'Camera3D', event: 'InputEvent') -> int: ...
    def _forward_3d_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _forward_3d_force_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _get_plugin_name(self) -> 'String': ...
    def _get_plugin_icon(self) -> 'Texture2D': ...
    def _has_main_screen(self) -> bool: ...
    def _make_visible(self, visible: bool) -> None: ...
    def _edit(self, object: 'Object') -> None: ...
    def _handles(self, object: 'Object') -> bool: ...
    def _get_state(self) -> 'Dictionary': ...
    def _set_state(self, state: 'Dictionary') -> None: ...
    def _clear(self) -> None: ...
    def _get_unsaved_status(self, for_scene: 'String') -> 'String': ...
    def _save_external_data(self) -> None: ...
    def _apply_changes(self) -> None: ...
    def _get_breakpoints(self) -> 'PackedStringArray': ...
    def _set_window_layout(self, configuration: 'ConfigFile') -> None: ...
    def _get_window_layout(self, configuration: 'ConfigFile') -> None: ...
    def _build(self) -> bool: ...
    def _enable_plugin(self) -> None: ...
    def _disable_plugin(self) -> None: ...
    def add_control_to_container(self, container: 'EditorPlugin_CustomControlContainer', control: 'Control') -> None: ...
    def add_control_to_bottom_panel(self, control: 'Control', title: 'String', shortcut: 'Shortcut' = default('''null''')) -> 'Button': ...
    def add_control_to_dock(self, slot: 'EditorPlugin_DockSlot', control: 'Control', shortcut: 'Shortcut' = default('''null''')) -> None: ...
    def remove_control_from_docks(self, control: 'Control') -> None: ...
    def remove_control_from_bottom_panel(self, control: 'Control') -> None: ...
    def remove_control_from_container(self, container: 'EditorPlugin_CustomControlContainer', control: 'Control') -> None: ...
    def set_dock_tab_icon(self, control: 'Control', icon: 'Texture2D') -> None: ...
    def add_tool_menu_item(self, name: 'String', callable: 'Callable') -> None: ...
    def add_tool_submenu_item(self, name: 'String', submenu: 'PopupMenu') -> None: ...
    def remove_tool_menu_item(self, name: 'String') -> None: ...
    def get_export_as_menu(self) -> 'PopupMenu': ...
    def add_custom_type(self, type: 'String', base: 'String', script: 'Script', icon: 'Texture2D') -> None: ...
    def remove_custom_type(self, type: 'String') -> None: ...
    def add_autoload_singleton(self, name: 'String', path: 'String') -> None: ...
    def remove_autoload_singleton(self, name: 'String') -> None: ...
    def update_overlays(self) -> int: ...
    def make_bottom_panel_item_visible(self, item: 'Control') -> None: ...
    def hide_bottom_panel(self) -> None: ...
    def get_undo_redo(self) -> 'EditorUndoRedoManager': ...
    def add_undo_redo_inspector_hook_callback(self, callable: 'Callable') -> None: ...
    def remove_undo_redo_inspector_hook_callback(self, callable: 'Callable') -> None: ...
    def queue_save_layout(self) -> None: ...
    def add_translation_parser_plugin(self, parser: 'EditorTranslationParserPlugin') -> None: ...
    def remove_translation_parser_plugin(self, parser: 'EditorTranslationParserPlugin') -> None: ...
    def add_import_plugin(self, importer: 'EditorImportPlugin', first_priority: bool = default('''false''')) -> None: ...
    def remove_import_plugin(self, importer: 'EditorImportPlugin') -> None: ...
    def add_scene_format_importer_plugin(self, scene_format_importer: 'EditorSceneFormatImporter', first_priority: bool = default('''false''')) -> None: ...
    def remove_scene_format_importer_plugin(self, scene_format_importer: 'EditorSceneFormatImporter') -> None: ...
    def add_scene_post_import_plugin(self, scene_import_plugin: 'EditorScenePostImportPlugin', first_priority: bool = default('''false''')) -> None: ...
    def remove_scene_post_import_plugin(self, scene_import_plugin: 'EditorScenePostImportPlugin') -> None: ...
    def add_export_plugin(self, plugin: 'EditorExportPlugin') -> None: ...
    def remove_export_plugin(self, plugin: 'EditorExportPlugin') -> None: ...
    def add_export_platform(self, platform: 'EditorExportPlatform') -> None: ...
    def remove_export_platform(self, platform: 'EditorExportPlatform') -> None: ...
    def add_node_3d_gizmo_plugin(self, plugin: 'EditorNode3DGizmoPlugin') -> None: ...
    def remove_node_3d_gizmo_plugin(self, plugin: 'EditorNode3DGizmoPlugin') -> None: ...
    def add_inspector_plugin(self, plugin: 'EditorInspectorPlugin') -> None: ...
    def remove_inspector_plugin(self, plugin: 'EditorInspectorPlugin') -> None: ...
    def add_resource_conversion_plugin(self, plugin: 'EditorResourceConversionPlugin') -> None: ...
    def remove_resource_conversion_plugin(self, plugin: 'EditorResourceConversionPlugin') -> None: ...
    def set_input_event_forwarding_always_enabled(self) -> None: ...
    def set_force_draw_over_forwarding_enabled(self) -> None: ...
    def add_context_menu_plugin(self, slot: 'EditorContextMenuPlugin_ContextMenuSlot', plugin: 'EditorContextMenuPlugin') -> None: ...
    def remove_context_menu_plugin(self, plugin: 'EditorContextMenuPlugin') -> None: ...
    def get_editor_interface(self) -> 'EditorInterface': ...
    def get_script_create_dialog(self) -> 'ScriptCreateDialog': ...
    def add_debugger_plugin(self, script: 'EditorDebuggerPlugin') -> None: ...
    def remove_debugger_plugin(self, script: 'EditorDebuggerPlugin') -> None: ...
    def get_plugin_version(self) -> 'String': ...
    
class EditorPlugin_CustomControlContainer(Enum):
    CONTAINER_TOOLBAR = 0
    CONTAINER_SPATIAL_EDITOR_MENU = 1
    CONTAINER_SPATIAL_EDITOR_SIDE_LEFT = 2
    CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT = 3
    CONTAINER_SPATIAL_EDITOR_BOTTOM = 4
    CONTAINER_CANVAS_EDITOR_MENU = 5
    CONTAINER_CANVAS_EDITOR_SIDE_LEFT = 6
    CONTAINER_CANVAS_EDITOR_SIDE_RIGHT = 7
    CONTAINER_CANVAS_EDITOR_BOTTOM = 8
    CONTAINER_INSPECTOR_BOTTOM = 9
    CONTAINER_PROJECT_SETTING_TAB_LEFT = 10
    CONTAINER_PROJECT_SETTING_TAB_RIGHT = 11

class EditorPlugin_DockSlot(Enum):
    DOCK_SLOT_LEFT_UL = 0
    DOCK_SLOT_LEFT_BL = 1
    DOCK_SLOT_LEFT_UR = 2
    DOCK_SLOT_LEFT_BR = 3
    DOCK_SLOT_RIGHT_UL = 4
    DOCK_SLOT_RIGHT_BL = 5
    DOCK_SLOT_RIGHT_UR = 6
    DOCK_SLOT_RIGHT_BR = 7
    DOCK_SLOT_MAX = 8

class EditorPlugin_AfterGUIInput(Enum):
    AFTER_GUI_INPUT_PASS = 0
    AFTER_GUI_INPUT_STOP = 1
    AFTER_GUI_INPUT_CUSTOM = 2

class EditorProperty(Container):
    label: 'String'
    read_only: bool
    draw_label: bool
    draw_background: bool
    checkable: bool
    checked: bool
    draw_warning: bool
    keying: bool
    deletable: bool
    selectable: bool
    use_folding: bool
    name_split_ratio: float
    property_changed: Signal[Callable[['StringName', 'Variant', 'StringName', 'bool'], None]]  # property_changed(property: 'StringName', value: 'Variant', field: 'StringName', changing: bool)
    multiple_properties_changed: Signal[Callable[['PackedStringArray', 'Array'], None]]  # multiple_properties_changed(properties: 'PackedStringArray', value: 'Array')
    property_keyed: Signal[Callable[['StringName'], None]]  # property_keyed(property: 'StringName')
    property_deleted: Signal[Callable[['StringName'], None]]  # property_deleted(property: 'StringName')
    property_keyed_with_value: Signal[Callable[['StringName', 'Variant'], None]]  # property_keyed_with_value(property: 'StringName', value: 'Variant')
    property_checked: Signal[Callable[['StringName', 'bool'], None]]  # property_checked(property: 'StringName', checked: bool)
    property_favorited: Signal[Callable[['StringName', 'bool'], None]]  # property_favorited(property: 'StringName', favorited: bool)
    property_pinned: Signal[Callable[['StringName', 'bool'], None]]  # property_pinned(property: 'StringName', pinned: bool)
    property_can_revert_changed: Signal[Callable[['StringName', 'bool'], None]]  # property_can_revert_changed(property: 'StringName', can_revert: bool)
    resource_selected: Signal[Callable[['String', 'Resource'], None]]  # resource_selected(path: 'String', resource: 'Resource')
    object_id_selected: Signal[Callable[['StringName', 'int'], None]]  # object_id_selected(property: 'StringName', id: int)
    selected: Signal[Callable[['String', 'int'], None]]  # selected(path: 'String', focusable_idx: int)
    def _update_property(self) -> None: ...
    def _set_read_only(self, read_only: bool) -> None: ...
    def set_label(self, text: 'String') -> None: ...
    def get_label(self) -> 'String': ...
    def set_read_only(self, read_only: bool) -> None: ...
    def is_read_only(self) -> bool: ...
    def set_draw_label(self, draw_label: bool) -> None: ...
    def is_draw_label(self) -> bool: ...
    def set_draw_background(self, draw_background: bool) -> None: ...
    def is_draw_background(self) -> bool: ...
    def set_checkable(self, checkable: bool) -> None: ...
    def is_checkable(self) -> bool: ...
    def set_checked(self, checked: bool) -> None: ...
    def is_checked(self) -> bool: ...
    def set_draw_warning(self, draw_warning: bool) -> None: ...
    def is_draw_warning(self) -> bool: ...
    def set_keying(self, keying: bool) -> None: ...
    def is_keying(self) -> bool: ...
    def set_deletable(self, deletable: bool) -> None: ...
    def is_deletable(self) -> bool: ...
    def get_edited_property(self) -> 'StringName': ...
    def get_edited_object(self) -> 'Object': ...
    def update_property(self) -> None: ...
    def add_focusable(self, control: 'Control') -> None: ...
    def set_bottom_editor(self, editor: 'Control') -> None: ...
    def set_selectable(self, selectable: bool) -> None: ...
    def is_selectable(self) -> bool: ...
    def set_use_folding(self, use_folding: bool) -> None: ...
    def is_using_folding(self) -> bool: ...
    def set_name_split_ratio(self, ratio: float) -> None: ...
    def get_name_split_ratio(self) -> float: ...
    def deselect(self) -> None: ...
    def is_selected(self) -> bool: ...
    def select(self, focusable: int = default('''-1''')) -> None: ...
    def set_object_and_property(self, object: 'Object', property: 'StringName') -> None: ...
    def set_label_reference(self, control: 'Control') -> None: ...
    def emit_changed(self, property: 'StringName', value: 'Variant', field: 'StringName' = default('''&""'''), changing: bool = default('''false''')) -> None: ...
    
class EditorResourceConversionPlugin(RefCounted):
    def _converts_to(self) -> 'String': ...
    def _handles(self, resource: 'Resource') -> bool: ...
    def _convert(self, resource: 'Resource') -> 'Resource': ...
    
class EditorResourcePicker(HBoxContainer):
    base_type: 'String'
    edited_resource: 'Resource'
    editable: bool
    toggle_mode: bool
    resource_selected: Signal[Callable[['Resource', 'bool'], None]]  # resource_selected(resource: 'Resource', inspect: bool)
    resource_changed: Signal[Callable[['Resource'], None]]  # resource_changed(resource: 'Resource')
    def _set_create_options(self, menu_node: 'Object') -> None: ...
    def _handle_menu_selected(self, id: int) -> bool: ...
    def set_base_type(self, base_type: 'String') -> None: ...
    def get_base_type(self) -> 'String': ...
    def get_allowed_types(self) -> 'PackedStringArray': ...
    def set_edited_resource(self, resource: 'Resource') -> None: ...
    def get_edited_resource(self) -> 'Resource': ...
    def set_toggle_mode(self, enable: bool) -> None: ...
    def is_toggle_mode(self) -> bool: ...
    def set_toggle_pressed(self, pressed: bool) -> None: ...
    def set_editable(self, enable: bool) -> None: ...
    def is_editable(self) -> bool: ...
    
class EditorResourcePreview(Node):
    preview_invalidated: Signal[Callable[['String'], None]]  # preview_invalidated(path: 'String')
    def queue_resource_preview(self, path: 'String', receiver: 'Object', receiver_func: 'StringName', userdata: 'Variant') -> None: ...
    def queue_edited_resource_preview(self, resource: 'Resource', receiver: 'Object', receiver_func: 'StringName', userdata: 'Variant') -> None: ...
    def add_preview_generator(self, generator: 'EditorResourcePreviewGenerator') -> None: ...
    def remove_preview_generator(self, generator: 'EditorResourcePreviewGenerator') -> None: ...
    def check_for_invalidation(self, path: 'String') -> None: ...
    
class EditorResourcePreviewGenerator(RefCounted):
    def _handles(self, type: 'String') -> bool: ...
    def _generate(self, resource: 'Resource', size: 'Vector2i', metadata: 'Dictionary') -> 'Texture2D': ...
    def _generate_from_path(self, path: 'String', size: 'Vector2i', metadata: 'Dictionary') -> 'Texture2D': ...
    def _generate_small_preview_automatically(self) -> bool: ...
    def _can_generate_small_preview(self) -> bool: ...
    
class EditorResourceTooltipPlugin(RefCounted):
    def _handles(self, type: 'String') -> bool: ...
    def _make_tooltip_for_path(self, path: 'String', metadata: 'Dictionary', base: 'Control') -> 'Control': ...
    def request_thumbnail(self, path: 'String', control: 'TextureRect') -> None: ...
    
class EditorSceneFormatImporter(RefCounted):
    IMPORT_SCENE = 1
    IMPORT_ANIMATION = 2
    IMPORT_FAIL_ON_MISSING_DEPENDENCIES = 4
    IMPORT_GENERATE_TANGENT_ARRAYS = 8
    IMPORT_USE_NAMED_SKIN_BINDS = 16
    IMPORT_DISCARD_MESHES_AND_MATERIALS = 32
    IMPORT_FORCE_DISABLE_MESH_COMPRESSION = 64
    
    def _get_extensions(self) -> 'PackedStringArray': ...
    def _import_scene(self, path: 'String', flags: int, options: 'Dictionary') -> 'Object': ...
    def _get_import_options(self, path: 'String') -> None: ...
    def _get_option_visibility(self, path: 'String', for_animation: bool, option: 'String') -> 'Variant': ...
    def add_import_option(self, name: 'String', value: 'Variant') -> None: ...
    def add_import_option_advanced(self, type: 'Variant_Type', name: 'String', default_value: 'Variant', hint: 'PropertyHint' = default('''0'''), hint_string: 'String' = default('''""'''), usage_flags: int = default('''6''')) -> None: ...
    
class EditorSceneFormatImporterBlend(EditorSceneFormatImporter):
    pass
    
class EditorSceneFormatImporterFBX2GLTF(EditorSceneFormatImporter):
    pass
    
class EditorSceneFormatImporterGLTF(EditorSceneFormatImporter):
    pass
    
class EditorSceneFormatImporterUFBX(EditorSceneFormatImporter):
    pass
    
class EditorScenePostImport(RefCounted):
    def _post_import(self, scene: 'Node') -> 'Object': ...
    def get_source_file(self) -> 'String': ...
    
class EditorScenePostImportPlugin(RefCounted):
    def _get_internal_import_options(self, category: int) -> None: ...
    def _get_internal_option_visibility(self, category: int, for_animation: bool, option: 'String') -> 'Variant': ...
    def _get_internal_option_update_view_required(self, category: int, option: 'String') -> 'Variant': ...
    def _internal_process(self, category: int, base_node: 'Node', node: 'Node', resource: 'Resource') -> None: ...
    def _get_import_options(self, path: 'String') -> None: ...
    def _get_option_visibility(self, path: 'String', for_animation: bool, option: 'String') -> 'Variant': ...
    def _pre_process(self, scene: 'Node') -> None: ...
    def _post_process(self, scene: 'Node') -> None: ...
    def get_option_value(self, name: 'StringName') -> 'Variant': ...
    def add_import_option(self, name: 'String', value: 'Variant') -> None: ...
    def add_import_option_advanced(self, type: 'Variant_Type', name: 'String', default_value: 'Variant', hint: 'PropertyHint' = default('''0'''), hint_string: 'String' = default('''""'''), usage_flags: int = default('''6''')) -> None: ...
    
class EditorScenePostImportPlugin_InternalImportCategory(Enum):
    INTERNAL_IMPORT_CATEGORY_NODE = 0
    INTERNAL_IMPORT_CATEGORY_MESH_3D_NODE = 1
    INTERNAL_IMPORT_CATEGORY_MESH = 2
    INTERNAL_IMPORT_CATEGORY_MATERIAL = 3
    INTERNAL_IMPORT_CATEGORY_ANIMATION = 4
    INTERNAL_IMPORT_CATEGORY_ANIMATION_NODE = 5
    INTERNAL_IMPORT_CATEGORY_SKELETON_3D_NODE = 6
    INTERNAL_IMPORT_CATEGORY_MAX = 7

class EditorScript(RefCounted):
    def _run(self) -> None: ...
    def add_root_node(self, node: 'Node') -> None: ...
    def get_scene(self) -> 'Node': ...
    def get_editor_interface(self) -> 'EditorInterface': ...
    
class EditorScriptPicker(EditorResourcePicker):
    script_owner: 'Node'
    def set_script_owner(self, owner_node: 'Node') -> None: ...
    def get_script_owner(self) -> 'Node': ...
    
class EditorSelection(Object):
    selection_changed: Signal[Callable[[], None]]  # selection_changed()
    def clear(self) -> None: ...
    def add_node(self, node: 'Node') -> None: ...
    def remove_node(self, node: 'Node') -> None: ...
    def get_selected_nodes(self) -> 'list[Node]': ...
    def get_transformable_selected_nodes(self) -> 'list[Node]': ...
    
class EditorSettings(Resource):
    NOTIFICATION_EDITOR_SETTINGS_CHANGED = 10000
    
    settings_changed: Signal[Callable[[], None]]  # settings_changed()
    def has_setting(self, name: 'String') -> bool: ...
    def set_setting(self, name: 'String', value: 'Variant') -> None: ...
    def get_setting(self, name: 'String') -> 'Variant': ...
    def erase(self, property: 'String') -> None: ...
    def set_initial_value(self, name: 'StringName', value: 'Variant', update_current: bool) -> None: ...
    def add_property_info(self, info: 'Dictionary') -> None: ...
    def set_project_metadata(self, section: 'String', key: 'String', data: 'Variant') -> None: ...
    def get_project_metadata(self, section: 'String', key: 'String', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def set_favorites(self, dirs: 'PackedStringArray') -> None: ...
    def get_favorites(self) -> 'PackedStringArray': ...
    def set_recent_dirs(self, dirs: 'PackedStringArray') -> None: ...
    def get_recent_dirs(self) -> 'PackedStringArray': ...
    def set_builtin_action_override(self, name: 'String', actions_list: 'list[InputEvent]') -> None: ...
    def check_changed_settings_in_group(self, setting_prefix: 'String') -> bool: ...
    def get_changed_settings(self) -> 'PackedStringArray': ...
    def mark_setting_changed(self, setting: 'String') -> None: ...
    
class EditorSpinSlider(Range):
    label: 'String'
    suffix: 'String'
    read_only: bool
    flat: bool
    hide_slider: bool
    editing_integer: bool
    grabbed: Signal[Callable[[], None]]  # grabbed()
    ungrabbed: Signal[Callable[[], None]]  # ungrabbed()
    updown_pressed: Signal[Callable[[], None]]  # updown_pressed()
    value_focus_entered: Signal[Callable[[], None]]  # value_focus_entered()
    value_focus_exited: Signal[Callable[[], None]]  # value_focus_exited()
    def set_label(self, label: 'String') -> None: ...
    def get_label(self) -> 'String': ...
    def set_suffix(self, suffix: 'String') -> None: ...
    def get_suffix(self) -> 'String': ...
    def set_read_only(self, read_only: bool) -> None: ...
    def is_read_only(self) -> bool: ...
    def set_flat(self, flat: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_hide_slider(self, hide_slider: bool) -> None: ...
    def is_hiding_slider(self) -> bool: ...
    def set_editing_integer(self, editing_integer: bool) -> None: ...
    def is_editing_integer(self) -> bool: ...
    
class EditorSyntaxHighlighter(SyntaxHighlighter):
    def _get_name(self) -> 'String': ...
    def _get_supported_languages(self) -> 'PackedStringArray': ...
    
class EditorToaster(HBoxContainer):
    def push_toast(self, message: 'String', severity: 'EditorToaster_Severity' = default('''0'''), tooltip: 'String' = default('''""''')) -> None: ...
    
class EditorToaster_Severity(Enum):
    SEVERITY_INFO = 0
    SEVERITY_WARNING = 1
    SEVERITY_ERROR = 2

class EditorTranslationParserPlugin(RefCounted):
    def _parse_file(self, path: 'String') -> 'list[PackedStringArray]': ...
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    
class EditorUndoRedoManager(Object):
    history_changed: Signal[Callable[[], None]]  # history_changed()
    version_changed: Signal[Callable[[], None]]  # version_changed()
    def create_action(self, name: 'String', merge_mode: 'UndoRedo_MergeMode' = default('''0'''), custom_context: 'Object' = default('''null'''), backward_undo_ops: bool = default('''false''')) -> None: ...
    def commit_action(self, execute: bool = default('''true''')) -> None: ...
    def is_committing_action(self) -> bool: ...
    def force_fixed_history(self) -> None: ...
    def add_do_method(self, object: 'Object', method: 'StringName', *arg) -> None: ...
    def add_undo_method(self, object: 'Object', method: 'StringName', *arg) -> None: ...
    def add_do_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_undo_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_do_reference(self, object: 'Object') -> None: ...
    def add_undo_reference(self, object: 'Object') -> None: ...
    def get_object_history_id(self, object: 'Object') -> int: ...
    def get_history_undo_redo(self, id: int) -> 'UndoRedo': ...
    def clear_history(self, id: int = default('''-99'''), increase_version: bool = default('''true''')) -> None: ...
    
class EditorUndoRedoManager_SpecialHistory(Enum):
    GLOBAL_HISTORY = 0
    REMOTE_HISTORY = -9
    INVALID_HISTORY = -99

class EditorVCSInterface(Object):
    def _initialize(self, project_path: 'String') -> bool: ...
    def _set_credentials(self, username: 'String', password: 'String', ssh_public_key_path: 'String', ssh_private_key_path: 'String', ssh_passphrase: 'String') -> None: ...
    def _get_modified_files_data(self) -> 'list[Dictionary]': ...
    def _stage_file(self, file_path: 'String') -> None: ...
    def _unstage_file(self, file_path: 'String') -> None: ...
    def _discard_file(self, file_path: 'String') -> None: ...
    def _commit(self, msg: 'String') -> None: ...
    def _get_diff(self, identifier: 'String', area: int) -> 'list[Dictionary]': ...
    def _shut_down(self) -> bool: ...
    def _get_vcs_name(self) -> 'String': ...
    def _get_previous_commits(self, max_commits: int) -> 'list[Dictionary]': ...
    def _get_branch_list(self) -> 'list[String]': ...
    def _get_remotes(self) -> 'list[String]': ...
    def _create_branch(self, branch_name: 'String') -> None: ...
    def _remove_branch(self, branch_name: 'String') -> None: ...
    def _create_remote(self, remote_name: 'String', remote_url: 'String') -> None: ...
    def _remove_remote(self, remote_name: 'String') -> None: ...
    def _get_current_branch_name(self) -> 'String': ...
    def _checkout_branch(self, branch_name: 'String') -> bool: ...
    def _pull(self, remote: 'String') -> None: ...
    def _push(self, remote: 'String', force: bool) -> None: ...
    def _fetch(self, remote: 'String') -> None: ...
    def _get_line_diff(self, file_path: 'String', text: 'String') -> 'list[Dictionary]': ...
    def create_diff_line(self, new_line_no: int, old_line_no: int, content: 'String', status: 'String') -> 'Dictionary': ...
    def create_diff_hunk(self, old_start: int, new_start: int, old_lines: int, new_lines: int) -> 'Dictionary': ...
    def create_diff_file(self, new_file: 'String', old_file: 'String') -> 'Dictionary': ...
    def create_commit(self, msg: 'String', author: 'String', id: 'String', unix_timestamp: int, offset_minutes: int) -> 'Dictionary': ...
    def create_status_file(self, file_path: 'String', change_type: 'EditorVCSInterface_ChangeType', area: 'EditorVCSInterface_TreeArea') -> 'Dictionary': ...
    def add_diff_hunks_into_diff_file(self, diff_file: 'Dictionary', diff_hunks: 'list[Dictionary]') -> 'Dictionary': ...
    def add_line_diffs_into_diff_hunk(self, diff_hunk: 'Dictionary', line_diffs: 'list[Dictionary]') -> 'Dictionary': ...
    def popup_error(self, msg: 'String') -> None: ...
    
class EditorVCSInterface_ChangeType(Enum):
    CHANGE_TYPE_NEW = 0
    CHANGE_TYPE_MODIFIED = 1
    CHANGE_TYPE_RENAMED = 2
    CHANGE_TYPE_DELETED = 3
    CHANGE_TYPE_TYPECHANGE = 4
    CHANGE_TYPE_UNMERGED = 5

class EditorVCSInterface_TreeArea(Enum):
    TREE_AREA_COMMIT = 0
    TREE_AREA_STAGED = 1
    TREE_AREA_UNSTAGED = 2

class EncodedObjectAsID(RefCounted):
    object_id: int
    def set_object_id(self, id: int) -> None: ...
    def get_object_id(self) -> int: ...
    
class Engine(Object):
    print_error_messages: bool
    print_to_stdout: bool
    physics_ticks_per_second: int
    max_physics_steps_per_frame: int
    max_fps: int
    time_scale: float
    physics_jitter_fix: float
    def set_physics_ticks_per_second(self, physics_ticks_per_second: int) -> None: ...
    def get_physics_ticks_per_second(self) -> int: ...
    def set_max_physics_steps_per_frame(self, max_physics_steps: int) -> None: ...
    def get_max_physics_steps_per_frame(self) -> int: ...
    def set_physics_jitter_fix(self, physics_jitter_fix: float) -> None: ...
    def get_physics_jitter_fix(self) -> float: ...
    def get_physics_interpolation_fraction(self) -> float: ...
    def set_max_fps(self, max_fps: int) -> None: ...
    def get_max_fps(self) -> int: ...
    def set_time_scale(self, time_scale: float) -> None: ...
    def get_time_scale(self) -> float: ...
    def get_frames_drawn(self) -> int: ...
    def get_frames_per_second(self) -> float: ...
    def get_physics_frames(self) -> int: ...
    def get_process_frames(self) -> int: ...
    def get_main_loop(self) -> 'MainLoop': ...
    def get_version_info(self) -> 'Dictionary': ...
    def get_author_info(self) -> 'Dictionary': ...
    def get_copyright_info(self) -> 'list[Dictionary]': ...
    def get_donor_info(self) -> 'Dictionary': ...
    def get_license_info(self) -> 'Dictionary': ...
    def get_license_text(self) -> 'String': ...
    def get_architecture_name(self) -> 'String': ...
    def is_in_physics_frame(self) -> bool: ...
    def has_singleton(self, name: 'StringName') -> bool: ...
    def get_singleton(self, name: 'StringName') -> 'Object': ...
    def register_singleton(self, name: 'StringName', instance: 'Object') -> None: ...
    def unregister_singleton(self, name: 'StringName') -> None: ...
    def get_singleton_list(self) -> 'PackedStringArray': ...
    def register_script_language(self, language: 'ScriptLanguage') -> 'Error': ...
    def unregister_script_language(self, language: 'ScriptLanguage') -> 'Error': ...
    def get_script_language_count(self) -> int: ...
    def get_script_language(self, index: int) -> 'ScriptLanguage': ...
    def is_editor_hint(self) -> bool: ...
    def is_embedded_in_editor(self) -> bool: ...
    def get_write_movie_path(self) -> 'String': ...
    def set_print_to_stdout(self, enabled: bool) -> None: ...
    def is_printing_to_stdout(self) -> bool: ...
    def set_print_error_messages(self, enabled: bool) -> None: ...
    def is_printing_error_messages(self) -> bool: ...
    
class EngineDebugger(Object):
    def is_active(self) -> bool: ...
    def register_profiler(self, name: 'StringName', profiler: 'EngineProfiler') -> None: ...
    def unregister_profiler(self, name: 'StringName') -> None: ...
    def is_profiling(self, name: 'StringName') -> bool: ...
    def has_profiler(self, name: 'StringName') -> bool: ...
    def profiler_add_frame_data(self, name: 'StringName', data: 'Array') -> None: ...
    def profiler_enable(self, name: 'StringName', enable: bool, arguments: 'Array' = default('''[]''')) -> None: ...
    def register_message_capture(self, name: 'StringName', callable: 'Callable') -> None: ...
    def unregister_message_capture(self, name: 'StringName') -> None: ...
    def has_capture(self, name: 'StringName') -> bool: ...
    def line_poll(self) -> None: ...
    def send_message(self, message: 'String', data: 'Array') -> None: ...
    def debug(self, can_continue: bool = default('''true'''), is_error_breakpoint: bool = default('''false''')) -> None: ...
    def script_debug(self, language: 'ScriptLanguage', can_continue: bool = default('''true'''), is_error_breakpoint: bool = default('''false''')) -> None: ...
    def set_lines_left(self, lines: int) -> None: ...
    def get_lines_left(self) -> int: ...
    def set_depth(self, depth: int) -> None: ...
    def get_depth(self) -> int: ...
    def is_breakpoint(self, line: int, source: 'StringName') -> bool: ...
    def is_skipping_breakpoints(self) -> bool: ...
    def insert_breakpoint(self, line: int, source: 'StringName') -> None: ...
    def remove_breakpoint(self, line: int, source: 'StringName') -> None: ...
    def clear_breakpoints(self) -> None: ...
    
class EngineProfiler(RefCounted):
    def _toggle(self, enable: bool, options: 'Array') -> None: ...
    def _add_frame(self, data: 'Array') -> None: ...
    def _tick(self, frame_time: float, process_time: float, physics_time: float, physics_frame_time: float) -> None: ...
    
class Environment(Resource):
    background_mode: int
    background_color: 'Color'
    background_energy_multiplier: float
    background_intensity: float
    background_canvas_max_layer: int
    background_camera_feed_id: int
    sky: 'Sky'
    sky_custom_fov: float
    sky_rotation: 'Vector3'
    ambient_light_source: int
    ambient_light_color: 'Color'
    ambient_light_sky_contribution: float
    ambient_light_energy: float
    reflected_light_source: int
    tonemap_mode: int
    tonemap_exposure: float
    tonemap_white: float
    ssr_enabled: bool
    ssr_max_steps: int
    ssr_fade_in: float
    ssr_fade_out: float
    ssr_depth_tolerance: float
    ssao_enabled: bool
    ssao_radius: float
    ssao_intensity: float
    ssao_power: float
    ssao_detail: float
    ssao_horizon: float
    ssao_sharpness: float
    ssao_light_affect: float
    ssao_ao_channel_affect: float
    ssil_enabled: bool
    ssil_radius: float
    ssil_intensity: float
    ssil_sharpness: float
    ssil_normal_rejection: float
    sdfgi_enabled: bool
    sdfgi_use_occlusion: bool
    sdfgi_read_sky_light: bool
    sdfgi_bounce_feedback: float
    sdfgi_cascades: int
    sdfgi_min_cell_size: float
    sdfgi_cascade0_distance: float
    sdfgi_max_distance: float
    sdfgi_y_scale: int
    sdfgi_energy: float
    sdfgi_normal_bias: float
    sdfgi_probe_bias: float
    glow_enabled: bool
    glow_normalized: bool
    glow_intensity: float
    glow_strength: float
    glow_mix: float
    glow_bloom: float
    glow_blend_mode: int
    glow_hdr_threshold: float
    glow_hdr_scale: float
    glow_hdr_luminance_cap: float
    glow_map_strength: float
    glow_map: 'Texture2D'
    fog_enabled: bool
    fog_mode: int
    fog_light_color: 'Color'
    fog_light_energy: float
    fog_sun_scatter: float
    fog_density: float
    fog_aerial_perspective: float
    fog_sky_affect: float
    fog_height: float
    fog_height_density: float
    fog_depth_curve: float
    fog_depth_begin: float
    fog_depth_end: float
    volumetric_fog_enabled: bool
    volumetric_fog_density: float
    volumetric_fog_albedo: 'Color'
    volumetric_fog_emission: 'Color'
    volumetric_fog_emission_energy: float
    volumetric_fog_gi_inject: float
    volumetric_fog_anisotropy: float
    volumetric_fog_length: float
    volumetric_fog_detail_spread: float
    volumetric_fog_ambient_inject: float
    volumetric_fog_sky_affect: float
    volumetric_fog_temporal_reprojection_enabled: bool
    volumetric_fog_temporal_reprojection_amount: float
    adjustment_enabled: bool
    adjustment_brightness: float
    adjustment_contrast: float
    adjustment_saturation: float
    adjustment_color_correction: 'Texture2D'
    def set_background(self, mode: 'Environment_BGMode') -> None: ...
    def get_background(self) -> 'Environment_BGMode': ...
    def set_sky(self, sky: 'Sky') -> None: ...
    def get_sky(self) -> 'Sky': ...
    def set_sky_custom_fov(self, scale: float) -> None: ...
    def get_sky_custom_fov(self) -> float: ...
    def set_sky_rotation(self, euler_radians: 'Vector3') -> None: ...
    def get_sky_rotation(self) -> 'Vector3': ...
    def set_bg_color(self, color: 'Color') -> None: ...
    def get_bg_color(self) -> 'Color': ...
    def set_bg_energy_multiplier(self, energy: float) -> None: ...
    def get_bg_energy_multiplier(self) -> float: ...
    def set_bg_intensity(self, energy: float) -> None: ...
    def get_bg_intensity(self) -> float: ...
    def set_canvas_max_layer(self, layer: int) -> None: ...
    def get_canvas_max_layer(self) -> int: ...
    def set_camera_feed_id(self, id: int) -> None: ...
    def get_camera_feed_id(self) -> int: ...
    def set_ambient_light_color(self, color: 'Color') -> None: ...
    def get_ambient_light_color(self) -> 'Color': ...
    def set_ambient_source(self, source: 'Environment_AmbientSource') -> None: ...
    def get_ambient_source(self) -> 'Environment_AmbientSource': ...
    def set_ambient_light_energy(self, energy: float) -> None: ...
    def get_ambient_light_energy(self) -> float: ...
    def set_ambient_light_sky_contribution(self, ratio: float) -> None: ...
    def get_ambient_light_sky_contribution(self) -> float: ...
    def set_reflection_source(self, source: 'Environment_ReflectionSource') -> None: ...
    def get_reflection_source(self) -> 'Environment_ReflectionSource': ...
    def set_tonemapper(self, mode: 'Environment_ToneMapper') -> None: ...
    def get_tonemapper(self) -> 'Environment_ToneMapper': ...
    def set_tonemap_exposure(self, exposure: float) -> None: ...
    def get_tonemap_exposure(self) -> float: ...
    def set_tonemap_white(self, white: float) -> None: ...
    def get_tonemap_white(self) -> float: ...
    def set_ssr_enabled(self, enabled: bool) -> None: ...
    def is_ssr_enabled(self) -> bool: ...
    def set_ssr_max_steps(self, max_steps: int) -> None: ...
    def get_ssr_max_steps(self) -> int: ...
    def set_ssr_fade_in(self, fade_in: float) -> None: ...
    def get_ssr_fade_in(self) -> float: ...
    def set_ssr_fade_out(self, fade_out: float) -> None: ...
    def get_ssr_fade_out(self) -> float: ...
    def set_ssr_depth_tolerance(self, depth_tolerance: float) -> None: ...
    def get_ssr_depth_tolerance(self) -> float: ...
    def set_ssao_enabled(self, enabled: bool) -> None: ...
    def is_ssao_enabled(self) -> bool: ...
    def set_ssao_radius(self, radius: float) -> None: ...
    def get_ssao_radius(self) -> float: ...
    def set_ssao_intensity(self, intensity: float) -> None: ...
    def get_ssao_intensity(self) -> float: ...
    def set_ssao_power(self, power: float) -> None: ...
    def get_ssao_power(self) -> float: ...
    def set_ssao_detail(self, detail: float) -> None: ...
    def get_ssao_detail(self) -> float: ...
    def set_ssao_horizon(self, horizon: float) -> None: ...
    def get_ssao_horizon(self) -> float: ...
    def set_ssao_sharpness(self, sharpness: float) -> None: ...
    def get_ssao_sharpness(self) -> float: ...
    def set_ssao_direct_light_affect(self, amount: float) -> None: ...
    def get_ssao_direct_light_affect(self) -> float: ...
    def set_ssao_ao_channel_affect(self, amount: float) -> None: ...
    def get_ssao_ao_channel_affect(self) -> float: ...
    def set_ssil_enabled(self, enabled: bool) -> None: ...
    def is_ssil_enabled(self) -> bool: ...
    def set_ssil_radius(self, radius: float) -> None: ...
    def get_ssil_radius(self) -> float: ...
    def set_ssil_intensity(self, intensity: float) -> None: ...
    def get_ssil_intensity(self) -> float: ...
    def set_ssil_sharpness(self, sharpness: float) -> None: ...
    def get_ssil_sharpness(self) -> float: ...
    def set_ssil_normal_rejection(self, normal_rejection: float) -> None: ...
    def get_ssil_normal_rejection(self) -> float: ...
    def set_sdfgi_enabled(self, enabled: bool) -> None: ...
    def is_sdfgi_enabled(self) -> bool: ...
    def set_sdfgi_cascades(self, amount: int) -> None: ...
    def get_sdfgi_cascades(self) -> int: ...
    def set_sdfgi_min_cell_size(self, size: float) -> None: ...
    def get_sdfgi_min_cell_size(self) -> float: ...
    def set_sdfgi_max_distance(self, distance: float) -> None: ...
    def get_sdfgi_max_distance(self) -> float: ...
    def set_sdfgi_cascade0_distance(self, distance: float) -> None: ...
    def get_sdfgi_cascade0_distance(self) -> float: ...
    def set_sdfgi_y_scale(self, scale: 'Environment_SDFGIYScale') -> None: ...
    def get_sdfgi_y_scale(self) -> 'Environment_SDFGIYScale': ...
    def set_sdfgi_use_occlusion(self, enable: bool) -> None: ...
    def is_sdfgi_using_occlusion(self) -> bool: ...
    def set_sdfgi_bounce_feedback(self, amount: float) -> None: ...
    def get_sdfgi_bounce_feedback(self) -> float: ...
    def set_sdfgi_read_sky_light(self, enable: bool) -> None: ...
    def is_sdfgi_reading_sky_light(self) -> bool: ...
    def set_sdfgi_energy(self, amount: float) -> None: ...
    def get_sdfgi_energy(self) -> float: ...
    def set_sdfgi_normal_bias(self, bias: float) -> None: ...
    def get_sdfgi_normal_bias(self) -> float: ...
    def set_sdfgi_probe_bias(self, bias: float) -> None: ...
    def get_sdfgi_probe_bias(self) -> float: ...
    def set_glow_enabled(self, enabled: bool) -> None: ...
    def is_glow_enabled(self) -> bool: ...
    def set_glow_level(self, idx: int, intensity: float) -> None: ...
    def get_glow_level(self, idx: int) -> float: ...
    def set_glow_normalized(self, normalize: bool) -> None: ...
    def is_glow_normalized(self) -> bool: ...
    def set_glow_intensity(self, intensity: float) -> None: ...
    def get_glow_intensity(self) -> float: ...
    def set_glow_strength(self, strength: float) -> None: ...
    def get_glow_strength(self) -> float: ...
    def set_glow_mix(self, mix: float) -> None: ...
    def get_glow_mix(self) -> float: ...
    def set_glow_bloom(self, amount: float) -> None: ...
    def get_glow_bloom(self) -> float: ...
    def set_glow_blend_mode(self, mode: 'Environment_GlowBlendMode') -> None: ...
    def get_glow_blend_mode(self) -> 'Environment_GlowBlendMode': ...
    def set_glow_hdr_bleed_threshold(self, threshold: float) -> None: ...
    def get_glow_hdr_bleed_threshold(self) -> float: ...
    def set_glow_hdr_bleed_scale(self, scale: float) -> None: ...
    def get_glow_hdr_bleed_scale(self) -> float: ...
    def set_glow_hdr_luminance_cap(self, amount: float) -> None: ...
    def get_glow_hdr_luminance_cap(self) -> float: ...
    def set_glow_map_strength(self, strength: float) -> None: ...
    def get_glow_map_strength(self) -> float: ...
    def set_glow_map(self, mode: 'Texture') -> None: ...
    def get_glow_map(self) -> 'Texture': ...
    def set_fog_enabled(self, enabled: bool) -> None: ...
    def is_fog_enabled(self) -> bool: ...
    def set_fog_mode(self, mode: 'Environment_FogMode') -> None: ...
    def get_fog_mode(self) -> 'Environment_FogMode': ...
    def set_fog_light_color(self, light_color: 'Color') -> None: ...
    def get_fog_light_color(self) -> 'Color': ...
    def set_fog_light_energy(self, light_energy: float) -> None: ...
    def get_fog_light_energy(self) -> float: ...
    def set_fog_sun_scatter(self, sun_scatter: float) -> None: ...
    def get_fog_sun_scatter(self) -> float: ...
    def set_fog_density(self, density: float) -> None: ...
    def get_fog_density(self) -> float: ...
    def set_fog_height(self, height: float) -> None: ...
    def get_fog_height(self) -> float: ...
    def set_fog_height_density(self, height_density: float) -> None: ...
    def get_fog_height_density(self) -> float: ...
    def set_fog_aerial_perspective(self, aerial_perspective: float) -> None: ...
    def get_fog_aerial_perspective(self) -> float: ...
    def set_fog_sky_affect(self, sky_affect: float) -> None: ...
    def get_fog_sky_affect(self) -> float: ...
    def set_fog_depth_curve(self, curve: float) -> None: ...
    def get_fog_depth_curve(self) -> float: ...
    def set_fog_depth_begin(self, begin: float) -> None: ...
    def get_fog_depth_begin(self) -> float: ...
    def set_fog_depth_end(self, end: float) -> None: ...
    def get_fog_depth_end(self) -> float: ...
    def set_volumetric_fog_enabled(self, enabled: bool) -> None: ...
    def is_volumetric_fog_enabled(self) -> bool: ...
    def set_volumetric_fog_emission(self, color: 'Color') -> None: ...
    def get_volumetric_fog_emission(self) -> 'Color': ...
    def set_volumetric_fog_albedo(self, color: 'Color') -> None: ...
    def get_volumetric_fog_albedo(self) -> 'Color': ...
    def set_volumetric_fog_density(self, density: float) -> None: ...
    def get_volumetric_fog_density(self) -> float: ...
    def set_volumetric_fog_emission_energy(self, begin: float) -> None: ...
    def get_volumetric_fog_emission_energy(self) -> float: ...
    def set_volumetric_fog_anisotropy(self, anisotropy: float) -> None: ...
    def get_volumetric_fog_anisotropy(self) -> float: ...
    def set_volumetric_fog_length(self, length: float) -> None: ...
    def get_volumetric_fog_length(self) -> float: ...
    def set_volumetric_fog_detail_spread(self, detail_spread: float) -> None: ...
    def get_volumetric_fog_detail_spread(self) -> float: ...
    def set_volumetric_fog_gi_inject(self, gi_inject: float) -> None: ...
    def get_volumetric_fog_gi_inject(self) -> float: ...
    def set_volumetric_fog_ambient_inject(self, enabled: float) -> None: ...
    def get_volumetric_fog_ambient_inject(self) -> float: ...
    def set_volumetric_fog_sky_affect(self, sky_affect: float) -> None: ...
    def get_volumetric_fog_sky_affect(self) -> float: ...
    def set_volumetric_fog_temporal_reprojection_enabled(self, enabled: bool) -> None: ...
    def is_volumetric_fog_temporal_reprojection_enabled(self) -> bool: ...
    def set_volumetric_fog_temporal_reprojection_amount(self, temporal_reprojection_amount: float) -> None: ...
    def get_volumetric_fog_temporal_reprojection_amount(self) -> float: ...
    def set_adjustment_enabled(self, enabled: bool) -> None: ...
    def is_adjustment_enabled(self) -> bool: ...
    def set_adjustment_brightness(self, brightness: float) -> None: ...
    def get_adjustment_brightness(self) -> float: ...
    def set_adjustment_contrast(self, contrast: float) -> None: ...
    def get_adjustment_contrast(self) -> float: ...
    def set_adjustment_saturation(self, saturation: float) -> None: ...
    def get_adjustment_saturation(self) -> float: ...
    def set_adjustment_color_correction(self, color_correction: 'Texture') -> None: ...
    def get_adjustment_color_correction(self) -> 'Texture': ...
    
class Environment_BGMode(Enum):
    BG_CLEAR_COLOR = 0
    BG_COLOR = 1
    BG_SKY = 2
    BG_CANVAS = 3
    BG_KEEP = 4
    BG_CAMERA_FEED = 5
    BG_MAX = 6

class Environment_AmbientSource(Enum):
    AMBIENT_SOURCE_BG = 0
    AMBIENT_SOURCE_DISABLED = 1
    AMBIENT_SOURCE_COLOR = 2
    AMBIENT_SOURCE_SKY = 3

class Environment_ReflectionSource(Enum):
    REFLECTION_SOURCE_BG = 0
    REFLECTION_SOURCE_DISABLED = 1
    REFLECTION_SOURCE_SKY = 2

class Environment_ToneMapper(Enum):
    TONE_MAPPER_LINEAR = 0
    TONE_MAPPER_REINHARDT = 1
    TONE_MAPPER_FILMIC = 2
    TONE_MAPPER_ACES = 3
    TONE_MAPPER_AGX = 4

class Environment_GlowBlendMode(Enum):
    GLOW_BLEND_MODE_ADDITIVE = 0
    GLOW_BLEND_MODE_SCREEN = 1
    GLOW_BLEND_MODE_SOFTLIGHT = 2
    GLOW_BLEND_MODE_REPLACE = 3
    GLOW_BLEND_MODE_MIX = 4

class Environment_FogMode(Enum):
    FOG_MODE_EXPONENTIAL = 0
    FOG_MODE_DEPTH = 1

class Environment_SDFGIYScale(Enum):
    SDFGI_Y_SCALE_50_PERCENT = 0
    SDFGI_Y_SCALE_75_PERCENT = 1
    SDFGI_Y_SCALE_100_PERCENT = 2

class Expression(RefCounted):
    def parse(self, expression: 'String', input_names: 'PackedStringArray' = default('''PackedStringArray()''')) -> 'Error': ...
    def execute(self, inputs: 'Array' = default('''[]'''), base_instance: 'Object' = default('''null'''), show_error: bool = default('''true'''), const_calls_only: bool = default('''false''')) -> 'Variant': ...
    def has_execute_failed(self) -> bool: ...
    def get_error_text(self) -> 'String': ...
    
class ExternalTexture(Texture2D):
    size: 'Vector2'
    def set_size(self, size: 'Vector2') -> None: ...
    def get_external_texture_id(self) -> int: ...
    def set_external_buffer_id(self, external_buffer_id: int) -> None: ...
    
class FBXDocument(GLTFDocument):
    pass
    
class FBXState(GLTFState):
    allow_geometry_helper_nodes: bool
    def get_allow_geometry_helper_nodes(self) -> bool: ...
    def set_allow_geometry_helper_nodes(self, allow: bool) -> None: ...
    
class FastNoiseLite(Noise):
    noise_type: int
    seed: int
    frequency: float
    offset: 'Vector3'
    fractal_type: int
    fractal_octaves: int
    fractal_lacunarity: float
    fractal_gain: float
    fractal_weighted_strength: float
    fractal_ping_pong_strength: float
    cellular_distance_function: int
    cellular_jitter: float
    cellular_return_type: int
    domain_warp_enabled: bool
    domain_warp_type: int
    domain_warp_amplitude: float
    domain_warp_frequency: float
    domain_warp_fractal_type: int
    domain_warp_fractal_octaves: int
    domain_warp_fractal_lacunarity: float
    domain_warp_fractal_gain: float
    def set_noise_type(self, type: 'FastNoiseLite_NoiseType') -> None: ...
    def get_noise_type(self) -> 'FastNoiseLite_NoiseType': ...
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def set_frequency(self, freq: float) -> None: ...
    def get_frequency(self) -> float: ...
    def set_offset(self, offset: 'Vector3') -> None: ...
    def get_offset(self) -> 'Vector3': ...
    def set_fractal_type(self, type: 'FastNoiseLite_FractalType') -> None: ...
    def get_fractal_type(self) -> 'FastNoiseLite_FractalType': ...
    def set_fractal_octaves(self, octave_count: int) -> None: ...
    def get_fractal_octaves(self) -> int: ...
    def set_fractal_lacunarity(self, lacunarity: float) -> None: ...
    def get_fractal_lacunarity(self) -> float: ...
    def set_fractal_gain(self, gain: float) -> None: ...
    def get_fractal_gain(self) -> float: ...
    def set_fractal_weighted_strength(self, weighted_strength: float) -> None: ...
    def get_fractal_weighted_strength(self) -> float: ...
    def set_fractal_ping_pong_strength(self, ping_pong_strength: float) -> None: ...
    def get_fractal_ping_pong_strength(self) -> float: ...
    def set_cellular_distance_function(self, func: 'FastNoiseLite_CellularDistanceFunction') -> None: ...
    def get_cellular_distance_function(self) -> 'FastNoiseLite_CellularDistanceFunction': ...
    def set_cellular_jitter(self, jitter: float) -> None: ...
    def get_cellular_jitter(self) -> float: ...
    def set_cellular_return_type(self, ret: 'FastNoiseLite_CellularReturnType') -> None: ...
    def get_cellular_return_type(self) -> 'FastNoiseLite_CellularReturnType': ...
    def set_domain_warp_enabled(self, domain_warp_enabled: bool) -> None: ...
    def is_domain_warp_enabled(self) -> bool: ...
    def set_domain_warp_type(self, domain_warp_type: 'FastNoiseLite_DomainWarpType') -> None: ...
    def get_domain_warp_type(self) -> 'FastNoiseLite_DomainWarpType': ...
    def set_domain_warp_amplitude(self, domain_warp_amplitude: float) -> None: ...
    def get_domain_warp_amplitude(self) -> float: ...
    def set_domain_warp_frequency(self, domain_warp_frequency: float) -> None: ...
    def get_domain_warp_frequency(self) -> float: ...
    def set_domain_warp_fractal_type(self, domain_warp_fractal_type: 'FastNoiseLite_DomainWarpFractalType') -> None: ...
    def get_domain_warp_fractal_type(self) -> 'FastNoiseLite_DomainWarpFractalType': ...
    def set_domain_warp_fractal_octaves(self, domain_warp_octave_count: int) -> None: ...
    def get_domain_warp_fractal_octaves(self) -> int: ...
    def set_domain_warp_fractal_lacunarity(self, domain_warp_lacunarity: float) -> None: ...
    def get_domain_warp_fractal_lacunarity(self) -> float: ...
    def set_domain_warp_fractal_gain(self, domain_warp_gain: float) -> None: ...
    def get_domain_warp_fractal_gain(self) -> float: ...
    
class FastNoiseLite_NoiseType(Enum):
    TYPE_VALUE = 5
    TYPE_VALUE_CUBIC = 4
    TYPE_PERLIN = 3
    TYPE_CELLULAR = 2
    TYPE_SIMPLEX = 0
    TYPE_SIMPLEX_SMOOTH = 1

class FastNoiseLite_FractalType(Enum):
    FRACTAL_NONE = 0
    FRACTAL_FBM = 1
    FRACTAL_RIDGED = 2
    FRACTAL_PING_PONG = 3

class FastNoiseLite_CellularDistanceFunction(Enum):
    DISTANCE_EUCLIDEAN = 0
    DISTANCE_EUCLIDEAN_SQUARED = 1
    DISTANCE_MANHATTAN = 2
    DISTANCE_HYBRID = 3

class FastNoiseLite_CellularReturnType(Enum):
    RETURN_CELL_VALUE = 0
    RETURN_DISTANCE = 1
    RETURN_DISTANCE2 = 2
    RETURN_DISTANCE2_ADD = 3
    RETURN_DISTANCE2_SUB = 4
    RETURN_DISTANCE2_MUL = 5
    RETURN_DISTANCE2_DIV = 6

class FastNoiseLite_DomainWarpType(Enum):
    DOMAIN_WARP_SIMPLEX = 0
    DOMAIN_WARP_SIMPLEX_REDUCED = 1
    DOMAIN_WARP_BASIC_GRID = 2

class FastNoiseLite_DomainWarpFractalType(Enum):
    DOMAIN_WARP_FRACTAL_NONE = 0
    DOMAIN_WARP_FRACTAL_PROGRESSIVE = 1
    DOMAIN_WARP_FRACTAL_INDEPENDENT = 2

class FileAccess(RefCounted):
    big_endian: bool
    @staticmethod
    def open(path: 'String', flags: 'FileAccess_ModeFlags') -> 'FileAccess': ...
    @staticmethod
    def open_encrypted(path: 'String', mode_flags: 'FileAccess_ModeFlags', key: 'PackedByteArray', iv: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'FileAccess': ...
    @staticmethod
    def open_encrypted_with_pass(path: 'String', mode_flags: 'FileAccess_ModeFlags', pass_: 'String') -> 'FileAccess': ...
    @staticmethod
    def open_compressed(path: 'String', mode_flags: 'FileAccess_ModeFlags', compression_mode: 'FileAccess_CompressionMode' = default('''0''')) -> 'FileAccess': ...
    @staticmethod
    def get_open_error() -> 'Error': ...
    @staticmethod
    def create_temp(mode_flags: int, prefix: 'String' = default('''""'''), extension: 'String' = default('''""'''), keep: bool = default('''false''')) -> 'FileAccess': ...
    @staticmethod
    def get_file_as_bytes(path: 'String') -> 'PackedByteArray': ...
    @staticmethod
    def get_file_as_string(path: 'String') -> 'String': ...
    def resize(self, length: int) -> 'Error': ...
    def flush(self) -> None: ...
    def get_path(self) -> 'String': ...
    def get_path_absolute(self) -> 'String': ...
    def is_open(self) -> bool: ...
    def seek(self, position: int) -> None: ...
    def seek_end(self, position: int = default('''0''')) -> None: ...
    def get_position(self) -> int: ...
    def get_length(self) -> int: ...
    def eof_reached(self) -> bool: ...
    def get_8(self) -> int: ...
    def get_16(self) -> int: ...
    def get_32(self) -> int: ...
    def get_64(self) -> int: ...
    def get_half(self) -> float: ...
    def get_float(self) -> float: ...
    def get_double(self) -> float: ...
    def get_real(self) -> float: ...
    def get_buffer(self, length: int) -> 'PackedByteArray': ...
    def get_line(self) -> 'String': ...
    def get_csv_line(self, delim: 'String' = default('''","''')) -> 'PackedStringArray': ...
    def get_as_text(self, skip_cr: bool = default('''false''')) -> 'String': ...
    @staticmethod
    def get_md5(path: 'String') -> 'String': ...
    @staticmethod
    def get_sha256(path: 'String') -> 'String': ...
    def is_big_endian(self) -> bool: ...
    def set_big_endian(self, big_endian: bool) -> None: ...
    def get_error(self) -> 'Error': ...
    def get_var(self, allow_objects: bool = default('''false''')) -> 'Variant': ...
    def store_8(self, value: int) -> bool: ...
    def store_16(self, value: int) -> bool: ...
    def store_32(self, value: int) -> bool: ...
    def store_64(self, value: int) -> bool: ...
    def store_half(self, value: float) -> bool: ...
    def store_float(self, value: float) -> bool: ...
    def store_double(self, value: float) -> bool: ...
    def store_real(self, value: float) -> bool: ...
    def store_buffer(self, buffer: 'PackedByteArray') -> bool: ...
    def store_line(self, line: 'String') -> bool: ...
    def store_csv_line(self, values: 'PackedStringArray', delim: 'String' = default('''","''')) -> bool: ...
    def store_string(self, string: 'String') -> bool: ...
    def store_var(self, value: 'Variant', full_objects: bool = default('''false''')) -> bool: ...
    def store_pascal_string(self, string: 'String') -> bool: ...
    def get_pascal_string(self) -> 'String': ...
    def close(self) -> None: ...
    @staticmethod
    def file_exists(path: 'String') -> bool: ...
    @staticmethod
    def get_modified_time(file: 'String') -> int: ...
    @staticmethod
    def get_unix_permissions(file: 'String') -> 'FileAccess_UnixPermissionFlags': ...
    @staticmethod
    def set_unix_permissions(file: 'String', permissions: 'FileAccess_UnixPermissionFlags') -> 'Error': ...
    @staticmethod
    def get_hidden_attribute(file: 'String') -> bool: ...
    @staticmethod
    def set_hidden_attribute(file: 'String', hidden: bool) -> 'Error': ...
    @staticmethod
    def set_read_only_attribute(file: 'String', ro: bool) -> 'Error': ...
    @staticmethod
    def get_read_only_attribute(file: 'String') -> bool: ...
    
class FileAccess_ModeFlags(Enum):
    READ = 1
    WRITE = 2
    READ_WRITE = 3
    WRITE_READ = 7

class FileAccess_CompressionMode(Enum):
    COMPRESSION_FASTLZ = 0
    COMPRESSION_DEFLATE = 1
    COMPRESSION_ZSTD = 2
    COMPRESSION_GZIP = 3
    COMPRESSION_BROTLI = 4

class FileAccess_UnixPermissionFlags(Enum):
    UNIX_READ_OWNER = 256
    UNIX_WRITE_OWNER = 128
    UNIX_EXECUTE_OWNER = 64
    UNIX_READ_GROUP = 32
    UNIX_WRITE_GROUP = 16
    UNIX_EXECUTE_GROUP = 8
    UNIX_READ_OTHER = 4
    UNIX_WRITE_OTHER = 2
    UNIX_EXECUTE_OTHER = 1
    UNIX_SET_USER_ID = 2048
    UNIX_SET_GROUP_ID = 1024
    UNIX_RESTRICTED_DELETE = 512

class FileDialog(ConfirmationDialog):
    mode_overrides_title: bool
    file_mode: int
    access: int
    root_subfolder: 'String'
    filters: 'PackedStringArray'
    filename_filter: 'String'
    option_count: int
    show_hidden_files: bool
    use_native_dialog: bool
    current_dir: 'String'
    current_file: 'String'
    current_path: 'String'
    file_selected: Signal[Callable[['String'], None]]  # file_selected(path: 'String')
    files_selected: Signal[Callable[['PackedStringArray'], None]]  # files_selected(paths: 'PackedStringArray')
    dir_selected: Signal[Callable[['String'], None]]  # dir_selected(dir: 'String')
    filename_filter_changed: Signal[Callable[['String'], None]]  # filename_filter_changed(filter: 'String')
    def clear_filters(self) -> None: ...
    def add_filter(self, filter: 'String', description: 'String' = default('''""''')) -> None: ...
    def set_filters(self, filters: 'PackedStringArray') -> None: ...
    def get_filters(self) -> 'PackedStringArray': ...
    def clear_filename_filter(self) -> None: ...
    def set_filename_filter(self, filter: 'String') -> None: ...
    def get_filename_filter(self) -> 'String': ...
    def get_option_name(self, option: int) -> 'String': ...
    def get_option_values(self, option: int) -> 'PackedStringArray': ...
    def get_option_default(self, option: int) -> int: ...
    def set_option_name(self, option: int, name: 'String') -> None: ...
    def set_option_values(self, option: int, values: 'PackedStringArray') -> None: ...
    def set_option_default(self, option: int, default_value_index: int) -> None: ...
    def set_option_count(self, count: int) -> None: ...
    def get_option_count(self) -> int: ...
    def add_option(self, name: 'String', values: 'PackedStringArray', default_value_index: int) -> None: ...
    def get_selected_options(self) -> 'Dictionary': ...
    def get_current_dir(self) -> 'String': ...
    def get_current_file(self) -> 'String': ...
    def get_current_path(self) -> 'String': ...
    def set_current_dir(self, dir: 'String') -> None: ...
    def set_current_file(self, file: 'String') -> None: ...
    def set_current_path(self, path: 'String') -> None: ...
    def set_mode_overrides_title(self, override: bool) -> None: ...
    def is_mode_overriding_title(self) -> bool: ...
    def set_file_mode(self, mode: 'FileDialog_FileMode') -> None: ...
    def get_file_mode(self) -> 'FileDialog_FileMode': ...
    def get_vbox(self) -> 'VBoxContainer': ...
    def get_line_edit(self) -> 'LineEdit': ...
    def set_access(self, access: 'FileDialog_Access') -> None: ...
    def get_access(self) -> 'FileDialog_Access': ...
    def set_root_subfolder(self, dir: 'String') -> None: ...
    def get_root_subfolder(self) -> 'String': ...
    def set_show_hidden_files(self, show: bool) -> None: ...
    def is_showing_hidden_files(self) -> bool: ...
    def set_use_native_dialog(self, native: bool) -> None: ...
    def get_use_native_dialog(self) -> bool: ...
    def deselect_all(self) -> None: ...
    def invalidate(self) -> None: ...
    
class FileDialog_FileMode(Enum):
    FILE_MODE_OPEN_FILE = 0
    FILE_MODE_OPEN_FILES = 1
    FILE_MODE_OPEN_DIR = 2
    FILE_MODE_OPEN_ANY = 3
    FILE_MODE_SAVE_FILE = 4

class FileDialog_Access(Enum):
    ACCESS_RESOURCES = 0
    ACCESS_USERDATA = 1
    ACCESS_FILESYSTEM = 2

class FileSystemDock(VBoxContainer):
    inherit: Signal[Callable[['String'], None]]  # inherit(file: 'String')
    instantiate: Signal[Callable[['PackedStringArray'], None]]  # instantiate(files: 'PackedStringArray')
    resource_removed: Signal[Callable[['Resource'], None]]  # resource_removed(resource: 'Resource')
    file_removed: Signal[Callable[['String'], None]]  # file_removed(file: 'String')
    folder_removed: Signal[Callable[['String'], None]]  # folder_removed(folder: 'String')
    files_moved: Signal[Callable[['String', 'String'], None]]  # files_moved(old_file: 'String', new_file: 'String')
    folder_moved: Signal[Callable[['String', 'String'], None]]  # folder_moved(old_folder: 'String', new_folder: 'String')
    folder_color_changed: Signal[Callable[[], None]]  # folder_color_changed()
    display_mode_changed: Signal[Callable[[], None]]  # display_mode_changed()
    def navigate_to_path(self, path: 'String') -> None: ...
    def add_resource_tooltip_plugin(self, plugin: 'EditorResourceTooltipPlugin') -> None: ...
    def remove_resource_tooltip_plugin(self, plugin: 'EditorResourceTooltipPlugin') -> None: ...
    
class FlowContainer(Container):
    alignment: int
    last_wrap_alignment: int
    vertical: bool
    reverse_fill: bool
    def get_line_count(self) -> int: ...
    def set_alignment(self, alignment: 'FlowContainer_AlignmentMode') -> None: ...
    def get_alignment(self) -> 'FlowContainer_AlignmentMode': ...
    def set_last_wrap_alignment(self, last_wrap_alignment: 'FlowContainer_LastWrapAlignmentMode') -> None: ...
    def get_last_wrap_alignment(self) -> 'FlowContainer_LastWrapAlignmentMode': ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...
    def set_reverse_fill(self, reverse_fill: bool) -> None: ...
    def is_reverse_fill(self) -> bool: ...
    
class FlowContainer_AlignmentMode(Enum):
    ALIGNMENT_BEGIN = 0
    ALIGNMENT_CENTER = 1
    ALIGNMENT_END = 2

class FlowContainer_LastWrapAlignmentMode(Enum):
    LAST_WRAP_ALIGNMENT_INHERIT = 0
    LAST_WRAP_ALIGNMENT_BEGIN = 1
    LAST_WRAP_ALIGNMENT_CENTER = 2
    LAST_WRAP_ALIGNMENT_END = 3

class FogMaterial(Material):
    density: float
    albedo: 'Color'
    emission: 'Color'
    height_falloff: float
    edge_fade: float
    density_texture: 'Texture3D'
    def set_density(self, density: float) -> None: ...
    def get_density(self) -> float: ...
    def set_albedo(self, albedo: 'Color') -> None: ...
    def get_albedo(self) -> 'Color': ...
    def set_emission(self, emission: 'Color') -> None: ...
    def get_emission(self) -> 'Color': ...
    def set_height_falloff(self, height_falloff: float) -> None: ...
    def get_height_falloff(self) -> float: ...
    def set_edge_fade(self, edge_fade: float) -> None: ...
    def get_edge_fade(self) -> float: ...
    def set_density_texture(self, density_texture: 'Texture3D') -> None: ...
    def get_density_texture(self) -> 'Texture3D': ...
    
class FogVolume(VisualInstance3D):
    size: 'Vector3'
    shape: int
    material: 'FogMaterial'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_shape(self, shape: 'RenderingServer_FogVolumeShape') -> None: ...
    def get_shape(self) -> 'RenderingServer_FogVolumeShape': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    
class Font(Resource):
    fallbacks: 'list[24/17:Font]'
    def set_fallbacks(self, fallbacks: 'list[Font]') -> None: ...
    def get_fallbacks(self) -> 'list[Font]': ...
    def find_variation(self, variation_coordinates: 'Dictionary', face_index: int = default('''0'''), strength: float = default('''0.0'''), transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), spacing_top: int = default('''0'''), spacing_bottom: int = default('''0'''), spacing_space: int = default('''0'''), spacing_glyph: int = default('''0'''), baseline_offset: float = default('''0.0''')) -> 'RID': ...
    def get_rids(self) -> 'list[RID]': ...
    def get_height(self, font_size: int = default('''16''')) -> float: ...
    def get_ascent(self, font_size: int = default('''16''')) -> float: ...
    def get_descent(self, font_size: int = default('''16''')) -> float: ...
    def get_underline_position(self, font_size: int = default('''16''')) -> float: ...
    def get_underline_thickness(self, font_size: int = default('''16''')) -> float: ...
    def get_font_name(self) -> 'String': ...
    def get_font_style_name(self) -> 'String': ...
    def get_ot_name_strings(self) -> 'Dictionary': ...
    def get_font_style(self) -> 'TextServer_FontStyle': ...
    def get_font_weight(self) -> int: ...
    def get_font_stretch(self) -> int: ...
    def get_spacing(self, spacing: 'TextServer_SpacingType') -> int: ...
    def get_opentype_features(self) -> 'Dictionary': ...
    def set_cache_capacity(self, single_line: int, multi_line: int) -> None: ...
    def get_string_size(self, text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> 'Vector2': ...
    def get_multiline_string_size(self, text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), max_lines: int = default('''-1'''), brk_flags: 'TextServer_LineBreakFlag' = default('''3'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> 'Vector2': ...
    def draw_string(self, canvas_item: 'RID', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_multiline_string(self, canvas_item: 'RID', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), max_lines: int = default('''-1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer_LineBreakFlag' = default('''3'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_string_outline(self, canvas_item: 'RID', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), size: int = default('''1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def draw_multiline_string_outline(self, canvas_item: 'RID', pos: 'Vector2', text: 'String', alignment: 'HorizontalAlignment' = default('''0'''), width: float = default('''-1'''), font_size: int = default('''16'''), max_lines: int = default('''-1'''), size: int = default('''1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer_LineBreakFlag' = default('''3'''), justification_flags: 'TextServer_JustificationFlag' = default('''3'''), direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def get_char_size(self, char: int, font_size: int) -> 'Vector2': ...
    def draw_char(self, canvas_item: 'RID', pos: 'Vector2', char: int, font_size: int, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> float: ...
    def draw_char_outline(self, canvas_item: 'RID', pos: 'Vector2', char: int, font_size: int, size: int = default('''-1'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> float: ...
    def has_char(self, char: int) -> bool: ...
    def get_supported_chars(self) -> 'String': ...
    def is_language_supported(self, language: 'String') -> bool: ...
    def is_script_supported(self, script: 'String') -> bool: ...
    def get_supported_feature_list(self) -> 'Dictionary': ...
    def get_supported_variation_list(self) -> 'Dictionary': ...
    def get_face_count(self) -> int: ...
    
class FontFile(Font):
    data: 'PackedByteArray'
    generate_mipmaps: bool
    disable_embedded_bitmaps: bool
    antialiasing: int
    font_name: 'String'
    style_name: 'String'
    font_style: int
    font_weight: int
    font_stretch: int
    subpixel_positioning: int
    keep_rounding_remainders: bool
    multichannel_signed_distance_field: bool
    msdf_pixel_range: int
    msdf_size: int
    allow_system_fallback: bool
    force_autohinter: bool
    hinting: int
    oversampling: float
    fixed_size: int
    fixed_size_scale_mode: int
    opentype_feature_overrides: 'Dictionary'
    def load_bitmap_font(self, path: 'String') -> 'Error': ...
    def load_dynamic_font(self, path: 'String') -> 'Error': ...
    def set_data(self, data: 'PackedByteArray') -> None: ...
    def get_data(self) -> 'PackedByteArray': ...
    def set_font_name(self, name: 'String') -> None: ...
    def set_font_style_name(self, name: 'String') -> None: ...
    def set_font_style(self, style: 'TextServer_FontStyle') -> None: ...
    def set_font_weight(self, weight: int) -> None: ...
    def set_font_stretch(self, stretch: int) -> None: ...
    def set_antialiasing(self, antialiasing: 'TextServer_FontAntialiasing') -> None: ...
    def get_antialiasing(self) -> 'TextServer_FontAntialiasing': ...
    def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps: bool) -> None: ...
    def get_disable_embedded_bitmaps(self) -> bool: ...
    def set_generate_mipmaps(self, generate_mipmaps: bool) -> None: ...
    def get_generate_mipmaps(self) -> bool: ...
    def set_multichannel_signed_distance_field(self, msdf: bool) -> None: ...
    def is_multichannel_signed_distance_field(self) -> bool: ...
    def set_msdf_pixel_range(self, msdf_pixel_range: int) -> None: ...
    def get_msdf_pixel_range(self) -> int: ...
    def set_msdf_size(self, msdf_size: int) -> None: ...
    def get_msdf_size(self) -> int: ...
    def set_fixed_size(self, fixed_size: int) -> None: ...
    def get_fixed_size(self) -> int: ...
    def set_fixed_size_scale_mode(self, fixed_size_scale_mode: 'TextServer_FixedSizeScaleMode') -> None: ...
    def get_fixed_size_scale_mode(self) -> 'TextServer_FixedSizeScaleMode': ...
    def set_allow_system_fallback(self, allow_system_fallback: bool) -> None: ...
    def is_allow_system_fallback(self) -> bool: ...
    def set_force_autohinter(self, force_autohinter: bool) -> None: ...
    def is_force_autohinter(self) -> bool: ...
    def set_hinting(self, hinting: 'TextServer_Hinting') -> None: ...
    def get_hinting(self) -> 'TextServer_Hinting': ...
    def set_subpixel_positioning(self, subpixel_positioning: 'TextServer_SubpixelPositioning') -> None: ...
    def get_subpixel_positioning(self) -> 'TextServer_SubpixelPositioning': ...
    def set_keep_rounding_remainders(self, keep_rounding_remainders: bool) -> None: ...
    def get_keep_rounding_remainders(self) -> bool: ...
    def set_oversampling(self, oversampling: float) -> None: ...
    def get_oversampling(self) -> float: ...
    def get_cache_count(self) -> int: ...
    def clear_cache(self) -> None: ...
    def remove_cache(self, cache_index: int) -> None: ...
    def get_size_cache_list(self, cache_index: int) -> 'list[Vector2i]': ...
    def clear_size_cache(self, cache_index: int) -> None: ...
    def remove_size_cache(self, cache_index: int, size: 'Vector2i') -> None: ...
    def set_variation_coordinates(self, cache_index: int, variation_coordinates: 'Dictionary') -> None: ...
    def get_variation_coordinates(self, cache_index: int) -> 'Dictionary': ...
    def set_embolden(self, cache_index: int, strength: float) -> None: ...
    def get_embolden(self, cache_index: int) -> float: ...
    def set_transform(self, cache_index: int, transform: 'Transform2D') -> None: ...
    def get_transform(self, cache_index: int) -> 'Transform2D': ...
    def set_extra_spacing(self, cache_index: int, spacing: 'TextServer_SpacingType', value: int) -> None: ...
    def get_extra_spacing(self, cache_index: int, spacing: 'TextServer_SpacingType') -> int: ...
    def set_extra_baseline_offset(self, cache_index: int, baseline_offset: float) -> None: ...
    def get_extra_baseline_offset(self, cache_index: int) -> float: ...
    def set_face_index(self, cache_index: int, face_index: int) -> None: ...
    def get_face_index(self, cache_index: int) -> int: ...
    def set_cache_ascent(self, cache_index: int, size: int, ascent: float) -> None: ...
    def get_cache_ascent(self, cache_index: int, size: int) -> float: ...
    def set_cache_descent(self, cache_index: int, size: int, descent: float) -> None: ...
    def get_cache_descent(self, cache_index: int, size: int) -> float: ...
    def set_cache_underline_position(self, cache_index: int, size: int, underline_position: float) -> None: ...
    def get_cache_underline_position(self, cache_index: int, size: int) -> float: ...
    def set_cache_underline_thickness(self, cache_index: int, size: int, underline_thickness: float) -> None: ...
    def get_cache_underline_thickness(self, cache_index: int, size: int) -> float: ...
    def set_cache_scale(self, cache_index: int, size: int, scale: float) -> None: ...
    def get_cache_scale(self, cache_index: int, size: int) -> float: ...
    def get_texture_count(self, cache_index: int, size: 'Vector2i') -> int: ...
    def clear_textures(self, cache_index: int, size: 'Vector2i') -> None: ...
    def remove_texture(self, cache_index: int, size: 'Vector2i', texture_index: int) -> None: ...
    def set_texture_image(self, cache_index: int, size: 'Vector2i', texture_index: int, image: 'Image') -> None: ...
    def get_texture_image(self, cache_index: int, size: 'Vector2i', texture_index: int) -> 'Image': ...
    def set_texture_offsets(self, cache_index: int, size: 'Vector2i', texture_index: int, offset: 'PackedInt32Array') -> None: ...
    def get_texture_offsets(self, cache_index: int, size: 'Vector2i', texture_index: int) -> 'PackedInt32Array': ...
    def get_glyph_list(self, cache_index: int, size: 'Vector2i') -> 'PackedInt32Array': ...
    def clear_glyphs(self, cache_index: int, size: 'Vector2i') -> None: ...
    def remove_glyph(self, cache_index: int, size: 'Vector2i', glyph: int) -> None: ...
    def set_glyph_advance(self, cache_index: int, size: int, glyph: int, advance: 'Vector2') -> None: ...
    def get_glyph_advance(self, cache_index: int, size: int, glyph: int) -> 'Vector2': ...
    def set_glyph_offset(self, cache_index: int, size: 'Vector2i', glyph: int, offset: 'Vector2') -> None: ...
    def get_glyph_offset(self, cache_index: int, size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def set_glyph_size(self, cache_index: int, size: 'Vector2i', glyph: int, gl_size: 'Vector2') -> None: ...
    def get_glyph_size(self, cache_index: int, size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def set_glyph_uv_rect(self, cache_index: int, size: 'Vector2i', glyph: int, uv_rect: 'Rect2') -> None: ...
    def get_glyph_uv_rect(self, cache_index: int, size: 'Vector2i', glyph: int) -> 'Rect2': ...
    def set_glyph_texture_idx(self, cache_index: int, size: 'Vector2i', glyph: int, texture_idx: int) -> None: ...
    def get_glyph_texture_idx(self, cache_index: int, size: 'Vector2i', glyph: int) -> int: ...
    def get_kerning_list(self, cache_index: int, size: int) -> 'list[Vector2i]': ...
    def clear_kerning_map(self, cache_index: int, size: int) -> None: ...
    def remove_kerning(self, cache_index: int, size: int, glyph_pair: 'Vector2i') -> None: ...
    def set_kerning(self, cache_index: int, size: int, glyph_pair: 'Vector2i', kerning: 'Vector2') -> None: ...
    def get_kerning(self, cache_index: int, size: int, glyph_pair: 'Vector2i') -> 'Vector2': ...
    def render_range(self, cache_index: int, size: 'Vector2i', start: int, end: int) -> None: ...
    def render_glyph(self, cache_index: int, size: 'Vector2i', index: int) -> None: ...
    def set_language_support_override(self, language: 'String', supported: bool) -> None: ...
    def get_language_support_override(self, language: 'String') -> bool: ...
    def remove_language_support_override(self, language: 'String') -> None: ...
    def get_language_support_overrides(self) -> 'PackedStringArray': ...
    def set_script_support_override(self, script: 'String', supported: bool) -> None: ...
    def get_script_support_override(self, script: 'String') -> bool: ...
    def remove_script_support_override(self, script: 'String') -> None: ...
    def get_script_support_overrides(self) -> 'PackedStringArray': ...
    def set_opentype_feature_overrides(self, overrides: 'Dictionary') -> None: ...
    def get_opentype_feature_overrides(self) -> 'Dictionary': ...
    def get_glyph_index(self, size: int, char: int, variation_selector: int) -> int: ...
    def get_char_from_glyph_index(self, size: int, glyph_index: int) -> int: ...
    
class FontVariation(Font):
    base_font: 'Font'
    variation_opentype: 'Dictionary'
    variation_face_index: int
    variation_embolden: float
    variation_transform: 'Transform2D'
    opentype_features: 'Dictionary'
    spacing_glyph: int
    spacing_space: int
    spacing_top: int
    spacing_bottom: int
    baseline_offset: float
    def set_base_font(self, font: 'Font') -> None: ...
    def get_base_font(self) -> 'Font': ...
    def set_variation_opentype(self, coords: 'Dictionary') -> None: ...
    def get_variation_opentype(self) -> 'Dictionary': ...
    def set_variation_embolden(self, strength: float) -> None: ...
    def get_variation_embolden(self) -> float: ...
    def set_variation_face_index(self, face_index: int) -> None: ...
    def get_variation_face_index(self) -> int: ...
    def set_variation_transform(self, transform: 'Transform2D') -> None: ...
    def get_variation_transform(self) -> 'Transform2D': ...
    def set_opentype_features(self, features: 'Dictionary') -> None: ...
    def set_spacing(self, spacing: 'TextServer_SpacingType', value: int) -> None: ...
    def set_baseline_offset(self, baseline_offset: float) -> None: ...
    def get_baseline_offset(self) -> float: ...
    
class FramebufferCacheRD(Object):
    @staticmethod
    def get_cache_multipass(textures: 'list[RID]', passes: 'list[RDFramebufferPass]', views: int) -> 'RID': ...
    
class GDExtension(Resource):
    def is_library_open(self) -> bool: ...
    def get_minimum_library_initialization_level(self) -> 'GDExtension_InitializationLevel': ...
    
class GDExtension_InitializationLevel(Enum):
    INITIALIZATION_LEVEL_CORE = 0
    INITIALIZATION_LEVEL_SERVERS = 1
    INITIALIZATION_LEVEL_SCENE = 2
    INITIALIZATION_LEVEL_EDITOR = 3

class GDExtensionManager(Object):
    extensions_reloaded: Signal[Callable[[], None]]  # extensions_reloaded()
    extension_loaded: Signal[Callable[['GDExtension'], None]]  # extension_loaded(extension: 'GDExtension')
    extension_unloading: Signal[Callable[['GDExtension'], None]]  # extension_unloading(extension: 'GDExtension')
    def load_extension(self, path: 'String') -> 'GDExtensionManager_LoadStatus': ...
    def reload_extension(self, path: 'String') -> 'GDExtensionManager_LoadStatus': ...
    def unload_extension(self, path: 'String') -> 'GDExtensionManager_LoadStatus': ...
    def is_extension_loaded(self, path: 'String') -> bool: ...
    def get_loaded_extensions(self) -> 'PackedStringArray': ...
    def get_extension(self, path: 'String') -> 'GDExtension': ...
    
class GDExtensionManager_LoadStatus(Enum):
    LOAD_STATUS_OK = 0
    LOAD_STATUS_FAILED = 1
    LOAD_STATUS_ALREADY_LOADED = 2
    LOAD_STATUS_NOT_LOADED = 3
    LOAD_STATUS_NEEDS_RESTART = 4

class GDScript(Script):
    def new(self, *arg) -> 'Variant': ...
    
class GDScriptSyntaxHighlighter(EditorSyntaxHighlighter):
    pass
    
class GLTFAccessor(Resource):
    buffer_view: int
    byte_offset: int
    component_type: int
    normalized: bool
    count: int
    accessor_type: int
    type: int
    min: 'PackedFloat64Array'
    max: 'PackedFloat64Array'
    sparse_count: int
    sparse_indices_buffer_view: int
    sparse_indices_byte_offset: int
    sparse_indices_component_type: int
    sparse_values_buffer_view: int
    sparse_values_byte_offset: int
    def get_buffer_view(self) -> int: ...
    def set_buffer_view(self, buffer_view: int) -> None: ...
    def get_byte_offset(self) -> int: ...
    def set_byte_offset(self, byte_offset: int) -> None: ...
    def get_component_type(self) -> int: ...
    def set_component_type(self, component_type: int) -> None: ...
    def get_normalized(self) -> bool: ...
    def set_normalized(self, normalized: bool) -> None: ...
    def get_count(self) -> int: ...
    def set_count(self, count: int) -> None: ...
    def get_accessor_type(self) -> 'GLTFAccessor_GLTFAccessorType': ...
    def set_accessor_type(self, accessor_type: 'GLTFAccessor_GLTFAccessorType') -> None: ...
    def get_type(self) -> int: ...
    def set_type(self, type: int) -> None: ...
    def get_min(self) -> 'PackedFloat64Array': ...
    def set_min(self, min: 'PackedFloat64Array') -> None: ...
    def get_max(self) -> 'PackedFloat64Array': ...
    def set_max(self, max: 'PackedFloat64Array') -> None: ...
    def get_sparse_count(self) -> int: ...
    def set_sparse_count(self, sparse_count: int) -> None: ...
    def get_sparse_indices_buffer_view(self) -> int: ...
    def set_sparse_indices_buffer_view(self, sparse_indices_buffer_view: int) -> None: ...
    def get_sparse_indices_byte_offset(self) -> int: ...
    def set_sparse_indices_byte_offset(self, sparse_indices_byte_offset: int) -> None: ...
    def get_sparse_indices_component_type(self) -> int: ...
    def set_sparse_indices_component_type(self, sparse_indices_component_type: int) -> None: ...
    def get_sparse_values_buffer_view(self) -> int: ...
    def set_sparse_values_buffer_view(self, sparse_values_buffer_view: int) -> None: ...
    def get_sparse_values_byte_offset(self) -> int: ...
    def set_sparse_values_byte_offset(self, sparse_values_byte_offset: int) -> None: ...
    
class GLTFAccessor_GLTFAccessorType(Enum):
    TYPE_SCALAR = 0
    TYPE_VEC2 = 1
    TYPE_VEC3 = 2
    TYPE_VEC4 = 3
    TYPE_MAT2 = 4
    TYPE_MAT3 = 5
    TYPE_MAT4 = 6

class GLTFAccessor_GLTFComponentType(Enum):
    COMPONENT_TYPE_NONE = 0
    COMPONENT_TYPE_SIGNED_BYTE = 5120
    COMPONENT_TYPE_UNSIGNED_BYTE = 5121
    COMPONENT_TYPE_SIGNED_SHORT = 5122
    COMPONENT_TYPE_UNSIGNED_SHORT = 5123
    COMPONENT_TYPE_SIGNED_INT = 5124
    COMPONENT_TYPE_UNSIGNED_INT = 5125
    COMPONENT_TYPE_SINGLE_FLOAT = 5126
    COMPONENT_TYPE_DOUBLE_FLOAT = 5130
    COMPONENT_TYPE_HALF_FLOAT = 5131
    COMPONENT_TYPE_SIGNED_LONG = 5134
    COMPONENT_TYPE_UNSIGNED_LONG = 5135

class GLTFAnimation(Resource):
    original_name: 'String'
    loop: bool
    def get_original_name(self) -> 'String': ...
    def set_original_name(self, original_name: 'String') -> None: ...
    def get_loop(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    
class GLTFBufferView(Resource):
    buffer: int
    byte_offset: int
    byte_length: int
    byte_stride: int
    indices: bool
    vertex_attributes: bool
    def load_buffer_view_data(self, state: 'GLTFState') -> 'PackedByteArray': ...
    def get_buffer(self) -> int: ...
    def set_buffer(self, buffer: int) -> None: ...
    def get_byte_offset(self) -> int: ...
    def set_byte_offset(self, byte_offset: int) -> None: ...
    def get_byte_length(self) -> int: ...
    def set_byte_length(self, byte_length: int) -> None: ...
    def get_byte_stride(self) -> int: ...
    def set_byte_stride(self, byte_stride: int) -> None: ...
    def get_indices(self) -> bool: ...
    def set_indices(self, indices: bool) -> None: ...
    def get_vertex_attributes(self) -> bool: ...
    def set_vertex_attributes(self, is_attributes: bool) -> None: ...
    
class GLTFCamera(Resource):
    perspective: bool
    fov: float
    size_mag: float
    depth_far: float
    depth_near: float
    @staticmethod
    def from_node(camera_node: 'Camera3D') -> 'GLTFCamera': ...
    def to_node(self) -> 'Camera3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFCamera': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_perspective(self) -> bool: ...
    def set_perspective(self, perspective: bool) -> None: ...
    def get_fov(self) -> float: ...
    def set_fov(self, fov: float) -> None: ...
    def get_size_mag(self) -> float: ...
    def set_size_mag(self, size_mag: float) -> None: ...
    def get_depth_far(self) -> float: ...
    def set_depth_far(self, zdepth_far: float) -> None: ...
    def get_depth_near(self) -> float: ...
    def set_depth_near(self, zdepth_near: float) -> None: ...
    
class GLTFDocument(Resource):
    image_format: 'String'
    lossy_quality: float
    root_node_mode: int
    def set_image_format(self, image_format: 'String') -> None: ...
    def get_image_format(self) -> 'String': ...
    def set_lossy_quality(self, lossy_quality: float) -> None: ...
    def get_lossy_quality(self) -> float: ...
    def set_root_node_mode(self, root_node_mode: 'GLTFDocument_RootNodeMode') -> None: ...
    def get_root_node_mode(self) -> 'GLTFDocument_RootNodeMode': ...
    def append_from_file(self, path: 'String', state: 'GLTFState', flags: int = default('''0'''), base_path: 'String' = default('''""''')) -> 'Error': ...
    def append_from_buffer(self, bytes: 'PackedByteArray', base_path: 'String', state: 'GLTFState', flags: int = default('''0''')) -> 'Error': ...
    def append_from_scene(self, node: 'Node', state: 'GLTFState', flags: int = default('''0''')) -> 'Error': ...
    def generate_scene(self, state: 'GLTFState', bake_fps: float = default('''30'''), trimming: bool = default('''false'''), remove_immutable_tracks: bool = default('''true''')) -> 'Node': ...
    def generate_buffer(self, state: 'GLTFState') -> 'PackedByteArray': ...
    def write_to_filesystem(self, state: 'GLTFState', path: 'String') -> 'Error': ...
    @staticmethod
    def import_object_model_property(state: 'GLTFState', json_pointer: 'String') -> 'GLTFObjectModelProperty': ...
    @staticmethod
    def export_object_model_property(state: 'GLTFState', node_path: 'NodePath', godot_node: 'Node', gltf_node_index: int) -> 'GLTFObjectModelProperty': ...
    @staticmethod
    def register_gltf_document_extension(extension: 'GLTFDocumentExtension', first_priority: bool = default('''false''')) -> None: ...
    @staticmethod
    def unregister_gltf_document_extension(extension: 'GLTFDocumentExtension') -> None: ...
    @staticmethod
    def get_supported_gltf_extensions() -> 'PackedStringArray': ...
    
class GLTFDocument_RootNodeMode(Enum):
    ROOT_NODE_MODE_SINGLE_ROOT = 0
    ROOT_NODE_MODE_KEEP_ROOT = 1
    ROOT_NODE_MODE_MULTI_ROOT = 2

class GLTFDocumentExtension(Resource):
    def _import_preflight(self, state: 'GLTFState', extensions: 'PackedStringArray') -> 'Error': ...
    def _get_supported_extensions(self) -> 'PackedStringArray': ...
    def _parse_node_extensions(self, state: 'GLTFState', gltf_node: 'GLTFNode', extensions: 'Dictionary') -> 'Error': ...
    def _parse_image_data(self, state: 'GLTFState', image_data: 'PackedByteArray', mime_type: 'String', ret_image: 'Image') -> 'Error': ...
    def _get_image_file_extension(self) -> 'String': ...
    def _parse_texture_json(self, state: 'GLTFState', texture_json: 'Dictionary', ret_gltf_texture: 'GLTFTexture') -> 'Error': ...
    def _import_object_model_property(self, state: 'GLTFState', split_json_pointer: 'PackedStringArray', partial_paths: 'list[NodePath]') -> 'GLTFObjectModelProperty': ...
    def _import_post_parse(self, state: 'GLTFState') -> 'Error': ...
    def _import_pre_generate(self, state: 'GLTFState') -> 'Error': ...
    def _generate_scene_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', scene_parent: 'Node') -> 'Node3D': ...
    def _import_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', json: 'Dictionary', node: 'Node') -> 'Error': ...
    def _import_post(self, state: 'GLTFState', root: 'Node') -> 'Error': ...
    def _export_preflight(self, state: 'GLTFState', root: 'Node') -> 'Error': ...
    def _convert_scene_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', scene_node: 'Node') -> None: ...
    def _export_post_convert(self, state: 'GLTFState', root: 'Node') -> 'Error': ...
    def _export_preserialize(self, state: 'GLTFState') -> 'Error': ...
    def _export_object_model_property(self, state: 'GLTFState', node_path: 'NodePath', godot_node: 'Node', gltf_node_index: int, target_object: 'Object', target_depth: int) -> 'GLTFObjectModelProperty': ...
    def _get_saveable_image_formats(self) -> 'PackedStringArray': ...
    def _serialize_image_to_bytes(self, state: 'GLTFState', image: 'Image', image_dict: 'Dictionary', image_format: 'String', lossy_quality: float) -> 'PackedByteArray': ...
    def _save_image_at_path(self, state: 'GLTFState', image: 'Image', file_path: 'String', image_format: 'String', lossy_quality: float) -> 'Error': ...
    def _serialize_texture_json(self, state: 'GLTFState', texture_json: 'Dictionary', gltf_texture: 'GLTFTexture', image_format: 'String') -> 'Error': ...
    def _export_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', json: 'Dictionary', node: 'Node') -> 'Error': ...
    def _export_post(self, state: 'GLTFState') -> 'Error': ...
    
class GLTFDocumentExtensionConvertImporterMesh(GLTFDocumentExtension):
    pass
    
class GLTFLight(Resource):
    color: 'Color'
    intensity: float
    light_type: 'String'
    range: float
    inner_cone_angle: float
    outer_cone_angle: float
    @staticmethod
    def from_node(light_node: 'Light3D') -> 'GLTFLight': ...
    def to_node(self) -> 'Light3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFLight': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_color(self) -> 'Color': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_intensity(self) -> float: ...
    def set_intensity(self, intensity: float) -> None: ...
    def get_light_type(self) -> 'String': ...
    def set_light_type(self, light_type: 'String') -> None: ...
    def get_range(self) -> float: ...
    def set_range(self, range: float) -> None: ...
    def get_inner_cone_angle(self) -> float: ...
    def set_inner_cone_angle(self, inner_cone_angle: float) -> None: ...
    def get_outer_cone_angle(self) -> float: ...
    def set_outer_cone_angle(self, outer_cone_angle: float) -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    
class GLTFMesh(Resource):
    original_name: 'String'
    mesh: 'Object'
    blend_weights: 'PackedFloat32Array'
    instance_materials: 'Array'
    def get_original_name(self) -> 'String': ...
    def set_original_name(self, original_name: 'String') -> None: ...
    def get_mesh(self) -> 'ImporterMesh': ...
    def set_mesh(self, mesh: 'ImporterMesh') -> None: ...
    def get_blend_weights(self) -> 'PackedFloat32Array': ...
    def set_blend_weights(self, blend_weights: 'PackedFloat32Array') -> None: ...
    def get_instance_materials(self) -> 'list[Material]': ...
    def set_instance_materials(self, instance_materials: 'list[Material]') -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    
class GLTFNode(Resource):
    original_name: 'String'
    parent: int
    height: int
    xform: 'Transform3D'
    mesh: int
    camera: int
    skin: int
    skeleton: int
    position: 'Vector3'
    rotation: 'Quaternion'
    scale: 'Vector3'
    children: 'PackedInt32Array'
    light: int
    def get_original_name(self) -> 'String': ...
    def set_original_name(self, original_name: 'String') -> None: ...
    def get_parent(self) -> int: ...
    def set_parent(self, parent: int) -> None: ...
    def get_height(self) -> int: ...
    def set_height(self, height: int) -> None: ...
    def get_xform(self) -> 'Transform3D': ...
    def set_xform(self, xform: 'Transform3D') -> None: ...
    def get_mesh(self) -> int: ...
    def set_mesh(self, mesh: int) -> None: ...
    def get_camera(self) -> int: ...
    def set_camera(self, camera: int) -> None: ...
    def get_skin(self) -> int: ...
    def set_skin(self, skin: int) -> None: ...
    def get_skeleton(self) -> int: ...
    def set_skeleton(self, skeleton: int) -> None: ...
    def get_position(self) -> 'Vector3': ...
    def set_position(self, position: 'Vector3') -> None: ...
    def get_rotation(self) -> 'Quaternion': ...
    def set_rotation(self, rotation: 'Quaternion') -> None: ...
    def get_scale(self) -> 'Vector3': ...
    def set_scale(self, scale: 'Vector3') -> None: ...
    def get_children(self) -> 'PackedInt32Array': ...
    def set_children(self, children: 'PackedInt32Array') -> None: ...
    def append_child_index(self, child_index: int) -> None: ...
    def get_light(self) -> int: ...
    def set_light(self, light: int) -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    def get_scene_node_path(self, gltf_state: 'GLTFState', handle_skeletons: bool = default('''true''')) -> 'NodePath': ...
    
class GLTFObjectModelProperty(RefCounted):
    gltf_to_godot_expression: 'Expression'
    godot_to_gltf_expression: 'Expression'
    node_paths: 'Array'
    object_model_type: int
    json_pointers: 'PackedStringArray'
    variant_type: int
    def append_node_path(self, node_path: 'NodePath') -> None: ...
    def append_path_to_property(self, node_path: 'NodePath', prop_name: 'StringName') -> None: ...
    def get_accessor_type(self) -> 'GLTFAccessor_GLTFAccessorType': ...
    def get_gltf_to_godot_expression(self) -> 'Expression': ...
    def set_gltf_to_godot_expression(self, gltf_to_godot_expr: 'Expression') -> None: ...
    def get_godot_to_gltf_expression(self) -> 'Expression': ...
    def set_godot_to_gltf_expression(self, godot_to_gltf_expr: 'Expression') -> None: ...
    def get_node_paths(self) -> 'list[NodePath]': ...
    def has_node_paths(self) -> bool: ...
    def set_node_paths(self, node_paths: 'list[NodePath]') -> None: ...
    def get_object_model_type(self) -> 'GLTFObjectModelProperty_GLTFObjectModelType': ...
    def set_object_model_type(self, type: 'GLTFObjectModelProperty_GLTFObjectModelType') -> None: ...
    def get_json_pointers(self) -> 'list[PackedStringArray]': ...
    def has_json_pointers(self) -> bool: ...
    def set_json_pointers(self, json_pointers: 'list[PackedStringArray]') -> None: ...
    def get_variant_type(self) -> 'Variant_Type': ...
    def set_variant_type(self, variant_type: 'Variant_Type') -> None: ...
    def set_types(self, variant_type: 'Variant_Type', obj_model_type: 'GLTFObjectModelProperty_GLTFObjectModelType') -> None: ...
    
class GLTFObjectModelProperty_GLTFObjectModelType(Enum):
    GLTF_OBJECT_MODEL_TYPE_UNKNOWN = 0
    GLTF_OBJECT_MODEL_TYPE_BOOL = 1
    GLTF_OBJECT_MODEL_TYPE_FLOAT = 2
    GLTF_OBJECT_MODEL_TYPE_FLOAT_ARRAY = 3
    GLTF_OBJECT_MODEL_TYPE_FLOAT2 = 4
    GLTF_OBJECT_MODEL_TYPE_FLOAT3 = 5
    GLTF_OBJECT_MODEL_TYPE_FLOAT4 = 6
    GLTF_OBJECT_MODEL_TYPE_FLOAT2X2 = 7
    GLTF_OBJECT_MODEL_TYPE_FLOAT3X3 = 8
    GLTF_OBJECT_MODEL_TYPE_FLOAT4X4 = 9
    GLTF_OBJECT_MODEL_TYPE_INT = 10

class GLTFPhysicsBody(Resource):
    body_type: 'String'
    mass: float
    linear_velocity: 'Vector3'
    angular_velocity: 'Vector3'
    center_of_mass: 'Vector3'
    inertia_diagonal: 'Vector3'
    inertia_orientation: 'Quaternion'
    inertia_tensor: 'Basis'
    @staticmethod
    def from_node(body_node: 'CollisionObject3D') -> 'GLTFPhysicsBody': ...
    def to_node(self) -> 'CollisionObject3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFPhysicsBody': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_body_type(self) -> 'String': ...
    def set_body_type(self, body_type: 'String') -> None: ...
    def get_mass(self) -> float: ...
    def set_mass(self, mass: float) -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_linear_velocity(self, linear_velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, angular_velocity: 'Vector3') -> None: ...
    def get_center_of_mass(self) -> 'Vector3': ...
    def set_center_of_mass(self, center_of_mass: 'Vector3') -> None: ...
    def get_inertia_diagonal(self) -> 'Vector3': ...
    def set_inertia_diagonal(self, inertia_diagonal: 'Vector3') -> None: ...
    def get_inertia_orientation(self) -> 'Quaternion': ...
    def set_inertia_orientation(self, inertia_orientation: 'Quaternion') -> None: ...
    def get_inertia_tensor(self) -> 'Basis': ...
    def set_inertia_tensor(self, inertia_tensor: 'Basis') -> None: ...
    
class GLTFPhysicsShape(Resource):
    shape_type: 'String'
    size: 'Vector3'
    radius: float
    height: float
    is_trigger: bool
    mesh_index: int
    importer_mesh: 'ImporterMesh'
    @staticmethod
    def from_node(shape_node: 'CollisionShape3D') -> 'GLTFPhysicsShape': ...
    def to_node(self, cache_shapes: bool = default('''false''')) -> 'CollisionShape3D': ...
    @staticmethod
    def from_resource(shape_resource: 'Shape3D') -> 'GLTFPhysicsShape': ...
    def to_resource(self, cache_shapes: bool = default('''false''')) -> 'Shape3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFPhysicsShape': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_shape_type(self) -> 'String': ...
    def set_shape_type(self, shape_type: 'String') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_radius(self) -> float: ...
    def set_radius(self, radius: float) -> None: ...
    def get_height(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_is_trigger(self) -> bool: ...
    def set_is_trigger(self, is_trigger: bool) -> None: ...
    def get_mesh_index(self) -> int: ...
    def set_mesh_index(self, mesh_index: int) -> None: ...
    def get_importer_mesh(self) -> 'ImporterMesh': ...
    def set_importer_mesh(self, importer_mesh: 'ImporterMesh') -> None: ...
    
class GLTFSkeleton(Resource):
    joints: 'PackedInt32Array'
    roots: 'PackedInt32Array'
    unique_names: 'Array'
    godot_bone_node: 'Dictionary'
    def get_joints(self) -> 'PackedInt32Array': ...
    def set_joints(self, joints: 'PackedInt32Array') -> None: ...
    def get_roots(self) -> 'PackedInt32Array': ...
    def set_roots(self, roots: 'PackedInt32Array') -> None: ...
    def get_godot_skeleton(self) -> 'Skeleton3D': ...
    def get_unique_names(self) -> 'list[String]': ...
    def set_unique_names(self, unique_names: 'list[String]') -> None: ...
    def get_godot_bone_node(self) -> 'Dictionary': ...
    def set_godot_bone_node(self, godot_bone_node: 'Dictionary') -> None: ...
    def get_bone_attachment_count(self) -> int: ...
    def get_bone_attachment(self, idx: int) -> 'BoneAttachment3D': ...
    
class GLTFSkin(Resource):
    skin_root: int
    joints_original: 'PackedInt32Array'
    inverse_binds: 'Array'
    joints: 'PackedInt32Array'
    non_joints: 'PackedInt32Array'
    roots: 'PackedInt32Array'
    skeleton: int
    joint_i_to_bone_i: 'Dictionary'
    joint_i_to_name: 'Dictionary'
    godot_skin: 'Skin'
    def get_skin_root(self) -> int: ...
    def set_skin_root(self, skin_root: int) -> None: ...
    def get_joints_original(self) -> 'PackedInt32Array': ...
    def set_joints_original(self, joints_original: 'PackedInt32Array') -> None: ...
    def get_inverse_binds(self) -> 'list[Transform3D]': ...
    def set_inverse_binds(self, inverse_binds: 'list[Transform3D]') -> None: ...
    def get_joints(self) -> 'PackedInt32Array': ...
    def set_joints(self, joints: 'PackedInt32Array') -> None: ...
    def get_non_joints(self) -> 'PackedInt32Array': ...
    def set_non_joints(self, non_joints: 'PackedInt32Array') -> None: ...
    def get_roots(self) -> 'PackedInt32Array': ...
    def set_roots(self, roots: 'PackedInt32Array') -> None: ...
    def get_skeleton(self) -> int: ...
    def set_skeleton(self, skeleton: int) -> None: ...
    def get_joint_i_to_bone_i(self) -> 'Dictionary': ...
    def set_joint_i_to_bone_i(self, joint_i_to_bone_i: 'Dictionary') -> None: ...
    def get_joint_i_to_name(self) -> 'Dictionary': ...
    def set_joint_i_to_name(self, joint_i_to_name: 'Dictionary') -> None: ...
    def get_godot_skin(self) -> 'Skin': ...
    def set_godot_skin(self, godot_skin: 'Skin') -> None: ...
    
class GLTFSpecGloss(Resource):
    diffuse_img: 'Object'
    diffuse_factor: 'Color'
    gloss_factor: float
    specular_factor: 'Color'
    spec_gloss_img: 'Object'
    def get_diffuse_img(self) -> 'Image': ...
    def set_diffuse_img(self, diffuse_img: 'Image') -> None: ...
    def get_diffuse_factor(self) -> 'Color': ...
    def set_diffuse_factor(self, diffuse_factor: 'Color') -> None: ...
    def get_gloss_factor(self) -> float: ...
    def set_gloss_factor(self, gloss_factor: float) -> None: ...
    def get_specular_factor(self) -> 'Color': ...
    def set_specular_factor(self, specular_factor: 'Color') -> None: ...
    def get_spec_gloss_img(self) -> 'Image': ...
    def set_spec_gloss_img(self, spec_gloss_img: 'Image') -> None: ...
    
class GLTFState(Resource):
    json: 'Dictionary'
    major_version: int
    minor_version: int
    copyright: 'String'
    glb_data: 'PackedByteArray'
    use_named_skin_binds: bool
    nodes: 'Array'
    buffers: 'Array'
    buffer_views: 'Array'
    accessors: 'Array'
    meshes: 'Array'
    materials: 'Array'
    scene_name: 'String'
    base_path: 'String'
    filename: 'String'
    root_nodes: 'PackedInt32Array'
    textures: 'Array'
    texture_samplers: 'Array'
    images: 'Array'
    skins: 'Array'
    cameras: 'Array'
    lights: 'Array'
    unique_names: 'Array'
    unique_animation_names: 'Array'
    skeletons: 'Array'
    create_animations: bool
    import_as_skeleton_bones: bool
    animations: 'Array'
    handle_binary_image: int
    bake_fps: float
    HANDLE_BINARY_DISCARD_TEXTURES = 0
    HANDLE_BINARY_EXTRACT_TEXTURES = 1
    HANDLE_BINARY_EMBED_AS_BASISU = 2
    HANDLE_BINARY_EMBED_AS_UNCOMPRESSED = 3
    
    def add_used_extension(self, extension_name: 'String', required: bool) -> None: ...
    def append_data_to_buffers(self, data: 'PackedByteArray', deduplication: bool) -> int: ...
    def append_gltf_node(self, gltf_node: 'GLTFNode', godot_scene_node: 'Node', parent_node_index: int) -> int: ...
    def get_json(self) -> 'Dictionary': ...
    def set_json(self, json: 'Dictionary') -> None: ...
    def get_major_version(self) -> int: ...
    def set_major_version(self, major_version: int) -> None: ...
    def get_minor_version(self) -> int: ...
    def set_minor_version(self, minor_version: int) -> None: ...
    def get_copyright(self) -> 'String': ...
    def set_copyright(self, copyright: 'String') -> None: ...
    def get_glb_data(self) -> 'PackedByteArray': ...
    def set_glb_data(self, glb_data: 'PackedByteArray') -> None: ...
    def get_use_named_skin_binds(self) -> bool: ...
    def set_use_named_skin_binds(self, use_named_skin_binds: bool) -> None: ...
    def get_nodes(self) -> 'list[GLTFNode]': ...
    def set_nodes(self, nodes: 'list[GLTFNode]') -> None: ...
    def get_buffers(self) -> 'list[PackedByteArray]': ...
    def set_buffers(self, buffers: 'list[PackedByteArray]') -> None: ...
    def get_buffer_views(self) -> 'list[GLTFBufferView]': ...
    def set_buffer_views(self, buffer_views: 'list[GLTFBufferView]') -> None: ...
    def get_accessors(self) -> 'list[GLTFAccessor]': ...
    def set_accessors(self, accessors: 'list[GLTFAccessor]') -> None: ...
    def get_meshes(self) -> 'list[GLTFMesh]': ...
    def set_meshes(self, meshes: 'list[GLTFMesh]') -> None: ...
    def get_animation_players_count(self, idx: int) -> int: ...
    def get_animation_player(self, idx: int) -> 'AnimationPlayer': ...
    def get_materials(self) -> 'list[Material]': ...
    def set_materials(self, materials: 'list[Material]') -> None: ...
    def get_scene_name(self) -> 'String': ...
    def set_scene_name(self, scene_name: 'String') -> None: ...
    def get_base_path(self) -> 'String': ...
    def set_base_path(self, base_path: 'String') -> None: ...
    def get_filename(self) -> 'String': ...
    def set_filename(self, filename: 'String') -> None: ...
    def get_root_nodes(self) -> 'PackedInt32Array': ...
    def set_root_nodes(self, root_nodes: 'PackedInt32Array') -> None: ...
    def get_textures(self) -> 'list[GLTFTexture]': ...
    def set_textures(self, textures: 'list[GLTFTexture]') -> None: ...
    def get_texture_samplers(self) -> 'list[GLTFTextureSampler]': ...
    def set_texture_samplers(self, texture_samplers: 'list[GLTFTextureSampler]') -> None: ...
    def get_images(self) -> 'list[Texture2D]': ...
    def set_images(self, images: 'list[Texture2D]') -> None: ...
    def get_skins(self) -> 'list[GLTFSkin]': ...
    def set_skins(self, skins: 'list[GLTFSkin]') -> None: ...
    def get_cameras(self) -> 'list[GLTFCamera]': ...
    def set_cameras(self, cameras: 'list[GLTFCamera]') -> None: ...
    def get_lights(self) -> 'list[GLTFLight]': ...
    def set_lights(self, lights: 'list[GLTFLight]') -> None: ...
    def get_unique_names(self) -> 'list[String]': ...
    def set_unique_names(self, unique_names: 'list[String]') -> None: ...
    def get_unique_animation_names(self) -> 'list[String]': ...
    def set_unique_animation_names(self, unique_animation_names: 'list[String]') -> None: ...
    def get_skeletons(self) -> 'list[GLTFSkeleton]': ...
    def set_skeletons(self, skeletons: 'list[GLTFSkeleton]') -> None: ...
    def get_create_animations(self) -> bool: ...
    def set_create_animations(self, create_animations: bool) -> None: ...
    def get_import_as_skeleton_bones(self) -> bool: ...
    def set_import_as_skeleton_bones(self, import_as_skeleton_bones: bool) -> None: ...
    def get_animations(self) -> 'list[GLTFAnimation]': ...
    def set_animations(self, animations: 'list[GLTFAnimation]') -> None: ...
    def get_scene_node(self, idx: int) -> 'Node': ...
    def get_node_index(self, scene_node: 'Node') -> int: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    def get_handle_binary_image(self) -> int: ...
    def set_handle_binary_image(self, method: int) -> None: ...
    def set_bake_fps(self, value: float) -> None: ...
    def get_bake_fps(self) -> float: ...
    
class GLTFTexture(Resource):
    src_image: int
    sampler: int
    def get_src_image(self) -> int: ...
    def set_src_image(self, src_image: int) -> None: ...
    def get_sampler(self) -> int: ...
    def set_sampler(self, sampler: int) -> None: ...
    
class GLTFTextureSampler(Resource):
    mag_filter: int
    min_filter: int
    wrap_s: int
    wrap_t: int
    def get_mag_filter(self) -> int: ...
    def set_mag_filter(self, filter_mode: int) -> None: ...
    def get_min_filter(self) -> int: ...
    def set_min_filter(self, filter_mode: int) -> None: ...
    def get_wrap_s(self) -> int: ...
    def set_wrap_s(self, wrap_mode: int) -> None: ...
    def get_wrap_t(self) -> int: ...
    def set_wrap_t(self, wrap_mode: int) -> None: ...
    
class GPUParticles2D(Node2D):
    emitting: bool
    amount: int
    amount_ratio: float
    sub_emitter: 'NodePath'
    texture: 'Texture2D'
    lifetime: float
    interp_to_end: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    use_fixed_seed: bool
    seed: int
    fixed_fps: int
    interpolate: bool
    fract_delta: bool
    collision_base_size: float
    visibility_rect: 'Rect2'
    local_coords: bool
    draw_order: int
    trail_enabled: bool
    trail_lifetime: float
    trail_sections: int
    trail_section_subdivisions: int
    process_material: 'ParticleProcessMaterial'
    finished: Signal[Callable[[], None]]  # finished()
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, secs: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_visibility_rect(self, visibility_rect: 'Rect2') -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_interpolate(self, enable: bool) -> None: ...
    def set_process_material(self, material: 'Material') -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def set_collision_base_size(self, size: float) -> None: ...
    def set_interp_to_end(self, interp: float) -> None: ...
    def request_particles_process(self, process_time: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_visibility_rect(self) -> 'Rect2': ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_interpolate(self) -> bool: ...
    def get_process_material(self) -> 'Material': ...
    def get_speed_scale(self) -> float: ...
    def get_collision_base_size(self) -> float: ...
    def get_interp_to_end(self) -> float: ...
    def set_draw_order(self, order: 'GPUParticles2D_DrawOrder') -> None: ...
    def get_draw_order(self) -> 'GPUParticles2D_DrawOrder': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def capture_rect(self) -> 'Rect2': ...
    def restart(self, keep_seed: bool = default('''false''')) -> None: ...
    def set_sub_emitter(self, path: 'NodePath') -> None: ...
    def get_sub_emitter(self) -> 'NodePath': ...
    def emit_particle(self, xform: 'Transform2D', velocity: 'Vector2', color: 'Color', custom: 'Color', flags: int) -> None: ...
    def set_trail_enabled(self, enabled: bool) -> None: ...
    def set_trail_lifetime(self, secs: float) -> None: ...
    def is_trail_enabled(self) -> bool: ...
    def get_trail_lifetime(self) -> float: ...
    def set_trail_sections(self, sections: int) -> None: ...
    def get_trail_sections(self) -> int: ...
    def set_trail_section_subdivisions(self, subdivisions: int) -> None: ...
    def get_trail_section_subdivisions(self) -> int: ...
    def convert_from_particles(self, particles: 'Node') -> None: ...
    def set_amount_ratio(self, ratio: float) -> None: ...
    def get_amount_ratio(self) -> float: ...
    def set_use_fixed_seed(self, use_fixed_seed: bool) -> None: ...
    def get_use_fixed_seed(self) -> bool: ...
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    
class GPUParticles2D_DrawOrder(Enum):
    DRAW_ORDER_INDEX = 0
    DRAW_ORDER_LIFETIME = 1
    DRAW_ORDER_REVERSE_LIFETIME = 2

class GPUParticles2D_EmitFlags(Enum):
    EMIT_FLAG_POSITION = 1
    EMIT_FLAG_ROTATION_SCALE = 2
    EMIT_FLAG_VELOCITY = 4
    EMIT_FLAG_COLOR = 8
    EMIT_FLAG_CUSTOM = 16

class GPUParticles3D(GeometryInstance3D):
    emitting: bool
    amount: int
    amount_ratio: float
    sub_emitter: 'NodePath'
    lifetime: float
    interp_to_end: float
    one_shot: bool
    preprocess: float
    speed_scale: float
    explosiveness: float
    randomness: float
    use_fixed_seed: bool
    seed: int
    fixed_fps: int
    interpolate: bool
    fract_delta: bool
    collision_base_size: float
    visibility_aabb: 'AABB'
    local_coords: bool
    draw_order: int
    transform_align: int
    trail_enabled: bool
    trail_lifetime: float
    process_material: 'ParticleProcessMaterial'
    draw_passes: int
    draw_pass_1: 'Mesh'
    draw_pass_2: 'Mesh'
    draw_pass_3: 'Mesh'
    draw_pass_4: 'Mesh'
    draw_skin: 'Skin'
    MAX_DRAW_PASSES = 4
    
    finished: Signal[Callable[[], None]]  # finished()
    def set_emitting(self, emitting: bool) -> None: ...
    def set_amount(self, amount: int) -> None: ...
    def set_lifetime(self, secs: float) -> None: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def set_pre_process_time(self, secs: float) -> None: ...
    def set_explosiveness_ratio(self, ratio: float) -> None: ...
    def set_randomness_ratio(self, ratio: float) -> None: ...
    def set_visibility_aabb(self, aabb: 'AABB') -> None: ...
    def set_use_local_coordinates(self, enable: bool) -> None: ...
    def set_fixed_fps(self, fps: int) -> None: ...
    def set_fractional_delta(self, enable: bool) -> None: ...
    def set_interpolate(self, enable: bool) -> None: ...
    def set_process_material(self, material: 'Material') -> None: ...
    def set_speed_scale(self, scale: float) -> None: ...
    def set_collision_base_size(self, size: float) -> None: ...
    def set_interp_to_end(self, interp: float) -> None: ...
    def is_emitting(self) -> bool: ...
    def get_amount(self) -> int: ...
    def get_lifetime(self) -> float: ...
    def get_one_shot(self) -> bool: ...
    def get_pre_process_time(self) -> float: ...
    def get_explosiveness_ratio(self) -> float: ...
    def get_randomness_ratio(self) -> float: ...
    def get_visibility_aabb(self) -> 'AABB': ...
    def get_use_local_coordinates(self) -> bool: ...
    def get_fixed_fps(self) -> int: ...
    def get_fractional_delta(self) -> bool: ...
    def get_interpolate(self) -> bool: ...
    def get_process_material(self) -> 'Material': ...
    def get_speed_scale(self) -> float: ...
    def get_collision_base_size(self) -> float: ...
    def get_interp_to_end(self) -> float: ...
    def set_use_fixed_seed(self, use_fixed_seed: bool) -> None: ...
    def get_use_fixed_seed(self) -> bool: ...
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def set_draw_order(self, order: 'GPUParticles3D_DrawOrder') -> None: ...
    def get_draw_order(self) -> 'GPUParticles3D_DrawOrder': ...
    def set_draw_passes(self, passes: int) -> None: ...
    def set_draw_pass_mesh(self, pass_: int, mesh: 'Mesh') -> None: ...
    def get_draw_passes(self) -> int: ...
    def get_draw_pass_mesh(self, pass_: int) -> 'Mesh': ...
    def set_skin(self, skin: 'Skin') -> None: ...
    def get_skin(self) -> 'Skin': ...
    def restart(self, keep_seed: bool = default('''false''')) -> None: ...
    def capture_aabb(self) -> 'AABB': ...
    def set_sub_emitter(self, path: 'NodePath') -> None: ...
    def get_sub_emitter(self) -> 'NodePath': ...
    def emit_particle(self, xform: 'Transform3D', velocity: 'Vector3', color: 'Color', custom: 'Color', flags: int) -> None: ...
    def set_trail_enabled(self, enabled: bool) -> None: ...
    def set_trail_lifetime(self, secs: float) -> None: ...
    def is_trail_enabled(self) -> bool: ...
    def get_trail_lifetime(self) -> float: ...
    def set_transform_align(self, align: 'GPUParticles3D_TransformAlign') -> None: ...
    def get_transform_align(self) -> 'GPUParticles3D_TransformAlign': ...
    def convert_from_particles(self, particles: 'Node') -> None: ...
    def set_amount_ratio(self, ratio: float) -> None: ...
    def get_amount_ratio(self) -> float: ...
    def request_particles_process(self, process_time: float) -> None: ...
    
class GPUParticles3D_DrawOrder(Enum):
    DRAW_ORDER_INDEX = 0
    DRAW_ORDER_LIFETIME = 1
    DRAW_ORDER_REVERSE_LIFETIME = 2
    DRAW_ORDER_VIEW_DEPTH = 3

class GPUParticles3D_EmitFlags(Enum):
    EMIT_FLAG_POSITION = 1
    EMIT_FLAG_ROTATION_SCALE = 2
    EMIT_FLAG_VELOCITY = 4
    EMIT_FLAG_COLOR = 8
    EMIT_FLAG_CUSTOM = 16

class GPUParticles3D_TransformAlign(Enum):
    TRANSFORM_ALIGN_DISABLED = 0
    TRANSFORM_ALIGN_Z_BILLBOARD = 1
    TRANSFORM_ALIGN_Y_TO_VELOCITY = 2
    TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY = 3

class GPUParticlesAttractor3D(VisualInstance3D):
    strength: float
    attenuation: float
    directionality: float
    cull_mask: int
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_strength(self, strength: float) -> None: ...
    def get_strength(self) -> float: ...
    def set_attenuation(self, attenuation: float) -> None: ...
    def get_attenuation(self) -> float: ...
    def set_directionality(self, amount: float) -> None: ...
    def get_directionality(self) -> float: ...
    
class GPUParticlesAttractorBox3D(GPUParticlesAttractor3D):
    size: 'Vector3'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    
class GPUParticlesAttractorSphere3D(GPUParticlesAttractor3D):
    radius: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    
class GPUParticlesAttractorVectorField3D(GPUParticlesAttractor3D):
    size: 'Vector3'
    texture: 'Texture3D'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_texture(self, texture: 'Texture3D') -> None: ...
    def get_texture(self) -> 'Texture3D': ...
    
class GPUParticlesCollision3D(VisualInstance3D):
    cull_mask: int
    def set_cull_mask(self, mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    
class GPUParticlesCollisionBox3D(GPUParticlesCollision3D):
    size: 'Vector3'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    
class GPUParticlesCollisionHeightField3D(GPUParticlesCollision3D):
    size: 'Vector3'
    resolution: int
    update_mode: int
    follow_camera_enabled: bool
    heightfield_mask: int
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_resolution(self, resolution: 'GPUParticlesCollisionHeightField3D_Resolution') -> None: ...
    def get_resolution(self) -> 'GPUParticlesCollisionHeightField3D_Resolution': ...
    def set_update_mode(self, update_mode: 'GPUParticlesCollisionHeightField3D_UpdateMode') -> None: ...
    def get_update_mode(self) -> 'GPUParticlesCollisionHeightField3D_UpdateMode': ...
    def set_heightfield_mask(self, heightfield_mask: int) -> None: ...
    def get_heightfield_mask(self) -> int: ...
    def set_heightfield_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_heightfield_mask_value(self, layer_number: int) -> bool: ...
    def set_follow_camera_enabled(self, enabled: bool) -> None: ...
    def is_follow_camera_enabled(self) -> bool: ...
    
class GPUParticlesCollisionHeightField3D_Resolution(Enum):
    RESOLUTION_256 = 0
    RESOLUTION_512 = 1
    RESOLUTION_1024 = 2
    RESOLUTION_2048 = 3
    RESOLUTION_4096 = 4
    RESOLUTION_8192 = 5
    RESOLUTION_MAX = 6

class GPUParticlesCollisionHeightField3D_UpdateMode(Enum):
    UPDATE_MODE_WHEN_MOVED = 0
    UPDATE_MODE_ALWAYS = 1

class GPUParticlesCollisionSDF3D(GPUParticlesCollision3D):
    size: 'Vector3'
    resolution: int
    thickness: float
    bake_mask: int
    texture: 'Texture3D'
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_resolution(self, resolution: 'GPUParticlesCollisionSDF3D_Resolution') -> None: ...
    def get_resolution(self) -> 'GPUParticlesCollisionSDF3D_Resolution': ...
    def set_texture(self, texture: 'Texture3D') -> None: ...
    def get_texture(self) -> 'Texture3D': ...
    def set_thickness(self, thickness: float) -> None: ...
    def get_thickness(self) -> float: ...
    def set_bake_mask(self, mask: int) -> None: ...
    def get_bake_mask(self) -> int: ...
    def set_bake_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_bake_mask_value(self, layer_number: int) -> bool: ...
    
class GPUParticlesCollisionSDF3D_Resolution(Enum):
    RESOLUTION_16 = 0
    RESOLUTION_32 = 1
    RESOLUTION_64 = 2
    RESOLUTION_128 = 3
    RESOLUTION_256 = 4
    RESOLUTION_512 = 5
    RESOLUTION_MAX = 6

class GPUParticlesCollisionSphere3D(GPUParticlesCollision3D):
    radius: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    
class Generic6DOFJoint3D(Joint3D):
    def set_param_x(self, param: 'Generic6DOFJoint3D_Param', value: float) -> None: ...
    def get_param_x(self, param: 'Generic6DOFJoint3D_Param') -> float: ...
    def set_param_y(self, param: 'Generic6DOFJoint3D_Param', value: float) -> None: ...
    def get_param_y(self, param: 'Generic6DOFJoint3D_Param') -> float: ...
    def set_param_z(self, param: 'Generic6DOFJoint3D_Param', value: float) -> None: ...
    def get_param_z(self, param: 'Generic6DOFJoint3D_Param') -> float: ...
    def set_flag_x(self, flag: 'Generic6DOFJoint3D_Flag', value: bool) -> None: ...
    def get_flag_x(self, flag: 'Generic6DOFJoint3D_Flag') -> bool: ...
    def set_flag_y(self, flag: 'Generic6DOFJoint3D_Flag', value: bool) -> None: ...
    def get_flag_y(self, flag: 'Generic6DOFJoint3D_Flag') -> bool: ...
    def set_flag_z(self, flag: 'Generic6DOFJoint3D_Flag', value: bool) -> None: ...
    def get_flag_z(self, flag: 'Generic6DOFJoint3D_Flag') -> bool: ...
    
class Generic6DOFJoint3D_Param(Enum):
    PARAM_LINEAR_LOWER_LIMIT = 0
    PARAM_LINEAR_UPPER_LIMIT = 1
    PARAM_LINEAR_LIMIT_SOFTNESS = 2
    PARAM_LINEAR_RESTITUTION = 3
    PARAM_LINEAR_DAMPING = 4
    PARAM_LINEAR_MOTOR_TARGET_VELOCITY = 5
    PARAM_LINEAR_MOTOR_FORCE_LIMIT = 6
    PARAM_LINEAR_SPRING_STIFFNESS = 7
    PARAM_LINEAR_SPRING_DAMPING = 8
    PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT = 9
    PARAM_ANGULAR_LOWER_LIMIT = 10
    PARAM_ANGULAR_UPPER_LIMIT = 11
    PARAM_ANGULAR_LIMIT_SOFTNESS = 12
    PARAM_ANGULAR_DAMPING = 13
    PARAM_ANGULAR_RESTITUTION = 14
    PARAM_ANGULAR_FORCE_LIMIT = 15
    PARAM_ANGULAR_ERP = 16
    PARAM_ANGULAR_MOTOR_TARGET_VELOCITY = 17
    PARAM_ANGULAR_MOTOR_FORCE_LIMIT = 18
    PARAM_ANGULAR_SPRING_STIFFNESS = 19
    PARAM_ANGULAR_SPRING_DAMPING = 20
    PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT = 21
    PARAM_MAX = 22

class Generic6DOFJoint3D_Flag(Enum):
    FLAG_ENABLE_LINEAR_LIMIT = 0
    FLAG_ENABLE_ANGULAR_LIMIT = 1
    FLAG_ENABLE_LINEAR_SPRING = 3
    FLAG_ENABLE_ANGULAR_SPRING = 2
    FLAG_ENABLE_MOTOR = 4
    FLAG_ENABLE_LINEAR_MOTOR = 5
    FLAG_MAX = 6

class Geometry2D(Object):
    def is_point_in_circle(self, point: 'Vector2', circle_position: 'Vector2', circle_radius: float) -> bool: ...
    def segment_intersects_circle(self, segment_from: 'Vector2', segment_to: 'Vector2', circle_position: 'Vector2', circle_radius: float) -> float: ...
    def segment_intersects_segment(self, from_a: 'Vector2', to_a: 'Vector2', from_b: 'Vector2', to_b: 'Vector2') -> 'Variant': ...
    def line_intersects_line(self, from_a: 'Vector2', dir_a: 'Vector2', from_b: 'Vector2', dir_b: 'Vector2') -> 'Variant': ...
    def get_closest_points_between_segments(self, p1: 'Vector2', q1: 'Vector2', p2: 'Vector2', q2: 'Vector2') -> 'PackedVector2Array': ...
    def get_closest_point_to_segment(self, point: 'Vector2', s1: 'Vector2', s2: 'Vector2') -> 'Vector2': ...
    def get_closest_point_to_segment_uncapped(self, point: 'Vector2', s1: 'Vector2', s2: 'Vector2') -> 'Vector2': ...
    def point_is_inside_triangle(self, point: 'Vector2', a: 'Vector2', b: 'Vector2', c: 'Vector2') -> bool: ...
    def is_polygon_clockwise(self, polygon: 'PackedVector2Array') -> bool: ...
    def is_point_in_polygon(self, point: 'Vector2', polygon: 'PackedVector2Array') -> bool: ...
    def triangulate_polygon(self, polygon: 'PackedVector2Array') -> 'PackedInt32Array': ...
    def triangulate_delaunay(self, points: 'PackedVector2Array') -> 'PackedInt32Array': ...
    def convex_hull(self, points: 'PackedVector2Array') -> 'PackedVector2Array': ...
    def decompose_polygon_in_convex(self, polygon: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def merge_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def clip_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def intersect_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def exclude_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def clip_polyline_with_polygon(self, polyline: 'PackedVector2Array', polygon: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def intersect_polyline_with_polygon(self, polyline: 'PackedVector2Array', polygon: 'PackedVector2Array') -> 'list[PackedVector2Array]': ...
    def offset_polygon(self, polygon: 'PackedVector2Array', delta: float, join_type: 'Geometry2D_PolyJoinType' = default('''0''')) -> 'list[PackedVector2Array]': ...
    def offset_polyline(self, polyline: 'PackedVector2Array', delta: float, join_type: 'Geometry2D_PolyJoinType' = default('''0'''), end_type: 'Geometry2D_PolyEndType' = default('''3''')) -> 'list[PackedVector2Array]': ...
    def make_atlas(self, sizes: 'PackedVector2Array') -> 'Dictionary': ...
    def bresenham_line(self, from_: 'Vector2i', to: 'Vector2i') -> 'list[Vector2i]': ...
    
class Geometry2D_PolyBooleanOperation(Enum):
    OPERATION_UNION = 0
    OPERATION_DIFFERENCE = 1
    OPERATION_INTERSECTION = 2
    OPERATION_XOR = 3

class Geometry2D_PolyJoinType(Enum):
    JOIN_SQUARE = 0
    JOIN_ROUND = 1
    JOIN_MITER = 2

class Geometry2D_PolyEndType(Enum):
    END_POLYGON = 0
    END_JOINED = 1
    END_BUTT = 2
    END_SQUARE = 3
    END_ROUND = 4

class Geometry3D(Object):
    def compute_convex_mesh_points(self, planes: 'list[Plane]') -> 'PackedVector3Array': ...
    def build_box_planes(self, extents: 'Vector3') -> 'list[Plane]': ...
    def build_cylinder_planes(self, radius: float, height: float, sides: int, axis: 'Vector3_Axis' = default('''2''')) -> 'list[Plane]': ...
    def build_capsule_planes(self, radius: float, height: float, sides: int, lats: int, axis: 'Vector3_Axis' = default('''2''')) -> 'list[Plane]': ...
    def get_closest_points_between_segments(self, p1: 'Vector3', p2: 'Vector3', q1: 'Vector3', q2: 'Vector3') -> 'PackedVector3Array': ...
    def get_closest_point_to_segment(self, point: 'Vector3', s1: 'Vector3', s2: 'Vector3') -> 'Vector3': ...
    def get_closest_point_to_segment_uncapped(self, point: 'Vector3', s1: 'Vector3', s2: 'Vector3') -> 'Vector3': ...
    def get_triangle_barycentric_coords(self, point: 'Vector3', a: 'Vector3', b: 'Vector3', c: 'Vector3') -> 'Vector3': ...
    def ray_intersects_triangle(self, from_: 'Vector3', dir: 'Vector3', a: 'Vector3', b: 'Vector3', c: 'Vector3') -> 'Variant': ...
    def segment_intersects_triangle(self, from_: 'Vector3', to: 'Vector3', a: 'Vector3', b: 'Vector3', c: 'Vector3') -> 'Variant': ...
    def segment_intersects_sphere(self, from_: 'Vector3', to: 'Vector3', sphere_position: 'Vector3', sphere_radius: float) -> 'PackedVector3Array': ...
    def segment_intersects_cylinder(self, from_: 'Vector3', to: 'Vector3', height: float, radius: float) -> 'PackedVector3Array': ...
    def segment_intersects_convex(self, from_: 'Vector3', to: 'Vector3', planes: 'list[Plane]') -> 'PackedVector3Array': ...
    def clip_polygon(self, points: 'PackedVector3Array', plane: 'Plane') -> 'PackedVector3Array': ...
    def tetrahedralize_delaunay(self, points: 'PackedVector3Array') -> 'PackedInt32Array': ...
    
class GeometryInstance3D(VisualInstance3D):
    material_override: 'BaseMaterial3D'
    material_overlay: 'BaseMaterial3D'
    transparency: float
    cast_shadow: int
    extra_cull_margin: float
    custom_aabb: 'AABB'
    lod_bias: float
    ignore_occlusion_culling: bool
    gi_mode: int
    gi_lightmap_texel_scale: float
    gi_lightmap_scale: int
    visibility_range_begin: float
    visibility_range_begin_margin: float
    visibility_range_end: float
    visibility_range_end_margin: float
    visibility_range_fade_mode: int
    def set_material_override(self, material: 'Material') -> None: ...
    def get_material_override(self) -> 'Material': ...
    def set_material_overlay(self, material: 'Material') -> None: ...
    def get_material_overlay(self) -> 'Material': ...
    def set_cast_shadows_setting(self, shadow_casting_setting: 'GeometryInstance3D_ShadowCastingSetting') -> None: ...
    def get_cast_shadows_setting(self) -> 'GeometryInstance3D_ShadowCastingSetting': ...
    def set_lod_bias(self, bias: float) -> None: ...
    def get_lod_bias(self) -> float: ...
    def set_transparency(self, transparency: float) -> None: ...
    def get_transparency(self) -> float: ...
    def set_visibility_range_end_margin(self, distance: float) -> None: ...
    def get_visibility_range_end_margin(self) -> float: ...
    def set_visibility_range_end(self, distance: float) -> None: ...
    def get_visibility_range_end(self) -> float: ...
    def set_visibility_range_begin_margin(self, distance: float) -> None: ...
    def get_visibility_range_begin_margin(self) -> float: ...
    def set_visibility_range_begin(self, distance: float) -> None: ...
    def get_visibility_range_begin(self) -> float: ...
    def set_visibility_range_fade_mode(self, mode: 'GeometryInstance3D_VisibilityRangeFadeMode') -> None: ...
    def get_visibility_range_fade_mode(self) -> 'GeometryInstance3D_VisibilityRangeFadeMode': ...
    def set_instance_shader_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def get_instance_shader_parameter(self, name: 'StringName') -> 'Variant': ...
    def set_extra_cull_margin(self, margin: float) -> None: ...
    def get_extra_cull_margin(self) -> float: ...
    def set_lightmap_texel_scale(self, scale: float) -> None: ...
    def get_lightmap_texel_scale(self) -> float: ...
    def set_lightmap_scale(self, scale: 'GeometryInstance3D_LightmapScale') -> None: ...
    def get_lightmap_scale(self) -> 'GeometryInstance3D_LightmapScale': ...
    def set_gi_mode(self, mode: 'GeometryInstance3D_GIMode') -> None: ...
    def get_gi_mode(self) -> 'GeometryInstance3D_GIMode': ...
    def set_ignore_occlusion_culling(self, ignore_culling: bool) -> None: ...
    def is_ignoring_occlusion_culling(self) -> bool: ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    
class GeometryInstance3D_ShadowCastingSetting(Enum):
    SHADOW_CASTING_SETTING_OFF = 0
    SHADOW_CASTING_SETTING_ON = 1
    SHADOW_CASTING_SETTING_DOUBLE_SIDED = 2
    SHADOW_CASTING_SETTING_SHADOWS_ONLY = 3

class GeometryInstance3D_GIMode(Enum):
    GI_MODE_DISABLED = 0
    GI_MODE_STATIC = 1
    GI_MODE_DYNAMIC = 2

class GeometryInstance3D_LightmapScale(Enum):
    LIGHTMAP_SCALE_1X = 0
    LIGHTMAP_SCALE_2X = 1
    LIGHTMAP_SCALE_4X = 2
    LIGHTMAP_SCALE_8X = 3
    LIGHTMAP_SCALE_MAX = 4

class GeometryInstance3D_VisibilityRangeFadeMode(Enum):
    VISIBILITY_RANGE_FADE_DISABLED = 0
    VISIBILITY_RANGE_FADE_SELF = 1
    VISIBILITY_RANGE_FADE_DEPENDENCIES = 2

class Gradient(Resource):
    interpolation_mode: int
    interpolation_color_space: int
    offsets: 'PackedFloat32Array'
    colors: 'PackedColorArray'
    def add_point(self, offset: float, color: 'Color') -> None: ...
    def remove_point(self, point: int) -> None: ...
    def set_offset(self, point: int, offset: float) -> None: ...
    def get_offset(self, point: int) -> float: ...
    def reverse(self) -> None: ...
    def set_color(self, point: int, color: 'Color') -> None: ...
    def get_color(self, point: int) -> 'Color': ...
    def sample(self, offset: float) -> 'Color': ...
    def get_point_count(self) -> int: ...
    def set_offsets(self, offsets: 'PackedFloat32Array') -> None: ...
    def get_offsets(self) -> 'PackedFloat32Array': ...
    def set_colors(self, colors: 'PackedColorArray') -> None: ...
    def get_colors(self) -> 'PackedColorArray': ...
    def set_interpolation_mode(self, interpolation_mode: 'Gradient_InterpolationMode') -> None: ...
    def get_interpolation_mode(self) -> 'Gradient_InterpolationMode': ...
    def set_interpolation_color_space(self, interpolation_color_space: 'Gradient_ColorSpace') -> None: ...
    def get_interpolation_color_space(self) -> 'Gradient_ColorSpace': ...
    
class Gradient_InterpolationMode(Enum):
    GRADIENT_INTERPOLATE_LINEAR = 0
    GRADIENT_INTERPOLATE_CONSTANT = 1
    GRADIENT_INTERPOLATE_CUBIC = 2

class Gradient_ColorSpace(Enum):
    GRADIENT_COLOR_SPACE_SRGB = 0
    GRADIENT_COLOR_SPACE_LINEAR_SRGB = 1
    GRADIENT_COLOR_SPACE_OKLAB = 2

class GradientTexture1D(Texture2D):
    gradient: 'Gradient'
    width: int
    use_hdr: bool
    def set_gradient(self, gradient: 'Gradient') -> None: ...
    def get_gradient(self) -> 'Gradient': ...
    def set_width(self, width: int) -> None: ...
    def set_use_hdr(self, enabled: bool) -> None: ...
    def is_using_hdr(self) -> bool: ...
    
class GradientTexture2D(Texture2D):
    gradient: 'Gradient'
    width: int
    height: int
    use_hdr: bool
    fill: int
    fill_from: 'Vector2'
    fill_to: 'Vector2'
    repeat: int
    def set_gradient(self, gradient: 'Gradient') -> None: ...
    def get_gradient(self) -> 'Gradient': ...
    def set_width(self, width: int) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_use_hdr(self, enabled: bool) -> None: ...
    def is_using_hdr(self) -> bool: ...
    def set_fill(self, fill: 'GradientTexture2D_Fill') -> None: ...
    def get_fill(self) -> 'GradientTexture2D_Fill': ...
    def set_fill_from(self, fill_from: 'Vector2') -> None: ...
    def get_fill_from(self) -> 'Vector2': ...
    def set_fill_to(self, fill_to: 'Vector2') -> None: ...
    def get_fill_to(self) -> 'Vector2': ...
    def set_repeat(self, repeat: 'GradientTexture2D_Repeat') -> None: ...
    def get_repeat(self) -> 'GradientTexture2D_Repeat': ...
    
class GradientTexture2D_Fill(Enum):
    FILL_LINEAR = 0
    FILL_RADIAL = 1
    FILL_SQUARE = 2

class GradientTexture2D_Repeat(Enum):
    REPEAT_NONE = 0
    REPEAT = 1
    REPEAT_MIRROR = 2

class GraphEdit(Control):
    scroll_offset: 'Vector2'
    show_grid: bool
    grid_pattern: int
    snapping_enabled: bool
    snapping_distance: int
    panning_scheme: int
    right_disconnects: bool
    connection_lines_curvature: float
    connection_lines_thickness: float
    connection_lines_antialiased: bool
    connections: 'list[27/0:]'
    zoom: float
    zoom_min: float
    zoom_max: float
    zoom_step: float
    minimap_enabled: bool
    minimap_size: 'Vector2'
    minimap_opacity: float
    show_menu: bool
    show_zoom_label: bool
    show_zoom_buttons: bool
    show_grid_buttons: bool
    show_minimap_button: bool
    show_arrange_button: bool
    connection_request: Signal[Callable[['StringName', 'int', 'StringName', 'int'], None]]  # connection_request(from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int)
    disconnection_request: Signal[Callable[['StringName', 'int', 'StringName', 'int'], None]]  # disconnection_request(from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int)
    connection_to_empty: Signal[Callable[['StringName', 'int', 'Vector2'], None]]  # connection_to_empty(from_node: 'StringName', from_port: int, release_position: 'Vector2')
    connection_from_empty: Signal[Callable[['StringName', 'int', 'Vector2'], None]]  # connection_from_empty(to_node: 'StringName', to_port: int, release_position: 'Vector2')
    connection_drag_started: Signal[Callable[['StringName', 'int', 'bool'], None]]  # connection_drag_started(from_node: 'StringName', from_port: int, is_output: bool)
    connection_drag_ended: Signal[Callable[[], None]]  # connection_drag_ended()
    copy_nodes_request: Signal[Callable[[], None]]  # copy_nodes_request()
    cut_nodes_request: Signal[Callable[[], None]]  # cut_nodes_request()
    paste_nodes_request: Signal[Callable[[], None]]  # paste_nodes_request()
    duplicate_nodes_request: Signal[Callable[[], None]]  # duplicate_nodes_request()
    delete_nodes_request: Signal[Callable[['typedarray::StringName'], None]]  # delete_nodes_request(nodes: 'list[StringName]')
    node_selected: Signal[Callable[['Node'], None]]  # node_selected(node: 'Node')
    node_deselected: Signal[Callable[['Node'], None]]  # node_deselected(node: 'Node')
    frame_rect_changed: Signal[Callable[['GraphFrame', 'Rect2'], None]]  # frame_rect_changed(frame: 'GraphFrame', new_rect: 'Rect2')
    popup_request: Signal[Callable[['Vector2'], None]]  # popup_request(at_position: 'Vector2')
    begin_node_move: Signal[Callable[[], None]]  # begin_node_move()
    end_node_move: Signal[Callable[[], None]]  # end_node_move()
    graph_elements_linked_to_frame_request: Signal[Callable[['Array', 'StringName'], None]]  # graph_elements_linked_to_frame_request(elements: 'Array', frame: 'StringName')
    scroll_offset_changed: Signal[Callable[['Vector2'], None]]  # scroll_offset_changed(offset: 'Vector2')
    def _is_in_input_hotzone(self, in_node: 'Object', in_port: int, mouse_position: 'Vector2') -> bool: ...
    def _is_in_output_hotzone(self, in_node: 'Object', in_port: int, mouse_position: 'Vector2') -> bool: ...
    def _get_connection_line(self, from_position: 'Vector2', to_position: 'Vector2') -> 'PackedVector2Array': ...
    def _is_node_hover_valid(self, from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int) -> bool: ...
    def connect_node(self, from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int, keep_alive: bool = default('''false''')) -> 'Error': ...
    def is_node_connected(self, from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int) -> bool: ...
    def disconnect_node(self, from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int) -> None: ...
    def set_connection_activity(self, from_node: 'StringName', from_port: int, to_node: 'StringName', to_port: int, amount: float) -> None: ...
    def set_connections(self, connections: 'list[Dictionary]') -> None: ...
    def get_connection_list(self) -> 'list[Dictionary]': ...
    def get_connection_count(self, from_node: 'StringName', from_port: int) -> int: ...
    def get_closest_connection_at_point(self, point: 'Vector2', max_distance: float = default('''4.0''')) -> 'Dictionary': ...
    def get_connections_intersecting_with_rect(self, rect: 'Rect2') -> 'list[Dictionary]': ...
    def clear_connections(self) -> None: ...
    def force_connection_drag_end(self) -> None: ...
    def get_scroll_offset(self) -> 'Vector2': ...
    def set_scroll_offset(self, offset: 'Vector2') -> None: ...
    def add_valid_right_disconnect_type(self, type: int) -> None: ...
    def remove_valid_right_disconnect_type(self, type: int) -> None: ...
    def add_valid_left_disconnect_type(self, type: int) -> None: ...
    def remove_valid_left_disconnect_type(self, type: int) -> None: ...
    def add_valid_connection_type(self, from_type: int, to_type: int) -> None: ...
    def remove_valid_connection_type(self, from_type: int, to_type: int) -> None: ...
    def is_valid_connection_type(self, from_type: int, to_type: int) -> bool: ...
    def get_connection_line(self, from_node: 'Vector2', to_node: 'Vector2') -> 'PackedVector2Array': ...
    def attach_graph_element_to_frame(self, element: 'StringName', frame: 'StringName') -> None: ...
    def detach_graph_element_from_frame(self, element: 'StringName') -> None: ...
    def get_element_frame(self, element: 'StringName') -> 'GraphFrame': ...
    def get_attached_nodes_of_frame(self, frame: 'StringName') -> 'list[StringName]': ...
    def set_panning_scheme(self, scheme: 'GraphEdit_PanningScheme') -> None: ...
    def get_panning_scheme(self) -> 'GraphEdit_PanningScheme': ...
    def set_zoom(self, zoom: float) -> None: ...
    def get_zoom(self) -> float: ...
    def set_zoom_min(self, zoom_min: float) -> None: ...
    def get_zoom_min(self) -> float: ...
    def set_zoom_max(self, zoom_max: float) -> None: ...
    def get_zoom_max(self) -> float: ...
    def set_zoom_step(self, zoom_step: float) -> None: ...
    def get_zoom_step(self) -> float: ...
    def set_show_grid(self, enable: bool) -> None: ...
    def is_showing_grid(self) -> bool: ...
    def set_grid_pattern(self, pattern: 'GraphEdit_GridPattern') -> None: ...
    def get_grid_pattern(self) -> 'GraphEdit_GridPattern': ...
    def set_snapping_enabled(self, enable: bool) -> None: ...
    def is_snapping_enabled(self) -> bool: ...
    def set_snapping_distance(self, pixels: int) -> None: ...
    def get_snapping_distance(self) -> int: ...
    def set_connection_lines_curvature(self, curvature: float) -> None: ...
    def get_connection_lines_curvature(self) -> float: ...
    def set_connection_lines_thickness(self, pixels: float) -> None: ...
    def get_connection_lines_thickness(self) -> float: ...
    def set_connection_lines_antialiased(self, pixels: bool) -> None: ...
    def is_connection_lines_antialiased(self) -> bool: ...
    def set_minimap_size(self, size: 'Vector2') -> None: ...
    def get_minimap_size(self) -> 'Vector2': ...
    def set_minimap_opacity(self, opacity: float) -> None: ...
    def get_minimap_opacity(self) -> float: ...
    def set_minimap_enabled(self, enable: bool) -> None: ...
    def is_minimap_enabled(self) -> bool: ...
    def set_show_menu(self, hidden: bool) -> None: ...
    def is_showing_menu(self) -> bool: ...
    def set_show_zoom_label(self, enable: bool) -> None: ...
    def is_showing_zoom_label(self) -> bool: ...
    def set_show_grid_buttons(self, hidden: bool) -> None: ...
    def is_showing_grid_buttons(self) -> bool: ...
    def set_show_zoom_buttons(self, hidden: bool) -> None: ...
    def is_showing_zoom_buttons(self) -> bool: ...
    def set_show_minimap_button(self, hidden: bool) -> None: ...
    def is_showing_minimap_button(self) -> bool: ...
    def set_show_arrange_button(self, hidden: bool) -> None: ...
    def is_showing_arrange_button(self) -> bool: ...
    def set_right_disconnects(self, enable: bool) -> None: ...
    def is_right_disconnects_enabled(self) -> bool: ...
    def get_menu_hbox(self) -> 'HBoxContainer': ...
    def arrange_nodes(self) -> None: ...
    def set_selected(self, node: 'Node') -> None: ...
    
class GraphEdit_PanningScheme(Enum):
    SCROLL_ZOOMS = 0
    SCROLL_PANS = 1

class GraphEdit_GridPattern(Enum):
    GRID_PATTERN_LINES = 0
    GRID_PATTERN_DOTS = 1

class GraphElement(Container):
    position_offset: 'Vector2'
    resizable: bool
    draggable: bool
    selectable: bool
    selected: bool
    node_selected: Signal[Callable[[], None]]  # node_selected()
    node_deselected: Signal[Callable[[], None]]  # node_deselected()
    raise_request: Signal[Callable[[], None]]  # raise_request()
    delete_request: Signal[Callable[[], None]]  # delete_request()
    resize_request: Signal[Callable[['Vector2'], None]]  # resize_request(new_size: 'Vector2')
    resize_end: Signal[Callable[['Vector2'], None]]  # resize_end(new_size: 'Vector2')
    dragged: Signal[Callable[['Vector2', 'Vector2'], None]]  # dragged(from: 'Vector2', to: 'Vector2')
    position_offset_changed: Signal[Callable[[], None]]  # position_offset_changed()
    def set_resizable(self, resizable: bool) -> None: ...
    def is_resizable(self) -> bool: ...
    def set_draggable(self, draggable: bool) -> None: ...
    def is_draggable(self) -> bool: ...
    def set_selectable(self, selectable: bool) -> None: ...
    def is_selectable(self) -> bool: ...
    def set_selected(self, selected: bool) -> None: ...
    def is_selected(self) -> bool: ...
    def set_position_offset(self, offset: 'Vector2') -> None: ...
    def get_position_offset(self) -> 'Vector2': ...
    
class GraphFrame(GraphElement):
    title: 'String'
    autoshrink_enabled: bool
    autoshrink_margin: int
    drag_margin: int
    tint_color_enabled: bool
    tint_color: 'Color'
    autoshrink_changed: Signal[Callable[[], None]]  # autoshrink_changed()
    def set_title(self, title: 'String') -> None: ...
    def get_title(self) -> 'String': ...
    def get_titlebar_hbox(self) -> 'HBoxContainer': ...
    def set_autoshrink_enabled(self, shrink: bool) -> None: ...
    def is_autoshrink_enabled(self) -> bool: ...
    def set_autoshrink_margin(self, autoshrink_margin: int) -> None: ...
    def get_autoshrink_margin(self) -> int: ...
    def set_drag_margin(self, drag_margin: int) -> None: ...
    def get_drag_margin(self) -> int: ...
    def set_tint_color_enabled(self, enable: bool) -> None: ...
    def is_tint_color_enabled(self) -> bool: ...
    def set_tint_color(self, color: 'Color') -> None: ...
    def get_tint_color(self) -> 'Color': ...
    
class GraphNode(GraphElement):
    title: 'String'
    ignore_invalid_connection_type: bool
    slot_updated: Signal[Callable[['int'], None]]  # slot_updated(slot_index: int)
    def _draw_port(self, slot_index: int, position: 'Vector2i', left: bool, color: 'Color') -> None: ...
    def set_title(self, title: 'String') -> None: ...
    def get_title(self) -> 'String': ...
    def get_titlebar_hbox(self) -> 'HBoxContainer': ...
    def set_slot(self, slot_index: int, enable_left_port: bool, type_left: int, color_left: 'Color', enable_right_port: bool, type_right: int, color_right: 'Color', custom_icon_left: 'Texture2D' = default('''null'''), custom_icon_right: 'Texture2D' = default('''null'''), draw_stylebox: bool = default('''true''')) -> None: ...
    def clear_slot(self, slot_index: int) -> None: ...
    def clear_all_slots(self) -> None: ...
    def is_slot_enabled_left(self, slot_index: int) -> bool: ...
    def set_slot_enabled_left(self, slot_index: int, enable: bool) -> None: ...
    def set_slot_type_left(self, slot_index: int, type: int) -> None: ...
    def get_slot_type_left(self, slot_index: int) -> int: ...
    def set_slot_color_left(self, slot_index: int, color: 'Color') -> None: ...
    def get_slot_color_left(self, slot_index: int) -> 'Color': ...
    def set_slot_custom_icon_left(self, slot_index: int, custom_icon: 'Texture2D') -> None: ...
    def get_slot_custom_icon_left(self, slot_index: int) -> 'Texture2D': ...
    def is_slot_enabled_right(self, slot_index: int) -> bool: ...
    def set_slot_enabled_right(self, slot_index: int, enable: bool) -> None: ...
    def set_slot_type_right(self, slot_index: int, type: int) -> None: ...
    def get_slot_type_right(self, slot_index: int) -> int: ...
    def set_slot_color_right(self, slot_index: int, color: 'Color') -> None: ...
    def get_slot_color_right(self, slot_index: int) -> 'Color': ...
    def set_slot_custom_icon_right(self, slot_index: int, custom_icon: 'Texture2D') -> None: ...
    def get_slot_custom_icon_right(self, slot_index: int) -> 'Texture2D': ...
    def is_slot_draw_stylebox(self, slot_index: int) -> bool: ...
    def set_slot_draw_stylebox(self, slot_index: int, enable: bool) -> None: ...
    def set_ignore_invalid_connection_type(self, ignore: bool) -> None: ...
    def is_ignoring_valid_connection_type(self) -> bool: ...
    def get_input_port_count(self) -> int: ...
    def get_input_port_position(self, port_idx: int) -> 'Vector2': ...
    def get_input_port_type(self, port_idx: int) -> int: ...
    def get_input_port_color(self, port_idx: int) -> 'Color': ...
    def get_input_port_slot(self, port_idx: int) -> int: ...
    def get_output_port_count(self) -> int: ...
    def get_output_port_position(self, port_idx: int) -> 'Vector2': ...
    def get_output_port_type(self, port_idx: int) -> int: ...
    def get_output_port_color(self, port_idx: int) -> 'Color': ...
    def get_output_port_slot(self, port_idx: int) -> int: ...
    
class GridContainer(Container):
    columns: int
    def set_columns(self, columns: int) -> None: ...
    def get_columns(self) -> int: ...
    
class GridMap(Node3D):
    mesh_library: 'MeshLibrary'
    physics_material: 'PhysicsMaterial'
    cell_size: 'Vector3'
    cell_octant_size: int
    cell_center_x: bool
    cell_center_y: bool
    cell_center_z: bool
    cell_scale: float
    collision_layer: int
    collision_mask: int
    collision_priority: float
    bake_navigation: bool
    INVALID_CELL_ITEM = -1
    
    cell_size_changed: Signal[Callable[['Vector3'], None]]  # cell_size_changed(cell_size: 'Vector3')
    changed: Signal[Callable[[], None]]  # changed()
    def set_collision_layer(self, layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_collision_priority(self, priority: float) -> None: ...
    def get_collision_priority(self) -> float: ...
    def set_physics_material(self, material: 'PhysicsMaterial') -> None: ...
    def get_physics_material(self) -> 'PhysicsMaterial': ...
    def set_bake_navigation(self, bake_navigation: bool) -> None: ...
    def is_baking_navigation(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_mesh_library(self, mesh_library: 'MeshLibrary') -> None: ...
    def get_mesh_library(self) -> 'MeshLibrary': ...
    def set_cell_size(self, size: 'Vector3') -> None: ...
    def get_cell_size(self) -> 'Vector3': ...
    def set_cell_scale(self, scale: float) -> None: ...
    def get_cell_scale(self) -> float: ...
    def set_octant_size(self, size: int) -> None: ...
    def get_octant_size(self) -> int: ...
    def set_cell_item(self, position: 'Vector3i', item: int, orientation: int = default('''0''')) -> None: ...
    def get_cell_item(self, position: 'Vector3i') -> int: ...
    def get_cell_item_orientation(self, position: 'Vector3i') -> int: ...
    def get_cell_item_basis(self, position: 'Vector3i') -> 'Basis': ...
    def get_basis_with_orthogonal_index(self, index: int) -> 'Basis': ...
    def get_orthogonal_index_from_basis(self, basis: 'Basis') -> int: ...
    def local_to_map(self, local_position: 'Vector3') -> 'Vector3i': ...
    def map_to_local(self, map_position: 'Vector3i') -> 'Vector3': ...
    def resource_changed(self, resource: 'Resource') -> None: ...
    def set_center_x(self, enable: bool) -> None: ...
    def get_center_x(self) -> bool: ...
    def set_center_y(self, enable: bool) -> None: ...
    def get_center_y(self) -> bool: ...
    def set_center_z(self, enable: bool) -> None: ...
    def get_center_z(self) -> bool: ...
    def clear(self) -> None: ...
    def get_used_cells(self) -> 'list[Vector3i]': ...
    def get_used_cells_by_item(self, item: int) -> 'list[Vector3i]': ...
    def get_meshes(self) -> 'Array': ...
    def get_bake_meshes(self) -> 'Array': ...
    def get_bake_mesh_instance(self, idx: int) -> 'RID': ...
    def clear_baked_meshes(self) -> None: ...
    def make_baked_meshes(self, gen_lightmap_uv: bool = default('''false'''), lightmap_uv_texel_size: float = default('''0.1''')) -> None: ...
    
class GridMapEditorPlugin(EditorPlugin):
    def get_current_grid_map(self) -> 'GridMap': ...
    def set_selection(self, begin: 'Vector3i', end: 'Vector3i') -> None: ...
    def clear_selection(self) -> None: ...
    def get_selection(self) -> 'AABB': ...
    def has_selection(self) -> bool: ...
    def get_selected_cells(self) -> 'Array': ...
    def set_selected_palette_item(self, item: int) -> None: ...
    def get_selected_palette_item(self) -> int: ...
    
class GrooveJoint2D(Joint2D):
    length: float
    initial_offset: float
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_initial_offset(self, offset: float) -> None: ...
    def get_initial_offset(self) -> float: ...
    
class HBoxContainer(BoxContainer):
    pass
    
class HFlowContainer(FlowContainer):
    pass
    
class HMACContext(RefCounted):
    def start(self, hash_type: 'HashingContext_HashType', key: 'PackedByteArray') -> 'Error': ...
    def update(self, data: 'PackedByteArray') -> 'Error': ...
    def finish(self) -> 'PackedByteArray': ...
    
class HScrollBar(ScrollBar):
    pass
    
class HSeparator(Separator):
    pass
    
class HSlider(Slider):
    pass
    
class HSplitContainer(SplitContainer):
    pass
    
class HTTPClient(RefCounted):
    blocking_mode_enabled: bool
    connection: 'StreamPeer'
    read_chunk_size: int
    def connect_to_host(self, host: 'String', port: int = default('''-1'''), tls_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def set_connection(self, connection: 'StreamPeer') -> None: ...
    def get_connection(self) -> 'StreamPeer': ...
    def request_raw(self, method: 'HTTPClient_Method', url: 'String', headers: 'PackedStringArray', body: 'PackedByteArray') -> 'Error': ...
    def request(self, method: 'HTTPClient_Method', url: 'String', headers: 'PackedStringArray', body: 'String' = default('''""''')) -> 'Error': ...
    def close(self) -> None: ...
    def has_response(self) -> bool: ...
    def is_response_chunked(self) -> bool: ...
    def get_response_code(self) -> int: ...
    def get_response_headers(self) -> 'PackedStringArray': ...
    def get_response_headers_as_dictionary(self) -> 'Dictionary': ...
    def get_response_body_length(self) -> int: ...
    def read_response_body_chunk(self) -> 'PackedByteArray': ...
    def set_read_chunk_size(self, bytes: int) -> None: ...
    def get_read_chunk_size(self) -> int: ...
    def set_blocking_mode(self, enabled: bool) -> None: ...
    def is_blocking_mode_enabled(self) -> bool: ...
    def get_status(self) -> 'HTTPClient_Status': ...
    def poll(self) -> 'Error': ...
    def set_http_proxy(self, host: 'String', port: int) -> None: ...
    def set_https_proxy(self, host: 'String', port: int) -> None: ...
    def query_string_from_dict(self, fields: 'Dictionary') -> 'String': ...
    
class HTTPClient_Method(Enum):
    METHOD_GET = 0
    METHOD_HEAD = 1
    METHOD_POST = 2
    METHOD_PUT = 3
    METHOD_DELETE = 4
    METHOD_OPTIONS = 5
    METHOD_TRACE = 6
    METHOD_CONNECT = 7
    METHOD_PATCH = 8
    METHOD_MAX = 9

class HTTPClient_Status(Enum):
    STATUS_DISCONNECTED = 0
    STATUS_RESOLVING = 1
    STATUS_CANT_RESOLVE = 2
    STATUS_CONNECTING = 3
    STATUS_CANT_CONNECT = 4
    STATUS_CONNECTED = 5
    STATUS_REQUESTING = 6
    STATUS_BODY = 7
    STATUS_CONNECTION_ERROR = 8
    STATUS_TLS_HANDSHAKE_ERROR = 9

class HTTPClient_ResponseCode(Enum):
    RESPONSE_CONTINUE = 100
    RESPONSE_SWITCHING_PROTOCOLS = 101
    RESPONSE_PROCESSING = 102
    RESPONSE_OK = 200
    RESPONSE_CREATED = 201
    RESPONSE_ACCEPTED = 202
    RESPONSE_NON_AUTHORITATIVE_INFORMATION = 203
    RESPONSE_NO_CONTENT = 204
    RESPONSE_RESET_CONTENT = 205
    RESPONSE_PARTIAL_CONTENT = 206
    RESPONSE_MULTI_STATUS = 207
    RESPONSE_ALREADY_REPORTED = 208
    RESPONSE_IM_USED = 226
    RESPONSE_MULTIPLE_CHOICES = 300
    RESPONSE_MOVED_PERMANENTLY = 301
    RESPONSE_FOUND = 302
    RESPONSE_SEE_OTHER = 303
    RESPONSE_NOT_MODIFIED = 304
    RESPONSE_USE_PROXY = 305
    RESPONSE_SWITCH_PROXY = 306
    RESPONSE_TEMPORARY_REDIRECT = 307
    RESPONSE_PERMANENT_REDIRECT = 308
    RESPONSE_BAD_REQUEST = 400
    RESPONSE_UNAUTHORIZED = 401
    RESPONSE_PAYMENT_REQUIRED = 402
    RESPONSE_FORBIDDEN = 403
    RESPONSE_NOT_FOUND = 404
    RESPONSE_METHOD_NOT_ALLOWED = 405
    RESPONSE_NOT_ACCEPTABLE = 406
    RESPONSE_PROXY_AUTHENTICATION_REQUIRED = 407
    RESPONSE_REQUEST_TIMEOUT = 408
    RESPONSE_CONFLICT = 409
    RESPONSE_GONE = 410
    RESPONSE_LENGTH_REQUIRED = 411
    RESPONSE_PRECONDITION_FAILED = 412
    RESPONSE_REQUEST_ENTITY_TOO_LARGE = 413
    RESPONSE_REQUEST_URI_TOO_LONG = 414
    RESPONSE_UNSUPPORTED_MEDIA_TYPE = 415
    RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE = 416
    RESPONSE_EXPECTATION_FAILED = 417
    RESPONSE_IM_A_TEAPOT = 418
    RESPONSE_MISDIRECTED_REQUEST = 421
    RESPONSE_UNPROCESSABLE_ENTITY = 422
    RESPONSE_LOCKED = 423
    RESPONSE_FAILED_DEPENDENCY = 424
    RESPONSE_UPGRADE_REQUIRED = 426
    RESPONSE_PRECONDITION_REQUIRED = 428
    RESPONSE_TOO_MANY_REQUESTS = 429
    RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE = 431
    RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS = 451
    RESPONSE_INTERNAL_SERVER_ERROR = 500
    RESPONSE_NOT_IMPLEMENTED = 501
    RESPONSE_BAD_GATEWAY = 502
    RESPONSE_SERVICE_UNAVAILABLE = 503
    RESPONSE_GATEWAY_TIMEOUT = 504
    RESPONSE_HTTP_VERSION_NOT_SUPPORTED = 505
    RESPONSE_VARIANT_ALSO_NEGOTIATES = 506
    RESPONSE_INSUFFICIENT_STORAGE = 507
    RESPONSE_LOOP_DETECTED = 508
    RESPONSE_NOT_EXTENDED = 510
    RESPONSE_NETWORK_AUTH_REQUIRED = 511

class HTTPRequest(Node):
    download_file: 'String'
    download_chunk_size: int
    use_threads: bool
    accept_gzip: bool
    body_size_limit: int
    max_redirects: int
    timeout: float
    request_completed: Signal[Callable[['int', 'int', 'PackedStringArray', 'PackedByteArray'], None]]  # request_completed(result: int, response_code: int, headers: 'PackedStringArray', body: 'PackedByteArray')
    def request(self, url: 'String', custom_headers: 'PackedStringArray' = default('''PackedStringArray()'''), method: 'HTTPClient_Method' = default('''0'''), request_data: 'String' = default('''""''')) -> 'Error': ...
    def request_raw(self, url: 'String', custom_headers: 'PackedStringArray' = default('''PackedStringArray()'''), method: 'HTTPClient_Method' = default('''0'''), request_data_raw: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'Error': ...
    def cancel_request(self) -> None: ...
    def set_tls_options(self, client_options: 'TLSOptions') -> None: ...
    def get_http_client_status(self) -> 'HTTPClient_Status': ...
    def set_use_threads(self, enable: bool) -> None: ...
    def is_using_threads(self) -> bool: ...
    def set_accept_gzip(self, enable: bool) -> None: ...
    def is_accepting_gzip(self) -> bool: ...
    def set_body_size_limit(self, bytes: int) -> None: ...
    def get_body_size_limit(self) -> int: ...
    def set_max_redirects(self, amount: int) -> None: ...
    def get_max_redirects(self) -> int: ...
    def set_download_file(self, path: 'String') -> None: ...
    def get_download_file(self) -> 'String': ...
    def get_downloaded_bytes(self) -> int: ...
    def get_body_size(self) -> int: ...
    def set_timeout(self, timeout: float) -> None: ...
    def get_timeout(self) -> float: ...
    def set_download_chunk_size(self, chunk_size: int) -> None: ...
    def get_download_chunk_size(self) -> int: ...
    def set_http_proxy(self, host: 'String', port: int) -> None: ...
    def set_https_proxy(self, host: 'String', port: int) -> None: ...
    
class HTTPRequest_Result(Enum):
    RESULT_SUCCESS = 0
    RESULT_CHUNKED_BODY_SIZE_MISMATCH = 1
    RESULT_CANT_CONNECT = 2
    RESULT_CANT_RESOLVE = 3
    RESULT_CONNECTION_ERROR = 4
    RESULT_TLS_HANDSHAKE_ERROR = 5
    RESULT_NO_RESPONSE = 6
    RESULT_BODY_SIZE_LIMIT_EXCEEDED = 7
    RESULT_BODY_DECOMPRESS_FAILED = 8
    RESULT_REQUEST_FAILED = 9
    RESULT_DOWNLOAD_FILE_CANT_OPEN = 10
    RESULT_DOWNLOAD_FILE_WRITE_ERROR = 11
    RESULT_REDIRECT_LIMIT_REACHED = 12
    RESULT_TIMEOUT = 13

class HashingContext(RefCounted):
    def start(self, type: 'HashingContext_HashType') -> 'Error': ...
    def update(self, chunk: 'PackedByteArray') -> 'Error': ...
    def finish(self) -> 'PackedByteArray': ...
    
class HashingContext_HashType(Enum):
    HASH_MD5 = 0
    HASH_SHA1 = 1
    HASH_SHA256 = 2

class HeightMapShape3D(Shape3D):
    map_width: int
    map_depth: int
    map_data: 'PackedFloat32Array'
    def set_map_width(self, width: int) -> None: ...
    def get_map_width(self) -> int: ...
    def set_map_depth(self, height: int) -> None: ...
    def get_map_depth(self) -> int: ...
    def set_map_data(self, data: 'PackedFloat32Array') -> None: ...
    def get_map_data(self) -> 'PackedFloat32Array': ...
    def get_min_height(self) -> float: ...
    def get_max_height(self) -> float: ...
    def update_map_data_from_image(self, image: 'Image', height_min: float, height_max: float) -> None: ...
    
class HingeJoint3D(Joint3D):
    def set_param(self, param: 'HingeJoint3D_Param', value: float) -> None: ...
    def get_param(self, param: 'HingeJoint3D_Param') -> float: ...
    def set_flag(self, flag: 'HingeJoint3D_Flag', enabled: bool) -> None: ...
    def get_flag(self, flag: 'HingeJoint3D_Flag') -> bool: ...
    
class HingeJoint3D_Param(Enum):
    PARAM_BIAS = 0
    PARAM_LIMIT_UPPER = 1
    PARAM_LIMIT_LOWER = 2
    PARAM_LIMIT_BIAS = 3
    PARAM_LIMIT_SOFTNESS = 4
    PARAM_LIMIT_RELAXATION = 5
    PARAM_MOTOR_TARGET_VELOCITY = 6
    PARAM_MOTOR_MAX_IMPULSE = 7
    PARAM_MAX = 8

class HingeJoint3D_Flag(Enum):
    FLAG_USE_LIMIT = 0
    FLAG_ENABLE_MOTOR = 1
    FLAG_MAX = 2

class IP(Object):
    RESOLVER_MAX_QUERIES = 256
    RESOLVER_INVALID_ID = -1
    
    def resolve_hostname(self, host: 'String', ip_type: 'IP_Type' = default('''3''')) -> 'String': ...
    def resolve_hostname_addresses(self, host: 'String', ip_type: 'IP_Type' = default('''3''')) -> 'PackedStringArray': ...
    def resolve_hostname_queue_item(self, host: 'String', ip_type: 'IP_Type' = default('''3''')) -> int: ...
    def get_resolve_item_status(self, id: int) -> 'IP_ResolverStatus': ...
    def get_resolve_item_address(self, id: int) -> 'String': ...
    def get_resolve_item_addresses(self, id: int) -> 'Array': ...
    def erase_resolve_item(self, id: int) -> None: ...
    def get_local_addresses(self) -> 'PackedStringArray': ...
    def get_local_interfaces(self) -> 'list[Dictionary]': ...
    def clear_cache(self, hostname: 'String' = default('''""''')) -> None: ...
    
class IP_ResolverStatus(Enum):
    RESOLVER_STATUS_NONE = 0
    RESOLVER_STATUS_WAITING = 1
    RESOLVER_STATUS_DONE = 2
    RESOLVER_STATUS_ERROR = 3

class IP_Type(Enum):
    TYPE_NONE = 0
    TYPE_IPV4 = 1
    TYPE_IPV6 = 2
    TYPE_ANY = 3

class Image(Resource):
    data: 'Dictionary'
    MAX_WIDTH = 16777216
    MAX_HEIGHT = 16777216
    
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_size(self) -> 'Vector2i': ...
    def has_mipmaps(self) -> bool: ...
    def get_format(self) -> 'Image_Format': ...
    def get_data(self) -> 'PackedByteArray': ...
    def get_data_size(self) -> int: ...
    def convert(self, format: 'Image_Format') -> None: ...
    def get_mipmap_count(self) -> int: ...
    def get_mipmap_offset(self, mipmap: int) -> int: ...
    def resize_to_po2(self, square: bool = default('''false'''), interpolation: 'Image_Interpolation' = default('''1''')) -> None: ...
    def resize(self, width: int, height: int, interpolation: 'Image_Interpolation' = default('''1''')) -> None: ...
    def shrink_x2(self) -> None: ...
    def crop(self, width: int, height: int) -> None: ...
    def flip_x(self) -> None: ...
    def flip_y(self) -> None: ...
    def generate_mipmaps(self, renormalize: bool = default('''false''')) -> 'Error': ...
    def clear_mipmaps(self) -> None: ...
    @staticmethod
    def create(width: int, height: int, use_mipmaps: bool, format: 'Image_Format') -> 'Image': ...
    @staticmethod
    def create_empty(width: int, height: int, use_mipmaps: bool, format: 'Image_Format') -> 'Image': ...
    @staticmethod
    def create_from_data(width: int, height: int, use_mipmaps: bool, format: 'Image_Format', data: 'PackedByteArray') -> 'Image': ...
    def set_data(self, width: int, height: int, use_mipmaps: bool, format: 'Image_Format', data: 'PackedByteArray') -> None: ...
    def is_empty(self) -> bool: ...
    def load(self, path: 'String') -> 'Error': ...
    @staticmethod
    def load_from_file(path: 'String') -> 'Image': ...
    def save_png(self, path: 'String') -> 'Error': ...
    def save_png_to_buffer(self) -> 'PackedByteArray': ...
    def save_jpg(self, path: 'String', quality: float = default('''0.75''')) -> 'Error': ...
    def save_jpg_to_buffer(self, quality: float = default('''0.75''')) -> 'PackedByteArray': ...
    def save_exr(self, path: 'String', grayscale: bool = default('''false''')) -> 'Error': ...
    def save_exr_to_buffer(self, grayscale: bool = default('''false''')) -> 'PackedByteArray': ...
    def save_webp(self, path: 'String', lossy: bool = default('''false'''), quality: float = default('''0.75''')) -> 'Error': ...
    def save_webp_to_buffer(self, lossy: bool = default('''false'''), quality: float = default('''0.75''')) -> 'PackedByteArray': ...
    def detect_alpha(self) -> 'Image_AlphaMode': ...
    def is_invisible(self) -> bool: ...
    def detect_used_channels(self, source: 'Image_CompressSource' = default('''0''')) -> 'Image_UsedChannels': ...
    def compress(self, mode: 'Image_CompressMode', source: 'Image_CompressSource' = default('''0'''), astc_format: 'Image_ASTCFormat' = default('''0''')) -> 'Error': ...
    def compress_from_channels(self, mode: 'Image_CompressMode', channels: 'Image_UsedChannels', astc_format: 'Image_ASTCFormat' = default('''0''')) -> 'Error': ...
    def decompress(self) -> 'Error': ...
    def is_compressed(self) -> bool: ...
    def rotate_90(self, direction: 'ClockDirection') -> None: ...
    def rotate_180(self) -> None: ...
    def fix_alpha_edges(self) -> None: ...
    def premultiply_alpha(self) -> None: ...
    def srgb_to_linear(self) -> None: ...
    def linear_to_srgb(self) -> None: ...
    def normal_map_to_xy(self) -> None: ...
    def rgbe_to_srgb(self) -> 'Image': ...
    def bump_map_to_normal_map(self, bump_scale: float = default('''1.0''')) -> None: ...
    def compute_image_metrics(self, compared_image: 'Image', use_luma: bool) -> 'Dictionary': ...
    def blit_rect(self, src: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def blit_rect_mask(self, src: 'Image', mask: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def blend_rect(self, src: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def blend_rect_mask(self, src: 'Image', mask: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def fill(self, color: 'Color') -> None: ...
    def fill_rect(self, rect: 'Rect2i', color: 'Color') -> None: ...
    def get_used_rect(self) -> 'Rect2i': ...
    def get_region(self, region: 'Rect2i') -> 'Image': ...
    def copy_from(self, src: 'Image') -> None: ...
    def get_pixelv(self, point: 'Vector2i') -> 'Color': ...
    def get_pixel(self, x: int, y: int) -> 'Color': ...
    def set_pixelv(self, point: 'Vector2i', color: 'Color') -> None: ...
    def set_pixel(self, x: int, y: int, color: 'Color') -> None: ...
    def adjust_bcs(self, brightness: float, contrast: float, saturation: float) -> None: ...
    def load_png_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_jpg_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_webp_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_tga_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_bmp_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_ktx_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_svg_from_buffer(self, buffer: 'PackedByteArray', scale: float = default('''1.0''')) -> 'Error': ...
    def load_svg_from_string(self, svg_str: 'String', scale: float = default('''1.0''')) -> 'Error': ...
    
class Image_Format(Enum):
    FORMAT_L8 = 0
    FORMAT_LA8 = 1
    FORMAT_R8 = 2
    FORMAT_RG8 = 3
    FORMAT_RGB8 = 4
    FORMAT_RGBA8 = 5
    FORMAT_RGBA4444 = 6
    FORMAT_RGB565 = 7
    FORMAT_RF = 8
    FORMAT_RGF = 9
    FORMAT_RGBF = 10
    FORMAT_RGBAF = 11
    FORMAT_RH = 12
    FORMAT_RGH = 13
    FORMAT_RGBH = 14
    FORMAT_RGBAH = 15
    FORMAT_RGBE9995 = 16
    FORMAT_DXT1 = 17
    FORMAT_DXT3 = 18
    FORMAT_DXT5 = 19
    FORMAT_RGTC_R = 20
    FORMAT_RGTC_RG = 21
    FORMAT_BPTC_RGBA = 22
    FORMAT_BPTC_RGBF = 23
    FORMAT_BPTC_RGBFU = 24
    FORMAT_ETC = 25
    FORMAT_ETC2_R11 = 26
    FORMAT_ETC2_R11S = 27
    FORMAT_ETC2_RG11 = 28
    FORMAT_ETC2_RG11S = 29
    FORMAT_ETC2_RGB8 = 30
    FORMAT_ETC2_RGBA8 = 31
    FORMAT_ETC2_RGB8A1 = 32
    FORMAT_ETC2_RA_AS_RG = 33
    FORMAT_DXT5_RA_AS_RG = 34
    FORMAT_ASTC_4x4 = 35
    FORMAT_ASTC_4x4_HDR = 36
    FORMAT_ASTC_8x8 = 37
    FORMAT_ASTC_8x8_HDR = 38
    FORMAT_MAX = 39

class Image_Interpolation(Enum):
    INTERPOLATE_NEAREST = 0
    INTERPOLATE_BILINEAR = 1
    INTERPOLATE_CUBIC = 2
    INTERPOLATE_TRILINEAR = 3
    INTERPOLATE_LANCZOS = 4

class Image_AlphaMode(Enum):
    ALPHA_NONE = 0
    ALPHA_BIT = 1
    ALPHA_BLEND = 2

class Image_CompressMode(Enum):
    COMPRESS_S3TC = 0
    COMPRESS_ETC = 1
    COMPRESS_ETC2 = 2
    COMPRESS_BPTC = 3
    COMPRESS_ASTC = 4
    COMPRESS_MAX = 5

class Image_UsedChannels(Enum):
    USED_CHANNELS_L = 0
    USED_CHANNELS_LA = 1
    USED_CHANNELS_R = 2
    USED_CHANNELS_RG = 3
    USED_CHANNELS_RGB = 4
    USED_CHANNELS_RGBA = 5

class Image_CompressSource(Enum):
    COMPRESS_SOURCE_GENERIC = 0
    COMPRESS_SOURCE_SRGB = 1
    COMPRESS_SOURCE_NORMAL = 2

class Image_ASTCFormat(Enum):
    ASTC_FORMAT_4x4 = 0
    ASTC_FORMAT_8x8 = 1

class ImageFormatLoader(RefCounted):
    pass
    
class ImageFormatLoader_LoaderFlags(Enum):
    FLAG_NONE = 0
    FLAG_FORCE_LINEAR = 1
    FLAG_CONVERT_COLORS = 2

class ImageFormatLoaderExtension(ImageFormatLoader):
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _load_image(self, image: 'Image', fileaccess: 'FileAccess', flags: 'ImageFormatLoader_LoaderFlags', scale: float) -> 'Error': ...
    def add_format_loader(self) -> None: ...
    def remove_format_loader(self) -> None: ...
    
class ImageTexture(Texture2D):
    @staticmethod
    def create_from_image(image: 'Image') -> 'ImageTexture': ...
    def get_format(self) -> 'Image_Format': ...
    def set_image(self, image: 'Image') -> None: ...
    def update(self, image: 'Image') -> None: ...
    def set_size_override(self, size: 'Vector2i') -> None: ...
    
class ImageTexture3D(Texture3D):
    def create(self, format: 'Image_Format', width: int, height: int, depth: int, use_mipmaps: bool, data: 'list[Image]') -> 'Error': ...
    def update(self, data: 'list[Image]') -> None: ...
    
class ImageTextureLayered(TextureLayered):
    def create_from_images(self, images: 'list[Image]') -> 'Error': ...
    def update_layer(self, image: 'Image', layer: int) -> None: ...
    
class ImmediateMesh(Mesh):
    def surface_begin(self, primitive: 'Mesh_PrimitiveType', material: 'Material' = default('''null''')) -> None: ...
    def surface_set_color(self, color: 'Color') -> None: ...
    def surface_set_normal(self, normal: 'Vector3') -> None: ...
    def surface_set_tangent(self, tangent: 'Plane') -> None: ...
    def surface_set_uv(self, uv: 'Vector2') -> None: ...
    def surface_set_uv2(self, uv2: 'Vector2') -> None: ...
    def surface_add_vertex(self, vertex: 'Vector3') -> None: ...
    def surface_add_vertex_2d(self, vertex: 'Vector2') -> None: ...
    def surface_end(self) -> None: ...
    def clear_surfaces(self) -> None: ...
    
class ImporterMesh(Resource):
    def add_blend_shape(self, name: 'String') -> None: ...
    def get_blend_shape_count(self) -> int: ...
    def get_blend_shape_name(self, blend_shape_idx: int) -> 'String': ...
    def set_blend_shape_mode(self, mode: 'Mesh_BlendShapeMode') -> None: ...
    def get_blend_shape_mode(self) -> 'Mesh_BlendShapeMode': ...
    def add_surface(self, primitive: 'Mesh_PrimitiveType', arrays: 'Array', blend_shapes: 'list[Array]' = default('''Array[Array]([])'''), lods: 'Dictionary' = default('''{}'''), material: 'Material' = default('''null'''), name: 'String' = default('''""'''), flags: int = default('''0''')) -> None: ...
    def get_surface_count(self) -> int: ...
    def get_surface_primitive_type(self, surface_idx: int) -> 'Mesh_PrimitiveType': ...
    def get_surface_name(self, surface_idx: int) -> 'String': ...
    def get_surface_arrays(self, surface_idx: int) -> 'Array': ...
    def get_surface_blend_shape_arrays(self, surface_idx: int, blend_shape_idx: int) -> 'Array': ...
    def get_surface_lod_count(self, surface_idx: int) -> int: ...
    def get_surface_lod_size(self, surface_idx: int, lod_idx: int) -> float: ...
    def get_surface_lod_indices(self, surface_idx: int, lod_idx: int) -> 'PackedInt32Array': ...
    def get_surface_material(self, surface_idx: int) -> 'Material': ...
    def get_surface_format(self, surface_idx: int) -> int: ...
    def set_surface_name(self, surface_idx: int, name: 'String') -> None: ...
    def set_surface_material(self, surface_idx: int, material: 'Material') -> None: ...
    def generate_lods(self, normal_merge_angle: float, normal_split_angle: float, bone_transform_array: 'Array') -> None: ...
    def get_mesh(self, base_mesh: 'ArrayMesh' = default('''null''')) -> 'ArrayMesh': ...
    def clear(self) -> None: ...
    def set_lightmap_size_hint(self, size: 'Vector2i') -> None: ...
    def get_lightmap_size_hint(self) -> 'Vector2i': ...
    
class ImporterMeshInstance3D(Node3D):
    mesh: 'ImporterMesh'
    skin: 'Skin'
    skeleton_path: 'NodePath'
    layer_mask: int
    cast_shadow: int
    visibility_range_begin: float
    visibility_range_begin_margin: float
    visibility_range_end: float
    visibility_range_end_margin: float
    visibility_range_fade_mode: int
    def set_mesh(self, mesh: 'ImporterMesh') -> None: ...
    def get_mesh(self) -> 'ImporterMesh': ...
    def set_skin(self, skin: 'Skin') -> None: ...
    def get_skin(self) -> 'Skin': ...
    def set_skeleton_path(self, skeleton_path: 'NodePath') -> None: ...
    def get_skeleton_path(self) -> 'NodePath': ...
    def set_layer_mask(self, layer_mask: int) -> None: ...
    def get_layer_mask(self) -> int: ...
    def set_cast_shadows_setting(self, shadow_casting_setting: 'GeometryInstance3D_ShadowCastingSetting') -> None: ...
    def get_cast_shadows_setting(self) -> 'GeometryInstance3D_ShadowCastingSetting': ...
    def set_visibility_range_end_margin(self, distance: float) -> None: ...
    def get_visibility_range_end_margin(self) -> float: ...
    def set_visibility_range_end(self, distance: float) -> None: ...
    def get_visibility_range_end(self) -> float: ...
    def set_visibility_range_begin_margin(self, distance: float) -> None: ...
    def get_visibility_range_begin_margin(self) -> float: ...
    def set_visibility_range_begin(self, distance: float) -> None: ...
    def get_visibility_range_begin(self) -> float: ...
    def set_visibility_range_fade_mode(self, mode: 'GeometryInstance3D_VisibilityRangeFadeMode') -> None: ...
    def get_visibility_range_fade_mode(self) -> 'GeometryInstance3D_VisibilityRangeFadeMode': ...
    
class Input(Object):
    mouse_mode: int
    use_accumulated_input: bool
    emulate_mouse_from_touch: bool
    emulate_touch_from_mouse: bool
    joy_connection_changed: Signal[Callable[['int', 'bool'], None]]  # joy_connection_changed(device: int, connected: bool)
    def is_anything_pressed(self) -> bool: ...
    def is_key_pressed(self, keycode: 'Key') -> bool: ...
    def is_physical_key_pressed(self, keycode: 'Key') -> bool: ...
    def is_key_label_pressed(self, keycode: 'Key') -> bool: ...
    def is_mouse_button_pressed(self, button: 'MouseButton') -> bool: ...
    def is_joy_button_pressed(self, device: int, button: 'JoyButton') -> bool: ...
    def is_action_pressed(self, action: 'StringName', exact_match: bool = default('''false''')) -> bool: ...
    def is_action_just_pressed(self, action: 'StringName', exact_match: bool = default('''false''')) -> bool: ...
    def is_action_just_released(self, action: 'StringName', exact_match: bool = default('''false''')) -> bool: ...
    def get_action_strength(self, action: 'StringName', exact_match: bool = default('''false''')) -> float: ...
    def get_action_raw_strength(self, action: 'StringName', exact_match: bool = default('''false''')) -> float: ...
    def get_axis(self, negative_action: 'StringName', positive_action: 'StringName') -> float: ...
    def get_vector(self, negative_x: 'StringName', positive_x: 'StringName', negative_y: 'StringName', positive_y: 'StringName', deadzone: float = default('''-1.0''')) -> 'Vector2': ...
    def add_joy_mapping(self, mapping: 'String', update_existing: bool = default('''false''')) -> None: ...
    def remove_joy_mapping(self, guid: 'String') -> None: ...
    def is_joy_known(self, device: int) -> bool: ...
    def get_joy_axis(self, device: int, axis: 'JoyAxis') -> float: ...
    def get_joy_name(self, device: int) -> 'String': ...
    def get_joy_guid(self, device: int) -> 'String': ...
    def get_joy_info(self, device: int) -> 'Dictionary': ...
    def should_ignore_device(self, vendor_id: int, product_id: int) -> bool: ...
    def get_connected_joypads(self) -> 'list[int]': ...
    def get_joy_vibration_strength(self, device: int) -> 'Vector2': ...
    def get_joy_vibration_duration(self, device: int) -> float: ...
    def start_joy_vibration(self, device: int, weak_magnitude: float, strong_magnitude: float, duration: float = default('''0''')) -> None: ...
    def stop_joy_vibration(self, device: int) -> None: ...
    def vibrate_handheld(self, duration_ms: int = default('''500'''), amplitude: float = default('''-1.0''')) -> None: ...
    def get_gravity(self) -> 'Vector3': ...
    def get_accelerometer(self) -> 'Vector3': ...
    def get_magnetometer(self) -> 'Vector3': ...
    def get_gyroscope(self) -> 'Vector3': ...
    def set_gravity(self, value: 'Vector3') -> None: ...
    def set_accelerometer(self, value: 'Vector3') -> None: ...
    def set_magnetometer(self, value: 'Vector3') -> None: ...
    def set_gyroscope(self, value: 'Vector3') -> None: ...
    def get_last_mouse_velocity(self) -> 'Vector2': ...
    def get_last_mouse_screen_velocity(self) -> 'Vector2': ...
    def get_mouse_button_mask(self) -> 'MouseButtonMask': ...
    def set_mouse_mode(self, mode: 'Input_MouseMode') -> None: ...
    def get_mouse_mode(self) -> 'Input_MouseMode': ...
    def warp_mouse(self, position: 'Vector2') -> None: ...
    def action_press(self, action: 'StringName', strength: float = default('''1.0''')) -> None: ...
    def action_release(self, action: 'StringName') -> None: ...
    def set_default_cursor_shape(self, shape: 'Input_CursorShape' = default('''0''')) -> None: ...
    def get_current_cursor_shape(self) -> 'Input_CursorShape': ...
    def set_custom_mouse_cursor(self, image: 'Resource', shape: 'Input_CursorShape' = default('''0'''), hotspot: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def parse_input_event(self, event: 'InputEvent') -> None: ...
    def set_use_accumulated_input(self, enable: bool) -> None: ...
    def is_using_accumulated_input(self) -> bool: ...
    def flush_buffered_events(self) -> None: ...
    def set_emulate_mouse_from_touch(self, enable: bool) -> None: ...
    def is_emulating_mouse_from_touch(self) -> bool: ...
    def set_emulate_touch_from_mouse(self, enable: bool) -> None: ...
    def is_emulating_touch_from_mouse(self) -> bool: ...
    
class Input_MouseMode(Enum):
    MOUSE_MODE_VISIBLE = 0
    MOUSE_MODE_HIDDEN = 1
    MOUSE_MODE_CAPTURED = 2
    MOUSE_MODE_CONFINED = 3
    MOUSE_MODE_CONFINED_HIDDEN = 4
    MOUSE_MODE_MAX = 5

class Input_CursorShape(Enum):
    CURSOR_ARROW = 0
    CURSOR_IBEAM = 1
    CURSOR_POINTING_HAND = 2
    CURSOR_CROSS = 3
    CURSOR_WAIT = 4
    CURSOR_BUSY = 5
    CURSOR_DRAG = 6
    CURSOR_CAN_DROP = 7
    CURSOR_FORBIDDEN = 8
    CURSOR_VSIZE = 9
    CURSOR_HSIZE = 10
    CURSOR_BDIAGSIZE = 11
    CURSOR_FDIAGSIZE = 12
    CURSOR_MOVE = 13
    CURSOR_VSPLIT = 14
    CURSOR_HSPLIT = 15
    CURSOR_HELP = 16

class InputEvent(Resource):
    device: int
    DEVICE_ID_EMULATION = -1
    
    def set_device(self, device: int) -> None: ...
    def get_device(self) -> int: ...
    def is_action(self, action: 'StringName', exact_match: bool = default('''false''')) -> bool: ...
    def is_action_pressed(self, action: 'StringName', allow_echo: bool = default('''false'''), exact_match: bool = default('''false''')) -> bool: ...
    def is_action_released(self, action: 'StringName', exact_match: bool = default('''false''')) -> bool: ...
    def get_action_strength(self, action: 'StringName', exact_match: bool = default('''false''')) -> float: ...
    def is_canceled(self) -> bool: ...
    def is_pressed(self) -> bool: ...
    def is_released(self) -> bool: ...
    def is_echo(self) -> bool: ...
    def as_text(self) -> 'String': ...
    def is_match(self, event: 'InputEvent', exact_match: bool = default('''true''')) -> bool: ...
    def is_action_type(self) -> bool: ...
    def accumulate(self, with_event: 'InputEvent') -> bool: ...
    def xformed_by(self, xform: 'Transform2D', local_ofs: 'Vector2' = default('''Vector2(0, 0)''')) -> 'InputEvent': ...
    
class InputEventAction(InputEvent):
    action: 'StringName'
    pressed: bool
    strength: float
    event_index: int
    def set_action(self, action: 'StringName') -> None: ...
    def get_action(self) -> 'StringName': ...
    def set_pressed(self, pressed: bool) -> None: ...
    def set_strength(self, strength: float) -> None: ...
    def get_strength(self) -> float: ...
    def set_event_index(self, index: int) -> None: ...
    def get_event_index(self) -> int: ...
    
class InputEventFromWindow(InputEvent):
    window_id: int
    def set_window_id(self, id: int) -> None: ...
    def get_window_id(self) -> int: ...
    
class InputEventGesture(InputEventWithModifiers):
    position: 'Vector2'
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    
class InputEventJoypadButton(InputEvent):
    button_index: int
    pressure: float
    pressed: bool
    def set_button_index(self, button_index: 'JoyButton') -> None: ...
    def get_button_index(self) -> 'JoyButton': ...
    def set_pressure(self, pressure: float) -> None: ...
    def get_pressure(self) -> float: ...
    def set_pressed(self, pressed: bool) -> None: ...
    
class InputEventJoypadMotion(InputEvent):
    axis: int
    axis_value: float
    def set_axis(self, axis: 'JoyAxis') -> None: ...
    def get_axis(self) -> 'JoyAxis': ...
    def set_axis_value(self, axis_value: float) -> None: ...
    def get_axis_value(self) -> float: ...
    
class InputEventKey(InputEventWithModifiers):
    pressed: bool
    keycode: int
    physical_keycode: int
    key_label: int
    unicode: int
    location: int
    echo: bool
    def set_pressed(self, pressed: bool) -> None: ...
    def set_keycode(self, keycode: 'Key') -> None: ...
    def get_keycode(self) -> 'Key': ...
    def set_physical_keycode(self, physical_keycode: 'Key') -> None: ...
    def get_physical_keycode(self) -> 'Key': ...
    def set_key_label(self, key_label: 'Key') -> None: ...
    def get_key_label(self) -> 'Key': ...
    def set_unicode(self, unicode: int) -> None: ...
    def get_unicode(self) -> int: ...
    def set_location(self, location: 'KeyLocation') -> None: ...
    def get_location(self) -> 'KeyLocation': ...
    def set_echo(self, echo: bool) -> None: ...
    def get_keycode_with_modifiers(self) -> 'Key': ...
    def get_physical_keycode_with_modifiers(self) -> 'Key': ...
    def get_key_label_with_modifiers(self) -> 'Key': ...
    def as_text_keycode(self) -> 'String': ...
    def as_text_physical_keycode(self) -> 'String': ...
    def as_text_key_label(self) -> 'String': ...
    def as_text_location(self) -> 'String': ...
    
class InputEventMIDI(InputEvent):
    channel: int
    message: int
    pitch: int
    velocity: int
    instrument: int
    pressure: int
    controller_number: int
    controller_value: int
    def set_channel(self, channel: int) -> None: ...
    def get_channel(self) -> int: ...
    def set_message(self, message: 'MIDIMessage') -> None: ...
    def get_message(self) -> 'MIDIMessage': ...
    def set_pitch(self, pitch: int) -> None: ...
    def get_pitch(self) -> int: ...
    def set_velocity(self, velocity: int) -> None: ...
    def get_velocity(self) -> int: ...
    def set_instrument(self, instrument: int) -> None: ...
    def get_instrument(self) -> int: ...
    def set_pressure(self, pressure: int) -> None: ...
    def get_pressure(self) -> int: ...
    def set_controller_number(self, controller_number: int) -> None: ...
    def get_controller_number(self) -> int: ...
    def set_controller_value(self, controller_value: int) -> None: ...
    def get_controller_value(self) -> int: ...
    
class InputEventMagnifyGesture(InputEventGesture):
    factor: float
    def set_factor(self, factor: float) -> None: ...
    def get_factor(self) -> float: ...
    
class InputEventMouse(InputEventWithModifiers):
    button_mask: int
    position: 'Vector2'
    global_position: 'Vector2'
    def set_button_mask(self, button_mask: 'MouseButtonMask') -> None: ...
    def get_button_mask(self) -> 'MouseButtonMask': ...
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_global_position(self, global_position: 'Vector2') -> None: ...
    def get_global_position(self) -> 'Vector2': ...
    
class InputEventMouseButton(InputEventMouse):
    factor: float
    button_index: int
    canceled: bool
    pressed: bool
    double_click: bool
    def set_factor(self, factor: float) -> None: ...
    def get_factor(self) -> float: ...
    def set_button_index(self, button_index: 'MouseButton') -> None: ...
    def get_button_index(self) -> 'MouseButton': ...
    def set_pressed(self, pressed: bool) -> None: ...
    def set_canceled(self, canceled: bool) -> None: ...
    def set_double_click(self, double_click: bool) -> None: ...
    def is_double_click(self) -> bool: ...
    
class InputEventMouseMotion(InputEventMouse):
    tilt: 'Vector2'
    pressure: float
    pen_inverted: bool
    relative: 'Vector2'
    screen_relative: 'Vector2'
    velocity: 'Vector2'
    screen_velocity: 'Vector2'
    def set_tilt(self, tilt: 'Vector2') -> None: ...
    def get_tilt(self) -> 'Vector2': ...
    def set_pressure(self, pressure: float) -> None: ...
    def get_pressure(self) -> float: ...
    def set_pen_inverted(self, pen_inverted: bool) -> None: ...
    def get_pen_inverted(self) -> bool: ...
    def set_relative(self, relative: 'Vector2') -> None: ...
    def get_relative(self) -> 'Vector2': ...
    def set_screen_relative(self, relative: 'Vector2') -> None: ...
    def get_screen_relative(self) -> 'Vector2': ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_screen_velocity(self, velocity: 'Vector2') -> None: ...
    def get_screen_velocity(self) -> 'Vector2': ...
    
class InputEventPanGesture(InputEventGesture):
    delta: 'Vector2'
    def set_delta(self, delta: 'Vector2') -> None: ...
    def get_delta(self) -> 'Vector2': ...
    
class InputEventScreenDrag(InputEventFromWindow):
    index: int
    tilt: 'Vector2'
    pressure: float
    pen_inverted: bool
    position: 'Vector2'
    relative: 'Vector2'
    screen_relative: 'Vector2'
    velocity: 'Vector2'
    screen_velocity: 'Vector2'
    def set_index(self, index: int) -> None: ...
    def get_index(self) -> int: ...
    def set_tilt(self, tilt: 'Vector2') -> None: ...
    def get_tilt(self) -> 'Vector2': ...
    def set_pressure(self, pressure: float) -> None: ...
    def get_pressure(self) -> float: ...
    def set_pen_inverted(self, pen_inverted: bool) -> None: ...
    def get_pen_inverted(self) -> bool: ...
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_relative(self, relative: 'Vector2') -> None: ...
    def get_relative(self) -> 'Vector2': ...
    def set_screen_relative(self, relative: 'Vector2') -> None: ...
    def get_screen_relative(self) -> 'Vector2': ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_screen_velocity(self, velocity: 'Vector2') -> None: ...
    def get_screen_velocity(self) -> 'Vector2': ...
    
class InputEventScreenTouch(InputEventFromWindow):
    index: int
    position: 'Vector2'
    canceled: bool
    pressed: bool
    double_tap: bool
    def set_index(self, index: int) -> None: ...
    def get_index(self) -> int: ...
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_pressed(self, pressed: bool) -> None: ...
    def set_canceled(self, canceled: bool) -> None: ...
    def set_double_tap(self, double_tap: bool) -> None: ...
    def is_double_tap(self) -> bool: ...
    
class InputEventShortcut(InputEvent):
    shortcut: 'Shortcut'
    def set_shortcut(self, shortcut: 'Shortcut') -> None: ...
    def get_shortcut(self) -> 'Shortcut': ...
    
class InputEventWithModifiers(InputEventFromWindow):
    command_or_control_autoremap: bool
    alt_pressed: bool
    shift_pressed: bool
    ctrl_pressed: bool
    meta_pressed: bool
    def set_command_or_control_autoremap(self, enable: bool) -> None: ...
    def is_command_or_control_autoremap(self) -> bool: ...
    def is_command_or_control_pressed(self) -> bool: ...
    def set_alt_pressed(self, pressed: bool) -> None: ...
    def is_alt_pressed(self) -> bool: ...
    def set_shift_pressed(self, pressed: bool) -> None: ...
    def is_shift_pressed(self) -> bool: ...
    def set_ctrl_pressed(self, pressed: bool) -> None: ...
    def is_ctrl_pressed(self) -> bool: ...
    def set_meta_pressed(self, pressed: bool) -> None: ...
    def is_meta_pressed(self) -> bool: ...
    def get_modifiers_mask(self) -> 'KeyModifierMask': ...
    
class InputMap(Object):
    def has_action(self, action: 'StringName') -> bool: ...
    def get_actions(self) -> 'list[StringName]': ...
    def add_action(self, action: 'StringName', deadzone: float = default('''0.2''')) -> None: ...
    def erase_action(self, action: 'StringName') -> None: ...
    def action_set_deadzone(self, action: 'StringName', deadzone: float) -> None: ...
    def action_get_deadzone(self, action: 'StringName') -> float: ...
    def action_add_event(self, action: 'StringName', event: 'InputEvent') -> None: ...
    def action_has_event(self, action: 'StringName', event: 'InputEvent') -> bool: ...
    def action_erase_event(self, action: 'StringName', event: 'InputEvent') -> None: ...
    def action_erase_events(self, action: 'StringName') -> None: ...
    def action_get_events(self, action: 'StringName') -> 'list[InputEvent]': ...
    def event_is_action(self, event: 'InputEvent', action: 'StringName', exact_match: bool = default('''false''')) -> bool: ...
    def load_from_project_settings(self) -> None: ...
    
class InstancePlaceholder(Node):
    def get_stored_values(self, with_order: bool = default('''false''')) -> 'Dictionary': ...
    def create_instance(self, replace: bool = default('''false'''), custom_scene: 'PackedScene' = default('''null''')) -> 'Node': ...
    def get_instance_path(self) -> 'String': ...
    
class IntervalTweener(Tweener):
    pass
    
class ItemList(Control):
    select_mode: int
    allow_reselect: bool
    allow_rmb_select: bool
    allow_search: bool
    max_text_lines: int
    auto_width: bool
    auto_height: bool
    text_overrun_behavior: int
    wraparound_items: bool
    item_count: int
    max_columns: int
    same_column_width: bool
    fixed_column_width: int
    icon_mode: int
    icon_scale: float
    fixed_icon_size: 'Vector2i'
    item_selected: Signal[Callable[['int'], None]]  # item_selected(index: int)
    empty_clicked: Signal[Callable[['Vector2', 'int'], None]]  # empty_clicked(at_position: 'Vector2', mouse_button_index: int)
    item_clicked: Signal[Callable[['int', 'Vector2', 'int'], None]]  # item_clicked(index: int, at_position: 'Vector2', mouse_button_index: int)
    multi_selected: Signal[Callable[['int', 'bool'], None]]  # multi_selected(index: int, selected: bool)
    item_activated: Signal[Callable[['int'], None]]  # item_activated(index: int)
    def add_item(self, text: 'String', icon: 'Texture2D' = default('''null'''), selectable: bool = default('''true''')) -> int: ...
    def add_icon_item(self, icon: 'Texture2D', selectable: bool = default('''true''')) -> int: ...
    def set_item_text(self, idx: int, text: 'String') -> None: ...
    def get_item_text(self, idx: int) -> 'String': ...
    def set_item_icon(self, idx: int, icon: 'Texture2D') -> None: ...
    def get_item_icon(self, idx: int) -> 'Texture2D': ...
    def set_item_text_direction(self, idx: int, direction: 'Control_TextDirection') -> None: ...
    def get_item_text_direction(self, idx: int) -> 'Control_TextDirection': ...
    def set_item_language(self, idx: int, language: 'String') -> None: ...
    def get_item_language(self, idx: int) -> 'String': ...
    def set_item_auto_translate_mode(self, idx: int, mode: 'Node_AutoTranslateMode') -> None: ...
    def get_item_auto_translate_mode(self, idx: int) -> 'Node_AutoTranslateMode': ...
    def set_item_icon_transposed(self, idx: int, transposed: bool) -> None: ...
    def is_item_icon_transposed(self, idx: int) -> bool: ...
    def set_item_icon_region(self, idx: int, rect: 'Rect2') -> None: ...
    def get_item_icon_region(self, idx: int) -> 'Rect2': ...
    def set_item_icon_modulate(self, idx: int, modulate: 'Color') -> None: ...
    def get_item_icon_modulate(self, idx: int) -> 'Color': ...
    def set_item_selectable(self, idx: int, selectable: bool) -> None: ...
    def is_item_selectable(self, idx: int) -> bool: ...
    def set_item_disabled(self, idx: int, disabled: bool) -> None: ...
    def is_item_disabled(self, idx: int) -> bool: ...
    def set_item_metadata(self, idx: int, metadata: 'Variant') -> None: ...
    def get_item_metadata(self, idx: int) -> 'Variant': ...
    def set_item_custom_bg_color(self, idx: int, custom_bg_color: 'Color') -> None: ...
    def get_item_custom_bg_color(self, idx: int) -> 'Color': ...
    def set_item_custom_fg_color(self, idx: int, custom_fg_color: 'Color') -> None: ...
    def get_item_custom_fg_color(self, idx: int) -> 'Color': ...
    def get_item_rect(self, idx: int, expand: bool = default('''true''')) -> 'Rect2': ...
    def set_item_tooltip_enabled(self, idx: int, enable: bool) -> None: ...
    def is_item_tooltip_enabled(self, idx: int) -> bool: ...
    def set_item_tooltip(self, idx: int, tooltip: 'String') -> None: ...
    def get_item_tooltip(self, idx: int) -> 'String': ...
    def select(self, idx: int, single: bool = default('''true''')) -> None: ...
    def deselect(self, idx: int) -> None: ...
    def deselect_all(self) -> None: ...
    def is_selected(self, idx: int) -> bool: ...
    def get_selected_items(self) -> 'PackedInt32Array': ...
    def move_item(self, from_idx: int, to_idx: int) -> None: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    def remove_item(self, idx: int) -> None: ...
    def clear(self) -> None: ...
    def sort_items_by_text(self) -> None: ...
    def set_fixed_column_width(self, width: int) -> None: ...
    def get_fixed_column_width(self) -> int: ...
    def set_same_column_width(self, enable: bool) -> None: ...
    def is_same_column_width(self) -> bool: ...
    def set_max_text_lines(self, lines: int) -> None: ...
    def get_max_text_lines(self) -> int: ...
    def set_max_columns(self, amount: int) -> None: ...
    def get_max_columns(self) -> int: ...
    def set_select_mode(self, mode: 'ItemList_SelectMode') -> None: ...
    def get_select_mode(self) -> 'ItemList_SelectMode': ...
    def set_icon_mode(self, mode: 'ItemList_IconMode') -> None: ...
    def get_icon_mode(self) -> 'ItemList_IconMode': ...
    def set_fixed_icon_size(self, size: 'Vector2i') -> None: ...
    def get_fixed_icon_size(self) -> 'Vector2i': ...
    def set_icon_scale(self, scale: float) -> None: ...
    def get_icon_scale(self) -> float: ...
    def set_allow_rmb_select(self, allow: bool) -> None: ...
    def get_allow_rmb_select(self) -> bool: ...
    def set_allow_reselect(self, allow: bool) -> None: ...
    def get_allow_reselect(self) -> bool: ...
    def set_allow_search(self, allow: bool) -> None: ...
    def get_allow_search(self) -> bool: ...
    def set_auto_width(self, enable: bool) -> None: ...
    def has_auto_width(self) -> bool: ...
    def set_auto_height(self, enable: bool) -> None: ...
    def has_auto_height(self) -> bool: ...
    def is_anything_selected(self) -> bool: ...
    def get_item_at_position(self, position: 'Vector2', exact: bool = default('''false''')) -> int: ...
    def ensure_current_is_visible(self) -> None: ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def get_h_scroll_bar(self) -> 'HScrollBar': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer_OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer_OverrunBehavior': ...
    def set_wraparound_items(self, enable: bool) -> None: ...
    def has_wraparound_items(self) -> bool: ...
    def force_update_list_size(self) -> None: ...
    
class ItemList_IconMode(Enum):
    ICON_MODE_TOP = 0
    ICON_MODE_LEFT = 1

class ItemList_SelectMode(Enum):
    SELECT_SINGLE = 0
    SELECT_MULTI = 1
    SELECT_TOGGLE = 2

class JNISingleton(Object):
    pass
    
class JSON(Resource):
    data: 'Variant'
    @staticmethod
    def stringify(data: 'Variant', indent: 'String' = default('''""'''), sort_keys: bool = default('''true'''), full_precision: bool = default('''false''')) -> 'String': ...
    @staticmethod
    def parse_string(json_string: 'String') -> 'Variant': ...
    def parse(self, json_text: 'String', keep_text: bool = default('''false''')) -> 'Error': ...
    def get_data(self) -> 'Variant': ...
    def set_data(self, data: 'Variant') -> None: ...
    def get_parsed_text(self) -> 'String': ...
    def get_error_line(self) -> int: ...
    def get_error_message(self) -> 'String': ...
    @staticmethod
    def from_native(variant: 'Variant', full_objects: bool = default('''false''')) -> 'Variant': ...
    @staticmethod
    def to_native(json: 'Variant', allow_objects: bool = default('''false''')) -> 'Variant': ...
    
class JSONRPC(Object):
    def set_scope(self, scope: 'String', target: 'Object') -> None: ...
    def process_action(self, action: 'Variant', recurse: bool = default('''false''')) -> 'Variant': ...
    def process_string(self, action: 'String') -> 'String': ...
    def make_request(self, method: 'String', params: 'Variant', id: 'Variant') -> 'Dictionary': ...
    def make_response(self, result: 'Variant', id: 'Variant') -> 'Dictionary': ...
    def make_notification(self, method: 'String', params: 'Variant') -> 'Dictionary': ...
    def make_response_error(self, code: int, message: 'String', id: 'Variant' = default('''null''')) -> 'Dictionary': ...
    
class JSONRPC_ErrorCode(Enum):
    PARSE_ERROR = -32700
    INVALID_REQUEST = -32600
    METHOD_NOT_FOUND = -32601
    INVALID_PARAMS = -32602
    INTERNAL_ERROR = -32603

class JavaClass(RefCounted):
    def get_java_class_name(self) -> 'String': ...
    def get_java_method_list(self) -> 'list[Dictionary]': ...
    def get_java_parent_class(self) -> 'JavaClass': ...
    
class JavaClassWrapper(Object):
    def wrap(self, name: 'String') -> 'JavaClass': ...
    def get_exception(self) -> 'JavaObject': ...
    
class JavaObject(RefCounted):
    def get_java_class(self) -> 'JavaClass': ...
    
class JavaScriptBridge(Object):
    pwa_update_available: Signal[Callable[[], None]]  # pwa_update_available()
    def eval(self, code: 'String', use_global_execution_context: bool = default('''false''')) -> 'Variant': ...
    def get_interface(self, interface: 'String') -> 'JavaScriptObject': ...
    def create_callback(self, callable: 'Callable') -> 'JavaScriptObject': ...
    def is_js_buffer(self, javascript_object: 'JavaScriptObject') -> bool: ...
    def js_buffer_to_packed_byte_array(self, javascript_buffer: 'JavaScriptObject') -> 'PackedByteArray': ...
    def create_object(self, object: 'String', *arg) -> 'Variant': ...
    def download_buffer(self, buffer: 'PackedByteArray', name: 'String', mime: 'String' = default('''"application/octet-stream"''')) -> None: ...
    def pwa_needs_update(self) -> bool: ...
    def pwa_update(self) -> 'Error': ...
    def force_fs_sync(self) -> None: ...
    
class JavaScriptObject(RefCounted):
    pass
    
class Joint2D(Node2D):
    node_a: 'NodePath'
    node_b: 'NodePath'
    bias: float
    disable_collision: bool
    def set_node_a(self, node: 'NodePath') -> None: ...
    def get_node_a(self) -> 'NodePath': ...
    def set_node_b(self, node: 'NodePath') -> None: ...
    def get_node_b(self) -> 'NodePath': ...
    def set_bias(self, bias: float) -> None: ...
    def get_bias(self) -> float: ...
    def set_exclude_nodes_from_collision(self, enable: bool) -> None: ...
    def get_exclude_nodes_from_collision(self) -> bool: ...
    def get_rid(self) -> 'RID': ...
    
class Joint3D(Node3D):
    node_a: 'NodePath'
    node_b: 'NodePath'
    solver_priority: int
    exclude_nodes_from_collision: bool
    def set_node_a(self, node: 'NodePath') -> None: ...
    def get_node_a(self) -> 'NodePath': ...
    def set_node_b(self, node: 'NodePath') -> None: ...
    def get_node_b(self) -> 'NodePath': ...
    def set_solver_priority(self, priority: int) -> None: ...
    def get_solver_priority(self) -> int: ...
    def set_exclude_nodes_from_collision(self, enable: bool) -> None: ...
    def get_exclude_nodes_from_collision(self) -> bool: ...
    def get_rid(self) -> 'RID': ...
    
class KinematicCollision2D(RefCounted):
    def get_position(self) -> 'Vector2': ...
    def get_normal(self) -> 'Vector2': ...
    def get_travel(self) -> 'Vector2': ...
    def get_remainder(self) -> 'Vector2': ...
    def get_angle(self, up_direction: 'Vector2' = default('''Vector2(0, -1)''')) -> float: ...
    def get_depth(self) -> float: ...
    def get_local_shape(self) -> 'Object': ...
    def get_collider(self) -> 'Object': ...
    def get_collider_id(self) -> int: ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider_shape(self) -> 'Object': ...
    def get_collider_shape_index(self) -> int: ...
    def get_collider_velocity(self) -> 'Vector2': ...
    
class KinematicCollision3D(RefCounted):
    def get_travel(self) -> 'Vector3': ...
    def get_remainder(self) -> 'Vector3': ...
    def get_depth(self) -> float: ...
    def get_collision_count(self) -> int: ...
    def get_position(self, collision_index: int = default('''0''')) -> 'Vector3': ...
    def get_normal(self, collision_index: int = default('''0''')) -> 'Vector3': ...
    def get_angle(self, collision_index: int = default('''0'''), up_direction: 'Vector3' = default('''Vector3(0, 1, 0)''')) -> float: ...
    def get_local_shape(self, collision_index: int = default('''0''')) -> 'Object': ...
    def get_collider(self, collision_index: int = default('''0''')) -> 'Object': ...
    def get_collider_id(self, collision_index: int = default('''0''')) -> int: ...
    def get_collider_rid(self, collision_index: int = default('''0''')) -> 'RID': ...
    def get_collider_shape(self, collision_index: int = default('''0''')) -> 'Object': ...
    def get_collider_shape_index(self, collision_index: int = default('''0''')) -> int: ...
    def get_collider_velocity(self, collision_index: int = default('''0''')) -> 'Vector3': ...
    
class Label(Control):
    text: 'String'
    label_settings: 'LabelSettings'
    horizontal_alignment: int
    vertical_alignment: int
    autowrap_mode: int
    justification_flags: int
    paragraph_separator: 'String'
    clip_text: bool
    text_overrun_behavior: int
    ellipsis_char: 'String'
    uppercase: bool
    tab_stops: 'PackedFloat32Array'
    lines_skipped: int
    max_lines_visible: int
    visible_characters: int
    visible_characters_behavior: int
    visible_ratio: float
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def set_label_settings(self, settings: 'LabelSettings') -> None: ...
    def get_label_settings(self) -> 'LabelSettings': ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_paragraph_separator(self, paragraph_separator: 'String') -> None: ...
    def get_paragraph_separator(self) -> 'String': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer_AutowrapMode': ...
    def set_justification_flags(self, justification_flags: 'TextServer_JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer_JustificationFlag': ...
    def set_clip_text(self, enable: bool) -> None: ...
    def is_clipping_text(self) -> bool: ...
    def set_tab_stops(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def get_tab_stops(self) -> 'PackedFloat32Array': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer_OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer_OverrunBehavior': ...
    def set_ellipsis_char(self, char: 'String') -> None: ...
    def get_ellipsis_char(self) -> 'String': ...
    def set_uppercase(self, enable: bool) -> None: ...
    def is_uppercase(self) -> bool: ...
    def get_line_height(self, line: int = default('''-1''')) -> int: ...
    def get_line_count(self) -> int: ...
    def get_visible_line_count(self) -> int: ...
    def get_total_character_count(self) -> int: ...
    def set_visible_characters(self, amount: int) -> None: ...
    def get_visible_characters(self) -> int: ...
    def get_visible_characters_behavior(self) -> 'TextServer_VisibleCharactersBehavior': ...
    def set_visible_characters_behavior(self, behavior: 'TextServer_VisibleCharactersBehavior') -> None: ...
    def set_visible_ratio(self, ratio: float) -> None: ...
    def get_visible_ratio(self) -> float: ...
    def set_lines_skipped(self, lines_skipped: int) -> None: ...
    def get_lines_skipped(self) -> int: ...
    def set_max_lines_visible(self, lines_visible: int) -> None: ...
    def get_max_lines_visible(self) -> int: ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def get_character_bounds(self, pos: int) -> 'Rect2': ...
    
class Label3D(GeometryInstance3D):
    pixel_size: float
    offset: 'Vector2'
    billboard: int
    shaded: bool
    double_sided: bool
    no_depth_test: bool
    fixed_size: bool
    alpha_cut: int
    alpha_scissor_threshold: float
    alpha_hash_scale: float
    alpha_antialiasing_mode: int
    alpha_antialiasing_edge: float
    texture_filter: int
    render_priority: int
    outline_render_priority: int
    modulate: 'Color'
    outline_modulate: 'Color'
    text: 'String'
    font: 'Font'
    font_size: int
    outline_size: int
    horizontal_alignment: int
    vertical_alignment: int
    uppercase: bool
    line_spacing: float
    autowrap_mode: int
    justification_flags: int
    width: float
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_outline_modulate(self, modulate: 'Color') -> None: ...
    def get_outline_modulate(self) -> 'Color': ...
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def set_text_direction(self, direction: 'TextServer_Direction') -> None: ...
    def get_text_direction(self) -> 'TextServer_Direction': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_uppercase(self, enable: bool) -> None: ...
    def is_uppercase(self) -> bool: ...
    def set_render_priority(self, priority: int) -> None: ...
    def get_render_priority(self) -> int: ...
    def set_outline_render_priority(self, priority: int) -> None: ...
    def get_outline_render_priority(self) -> int: ...
    def set_font(self, font: 'Font') -> None: ...
    def get_font(self) -> 'Font': ...
    def set_font_size(self, size: int) -> None: ...
    def get_font_size(self) -> int: ...
    def set_outline_size(self, outline_size: int) -> None: ...
    def get_outline_size(self) -> int: ...
    def set_line_spacing(self, line_spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer_AutowrapMode': ...
    def set_justification_flags(self, justification_flags: 'TextServer_JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer_JustificationFlag': ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_pixel_size(self, pixel_size: float) -> None: ...
    def get_pixel_size(self) -> float: ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_draw_flag(self, flag: 'Label3D_DrawFlags', enabled: bool) -> None: ...
    def get_draw_flag(self, flag: 'Label3D_DrawFlags') -> bool: ...
    def set_billboard_mode(self, mode: 'BaseMaterial3D_BillboardMode') -> None: ...
    def get_billboard_mode(self) -> 'BaseMaterial3D_BillboardMode': ...
    def set_alpha_cut_mode(self, mode: 'Label3D_AlphaCutMode') -> None: ...
    def get_alpha_cut_mode(self) -> 'Label3D_AlphaCutMode': ...
    def set_alpha_scissor_threshold(self, threshold: float) -> None: ...
    def get_alpha_scissor_threshold(self) -> float: ...
    def set_alpha_hash_scale(self, threshold: float) -> None: ...
    def get_alpha_hash_scale(self) -> float: ...
    def set_alpha_antialiasing(self, alpha_aa: 'BaseMaterial3D_AlphaAntiAliasing') -> None: ...
    def get_alpha_antialiasing(self) -> 'BaseMaterial3D_AlphaAntiAliasing': ...
    def set_alpha_antialiasing_edge(self, edge: float) -> None: ...
    def get_alpha_antialiasing_edge(self) -> float: ...
    def set_texture_filter(self, mode: 'BaseMaterial3D_TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'BaseMaterial3D_TextureFilter': ...
    def generate_triangle_mesh(self) -> 'TriangleMesh': ...
    
class Label3D_DrawFlags(Enum):
    FLAG_SHADED = 0
    FLAG_DOUBLE_SIDED = 1
    FLAG_DISABLE_DEPTH_TEST = 2
    FLAG_FIXED_SIZE = 3
    FLAG_MAX = 4

class Label3D_AlphaCutMode(Enum):
    ALPHA_CUT_DISABLED = 0
    ALPHA_CUT_DISCARD = 1
    ALPHA_CUT_OPAQUE_PREPASS = 2
    ALPHA_CUT_HASH = 3

class LabelSettings(Resource):
    line_spacing: float
    paragraph_spacing: float
    font: 'Font'
    font_size: int
    font_color: 'Color'
    outline_size: int
    outline_color: 'Color'
    shadow_size: int
    shadow_color: 'Color'
    shadow_offset: 'Vector2'
    def set_line_spacing(self, spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def set_paragraph_spacing(self, spacing: float) -> None: ...
    def get_paragraph_spacing(self) -> float: ...
    def set_font(self, font: 'Font') -> None: ...
    def get_font(self) -> 'Font': ...
    def set_font_size(self, size: int) -> None: ...
    def get_font_size(self) -> int: ...
    def set_font_color(self, color: 'Color') -> None: ...
    def get_font_color(self) -> 'Color': ...
    def set_outline_size(self, size: int) -> None: ...
    def get_outline_size(self) -> int: ...
    def set_outline_color(self, color: 'Color') -> None: ...
    def get_outline_color(self) -> 'Color': ...
    def set_shadow_size(self, size: int) -> None: ...
    def get_shadow_size(self) -> int: ...
    def set_shadow_color(self, color: 'Color') -> None: ...
    def get_shadow_color(self) -> 'Color': ...
    def set_shadow_offset(self, offset: 'Vector2') -> None: ...
    def get_shadow_offset(self) -> 'Vector2': ...
    
class Light2D(Node2D):
    enabled: bool
    editor_only: bool
    color: 'Color'
    energy: float
    blend_mode: int
    range_z_min: int
    range_z_max: int
    range_layer_min: int
    range_layer_max: int
    range_item_cull_mask: int
    shadow_enabled: bool
    shadow_color: 'Color'
    shadow_filter: int
    shadow_filter_smooth: float
    shadow_item_cull_mask: int
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_editor_only(self, editor_only: bool) -> None: ...
    def is_editor_only(self) -> bool: ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_energy(self, energy: float) -> None: ...
    def get_energy(self) -> float: ...
    def set_z_range_min(self, z: int) -> None: ...
    def get_z_range_min(self) -> int: ...
    def set_z_range_max(self, z: int) -> None: ...
    def get_z_range_max(self) -> int: ...
    def set_layer_range_min(self, layer: int) -> None: ...
    def get_layer_range_min(self) -> int: ...
    def set_layer_range_max(self, layer: int) -> None: ...
    def get_layer_range_max(self) -> int: ...
    def set_item_cull_mask(self, item_cull_mask: int) -> None: ...
    def get_item_cull_mask(self) -> int: ...
    def set_item_shadow_cull_mask(self, item_shadow_cull_mask: int) -> None: ...
    def get_item_shadow_cull_mask(self) -> int: ...
    def set_shadow_enabled(self, enabled: bool) -> None: ...
    def is_shadow_enabled(self) -> bool: ...
    def set_shadow_smooth(self, smooth: float) -> None: ...
    def get_shadow_smooth(self) -> float: ...
    def set_shadow_filter(self, filter: 'Light2D_ShadowFilter') -> None: ...
    def get_shadow_filter(self) -> 'Light2D_ShadowFilter': ...
    def set_shadow_color(self, shadow_color: 'Color') -> None: ...
    def get_shadow_color(self) -> 'Color': ...
    def set_blend_mode(self, mode: 'Light2D_BlendMode') -> None: ...
    def get_blend_mode(self) -> 'Light2D_BlendMode': ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    
class Light2D_ShadowFilter(Enum):
    SHADOW_FILTER_NONE = 0
    SHADOW_FILTER_PCF5 = 1
    SHADOW_FILTER_PCF13 = 2

class Light2D_BlendMode(Enum):
    BLEND_MODE_ADD = 0
    BLEND_MODE_SUB = 1
    BLEND_MODE_MIX = 2

class Light3D(VisualInstance3D):
    light_intensity_lumens: float
    light_intensity_lux: float
    light_temperature: float
    light_color: 'Color'
    light_energy: float
    light_indirect_energy: float
    light_volumetric_fog_energy: float
    light_projector: 'Texture2D'
    light_size: float
    light_angular_distance: float
    light_negative: bool
    light_specular: float
    light_bake_mode: int
    light_cull_mask: int
    shadow_enabled: bool
    shadow_bias: float
    shadow_normal_bias: float
    shadow_reverse_cull_face: bool
    shadow_transmittance_bias: float
    shadow_opacity: float
    shadow_blur: float
    shadow_caster_mask: int
    distance_fade_enabled: bool
    distance_fade_begin: float
    distance_fade_shadow: float
    distance_fade_length: float
    editor_only: bool
    def set_editor_only(self, editor_only: bool) -> None: ...
    def is_editor_only(self) -> bool: ...
    def set_param(self, param: 'Light3D_Param', value: float) -> None: ...
    def get_param(self, param: 'Light3D_Param') -> float: ...
    def set_shadow(self, enabled: bool) -> None: ...
    def has_shadow(self) -> bool: ...
    def set_negative(self, enabled: bool) -> None: ...
    def is_negative(self) -> bool: ...
    def set_cull_mask(self, cull_mask: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_enable_distance_fade(self, enable: bool) -> None: ...
    def is_distance_fade_enabled(self) -> bool: ...
    def set_distance_fade_begin(self, distance: float) -> None: ...
    def get_distance_fade_begin(self) -> float: ...
    def set_distance_fade_shadow(self, distance: float) -> None: ...
    def get_distance_fade_shadow(self) -> float: ...
    def set_distance_fade_length(self, distance: float) -> None: ...
    def get_distance_fade_length(self) -> float: ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_shadow_reverse_cull_face(self, enable: bool) -> None: ...
    def get_shadow_reverse_cull_face(self) -> bool: ...
    def set_shadow_caster_mask(self, caster_mask: int) -> None: ...
    def get_shadow_caster_mask(self) -> int: ...
    def set_bake_mode(self, bake_mode: 'Light3D_BakeMode') -> None: ...
    def get_bake_mode(self) -> 'Light3D_BakeMode': ...
    def set_projector(self, projector: 'Texture2D') -> None: ...
    def get_projector(self) -> 'Texture2D': ...
    def set_temperature(self, temperature: float) -> None: ...
    def get_temperature(self) -> float: ...
    def get_correlated_color(self) -> 'Color': ...
    
class Light3D_Param(Enum):
    PARAM_ENERGY = 0
    PARAM_INDIRECT_ENERGY = 1
    PARAM_VOLUMETRIC_FOG_ENERGY = 2
    PARAM_SPECULAR = 3
    PARAM_RANGE = 4
    PARAM_SIZE = 5
    PARAM_ATTENUATION = 6
    PARAM_SPOT_ANGLE = 7
    PARAM_SPOT_ATTENUATION = 8
    PARAM_SHADOW_MAX_DISTANCE = 9
    PARAM_SHADOW_SPLIT_1_OFFSET = 10
    PARAM_SHADOW_SPLIT_2_OFFSET = 11
    PARAM_SHADOW_SPLIT_3_OFFSET = 12
    PARAM_SHADOW_FADE_START = 13
    PARAM_SHADOW_NORMAL_BIAS = 14
    PARAM_SHADOW_BIAS = 15
    PARAM_SHADOW_PANCAKE_SIZE = 16
    PARAM_SHADOW_OPACITY = 17
    PARAM_SHADOW_BLUR = 18
    PARAM_TRANSMITTANCE_BIAS = 19
    PARAM_INTENSITY = 20
    PARAM_MAX = 21

class Light3D_BakeMode(Enum):
    BAKE_DISABLED = 0
    BAKE_STATIC = 1
    BAKE_DYNAMIC = 2

class LightOccluder2D(Node2D):
    occluder: 'OccluderPolygon2D'
    sdf_collision: bool
    occluder_light_mask: int
    def set_occluder_polygon(self, polygon: 'OccluderPolygon2D') -> None: ...
    def get_occluder_polygon(self) -> 'OccluderPolygon2D': ...
    def set_occluder_light_mask(self, mask: int) -> None: ...
    def get_occluder_light_mask(self) -> int: ...
    def set_as_sdf_collision(self, enable: bool) -> None: ...
    def is_set_as_sdf_collision(self) -> bool: ...
    
class LightmapGI(VisualInstance3D):
    quality: int
    supersampling: bool
    supersampling_factor: float
    bounces: int
    bounce_indirect_energy: float
    directional: bool
    shadowmask_mode: int
    use_texture_for_bounces: bool
    interior: bool
    use_denoiser: bool
    denoiser_strength: float
    denoiser_range: int
    bias: float
    texel_scale: float
    max_texture_size: int
    environment_mode: int
    environment_custom_sky: 'Sky'
    environment_custom_color: 'Color'
    environment_custom_energy: float
    camera_attributes: 'CameraAttributesPractical'
    generate_probes_subdiv: int
    light_data: 'LightmapGIData'
    def set_light_data(self, data: 'LightmapGIData') -> None: ...
    def get_light_data(self) -> 'LightmapGIData': ...
    def set_bake_quality(self, bake_quality: 'LightmapGI_BakeQuality') -> None: ...
    def get_bake_quality(self) -> 'LightmapGI_BakeQuality': ...
    def set_bounces(self, bounces: int) -> None: ...
    def get_bounces(self) -> int: ...
    def set_bounce_indirect_energy(self, bounce_indirect_energy: float) -> None: ...
    def get_bounce_indirect_energy(self) -> float: ...
    def set_generate_probes(self, subdivision: 'LightmapGI_GenerateProbes') -> None: ...
    def get_generate_probes(self) -> 'LightmapGI_GenerateProbes': ...
    def set_bias(self, bias: float) -> None: ...
    def get_bias(self) -> float: ...
    def set_environment_mode(self, mode: 'LightmapGI_EnvironmentMode') -> None: ...
    def get_environment_mode(self) -> 'LightmapGI_EnvironmentMode': ...
    def set_environment_custom_sky(self, sky: 'Sky') -> None: ...
    def get_environment_custom_sky(self) -> 'Sky': ...
    def set_environment_custom_color(self, color: 'Color') -> None: ...
    def get_environment_custom_color(self) -> 'Color': ...
    def set_environment_custom_energy(self, energy: float) -> None: ...
    def get_environment_custom_energy(self) -> float: ...
    def set_texel_scale(self, texel_scale: float) -> None: ...
    def get_texel_scale(self) -> float: ...
    def set_max_texture_size(self, max_texture_size: int) -> None: ...
    def get_max_texture_size(self) -> int: ...
    def set_supersampling_enabled(self, enable: bool) -> None: ...
    def is_supersampling_enabled(self) -> bool: ...
    def set_supersampling_factor(self, factor: float) -> None: ...
    def get_supersampling_factor(self) -> float: ...
    def set_use_denoiser(self, use_denoiser: bool) -> None: ...
    def is_using_denoiser(self) -> bool: ...
    def set_denoiser_strength(self, denoiser_strength: float) -> None: ...
    def get_denoiser_strength(self) -> float: ...
    def set_denoiser_range(self, denoiser_range: int) -> None: ...
    def get_denoiser_range(self) -> int: ...
    def set_interior(self, enable: bool) -> None: ...
    def is_interior(self) -> bool: ...
    def set_directional(self, directional: bool) -> None: ...
    def is_directional(self) -> bool: ...
    def set_shadowmask_mode(self, mode: 'LightmapGIData_ShadowmaskMode') -> None: ...
    def get_shadowmask_mode(self) -> 'LightmapGIData_ShadowmaskMode': ...
    def set_use_texture_for_bounces(self, use_texture_for_bounces: bool) -> None: ...
    def is_using_texture_for_bounces(self) -> bool: ...
    def set_camera_attributes(self, camera_attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    
class LightmapGI_BakeQuality(Enum):
    BAKE_QUALITY_LOW = 0
    BAKE_QUALITY_MEDIUM = 1
    BAKE_QUALITY_HIGH = 2
    BAKE_QUALITY_ULTRA = 3

class LightmapGI_GenerateProbes(Enum):
    GENERATE_PROBES_DISABLED = 0
    GENERATE_PROBES_SUBDIV_4 = 1
    GENERATE_PROBES_SUBDIV_8 = 2
    GENERATE_PROBES_SUBDIV_16 = 3
    GENERATE_PROBES_SUBDIV_32 = 4

class LightmapGI_BakeError(Enum):
    BAKE_ERROR_OK = 0
    BAKE_ERROR_NO_SCENE_ROOT = 1
    BAKE_ERROR_FOREIGN_DATA = 2
    BAKE_ERROR_NO_LIGHTMAPPER = 3
    BAKE_ERROR_NO_SAVE_PATH = 4
    BAKE_ERROR_NO_MESHES = 5
    BAKE_ERROR_MESHES_INVALID = 6
    BAKE_ERROR_CANT_CREATE_IMAGE = 7
    BAKE_ERROR_USER_ABORTED = 8
    BAKE_ERROR_TEXTURE_SIZE_TOO_SMALL = 9
    BAKE_ERROR_LIGHTMAP_TOO_SMALL = 10
    BAKE_ERROR_ATLAS_TOO_SMALL = 11

class LightmapGI_EnvironmentMode(Enum):
    ENVIRONMENT_MODE_DISABLED = 0
    ENVIRONMENT_MODE_SCENE = 1
    ENVIRONMENT_MODE_CUSTOM_SKY = 2
    ENVIRONMENT_MODE_CUSTOM_COLOR = 3

class LightmapGIData(Resource):
    lightmap_textures: 'list[TextureLayered]'
    shadowmask_textures: 'list[TextureLayered]'
    uses_spherical_harmonics: bool
    user_data: 'Array'
    probe_data: 'Dictionary'
    light_texture: 'TextureLayered'
    light_textures: 'Array'
    def set_lightmap_textures(self, light_textures: 'list[TextureLayered]') -> None: ...
    def get_lightmap_textures(self) -> 'list[TextureLayered]': ...
    def set_shadowmask_textures(self, shadowmask_textures: 'list[TextureLayered]') -> None: ...
    def get_shadowmask_textures(self) -> 'list[TextureLayered]': ...
    def set_uses_spherical_harmonics(self, uses_spherical_harmonics: bool) -> None: ...
    def is_using_spherical_harmonics(self) -> bool: ...
    def add_user(self, path: 'NodePath', uv_scale: 'Rect2', slice_index: int, sub_instance: int) -> None: ...
    def get_user_count(self) -> int: ...
    def get_user_path(self, user_idx: int) -> 'NodePath': ...
    def clear_users(self) -> None: ...
    def set_light_texture(self, light_texture: 'TextureLayered') -> None: ...
    def get_light_texture(self) -> 'TextureLayered': ...
    
class LightmapGIData_ShadowmaskMode(Enum):
    SHADOWMASK_MODE_NONE = 0
    SHADOWMASK_MODE_REPLACE = 1
    SHADOWMASK_MODE_OVERLAY = 2

class LightmapProbe(Node3D):
    pass
    
class Lightmapper(RefCounted):
    pass
    
class LightmapperRD(Lightmapper):
    pass
    
class Line2D(Node2D):
    points: 'PackedVector2Array'
    closed: bool
    width: float
    width_curve: 'Curve'
    default_color: 'Color'
    gradient: 'Gradient'
    texture: 'Texture2D'
    texture_mode: int
    joint_mode: int
    begin_cap_mode: int
    end_cap_mode: int
    sharp_limit: float
    round_precision: int
    antialiased: bool
    def set_points(self, points: 'PackedVector2Array') -> None: ...
    def get_points(self) -> 'PackedVector2Array': ...
    def set_point_position(self, index: int, position: 'Vector2') -> None: ...
    def get_point_position(self, index: int) -> 'Vector2': ...
    def get_point_count(self) -> int: ...
    def add_point(self, position: 'Vector2', index: int = default('''-1''')) -> None: ...
    def remove_point(self, index: int) -> None: ...
    def clear_points(self) -> None: ...
    def set_closed(self, closed: bool) -> None: ...
    def is_closed(self) -> bool: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    def set_default_color(self, color: 'Color') -> None: ...
    def get_default_color(self) -> 'Color': ...
    def set_gradient(self, color: 'Gradient') -> None: ...
    def get_gradient(self) -> 'Gradient': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_mode(self, mode: 'Line2D_LineTextureMode') -> None: ...
    def get_texture_mode(self) -> 'Line2D_LineTextureMode': ...
    def set_joint_mode(self, mode: 'Line2D_LineJointMode') -> None: ...
    def get_joint_mode(self) -> 'Line2D_LineJointMode': ...
    def set_begin_cap_mode(self, mode: 'Line2D_LineCapMode') -> None: ...
    def get_begin_cap_mode(self) -> 'Line2D_LineCapMode': ...
    def set_end_cap_mode(self, mode: 'Line2D_LineCapMode') -> None: ...
    def get_end_cap_mode(self) -> 'Line2D_LineCapMode': ...
    def set_sharp_limit(self, limit: float) -> None: ...
    def get_sharp_limit(self) -> float: ...
    def set_round_precision(self, precision: int) -> None: ...
    def get_round_precision(self) -> int: ...
    def set_antialiased(self, antialiased: bool) -> None: ...
    def get_antialiased(self) -> bool: ...
    
class Line2D_LineJointMode(Enum):
    LINE_JOINT_SHARP = 0
    LINE_JOINT_BEVEL = 1
    LINE_JOINT_ROUND = 2

class Line2D_LineCapMode(Enum):
    LINE_CAP_NONE = 0
    LINE_CAP_BOX = 1
    LINE_CAP_ROUND = 2

class Line2D_LineTextureMode(Enum):
    LINE_TEXTURE_NONE = 0
    LINE_TEXTURE_TILE = 1
    LINE_TEXTURE_STRETCH = 2

class LineEdit(Control):
    text: 'String'
    placeholder_text: 'String'
    alignment: int
    max_length: int
    editable: bool
    keep_editing_on_text_submit: bool
    expand_to_text_length: bool
    context_menu_enabled: bool
    emoji_menu_enabled: bool
    virtual_keyboard_enabled: bool
    virtual_keyboard_type: int
    clear_button_enabled: bool
    shortcut_keys_enabled: bool
    middle_mouse_paste_enabled: bool
    selecting_enabled: bool
    deselect_on_focus_loss_enabled: bool
    drag_and_drop_selection_enabled: bool
    right_icon: 'Texture2D'
    flat: bool
    draw_control_chars: bool
    select_all_on_focus: bool
    caret_blink: bool
    caret_blink_interval: float
    caret_column: int
    caret_force_displayed: bool
    caret_mid_grapheme: bool
    secret: bool
    secret_character: 'String'
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    text_changed: Signal[Callable[['String'], None]]  # text_changed(new_text: 'String')
    text_change_rejected: Signal[Callable[['String'], None]]  # text_change_rejected(rejected_substring: 'String')
    text_submitted: Signal[Callable[['String'], None]]  # text_submitted(new_text: 'String')
    editing_toggled: Signal[Callable[['bool'], None]]  # editing_toggled(toggled_on: bool)
    def has_ime_text(self) -> bool: ...
    def cancel_ime(self) -> None: ...
    def apply_ime(self) -> None: ...
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def edit(self) -> None: ...
    def unedit(self) -> None: ...
    def is_editing(self) -> bool: ...
    def set_keep_editing_on_text_submit(self, enable: bool) -> None: ...
    def is_editing_kept_on_text_submit(self) -> bool: ...
    def clear(self) -> None: ...
    def select(self, from_: int = default('''0'''), to: int = default('''-1''')) -> None: ...
    def select_all(self) -> None: ...
    def deselect(self) -> None: ...
    def has_undo(self) -> bool: ...
    def has_redo(self) -> bool: ...
    def has_selection(self) -> bool: ...
    def get_selected_text(self) -> 'String': ...
    def get_selection_from_column(self) -> int: ...
    def get_selection_to_column(self) -> int: ...
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def get_draw_control_chars(self) -> bool: ...
    def set_draw_control_chars(self, enable: bool) -> None: ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_placeholder(self, text: 'String') -> None: ...
    def get_placeholder(self) -> 'String': ...
    def set_caret_column(self, position: int) -> None: ...
    def get_caret_column(self) -> int: ...
    def get_scroll_offset(self) -> float: ...
    def set_expand_to_text_length_enabled(self, enabled: bool) -> None: ...
    def is_expand_to_text_length_enabled(self) -> bool: ...
    def set_caret_blink_enabled(self, enabled: bool) -> None: ...
    def is_caret_blink_enabled(self) -> bool: ...
    def set_caret_mid_grapheme_enabled(self, enabled: bool) -> None: ...
    def is_caret_mid_grapheme_enabled(self) -> bool: ...
    def set_caret_force_displayed(self, enabled: bool) -> None: ...
    def is_caret_force_displayed(self) -> bool: ...
    def set_caret_blink_interval(self, interval: float) -> None: ...
    def get_caret_blink_interval(self) -> float: ...
    def set_max_length(self, chars: int) -> None: ...
    def get_max_length(self) -> int: ...
    def insert_text_at_caret(self, text: 'String') -> None: ...
    def delete_char_at_caret(self) -> None: ...
    def delete_text(self, from_column: int, to_column: int) -> None: ...
    def set_editable(self, enabled: bool) -> None: ...
    def is_editable(self) -> bool: ...
    def set_secret(self, enabled: bool) -> None: ...
    def is_secret(self) -> bool: ...
    def set_secret_character(self, character: 'String') -> None: ...
    def get_secret_character(self) -> 'String': ...
    def menu_option(self, option: int) -> None: ...
    def get_menu(self) -> 'PopupMenu': ...
    def is_menu_visible(self) -> bool: ...
    def set_context_menu_enabled(self, enable: bool) -> None: ...
    def is_context_menu_enabled(self) -> bool: ...
    def set_emoji_menu_enabled(self, enable: bool) -> None: ...
    def is_emoji_menu_enabled(self) -> bool: ...
    def set_virtual_keyboard_enabled(self, enable: bool) -> None: ...
    def is_virtual_keyboard_enabled(self) -> bool: ...
    def set_virtual_keyboard_type(self, type: 'LineEdit_VirtualKeyboardType') -> None: ...
    def get_virtual_keyboard_type(self) -> 'LineEdit_VirtualKeyboardType': ...
    def set_clear_button_enabled(self, enable: bool) -> None: ...
    def is_clear_button_enabled(self) -> bool: ...
    def set_shortcut_keys_enabled(self, enable: bool) -> None: ...
    def is_shortcut_keys_enabled(self) -> bool: ...
    def set_middle_mouse_paste_enabled(self, enable: bool) -> None: ...
    def is_middle_mouse_paste_enabled(self) -> bool: ...
    def set_selecting_enabled(self, enable: bool) -> None: ...
    def is_selecting_enabled(self) -> bool: ...
    def set_deselect_on_focus_loss_enabled(self, enable: bool) -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> bool: ...
    def set_drag_and_drop_selection_enabled(self, enable: bool) -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> bool: ...
    def set_right_icon(self, icon: 'Texture2D') -> None: ...
    def get_right_icon(self) -> 'Texture2D': ...
    def set_flat(self, enabled: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_select_all_on_focus(self, enabled: bool) -> None: ...
    def is_select_all_on_focus(self) -> bool: ...
    
class LineEdit_MenuItems(Enum):
    MENU_CUT = 0
    MENU_COPY = 1
    MENU_PASTE = 2
    MENU_CLEAR = 3
    MENU_SELECT_ALL = 4
    MENU_UNDO = 5
    MENU_REDO = 6
    MENU_SUBMENU_TEXT_DIR = 7
    MENU_DIR_INHERITED = 8
    MENU_DIR_AUTO = 9
    MENU_DIR_LTR = 10
    MENU_DIR_RTL = 11
    MENU_DISPLAY_UCC = 12
    MENU_SUBMENU_INSERT_UCC = 13
    MENU_INSERT_LRM = 14
    MENU_INSERT_RLM = 15
    MENU_INSERT_LRE = 16
    MENU_INSERT_RLE = 17
    MENU_INSERT_LRO = 18
    MENU_INSERT_RLO = 19
    MENU_INSERT_PDF = 20
    MENU_INSERT_ALM = 21
    MENU_INSERT_LRI = 22
    MENU_INSERT_RLI = 23
    MENU_INSERT_FSI = 24
    MENU_INSERT_PDI = 25
    MENU_INSERT_ZWJ = 26
    MENU_INSERT_ZWNJ = 27
    MENU_INSERT_WJ = 28
    MENU_INSERT_SHY = 29
    MENU_EMOJI_AND_SYMBOL = 30
    MENU_MAX = 31

class LineEdit_VirtualKeyboardType(Enum):
    KEYBOARD_TYPE_DEFAULT = 0
    KEYBOARD_TYPE_MULTILINE = 1
    KEYBOARD_TYPE_NUMBER = 2
    KEYBOARD_TYPE_NUMBER_DECIMAL = 3
    KEYBOARD_TYPE_PHONE = 4
    KEYBOARD_TYPE_EMAIL_ADDRESS = 5
    KEYBOARD_TYPE_PASSWORD = 6
    KEYBOARD_TYPE_URL = 7

class LinkButton(BaseButton):
    text: 'String'
    underline: int
    uri: 'String'
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_uri(self, uri: 'String') -> None: ...
    def get_uri(self) -> 'String': ...
    def set_underline_mode(self, underline_mode: 'LinkButton_UnderlineMode') -> None: ...
    def get_underline_mode(self) -> 'LinkButton_UnderlineMode': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    
class LinkButton_UnderlineMode(Enum):
    UNDERLINE_MODE_ALWAYS = 0
    UNDERLINE_MODE_ON_HOVER = 1
    UNDERLINE_MODE_NEVER = 2

class LookAtModifier3D(SkeletonModifier3D):
    target_node: 'NodePath'
    bone_name: 'String'
    bone: int
    forward_axis: int
    primary_rotation_axis: int
    use_secondary_rotation: bool
    origin_from: int
    origin_bone_name: 'String'
    origin_bone: int
    origin_external_node: 'NodePath'
    origin_offset: 'Vector3'
    origin_safe_margin: float
    duration: float
    transition_type: int
    ease_type: int
    use_angle_limitation: bool
    symmetry_limitation: bool
    primary_limit_angle: float
    primary_damp_threshold: float
    primary_positive_limit_angle: float
    primary_positive_damp_threshold: float
    primary_negative_limit_angle: float
    primary_negative_damp_threshold: float
    secondary_limit_angle: float
    secondary_damp_threshold: float
    secondary_positive_limit_angle: float
    secondary_positive_damp_threshold: float
    secondary_negative_limit_angle: float
    secondary_negative_damp_threshold: float
    def set_target_node(self, target_node: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_bone_name(self, bone_name: 'String') -> None: ...
    def get_bone_name(self) -> 'String': ...
    def set_bone(self, bone: int) -> None: ...
    def get_bone(self) -> int: ...
    def set_forward_axis(self, forward_axis: 'SkeletonModifier3D_BoneAxis') -> None: ...
    def get_forward_axis(self) -> 'SkeletonModifier3D_BoneAxis': ...
    def set_primary_rotation_axis(self, axis: 'Vector3_Axis') -> None: ...
    def get_primary_rotation_axis(self) -> 'Vector3_Axis': ...
    def set_use_secondary_rotation(self, enabled: bool) -> None: ...
    def is_using_secondary_rotation(self) -> bool: ...
    def set_origin_safe_margin(self, margin: float) -> None: ...
    def get_origin_safe_margin(self) -> float: ...
    def set_origin_from(self, origin_from: 'LookAtModifier3D_OriginFrom') -> None: ...
    def get_origin_from(self) -> 'LookAtModifier3D_OriginFrom': ...
    def set_origin_bone_name(self, bone_name: 'String') -> None: ...
    def get_origin_bone_name(self) -> 'String': ...
    def set_origin_bone(self, bone: int) -> None: ...
    def get_origin_bone(self) -> int: ...
    def set_origin_external_node(self, external_node: 'NodePath') -> None: ...
    def get_origin_external_node(self) -> 'NodePath': ...
    def set_origin_offset(self, offset: 'Vector3') -> None: ...
    def get_origin_offset(self) -> 'Vector3': ...
    def set_duration(self, duration: float) -> None: ...
    def get_duration(self) -> float: ...
    def set_transition_type(self, transition_type: 'Tween_TransitionType') -> None: ...
    def get_transition_type(self) -> 'Tween_TransitionType': ...
    def set_ease_type(self, ease_type: 'Tween_EaseType') -> None: ...
    def get_ease_type(self) -> 'Tween_EaseType': ...
    def set_use_angle_limitation(self, enabled: bool) -> None: ...
    def is_using_angle_limitation(self) -> bool: ...
    def set_symmetry_limitation(self, enabled: bool) -> None: ...
    def is_limitation_symmetry(self) -> bool: ...
    def set_primary_limit_angle(self, angle: float) -> None: ...
    def get_primary_limit_angle(self) -> float: ...
    def set_primary_damp_threshold(self, power: float) -> None: ...
    def get_primary_damp_threshold(self) -> float: ...
    def set_primary_positive_limit_angle(self, angle: float) -> None: ...
    def get_primary_positive_limit_angle(self) -> float: ...
    def set_primary_positive_damp_threshold(self, power: float) -> None: ...
    def get_primary_positive_damp_threshold(self) -> float: ...
    def set_primary_negative_limit_angle(self, angle: float) -> None: ...
    def get_primary_negative_limit_angle(self) -> float: ...
    def set_primary_negative_damp_threshold(self, power: float) -> None: ...
    def get_primary_negative_damp_threshold(self) -> float: ...
    def set_secondary_limit_angle(self, angle: float) -> None: ...
    def get_secondary_limit_angle(self) -> float: ...
    def set_secondary_damp_threshold(self, power: float) -> None: ...
    def get_secondary_damp_threshold(self) -> float: ...
    def set_secondary_positive_limit_angle(self, angle: float) -> None: ...
    def get_secondary_positive_limit_angle(self) -> float: ...
    def set_secondary_positive_damp_threshold(self, power: float) -> None: ...
    def get_secondary_positive_damp_threshold(self) -> float: ...
    def set_secondary_negative_limit_angle(self, angle: float) -> None: ...
    def get_secondary_negative_limit_angle(self) -> float: ...
    def set_secondary_negative_damp_threshold(self, power: float) -> None: ...
    def get_secondary_negative_damp_threshold(self) -> float: ...
    def get_interpolation_remaining(self) -> float: ...
    def is_interpolating(self) -> bool: ...
    def is_target_within_limitation(self) -> bool: ...
    
class LookAtModifier3D_OriginFrom(Enum):
    ORIGIN_FROM_SELF = 0
    ORIGIN_FROM_SPECIFIC_BONE = 1
    ORIGIN_FROM_EXTERNAL_NODE = 2

class MainLoop(Object):
    NOTIFICATION_OS_MEMORY_WARNING = 2009
    NOTIFICATION_TRANSLATION_CHANGED = 2010
    NOTIFICATION_WM_ABOUT = 2011
    NOTIFICATION_CRASH = 2012
    NOTIFICATION_OS_IME_UPDATE = 2013
    NOTIFICATION_APPLICATION_RESUMED = 2014
    NOTIFICATION_APPLICATION_PAUSED = 2015
    NOTIFICATION_APPLICATION_FOCUS_IN = 2016
    NOTIFICATION_APPLICATION_FOCUS_OUT = 2017
    NOTIFICATION_TEXT_SERVER_CHANGED = 2018
    
    on_request_permissions_result: Signal[Callable[['String', 'bool'], None]]  # on_request_permissions_result(permission: 'String', granted: bool)
    def _initialize(self) -> None: ...
    def _physics_process(self, delta: float) -> bool: ...
    def _process(self, delta: float) -> bool: ...
    def _finalize(self) -> None: ...
    
class MarginContainer(Container):
    pass
    
class Marker2D(Node2D):
    gizmo_extents: float
    def set_gizmo_extents(self, extents: float) -> None: ...
    def get_gizmo_extents(self) -> float: ...
    
class Marker3D(Node3D):
    gizmo_extents: float
    def set_gizmo_extents(self, extents: float) -> None: ...
    def get_gizmo_extents(self) -> float: ...
    
class Marshalls(Object):
    def variant_to_base64(self, variant: 'Variant', full_objects: bool = default('''false''')) -> 'String': ...
    def base64_to_variant(self, base64_str: 'String', allow_objects: bool = default('''false''')) -> 'Variant': ...
    def raw_to_base64(self, array: 'PackedByteArray') -> 'String': ...
    def base64_to_raw(self, base64_str: 'String') -> 'PackedByteArray': ...
    def utf8_to_base64(self, utf8_str: 'String') -> 'String': ...
    def base64_to_utf8(self, base64_str: 'String') -> 'String': ...
    
class Material(Resource):
    render_priority: int
    next_pass: 'Material'
    RENDER_PRIORITY_MAX = 127
    RENDER_PRIORITY_MIN = -128
    
    def _get_shader_rid(self) -> 'RID': ...
    def _get_shader_mode(self) -> 'Shader_Mode': ...
    def _can_do_next_pass(self) -> bool: ...
    def _can_use_render_priority(self) -> bool: ...
    def set_next_pass(self, next_pass: 'Material') -> None: ...
    def get_next_pass(self) -> 'Material': ...
    def set_render_priority(self, priority: int) -> None: ...
    def get_render_priority(self) -> int: ...
    def inspect_native_shader_code(self) -> None: ...
    def create_placeholder(self) -> 'Resource': ...
    
class MenuBar(Control):
    flat: bool
    start_index: int
    switch_on_hover: bool
    prefer_global_menu: bool
    text_direction: int
    language: 'String'
    def set_switch_on_hover(self, enable: bool) -> None: ...
    def is_switch_on_hover(self) -> bool: ...
    def set_disable_shortcuts(self, disabled: bool) -> None: ...
    def set_prefer_global_menu(self, enabled: bool) -> None: ...
    def is_prefer_global_menu(self) -> bool: ...
    def is_native_menu(self) -> bool: ...
    def get_menu_count(self) -> int: ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_flat(self, enabled: bool) -> None: ...
    def is_flat(self) -> bool: ...
    def set_start_index(self, enabled: int) -> None: ...
    def get_start_index(self) -> int: ...
    def set_menu_title(self, menu: int, title: 'String') -> None: ...
    def get_menu_title(self, menu: int) -> 'String': ...
    def set_menu_tooltip(self, menu: int, tooltip: 'String') -> None: ...
    def get_menu_tooltip(self, menu: int) -> 'String': ...
    def set_menu_disabled(self, menu: int, disabled: bool) -> None: ...
    def is_menu_disabled(self, menu: int) -> bool: ...
    def set_menu_hidden(self, menu: int, hidden: bool) -> None: ...
    def is_menu_hidden(self, menu: int) -> bool: ...
    def get_menu_popup(self, menu: int) -> 'PopupMenu': ...
    
class MenuButton(Button):
    switch_on_hover: bool
    item_count: int
    about_to_popup: Signal[Callable[[], None]]  # about_to_popup()
    def get_popup(self) -> 'PopupMenu': ...
    def show_popup(self) -> None: ...
    def set_switch_on_hover(self, enable: bool) -> None: ...
    def is_switch_on_hover(self) -> bool: ...
    def set_disable_shortcuts(self, disabled: bool) -> None: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    
class Mesh(Resource):
    lightmap_size_hint: 'Vector2i'
    def _get_surface_count(self) -> int: ...
    def _surface_get_array_len(self, index: int) -> int: ...
    def _surface_get_array_index_len(self, index: int) -> int: ...
    def _surface_get_arrays(self, index: int) -> 'Array': ...
    def _surface_get_blend_shape_arrays(self, index: int) -> 'list[Array]': ...
    def _surface_get_lods(self, index: int) -> 'Dictionary': ...
    def _surface_get_format(self, index: int) -> int: ...
    def _surface_get_primitive_type(self, index: int) -> int: ...
    def _surface_set_material(self, index: int, material: 'Material') -> None: ...
    def _surface_get_material(self, index: int) -> 'Material': ...
    def _get_blend_shape_count(self) -> int: ...
    def _get_blend_shape_name(self, index: int) -> 'StringName': ...
    def _set_blend_shape_name(self, index: int, name: 'StringName') -> None: ...
    def _get_aabb(self) -> 'AABB': ...
    def set_lightmap_size_hint(self, size: 'Vector2i') -> None: ...
    def get_lightmap_size_hint(self) -> 'Vector2i': ...
    def get_aabb(self) -> 'AABB': ...
    def get_faces(self) -> 'PackedVector3Array': ...
    def get_surface_count(self) -> int: ...
    def surface_get_arrays(self, surf_idx: int) -> 'Array': ...
    def surface_get_blend_shape_arrays(self, surf_idx: int) -> 'list[Array]': ...
    def surface_set_material(self, surf_idx: int, material: 'Material') -> None: ...
    def surface_get_material(self, surf_idx: int) -> 'Material': ...
    def create_placeholder(self) -> 'Resource': ...
    def create_trimesh_shape(self) -> 'ConcavePolygonShape3D': ...
    def create_convex_shape(self, clean: bool = default('''true'''), simplify: bool = default('''false''')) -> 'ConvexPolygonShape3D': ...
    def create_outline(self, margin: float) -> 'Mesh': ...
    def generate_triangle_mesh(self) -> 'TriangleMesh': ...
    
class Mesh_PrimitiveType(Enum):
    PRIMITIVE_POINTS = 0
    PRIMITIVE_LINES = 1
    PRIMITIVE_LINE_STRIP = 2
    PRIMITIVE_TRIANGLES = 3
    PRIMITIVE_TRIANGLE_STRIP = 4

class Mesh_ArrayType(Enum):
    ARRAY_VERTEX = 0
    ARRAY_NORMAL = 1
    ARRAY_TANGENT = 2
    ARRAY_COLOR = 3
    ARRAY_TEX_UV = 4
    ARRAY_TEX_UV2 = 5
    ARRAY_CUSTOM0 = 6
    ARRAY_CUSTOM1 = 7
    ARRAY_CUSTOM2 = 8
    ARRAY_CUSTOM3 = 9
    ARRAY_BONES = 10
    ARRAY_WEIGHTS = 11
    ARRAY_INDEX = 12
    ARRAY_MAX = 13

class Mesh_ArrayCustomFormat(Enum):
    ARRAY_CUSTOM_RGBA8_UNORM = 0
    ARRAY_CUSTOM_RGBA8_SNORM = 1
    ARRAY_CUSTOM_RG_HALF = 2
    ARRAY_CUSTOM_RGBA_HALF = 3
    ARRAY_CUSTOM_R_FLOAT = 4
    ARRAY_CUSTOM_RG_FLOAT = 5
    ARRAY_CUSTOM_RGB_FLOAT = 6
    ARRAY_CUSTOM_RGBA_FLOAT = 7
    ARRAY_CUSTOM_MAX = 8

class Mesh_ArrayFormat(Enum):
    ARRAY_FORMAT_VERTEX = 1
    ARRAY_FORMAT_NORMAL = 2
    ARRAY_FORMAT_TANGENT = 4
    ARRAY_FORMAT_COLOR = 8
    ARRAY_FORMAT_TEX_UV = 16
    ARRAY_FORMAT_TEX_UV2 = 32
    ARRAY_FORMAT_CUSTOM0 = 64
    ARRAY_FORMAT_CUSTOM1 = 128
    ARRAY_FORMAT_CUSTOM2 = 256
    ARRAY_FORMAT_CUSTOM3 = 512
    ARRAY_FORMAT_BONES = 1024
    ARRAY_FORMAT_WEIGHTS = 2048
    ARRAY_FORMAT_INDEX = 4096
    ARRAY_FORMAT_BLEND_SHAPE_MASK = 7
    ARRAY_FORMAT_CUSTOM_BASE = 13
    ARRAY_FORMAT_CUSTOM_BITS = 3
    ARRAY_FORMAT_CUSTOM0_SHIFT = 13
    ARRAY_FORMAT_CUSTOM1_SHIFT = 16
    ARRAY_FORMAT_CUSTOM2_SHIFT = 19
    ARRAY_FORMAT_CUSTOM3_SHIFT = 22
    ARRAY_FORMAT_CUSTOM_MASK = 7
    ARRAY_COMPRESS_FLAGS_BASE = 25
    ARRAY_FLAG_USE_2D_VERTICES = 33554432
    ARRAY_FLAG_USE_DYNAMIC_UPDATE = 67108864
    ARRAY_FLAG_USE_8_BONE_WEIGHTS = 134217728
    ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY = 268435456
    ARRAY_FLAG_COMPRESS_ATTRIBUTES = 536870912

class Mesh_BlendShapeMode(Enum):
    BLEND_SHAPE_MODE_NORMALIZED = 0
    BLEND_SHAPE_MODE_RELATIVE = 1

class MeshConvexDecompositionSettings(RefCounted):
    max_concavity: float
    symmetry_planes_clipping_bias: float
    revolution_axes_clipping_bias: float
    min_volume_per_convex_hull: float
    resolution: int
    max_num_vertices_per_convex_hull: int
    plane_downsampling: int
    convex_hull_downsampling: int
    normalize_mesh: bool
    mode: int
    convex_hull_approximation: bool
    max_convex_hulls: int
    project_hull_vertices: bool
    def set_max_concavity(self, max_concavity: float) -> None: ...
    def get_max_concavity(self) -> float: ...
    def set_symmetry_planes_clipping_bias(self, symmetry_planes_clipping_bias: float) -> None: ...
    def get_symmetry_planes_clipping_bias(self) -> float: ...
    def set_revolution_axes_clipping_bias(self, revolution_axes_clipping_bias: float) -> None: ...
    def get_revolution_axes_clipping_bias(self) -> float: ...
    def set_min_volume_per_convex_hull(self, min_volume_per_convex_hull: float) -> None: ...
    def get_min_volume_per_convex_hull(self) -> float: ...
    def set_resolution(self, min_volume_per_convex_hull: int) -> None: ...
    def get_resolution(self) -> int: ...
    def set_max_num_vertices_per_convex_hull(self, max_num_vertices_per_convex_hull: int) -> None: ...
    def get_max_num_vertices_per_convex_hull(self) -> int: ...
    def set_plane_downsampling(self, plane_downsampling: int) -> None: ...
    def get_plane_downsampling(self) -> int: ...
    def set_convex_hull_downsampling(self, convex_hull_downsampling: int) -> None: ...
    def get_convex_hull_downsampling(self) -> int: ...
    def set_normalize_mesh(self, normalize_mesh: bool) -> None: ...
    def get_normalize_mesh(self) -> bool: ...
    def set_mode(self, mode: 'MeshConvexDecompositionSettings_Mode') -> None: ...
    def get_mode(self) -> 'MeshConvexDecompositionSettings_Mode': ...
    def set_convex_hull_approximation(self, convex_hull_approximation: bool) -> None: ...
    def get_convex_hull_approximation(self) -> bool: ...
    def set_max_convex_hulls(self, max_convex_hulls: int) -> None: ...
    def get_max_convex_hulls(self) -> int: ...
    def set_project_hull_vertices(self, project_hull_vertices: bool) -> None: ...
    def get_project_hull_vertices(self) -> bool: ...
    
class MeshConvexDecompositionSettings_Mode(Enum):
    CONVEX_DECOMPOSITION_MODE_VOXEL = 0
    CONVEX_DECOMPOSITION_MODE_TETRAHEDRON = 1

class MeshDataTool(RefCounted):
    def clear(self) -> None: ...
    def create_from_surface(self, mesh: 'ArrayMesh', surface: int) -> 'Error': ...
    def commit_to_surface(self, mesh: 'ArrayMesh', compression_flags: int = default('''0''')) -> 'Error': ...
    def get_format(self) -> int: ...
    def get_vertex_count(self) -> int: ...
    def get_edge_count(self) -> int: ...
    def get_face_count(self) -> int: ...
    def set_vertex(self, idx: int, vertex: 'Vector3') -> None: ...
    def get_vertex(self, idx: int) -> 'Vector3': ...
    def set_vertex_normal(self, idx: int, normal: 'Vector3') -> None: ...
    def get_vertex_normal(self, idx: int) -> 'Vector3': ...
    def set_vertex_tangent(self, idx: int, tangent: 'Plane') -> None: ...
    def get_vertex_tangent(self, idx: int) -> 'Plane': ...
    def set_vertex_uv(self, idx: int, uv: 'Vector2') -> None: ...
    def get_vertex_uv(self, idx: int) -> 'Vector2': ...
    def set_vertex_uv2(self, idx: int, uv2: 'Vector2') -> None: ...
    def get_vertex_uv2(self, idx: int) -> 'Vector2': ...
    def set_vertex_color(self, idx: int, color: 'Color') -> None: ...
    def get_vertex_color(self, idx: int) -> 'Color': ...
    def set_vertex_bones(self, idx: int, bones: 'PackedInt32Array') -> None: ...
    def get_vertex_bones(self, idx: int) -> 'PackedInt32Array': ...
    def set_vertex_weights(self, idx: int, weights: 'PackedFloat32Array') -> None: ...
    def get_vertex_weights(self, idx: int) -> 'PackedFloat32Array': ...
    def set_vertex_meta(self, idx: int, meta: 'Variant') -> None: ...
    def get_vertex_meta(self, idx: int) -> 'Variant': ...
    def get_vertex_edges(self, idx: int) -> 'PackedInt32Array': ...
    def get_vertex_faces(self, idx: int) -> 'PackedInt32Array': ...
    def get_edge_vertex(self, idx: int, vertex: int) -> int: ...
    def get_edge_faces(self, idx: int) -> 'PackedInt32Array': ...
    def set_edge_meta(self, idx: int, meta: 'Variant') -> None: ...
    def get_edge_meta(self, idx: int) -> 'Variant': ...
    def get_face_vertex(self, idx: int, vertex: int) -> int: ...
    def get_face_edge(self, idx: int, edge: int) -> int: ...
    def set_face_meta(self, idx: int, meta: 'Variant') -> None: ...
    def get_face_meta(self, idx: int) -> 'Variant': ...
    def get_face_normal(self, idx: int) -> 'Vector3': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    
class MeshInstance2D(Node2D):
    mesh: 'Mesh'
    texture: 'Texture2D'
    texture_changed: Signal[Callable[[], None]]  # texture_changed()
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    
class MeshInstance3D(GeometryInstance3D):
    mesh: 'Mesh'
    skin: 'Skin'
    skeleton: 'NodePath'
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_skeleton_path(self, skeleton_path: 'NodePath') -> None: ...
    def get_skeleton_path(self) -> 'NodePath': ...
    def set_skin(self, skin: 'Skin') -> None: ...
    def get_skin(self) -> 'Skin': ...
    def get_skin_reference(self) -> 'SkinReference': ...
    def get_surface_override_material_count(self) -> int: ...
    def set_surface_override_material(self, surface: int, material: 'Material') -> None: ...
    def get_surface_override_material(self, surface: int) -> 'Material': ...
    def get_active_material(self, surface: int) -> 'Material': ...
    def create_trimesh_collision(self) -> None: ...
    def create_convex_collision(self, clean: bool = default('''true'''), simplify: bool = default('''false''')) -> None: ...
    def create_multiple_convex_collisions(self, settings: 'MeshConvexDecompositionSettings' = default('''null''')) -> None: ...
    def get_blend_shape_count(self) -> int: ...
    def find_blend_shape_by_name(self, name: 'StringName') -> int: ...
    def get_blend_shape_value(self, blend_shape_idx: int) -> float: ...
    def set_blend_shape_value(self, blend_shape_idx: int, value: float) -> None: ...
    def create_debug_tangents(self) -> None: ...
    def bake_mesh_from_current_blend_shape_mix(self, existing: 'ArrayMesh' = default('''null''')) -> 'ArrayMesh': ...
    def bake_mesh_from_current_skeleton_pose(self, existing: 'ArrayMesh' = default('''null''')) -> 'ArrayMesh': ...
    
class MeshLibrary(Resource):
    def create_item(self, id: int) -> None: ...
    def set_item_name(self, id: int, name: 'String') -> None: ...
    def set_item_mesh(self, id: int, mesh: 'Mesh') -> None: ...
    def set_item_mesh_transform(self, id: int, mesh_transform: 'Transform3D') -> None: ...
    def set_item_mesh_cast_shadow(self, id: int, shadow_casting_setting: 'RenderingServer_ShadowCastingSetting') -> None: ...
    def set_item_navigation_mesh(self, id: int, navigation_mesh: 'NavigationMesh') -> None: ...
    def set_item_navigation_mesh_transform(self, id: int, navigation_mesh: 'Transform3D') -> None: ...
    def set_item_navigation_layers(self, id: int, navigation_layers: int) -> None: ...
    def set_item_shapes(self, id: int, shapes: 'Array') -> None: ...
    def set_item_preview(self, id: int, texture: 'Texture2D') -> None: ...
    def get_item_name(self, id: int) -> 'String': ...
    def get_item_mesh(self, id: int) -> 'Mesh': ...
    def get_item_mesh_transform(self, id: int) -> 'Transform3D': ...
    def get_item_mesh_cast_shadow(self, id: int) -> 'RenderingServer_ShadowCastingSetting': ...
    def get_item_navigation_mesh(self, id: int) -> 'NavigationMesh': ...
    def get_item_navigation_mesh_transform(self, id: int) -> 'Transform3D': ...
    def get_item_navigation_layers(self, id: int) -> int: ...
    def get_item_shapes(self, id: int) -> 'Array': ...
    def get_item_preview(self, id: int) -> 'Texture2D': ...
    def remove_item(self, id: int) -> None: ...
    def find_item_by_name(self, name: 'String') -> int: ...
    def clear(self) -> None: ...
    def get_item_list(self) -> 'PackedInt32Array': ...
    def get_last_unused_item_id(self) -> int: ...
    
class MeshTexture(Texture2D):
    mesh: 'Mesh'
    base_texture: 'Texture2D'
    image_size: 'Vector2'
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_image_size(self, size: 'Vector2') -> None: ...
    def get_image_size(self) -> 'Vector2': ...
    def set_base_texture(self, texture: 'Texture2D') -> None: ...
    def get_base_texture(self) -> 'Texture2D': ...
    
class MethodTweener(Tweener):
    def set_delay(self, delay: float) -> 'MethodTweener': ...
    def set_trans(self, trans: 'Tween_TransitionType') -> 'MethodTweener': ...
    def set_ease(self, ease: 'Tween_EaseType') -> 'MethodTweener': ...
    
class MissingNode(Node):
    original_class: 'String'
    original_scene: 'String'
    recording_properties: bool
    def set_original_class(self, name: 'String') -> None: ...
    def get_original_class(self) -> 'String': ...
    def set_original_scene(self, name: 'String') -> None: ...
    def get_original_scene(self) -> 'String': ...
    def set_recording_properties(self, enable: bool) -> None: ...
    def is_recording_properties(self) -> bool: ...
    
class MissingResource(Resource):
    original_class: 'String'
    recording_properties: bool
    def set_original_class(self, name: 'String') -> None: ...
    def get_original_class(self) -> 'String': ...
    def set_recording_properties(self, enable: bool) -> None: ...
    def is_recording_properties(self) -> bool: ...
    
class MobileVRInterface(XRInterface):
    eye_height: float
    iod: float
    display_width: float
    display_to_lens: float
    offset_rect: 'Rect2'
    oversample: float
    k1: float
    k2: float
    vrs_min_radius: float
    vrs_strength: float
    def set_eye_height(self, eye_height: float) -> None: ...
    def get_eye_height(self) -> float: ...
    def set_iod(self, iod: float) -> None: ...
    def get_iod(self) -> float: ...
    def set_display_width(self, display_width: float) -> None: ...
    def get_display_width(self) -> float: ...
    def set_display_to_lens(self, display_to_lens: float) -> None: ...
    def get_display_to_lens(self) -> float: ...
    def set_offset_rect(self, offset_rect: 'Rect2') -> None: ...
    def get_offset_rect(self) -> 'Rect2': ...
    def set_oversample(self, oversample: float) -> None: ...
    def get_oversample(self) -> float: ...
    def set_k1(self, k: float) -> None: ...
    def get_k1(self) -> float: ...
    def set_k2(self, k: float) -> None: ...
    def get_k2(self) -> float: ...
    def get_vrs_min_radius(self) -> float: ...
    def set_vrs_min_radius(self, radius: float) -> None: ...
    def get_vrs_strength(self) -> float: ...
    def set_vrs_strength(self, strength: float) -> None: ...
    
class MovieWriter(Object):
    def _get_audio_mix_rate(self) -> int: ...
    def _get_audio_speaker_mode(self) -> 'AudioServer_SpeakerMode': ...
    def _handles_file(self, path: 'String') -> bool: ...
    def _write_begin(self, movie_size: 'Vector2i', fps: int, base_path: 'String') -> 'Error': ...
    def _write_frame(self, frame_image: 'Image', audio_frame_block: 'intptr') -> 'Error': ...
    def _write_end(self) -> None: ...
    @staticmethod
    def add_writer(writer: 'MovieWriter') -> None: ...
    
class MultiMesh(Resource):
    transform_format: int
    use_colors: bool
    use_custom_data: bool
    custom_aabb: 'AABB'
    instance_count: int
    visible_instance_count: int
    mesh: 'Mesh'
    buffer: 'PackedFloat32Array'
    transform_array: 'PackedVector3Array'
    transform_2d_array: 'PackedVector2Array'
    color_array: 'PackedColorArray'
    custom_data_array: 'PackedColorArray'
    physics_interpolation_quality: int
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_use_colors(self, enable: bool) -> None: ...
    def is_using_colors(self) -> bool: ...
    def set_use_custom_data(self, enable: bool) -> None: ...
    def is_using_custom_data(self) -> bool: ...
    def set_transform_format(self, format: 'MultiMesh_TransformFormat') -> None: ...
    def get_transform_format(self) -> 'MultiMesh_TransformFormat': ...
    def set_instance_count(self, count: int) -> None: ...
    def get_instance_count(self) -> int: ...
    def set_visible_instance_count(self, count: int) -> None: ...
    def get_visible_instance_count(self) -> int: ...
    def set_physics_interpolation_quality(self, quality: 'MultiMesh_PhysicsInterpolationQuality') -> None: ...
    def get_physics_interpolation_quality(self) -> 'MultiMesh_PhysicsInterpolationQuality': ...
    def set_instance_transform(self, instance: int, transform: 'Transform3D') -> None: ...
    def set_instance_transform_2d(self, instance: int, transform: 'Transform2D') -> None: ...
    def get_instance_transform(self, instance: int) -> 'Transform3D': ...
    def get_instance_transform_2d(self, instance: int) -> 'Transform2D': ...
    def set_instance_color(self, instance: int, color: 'Color') -> None: ...
    def get_instance_color(self, instance: int) -> 'Color': ...
    def set_instance_custom_data(self, instance: int, custom_data: 'Color') -> None: ...
    def get_instance_custom_data(self, instance: int) -> 'Color': ...
    def reset_instance_physics_interpolation(self, instance: int) -> None: ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    def get_aabb(self) -> 'AABB': ...
    def get_buffer(self) -> 'PackedFloat32Array': ...
    def set_buffer(self, buffer: 'PackedFloat32Array') -> None: ...
    def set_buffer_interpolated(self, buffer_curr: 'PackedFloat32Array', buffer_prev: 'PackedFloat32Array') -> None: ...
    
class MultiMesh_TransformFormat(Enum):
    TRANSFORM_2D = 0
    TRANSFORM_3D = 1

class MultiMesh_PhysicsInterpolationQuality(Enum):
    INTERP_QUALITY_FAST = 0
    INTERP_QUALITY_HIGH = 1

class MultiMeshInstance2D(Node2D):
    multimesh: 'MultiMesh'
    texture: 'Texture2D'
    texture_changed: Signal[Callable[[], None]]  # texture_changed()
    def set_multimesh(self, multimesh: 'MultiMesh') -> None: ...
    def get_multimesh(self) -> 'MultiMesh': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    
class MultiMeshInstance3D(GeometryInstance3D):
    multimesh: 'MultiMesh'
    def set_multimesh(self, multimesh: 'MultiMesh') -> None: ...
    def get_multimesh(self) -> 'MultiMesh': ...
    
class MultiplayerAPI(RefCounted):
    multiplayer_peer: 'MultiplayerPeer'
    peer_connected: Signal[Callable[['int'], None]]  # peer_connected(id: int)
    peer_disconnected: Signal[Callable[['int'], None]]  # peer_disconnected(id: int)
    connected_to_server: Signal[Callable[[], None]]  # connected_to_server()
    connection_failed: Signal[Callable[[], None]]  # connection_failed()
    server_disconnected: Signal[Callable[[], None]]  # server_disconnected()
    def has_multiplayer_peer(self) -> bool: ...
    def get_multiplayer_peer(self) -> 'MultiplayerPeer': ...
    def set_multiplayer_peer(self, peer: 'MultiplayerPeer') -> None: ...
    def get_unique_id(self) -> int: ...
    def is_server(self) -> bool: ...
    def get_remote_sender_id(self) -> int: ...
    def poll(self) -> 'Error': ...
    def rpc(self, peer: int, object: 'Object', method: 'StringName', arguments: 'Array' = default('''[]''')) -> 'Error': ...
    def object_configuration_add(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    def object_configuration_remove(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    def get_peers(self) -> 'PackedInt32Array': ...
    @staticmethod
    def set_default_interface(interface_name: 'StringName') -> None: ...
    @staticmethod
    def get_default_interface() -> 'StringName': ...
    @staticmethod
    def create_default_interface() -> 'MultiplayerAPI': ...
    
class MultiplayerAPI_RPCMode(Enum):
    RPC_MODE_DISABLED = 0
    RPC_MODE_ANY_PEER = 1
    RPC_MODE_AUTHORITY = 2

class MultiplayerAPIExtension(MultiplayerAPI):
    def _poll(self) -> 'Error': ...
    def _set_multiplayer_peer(self, multiplayer_peer: 'MultiplayerPeer') -> None: ...
    def _get_multiplayer_peer(self) -> 'MultiplayerPeer': ...
    def _get_unique_id(self) -> int: ...
    def _get_peer_ids(self) -> 'PackedInt32Array': ...
    def _rpc(self, peer: int, object: 'Object', method: 'StringName', args: 'Array') -> 'Error': ...
    def _get_remote_sender_id(self) -> int: ...
    def _object_configuration_add(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    def _object_configuration_remove(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    
class MultiplayerPeer(PacketPeer):
    refuse_new_connections: bool
    transfer_mode: int
    transfer_channel: int
    TARGET_PEER_BROADCAST = 0
    TARGET_PEER_SERVER = 1
    
    peer_connected: Signal[Callable[['int'], None]]  # peer_connected(id: int)
    peer_disconnected: Signal[Callable[['int'], None]]  # peer_disconnected(id: int)
    def set_transfer_channel(self, channel: int) -> None: ...
    def get_transfer_channel(self) -> int: ...
    def set_transfer_mode(self, mode: 'MultiplayerPeer_TransferMode') -> None: ...
    def get_transfer_mode(self) -> 'MultiplayerPeer_TransferMode': ...
    def set_target_peer(self, id: int) -> None: ...
    def get_packet_peer(self) -> int: ...
    def get_packet_channel(self) -> int: ...
    def get_packet_mode(self) -> 'MultiplayerPeer_TransferMode': ...
    def poll(self) -> None: ...
    def close(self) -> None: ...
    def disconnect_peer(self, peer: int, force: bool = default('''false''')) -> None: ...
    def get_connection_status(self) -> 'MultiplayerPeer_ConnectionStatus': ...
    def get_unique_id(self) -> int: ...
    def generate_unique_id(self) -> int: ...
    def set_refuse_new_connections(self, enable: bool) -> None: ...
    def is_refusing_new_connections(self) -> bool: ...
    def is_server_relay_supported(self) -> bool: ...
    
class MultiplayerPeer_ConnectionStatus(Enum):
    CONNECTION_DISCONNECTED = 0
    CONNECTION_CONNECTING = 1
    CONNECTION_CONNECTED = 2

class MultiplayerPeer_TransferMode(Enum):
    TRANSFER_MODE_UNRELIABLE = 0
    TRANSFER_MODE_UNRELIABLE_ORDERED = 1
    TRANSFER_MODE_RELIABLE = 2

class MultiplayerPeerExtension(MultiplayerPeer):
    def _get_packet(self, r_buffer: 'intptr', r_buffer_size: 'intptr') -> 'Error': ...
    def _put_packet(self, p_buffer: 'intptr', p_buffer_size: int) -> 'Error': ...
    def _get_available_packet_count(self) -> int: ...
    def _get_max_packet_size(self) -> int: ...
    def _get_packet_script(self) -> 'PackedByteArray': ...
    def _put_packet_script(self, p_buffer: 'PackedByteArray') -> 'Error': ...
    def _get_packet_channel(self) -> int: ...
    def _get_packet_mode(self) -> 'MultiplayerPeer_TransferMode': ...
    def _set_transfer_channel(self, p_channel: int) -> None: ...
    def _get_transfer_channel(self) -> int: ...
    def _set_transfer_mode(self, p_mode: 'MultiplayerPeer_TransferMode') -> None: ...
    def _get_transfer_mode(self) -> 'MultiplayerPeer_TransferMode': ...
    def _set_target_peer(self, p_peer: int) -> None: ...
    def _get_packet_peer(self) -> int: ...
    def _is_server(self) -> bool: ...
    def _poll(self) -> None: ...
    def _close(self) -> None: ...
    def _disconnect_peer(self, p_peer: int, p_force: bool) -> None: ...
    def _get_unique_id(self) -> int: ...
    def _set_refuse_new_connections(self, p_enable: bool) -> None: ...
    def _is_refusing_new_connections(self) -> bool: ...
    def _is_server_relay_supported(self) -> bool: ...
    def _get_connection_status(self) -> 'MultiplayerPeer_ConnectionStatus': ...
    
class MultiplayerSpawner(Node):
    spawn_path: 'NodePath'
    spawn_limit: int
    spawn_function: 'Callable'
    despawned: Signal[Callable[['Node'], None]]  # despawned(node: 'Node')
    spawned: Signal[Callable[['Node'], None]]  # spawned(node: 'Node')
    def add_spawnable_scene(self, path: 'String') -> None: ...
    def get_spawnable_scene_count(self) -> int: ...
    def get_spawnable_scene(self, index: int) -> 'String': ...
    def clear_spawnable_scenes(self) -> None: ...
    def spawn(self, data: 'Variant' = default('''null''')) -> 'Node': ...
    def get_spawn_path(self) -> 'NodePath': ...
    def set_spawn_path(self, path: 'NodePath') -> None: ...
    def get_spawn_limit(self) -> int: ...
    def set_spawn_limit(self, limit: int) -> None: ...
    def get_spawn_function(self) -> 'Callable': ...
    def set_spawn_function(self, spawn_function: 'Callable') -> None: ...
    
class MultiplayerSynchronizer(Node):
    root_path: 'NodePath'
    replication_interval: float
    delta_interval: float
    replication_config: 'SceneReplicationConfig'
    visibility_update_mode: int
    public_visibility: bool
    synchronized: Signal[Callable[[], None]]  # synchronized()
    delta_synchronized: Signal[Callable[[], None]]  # delta_synchronized()
    visibility_changed: Signal[Callable[['int'], None]]  # visibility_changed(for_peer: int)
    def set_root_path(self, path: 'NodePath') -> None: ...
    def get_root_path(self) -> 'NodePath': ...
    def set_replication_interval(self, milliseconds: float) -> None: ...
    def get_replication_interval(self) -> float: ...
    def set_delta_interval(self, milliseconds: float) -> None: ...
    def get_delta_interval(self) -> float: ...
    def set_replication_config(self, config: 'SceneReplicationConfig') -> None: ...
    def get_replication_config(self) -> 'SceneReplicationConfig': ...
    def set_visibility_update_mode(self, mode: 'MultiplayerSynchronizer_VisibilityUpdateMode') -> None: ...
    def get_visibility_update_mode(self) -> 'MultiplayerSynchronizer_VisibilityUpdateMode': ...
    def update_visibility(self, for_peer: int = default('''0''')) -> None: ...
    def set_visibility_public(self, visible: bool) -> None: ...
    def is_visibility_public(self) -> bool: ...
    def add_visibility_filter(self, filter: 'Callable') -> None: ...
    def remove_visibility_filter(self, filter: 'Callable') -> None: ...
    def set_visibility_for(self, peer: int, visible: bool) -> None: ...
    def get_visibility_for(self, peer: int) -> bool: ...
    
class MultiplayerSynchronizer_VisibilityUpdateMode(Enum):
    VISIBILITY_PROCESS_IDLE = 0
    VISIBILITY_PROCESS_PHYSICS = 1
    VISIBILITY_PROCESS_NONE = 2

class Mutex(RefCounted):
    def lock(self) -> None: ...
    def try_lock(self) -> bool: ...
    def unlock(self) -> None: ...
    
class NativeMenu(Object):
    def has_feature(self, feature: 'NativeMenu_Feature') -> bool: ...
    def has_system_menu(self, menu_id: 'NativeMenu_SystemMenus') -> bool: ...
    def get_system_menu(self, menu_id: 'NativeMenu_SystemMenus') -> 'RID': ...
    def get_system_menu_name(self, menu_id: 'NativeMenu_SystemMenus') -> 'String': ...
    def create_menu(self) -> 'RID': ...
    def has_menu(self, rid: 'RID') -> bool: ...
    def free_menu(self, rid: 'RID') -> None: ...
    def get_size(self, rid: 'RID') -> 'Vector2': ...
    def popup(self, rid: 'RID', position: 'Vector2i') -> None: ...
    def set_interface_direction(self, rid: 'RID', is_rtl: bool) -> None: ...
    def set_popup_open_callback(self, rid: 'RID', callback: 'Callable') -> None: ...
    def get_popup_open_callback(self, rid: 'RID') -> 'Callable': ...
    def set_popup_close_callback(self, rid: 'RID', callback: 'Callable') -> None: ...
    def get_popup_close_callback(self, rid: 'RID') -> 'Callable': ...
    def set_minimum_width(self, rid: 'RID', width: float) -> None: ...
    def get_minimum_width(self, rid: 'RID') -> float: ...
    def is_opened(self, rid: 'RID') -> bool: ...
    def add_submenu_item(self, rid: 'RID', label: 'String', submenu_rid: 'RID', tag: 'Variant' = default('''null'''), index: int = default('''-1''')) -> int: ...
    def add_item(self, rid: 'RID', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_check_item(self, rid: 'RID', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_icon_item(self, rid: 'RID', icon: 'Texture2D', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_icon_check_item(self, rid: 'RID', icon: 'Texture2D', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_radio_check_item(self, rid: 'RID', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_icon_radio_check_item(self, rid: 'RID', icon: 'Texture2D', label: 'String', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_multistate_item(self, rid: 'RID', label: 'String', max_states: int, default_state: int, callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = default('''0'''), index: int = default('''-1''')) -> int: ...
    def add_separator(self, rid: 'RID', index: int = default('''-1''')) -> int: ...
    def find_item_index_with_text(self, rid: 'RID', text: 'String') -> int: ...
    def find_item_index_with_tag(self, rid: 'RID', tag: 'Variant') -> int: ...
    def find_item_index_with_submenu(self, rid: 'RID', submenu_rid: 'RID') -> int: ...
    def is_item_checked(self, rid: 'RID', idx: int) -> bool: ...
    def is_item_checkable(self, rid: 'RID', idx: int) -> bool: ...
    def is_item_radio_checkable(self, rid: 'RID', idx: int) -> bool: ...
    def get_item_callback(self, rid: 'RID', idx: int) -> 'Callable': ...
    def get_item_key_callback(self, rid: 'RID', idx: int) -> 'Callable': ...
    def get_item_tag(self, rid: 'RID', idx: int) -> 'Variant': ...
    def get_item_text(self, rid: 'RID', idx: int) -> 'String': ...
    def get_item_submenu(self, rid: 'RID', idx: int) -> 'RID': ...
    def get_item_accelerator(self, rid: 'RID', idx: int) -> 'Key': ...
    def is_item_disabled(self, rid: 'RID', idx: int) -> bool: ...
    def is_item_hidden(self, rid: 'RID', idx: int) -> bool: ...
    def get_item_tooltip(self, rid: 'RID', idx: int) -> 'String': ...
    def get_item_state(self, rid: 'RID', idx: int) -> int: ...
    def get_item_max_states(self, rid: 'RID', idx: int) -> int: ...
    def get_item_icon(self, rid: 'RID', idx: int) -> 'Texture2D': ...
    def get_item_indentation_level(self, rid: 'RID', idx: int) -> int: ...
    def set_item_checked(self, rid: 'RID', idx: int, checked: bool) -> None: ...
    def set_item_checkable(self, rid: 'RID', idx: int, checkable: bool) -> None: ...
    def set_item_radio_checkable(self, rid: 'RID', idx: int, checkable: bool) -> None: ...
    def set_item_callback(self, rid: 'RID', idx: int, callback: 'Callable') -> None: ...
    def set_item_hover_callbacks(self, rid: 'RID', idx: int, callback: 'Callable') -> None: ...
    def set_item_key_callback(self, rid: 'RID', idx: int, key_callback: 'Callable') -> None: ...
    def set_item_tag(self, rid: 'RID', idx: int, tag: 'Variant') -> None: ...
    def set_item_text(self, rid: 'RID', idx: int, text: 'String') -> None: ...
    def set_item_submenu(self, rid: 'RID', idx: int, submenu_rid: 'RID') -> None: ...
    def set_item_accelerator(self, rid: 'RID', idx: int, keycode: 'Key') -> None: ...
    def set_item_disabled(self, rid: 'RID', idx: int, disabled: bool) -> None: ...
    def set_item_hidden(self, rid: 'RID', idx: int, hidden: bool) -> None: ...
    def set_item_tooltip(self, rid: 'RID', idx: int, tooltip: 'String') -> None: ...
    def set_item_state(self, rid: 'RID', idx: int, state: int) -> None: ...
    def set_item_max_states(self, rid: 'RID', idx: int, max_states: int) -> None: ...
    def set_item_icon(self, rid: 'RID', idx: int, icon: 'Texture2D') -> None: ...
    def set_item_indentation_level(self, rid: 'RID', idx: int, level: int) -> None: ...
    def get_item_count(self, rid: 'RID') -> int: ...
    def is_system_menu(self, rid: 'RID') -> bool: ...
    def remove_item(self, rid: 'RID', idx: int) -> None: ...
    def clear(self, rid: 'RID') -> None: ...
    
class NativeMenu_Feature(Enum):
    FEATURE_GLOBAL_MENU = 0
    FEATURE_POPUP_MENU = 1
    FEATURE_OPEN_CLOSE_CALLBACK = 2
    FEATURE_HOVER_CALLBACK = 3
    FEATURE_KEY_CALLBACK = 4

class NativeMenu_SystemMenus(Enum):
    INVALID_MENU_ID = 0
    MAIN_MENU_ID = 1
    APPLICATION_MENU_ID = 2
    WINDOW_MENU_ID = 3
    HELP_MENU_ID = 4
    DOCK_MENU_ID = 5

class NavigationAgent2D(Node):
    target_position: 'Vector2'
    path_desired_distance: float
    target_desired_distance: float
    path_max_distance: float
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    path_metadata_flags: int
    simplify_path: bool
    simplify_epsilon: float
    avoidance_enabled: bool
    velocity: 'Vector2'
    radius: float
    neighbor_distance: float
    max_neighbors: int
    time_horizon_agents: float
    time_horizon_obstacles: float
    max_speed: float
    avoidance_layers: int
    avoidance_mask: int
    avoidance_priority: float
    debug_enabled: bool
    debug_use_custom: bool
    debug_path_custom_color: 'Color'
    debug_path_custom_point_size: float
    debug_path_custom_line_width: float
    path_changed: Signal[Callable[[], None]]  # path_changed()
    target_reached: Signal[Callable[[], None]]  # target_reached()
    waypoint_reached: Signal[Callable[['Dictionary'], None]]  # waypoint_reached(details: 'Dictionary')
    link_reached: Signal[Callable[['Dictionary'], None]]  # link_reached(details: 'Dictionary')
    navigation_finished: Signal[Callable[[], None]]  # navigation_finished()
    velocity_computed: Signal[Callable[['Vector2'], None]]  # velocity_computed(safe_velocity: 'Vector2')
    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_path_desired_distance(self, desired_distance: float) -> None: ...
    def get_path_desired_distance(self) -> float: ...
    def set_target_desired_distance(self, desired_distance: float) -> None: ...
    def get_target_desired_distance(self) -> float: ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_neighbor_distance(self, neighbor_distance: float) -> None: ...
    def get_neighbor_distance(self) -> float: ...
    def set_max_neighbors(self, max_neighbors: int) -> None: ...
    def get_max_neighbors(self) -> int: ...
    def set_time_horizon_agents(self, time_horizon: float) -> None: ...
    def get_time_horizon_agents(self) -> float: ...
    def set_time_horizon_obstacles(self, time_horizon: float) -> None: ...
    def get_time_horizon_obstacles(self) -> float: ...
    def set_max_speed(self, max_speed: float) -> None: ...
    def get_max_speed(self) -> float: ...
    def set_path_max_distance(self, max_speed: float) -> None: ...
    def get_path_max_distance(self) -> float: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters2D_PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters2D_PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters2D_PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters2D_PathPostProcessing': ...
    def set_path_metadata_flags(self, flags: 'NavigationPathQueryParameters2D_PathMetadataFlags') -> None: ...
    def get_path_metadata_flags(self) -> 'NavigationPathQueryParameters2D_PathMetadataFlags': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_target_position(self, position: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def set_simplify_path(self, enabled: bool) -> None: ...
    def get_simplify_path(self) -> bool: ...
    def set_simplify_epsilon(self, epsilon: float) -> None: ...
    def get_simplify_epsilon(self) -> float: ...
    def get_next_path_position(self) -> 'Vector2': ...
    def set_velocity_forced(self, velocity: 'Vector2') -> None: ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def distance_to_target(self) -> float: ...
    def get_current_navigation_result(self) -> 'NavigationPathQueryResult2D': ...
    def get_current_navigation_path(self) -> 'PackedVector2Array': ...
    def get_current_navigation_path_index(self) -> int: ...
    def is_target_reached(self) -> bool: ...
    def is_target_reachable(self) -> bool: ...
    def is_navigation_finished(self) -> bool: ...
    def get_final_position(self) -> 'Vector2': ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_mask(self, mask: int) -> None: ...
    def get_avoidance_mask(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_avoidance_mask_value(self, mask_number: int, value: bool) -> None: ...
    def get_avoidance_mask_value(self, mask_number: int) -> bool: ...
    def set_avoidance_priority(self, priority: float) -> None: ...
    def get_avoidance_priority(self) -> float: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    def set_debug_use_custom(self, enabled: bool) -> None: ...
    def get_debug_use_custom(self) -> bool: ...
    def set_debug_path_custom_color(self, color: 'Color') -> None: ...
    def get_debug_path_custom_color(self) -> 'Color': ...
    def set_debug_path_custom_point_size(self, point_size: float) -> None: ...
    def get_debug_path_custom_point_size(self) -> float: ...
    def set_debug_path_custom_line_width(self, line_width: float) -> None: ...
    def get_debug_path_custom_line_width(self) -> float: ...
    
class NavigationAgent3D(Node):
    target_position: 'Vector3'
    path_desired_distance: float
    target_desired_distance: float
    path_height_offset: float
    path_max_distance: float
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    path_metadata_flags: int
    simplify_path: bool
    simplify_epsilon: float
    avoidance_enabled: bool
    velocity: 'Vector3'
    height: float
    radius: float
    neighbor_distance: float
    max_neighbors: int
    time_horizon_agents: float
    time_horizon_obstacles: float
    max_speed: float
    use_3d_avoidance: bool
    keep_y_velocity: bool
    avoidance_layers: int
    avoidance_mask: int
    avoidance_priority: float
    debug_enabled: bool
    debug_use_custom: bool
    debug_path_custom_color: 'Color'
    debug_path_custom_point_size: float
    path_changed: Signal[Callable[[], None]]  # path_changed()
    target_reached: Signal[Callable[[], None]]  # target_reached()
    waypoint_reached: Signal[Callable[['Dictionary'], None]]  # waypoint_reached(details: 'Dictionary')
    link_reached: Signal[Callable[['Dictionary'], None]]  # link_reached(details: 'Dictionary')
    navigation_finished: Signal[Callable[[], None]]  # navigation_finished()
    velocity_computed: Signal[Callable[['Vector3'], None]]  # velocity_computed(safe_velocity: 'Vector3')
    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_path_desired_distance(self, desired_distance: float) -> None: ...
    def get_path_desired_distance(self) -> float: ...
    def set_target_desired_distance(self, desired_distance: float) -> None: ...
    def get_target_desired_distance(self) -> float: ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_path_height_offset(self, path_height_offset: float) -> None: ...
    def get_path_height_offset(self) -> float: ...
    def set_use_3d_avoidance(self, enabled: bool) -> None: ...
    def get_use_3d_avoidance(self) -> bool: ...
    def set_keep_y_velocity(self, enabled: bool) -> None: ...
    def get_keep_y_velocity(self) -> bool: ...
    def set_neighbor_distance(self, neighbor_distance: float) -> None: ...
    def get_neighbor_distance(self) -> float: ...
    def set_max_neighbors(self, max_neighbors: int) -> None: ...
    def get_max_neighbors(self) -> int: ...
    def set_time_horizon_agents(self, time_horizon: float) -> None: ...
    def get_time_horizon_agents(self) -> float: ...
    def set_time_horizon_obstacles(self, time_horizon: float) -> None: ...
    def get_time_horizon_obstacles(self) -> float: ...
    def set_max_speed(self, max_speed: float) -> None: ...
    def get_max_speed(self) -> float: ...
    def set_path_max_distance(self, max_speed: float) -> None: ...
    def get_path_max_distance(self) -> float: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters3D_PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters3D_PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters3D_PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters3D_PathPostProcessing': ...
    def set_path_metadata_flags(self, flags: 'NavigationPathQueryParameters3D_PathMetadataFlags') -> None: ...
    def get_path_metadata_flags(self) -> 'NavigationPathQueryParameters3D_PathMetadataFlags': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_target_position(self, position: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def set_simplify_path(self, enabled: bool) -> None: ...
    def get_simplify_path(self) -> bool: ...
    def set_simplify_epsilon(self, epsilon: float) -> None: ...
    def get_simplify_epsilon(self) -> float: ...
    def get_next_path_position(self) -> 'Vector3': ...
    def set_velocity_forced(self, velocity: 'Vector3') -> None: ...
    def set_velocity(self, velocity: 'Vector3') -> None: ...
    def get_velocity(self) -> 'Vector3': ...
    def distance_to_target(self) -> float: ...
    def get_current_navigation_result(self) -> 'NavigationPathQueryResult3D': ...
    def get_current_navigation_path(self) -> 'PackedVector3Array': ...
    def get_current_navigation_path_index(self) -> int: ...
    def is_target_reached(self) -> bool: ...
    def is_target_reachable(self) -> bool: ...
    def is_navigation_finished(self) -> bool: ...
    def get_final_position(self) -> 'Vector3': ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_mask(self, mask: int) -> None: ...
    def get_avoidance_mask(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_avoidance_mask_value(self, mask_number: int, value: bool) -> None: ...
    def get_avoidance_mask_value(self, mask_number: int) -> bool: ...
    def set_avoidance_priority(self, priority: float) -> None: ...
    def get_avoidance_priority(self) -> float: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    def set_debug_use_custom(self, enabled: bool) -> None: ...
    def get_debug_use_custom(self) -> bool: ...
    def set_debug_path_custom_color(self, color: 'Color') -> None: ...
    def get_debug_path_custom_color(self) -> 'Color': ...
    def set_debug_path_custom_point_size(self, point_size: float) -> None: ...
    def get_debug_path_custom_point_size(self) -> float: ...
    
class NavigationLink2D(Node2D):
    enabled: bool
    bidirectional: bool
    navigation_layers: int
    start_position: 'Vector2'
    end_position: 'Vector2'
    enter_cost: float
    travel_cost: float
    def get_rid(self) -> 'RID': ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_bidirectional(self, bidirectional: bool) -> None: ...
    def is_bidirectional(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_start_position(self, position: 'Vector2') -> None: ...
    def get_start_position(self) -> 'Vector2': ...
    def set_end_position(self, position: 'Vector2') -> None: ...
    def get_end_position(self) -> 'Vector2': ...
    def set_global_start_position(self, position: 'Vector2') -> None: ...
    def get_global_start_position(self) -> 'Vector2': ...
    def set_global_end_position(self, position: 'Vector2') -> None: ...
    def get_global_end_position(self) -> 'Vector2': ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...
    
class NavigationLink3D(Node3D):
    enabled: bool
    bidirectional: bool
    navigation_layers: int
    start_position: 'Vector3'
    end_position: 'Vector3'
    enter_cost: float
    travel_cost: float
    def get_rid(self) -> 'RID': ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_bidirectional(self, bidirectional: bool) -> None: ...
    def is_bidirectional(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def set_start_position(self, position: 'Vector3') -> None: ...
    def get_start_position(self) -> 'Vector3': ...
    def set_end_position(self, position: 'Vector3') -> None: ...
    def get_end_position(self) -> 'Vector3': ...
    def set_global_start_position(self, position: 'Vector3') -> None: ...
    def get_global_start_position(self) -> 'Vector3': ...
    def set_global_end_position(self, position: 'Vector3') -> None: ...
    def get_global_end_position(self) -> 'Vector3': ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...
    
class NavigationMesh(Resource):
    vertices: 'PackedVector3Array'
    polygons: 'Array'
    sample_partition_type: int
    geometry_parsed_geometry_type: int
    geometry_collision_mask: int
    geometry_source_geometry_mode: int
    geometry_source_group_name: 'String'
    cell_size: float
    cell_height: float
    border_size: float
    agent_height: float
    agent_radius: float
    agent_max_climb: float
    agent_max_slope: float
    region_min_size: float
    region_merge_size: float
    edge_max_length: float
    edge_max_error: float
    vertices_per_polygon: float
    detail_sample_distance: float
    detail_sample_max_error: float
    filter_low_hanging_obstacles: bool
    filter_ledge_spans: bool
    filter_walkable_low_height_spans: bool
    filter_baking_aabb: 'AABB'
    filter_baking_aabb_offset: 'Vector3'
    def set_sample_partition_type(self, sample_partition_type: 'NavigationMesh_SamplePartitionType') -> None: ...
    def get_sample_partition_type(self) -> 'NavigationMesh_SamplePartitionType': ...
    def set_parsed_geometry_type(self, geometry_type: 'NavigationMesh_ParsedGeometryType') -> None: ...
    def get_parsed_geometry_type(self) -> 'NavigationMesh_ParsedGeometryType': ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_source_geometry_mode(self, mask: 'NavigationMesh_SourceGeometryMode') -> None: ...
    def get_source_geometry_mode(self) -> 'NavigationMesh_SourceGeometryMode': ...
    def set_source_group_name(self, mask: 'StringName') -> None: ...
    def get_source_group_name(self) -> 'StringName': ...
    def set_cell_size(self, cell_size: float) -> None: ...
    def get_cell_size(self) -> float: ...
    def set_cell_height(self, cell_height: float) -> None: ...
    def get_cell_height(self) -> float: ...
    def set_border_size(self, border_size: float) -> None: ...
    def get_border_size(self) -> float: ...
    def set_agent_height(self, agent_height: float) -> None: ...
    def get_agent_height(self) -> float: ...
    def set_agent_radius(self, agent_radius: float) -> None: ...
    def get_agent_radius(self) -> float: ...
    def set_agent_max_climb(self, agent_max_climb: float) -> None: ...
    def get_agent_max_climb(self) -> float: ...
    def set_agent_max_slope(self, agent_max_slope: float) -> None: ...
    def get_agent_max_slope(self) -> float: ...
    def set_region_min_size(self, region_min_size: float) -> None: ...
    def get_region_min_size(self) -> float: ...
    def set_region_merge_size(self, region_merge_size: float) -> None: ...
    def get_region_merge_size(self) -> float: ...
    def set_edge_max_length(self, edge_max_length: float) -> None: ...
    def get_edge_max_length(self) -> float: ...
    def set_edge_max_error(self, edge_max_error: float) -> None: ...
    def get_edge_max_error(self) -> float: ...
    def set_vertices_per_polygon(self, vertices_per_polygon: float) -> None: ...
    def get_vertices_per_polygon(self) -> float: ...
    def set_detail_sample_distance(self, detail_sample_dist: float) -> None: ...
    def get_detail_sample_distance(self) -> float: ...
    def set_detail_sample_max_error(self, detail_sample_max_error: float) -> None: ...
    def get_detail_sample_max_error(self) -> float: ...
    def set_filter_low_hanging_obstacles(self, filter_low_hanging_obstacles: bool) -> None: ...
    def get_filter_low_hanging_obstacles(self) -> bool: ...
    def set_filter_ledge_spans(self, filter_ledge_spans: bool) -> None: ...
    def get_filter_ledge_spans(self) -> bool: ...
    def set_filter_walkable_low_height_spans(self, filter_walkable_low_height_spans: bool) -> None: ...
    def get_filter_walkable_low_height_spans(self) -> bool: ...
    def set_filter_baking_aabb(self, baking_aabb: 'AABB') -> None: ...
    def get_filter_baking_aabb(self) -> 'AABB': ...
    def set_filter_baking_aabb_offset(self, baking_aabb_offset: 'Vector3') -> None: ...
    def get_filter_baking_aabb_offset(self) -> 'Vector3': ...
    def set_vertices(self, vertices: 'PackedVector3Array') -> None: ...
    def get_vertices(self) -> 'PackedVector3Array': ...
    def add_polygon(self, polygon: 'PackedInt32Array') -> None: ...
    def get_polygon_count(self) -> int: ...
    def get_polygon(self, idx: int) -> 'PackedInt32Array': ...
    def clear_polygons(self) -> None: ...
    def create_from_mesh(self, mesh: 'Mesh') -> None: ...
    def clear(self) -> None: ...
    
class NavigationMesh_SamplePartitionType(Enum):
    SAMPLE_PARTITION_WATERSHED = 0
    SAMPLE_PARTITION_MONOTONE = 1
    SAMPLE_PARTITION_LAYERS = 2
    SAMPLE_PARTITION_MAX = 3

class NavigationMesh_ParsedGeometryType(Enum):
    PARSED_GEOMETRY_MESH_INSTANCES = 0
    PARSED_GEOMETRY_STATIC_COLLIDERS = 1
    PARSED_GEOMETRY_BOTH = 2
    PARSED_GEOMETRY_MAX = 3

class NavigationMesh_SourceGeometryMode(Enum):
    SOURCE_GEOMETRY_ROOT_NODE_CHILDREN = 0
    SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN = 1
    SOURCE_GEOMETRY_GROUPS_EXPLICIT = 2
    SOURCE_GEOMETRY_MAX = 3

class NavigationMeshGenerator(Object):
    def bake(self, navigation_mesh: 'NavigationMesh', root_node: 'Node') -> None: ...
    def clear(self, navigation_mesh: 'NavigationMesh') -> None: ...
    def parse_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', root_node: 'Node', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    
class NavigationMeshSourceGeometryData2D(Resource):
    traversable_outlines: 'Array'
    obstruction_outlines: 'Array'
    projected_obstructions: 'Array'
    def clear(self) -> None: ...
    def has_data(self) -> bool: ...
    def set_traversable_outlines(self, traversable_outlines: 'list[PackedVector2Array]') -> None: ...
    def get_traversable_outlines(self) -> 'list[PackedVector2Array]': ...
    def set_obstruction_outlines(self, obstruction_outlines: 'list[PackedVector2Array]') -> None: ...
    def get_obstruction_outlines(self) -> 'list[PackedVector2Array]': ...
    def append_traversable_outlines(self, traversable_outlines: 'list[PackedVector2Array]') -> None: ...
    def append_obstruction_outlines(self, obstruction_outlines: 'list[PackedVector2Array]') -> None: ...
    def add_traversable_outline(self, shape_outline: 'PackedVector2Array') -> None: ...
    def add_obstruction_outline(self, shape_outline: 'PackedVector2Array') -> None: ...
    def merge(self, other_geometry: 'NavigationMeshSourceGeometryData2D') -> None: ...
    def add_projected_obstruction(self, vertices: 'PackedVector2Array', carve: bool) -> None: ...
    def clear_projected_obstructions(self) -> None: ...
    def set_projected_obstructions(self, projected_obstructions: 'Array') -> None: ...
    def get_projected_obstructions(self) -> 'Array': ...
    def get_bounds(self) -> 'Rect2': ...
    
class NavigationMeshSourceGeometryData3D(Resource):
    vertices: 'PackedVector3Array'
    indices: 'PackedInt32Array'
    projected_obstructions: 'Array'
    def set_vertices(self, vertices: 'PackedFloat32Array') -> None: ...
    def get_vertices(self) -> 'PackedFloat32Array': ...
    def set_indices(self, indices: 'PackedInt32Array') -> None: ...
    def get_indices(self) -> 'PackedInt32Array': ...
    def append_arrays(self, vertices: 'PackedFloat32Array', indices: 'PackedInt32Array') -> None: ...
    def clear(self) -> None: ...
    def has_data(self) -> bool: ...
    def add_mesh(self, mesh: 'Mesh', xform: 'Transform3D') -> None: ...
    def add_mesh_array(self, mesh_array: 'Array', xform: 'Transform3D') -> None: ...
    def add_faces(self, faces: 'PackedVector3Array', xform: 'Transform3D') -> None: ...
    def merge(self, other_geometry: 'NavigationMeshSourceGeometryData3D') -> None: ...
    def add_projected_obstruction(self, vertices: 'PackedVector3Array', elevation: float, height: float, carve: bool) -> None: ...
    def clear_projected_obstructions(self) -> None: ...
    def set_projected_obstructions(self, projected_obstructions: 'Array') -> None: ...
    def get_projected_obstructions(self) -> 'Array': ...
    def get_bounds(self) -> 'AABB': ...
    
class NavigationObstacle2D(Node2D):
    radius: float
    vertices: 'PackedVector2Array'
    affect_navigation_mesh: bool
    carve_navigation_mesh: bool
    avoidance_enabled: bool
    velocity: 'Vector2'
    avoidance_layers: int
    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_vertices(self, vertices: 'PackedVector2Array') -> None: ...
    def get_vertices(self) -> 'PackedVector2Array': ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_affect_navigation_mesh(self, enabled: bool) -> None: ...
    def get_affect_navigation_mesh(self) -> bool: ...
    def set_carve_navigation_mesh(self, enabled: bool) -> None: ...
    def get_carve_navigation_mesh(self) -> bool: ...
    
class NavigationObstacle3D(Node3D):
    radius: float
    height: float
    vertices: 'PackedVector3Array'
    affect_navigation_mesh: bool
    carve_navigation_mesh: bool
    avoidance_enabled: bool
    velocity: 'Vector3'
    avoidance_layers: int
    use_3d_avoidance: bool
    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: bool) -> None: ...
    def get_avoidance_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_velocity(self, velocity: 'Vector3') -> None: ...
    def get_velocity(self) -> 'Vector3': ...
    def set_vertices(self, vertices: 'PackedVector3Array') -> None: ...
    def get_vertices(self) -> 'PackedVector3Array': ...
    def set_avoidance_layers(self, layers: int) -> None: ...
    def get_avoidance_layers(self) -> int: ...
    def set_avoidance_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_avoidance_layer_value(self, layer_number: int) -> bool: ...
    def set_use_3d_avoidance(self, enabled: bool) -> None: ...
    def get_use_3d_avoidance(self) -> bool: ...
    def set_affect_navigation_mesh(self, enabled: bool) -> None: ...
    def get_affect_navigation_mesh(self) -> bool: ...
    def set_carve_navigation_mesh(self, enabled: bool) -> None: ...
    def get_carve_navigation_mesh(self) -> bool: ...
    
class NavigationPathQueryParameters2D(RefCounted):
    map: 'RID'
    start_position: 'Vector2'
    target_position: 'Vector2'
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    metadata_flags: int
    simplify_path: bool
    simplify_epsilon: float
    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters2D_PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters2D_PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters2D_PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters2D_PathPostProcessing': ...
    def set_map(self, map: 'RID') -> None: ...
    def get_map(self) -> 'RID': ...
    def set_start_position(self, start_position: 'Vector2') -> None: ...
    def get_start_position(self) -> 'Vector2': ...
    def set_target_position(self, target_position: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_metadata_flags(self, flags: 'NavigationPathQueryParameters2D_PathMetadataFlags') -> None: ...
    def get_metadata_flags(self) -> 'NavigationPathQueryParameters2D_PathMetadataFlags': ...
    def set_simplify_path(self, enabled: bool) -> None: ...
    def get_simplify_path(self) -> bool: ...
    def set_simplify_epsilon(self, epsilon: float) -> None: ...
    def get_simplify_epsilon(self) -> float: ...
    
class NavigationPathQueryParameters2D_PathfindingAlgorithm(Enum):
    PATHFINDING_ALGORITHM_ASTAR = 0

class NavigationPathQueryParameters2D_PathPostProcessing(Enum):
    PATH_POSTPROCESSING_CORRIDORFUNNEL = 0
    PATH_POSTPROCESSING_EDGECENTERED = 1
    PATH_POSTPROCESSING_NONE = 2

class NavigationPathQueryParameters2D_PathMetadataFlags(Enum):
    PATH_METADATA_INCLUDE_NONE = 0
    PATH_METADATA_INCLUDE_TYPES = 1
    PATH_METADATA_INCLUDE_RIDS = 2
    PATH_METADATA_INCLUDE_OWNERS = 4
    PATH_METADATA_INCLUDE_ALL = 7

class NavigationPathQueryParameters3D(RefCounted):
    map: 'RID'
    start_position: 'Vector3'
    target_position: 'Vector3'
    navigation_layers: int
    pathfinding_algorithm: int
    path_postprocessing: int
    metadata_flags: int
    simplify_path: bool
    simplify_epsilon: float
    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters3D_PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters3D_PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters3D_PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters3D_PathPostProcessing': ...
    def set_map(self, map: 'RID') -> None: ...
    def get_map(self) -> 'RID': ...
    def set_start_position(self, start_position: 'Vector3') -> None: ...
    def get_start_position(self) -> 'Vector3': ...
    def set_target_position(self, target_position: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_metadata_flags(self, flags: 'NavigationPathQueryParameters3D_PathMetadataFlags') -> None: ...
    def get_metadata_flags(self) -> 'NavigationPathQueryParameters3D_PathMetadataFlags': ...
    def set_simplify_path(self, enabled: bool) -> None: ...
    def get_simplify_path(self) -> bool: ...
    def set_simplify_epsilon(self, epsilon: float) -> None: ...
    def get_simplify_epsilon(self) -> float: ...
    
class NavigationPathQueryParameters3D_PathfindingAlgorithm(Enum):
    PATHFINDING_ALGORITHM_ASTAR = 0

class NavigationPathQueryParameters3D_PathPostProcessing(Enum):
    PATH_POSTPROCESSING_CORRIDORFUNNEL = 0
    PATH_POSTPROCESSING_EDGECENTERED = 1
    PATH_POSTPROCESSING_NONE = 2

class NavigationPathQueryParameters3D_PathMetadataFlags(Enum):
    PATH_METADATA_INCLUDE_NONE = 0
    PATH_METADATA_INCLUDE_TYPES = 1
    PATH_METADATA_INCLUDE_RIDS = 2
    PATH_METADATA_INCLUDE_OWNERS = 4
    PATH_METADATA_INCLUDE_ALL = 7

class NavigationPathQueryResult2D(RefCounted):
    path: 'PackedVector2Array'
    path_types: 'PackedInt32Array'
    path_rids: 'list[RID]'
    path_owner_ids: 'PackedInt64Array'
    def set_path(self, path: 'PackedVector2Array') -> None: ...
    def get_path(self) -> 'PackedVector2Array': ...
    def set_path_types(self, path_types: 'PackedInt32Array') -> None: ...
    def get_path_types(self) -> 'PackedInt32Array': ...
    def set_path_rids(self, path_rids: 'list[RID]') -> None: ...
    def get_path_rids(self) -> 'list[RID]': ...
    def set_path_owner_ids(self, path_owner_ids: 'PackedInt64Array') -> None: ...
    def get_path_owner_ids(self) -> 'PackedInt64Array': ...
    def reset(self) -> None: ...
    
class NavigationPathQueryResult2D_PathSegmentType(Enum):
    PATH_SEGMENT_TYPE_REGION = 0
    PATH_SEGMENT_TYPE_LINK = 1

class NavigationPathQueryResult3D(RefCounted):
    path: 'PackedVector3Array'
    path_types: 'PackedInt32Array'
    path_rids: 'list[RID]'
    path_owner_ids: 'PackedInt64Array'
    def set_path(self, path: 'PackedVector3Array') -> None: ...
    def get_path(self) -> 'PackedVector3Array': ...
    def set_path_types(self, path_types: 'PackedInt32Array') -> None: ...
    def get_path_types(self) -> 'PackedInt32Array': ...
    def set_path_rids(self, path_rids: 'list[RID]') -> None: ...
    def get_path_rids(self) -> 'list[RID]': ...
    def set_path_owner_ids(self, path_owner_ids: 'PackedInt64Array') -> None: ...
    def get_path_owner_ids(self) -> 'PackedInt64Array': ...
    def reset(self) -> None: ...
    
class NavigationPathQueryResult3D_PathSegmentType(Enum):
    PATH_SEGMENT_TYPE_REGION = 0
    PATH_SEGMENT_TYPE_LINK = 1

class NavigationPolygon(Resource):
    vertices: 'PackedVector2Array'
    polygons: 'Array'
    outlines: 'Array'
    sample_partition_type: int
    parsed_geometry_type: int
    parsed_collision_mask: int
    source_geometry_mode: int
    source_geometry_group_name: 'String'
    cell_size: float
    border_size: float
    agent_radius: float
    baking_rect: 'Rect2'
    baking_rect_offset: 'Vector2'
    def set_vertices(self, vertices: 'PackedVector2Array') -> None: ...
    def get_vertices(self) -> 'PackedVector2Array': ...
    def add_polygon(self, polygon: 'PackedInt32Array') -> None: ...
    def get_polygon_count(self) -> int: ...
    def get_polygon(self, idx: int) -> 'PackedInt32Array': ...
    def clear_polygons(self) -> None: ...
    def get_navigation_mesh(self) -> 'NavigationMesh': ...
    def add_outline(self, outline: 'PackedVector2Array') -> None: ...
    def add_outline_at_index(self, outline: 'PackedVector2Array', index: int) -> None: ...
    def get_outline_count(self) -> int: ...
    def set_outline(self, idx: int, outline: 'PackedVector2Array') -> None: ...
    def get_outline(self, idx: int) -> 'PackedVector2Array': ...
    def remove_outline(self, idx: int) -> None: ...
    def clear_outlines(self) -> None: ...
    def make_polygons_from_outlines(self) -> None: ...
    def set_cell_size(self, cell_size: float) -> None: ...
    def get_cell_size(self) -> float: ...
    def set_border_size(self, border_size: float) -> None: ...
    def get_border_size(self) -> float: ...
    def set_sample_partition_type(self, sample_partition_type: 'NavigationPolygon_SamplePartitionType') -> None: ...
    def get_sample_partition_type(self) -> 'NavigationPolygon_SamplePartitionType': ...
    def set_parsed_geometry_type(self, geometry_type: 'NavigationPolygon_ParsedGeometryType') -> None: ...
    def get_parsed_geometry_type(self) -> 'NavigationPolygon_ParsedGeometryType': ...
    def set_parsed_collision_mask(self, mask: int) -> None: ...
    def get_parsed_collision_mask(self) -> int: ...
    def set_parsed_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_parsed_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_source_geometry_mode(self, geometry_mode: 'NavigationPolygon_SourceGeometryMode') -> None: ...
    def get_source_geometry_mode(self) -> 'NavigationPolygon_SourceGeometryMode': ...
    def set_source_geometry_group_name(self, group_name: 'StringName') -> None: ...
    def get_source_geometry_group_name(self) -> 'StringName': ...
    def set_agent_radius(self, agent_radius: float) -> None: ...
    def get_agent_radius(self) -> float: ...
    def set_baking_rect(self, rect: 'Rect2') -> None: ...
    def get_baking_rect(self) -> 'Rect2': ...
    def set_baking_rect_offset(self, rect_offset: 'Vector2') -> None: ...
    def get_baking_rect_offset(self) -> 'Vector2': ...
    def clear(self) -> None: ...
    
class NavigationPolygon_SamplePartitionType(Enum):
    SAMPLE_PARTITION_CONVEX_PARTITION = 0
    SAMPLE_PARTITION_TRIANGULATE = 1
    SAMPLE_PARTITION_MAX = 2

class NavigationPolygon_ParsedGeometryType(Enum):
    PARSED_GEOMETRY_MESH_INSTANCES = 0
    PARSED_GEOMETRY_STATIC_COLLIDERS = 1
    PARSED_GEOMETRY_BOTH = 2
    PARSED_GEOMETRY_MAX = 3

class NavigationPolygon_SourceGeometryMode(Enum):
    SOURCE_GEOMETRY_ROOT_NODE_CHILDREN = 0
    SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN = 1
    SOURCE_GEOMETRY_GROUPS_EXPLICIT = 2
    SOURCE_GEOMETRY_MAX = 3

class NavigationRegion2D(Node2D):
    navigation_polygon: 'NavigationPolygon'
    enabled: bool
    use_edge_connections: bool
    navigation_layers: int
    enter_cost: float
    travel_cost: float
    navigation_polygon_changed: Signal[Callable[[], None]]  # navigation_polygon_changed()
    bake_finished: Signal[Callable[[], None]]  # bake_finished()
    def get_rid(self) -> 'RID': ...
    def set_navigation_polygon(self, navigation_polygon: 'NavigationPolygon') -> None: ...
    def get_navigation_polygon(self) -> 'NavigationPolygon': ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_use_edge_connections(self, enabled: bool) -> None: ...
    def get_use_edge_connections(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def get_region_rid(self) -> 'RID': ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...
    def bake_navigation_polygon(self, on_thread: bool = default('''true''')) -> None: ...
    def is_baking(self) -> bool: ...
    def get_bounds(self) -> 'Rect2': ...
    
class NavigationRegion3D(Node3D):
    navigation_mesh: 'NavigationMesh'
    enabled: bool
    use_edge_connections: bool
    navigation_layers: int
    enter_cost: float
    travel_cost: float
    navigation_mesh_changed: Signal[Callable[[], None]]  # navigation_mesh_changed()
    bake_finished: Signal[Callable[[], None]]  # bake_finished()
    def get_rid(self) -> 'RID': ...
    def set_navigation_mesh(self, navigation_mesh: 'NavigationMesh') -> None: ...
    def get_navigation_mesh(self) -> 'NavigationMesh': ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_use_edge_connections(self, enabled: bool) -> None: ...
    def get_use_edge_connections(self) -> bool: ...
    def set_navigation_layers(self, navigation_layers: int) -> None: ...
    def get_navigation_layers(self) -> int: ...
    def set_navigation_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_value(self, layer_number: int) -> bool: ...
    def get_region_rid(self) -> 'RID': ...
    def set_enter_cost(self, enter_cost: float) -> None: ...
    def get_enter_cost(self) -> float: ...
    def set_travel_cost(self, travel_cost: float) -> None: ...
    def get_travel_cost(self) -> float: ...
    def bake_navigation_mesh(self, on_thread: bool = default('''true''')) -> None: ...
    def is_baking(self) -> bool: ...
    def get_bounds(self) -> 'AABB': ...
    
class NavigationServer2D(Object):
    map_changed: Signal[Callable[['RID'], None]]  # map_changed(map: 'RID')
    navigation_debug_changed: Signal[Callable[[], None]]  # navigation_debug_changed()
    def get_maps(self) -> 'list[RID]': ...
    def map_create(self) -> 'RID': ...
    def map_set_active(self, map: 'RID', active: bool) -> None: ...
    def map_is_active(self, map: 'RID') -> bool: ...
    def map_set_cell_size(self, map: 'RID', cell_size: float) -> None: ...
    def map_get_cell_size(self, map: 'RID') -> float: ...
    def map_set_use_edge_connections(self, map: 'RID', enabled: bool) -> None: ...
    def map_get_use_edge_connections(self, map: 'RID') -> bool: ...
    def map_set_edge_connection_margin(self, map: 'RID', margin: float) -> None: ...
    def map_get_edge_connection_margin(self, map: 'RID') -> float: ...
    def map_set_link_connection_radius(self, map: 'RID', radius: float) -> None: ...
    def map_get_link_connection_radius(self, map: 'RID') -> float: ...
    def map_get_path(self, map: 'RID', origin: 'Vector2', destination: 'Vector2', optimize: bool, navigation_layers: int = default('''1''')) -> 'PackedVector2Array': ...
    def map_get_closest_point(self, map: 'RID', to_point: 'Vector2') -> 'Vector2': ...
    def map_get_closest_point_owner(self, map: 'RID', to_point: 'Vector2') -> 'RID': ...
    def map_get_links(self, map: 'RID') -> 'list[RID]': ...
    def map_get_regions(self, map: 'RID') -> 'list[RID]': ...
    def map_get_agents(self, map: 'RID') -> 'list[RID]': ...
    def map_get_obstacles(self, map: 'RID') -> 'list[RID]': ...
    def map_force_update(self, map: 'RID') -> None: ...
    def map_get_iteration_id(self, map: 'RID') -> int: ...
    def map_set_use_async_iterations(self, map: 'RID', enabled: bool) -> None: ...
    def map_get_use_async_iterations(self, map: 'RID') -> bool: ...
    def map_get_random_point(self, map: 'RID', navigation_layers: int, uniformly: bool) -> 'Vector2': ...
    def query_path(self, parameters: 'NavigationPathQueryParameters2D', result: 'NavigationPathQueryResult2D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def region_create(self) -> 'RID': ...
    def region_set_enabled(self, region: 'RID', enabled: bool) -> None: ...
    def region_get_enabled(self, region: 'RID') -> bool: ...
    def region_set_use_edge_connections(self, region: 'RID', enabled: bool) -> None: ...
    def region_get_use_edge_connections(self, region: 'RID') -> bool: ...
    def region_set_enter_cost(self, region: 'RID', enter_cost: float) -> None: ...
    def region_get_enter_cost(self, region: 'RID') -> float: ...
    def region_set_travel_cost(self, region: 'RID', travel_cost: float) -> None: ...
    def region_get_travel_cost(self, region: 'RID') -> float: ...
    def region_set_owner_id(self, region: 'RID', owner_id: int) -> None: ...
    def region_get_owner_id(self, region: 'RID') -> int: ...
    def region_owns_point(self, region: 'RID', point: 'Vector2') -> bool: ...
    def region_set_map(self, region: 'RID', map: 'RID') -> None: ...
    def region_get_map(self, region: 'RID') -> 'RID': ...
    def region_set_navigation_layers(self, region: 'RID', navigation_layers: int) -> None: ...
    def region_get_navigation_layers(self, region: 'RID') -> int: ...
    def region_set_transform(self, region: 'RID', transform: 'Transform2D') -> None: ...
    def region_get_transform(self, region: 'RID') -> 'Transform2D': ...
    def region_set_navigation_polygon(self, region: 'RID', navigation_polygon: 'NavigationPolygon') -> None: ...
    def region_get_connections_count(self, region: 'RID') -> int: ...
    def region_get_connection_pathway_start(self, region: 'RID', connection: int) -> 'Vector2': ...
    def region_get_connection_pathway_end(self, region: 'RID', connection: int) -> 'Vector2': ...
    def region_get_closest_point(self, region: 'RID', to_point: 'Vector2') -> 'Vector2': ...
    def region_get_random_point(self, region: 'RID', navigation_layers: int, uniformly: bool) -> 'Vector2': ...
    def region_get_bounds(self, region: 'RID') -> 'Rect2': ...
    def link_create(self) -> 'RID': ...
    def link_set_map(self, link: 'RID', map: 'RID') -> None: ...
    def link_get_map(self, link: 'RID') -> 'RID': ...
    def link_set_enabled(self, link: 'RID', enabled: bool) -> None: ...
    def link_get_enabled(self, link: 'RID') -> bool: ...
    def link_set_bidirectional(self, link: 'RID', bidirectional: bool) -> None: ...
    def link_is_bidirectional(self, link: 'RID') -> bool: ...
    def link_set_navigation_layers(self, link: 'RID', navigation_layers: int) -> None: ...
    def link_get_navigation_layers(self, link: 'RID') -> int: ...
    def link_set_start_position(self, link: 'RID', position: 'Vector2') -> None: ...
    def link_get_start_position(self, link: 'RID') -> 'Vector2': ...
    def link_set_end_position(self, link: 'RID', position: 'Vector2') -> None: ...
    def link_get_end_position(self, link: 'RID') -> 'Vector2': ...
    def link_set_enter_cost(self, link: 'RID', enter_cost: float) -> None: ...
    def link_get_enter_cost(self, link: 'RID') -> float: ...
    def link_set_travel_cost(self, link: 'RID', travel_cost: float) -> None: ...
    def link_get_travel_cost(self, link: 'RID') -> float: ...
    def link_set_owner_id(self, link: 'RID', owner_id: int) -> None: ...
    def link_get_owner_id(self, link: 'RID') -> int: ...
    def agent_create(self) -> 'RID': ...
    def agent_set_avoidance_enabled(self, agent: 'RID', enabled: bool) -> None: ...
    def agent_get_avoidance_enabled(self, agent: 'RID') -> bool: ...
    def agent_set_map(self, agent: 'RID', map: 'RID') -> None: ...
    def agent_get_map(self, agent: 'RID') -> 'RID': ...
    def agent_set_paused(self, agent: 'RID', paused: bool) -> None: ...
    def agent_get_paused(self, agent: 'RID') -> bool: ...
    def agent_set_neighbor_distance(self, agent: 'RID', distance: float) -> None: ...
    def agent_get_neighbor_distance(self, agent: 'RID') -> float: ...
    def agent_set_max_neighbors(self, agent: 'RID', count: int) -> None: ...
    def agent_get_max_neighbors(self, agent: 'RID') -> int: ...
    def agent_set_time_horizon_agents(self, agent: 'RID', time_horizon: float) -> None: ...
    def agent_get_time_horizon_agents(self, agent: 'RID') -> float: ...
    def agent_set_time_horizon_obstacles(self, agent: 'RID', time_horizon: float) -> None: ...
    def agent_get_time_horizon_obstacles(self, agent: 'RID') -> float: ...
    def agent_set_radius(self, agent: 'RID', radius: float) -> None: ...
    def agent_get_radius(self, agent: 'RID') -> float: ...
    def agent_set_max_speed(self, agent: 'RID', max_speed: float) -> None: ...
    def agent_get_max_speed(self, agent: 'RID') -> float: ...
    def agent_set_velocity_forced(self, agent: 'RID', velocity: 'Vector2') -> None: ...
    def agent_set_velocity(self, agent: 'RID', velocity: 'Vector2') -> None: ...
    def agent_get_velocity(self, agent: 'RID') -> 'Vector2': ...
    def agent_set_position(self, agent: 'RID', position: 'Vector2') -> None: ...
    def agent_get_position(self, agent: 'RID') -> 'Vector2': ...
    def agent_is_map_changed(self, agent: 'RID') -> bool: ...
    def agent_set_avoidance_callback(self, agent: 'RID', callback: 'Callable') -> None: ...
    def agent_has_avoidance_callback(self, agent: 'RID') -> bool: ...
    def agent_set_avoidance_layers(self, agent: 'RID', layers: int) -> None: ...
    def agent_get_avoidance_layers(self, agent: 'RID') -> int: ...
    def agent_set_avoidance_mask(self, agent: 'RID', mask: int) -> None: ...
    def agent_get_avoidance_mask(self, agent: 'RID') -> int: ...
    def agent_set_avoidance_priority(self, agent: 'RID', priority: float) -> None: ...
    def agent_get_avoidance_priority(self, agent: 'RID') -> float: ...
    def obstacle_create(self) -> 'RID': ...
    def obstacle_set_avoidance_enabled(self, obstacle: 'RID', enabled: bool) -> None: ...
    def obstacle_get_avoidance_enabled(self, obstacle: 'RID') -> bool: ...
    def obstacle_set_map(self, obstacle: 'RID', map: 'RID') -> None: ...
    def obstacle_get_map(self, obstacle: 'RID') -> 'RID': ...
    def obstacle_set_paused(self, obstacle: 'RID', paused: bool) -> None: ...
    def obstacle_get_paused(self, obstacle: 'RID') -> bool: ...
    def obstacle_set_radius(self, obstacle: 'RID', radius: float) -> None: ...
    def obstacle_get_radius(self, obstacle: 'RID') -> float: ...
    def obstacle_set_velocity(self, obstacle: 'RID', velocity: 'Vector2') -> None: ...
    def obstacle_get_velocity(self, obstacle: 'RID') -> 'Vector2': ...
    def obstacle_set_position(self, obstacle: 'RID', position: 'Vector2') -> None: ...
    def obstacle_get_position(self, obstacle: 'RID') -> 'Vector2': ...
    def obstacle_set_vertices(self, obstacle: 'RID', vertices: 'PackedVector2Array') -> None: ...
    def obstacle_get_vertices(self, obstacle: 'RID') -> 'PackedVector2Array': ...
    def obstacle_set_avoidance_layers(self, obstacle: 'RID', layers: int) -> None: ...
    def obstacle_get_avoidance_layers(self, obstacle: 'RID') -> int: ...
    def parse_source_geometry_data(self, navigation_polygon: 'NavigationPolygon', source_geometry_data: 'NavigationMeshSourceGeometryData2D', root_node: 'Node', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data(self, navigation_polygon: 'NavigationPolygon', source_geometry_data: 'NavigationMeshSourceGeometryData2D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data_async(self, navigation_polygon: 'NavigationPolygon', source_geometry_data: 'NavigationMeshSourceGeometryData2D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def is_baking_navigation_polygon(self, navigation_polygon: 'NavigationPolygon') -> bool: ...
    def source_geometry_parser_create(self) -> 'RID': ...
    def source_geometry_parser_set_callback(self, parser: 'RID', callback: 'Callable') -> None: ...
    def simplify_path(self, path: 'PackedVector2Array', epsilon: float) -> 'PackedVector2Array': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    
class NavigationServer3D(Object):
    map_changed: Signal[Callable[['RID'], None]]  # map_changed(map: 'RID')
    navigation_debug_changed: Signal[Callable[[], None]]  # navigation_debug_changed()
    avoidance_debug_changed: Signal[Callable[[], None]]  # avoidance_debug_changed()
    def get_maps(self) -> 'list[RID]': ...
    def map_create(self) -> 'RID': ...
    def map_set_active(self, map: 'RID', active: bool) -> None: ...
    def map_is_active(self, map: 'RID') -> bool: ...
    def map_set_up(self, map: 'RID', up: 'Vector3') -> None: ...
    def map_get_up(self, map: 'RID') -> 'Vector3': ...
    def map_set_cell_size(self, map: 'RID', cell_size: float) -> None: ...
    def map_get_cell_size(self, map: 'RID') -> float: ...
    def map_set_cell_height(self, map: 'RID', cell_height: float) -> None: ...
    def map_get_cell_height(self, map: 'RID') -> float: ...
    def map_set_merge_rasterizer_cell_scale(self, map: 'RID', scale: float) -> None: ...
    def map_get_merge_rasterizer_cell_scale(self, map: 'RID') -> float: ...
    def map_set_use_edge_connections(self, map: 'RID', enabled: bool) -> None: ...
    def map_get_use_edge_connections(self, map: 'RID') -> bool: ...
    def map_set_edge_connection_margin(self, map: 'RID', margin: float) -> None: ...
    def map_get_edge_connection_margin(self, map: 'RID') -> float: ...
    def map_set_link_connection_radius(self, map: 'RID', radius: float) -> None: ...
    def map_get_link_connection_radius(self, map: 'RID') -> float: ...
    def map_get_path(self, map: 'RID', origin: 'Vector3', destination: 'Vector3', optimize: bool, navigation_layers: int = default('''1''')) -> 'PackedVector3Array': ...
    def map_get_closest_point_to_segment(self, map: 'RID', start: 'Vector3', end: 'Vector3', use_collision: bool = default('''false''')) -> 'Vector3': ...
    def map_get_closest_point(self, map: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def map_get_closest_point_normal(self, map: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def map_get_closest_point_owner(self, map: 'RID', to_point: 'Vector3') -> 'RID': ...
    def map_get_links(self, map: 'RID') -> 'list[RID]': ...
    def map_get_regions(self, map: 'RID') -> 'list[RID]': ...
    def map_get_agents(self, map: 'RID') -> 'list[RID]': ...
    def map_get_obstacles(self, map: 'RID') -> 'list[RID]': ...
    def map_force_update(self, map: 'RID') -> None: ...
    def map_get_iteration_id(self, map: 'RID') -> int: ...
    def map_set_use_async_iterations(self, map: 'RID', enabled: bool) -> None: ...
    def map_get_use_async_iterations(self, map: 'RID') -> bool: ...
    def map_get_random_point(self, map: 'RID', navigation_layers: int, uniformly: bool) -> 'Vector3': ...
    def query_path(self, parameters: 'NavigationPathQueryParameters3D', result: 'NavigationPathQueryResult3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def region_create(self) -> 'RID': ...
    def region_set_enabled(self, region: 'RID', enabled: bool) -> None: ...
    def region_get_enabled(self, region: 'RID') -> bool: ...
    def region_set_use_edge_connections(self, region: 'RID', enabled: bool) -> None: ...
    def region_get_use_edge_connections(self, region: 'RID') -> bool: ...
    def region_set_enter_cost(self, region: 'RID', enter_cost: float) -> None: ...
    def region_get_enter_cost(self, region: 'RID') -> float: ...
    def region_set_travel_cost(self, region: 'RID', travel_cost: float) -> None: ...
    def region_get_travel_cost(self, region: 'RID') -> float: ...
    def region_set_owner_id(self, region: 'RID', owner_id: int) -> None: ...
    def region_get_owner_id(self, region: 'RID') -> int: ...
    def region_owns_point(self, region: 'RID', point: 'Vector3') -> bool: ...
    def region_set_map(self, region: 'RID', map: 'RID') -> None: ...
    def region_get_map(self, region: 'RID') -> 'RID': ...
    def region_set_navigation_layers(self, region: 'RID', navigation_layers: int) -> None: ...
    def region_get_navigation_layers(self, region: 'RID') -> int: ...
    def region_set_transform(self, region: 'RID', transform: 'Transform3D') -> None: ...
    def region_get_transform(self, region: 'RID') -> 'Transform3D': ...
    def region_set_navigation_mesh(self, region: 'RID', navigation_mesh: 'NavigationMesh') -> None: ...
    def region_bake_navigation_mesh(self, navigation_mesh: 'NavigationMesh', root_node: 'Node') -> None: ...
    def region_get_connections_count(self, region: 'RID') -> int: ...
    def region_get_connection_pathway_start(self, region: 'RID', connection: int) -> 'Vector3': ...
    def region_get_connection_pathway_end(self, region: 'RID', connection: int) -> 'Vector3': ...
    def region_get_closest_point_to_segment(self, region: 'RID', start: 'Vector3', end: 'Vector3', use_collision: bool = default('''false''')) -> 'Vector3': ...
    def region_get_closest_point(self, region: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def region_get_closest_point_normal(self, region: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def region_get_random_point(self, region: 'RID', navigation_layers: int, uniformly: bool) -> 'Vector3': ...
    def region_get_bounds(self, region: 'RID') -> 'AABB': ...
    def link_create(self) -> 'RID': ...
    def link_set_map(self, link: 'RID', map: 'RID') -> None: ...
    def link_get_map(self, link: 'RID') -> 'RID': ...
    def link_set_enabled(self, link: 'RID', enabled: bool) -> None: ...
    def link_get_enabled(self, link: 'RID') -> bool: ...
    def link_set_bidirectional(self, link: 'RID', bidirectional: bool) -> None: ...
    def link_is_bidirectional(self, link: 'RID') -> bool: ...
    def link_set_navigation_layers(self, link: 'RID', navigation_layers: int) -> None: ...
    def link_get_navigation_layers(self, link: 'RID') -> int: ...
    def link_set_start_position(self, link: 'RID', position: 'Vector3') -> None: ...
    def link_get_start_position(self, link: 'RID') -> 'Vector3': ...
    def link_set_end_position(self, link: 'RID', position: 'Vector3') -> None: ...
    def link_get_end_position(self, link: 'RID') -> 'Vector3': ...
    def link_set_enter_cost(self, link: 'RID', enter_cost: float) -> None: ...
    def link_get_enter_cost(self, link: 'RID') -> float: ...
    def link_set_travel_cost(self, link: 'RID', travel_cost: float) -> None: ...
    def link_get_travel_cost(self, link: 'RID') -> float: ...
    def link_set_owner_id(self, link: 'RID', owner_id: int) -> None: ...
    def link_get_owner_id(self, link: 'RID') -> int: ...
    def agent_create(self) -> 'RID': ...
    def agent_set_avoidance_enabled(self, agent: 'RID', enabled: bool) -> None: ...
    def agent_get_avoidance_enabled(self, agent: 'RID') -> bool: ...
    def agent_set_use_3d_avoidance(self, agent: 'RID', enabled: bool) -> None: ...
    def agent_get_use_3d_avoidance(self, agent: 'RID') -> bool: ...
    def agent_set_map(self, agent: 'RID', map: 'RID') -> None: ...
    def agent_get_map(self, agent: 'RID') -> 'RID': ...
    def agent_set_paused(self, agent: 'RID', paused: bool) -> None: ...
    def agent_get_paused(self, agent: 'RID') -> bool: ...
    def agent_set_neighbor_distance(self, agent: 'RID', distance: float) -> None: ...
    def agent_get_neighbor_distance(self, agent: 'RID') -> float: ...
    def agent_set_max_neighbors(self, agent: 'RID', count: int) -> None: ...
    def agent_get_max_neighbors(self, agent: 'RID') -> int: ...
    def agent_set_time_horizon_agents(self, agent: 'RID', time_horizon: float) -> None: ...
    def agent_get_time_horizon_agents(self, agent: 'RID') -> float: ...
    def agent_set_time_horizon_obstacles(self, agent: 'RID', time_horizon: float) -> None: ...
    def agent_get_time_horizon_obstacles(self, agent: 'RID') -> float: ...
    def agent_set_radius(self, agent: 'RID', radius: float) -> None: ...
    def agent_get_radius(self, agent: 'RID') -> float: ...
    def agent_set_height(self, agent: 'RID', height: float) -> None: ...
    def agent_get_height(self, agent: 'RID') -> float: ...
    def agent_set_max_speed(self, agent: 'RID', max_speed: float) -> None: ...
    def agent_get_max_speed(self, agent: 'RID') -> float: ...
    def agent_set_velocity_forced(self, agent: 'RID', velocity: 'Vector3') -> None: ...
    def agent_set_velocity(self, agent: 'RID', velocity: 'Vector3') -> None: ...
    def agent_get_velocity(self, agent: 'RID') -> 'Vector3': ...
    def agent_set_position(self, agent: 'RID', position: 'Vector3') -> None: ...
    def agent_get_position(self, agent: 'RID') -> 'Vector3': ...
    def agent_is_map_changed(self, agent: 'RID') -> bool: ...
    def agent_set_avoidance_callback(self, agent: 'RID', callback: 'Callable') -> None: ...
    def agent_has_avoidance_callback(self, agent: 'RID') -> bool: ...
    def agent_set_avoidance_layers(self, agent: 'RID', layers: int) -> None: ...
    def agent_get_avoidance_layers(self, agent: 'RID') -> int: ...
    def agent_set_avoidance_mask(self, agent: 'RID', mask: int) -> None: ...
    def agent_get_avoidance_mask(self, agent: 'RID') -> int: ...
    def agent_set_avoidance_priority(self, agent: 'RID', priority: float) -> None: ...
    def agent_get_avoidance_priority(self, agent: 'RID') -> float: ...
    def obstacle_create(self) -> 'RID': ...
    def obstacle_set_avoidance_enabled(self, obstacle: 'RID', enabled: bool) -> None: ...
    def obstacle_get_avoidance_enabled(self, obstacle: 'RID') -> bool: ...
    def obstacle_set_use_3d_avoidance(self, obstacle: 'RID', enabled: bool) -> None: ...
    def obstacle_get_use_3d_avoidance(self, obstacle: 'RID') -> bool: ...
    def obstacle_set_map(self, obstacle: 'RID', map: 'RID') -> None: ...
    def obstacle_get_map(self, obstacle: 'RID') -> 'RID': ...
    def obstacle_set_paused(self, obstacle: 'RID', paused: bool) -> None: ...
    def obstacle_get_paused(self, obstacle: 'RID') -> bool: ...
    def obstacle_set_radius(self, obstacle: 'RID', radius: float) -> None: ...
    def obstacle_get_radius(self, obstacle: 'RID') -> float: ...
    def obstacle_set_height(self, obstacle: 'RID', height: float) -> None: ...
    def obstacle_get_height(self, obstacle: 'RID') -> float: ...
    def obstacle_set_velocity(self, obstacle: 'RID', velocity: 'Vector3') -> None: ...
    def obstacle_get_velocity(self, obstacle: 'RID') -> 'Vector3': ...
    def obstacle_set_position(self, obstacle: 'RID', position: 'Vector3') -> None: ...
    def obstacle_get_position(self, obstacle: 'RID') -> 'Vector3': ...
    def obstacle_set_vertices(self, obstacle: 'RID', vertices: 'PackedVector3Array') -> None: ...
    def obstacle_get_vertices(self, obstacle: 'RID') -> 'PackedVector3Array': ...
    def obstacle_set_avoidance_layers(self, obstacle: 'RID', layers: int) -> None: ...
    def obstacle_get_avoidance_layers(self, obstacle: 'RID') -> int: ...
    def parse_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', root_node: 'Node', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data_async(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def is_baking_navigation_mesh(self, navigation_mesh: 'NavigationMesh') -> bool: ...
    def source_geometry_parser_create(self) -> 'RID': ...
    def source_geometry_parser_set_callback(self, parser: 'RID', callback: 'Callable') -> None: ...
    def simplify_path(self, path: 'PackedVector3Array', epsilon: float) -> 'PackedVector3Array': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_active(self, active: bool) -> None: ...
    def set_debug_enabled(self, enabled: bool) -> None: ...
    def get_debug_enabled(self) -> bool: ...
    def get_process_info(self, process_info: 'NavigationServer3D_ProcessInfo') -> int: ...
    
class NavigationServer3D_ProcessInfo(Enum):
    INFO_ACTIVE_MAPS = 0
    INFO_REGION_COUNT = 1
    INFO_AGENT_COUNT = 2
    INFO_LINK_COUNT = 3
    INFO_POLYGON_COUNT = 4
    INFO_EDGE_COUNT = 5
    INFO_EDGE_MERGE_COUNT = 6
    INFO_EDGE_CONNECTION_COUNT = 7
    INFO_EDGE_FREE_COUNT = 8
    INFO_OBSTACLE_COUNT = 9

class NinePatchRect(Control):
    texture: 'Texture2D'
    draw_center: bool
    region_rect: 'Rect2'
    patch_margin_left: int
    patch_margin_top: int
    patch_margin_right: int
    patch_margin_bottom: int
    axis_stretch_horizontal: int
    axis_stretch_vertical: int
    texture_changed: Signal[Callable[[], None]]  # texture_changed()
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_patch_margin(self, margin: 'Side', value: int) -> None: ...
    def get_patch_margin(self, margin: 'Side') -> int: ...
    def set_region_rect(self, rect: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_draw_center(self, draw_center: bool) -> None: ...
    def is_draw_center_enabled(self) -> bool: ...
    def set_h_axis_stretch_mode(self, mode: 'NinePatchRect_AxisStretchMode') -> None: ...
    def get_h_axis_stretch_mode(self) -> 'NinePatchRect_AxisStretchMode': ...
    def set_v_axis_stretch_mode(self, mode: 'NinePatchRect_AxisStretchMode') -> None: ...
    def get_v_axis_stretch_mode(self) -> 'NinePatchRect_AxisStretchMode': ...
    
class NinePatchRect_AxisStretchMode(Enum):
    AXIS_STRETCH_MODE_STRETCH = 0
    AXIS_STRETCH_MODE_TILE = 1
    AXIS_STRETCH_MODE_TILE_FIT = 2

class Node(Object):
    name: 'StringName'
    unique_name_in_owner: bool
    scene_file_path: 'String'
    owner: 'Node'
    multiplayer: 'MultiplayerAPI'
    process_mode: int
    process_priority: int
    process_physics_priority: int
    process_thread_group: int
    process_thread_group_order: int
    process_thread_messages: int
    physics_interpolation_mode: int
    auto_translate_mode: int
    editor_description: 'String'
    NOTIFICATION_ENTER_TREE = 10
    NOTIFICATION_EXIT_TREE = 11
    NOTIFICATION_MOVED_IN_PARENT = 12
    NOTIFICATION_READY = 13
    NOTIFICATION_PAUSED = 14
    NOTIFICATION_UNPAUSED = 15
    NOTIFICATION_PHYSICS_PROCESS = 16
    NOTIFICATION_PROCESS = 17
    NOTIFICATION_PARENTED = 18
    NOTIFICATION_UNPARENTED = 19
    NOTIFICATION_SCENE_INSTANTIATED = 20
    NOTIFICATION_DRAG_BEGIN = 21
    NOTIFICATION_DRAG_END = 22
    NOTIFICATION_PATH_RENAMED = 23
    NOTIFICATION_CHILD_ORDER_CHANGED = 24
    NOTIFICATION_INTERNAL_PROCESS = 25
    NOTIFICATION_INTERNAL_PHYSICS_PROCESS = 26
    NOTIFICATION_POST_ENTER_TREE = 27
    NOTIFICATION_DISABLED = 28
    NOTIFICATION_ENABLED = 29
    NOTIFICATION_RESET_PHYSICS_INTERPOLATION = 2001
    NOTIFICATION_EDITOR_PRE_SAVE = 9001
    NOTIFICATION_EDITOR_POST_SAVE = 9002
    NOTIFICATION_WM_MOUSE_ENTER = 1002
    NOTIFICATION_WM_MOUSE_EXIT = 1003
    NOTIFICATION_WM_WINDOW_FOCUS_IN = 1004
    NOTIFICATION_WM_WINDOW_FOCUS_OUT = 1005
    NOTIFICATION_WM_CLOSE_REQUEST = 1006
    NOTIFICATION_WM_GO_BACK_REQUEST = 1007
    NOTIFICATION_WM_SIZE_CHANGED = 1008
    NOTIFICATION_WM_DPI_CHANGE = 1009
    NOTIFICATION_VP_MOUSE_ENTER = 1010
    NOTIFICATION_VP_MOUSE_EXIT = 1011
    NOTIFICATION_OS_MEMORY_WARNING = 2009
    NOTIFICATION_TRANSLATION_CHANGED = 2010
    NOTIFICATION_WM_ABOUT = 2011
    NOTIFICATION_CRASH = 2012
    NOTIFICATION_OS_IME_UPDATE = 2013
    NOTIFICATION_APPLICATION_RESUMED = 2014
    NOTIFICATION_APPLICATION_PAUSED = 2015
    NOTIFICATION_APPLICATION_FOCUS_IN = 2016
    NOTIFICATION_APPLICATION_FOCUS_OUT = 2017
    NOTIFICATION_TEXT_SERVER_CHANGED = 2018
    
    ready: Signal[Callable[[], None]]  # ready()
    renamed: Signal[Callable[[], None]]  # renamed()
    tree_entered: Signal[Callable[[], None]]  # tree_entered()
    tree_exiting: Signal[Callable[[], None]]  # tree_exiting()
    tree_exited: Signal[Callable[[], None]]  # tree_exited()
    child_entered_tree: Signal[Callable[['Node'], None]]  # child_entered_tree(node: 'Node')
    child_exiting_tree: Signal[Callable[['Node'], None]]  # child_exiting_tree(node: 'Node')
    child_order_changed: Signal[Callable[[], None]]  # child_order_changed()
    replacing_by: Signal[Callable[['Node'], None]]  # replacing_by(node: 'Node')
    editor_description_changed: Signal[Callable[['Node'], None]]  # editor_description_changed(node: 'Node')
    editor_state_changed: Signal[Callable[[], None]]  # editor_state_changed()
    def _process(self, delta: float) -> None: ...
    def _physics_process(self, delta: float) -> None: ...
    def _enter_tree(self) -> None: ...
    def _exit_tree(self) -> None: ...
    def _ready(self) -> None: ...
    def _get_configuration_warnings(self) -> 'PackedStringArray': ...
    def _input(self, event: 'InputEvent') -> None: ...
    def _shortcut_input(self, event: 'InputEvent') -> None: ...
    def _unhandled_input(self, event: 'InputEvent') -> None: ...
    def _unhandled_key_input(self, event: 'InputEvent') -> None: ...
    @staticmethod
    def print_orphan_nodes() -> None: ...
    def add_sibling(self, sibling: 'Node', force_readable_name: bool = default('''false''')) -> None: ...
    def set_name(self, name: 'String') -> None: ...
    def get_name(self) -> 'StringName': ...
    def add_child(self, node: 'Node', force_readable_name: bool = default('''false'''), internal: 'Node_InternalMode' = default('''0''')) -> None: ...
    def remove_child(self, node: 'Node') -> None: ...
    def reparent(self, new_parent: 'Node', keep_global_transform: bool = default('''true''')) -> None: ...
    def get_child_count(self, include_internal: bool = default('''false''')) -> int: ...
    def get_children(self, include_internal: bool = default('''false''')) -> 'list[Node]': ...
    def get_child(self, idx: int, include_internal: bool = default('''false''')) -> 'Node': ...
    def has_node(self, path: 'NodePath') -> bool: ...
    def get_node(self, path: 'NodePath') -> 'Node': ...
    def get_node_or_null(self, path: 'NodePath') -> 'Node': ...
    def get_parent(self) -> 'Node': ...
    def find_child(self, pattern: 'String', recursive: bool = default('''true'''), owned: bool = default('''true''')) -> 'Node': ...
    def find_children(self, pattern: 'String', type: 'String' = default('''""'''), recursive: bool = default('''true'''), owned: bool = default('''true''')) -> 'list[Node]': ...
    def find_parent(self, pattern: 'String') -> 'Node': ...
    def has_node_and_resource(self, path: 'NodePath') -> bool: ...
    def get_node_and_resource(self, path: 'NodePath') -> 'Array': ...
    def is_inside_tree(self) -> bool: ...
    def is_part_of_edited_scene(self) -> bool: ...
    def is_ancestor_of(self, node: 'Node') -> bool: ...
    def is_greater_than(self, node: 'Node') -> bool: ...
    def get_path(self) -> 'NodePath': ...
    def get_path_to(self, node: 'Node', use_unique_path: bool = default('''false''')) -> 'NodePath': ...
    def add_to_group(self, group: 'StringName', persistent: bool = default('''false''')) -> None: ...
    def remove_from_group(self, group: 'StringName') -> None: ...
    def is_in_group(self, group: 'StringName') -> bool: ...
    def move_child(self, child_node: 'Node', to_index: int) -> None: ...
    def get_groups(self) -> 'list[StringName]': ...
    def set_owner(self, owner: 'Node') -> None: ...
    def get_owner(self) -> 'Node': ...
    def get_index(self, include_internal: bool = default('''false''')) -> int: ...
    def print_tree(self) -> None: ...
    def print_tree_pretty(self) -> None: ...
    def get_tree_string(self) -> 'String': ...
    def get_tree_string_pretty(self) -> 'String': ...
    def set_scene_file_path(self, scene_file_path: 'String') -> None: ...
    def get_scene_file_path(self) -> 'String': ...
    def propagate_notification(self, what: int) -> None: ...
    def propagate_call(self, method: 'StringName', args: 'Array' = default('''[]'''), parent_first: bool = default('''false''')) -> None: ...
    def set_physics_process(self, enable: bool) -> None: ...
    def get_physics_process_delta_time(self) -> float: ...
    def is_physics_processing(self) -> bool: ...
    def get_process_delta_time(self) -> float: ...
    def set_process(self, enable: bool) -> None: ...
    def set_process_priority(self, priority: int) -> None: ...
    def get_process_priority(self) -> int: ...
    def set_physics_process_priority(self, priority: int) -> None: ...
    def get_physics_process_priority(self) -> int: ...
    def is_processing(self) -> bool: ...
    def set_process_input(self, enable: bool) -> None: ...
    def is_processing_input(self) -> bool: ...
    def set_process_shortcut_input(self, enable: bool) -> None: ...
    def is_processing_shortcut_input(self) -> bool: ...
    def set_process_unhandled_input(self, enable: bool) -> None: ...
    def is_processing_unhandled_input(self) -> bool: ...
    def set_process_unhandled_key_input(self, enable: bool) -> None: ...
    def is_processing_unhandled_key_input(self) -> bool: ...
    def set_process_mode(self, mode: 'Node_ProcessMode') -> None: ...
    def get_process_mode(self) -> 'Node_ProcessMode': ...
    def can_process(self) -> bool: ...
    def set_process_thread_group(self, mode: 'Node_ProcessThreadGroup') -> None: ...
    def get_process_thread_group(self) -> 'Node_ProcessThreadGroup': ...
    def set_process_thread_messages(self, flags: 'Node_ProcessThreadMessages') -> None: ...
    def get_process_thread_messages(self) -> 'Node_ProcessThreadMessages': ...
    def set_process_thread_group_order(self, order: int) -> None: ...
    def get_process_thread_group_order(self) -> int: ...
    def set_display_folded(self, fold: bool) -> None: ...
    def is_displayed_folded(self) -> bool: ...
    def set_process_internal(self, enable: bool) -> None: ...
    def is_processing_internal(self) -> bool: ...
    def set_physics_process_internal(self, enable: bool) -> None: ...
    def is_physics_processing_internal(self) -> bool: ...
    def set_physics_interpolation_mode(self, mode: 'Node_PhysicsInterpolationMode') -> None: ...
    def get_physics_interpolation_mode(self) -> 'Node_PhysicsInterpolationMode': ...
    def is_physics_interpolated(self) -> bool: ...
    def is_physics_interpolated_and_enabled(self) -> bool: ...
    def reset_physics_interpolation(self) -> None: ...
    def set_auto_translate_mode(self, mode: 'Node_AutoTranslateMode') -> None: ...
    def get_auto_translate_mode(self) -> 'Node_AutoTranslateMode': ...
    def set_translation_domain_inherited(self) -> None: ...
    def get_window(self) -> 'Window': ...
    def get_last_exclusive_window(self) -> 'Window': ...
    def get_tree(self) -> 'SceneTree': ...
    def create_tween(self) -> 'Tween': ...
    def duplicate(self, flags: int = default('''15''')) -> 'Node': ...
    def replace_by(self, node: 'Node', keep_groups: bool = default('''false''')) -> None: ...
    def set_scene_instance_load_placeholder(self, load_placeholder: bool) -> None: ...
    def get_scene_instance_load_placeholder(self) -> bool: ...
    def set_editable_instance(self, node: 'Node', is_editable: bool) -> None: ...
    def is_editable_instance(self, node: 'Node') -> bool: ...
    def get_viewport(self) -> 'Viewport': ...
    def queue_free(self) -> None: ...
    def request_ready(self) -> None: ...
    def is_node_ready(self) -> bool: ...
    def set_multiplayer_authority(self, id: int, recursive: bool = default('''true''')) -> None: ...
    def get_multiplayer_authority(self) -> int: ...
    def is_multiplayer_authority(self) -> bool: ...
    def get_multiplayer(self) -> 'MultiplayerAPI': ...
    def rpc_config(self, method: 'StringName', config: 'Variant') -> None: ...
    def get_rpc_config(self) -> 'Variant': ...
    def set_editor_description(self, editor_description: 'String') -> None: ...
    def get_editor_description(self) -> 'String': ...
    def set_unique_name_in_owner(self, enable: bool) -> None: ...
    def is_unique_name_in_owner(self) -> bool: ...
    def atr(self, message: 'String', context: 'StringName' = default('''""''')) -> 'String': ...
    def atr_n(self, message: 'String', plural_message: 'StringName', n: int, context: 'StringName' = default('''""''')) -> 'String': ...
    def rpc(self, method: 'StringName', *arg) -> 'Error': ...
    def rpc_id(self, peer_id: int, method: 'StringName', *arg) -> 'Error': ...
    def update_configuration_warnings(self) -> None: ...
    def call_deferred_thread_group(self, method: 'StringName', *arg) -> 'Variant': ...
    def set_deferred_thread_group(self, property: 'StringName', value: 'Variant') -> None: ...
    def notify_deferred_thread_group(self, what: int) -> None: ...
    def call_thread_safe(self, method: 'StringName', *arg) -> 'Variant': ...
    def set_thread_safe(self, property: 'StringName', value: 'Variant') -> None: ...
    def notify_thread_safe(self, what: int) -> None: ...
    
class Node_ProcessMode(Enum):
    PROCESS_MODE_INHERIT = 0
    PROCESS_MODE_PAUSABLE = 1
    PROCESS_MODE_WHEN_PAUSED = 2
    PROCESS_MODE_ALWAYS = 3
    PROCESS_MODE_DISABLED = 4

class Node_ProcessThreadGroup(Enum):
    PROCESS_THREAD_GROUP_INHERIT = 0
    PROCESS_THREAD_GROUP_MAIN_THREAD = 1
    PROCESS_THREAD_GROUP_SUB_THREAD = 2

class Node_ProcessThreadMessages(Enum):
    FLAG_PROCESS_THREAD_MESSAGES = 1
    FLAG_PROCESS_THREAD_MESSAGES_PHYSICS = 2
    FLAG_PROCESS_THREAD_MESSAGES_ALL = 3

class Node_PhysicsInterpolationMode(Enum):
    PHYSICS_INTERPOLATION_MODE_INHERIT = 0
    PHYSICS_INTERPOLATION_MODE_ON = 1
    PHYSICS_INTERPOLATION_MODE_OFF = 2

class Node_DuplicateFlags(Enum):
    DUPLICATE_SIGNALS = 1
    DUPLICATE_GROUPS = 2
    DUPLICATE_SCRIPTS = 4
    DUPLICATE_USE_INSTANTIATION = 8

class Node_InternalMode(Enum):
    INTERNAL_MODE_DISABLED = 0
    INTERNAL_MODE_FRONT = 1
    INTERNAL_MODE_BACK = 2

class Node_AutoTranslateMode(Enum):
    AUTO_TRANSLATE_MODE_INHERIT = 0
    AUTO_TRANSLATE_MODE_ALWAYS = 1
    AUTO_TRANSLATE_MODE_DISABLED = 2

class Node2D(CanvasItem):
    position: 'Vector2'
    rotation: float
    rotation_degrees: float
    scale: 'Vector2'
    skew: float
    transform: 'Transform2D'
    global_position: 'Vector2'
    global_rotation: float
    global_rotation_degrees: float
    global_scale: 'Vector2'
    global_skew: float
    global_transform: 'Transform2D'
    def set_position(self, position: 'Vector2') -> None: ...
    def set_rotation(self, radians: float) -> None: ...
    def set_rotation_degrees(self, degrees: float) -> None: ...
    def set_skew(self, radians: float) -> None: ...
    def set_scale(self, scale: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def get_rotation(self) -> float: ...
    def get_rotation_degrees(self) -> float: ...
    def get_skew(self) -> float: ...
    def get_scale(self) -> 'Vector2': ...
    def rotate(self, radians: float) -> None: ...
    def move_local_x(self, delta: float, scaled: bool = default('''false''')) -> None: ...
    def move_local_y(self, delta: float, scaled: bool = default('''false''')) -> None: ...
    def translate(self, offset: 'Vector2') -> None: ...
    def global_translate(self, offset: 'Vector2') -> None: ...
    def apply_scale(self, ratio: 'Vector2') -> None: ...
    def set_global_position(self, position: 'Vector2') -> None: ...
    def get_global_position(self) -> 'Vector2': ...
    def set_global_rotation(self, radians: float) -> None: ...
    def set_global_rotation_degrees(self, degrees: float) -> None: ...
    def get_global_rotation(self) -> float: ...
    def get_global_rotation_degrees(self) -> float: ...
    def set_global_skew(self, radians: float) -> None: ...
    def get_global_skew(self) -> float: ...
    def set_global_scale(self, scale: 'Vector2') -> None: ...
    def get_global_scale(self) -> 'Vector2': ...
    def set_transform(self, xform: 'Transform2D') -> None: ...
    def set_global_transform(self, xform: 'Transform2D') -> None: ...
    def look_at(self, point: 'Vector2') -> None: ...
    def get_angle_to(self, point: 'Vector2') -> float: ...
    def to_local(self, global_point: 'Vector2') -> 'Vector2': ...
    def to_global(self, local_point: 'Vector2') -> 'Vector2': ...
    def get_relative_transform_to_parent(self, parent: 'Node') -> 'Transform2D': ...
    
class Node3D(Node):
    transform: 'Transform3D'
    global_transform: 'Transform3D'
    position: 'Vector3'
    rotation: 'Vector3'
    rotation_degrees: 'Vector3'
    quaternion: 'Quaternion'
    basis: 'Basis'
    scale: 'Vector3'
    rotation_edit_mode: int
    rotation_order: int
    top_level: bool
    global_position: 'Vector3'
    global_basis: 'Basis'
    global_rotation: 'Vector3'
    global_rotation_degrees: 'Vector3'
    visible: bool
    visibility_parent: 'NodePath'
    NOTIFICATION_TRANSFORM_CHANGED = 2000
    NOTIFICATION_ENTER_WORLD = 41
    NOTIFICATION_EXIT_WORLD = 42
    NOTIFICATION_VISIBILITY_CHANGED = 43
    NOTIFICATION_LOCAL_TRANSFORM_CHANGED = 44
    
    visibility_changed: Signal[Callable[[], None]]  # visibility_changed()
    def set_transform(self, local: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def set_position(self, position: 'Vector3') -> None: ...
    def get_position(self) -> 'Vector3': ...
    def set_rotation(self, euler_radians: 'Vector3') -> None: ...
    def get_rotation(self) -> 'Vector3': ...
    def set_rotation_degrees(self, euler_degrees: 'Vector3') -> None: ...
    def get_rotation_degrees(self) -> 'Vector3': ...
    def set_rotation_order(self, order: 'EulerOrder') -> None: ...
    def get_rotation_order(self) -> 'EulerOrder': ...
    def set_rotation_edit_mode(self, edit_mode: 'Node3D_RotationEditMode') -> None: ...
    def get_rotation_edit_mode(self) -> 'Node3D_RotationEditMode': ...
    def set_scale(self, scale: 'Vector3') -> None: ...
    def get_scale(self) -> 'Vector3': ...
    def set_quaternion(self, quaternion: 'Quaternion') -> None: ...
    def get_quaternion(self) -> 'Quaternion': ...
    def set_basis(self, basis: 'Basis') -> None: ...
    def get_basis(self) -> 'Basis': ...
    def set_global_transform(self, global_: 'Transform3D') -> None: ...
    def get_global_transform(self) -> 'Transform3D': ...
    def get_global_transform_interpolated(self) -> 'Transform3D': ...
    def set_global_position(self, position: 'Vector3') -> None: ...
    def get_global_position(self) -> 'Vector3': ...
    def set_global_basis(self, basis: 'Basis') -> None: ...
    def get_global_basis(self) -> 'Basis': ...
    def set_global_rotation(self, euler_radians: 'Vector3') -> None: ...
    def get_global_rotation(self) -> 'Vector3': ...
    def set_global_rotation_degrees(self, euler_degrees: 'Vector3') -> None: ...
    def get_global_rotation_degrees(self) -> 'Vector3': ...
    def get_parent_node_3d(self) -> 'Node3D': ...
    def set_ignore_transform_notification(self, enabled: bool) -> None: ...
    def set_as_top_level(self, enable: bool) -> None: ...
    def is_set_as_top_level(self) -> bool: ...
    def set_disable_scale(self, disable: bool) -> None: ...
    def is_scale_disabled(self) -> bool: ...
    def get_world_3d(self) -> 'World3D': ...
    def force_update_transform(self) -> None: ...
    def set_visibility_parent(self, path: 'NodePath') -> None: ...
    def get_visibility_parent(self) -> 'NodePath': ...
    def update_gizmos(self) -> None: ...
    def add_gizmo(self, gizmo: 'Node3DGizmo') -> None: ...
    def get_gizmos(self) -> 'list[Node3DGizmo]': ...
    def clear_gizmos(self) -> None: ...
    def set_subgizmo_selection(self, gizmo: 'Node3DGizmo', id: int, transform: 'Transform3D') -> None: ...
    def clear_subgizmo_selection(self) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def is_visible_in_tree(self) -> bool: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def set_notify_local_transform(self, enable: bool) -> None: ...
    def is_local_transform_notification_enabled(self) -> bool: ...
    def set_notify_transform(self, enable: bool) -> None: ...
    def is_transform_notification_enabled(self) -> bool: ...
    def rotate(self, axis: 'Vector3', angle: float) -> None: ...
    def global_rotate(self, axis: 'Vector3', angle: float) -> None: ...
    def global_scale(self, scale: 'Vector3') -> None: ...
    def global_translate(self, offset: 'Vector3') -> None: ...
    def rotate_object_local(self, axis: 'Vector3', angle: float) -> None: ...
    def scale_object_local(self, scale: 'Vector3') -> None: ...
    def translate_object_local(self, offset: 'Vector3') -> None: ...
    def rotate_x(self, angle: float) -> None: ...
    def rotate_y(self, angle: float) -> None: ...
    def rotate_z(self, angle: float) -> None: ...
    def translate(self, offset: 'Vector3') -> None: ...
    def orthonormalize(self) -> None: ...
    def set_identity(self) -> None: ...
    def look_at(self, target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: bool = default('''false''')) -> None: ...
    def look_at_from_position(self, position: 'Vector3', target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: bool = default('''false''')) -> None: ...
    def to_local(self, global_point: 'Vector3') -> 'Vector3': ...
    def to_global(self, local_point: 'Vector3') -> 'Vector3': ...
    
class Node3D_RotationEditMode(Enum):
    ROTATION_EDIT_MODE_EULER = 0
    ROTATION_EDIT_MODE_QUATERNION = 1
    ROTATION_EDIT_MODE_BASIS = 2

class Node3DGizmo(RefCounted):
    pass
    
class Noise(Resource):
    def get_noise_1d(self, x: float) -> float: ...
    def get_noise_2d(self, x: float, y: float) -> float: ...
    def get_noise_2dv(self, v: 'Vector2') -> float: ...
    def get_noise_3d(self, x: float, y: float, z: float) -> float: ...
    def get_noise_3dv(self, v: 'Vector3') -> float: ...
    def get_image(self, width: int, height: int, invert: bool = default('''false'''), in_3d_space: bool = default('''false'''), normalize: bool = default('''true''')) -> 'Image': ...
    def get_seamless_image(self, width: int, height: int, invert: bool = default('''false'''), in_3d_space: bool = default('''false'''), skirt: float = default('''0.1'''), normalize: bool = default('''true''')) -> 'Image': ...
    def get_image_3d(self, width: int, height: int, depth: int, invert: bool = default('''false'''), normalize: bool = default('''true''')) -> 'list[Image]': ...
    def get_seamless_image_3d(self, width: int, height: int, depth: int, invert: bool = default('''false'''), skirt: float = default('''0.1'''), normalize: bool = default('''true''')) -> 'list[Image]': ...
    
class NoiseTexture2D(Texture2D):
    width: int
    height: int
    invert: bool
    in_3d_space: bool
    generate_mipmaps: bool
    seamless: bool
    seamless_blend_skirt: float
    as_normal_map: bool
    bump_strength: float
    normalize: bool
    color_ramp: 'Gradient'
    noise: 'Noise'
    def set_width(self, width: int) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_invert(self, invert: bool) -> None: ...
    def get_invert(self) -> bool: ...
    def set_in_3d_space(self, enable: bool) -> None: ...
    def is_in_3d_space(self) -> bool: ...
    def set_generate_mipmaps(self, invert: bool) -> None: ...
    def is_generating_mipmaps(self) -> bool: ...
    def set_seamless(self, seamless: bool) -> None: ...
    def get_seamless(self) -> bool: ...
    def set_seamless_blend_skirt(self, seamless_blend_skirt: float) -> None: ...
    def get_seamless_blend_skirt(self) -> float: ...
    def set_as_normal_map(self, as_normal_map: bool) -> None: ...
    def is_normal_map(self) -> bool: ...
    def set_bump_strength(self, bump_strength: float) -> None: ...
    def get_bump_strength(self) -> float: ...
    def set_normalize(self, normalize: bool) -> None: ...
    def is_normalized(self) -> bool: ...
    def set_color_ramp(self, gradient: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_noise(self, noise: 'Noise') -> None: ...
    def get_noise(self) -> 'Noise': ...
    
class NoiseTexture3D(Texture3D):
    width: int
    height: int
    depth: int
    invert: bool
    seamless: bool
    seamless_blend_skirt: float
    normalize: bool
    color_ramp: 'Gradient'
    noise: 'Noise'
    def set_width(self, width: int) -> None: ...
    def set_height(self, height: int) -> None: ...
    def set_depth(self, depth: int) -> None: ...
    def set_invert(self, invert: bool) -> None: ...
    def get_invert(self) -> bool: ...
    def set_seamless(self, seamless: bool) -> None: ...
    def get_seamless(self) -> bool: ...
    def set_seamless_blend_skirt(self, seamless_blend_skirt: float) -> None: ...
    def get_seamless_blend_skirt(self) -> float: ...
    def set_normalize(self, normalize: bool) -> None: ...
    def is_normalized(self) -> bool: ...
    def set_color_ramp(self, gradient: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_noise(self, noise: 'Noise') -> None: ...
    def get_noise(self) -> 'Noise': ...
    
class ORMMaterial3D(BaseMaterial3D):
    pass
    
class OS(Object):
    low_processor_usage_mode: bool
    low_processor_usage_mode_sleep_usec: int
    delta_smoothing: bool
    def get_entropy(self, size: int) -> 'PackedByteArray': ...
    def get_system_ca_certificates(self) -> 'String': ...
    def get_connected_midi_inputs(self) -> 'PackedStringArray': ...
    def open_midi_inputs(self) -> None: ...
    def close_midi_inputs(self) -> None: ...
    def alert(self, text: 'String', title: 'String' = default('''"Alert!"''')) -> None: ...
    def crash(self, message: 'String') -> None: ...
    def set_low_processor_usage_mode(self, enable: bool) -> None: ...
    def is_in_low_processor_usage_mode(self) -> bool: ...
    def set_low_processor_usage_mode_sleep_usec(self, usec: int) -> None: ...
    def get_low_processor_usage_mode_sleep_usec(self) -> int: ...
    def set_delta_smoothing(self, delta_smoothing_enabled: bool) -> None: ...
    def is_delta_smoothing_enabled(self) -> bool: ...
    def get_processor_count(self) -> int: ...
    def get_processor_name(self) -> 'String': ...
    def get_system_fonts(self) -> 'PackedStringArray': ...
    def get_system_font_path(self, font_name: 'String', weight: int = default('''400'''), stretch: int = default('''100'''), italic: bool = default('''false''')) -> 'String': ...
    def get_system_font_path_for_text(self, font_name: 'String', text: 'String', locale: 'String' = default('''""'''), script: 'String' = default('''""'''), weight: int = default('''400'''), stretch: int = default('''100'''), italic: bool = default('''false''')) -> 'PackedStringArray': ...
    def get_executable_path(self) -> 'String': ...
    def read_string_from_stdin(self, buffer_size: int) -> 'String': ...
    def read_buffer_from_stdin(self, buffer_size: int) -> 'PackedByteArray': ...
    def get_stdin_type(self) -> 'OS_StdHandleType': ...
    def get_stdout_type(self) -> 'OS_StdHandleType': ...
    def get_stderr_type(self) -> 'OS_StdHandleType': ...
    def execute(self, path: 'String', arguments: 'PackedStringArray', output: 'Array' = default('''[]'''), read_stderr: bool = default('''false'''), open_console: bool = default('''false''')) -> int: ...
    def execute_with_pipe(self, path: 'String', arguments: 'PackedStringArray', blocking: bool = default('''true''')) -> 'Dictionary': ...
    def create_process(self, path: 'String', arguments: 'PackedStringArray', open_console: bool = default('''false''')) -> int: ...
    def create_instance(self, arguments: 'PackedStringArray') -> int: ...
    def kill(self, pid: int) -> 'Error': ...
    def shell_open(self, uri: 'String') -> 'Error': ...
    def shell_show_in_file_manager(self, file_or_dir_path: 'String', open_folder: bool = default('''true''')) -> 'Error': ...
    def is_process_running(self, pid: int) -> bool: ...
    def get_process_exit_code(self, pid: int) -> int: ...
    def get_process_id(self) -> int: ...
    def has_environment(self, variable: 'String') -> bool: ...
    def get_environment(self, variable: 'String') -> 'String': ...
    def set_environment(self, variable: 'String', value: 'String') -> None: ...
    def unset_environment(self, variable: 'String') -> None: ...
    def get_name(self) -> 'String': ...
    def get_distribution_name(self) -> 'String': ...
    def get_version(self) -> 'String': ...
    def get_version_alias(self) -> 'String': ...
    def get_cmdline_args(self) -> 'PackedStringArray': ...
    def get_cmdline_user_args(self) -> 'PackedStringArray': ...
    def get_video_adapter_driver_info(self) -> 'PackedStringArray': ...
    def set_restart_on_exit(self, restart: bool, arguments: 'PackedStringArray' = default('''PackedStringArray()''')) -> None: ...
    def is_restart_on_exit_set(self) -> bool: ...
    def get_restart_on_exit_arguments(self) -> 'PackedStringArray': ...
    def delay_usec(self, usec: int) -> None: ...
    def delay_msec(self, msec: int) -> None: ...
    def get_locale(self) -> 'String': ...
    def get_locale_language(self) -> 'String': ...
    def get_model_name(self) -> 'String': ...
    def is_userfs_persistent(self) -> bool: ...
    def is_stdout_verbose(self) -> bool: ...
    def is_debug_build(self) -> bool: ...
    def get_static_memory_usage(self) -> int: ...
    def get_static_memory_peak_usage(self) -> int: ...
    def get_memory_info(self) -> 'Dictionary': ...
    def move_to_trash(self, path: 'String') -> 'Error': ...
    def get_user_data_dir(self) -> 'String': ...
    def get_system_dir(self, dir: 'OS_SystemDir', shared_storage: bool = default('''true''')) -> 'String': ...
    def get_config_dir(self) -> 'String': ...
    def get_data_dir(self) -> 'String': ...
    def get_cache_dir(self) -> 'String': ...
    def get_temp_dir(self) -> 'String': ...
    def get_unique_id(self) -> 'String': ...
    def get_keycode_string(self, code: 'Key') -> 'String': ...
    def is_keycode_unicode(self, code: int) -> bool: ...
    def find_keycode_from_string(self, string: 'String') -> 'Key': ...
    def set_use_file_access_save_and_swap(self, enabled: bool) -> None: ...
    def set_thread_name(self, name: 'String') -> 'Error': ...
    def get_thread_caller_id(self) -> int: ...
    def get_main_thread_id(self) -> int: ...
    def has_feature(self, tag_name: 'String') -> bool: ...
    def is_sandboxed(self) -> bool: ...
    def request_permission(self, name: 'String') -> bool: ...
    def request_permissions(self) -> bool: ...
    def get_granted_permissions(self) -> 'PackedStringArray': ...
    def revoke_granted_permissions(self) -> None: ...
    
class OS_RenderingDriver(Enum):
    RENDERING_DRIVER_VULKAN = 0
    RENDERING_DRIVER_OPENGL3 = 1
    RENDERING_DRIVER_D3D12 = 2
    RENDERING_DRIVER_METAL = 3

class OS_SystemDir(Enum):
    SYSTEM_DIR_DESKTOP = 0
    SYSTEM_DIR_DCIM = 1
    SYSTEM_DIR_DOCUMENTS = 2
    SYSTEM_DIR_DOWNLOADS = 3
    SYSTEM_DIR_MOVIES = 4
    SYSTEM_DIR_MUSIC = 5
    SYSTEM_DIR_PICTURES = 6
    SYSTEM_DIR_RINGTONES = 7

class OS_StdHandleType(Enum):
    STD_HANDLE_INVALID = 0
    STD_HANDLE_CONSOLE = 1
    STD_HANDLE_FILE = 2
    STD_HANDLE_PIPE = 3
    STD_HANDLE_UNKNOWN = 4

class Object:
    NOTIFICATION_POSTINITIALIZE = 0
    NOTIFICATION_PREDELETE = 1
    NOTIFICATION_EXTENSION_RELOADED = 2
    
    script_changed: Signal[Callable[[], None]]  # script_changed()
    property_list_changed: Signal[Callable[[], None]]  # property_list_changed()
    def get_class(self) -> 'String': ...
    def is_class(self, class_: 'String') -> bool: ...
    def set(self, property: 'StringName', value: 'Variant') -> None: ...
    def get(self, property: 'StringName') -> 'Variant': ...
    def set_indexed(self, property_path: 'NodePath', value: 'Variant') -> None: ...
    def get_indexed(self, property_path: 'NodePath') -> 'Variant': ...
    def get_property_list(self) -> 'list[Dictionary]': ...
    def get_method_list(self) -> 'list[Dictionary]': ...
    def property_can_revert(self, property: 'StringName') -> bool: ...
    def property_get_revert(self, property: 'StringName') -> 'Variant': ...
    def notification(self, what: int, reversed: bool = default('''false''')) -> None: ...
    def to_string(self) -> 'String': ...
    def get_instance_id(self) -> int: ...
    def set_script(self, script: 'Variant') -> None: ...
    def get_script(self) -> 'Variant': ...
    def set_meta(self, name: 'StringName', value: 'Variant') -> None: ...
    def remove_meta(self, name: 'StringName') -> None: ...
    def get_meta(self, name: 'StringName', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def has_meta(self, name: 'StringName') -> bool: ...
    def get_meta_list(self) -> 'list[StringName]': ...
    def add_user_signal(self, signal: 'String', arguments: 'Array' = default('''[]''')) -> None: ...
    def has_user_signal(self, signal: 'StringName') -> bool: ...
    def remove_user_signal(self, signal: 'StringName') -> None: ...
    def emit_signal(self, signal: 'StringName', *arg) -> 'Error': ...
    def call(self, method: 'StringName', *arg) -> 'Variant': ...
    def call_deferred(self, method: 'StringName', *arg) -> 'Variant': ...
    def set_deferred(self, property: 'StringName', value: 'Variant') -> None: ...
    def callv(self, method: 'StringName', arg_array: 'Array') -> 'Variant': ...
    def has_method(self, method: 'StringName') -> bool: ...
    def get_method_argument_count(self, method: 'StringName') -> int: ...
    def has_signal(self, signal: 'StringName') -> bool: ...
    def get_signal_list(self) -> 'list[Dictionary]': ...
    def get_signal_connection_list(self, signal: 'StringName') -> 'list[Dictionary]': ...
    def get_incoming_connections(self) -> 'list[Dictionary]': ...
    def connect(self, signal: 'StringName', callable: 'Callable', flags: int = default('''0''')) -> 'Error': ...
    def disconnect(self, signal: 'StringName', callable: 'Callable') -> None: ...
    def is_connected(self, signal: 'StringName', callable: 'Callable') -> bool: ...
    def has_connections(self, signal: 'StringName') -> bool: ...
    def set_block_signals(self, enable: bool) -> None: ...
    def is_blocking_signals(self) -> bool: ...
    def notify_property_list_changed(self) -> None: ...
    def set_message_translation(self, enable: bool) -> None: ...
    def can_translate_messages(self) -> bool: ...
    def tr(self, message: 'StringName', context: 'StringName' = default('''&""''')) -> 'String': ...
    def tr_n(self, message: 'StringName', plural_message: 'StringName', n: int, context: 'StringName' = default('''&""''')) -> 'String': ...
    def get_translation_domain(self) -> 'StringName': ...
    def set_translation_domain(self, domain: 'StringName') -> None: ...
    def is_queued_for_deletion(self) -> bool: ...
    def cancel_free(self) -> None: ...
    
class Object_ConnectFlags(Enum):
    CONNECT_DEFERRED = 1
    CONNECT_PERSIST = 2
    CONNECT_ONE_SHOT = 4
    CONNECT_REFERENCE_COUNTED = 8

class Occluder3D(Resource):
    def get_vertices(self) -> 'PackedVector3Array': ...
    def get_indices(self) -> 'PackedInt32Array': ...
    
class OccluderInstance3D(VisualInstance3D):
    occluder: 'Occluder3D'
    bake_mask: int
    bake_simplification_distance: float
    def set_bake_mask(self, mask: int) -> None: ...
    def get_bake_mask(self) -> int: ...
    def set_bake_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_bake_mask_value(self, layer_number: int) -> bool: ...
    def set_bake_simplification_distance(self, simplification_distance: float) -> None: ...
    def get_bake_simplification_distance(self) -> float: ...
    def set_occluder(self, occluder: 'Occluder3D') -> None: ...
    def get_occluder(self) -> 'Occluder3D': ...
    
class OccluderPolygon2D(Resource):
    closed: bool
    cull_mode: int
    polygon: 'PackedVector2Array'
    def set_closed(self, closed: bool) -> None: ...
    def is_closed(self) -> bool: ...
    def set_cull_mode(self, cull_mode: 'OccluderPolygon2D_CullMode') -> None: ...
    def get_cull_mode(self) -> 'OccluderPolygon2D_CullMode': ...
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    
class OccluderPolygon2D_CullMode(Enum):
    CULL_DISABLED = 0
    CULL_CLOCKWISE = 1
    CULL_COUNTER_CLOCKWISE = 2

class OfflineMultiplayerPeer(MultiplayerPeer):
    pass
    
class OggPacketSequence(Resource):
    packet_data: 'list[PackedByteArray]'
    granule_positions: 'PackedInt64Array'
    sampling_rate: float
    def set_packet_data(self, packet_data: 'list[Array]') -> None: ...
    def get_packet_data(self) -> 'list[Array]': ...
    def set_packet_granule_positions(self, granule_positions: 'PackedInt64Array') -> None: ...
    def get_packet_granule_positions(self) -> 'PackedInt64Array': ...
    def set_sampling_rate(self, sampling_rate: float) -> None: ...
    def get_sampling_rate(self) -> float: ...
    def get_length(self) -> float: ...
    
class OggPacketSequencePlayback(RefCounted):
    pass
    
class OmniLight3D(Light3D):
    omni_range: float
    omni_attenuation: float
    omni_shadow_mode: int
    def set_shadow_mode(self, mode: 'OmniLight3D_ShadowMode') -> None: ...
    def get_shadow_mode(self) -> 'OmniLight3D_ShadowMode': ...
    
class OmniLight3D_ShadowMode(Enum):
    SHADOW_DUAL_PARABOLOID = 0
    SHADOW_CUBE = 1

class OpenXRAPIExtension(RefCounted):
    def get_instance(self) -> int: ...
    def get_system_id(self) -> int: ...
    def get_session(self) -> int: ...
    def transform_from_pose(self, pose: 'intptr') -> 'Transform3D': ...
    def xr_result(self, result: int, format: 'String', args: 'Array') -> bool: ...
    @staticmethod
    def openxr_is_enabled(check_run_in_editor: bool) -> bool: ...
    def get_instance_proc_addr(self, name: 'String') -> int: ...
    def get_error_string(self, result: int) -> 'String': ...
    def get_swapchain_format_name(self, swapchain_format: int) -> 'String': ...
    def set_object_name(self, object_type: int, object_handle: int, object_name: 'String') -> None: ...
    def begin_debug_label_region(self, label_name: 'String') -> None: ...
    def end_debug_label_region(self) -> None: ...
    def insert_debug_label(self, label_name: 'String') -> None: ...
    def is_initialized(self) -> bool: ...
    def is_running(self) -> bool: ...
    def get_play_space(self) -> int: ...
    def get_predicted_display_time(self) -> int: ...
    def get_next_frame_time(self) -> int: ...
    def can_render(self) -> bool: ...
    def find_action(self, name: 'String', action_set: 'RID') -> 'RID': ...
    def action_get_handle(self, action: 'RID') -> int: ...
    def get_hand_tracker(self, hand_index: int) -> int: ...
    def register_composition_layer_provider(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def unregister_composition_layer_provider(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def register_projection_views_extension(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def unregister_projection_views_extension(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def get_render_state_z_near(self) -> float: ...
    def get_render_state_z_far(self) -> float: ...
    def set_velocity_texture(self, render_target: 'RID') -> None: ...
    def set_velocity_depth_texture(self, render_target: 'RID') -> None: ...
    def set_velocity_target_size(self, target_size: 'Vector2i') -> None: ...
    def get_supported_swapchain_formats(self) -> 'PackedInt64Array': ...
    def openxr_swapchain_create(self, create_flags: int, usage_flags: int, swapchain_format: int, width: int, height: int, sample_count: int, array_size: int) -> int: ...
    def openxr_swapchain_free(self, swapchain: int) -> None: ...
    def openxr_swapchain_get_swapchain(self, swapchain: int) -> int: ...
    def openxr_swapchain_acquire(self, swapchain: int) -> None: ...
    def openxr_swapchain_get_image(self, swapchain: int) -> 'RID': ...
    def openxr_swapchain_release(self, swapchain: int) -> None: ...
    def get_projection_layer(self) -> int: ...
    def set_render_region(self, render_region: 'Rect2i') -> None: ...
    def set_emulate_environment_blend_mode_alpha_blend(self, enabled: bool) -> None: ...
    def is_environment_blend_mode_alpha_supported(self) -> 'OpenXRAPIExtension_OpenXRAlphaBlendModeSupport': ...
    
class OpenXRAPIExtension_OpenXRAlphaBlendModeSupport(Enum):
    OPENXR_ALPHA_BLEND_MODE_SUPPORT_NONE = 0
    OPENXR_ALPHA_BLEND_MODE_SUPPORT_REAL = 1
    OPENXR_ALPHA_BLEND_MODE_SUPPORT_EMULATING = 2

class OpenXRAction(Resource):
    localized_name: 'String'
    action_type: int
    toplevel_paths: 'PackedStringArray'
    def set_localized_name(self, localized_name: 'String') -> None: ...
    def get_localized_name(self) -> 'String': ...
    def set_action_type(self, action_type: 'OpenXRAction_ActionType') -> None: ...
    def get_action_type(self) -> 'OpenXRAction_ActionType': ...
    def set_toplevel_paths(self, toplevel_paths: 'PackedStringArray') -> None: ...
    def get_toplevel_paths(self) -> 'PackedStringArray': ...
    
class OpenXRAction_ActionType(Enum):
    OPENXR_ACTION_BOOL = 0
    OPENXR_ACTION_FLOAT = 1
    OPENXR_ACTION_VECTOR2 = 2
    OPENXR_ACTION_POSE = 3

class OpenXRActionBindingModifier(OpenXRBindingModifier):
    pass
    
class OpenXRActionMap(Resource):
    action_sets: 'OpenXRActionSet'
    interaction_profiles: 'OpenXRInteractionProfile'
    def set_action_sets(self, action_sets: 'Array') -> None: ...
    def get_action_sets(self) -> 'Array': ...
    def get_action_set_count(self) -> int: ...
    def find_action_set(self, name: 'String') -> 'OpenXRActionSet': ...
    def get_action_set(self, idx: int) -> 'OpenXRActionSet': ...
    def add_action_set(self, action_set: 'OpenXRActionSet') -> None: ...
    def remove_action_set(self, action_set: 'OpenXRActionSet') -> None: ...
    def set_interaction_profiles(self, interaction_profiles: 'Array') -> None: ...
    def get_interaction_profiles(self) -> 'Array': ...
    def get_interaction_profile_count(self) -> int: ...
    def find_interaction_profile(self, name: 'String') -> 'OpenXRInteractionProfile': ...
    def get_interaction_profile(self, idx: int) -> 'OpenXRInteractionProfile': ...
    def add_interaction_profile(self, interaction_profile: 'OpenXRInteractionProfile') -> None: ...
    def remove_interaction_profile(self, interaction_profile: 'OpenXRInteractionProfile') -> None: ...
    def create_default_action_sets(self) -> None: ...
    
class OpenXRActionSet(Resource):
    localized_name: 'String'
    priority: int
    actions: 'OpenXRAction'
    def set_localized_name(self, localized_name: 'String') -> None: ...
    def get_localized_name(self) -> 'String': ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    def get_action_count(self) -> int: ...
    def set_actions(self, actions: 'Array') -> None: ...
    def get_actions(self) -> 'Array': ...
    def add_action(self, action: 'OpenXRAction') -> None: ...
    def remove_action(self, action: 'OpenXRAction') -> None: ...
    
class OpenXRAnalogThresholdModifier(OpenXRActionBindingModifier):
    on_threshold: float
    off_threshold: float
    on_haptic: 'OpenXRHapticBase'
    off_haptic: 'OpenXRHapticBase'
    def set_on_threshold(self, on_threshold: float) -> None: ...
    def get_on_threshold(self) -> float: ...
    def set_off_threshold(self, off_threshold: float) -> None: ...
    def get_off_threshold(self) -> float: ...
    def set_on_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_on_haptic(self) -> 'OpenXRHapticBase': ...
    def set_off_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_off_haptic(self) -> 'OpenXRHapticBase': ...
    
class OpenXRBindingModifier(Resource):
    def _get_description(self) -> 'String': ...
    def _get_ip_modification(self) -> 'PackedByteArray': ...
    
class OpenXRBindingModifierEditor(PanelContainer):
    binding_modifier_removed: Signal[Callable[['Object'], None]]  # binding_modifier_removed(binding_modifier_editor: 'Object')
    def get_binding_modifier(self) -> 'OpenXRBindingModifier': ...
    def setup(self, action_map: 'OpenXRActionMap', binding_modifier: 'OpenXRBindingModifier') -> None: ...
    
class OpenXRCompositionLayer(Node3D):
    layer_viewport: 'Object'
    use_android_surface: bool
    android_surface_size: 'Vector2i'
    sort_order: int
    alpha_blend: bool
    enable_hole_punch: bool
    def set_layer_viewport(self, viewport: 'SubViewport') -> None: ...
    def get_layer_viewport(self) -> 'SubViewport': ...
    def set_use_android_surface(self, enable: bool) -> None: ...
    def get_use_android_surface(self) -> bool: ...
    def set_android_surface_size(self, size: 'Vector2i') -> None: ...
    def get_android_surface_size(self) -> 'Vector2i': ...
    def set_enable_hole_punch(self, enable: bool) -> None: ...
    def get_enable_hole_punch(self) -> bool: ...
    def set_sort_order(self, order: int) -> None: ...
    def get_sort_order(self) -> int: ...
    def set_alpha_blend(self, enabled: bool) -> None: ...
    def get_alpha_blend(self) -> bool: ...
    def get_android_surface(self) -> 'JavaObject': ...
    def is_natively_supported(self) -> bool: ...
    def intersects_ray(self, origin: 'Vector3', direction: 'Vector3') -> 'Vector2': ...
    
class OpenXRCompositionLayerCylinder(OpenXRCompositionLayer):
    radius: float
    aspect_ratio: float
    central_angle: float
    fallback_segments: int
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_aspect_ratio(self, aspect_ratio: float) -> None: ...
    def get_aspect_ratio(self) -> float: ...
    def set_central_angle(self, angle: float) -> None: ...
    def get_central_angle(self) -> float: ...
    def set_fallback_segments(self, segments: int) -> None: ...
    def get_fallback_segments(self) -> int: ...
    
class OpenXRCompositionLayerEquirect(OpenXRCompositionLayer):
    radius: float
    central_horizontal_angle: float
    upper_vertical_angle: float
    lower_vertical_angle: float
    fallback_segments: int
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_central_horizontal_angle(self, angle: float) -> None: ...
    def get_central_horizontal_angle(self) -> float: ...
    def set_upper_vertical_angle(self, angle: float) -> None: ...
    def get_upper_vertical_angle(self) -> float: ...
    def set_lower_vertical_angle(self, angle: float) -> None: ...
    def get_lower_vertical_angle(self) -> float: ...
    def set_fallback_segments(self, segments: int) -> None: ...
    def get_fallback_segments(self) -> int: ...
    
class OpenXRCompositionLayerQuad(OpenXRCompositionLayer):
    quad_size: 'Vector2'
    def set_quad_size(self, size: 'Vector2') -> None: ...
    def get_quad_size(self) -> 'Vector2': ...
    
class OpenXRDpadBindingModifier(OpenXRIPBindingModifier):
    action_set: 'OpenXRActionSet'
    input_path: 'String'
    threshold: float
    threshold_released: float
    center_region: float
    wedge_angle: float
    is_sticky: bool
    on_haptic: 'OpenXRHapticBase'
    off_haptic: 'OpenXRHapticBase'
    def set_action_set(self, action_set: 'OpenXRActionSet') -> None: ...
    def get_action_set(self) -> 'OpenXRActionSet': ...
    def set_input_path(self, input_path: 'String') -> None: ...
    def get_input_path(self) -> 'String': ...
    def set_threshold(self, threshold: float) -> None: ...
    def get_threshold(self) -> float: ...
    def set_threshold_released(self, threshold_released: float) -> None: ...
    def get_threshold_released(self) -> float: ...
    def set_center_region(self, center_region: float) -> None: ...
    def get_center_region(self) -> float: ...
    def set_wedge_angle(self, wedge_angle: float) -> None: ...
    def get_wedge_angle(self) -> float: ...
    def set_is_sticky(self, is_sticky: bool) -> None: ...
    def get_is_sticky(self) -> bool: ...
    def set_on_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_on_haptic(self) -> 'OpenXRHapticBase': ...
    def set_off_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_off_haptic(self) -> 'OpenXRHapticBase': ...
    
class OpenXRExtensionWrapperExtension(Object):
    def _get_requested_extensions(self) -> 'Dictionary': ...
    def _set_system_properties_and_get_next_pointer(self, next_pointer: 'intptr') -> int: ...
    def _set_instance_create_info_and_get_next_pointer(self, next_pointer: 'intptr') -> int: ...
    def _set_session_create_and_get_next_pointer(self, next_pointer: 'intptr') -> int: ...
    def _set_swapchain_create_info_and_get_next_pointer(self, next_pointer: 'intptr') -> int: ...
    def _set_hand_joint_locations_and_get_next_pointer(self, hand_index: int, next_pointer: 'intptr') -> int: ...
    def _set_projection_views_and_get_next_pointer(self, view_index: int, next_pointer: 'intptr') -> int: ...
    def _get_composition_layer_count(self) -> int: ...
    def _get_composition_layer(self, index: int) -> int: ...
    def _get_composition_layer_order(self, index: int) -> int: ...
    def _get_suggested_tracker_names(self) -> 'PackedStringArray': ...
    def _on_register_metadata(self) -> None: ...
    def _on_before_instance_created(self) -> None: ...
    def _on_instance_created(self, instance: int) -> None: ...
    def _on_instance_destroyed(self) -> None: ...
    def _on_session_created(self, session: int) -> None: ...
    def _on_process(self) -> None: ...
    def _on_pre_render(self) -> None: ...
    def _on_main_swapchains_created(self) -> None: ...
    def _on_pre_draw_viewport(self, viewport: 'RID') -> None: ...
    def _on_post_draw_viewport(self, viewport: 'RID') -> None: ...
    def _on_session_destroyed(self) -> None: ...
    def _on_state_idle(self) -> None: ...
    def _on_state_ready(self) -> None: ...
    def _on_state_synchronized(self) -> None: ...
    def _on_state_visible(self) -> None: ...
    def _on_state_focused(self) -> None: ...
    def _on_state_stopping(self) -> None: ...
    def _on_state_loss_pending(self) -> None: ...
    def _on_state_exiting(self) -> None: ...
    def _on_event_polled(self, event: 'intptr') -> bool: ...
    def _set_viewport_composition_layer_and_get_next_pointer(self, layer: 'intptr', property_values: 'Dictionary', next_pointer: 'intptr') -> int: ...
    def _get_viewport_composition_layer_extension_properties(self) -> 'list[Dictionary]': ...
    def _get_viewport_composition_layer_extension_property_defaults(self) -> 'Dictionary': ...
    def _on_viewport_composition_layer_destroyed(self, layer: 'intptr') -> None: ...
    def _set_android_surface_swapchain_create_info_and_get_next_pointer(self, property_values: 'Dictionary', next_pointer: 'intptr') -> int: ...
    def get_openxr_api(self) -> 'OpenXRAPIExtension': ...
    def register_extension_wrapper(self) -> None: ...
    
class OpenXRHand(Node3D):
    hand: int
    motion_range: int
    hand_skeleton: 'NodePath'
    skeleton_rig: int
    bone_update: int
    def set_hand(self, hand: 'OpenXRHand_Hands') -> None: ...
    def get_hand(self) -> 'OpenXRHand_Hands': ...
    def set_hand_skeleton(self, hand_skeleton: 'NodePath') -> None: ...
    def get_hand_skeleton(self) -> 'NodePath': ...
    def set_motion_range(self, motion_range: 'OpenXRHand_MotionRange') -> None: ...
    def get_motion_range(self) -> 'OpenXRHand_MotionRange': ...
    def set_skeleton_rig(self, skeleton_rig: 'OpenXRHand_SkeletonRig') -> None: ...
    def get_skeleton_rig(self) -> 'OpenXRHand_SkeletonRig': ...
    def set_bone_update(self, bone_update: 'OpenXRHand_BoneUpdate') -> None: ...
    def get_bone_update(self) -> 'OpenXRHand_BoneUpdate': ...
    
class OpenXRHand_Hands(Enum):
    HAND_LEFT = 0
    HAND_RIGHT = 1
    HAND_MAX = 2

class OpenXRHand_MotionRange(Enum):
    MOTION_RANGE_UNOBSTRUCTED = 0
    MOTION_RANGE_CONFORM_TO_CONTROLLER = 1
    MOTION_RANGE_MAX = 2

class OpenXRHand_SkeletonRig(Enum):
    SKELETON_RIG_OPENXR = 0
    SKELETON_RIG_HUMANOID = 1
    SKELETON_RIG_MAX = 2

class OpenXRHand_BoneUpdate(Enum):
    BONE_UPDATE_FULL = 0
    BONE_UPDATE_ROTATION_ONLY = 1
    BONE_UPDATE_MAX = 2

class OpenXRHapticBase(Resource):
    pass
    
class OpenXRHapticVibration(OpenXRHapticBase):
    duration: int
    frequency: float
    amplitude: float
    def set_duration(self, duration: int) -> None: ...
    def get_duration(self) -> int: ...
    def set_frequency(self, frequency: float) -> None: ...
    def get_frequency(self) -> float: ...
    def set_amplitude(self, amplitude: float) -> None: ...
    def get_amplitude(self) -> float: ...
    
class OpenXRIPBinding(Resource):
    action: 'OpenXRAction'
    binding_path: 'String'
    binding_modifiers: 'OpenXRActionBindingModifier'
    paths: 'PackedStringArray'
    def set_action(self, action: 'OpenXRAction') -> None: ...
    def get_action(self) -> 'OpenXRAction': ...
    def set_binding_path(self, binding_path: 'String') -> None: ...
    def get_binding_path(self) -> 'String': ...
    def get_binding_modifier_count(self) -> int: ...
    def get_binding_modifier(self, index: int) -> 'OpenXRActionBindingModifier': ...
    def set_binding_modifiers(self, binding_modifiers: 'Array') -> None: ...
    def get_binding_modifiers(self) -> 'Array': ...
    def set_paths(self, paths: 'PackedStringArray') -> None: ...
    def get_paths(self) -> 'PackedStringArray': ...
    def get_path_count(self) -> int: ...
    def has_path(self, path: 'String') -> bool: ...
    def add_path(self, path: 'String') -> None: ...
    def remove_path(self, path: 'String') -> None: ...
    
class OpenXRIPBindingModifier(OpenXRBindingModifier):
    pass
    
class OpenXRInteractionProfile(Resource):
    interaction_profile_path: 'String'
    bindings: 'OpenXRIPBinding'
    binding_modifiers: 'OpenXRIPBindingModifier'
    def set_interaction_profile_path(self, interaction_profile_path: 'String') -> None: ...
    def get_interaction_profile_path(self) -> 'String': ...
    def get_binding_count(self) -> int: ...
    def get_binding(self, index: int) -> 'OpenXRIPBinding': ...
    def set_bindings(self, bindings: 'Array') -> None: ...
    def get_bindings(self) -> 'Array': ...
    def get_binding_modifier_count(self) -> int: ...
    def get_binding_modifier(self, index: int) -> 'OpenXRIPBindingModifier': ...
    def set_binding_modifiers(self, binding_modifiers: 'Array') -> None: ...
    def get_binding_modifiers(self) -> 'Array': ...
    
class OpenXRInteractionProfileEditor(OpenXRInteractionProfileEditorBase):
    pass
    
class OpenXRInteractionProfileEditorBase(HBoxContainer):
    def setup(self, action_map: 'OpenXRActionMap', interaction_profile: 'OpenXRInteractionProfile') -> None: ...
    
class OpenXRInteractionProfileMetadata(Object):
    def register_profile_rename(self, old_name: 'String', new_name: 'String') -> None: ...
    def register_top_level_path(self, display_name: 'String', openxr_path: 'String', openxr_extension_name: 'String') -> None: ...
    def register_interaction_profile(self, display_name: 'String', openxr_path: 'String', openxr_extension_name: 'String') -> None: ...
    def register_io_path(self, interaction_profile: 'String', display_name: 'String', toplevel_path: 'String', openxr_path: 'String', openxr_extension_name: 'String', action_type: 'OpenXRAction_ActionType') -> None: ...
    
class OpenXRInterface(XRInterface):
    display_refresh_rate: float
    render_target_size_multiplier: float
    foveation_level: int
    foveation_dynamic: bool
    vrs_min_radius: float
    vrs_strength: float
    session_begun: Signal[Callable[[], None]]  # session_begun()
    session_stopping: Signal[Callable[[], None]]  # session_stopping()
    session_focussed: Signal[Callable[[], None]]  # session_focussed()
    session_visible: Signal[Callable[[], None]]  # session_visible()
    session_loss_pending: Signal[Callable[[], None]]  # session_loss_pending()
    instance_exiting: Signal[Callable[[], None]]  # instance_exiting()
    pose_recentered: Signal[Callable[[], None]]  # pose_recentered()
    refresh_rate_changed: Signal[Callable[['float'], None]]  # refresh_rate_changed(refresh_rate: float)
    def get_display_refresh_rate(self) -> float: ...
    def set_display_refresh_rate(self, refresh_rate: float) -> None: ...
    def get_render_target_size_multiplier(self) -> float: ...
    def set_render_target_size_multiplier(self, multiplier: float) -> None: ...
    def is_foveation_supported(self) -> bool: ...
    def get_foveation_level(self) -> int: ...
    def set_foveation_level(self, foveation_level: int) -> None: ...
    def get_foveation_dynamic(self) -> bool: ...
    def set_foveation_dynamic(self, foveation_dynamic: bool) -> None: ...
    def is_action_set_active(self, name: 'String') -> bool: ...
    def set_action_set_active(self, name: 'String', active: bool) -> None: ...
    def get_action_sets(self) -> 'Array': ...
    def get_available_display_refresh_rates(self) -> 'Array': ...
    def set_motion_range(self, hand: 'OpenXRInterface_Hand', motion_range: 'OpenXRInterface_HandMotionRange') -> None: ...
    def get_motion_range(self, hand: 'OpenXRInterface_Hand') -> 'OpenXRInterface_HandMotionRange': ...
    def get_hand_tracking_source(self, hand: 'OpenXRInterface_Hand') -> 'OpenXRInterface_HandTrackedSource': ...
    def get_hand_joint_flags(self, hand: 'OpenXRInterface_Hand', joint: 'OpenXRInterface_HandJoints') -> 'OpenXRInterface_HandJointFlags': ...
    def get_hand_joint_rotation(self, hand: 'OpenXRInterface_Hand', joint: 'OpenXRInterface_HandJoints') -> 'Quaternion': ...
    def get_hand_joint_position(self, hand: 'OpenXRInterface_Hand', joint: 'OpenXRInterface_HandJoints') -> 'Vector3': ...
    def get_hand_joint_radius(self, hand: 'OpenXRInterface_Hand', joint: 'OpenXRInterface_HandJoints') -> float: ...
    def get_hand_joint_linear_velocity(self, hand: 'OpenXRInterface_Hand', joint: 'OpenXRInterface_HandJoints') -> 'Vector3': ...
    def get_hand_joint_angular_velocity(self, hand: 'OpenXRInterface_Hand', joint: 'OpenXRInterface_HandJoints') -> 'Vector3': ...
    def is_hand_tracking_supported(self) -> bool: ...
    def is_hand_interaction_supported(self) -> bool: ...
    def is_eye_gaze_interaction_supported(self) -> bool: ...
    def get_vrs_min_radius(self) -> float: ...
    def set_vrs_min_radius(self, radius: float) -> None: ...
    def get_vrs_strength(self) -> float: ...
    def set_vrs_strength(self, strength: float) -> None: ...
    
class OpenXRInterface_Hand(Enum):
    HAND_LEFT = 0
    HAND_RIGHT = 1
    HAND_MAX = 2

class OpenXRInterface_HandMotionRange(Enum):
    HAND_MOTION_RANGE_UNOBSTRUCTED = 0
    HAND_MOTION_RANGE_CONFORM_TO_CONTROLLER = 1
    HAND_MOTION_RANGE_MAX = 2

class OpenXRInterface_HandTrackedSource(Enum):
    HAND_TRACKED_SOURCE_UNKNOWN = 0
    HAND_TRACKED_SOURCE_UNOBSTRUCTED = 1
    HAND_TRACKED_SOURCE_CONTROLLER = 2
    HAND_TRACKED_SOURCE_MAX = 3

class OpenXRInterface_HandJoints(Enum):
    HAND_JOINT_PALM = 0
    HAND_JOINT_WRIST = 1
    HAND_JOINT_THUMB_METACARPAL = 2
    HAND_JOINT_THUMB_PROXIMAL = 3
    HAND_JOINT_THUMB_DISTAL = 4
    HAND_JOINT_THUMB_TIP = 5
    HAND_JOINT_INDEX_METACARPAL = 6
    HAND_JOINT_INDEX_PROXIMAL = 7
    HAND_JOINT_INDEX_INTERMEDIATE = 8
    HAND_JOINT_INDEX_DISTAL = 9
    HAND_JOINT_INDEX_TIP = 10
    HAND_JOINT_MIDDLE_METACARPAL = 11
    HAND_JOINT_MIDDLE_PROXIMAL = 12
    HAND_JOINT_MIDDLE_INTERMEDIATE = 13
    HAND_JOINT_MIDDLE_DISTAL = 14
    HAND_JOINT_MIDDLE_TIP = 15
    HAND_JOINT_RING_METACARPAL = 16
    HAND_JOINT_RING_PROXIMAL = 17
    HAND_JOINT_RING_INTERMEDIATE = 18
    HAND_JOINT_RING_DISTAL = 19
    HAND_JOINT_RING_TIP = 20
    HAND_JOINT_LITTLE_METACARPAL = 21
    HAND_JOINT_LITTLE_PROXIMAL = 22
    HAND_JOINT_LITTLE_INTERMEDIATE = 23
    HAND_JOINT_LITTLE_DISTAL = 24
    HAND_JOINT_LITTLE_TIP = 25
    HAND_JOINT_MAX = 26

class OpenXRInterface_HandJointFlags(Enum):
    HAND_JOINT_NONE = 0
    HAND_JOINT_ORIENTATION_VALID = 1
    HAND_JOINT_ORIENTATION_TRACKED = 2
    HAND_JOINT_POSITION_VALID = 4
    HAND_JOINT_POSITION_TRACKED = 8
    HAND_JOINT_LINEAR_VELOCITY_VALID = 16
    HAND_JOINT_ANGULAR_VELOCITY_VALID = 32

class OpenXRVisibilityMask(VisualInstance3D):
    pass
    
class OptimizedTranslation(Translation):
    def generate(self, from_: 'Translation') -> None: ...
    
class OptionButton(Button):
    selected: int
    fit_to_longest_item: bool
    allow_reselect: bool
    item_count: int
    item_selected: Signal[Callable[['int'], None]]  # item_selected(index: int)
    item_focused: Signal[Callable[['int'], None]]  # item_focused(index: int)
    def add_item(self, label: 'String', id: int = default('''-1''')) -> None: ...
    def add_icon_item(self, texture: 'Texture2D', label: 'String', id: int = default('''-1''')) -> None: ...
    def set_item_text(self, idx: int, text: 'String') -> None: ...
    def set_item_icon(self, idx: int, texture: 'Texture2D') -> None: ...
    def set_item_disabled(self, idx: int, disabled: bool) -> None: ...
    def set_item_id(self, idx: int, id: int) -> None: ...
    def set_item_metadata(self, idx: int, metadata: 'Variant') -> None: ...
    def set_item_tooltip(self, idx: int, tooltip: 'String') -> None: ...
    def get_item_text(self, idx: int) -> 'String': ...
    def get_item_icon(self, idx: int) -> 'Texture2D': ...
    def get_item_id(self, idx: int) -> int: ...
    def get_item_index(self, id: int) -> int: ...
    def get_item_metadata(self, idx: int) -> 'Variant': ...
    def get_item_tooltip(self, idx: int) -> 'String': ...
    def is_item_disabled(self, idx: int) -> bool: ...
    def is_item_separator(self, idx: int) -> bool: ...
    def add_separator(self, text: 'String' = default('''""''')) -> None: ...
    def clear(self) -> None: ...
    def select(self, idx: int) -> None: ...
    def get_selected(self) -> int: ...
    def get_selected_id(self) -> int: ...
    def get_selected_metadata(self) -> 'Variant': ...
    def remove_item(self, idx: int) -> None: ...
    def get_popup(self) -> 'PopupMenu': ...
    def show_popup(self) -> None: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    def has_selectable_items(self) -> bool: ...
    def get_selectable_item(self, from_last: bool = default('''false''')) -> int: ...
    def set_fit_to_longest_item(self, fit: bool) -> None: ...
    def is_fit_to_longest_item(self) -> bool: ...
    def set_allow_reselect(self, allow: bool) -> None: ...
    def get_allow_reselect(self) -> bool: ...
    def set_disable_shortcuts(self, disabled: bool) -> None: ...
    
class PCKPacker(RefCounted):
    def pck_start(self, pck_path: 'String', alignment: int = default('''32'''), key: 'String' = default('''"0000000000000000000000000000000000000000000000000000000000000000"'''), encrypt_directory: bool = default('''false''')) -> 'Error': ...
    def add_file(self, target_path: 'String', source_path: 'String', encrypt: bool = default('''false''')) -> 'Error': ...
    def add_file_removal(self, target_path: 'String') -> 'Error': ...
    def flush(self, verbose: bool = default('''false''')) -> 'Error': ...
    
class PackedDataContainer(Resource):
    def pack(self, value: 'Variant') -> 'Error': ...
    def size(self) -> int: ...
    
class PackedDataContainerRef(RefCounted):
    def size(self) -> int: ...
    
class PackedScene(Resource):
    def pack(self, path: 'Node') -> 'Error': ...
    def instantiate(self, edit_state: 'PackedScene_GenEditState' = default('''0''')) -> 'Node': ...
    def can_instantiate(self) -> bool: ...
    def get_state(self) -> 'SceneState': ...
    
class PackedScene_GenEditState(Enum):
    GEN_EDIT_STATE_DISABLED = 0
    GEN_EDIT_STATE_INSTANCE = 1
    GEN_EDIT_STATE_MAIN = 2
    GEN_EDIT_STATE_MAIN_INHERITED = 3

class PacketPeer(RefCounted):
    encode_buffer_max_size: int
    def get_var(self, allow_objects: bool = default('''false''')) -> 'Variant': ...
    def put_var(self, var: 'Variant', full_objects: bool = default('''false''')) -> 'Error': ...
    def get_packet(self) -> 'PackedByteArray': ...
    def put_packet(self, buffer: 'PackedByteArray') -> 'Error': ...
    def get_packet_error(self) -> 'Error': ...
    def get_available_packet_count(self) -> int: ...
    def get_encode_buffer_max_size(self) -> int: ...
    def set_encode_buffer_max_size(self, max_size: int) -> None: ...
    
class PacketPeerDTLS(PacketPeer):
    def poll(self) -> None: ...
    def connect_to_peer(self, packet_peer: 'PacketPeerUDP', hostname: 'String', client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def get_status(self) -> 'PacketPeerDTLS_Status': ...
    def disconnect_from_peer(self) -> None: ...
    
class PacketPeerDTLS_Status(Enum):
    STATUS_DISCONNECTED = 0
    STATUS_HANDSHAKING = 1
    STATUS_CONNECTED = 2
    STATUS_ERROR = 3
    STATUS_ERROR_HOSTNAME_MISMATCH = 4

class PacketPeerExtension(PacketPeer):
    def _get_packet(self, r_buffer: 'intptr', r_buffer_size: 'intptr') -> 'Error': ...
    def _put_packet(self, p_buffer: 'intptr', p_buffer_size: int) -> 'Error': ...
    def _get_available_packet_count(self) -> int: ...
    def _get_max_packet_size(self) -> int: ...
    
class PacketPeerStream(PacketPeer):
    input_buffer_max_size: int
    output_buffer_max_size: int
    stream_peer: 'StreamPeer'
    def set_stream_peer(self, peer: 'StreamPeer') -> None: ...
    def get_stream_peer(self) -> 'StreamPeer': ...
    def set_input_buffer_max_size(self, max_size_bytes: int) -> None: ...
    def set_output_buffer_max_size(self, max_size_bytes: int) -> None: ...
    def get_input_buffer_max_size(self) -> int: ...
    def get_output_buffer_max_size(self) -> int: ...
    
class PacketPeerUDP(PacketPeer):
    def bind(self, port: int, bind_address: 'String' = default('''"*"'''), recv_buf_size: int = default('''65536''')) -> 'Error': ...
    def close(self) -> None: ...
    def wait(self) -> 'Error': ...
    def is_bound(self) -> bool: ...
    def connect_to_host(self, host: 'String', port: int) -> 'Error': ...
    def is_socket_connected(self) -> bool: ...
    def get_packet_ip(self) -> 'String': ...
    def get_packet_port(self) -> int: ...
    def get_local_port(self) -> int: ...
    def set_dest_address(self, host: 'String', port: int) -> 'Error': ...
    def set_broadcast_enabled(self, enabled: bool) -> None: ...
    def join_multicast_group(self, multicast_address: 'String', interface_name: 'String') -> 'Error': ...
    def leave_multicast_group(self, multicast_address: 'String', interface_name: 'String') -> 'Error': ...
    
class Panel(Control):
    pass
    
class PanelContainer(Container):
    pass
    
class PanoramaSkyMaterial(Material):
    panorama: 'Texture2D'
    filter: bool
    energy_multiplier: float
    def set_panorama(self, texture: 'Texture2D') -> None: ...
    def get_panorama(self) -> 'Texture2D': ...
    def set_filtering_enabled(self, enabled: bool) -> None: ...
    def is_filtering_enabled(self) -> bool: ...
    def set_energy_multiplier(self, multiplier: float) -> None: ...
    def get_energy_multiplier(self) -> float: ...
    
class Parallax2D(Node2D):
    scroll_scale: 'Vector2'
    scroll_offset: 'Vector2'
    repeat_size: 'Vector2'
    autoscroll: 'Vector2'
    repeat_times: int
    limit_begin: 'Vector2'
    limit_end: 'Vector2'
    follow_viewport: bool
    ignore_camera_scroll: bool
    screen_offset: 'Vector2'
    def set_scroll_scale(self, scale: 'Vector2') -> None: ...
    def get_scroll_scale(self) -> 'Vector2': ...
    def set_repeat_size(self, repeat_size: 'Vector2') -> None: ...
    def get_repeat_size(self) -> 'Vector2': ...
    def set_repeat_times(self, repeat_times: int) -> None: ...
    def get_repeat_times(self) -> int: ...
    def set_autoscroll(self, autoscroll: 'Vector2') -> None: ...
    def get_autoscroll(self) -> 'Vector2': ...
    def set_scroll_offset(self, offset: 'Vector2') -> None: ...
    def get_scroll_offset(self) -> 'Vector2': ...
    def set_screen_offset(self, offset: 'Vector2') -> None: ...
    def get_screen_offset(self) -> 'Vector2': ...
    def set_limit_begin(self, offset: 'Vector2') -> None: ...
    def get_limit_begin(self) -> 'Vector2': ...
    def set_limit_end(self, offset: 'Vector2') -> None: ...
    def get_limit_end(self) -> 'Vector2': ...
    def set_follow_viewport(self, follow: bool) -> None: ...
    def get_follow_viewport(self) -> bool: ...
    def set_ignore_camera_scroll(self, ignore: bool) -> None: ...
    def is_ignore_camera_scroll(self) -> bool: ...
    
class ParallaxBackground(CanvasLayer):
    scroll_offset: 'Vector2'
    scroll_base_offset: 'Vector2'
    scroll_base_scale: 'Vector2'
    scroll_limit_begin: 'Vector2'
    scroll_limit_end: 'Vector2'
    scroll_ignore_camera_zoom: bool
    def set_scroll_offset(self, offset: 'Vector2') -> None: ...
    def get_scroll_offset(self) -> 'Vector2': ...
    def set_scroll_base_offset(self, offset: 'Vector2') -> None: ...
    def get_scroll_base_offset(self) -> 'Vector2': ...
    def set_scroll_base_scale(self, scale: 'Vector2') -> None: ...
    def get_scroll_base_scale(self) -> 'Vector2': ...
    def set_limit_begin(self, offset: 'Vector2') -> None: ...
    def get_limit_begin(self) -> 'Vector2': ...
    def set_limit_end(self, offset: 'Vector2') -> None: ...
    def get_limit_end(self) -> 'Vector2': ...
    def set_ignore_camera_zoom(self, ignore: bool) -> None: ...
    def is_ignore_camera_zoom(self) -> bool: ...
    
class ParallaxLayer(Node2D):
    motion_scale: 'Vector2'
    motion_offset: 'Vector2'
    motion_mirroring: 'Vector2'
    def set_motion_scale(self, scale: 'Vector2') -> None: ...
    def get_motion_scale(self) -> 'Vector2': ...
    def set_motion_offset(self, offset: 'Vector2') -> None: ...
    def get_motion_offset(self) -> 'Vector2': ...
    def set_mirroring(self, mirror: 'Vector2') -> None: ...
    def get_mirroring(self) -> 'Vector2': ...
    
class ParticleProcessMaterial(Material):
    lifetime_randomness: float
    particle_flag_align_y: bool
    particle_flag_rotate_y: bool
    particle_flag_disable_z: bool
    particle_flag_damping_as_friction: bool
    emission_shape_offset: 'Vector3'
    emission_shape_scale: 'Vector3'
    emission_shape: int
    emission_sphere_radius: float
    emission_box_extents: 'Vector3'
    emission_point_texture: 'Texture2D'
    emission_normal_texture: 'Texture2D'
    emission_color_texture: 'Texture2D'
    emission_point_count: int
    emission_ring_axis: 'Vector3'
    emission_ring_height: float
    emission_ring_radius: float
    emission_ring_inner_radius: float
    emission_ring_cone_angle: float
    angle: 'Vector2'
    angle_min: float
    angle_max: float
    angle_curve: 'CurveTexture'
    inherit_velocity_ratio: float
    velocity_pivot: 'Vector3'
    direction: 'Vector3'
    spread: float
    flatness: float
    initial_velocity: 'Vector2'
    initial_velocity_min: float
    initial_velocity_max: float
    angular_velocity: 'Vector2'
    angular_velocity_min: float
    angular_velocity_max: float
    angular_velocity_curve: 'CurveTexture'
    directional_velocity: 'Vector2'
    directional_velocity_min: float
    directional_velocity_max: float
    directional_velocity_curve: 'CurveXYZTexture'
    orbit_velocity: 'Vector2'
    orbit_velocity_min: float
    orbit_velocity_max: float
    orbit_velocity_curve: 'CurveTexture'
    radial_velocity: 'Vector2'
    radial_velocity_min: float
    radial_velocity_max: float
    radial_velocity_curve: 'CurveTexture'
    velocity_limit_curve: 'CurveTexture'
    gravity: 'Vector3'
    linear_accel: 'Vector2'
    linear_accel_min: float
    linear_accel_max: float
    linear_accel_curve: 'CurveTexture'
    radial_accel: 'Vector2'
    radial_accel_min: float
    radial_accel_max: float
    radial_accel_curve: 'CurveTexture'
    tangential_accel: 'Vector2'
    tangential_accel_min: float
    tangential_accel_max: float
    tangential_accel_curve: 'CurveTexture'
    damping: 'Vector2'
    damping_min: float
    damping_max: float
    damping_curve: 'CurveTexture'
    attractor_interaction_enabled: bool
    scale: 'Vector2'
    scale_min: float
    scale_max: float
    scale_curve: 'CurveTexture'
    scale_over_velocity: 'Vector2'
    scale_over_velocity_min: float
    scale_over_velocity_max: float
    scale_over_velocity_curve: 'CurveTexture'
    color: 'Color'
    color_ramp: 'GradientTexture1D'
    color_initial_ramp: 'GradientTexture1D'
    alpha_curve: 'CurveTexture'
    emission_curve: 'CurveTexture'
    hue_variation: 'Vector2'
    hue_variation_min: float
    hue_variation_max: float
    hue_variation_curve: 'CurveTexture'
    anim_speed: 'Vector2'
    anim_speed_min: float
    anim_speed_max: float
    anim_speed_curve: 'CurveTexture'
    anim_offset: 'Vector2'
    anim_offset_min: float
    anim_offset_max: float
    anim_offset_curve: 'CurveTexture'
    turbulence_enabled: bool
    turbulence_noise_strength: float
    turbulence_noise_scale: float
    turbulence_noise_speed: 'Vector3'
    turbulence_noise_speed_random: float
    turbulence_influence: 'Vector2'
    turbulence_influence_min: float
    turbulence_influence_max: float
    turbulence_initial_displacement: 'Vector2'
    turbulence_initial_displacement_min: float
    turbulence_initial_displacement_max: float
    turbulence_influence_over_life: 'CurveTexture'
    collision_mode: int
    collision_friction: float
    collision_bounce: float
    collision_use_scale: bool
    sub_emitter_mode: int
    sub_emitter_frequency: float
    sub_emitter_amount_at_end: int
    sub_emitter_amount_at_collision: int
    sub_emitter_amount_at_start: int
    sub_emitter_keep_velocity: bool
    emission_shape_changed: Signal[Callable[[], None]]  # emission_shape_changed()
    def set_direction(self, degrees: 'Vector3') -> None: ...
    def get_direction(self) -> 'Vector3': ...
    def set_inherit_velocity_ratio(self, ratio: float) -> None: ...
    def get_inherit_velocity_ratio(self) -> float: ...
    def set_spread(self, degrees: float) -> None: ...
    def get_spread(self) -> float: ...
    def set_flatness(self, amount: float) -> None: ...
    def get_flatness(self) -> float: ...
    def set_param(self, param: 'ParticleProcessMaterial_Parameter', value: 'Vector2') -> None: ...
    def get_param(self, param: 'ParticleProcessMaterial_Parameter') -> 'Vector2': ...
    def set_param_min(self, param: 'ParticleProcessMaterial_Parameter', value: float) -> None: ...
    def get_param_min(self, param: 'ParticleProcessMaterial_Parameter') -> float: ...
    def set_param_max(self, param: 'ParticleProcessMaterial_Parameter', value: float) -> None: ...
    def get_param_max(self, param: 'ParticleProcessMaterial_Parameter') -> float: ...
    def set_param_texture(self, param: 'ParticleProcessMaterial_Parameter', texture: 'Texture2D') -> None: ...
    def get_param_texture(self, param: 'ParticleProcessMaterial_Parameter') -> 'Texture2D': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color_ramp(self, ramp: 'Texture2D') -> None: ...
    def get_color_ramp(self) -> 'Texture2D': ...
    def set_alpha_curve(self, curve: 'Texture2D') -> None: ...
    def get_alpha_curve(self) -> 'Texture2D': ...
    def set_emission_curve(self, curve: 'Texture2D') -> None: ...
    def get_emission_curve(self) -> 'Texture2D': ...
    def set_color_initial_ramp(self, ramp: 'Texture2D') -> None: ...
    def get_color_initial_ramp(self) -> 'Texture2D': ...
    def set_velocity_limit_curve(self, curve: 'Texture2D') -> None: ...
    def get_velocity_limit_curve(self) -> 'Texture2D': ...
    def set_particle_flag(self, particle_flag: 'ParticleProcessMaterial_ParticleFlags', enable: bool) -> None: ...
    def get_particle_flag(self, particle_flag: 'ParticleProcessMaterial_ParticleFlags') -> bool: ...
    def set_velocity_pivot(self, pivot: 'Vector3') -> None: ...
    def get_velocity_pivot(self) -> 'Vector3': ...
    def set_emission_shape(self, shape: 'ParticleProcessMaterial_EmissionShape') -> None: ...
    def get_emission_shape(self) -> 'ParticleProcessMaterial_EmissionShape': ...
    def set_emission_sphere_radius(self, radius: float) -> None: ...
    def get_emission_sphere_radius(self) -> float: ...
    def set_emission_box_extents(self, extents: 'Vector3') -> None: ...
    def get_emission_box_extents(self) -> 'Vector3': ...
    def set_emission_point_texture(self, texture: 'Texture2D') -> None: ...
    def get_emission_point_texture(self) -> 'Texture2D': ...
    def set_emission_normal_texture(self, texture: 'Texture2D') -> None: ...
    def get_emission_normal_texture(self) -> 'Texture2D': ...
    def set_emission_color_texture(self, texture: 'Texture2D') -> None: ...
    def get_emission_color_texture(self) -> 'Texture2D': ...
    def set_emission_point_count(self, point_count: int) -> None: ...
    def get_emission_point_count(self) -> int: ...
    def set_emission_ring_axis(self, axis: 'Vector3') -> None: ...
    def get_emission_ring_axis(self) -> 'Vector3': ...
    def set_emission_ring_height(self, height: float) -> None: ...
    def get_emission_ring_height(self) -> float: ...
    def set_emission_ring_radius(self, radius: float) -> None: ...
    def get_emission_ring_radius(self) -> float: ...
    def set_emission_ring_inner_radius(self, inner_radius: float) -> None: ...
    def get_emission_ring_inner_radius(self) -> float: ...
    def set_emission_ring_cone_angle(self, cone_angle: float) -> None: ...
    def get_emission_ring_cone_angle(self) -> float: ...
    def set_emission_shape_offset(self, emission_shape_offset: 'Vector3') -> None: ...
    def get_emission_shape_offset(self) -> 'Vector3': ...
    def set_emission_shape_scale(self, emission_shape_scale: 'Vector3') -> None: ...
    def get_emission_shape_scale(self) -> 'Vector3': ...
    def get_turbulence_enabled(self) -> bool: ...
    def set_turbulence_enabled(self, turbulence_enabled: bool) -> None: ...
    def get_turbulence_noise_strength(self) -> float: ...
    def set_turbulence_noise_strength(self, turbulence_noise_strength: float) -> None: ...
    def get_turbulence_noise_scale(self) -> float: ...
    def set_turbulence_noise_scale(self, turbulence_noise_scale: float) -> None: ...
    def get_turbulence_noise_speed_random(self) -> float: ...
    def set_turbulence_noise_speed_random(self, turbulence_noise_speed_random: float) -> None: ...
    def get_turbulence_noise_speed(self) -> 'Vector3': ...
    def set_turbulence_noise_speed(self, turbulence_noise_speed: 'Vector3') -> None: ...
    def get_gravity(self) -> 'Vector3': ...
    def set_gravity(self, accel_vec: 'Vector3') -> None: ...
    def set_lifetime_randomness(self, randomness: float) -> None: ...
    def get_lifetime_randomness(self) -> float: ...
    def get_sub_emitter_mode(self) -> 'ParticleProcessMaterial_SubEmitterMode': ...
    def set_sub_emitter_mode(self, mode: 'ParticleProcessMaterial_SubEmitterMode') -> None: ...
    def get_sub_emitter_frequency(self) -> float: ...
    def set_sub_emitter_frequency(self, hz: float) -> None: ...
    def get_sub_emitter_amount_at_end(self) -> int: ...
    def set_sub_emitter_amount_at_end(self, amount: int) -> None: ...
    def get_sub_emitter_amount_at_collision(self) -> int: ...
    def set_sub_emitter_amount_at_collision(self, amount: int) -> None: ...
    def get_sub_emitter_amount_at_start(self) -> int: ...
    def set_sub_emitter_amount_at_start(self, amount: int) -> None: ...
    def get_sub_emitter_keep_velocity(self) -> bool: ...
    def set_sub_emitter_keep_velocity(self, enable: bool) -> None: ...
    def set_attractor_interaction_enabled(self, enabled: bool) -> None: ...
    def is_attractor_interaction_enabled(self) -> bool: ...
    def set_collision_mode(self, mode: 'ParticleProcessMaterial_CollisionMode') -> None: ...
    def get_collision_mode(self) -> 'ParticleProcessMaterial_CollisionMode': ...
    def set_collision_use_scale(self, radius: bool) -> None: ...
    def is_collision_using_scale(self) -> bool: ...
    def set_collision_friction(self, friction: float) -> None: ...
    def get_collision_friction(self) -> float: ...
    def set_collision_bounce(self, bounce: float) -> None: ...
    def get_collision_bounce(self) -> float: ...
    
class ParticleProcessMaterial_Parameter(Enum):
    PARAM_INITIAL_LINEAR_VELOCITY = 0
    PARAM_ANGULAR_VELOCITY = 1
    PARAM_ORBIT_VELOCITY = 2
    PARAM_LINEAR_ACCEL = 3
    PARAM_RADIAL_ACCEL = 4
    PARAM_TANGENTIAL_ACCEL = 5
    PARAM_DAMPING = 6
    PARAM_ANGLE = 7
    PARAM_SCALE = 8
    PARAM_HUE_VARIATION = 9
    PARAM_ANIM_SPEED = 10
    PARAM_ANIM_OFFSET = 11
    PARAM_RADIAL_VELOCITY = 15
    PARAM_DIRECTIONAL_VELOCITY = 16
    PARAM_SCALE_OVER_VELOCITY = 17
    PARAM_MAX = 18
    PARAM_TURB_VEL_INFLUENCE = 13
    PARAM_TURB_INIT_DISPLACEMENT = 14
    PARAM_TURB_INFLUENCE_OVER_LIFE = 12

class ParticleProcessMaterial_ParticleFlags(Enum):
    PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY = 0
    PARTICLE_FLAG_ROTATE_Y = 1
    PARTICLE_FLAG_DISABLE_Z = 2
    PARTICLE_FLAG_DAMPING_AS_FRICTION = 3
    PARTICLE_FLAG_MAX = 4

class ParticleProcessMaterial_EmissionShape(Enum):
    EMISSION_SHAPE_POINT = 0
    EMISSION_SHAPE_SPHERE = 1
    EMISSION_SHAPE_SPHERE_SURFACE = 2
    EMISSION_SHAPE_BOX = 3
    EMISSION_SHAPE_POINTS = 4
    EMISSION_SHAPE_DIRECTED_POINTS = 5
    EMISSION_SHAPE_RING = 6
    EMISSION_SHAPE_MAX = 7

class ParticleProcessMaterial_SubEmitterMode(Enum):
    SUB_EMITTER_DISABLED = 0
    SUB_EMITTER_CONSTANT = 1
    SUB_EMITTER_AT_END = 2
    SUB_EMITTER_AT_COLLISION = 3
    SUB_EMITTER_AT_START = 4
    SUB_EMITTER_MAX = 5

class ParticleProcessMaterial_CollisionMode(Enum):
    COLLISION_DISABLED = 0
    COLLISION_RIGID = 1
    COLLISION_HIDE_ON_CONTACT = 2
    COLLISION_MAX = 3

class Path2D(Node2D):
    curve: 'Curve2D'
    def set_curve(self, curve: 'Curve2D') -> None: ...
    def get_curve(self) -> 'Curve2D': ...
    
class Path3D(Node3D):
    curve: 'Curve3D'
    curve_changed: Signal[Callable[[], None]]  # curve_changed()
    def set_curve(self, curve: 'Curve3D') -> None: ...
    def get_curve(self) -> 'Curve3D': ...
    
class PathFollow2D(Node2D):
    progress: float
    progress_ratio: float
    h_offset: float
    v_offset: float
    rotates: bool
    cubic_interp: bool
    loop: bool
    def set_progress(self, progress: float) -> None: ...
    def get_progress(self) -> float: ...
    def set_h_offset(self, h_offset: float) -> None: ...
    def get_h_offset(self) -> float: ...
    def set_v_offset(self, v_offset: float) -> None: ...
    def get_v_offset(self) -> float: ...
    def set_progress_ratio(self, ratio: float) -> None: ...
    def get_progress_ratio(self) -> float: ...
    def set_rotates(self, enabled: bool) -> None: ...
    def is_rotating(self) -> bool: ...
    def set_cubic_interpolation(self, enabled: bool) -> None: ...
    def get_cubic_interpolation(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...
    def has_loop(self) -> bool: ...
    
class PathFollow3D(Node3D):
    progress: float
    progress_ratio: float
    h_offset: float
    v_offset: float
    rotation_mode: int
    use_model_front: bool
    cubic_interp: bool
    loop: bool
    tilt_enabled: bool
    def set_progress(self, progress: float) -> None: ...
    def get_progress(self) -> float: ...
    def set_h_offset(self, h_offset: float) -> None: ...
    def get_h_offset(self) -> float: ...
    def set_v_offset(self, v_offset: float) -> None: ...
    def get_v_offset(self) -> float: ...
    def set_progress_ratio(self, ratio: float) -> None: ...
    def get_progress_ratio(self) -> float: ...
    def set_rotation_mode(self, rotation_mode: 'PathFollow3D_RotationMode') -> None: ...
    def get_rotation_mode(self) -> 'PathFollow3D_RotationMode': ...
    def set_cubic_interpolation(self, enabled: bool) -> None: ...
    def get_cubic_interpolation(self) -> bool: ...
    def set_use_model_front(self, enabled: bool) -> None: ...
    def is_using_model_front(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_tilt_enabled(self, enabled: bool) -> None: ...
    def is_tilt_enabled(self) -> bool: ...
    @staticmethod
    def correct_posture(transform: 'Transform3D', rotation_mode: 'PathFollow3D_RotationMode') -> 'Transform3D': ...
    
class PathFollow3D_RotationMode(Enum):
    ROTATION_NONE = 0
    ROTATION_Y = 1
    ROTATION_XY = 2
    ROTATION_XYZ = 3
    ROTATION_ORIENTED = 4

class Performance(Object):
    def get_monitor(self, monitor: 'Performance_Monitor') -> float: ...
    def add_custom_monitor(self, id: 'StringName', callable: 'Callable', arguments: 'Array' = default('''[]''')) -> None: ...
    def remove_custom_monitor(self, id: 'StringName') -> None: ...
    def has_custom_monitor(self, id: 'StringName') -> bool: ...
    def get_custom_monitor(self, id: 'StringName') -> 'Variant': ...
    def get_monitor_modification_time(self) -> int: ...
    def get_custom_monitor_names(self) -> 'list[StringName]': ...
    
class Performance_Monitor(Enum):
    TIME_FPS = 0
    TIME_PROCESS = 1
    TIME_PHYSICS_PROCESS = 2
    TIME_NAVIGATION_PROCESS = 3
    MEMORY_STATIC = 4
    MEMORY_STATIC_MAX = 5
    MEMORY_MESSAGE_BUFFER_MAX = 6
    OBJECT_COUNT = 7
    OBJECT_RESOURCE_COUNT = 8
    OBJECT_NODE_COUNT = 9
    OBJECT_ORPHAN_NODE_COUNT = 10
    RENDER_TOTAL_OBJECTS_IN_FRAME = 11
    RENDER_TOTAL_PRIMITIVES_IN_FRAME = 12
    RENDER_TOTAL_DRAW_CALLS_IN_FRAME = 13
    RENDER_VIDEO_MEM_USED = 14
    RENDER_TEXTURE_MEM_USED = 15
    RENDER_BUFFER_MEM_USED = 16
    PHYSICS_2D_ACTIVE_OBJECTS = 17
    PHYSICS_2D_COLLISION_PAIRS = 18
    PHYSICS_2D_ISLAND_COUNT = 19
    PHYSICS_3D_ACTIVE_OBJECTS = 20
    PHYSICS_3D_COLLISION_PAIRS = 21
    PHYSICS_3D_ISLAND_COUNT = 22
    AUDIO_OUTPUT_LATENCY = 23
    NAVIGATION_ACTIVE_MAPS = 24
    NAVIGATION_REGION_COUNT = 25
    NAVIGATION_AGENT_COUNT = 26
    NAVIGATION_LINK_COUNT = 27
    NAVIGATION_POLYGON_COUNT = 28
    NAVIGATION_EDGE_COUNT = 29
    NAVIGATION_EDGE_MERGE_COUNT = 30
    NAVIGATION_EDGE_CONNECTION_COUNT = 31
    NAVIGATION_EDGE_FREE_COUNT = 32
    NAVIGATION_OBSTACLE_COUNT = 33
    PIPELINE_COMPILATIONS_CANVAS = 34
    PIPELINE_COMPILATIONS_MESH = 35
    PIPELINE_COMPILATIONS_SURFACE = 36
    PIPELINE_COMPILATIONS_DRAW = 37
    PIPELINE_COMPILATIONS_SPECIALIZATION = 38
    MONITOR_MAX = 39

class PhysicalBone2D(RigidBody2D):
    bone2d_nodepath: 'NodePath'
    bone2d_index: int
    auto_configure_joint: bool
    simulate_physics: bool
    follow_bone_when_simulating: bool
    def get_joint(self) -> 'Joint2D': ...
    def get_auto_configure_joint(self) -> bool: ...
    def set_auto_configure_joint(self, auto_configure_joint: bool) -> None: ...
    def set_simulate_physics(self, simulate_physics: bool) -> None: ...
    def get_simulate_physics(self) -> bool: ...
    def is_simulating_physics(self) -> bool: ...
    def set_bone2d_nodepath(self, nodepath: 'NodePath') -> None: ...
    def get_bone2d_nodepath(self) -> 'NodePath': ...
    def set_bone2d_index(self, bone_index: int) -> None: ...
    def get_bone2d_index(self) -> int: ...
    def set_follow_bone_when_simulating(self, follow_bone: bool) -> None: ...
    def get_follow_bone_when_simulating(self) -> bool: ...
    
class PhysicalBone3D(PhysicsBody3D):
    joint_type: int
    joint_offset: 'Transform3D'
    joint_rotation: 'Vector3'
    body_offset: 'Transform3D'
    mass: float
    friction: float
    bounce: float
    gravity_scale: float
    custom_integrator: bool
    linear_damp_mode: int
    linear_damp: float
    angular_damp_mode: int
    angular_damp: float
    linear_velocity: 'Vector3'
    angular_velocity: 'Vector3'
    can_sleep: bool
    def _integrate_forces(self, state: 'PhysicsDirectBodyState3D') -> None: ...
    def apply_central_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_impulse(self, impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def set_joint_type(self, joint_type: 'PhysicalBone3D_JointType') -> None: ...
    def get_joint_type(self) -> 'PhysicalBone3D_JointType': ...
    def set_joint_offset(self, offset: 'Transform3D') -> None: ...
    def get_joint_offset(self) -> 'Transform3D': ...
    def set_joint_rotation(self, euler: 'Vector3') -> None: ...
    def get_joint_rotation(self) -> 'Vector3': ...
    def set_body_offset(self, offset: 'Transform3D') -> None: ...
    def get_body_offset(self) -> 'Transform3D': ...
    def get_simulate_physics(self) -> bool: ...
    def is_simulating_physics(self) -> bool: ...
    def get_bone_id(self) -> int: ...
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_friction(self, friction: float) -> None: ...
    def get_friction(self) -> float: ...
    def set_bounce(self, bounce: float) -> None: ...
    def get_bounce(self) -> float: ...
    def set_gravity_scale(self, gravity_scale: float) -> None: ...
    def get_gravity_scale(self) -> float: ...
    def set_linear_damp_mode(self, linear_damp_mode: 'PhysicalBone3D_DampMode') -> None: ...
    def get_linear_damp_mode(self) -> 'PhysicalBone3D_DampMode': ...
    def set_angular_damp_mode(self, angular_damp_mode: 'PhysicalBone3D_DampMode') -> None: ...
    def get_angular_damp_mode(self) -> 'PhysicalBone3D_DampMode': ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_linear_velocity(self, linear_velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, angular_velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_use_custom_integrator(self, enable: bool) -> None: ...
    def is_using_custom_integrator(self) -> bool: ...
    def set_can_sleep(self, able_to_sleep: bool) -> None: ...
    def is_able_to_sleep(self) -> bool: ...
    
class PhysicalBone3D_DampMode(Enum):
    DAMP_MODE_COMBINE = 0
    DAMP_MODE_REPLACE = 1

class PhysicalBone3D_JointType(Enum):
    JOINT_TYPE_NONE = 0
    JOINT_TYPE_PIN = 1
    JOINT_TYPE_CONE = 2
    JOINT_TYPE_HINGE = 3
    JOINT_TYPE_SLIDER = 4
    JOINT_TYPE_6DOF = 5

class PhysicalBoneSimulator3D(SkeletonModifier3D):
    def is_simulating_physics(self) -> bool: ...
    def physical_bones_stop_simulation(self) -> None: ...
    def physical_bones_start_simulation(self, bones: 'list[StringName]' = default('''[]''')) -> None: ...
    def physical_bones_add_collision_exception(self, exception: 'RID') -> None: ...
    def physical_bones_remove_collision_exception(self, exception: 'RID') -> None: ...
    
class PhysicalSkyMaterial(Material):
    rayleigh_coefficient: float
    rayleigh_color: 'Color'
    mie_coefficient: float
    mie_eccentricity: float
    mie_color: 'Color'
    turbidity: float
    sun_disk_scale: float
    ground_color: 'Color'
    energy_multiplier: float
    use_debanding: bool
    night_sky: 'Texture2D'
    def set_rayleigh_coefficient(self, rayleigh: float) -> None: ...
    def get_rayleigh_coefficient(self) -> float: ...
    def set_rayleigh_color(self, color: 'Color') -> None: ...
    def get_rayleigh_color(self) -> 'Color': ...
    def set_mie_coefficient(self, mie: float) -> None: ...
    def get_mie_coefficient(self) -> float: ...
    def set_mie_eccentricity(self, eccentricity: float) -> None: ...
    def get_mie_eccentricity(self) -> float: ...
    def set_mie_color(self, color: 'Color') -> None: ...
    def get_mie_color(self) -> 'Color': ...
    def set_turbidity(self, turbidity: float) -> None: ...
    def get_turbidity(self) -> float: ...
    def set_sun_disk_scale(self, scale: float) -> None: ...
    def get_sun_disk_scale(self) -> float: ...
    def set_ground_color(self, color: 'Color') -> None: ...
    def get_ground_color(self) -> 'Color': ...
    def set_energy_multiplier(self, multiplier: float) -> None: ...
    def get_energy_multiplier(self) -> float: ...
    def set_use_debanding(self, use_debanding: bool) -> None: ...
    def get_use_debanding(self) -> bool: ...
    def set_night_sky(self, night_sky: 'Texture2D') -> None: ...
    def get_night_sky(self) -> 'Texture2D': ...
    
class PhysicsBody2D(CollisionObject2D):
    def move_and_collide(self, motion: 'Vector2', test_only: bool = default('''false'''), safe_margin: float = default('''0.08'''), recovery_as_collision: bool = default('''false''')) -> 'KinematicCollision2D': ...
    def test_move(self, from_: 'Transform2D', motion: 'Vector2', collision: 'KinematicCollision2D' = default('''null'''), safe_margin: float = default('''0.08'''), recovery_as_collision: bool = default('''false''')) -> bool: ...
    def get_gravity(self) -> 'Vector2': ...
    def get_collision_exceptions(self) -> 'list[PhysicsBody2D]': ...
    def add_collision_exception_with(self, body: 'Node') -> None: ...
    def remove_collision_exception_with(self, body: 'Node') -> None: ...
    
class PhysicsBody3D(CollisionObject3D):
    axis_lock_linear_x: bool
    axis_lock_linear_y: bool
    axis_lock_linear_z: bool
    axis_lock_angular_x: bool
    axis_lock_angular_y: bool
    axis_lock_angular_z: bool
    def move_and_collide(self, motion: 'Vector3', test_only: bool = default('''false'''), safe_margin: float = default('''0.001'''), recovery_as_collision: bool = default('''false'''), max_collisions: int = default('''1''')) -> 'KinematicCollision3D': ...
    def test_move(self, from_: 'Transform3D', motion: 'Vector3', collision: 'KinematicCollision3D' = default('''null'''), safe_margin: float = default('''0.001'''), recovery_as_collision: bool = default('''false'''), max_collisions: int = default('''1''')) -> bool: ...
    def get_gravity(self) -> 'Vector3': ...
    def set_axis_lock(self, axis: 'PhysicsServer3D_BodyAxis', lock: bool) -> None: ...
    def get_axis_lock(self, axis: 'PhysicsServer3D_BodyAxis') -> bool: ...
    def get_collision_exceptions(self) -> 'list[PhysicsBody3D]': ...
    def add_collision_exception_with(self, body: 'Node') -> None: ...
    def remove_collision_exception_with(self, body: 'Node') -> None: ...
    
class PhysicsDirectBodyState2D(Object):
    step: float
    inverse_mass: float
    inverse_inertia: float
    total_angular_damp: float
    total_linear_damp: float
    total_gravity: 'Vector2'
    center_of_mass: 'Vector2'
    center_of_mass_local: 'Vector2'
    angular_velocity: float
    linear_velocity: 'Vector2'
    sleeping: bool
    transform: 'Transform2D'
    def get_total_gravity(self) -> 'Vector2': ...
    def get_total_linear_damp(self) -> float: ...
    def get_total_angular_damp(self) -> float: ...
    def get_center_of_mass(self) -> 'Vector2': ...
    def get_center_of_mass_local(self) -> 'Vector2': ...
    def get_inverse_mass(self) -> float: ...
    def get_inverse_inertia(self) -> float: ...
    def set_linear_velocity(self, velocity: 'Vector2') -> None: ...
    def get_linear_velocity(self) -> 'Vector2': ...
    def set_angular_velocity(self, velocity: float) -> None: ...
    def get_angular_velocity(self) -> float: ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def get_velocity_at_local_position(self, local_position: 'Vector2') -> 'Vector2': ...
    def apply_central_impulse(self, impulse: 'Vector2') -> None: ...
    def apply_torque_impulse(self, impulse: float) -> None: ...
    def apply_impulse(self, impulse: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_central_force(self, force: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_torque(self, torque: float) -> None: ...
    def add_constant_central_force(self, force: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def add_constant_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: float) -> None: ...
    def set_constant_force(self, force: 'Vector2') -> None: ...
    def get_constant_force(self) -> 'Vector2': ...
    def set_constant_torque(self, torque: float) -> None: ...
    def get_constant_torque(self) -> float: ...
    def set_sleep_state(self, enabled: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def get_contact_count(self) -> int: ...
    def get_contact_local_position(self, contact_idx: int) -> 'Vector2': ...
    def get_contact_local_normal(self, contact_idx: int) -> 'Vector2': ...
    def get_contact_local_shape(self, contact_idx: int) -> int: ...
    def get_contact_local_velocity_at_position(self, contact_idx: int) -> 'Vector2': ...
    def get_contact_collider(self, contact_idx: int) -> 'RID': ...
    def get_contact_collider_position(self, contact_idx: int) -> 'Vector2': ...
    def get_contact_collider_id(self, contact_idx: int) -> int: ...
    def get_contact_collider_object(self, contact_idx: int) -> 'Object': ...
    def get_contact_collider_shape(self, contact_idx: int) -> int: ...
    def get_contact_collider_velocity_at_position(self, contact_idx: int) -> 'Vector2': ...
    def get_contact_impulse(self, contact_idx: int) -> 'Vector2': ...
    def get_step(self) -> float: ...
    def integrate_forces(self) -> None: ...
    def get_space_state(self) -> 'PhysicsDirectSpaceState2D': ...
    
class PhysicsDirectBodyState2DExtension(PhysicsDirectBodyState2D):
    def _get_total_gravity(self) -> 'Vector2': ...
    def _get_total_linear_damp(self) -> float: ...
    def _get_total_angular_damp(self) -> float: ...
    def _get_center_of_mass(self) -> 'Vector2': ...
    def _get_center_of_mass_local(self) -> 'Vector2': ...
    def _get_inverse_mass(self) -> float: ...
    def _get_inverse_inertia(self) -> float: ...
    def _set_linear_velocity(self, velocity: 'Vector2') -> None: ...
    def _get_linear_velocity(self) -> 'Vector2': ...
    def _set_angular_velocity(self, velocity: float) -> None: ...
    def _get_angular_velocity(self) -> float: ...
    def _set_transform(self, transform: 'Transform2D') -> None: ...
    def _get_transform(self) -> 'Transform2D': ...
    def _get_velocity_at_local_position(self, local_position: 'Vector2') -> 'Vector2': ...
    def _apply_central_impulse(self, impulse: 'Vector2') -> None: ...
    def _apply_impulse(self, impulse: 'Vector2', position: 'Vector2') -> None: ...
    def _apply_torque_impulse(self, impulse: float) -> None: ...
    def _apply_central_force(self, force: 'Vector2') -> None: ...
    def _apply_force(self, force: 'Vector2', position: 'Vector2') -> None: ...
    def _apply_torque(self, torque: float) -> None: ...
    def _add_constant_central_force(self, force: 'Vector2') -> None: ...
    def _add_constant_force(self, force: 'Vector2', position: 'Vector2') -> None: ...
    def _add_constant_torque(self, torque: float) -> None: ...
    def _set_constant_force(self, force: 'Vector2') -> None: ...
    def _get_constant_force(self) -> 'Vector2': ...
    def _set_constant_torque(self, torque: float) -> None: ...
    def _get_constant_torque(self) -> float: ...
    def _set_sleep_state(self, enabled: bool) -> None: ...
    def _is_sleeping(self) -> bool: ...
    def _get_contact_count(self) -> int: ...
    def _get_contact_local_position(self, contact_idx: int) -> 'Vector2': ...
    def _get_contact_local_normal(self, contact_idx: int) -> 'Vector2': ...
    def _get_contact_local_shape(self, contact_idx: int) -> int: ...
    def _get_contact_local_velocity_at_position(self, contact_idx: int) -> 'Vector2': ...
    def _get_contact_collider(self, contact_idx: int) -> 'RID': ...
    def _get_contact_collider_position(self, contact_idx: int) -> 'Vector2': ...
    def _get_contact_collider_id(self, contact_idx: int) -> int: ...
    def _get_contact_collider_object(self, contact_idx: int) -> 'Object': ...
    def _get_contact_collider_shape(self, contact_idx: int) -> int: ...
    def _get_contact_collider_velocity_at_position(self, contact_idx: int) -> 'Vector2': ...
    def _get_contact_impulse(self, contact_idx: int) -> 'Vector2': ...
    def _get_step(self) -> float: ...
    def _integrate_forces(self) -> None: ...
    def _get_space_state(self) -> 'PhysicsDirectSpaceState2D': ...
    
class PhysicsDirectBodyState3D(Object):
    step: float
    inverse_mass: float
    total_angular_damp: float
    total_linear_damp: float
    inverse_inertia: 'Vector3'
    inverse_inertia_tensor: 'Basis'
    total_gravity: 'Vector3'
    center_of_mass: 'Vector3'
    center_of_mass_local: 'Vector3'
    principal_inertia_axes: 'Basis'
    angular_velocity: 'Vector3'
    linear_velocity: 'Vector3'
    sleeping: bool
    transform: 'Transform3D'
    def get_total_gravity(self) -> 'Vector3': ...
    def get_total_linear_damp(self) -> float: ...
    def get_total_angular_damp(self) -> float: ...
    def get_center_of_mass(self) -> 'Vector3': ...
    def get_center_of_mass_local(self) -> 'Vector3': ...
    def get_principal_inertia_axes(self) -> 'Basis': ...
    def get_inverse_mass(self) -> float: ...
    def get_inverse_inertia(self) -> 'Vector3': ...
    def get_inverse_inertia_tensor(self) -> 'Basis': ...
    def set_linear_velocity(self, velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_transform(self, transform: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def get_velocity_at_local_position(self, local_position: 'Vector3') -> 'Vector3': ...
    def apply_central_impulse(self, impulse: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_impulse(self, impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_central_force(self, force: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque(self, torque: 'Vector3') -> None: ...
    def add_constant_central_force(self, force: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def add_constant_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: 'Vector3') -> None: ...
    def set_constant_force(self, force: 'Vector3') -> None: ...
    def get_constant_force(self) -> 'Vector3': ...
    def set_constant_torque(self, torque: 'Vector3') -> None: ...
    def get_constant_torque(self) -> 'Vector3': ...
    def set_sleep_state(self, enabled: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def get_contact_count(self) -> int: ...
    def get_contact_local_position(self, contact_idx: int) -> 'Vector3': ...
    def get_contact_local_normal(self, contact_idx: int) -> 'Vector3': ...
    def get_contact_impulse(self, contact_idx: int) -> 'Vector3': ...
    def get_contact_local_shape(self, contact_idx: int) -> int: ...
    def get_contact_local_velocity_at_position(self, contact_idx: int) -> 'Vector3': ...
    def get_contact_collider(self, contact_idx: int) -> 'RID': ...
    def get_contact_collider_position(self, contact_idx: int) -> 'Vector3': ...
    def get_contact_collider_id(self, contact_idx: int) -> int: ...
    def get_contact_collider_object(self, contact_idx: int) -> 'Object': ...
    def get_contact_collider_shape(self, contact_idx: int) -> int: ...
    def get_contact_collider_velocity_at_position(self, contact_idx: int) -> 'Vector3': ...
    def get_step(self) -> float: ...
    def integrate_forces(self) -> None: ...
    def get_space_state(self) -> 'PhysicsDirectSpaceState3D': ...
    
class PhysicsDirectBodyState3DExtension(PhysicsDirectBodyState3D):
    def _get_total_gravity(self) -> 'Vector3': ...
    def _get_total_linear_damp(self) -> float: ...
    def _get_total_angular_damp(self) -> float: ...
    def _get_center_of_mass(self) -> 'Vector3': ...
    def _get_center_of_mass_local(self) -> 'Vector3': ...
    def _get_principal_inertia_axes(self) -> 'Basis': ...
    def _get_inverse_mass(self) -> float: ...
    def _get_inverse_inertia(self) -> 'Vector3': ...
    def _get_inverse_inertia_tensor(self) -> 'Basis': ...
    def _set_linear_velocity(self, velocity: 'Vector3') -> None: ...
    def _get_linear_velocity(self) -> 'Vector3': ...
    def _set_angular_velocity(self, velocity: 'Vector3') -> None: ...
    def _get_angular_velocity(self) -> 'Vector3': ...
    def _set_transform(self, transform: 'Transform3D') -> None: ...
    def _get_transform(self) -> 'Transform3D': ...
    def _get_velocity_at_local_position(self, local_position: 'Vector3') -> 'Vector3': ...
    def _apply_central_impulse(self, impulse: 'Vector3') -> None: ...
    def _apply_impulse(self, impulse: 'Vector3', position: 'Vector3') -> None: ...
    def _apply_torque_impulse(self, impulse: 'Vector3') -> None: ...
    def _apply_central_force(self, force: 'Vector3') -> None: ...
    def _apply_force(self, force: 'Vector3', position: 'Vector3') -> None: ...
    def _apply_torque(self, torque: 'Vector3') -> None: ...
    def _add_constant_central_force(self, force: 'Vector3') -> None: ...
    def _add_constant_force(self, force: 'Vector3', position: 'Vector3') -> None: ...
    def _add_constant_torque(self, torque: 'Vector3') -> None: ...
    def _set_constant_force(self, force: 'Vector3') -> None: ...
    def _get_constant_force(self) -> 'Vector3': ...
    def _set_constant_torque(self, torque: 'Vector3') -> None: ...
    def _get_constant_torque(self) -> 'Vector3': ...
    def _set_sleep_state(self, enabled: bool) -> None: ...
    def _is_sleeping(self) -> bool: ...
    def _get_contact_count(self) -> int: ...
    def _get_contact_local_position(self, contact_idx: int) -> 'Vector3': ...
    def _get_contact_local_normal(self, contact_idx: int) -> 'Vector3': ...
    def _get_contact_impulse(self, contact_idx: int) -> 'Vector3': ...
    def _get_contact_local_shape(self, contact_idx: int) -> int: ...
    def _get_contact_local_velocity_at_position(self, contact_idx: int) -> 'Vector3': ...
    def _get_contact_collider(self, contact_idx: int) -> 'RID': ...
    def _get_contact_collider_position(self, contact_idx: int) -> 'Vector3': ...
    def _get_contact_collider_id(self, contact_idx: int) -> int: ...
    def _get_contact_collider_object(self, contact_idx: int) -> 'Object': ...
    def _get_contact_collider_shape(self, contact_idx: int) -> int: ...
    def _get_contact_collider_velocity_at_position(self, contact_idx: int) -> 'Vector3': ...
    def _get_step(self) -> float: ...
    def _integrate_forces(self) -> None: ...
    def _get_space_state(self) -> 'PhysicsDirectSpaceState3D': ...
    
class PhysicsDirectSpaceState2D(Object):
    def intersect_point(self, parameters: 'PhysicsPointQueryParameters2D', max_results: int = default('''32''')) -> 'list[Dictionary]': ...
    def intersect_ray(self, parameters: 'PhysicsRayQueryParameters2D') -> 'Dictionary': ...
    def intersect_shape(self, parameters: 'PhysicsShapeQueryParameters2D', max_results: int = default('''32''')) -> 'list[Dictionary]': ...
    def cast_motion(self, parameters: 'PhysicsShapeQueryParameters2D') -> 'PackedFloat32Array': ...
    def collide_shape(self, parameters: 'PhysicsShapeQueryParameters2D', max_results: int = default('''32''')) -> 'list[Vector2]': ...
    def get_rest_info(self, parameters: 'PhysicsShapeQueryParameters2D') -> 'Dictionary': ...
    
class PhysicsDirectSpaceState2DExtension(PhysicsDirectSpaceState2D):
    def _intersect_ray(self, from_: 'Vector2', to: 'Vector2', collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, hit_from_inside: bool, result: 'intptr') -> bool: ...
    def _intersect_point(self, position: 'Vector2', canvas_instance_id: int, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, results: 'intptr', max_results: int) -> int: ...
    def _intersect_shape(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, result: 'intptr', max_results: int) -> int: ...
    def _cast_motion(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, closest_safe: 'intptr', closest_unsafe: 'intptr') -> bool: ...
    def _collide_shape(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, results: 'intptr', max_results: int, result_count: 'intptr') -> bool: ...
    def _rest_info(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, rest_info: 'intptr') -> bool: ...
    def is_body_excluded_from_query(self, body: 'RID') -> bool: ...
    
class PhysicsDirectSpaceState3D(Object):
    def intersect_point(self, parameters: 'PhysicsPointQueryParameters3D', max_results: int = default('''32''')) -> 'list[Dictionary]': ...
    def intersect_ray(self, parameters: 'PhysicsRayQueryParameters3D') -> 'Dictionary': ...
    def intersect_shape(self, parameters: 'PhysicsShapeQueryParameters3D', max_results: int = default('''32''')) -> 'list[Dictionary]': ...
    def cast_motion(self, parameters: 'PhysicsShapeQueryParameters3D') -> 'PackedFloat32Array': ...
    def collide_shape(self, parameters: 'PhysicsShapeQueryParameters3D', max_results: int = default('''32''')) -> 'list[Vector3]': ...
    def get_rest_info(self, parameters: 'PhysicsShapeQueryParameters3D') -> 'Dictionary': ...
    
class PhysicsDirectSpaceState3DExtension(PhysicsDirectSpaceState3D):
    def _intersect_ray(self, from_: 'Vector3', to: 'Vector3', collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, hit_from_inside: bool, hit_back_faces: bool, pick_ray: bool, result: 'intptr') -> bool: ...
    def _intersect_point(self, position: 'Vector3', collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, results: 'intptr', max_results: int) -> int: ...
    def _intersect_shape(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, result_count: 'intptr', max_results: int) -> int: ...
    def _cast_motion(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, closest_safe: 'intptr', closest_unsafe: 'intptr', info: 'intptr') -> bool: ...
    def _collide_shape(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, results: 'intptr', max_results: int, result_count: 'intptr') -> bool: ...
    def _rest_info(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: float, collision_mask: int, collide_with_bodies: bool, collide_with_areas: bool, rest_info: 'intptr') -> bool: ...
    def _get_closest_point_to_object_volume(self, object: 'RID', point: 'Vector3') -> 'Vector3': ...
    def is_body_excluded_from_query(self, body: 'RID') -> bool: ...
    
class PhysicsMaterial(Resource):
    friction: float
    rough: bool
    bounce: float
    absorbent: bool
    def set_friction(self, friction: float) -> None: ...
    def get_friction(self) -> float: ...
    def set_rough(self, rough: bool) -> None: ...
    def is_rough(self) -> bool: ...
    def set_bounce(self, bounce: float) -> None: ...
    def get_bounce(self) -> float: ...
    def set_absorbent(self, absorbent: bool) -> None: ...
    def is_absorbent(self) -> bool: ...
    
class PhysicsPointQueryParameters2D(RefCounted):
    position: 'Vector2'
    canvas_instance_id: int
    collision_mask: int
    exclude: 'list[RID]'
    collide_with_bodies: bool
    collide_with_areas: bool
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_canvas_instance_id(self, canvas_instance_id: int) -> None: ...
    def get_canvas_instance_id(self) -> int: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: 'list[RID]') -> None: ...
    def get_exclude(self) -> 'list[RID]': ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    
class PhysicsPointQueryParameters3D(RefCounted):
    position: 'Vector3'
    collision_mask: int
    exclude: 'list[RID]'
    collide_with_bodies: bool
    collide_with_areas: bool
    def set_position(self, position: 'Vector3') -> None: ...
    def get_position(self) -> 'Vector3': ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: 'list[RID]') -> None: ...
    def get_exclude(self) -> 'list[RID]': ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    
class PhysicsRayQueryParameters2D(RefCounted):
    from_: 'Vector2'
    to: 'Vector2'
    collision_mask: int
    exclude: 'list[RID]'
    collide_with_bodies: bool
    collide_with_areas: bool
    hit_from_inside: bool
    @staticmethod
    def create(from_: 'Vector2', to: 'Vector2', collision_mask: int = default('''4294967295'''), exclude: 'list[RID]' = default('''Array[RID]([])''')) -> 'PhysicsRayQueryParameters2D': ...
    def set_from(self, from_: 'Vector2') -> None: ...
    def get_from(self) -> 'Vector2': ...
    def set_to(self, to: 'Vector2') -> None: ...
    def get_to(self) -> 'Vector2': ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: 'list[RID]') -> None: ...
    def get_exclude(self) -> 'list[RID]': ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...
    
class PhysicsRayQueryParameters3D(RefCounted):
    from_: 'Vector3'
    to: 'Vector3'
    collision_mask: int
    exclude: 'list[RID]'
    collide_with_bodies: bool
    collide_with_areas: bool
    hit_from_inside: bool
    hit_back_faces: bool
    @staticmethod
    def create(from_: 'Vector3', to: 'Vector3', collision_mask: int = default('''4294967295'''), exclude: 'list[RID]' = default('''Array[RID]([])''')) -> 'PhysicsRayQueryParameters3D': ...
    def set_from(self, from_: 'Vector3') -> None: ...
    def get_from(self) -> 'Vector3': ...
    def set_to(self, to: 'Vector3') -> None: ...
    def get_to(self) -> 'Vector3': ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: 'list[RID]') -> None: ...
    def get_exclude(self) -> 'list[RID]': ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...
    def set_hit_back_faces(self, enable: bool) -> None: ...
    def is_hit_back_faces_enabled(self) -> bool: ...
    
class PhysicsServer2D(Object):
    def world_boundary_shape_create(self) -> 'RID': ...
    def separation_ray_shape_create(self) -> 'RID': ...
    def segment_shape_create(self) -> 'RID': ...
    def circle_shape_create(self) -> 'RID': ...
    def rectangle_shape_create(self) -> 'RID': ...
    def capsule_shape_create(self) -> 'RID': ...
    def convex_polygon_shape_create(self) -> 'RID': ...
    def concave_polygon_shape_create(self) -> 'RID': ...
    def shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def shape_get_type(self, shape: 'RID') -> 'PhysicsServer2D_ShapeType': ...
    def shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def space_create(self) -> 'RID': ...
    def space_set_active(self, space: 'RID', active: bool) -> None: ...
    def space_is_active(self, space: 'RID') -> bool: ...
    def space_set_param(self, space: 'RID', param: 'PhysicsServer2D_SpaceParameter', value: float) -> None: ...
    def space_get_param(self, space: 'RID', param: 'PhysicsServer2D_SpaceParameter') -> float: ...
    def space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState2D': ...
    def area_create(self) -> 'RID': ...
    def area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def area_get_space(self, area: 'RID') -> 'RID': ...
    def area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), disabled: bool = default('''false''')) -> None: ...
    def area_set_shape(self, area: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def area_set_shape_transform(self, area: 'RID', shape_idx: int, transform: 'Transform2D') -> None: ...
    def area_set_shape_disabled(self, area: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def area_get_shape_count(self, area: 'RID') -> int: ...
    def area_get_shape(self, area: 'RID', shape_idx: int) -> 'RID': ...
    def area_get_shape_transform(self, area: 'RID', shape_idx: int) -> 'Transform2D': ...
    def area_remove_shape(self, area: 'RID', shape_idx: int) -> None: ...
    def area_clear_shapes(self, area: 'RID') -> None: ...
    def area_set_collision_layer(self, area: 'RID', layer: int) -> None: ...
    def area_get_collision_layer(self, area: 'RID') -> int: ...
    def area_set_collision_mask(self, area: 'RID', mask: int) -> None: ...
    def area_get_collision_mask(self, area: 'RID') -> int: ...
    def area_set_param(self, area: 'RID', param: 'PhysicsServer2D_AreaParameter', value: 'Variant') -> None: ...
    def area_set_transform(self, area: 'RID', transform: 'Transform2D') -> None: ...
    def area_get_param(self, area: 'RID', param: 'PhysicsServer2D_AreaParameter') -> 'Variant': ...
    def area_get_transform(self, area: 'RID') -> 'Transform2D': ...
    def area_attach_object_instance_id(self, area: 'RID', id: int) -> None: ...
    def area_get_object_instance_id(self, area: 'RID') -> int: ...
    def area_attach_canvas_instance_id(self, area: 'RID', id: int) -> None: ...
    def area_get_canvas_instance_id(self, area: 'RID') -> int: ...
    def area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_monitorable(self, area: 'RID', monitorable: bool) -> None: ...
    def body_create(self) -> 'RID': ...
    def body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def body_get_space(self, body: 'RID') -> 'RID': ...
    def body_set_mode(self, body: 'RID', mode: 'PhysicsServer2D_BodyMode') -> None: ...
    def body_get_mode(self, body: 'RID') -> 'PhysicsServer2D_BodyMode': ...
    def body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), disabled: bool = default('''false''')) -> None: ...
    def body_set_shape(self, body: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def body_set_shape_transform(self, body: 'RID', shape_idx: int, transform: 'Transform2D') -> None: ...
    def body_get_shape_count(self, body: 'RID') -> int: ...
    def body_get_shape(self, body: 'RID', shape_idx: int) -> 'RID': ...
    def body_get_shape_transform(self, body: 'RID', shape_idx: int) -> 'Transform2D': ...
    def body_remove_shape(self, body: 'RID', shape_idx: int) -> None: ...
    def body_clear_shapes(self, body: 'RID') -> None: ...
    def body_set_shape_disabled(self, body: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def body_set_shape_as_one_way_collision(self, body: 'RID', shape_idx: int, enable: bool, margin: float) -> None: ...
    def body_attach_object_instance_id(self, body: 'RID', id: int) -> None: ...
    def body_get_object_instance_id(self, body: 'RID') -> int: ...
    def body_attach_canvas_instance_id(self, body: 'RID', id: int) -> None: ...
    def body_get_canvas_instance_id(self, body: 'RID') -> int: ...
    def body_set_continuous_collision_detection_mode(self, body: 'RID', mode: 'PhysicsServer2D_CCDMode') -> None: ...
    def body_get_continuous_collision_detection_mode(self, body: 'RID') -> 'PhysicsServer2D_CCDMode': ...
    def body_set_collision_layer(self, body: 'RID', layer: int) -> None: ...
    def body_get_collision_layer(self, body: 'RID') -> int: ...
    def body_set_collision_mask(self, body: 'RID', mask: int) -> None: ...
    def body_get_collision_mask(self, body: 'RID') -> int: ...
    def body_set_collision_priority(self, body: 'RID', priority: float) -> None: ...
    def body_get_collision_priority(self, body: 'RID') -> float: ...
    def body_set_param(self, body: 'RID', param: 'PhysicsServer2D_BodyParameter', value: 'Variant') -> None: ...
    def body_get_param(self, body: 'RID', param: 'PhysicsServer2D_BodyParameter') -> 'Variant': ...
    def body_reset_mass_properties(self, body: 'RID') -> None: ...
    def body_set_state(self, body: 'RID', state: 'PhysicsServer2D_BodyState', value: 'Variant') -> None: ...
    def body_get_state(self, body: 'RID', state: 'PhysicsServer2D_BodyState') -> 'Variant': ...
    def body_apply_central_impulse(self, body: 'RID', impulse: 'Vector2') -> None: ...
    def body_apply_torque_impulse(self, body: 'RID', impulse: float) -> None: ...
    def body_apply_impulse(self, body: 'RID', impulse: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def body_apply_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def body_apply_force(self, body: 'RID', force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def body_apply_torque(self, body: 'RID', torque: float) -> None: ...
    def body_add_constant_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def body_add_constant_force(self, body: 'RID', force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def body_add_constant_torque(self, body: 'RID', torque: float) -> None: ...
    def body_set_constant_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def body_get_constant_force(self, body: 'RID') -> 'Vector2': ...
    def body_set_constant_torque(self, body: 'RID', torque: float) -> None: ...
    def body_get_constant_torque(self, body: 'RID') -> float: ...
    def body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector2') -> None: ...
    def body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_set_max_contacts_reported(self, body: 'RID', amount: int) -> None: ...
    def body_get_max_contacts_reported(self, body: 'RID') -> int: ...
    def body_set_omit_force_integration(self, body: 'RID', enable: bool) -> None: ...
    def body_is_omitting_force_integration(self, body: 'RID') -> bool: ...
    def body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant' = default('''null''')) -> None: ...
    def body_test_motion(self, body: 'RID', parameters: 'PhysicsTestMotionParameters2D', result: 'PhysicsTestMotionResult2D' = default('''null''')) -> bool: ...
    def body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState2D': ...
    def joint_create(self) -> 'RID': ...
    def joint_clear(self, joint: 'RID') -> None: ...
    def joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D_JointParam', value: float) -> None: ...
    def joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D_JointParam') -> float: ...
    def joint_disable_collisions_between_bodies(self, joint: 'RID', disable: bool) -> None: ...
    def joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> bool: ...
    def joint_make_pin(self, joint: 'RID', anchor: 'Vector2', body_a: 'RID', body_b: 'RID' = default('''RID()''')) -> None: ...
    def joint_make_groove(self, joint: 'RID', groove1_a: 'Vector2', groove2_a: 'Vector2', anchor_b: 'Vector2', body_a: 'RID' = default('''RID()'''), body_b: 'RID' = default('''RID()''')) -> None: ...
    def joint_make_damped_spring(self, joint: 'RID', anchor_a: 'Vector2', anchor_b: 'Vector2', body_a: 'RID', body_b: 'RID' = default('''RID()''')) -> None: ...
    def pin_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer2D_PinJointFlag', enabled: bool) -> None: ...
    def pin_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer2D_PinJointFlag') -> bool: ...
    def pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D_PinJointParam', value: float) -> None: ...
    def pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D_PinJointParam') -> float: ...
    def damped_spring_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D_DampedSpringParam', value: float) -> None: ...
    def damped_spring_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D_DampedSpringParam') -> float: ...
    def joint_get_type(self, joint: 'RID') -> 'PhysicsServer2D_JointType': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_active(self, active: bool) -> None: ...
    def get_process_info(self, process_info: 'PhysicsServer2D_ProcessInfo') -> int: ...
    
class PhysicsServer2D_SpaceParameter(Enum):
    SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0
    SPACE_PARAM_CONTACT_MAX_SEPARATION = 1
    SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION = 2
    SPACE_PARAM_CONTACT_DEFAULT_BIAS = 3
    SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 4
    SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 5
    SPACE_PARAM_BODY_TIME_TO_SLEEP = 6
    SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS = 7
    SPACE_PARAM_SOLVER_ITERATIONS = 8

class PhysicsServer2D_ShapeType(Enum):
    SHAPE_WORLD_BOUNDARY = 0
    SHAPE_SEPARATION_RAY = 1
    SHAPE_SEGMENT = 2
    SHAPE_CIRCLE = 3
    SHAPE_RECTANGLE = 4
    SHAPE_CAPSULE = 5
    SHAPE_CONVEX_POLYGON = 6
    SHAPE_CONCAVE_POLYGON = 7
    SHAPE_CUSTOM = 8

class PhysicsServer2D_AreaParameter(Enum):
    AREA_PARAM_GRAVITY_OVERRIDE_MODE = 0
    AREA_PARAM_GRAVITY = 1
    AREA_PARAM_GRAVITY_VECTOR = 2
    AREA_PARAM_GRAVITY_IS_POINT = 3
    AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE = 4
    AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE = 5
    AREA_PARAM_LINEAR_DAMP = 6
    AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE = 7
    AREA_PARAM_ANGULAR_DAMP = 8
    AREA_PARAM_PRIORITY = 9

class PhysicsServer2D_AreaSpaceOverrideMode(Enum):
    AREA_SPACE_OVERRIDE_DISABLED = 0
    AREA_SPACE_OVERRIDE_COMBINE = 1
    AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2
    AREA_SPACE_OVERRIDE_REPLACE = 3
    AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4

class PhysicsServer2D_BodyMode(Enum):
    BODY_MODE_STATIC = 0
    BODY_MODE_KINEMATIC = 1
    BODY_MODE_RIGID = 2
    BODY_MODE_RIGID_LINEAR = 3

class PhysicsServer2D_BodyParameter(Enum):
    BODY_PARAM_BOUNCE = 0
    BODY_PARAM_FRICTION = 1
    BODY_PARAM_MASS = 2
    BODY_PARAM_INERTIA = 3
    BODY_PARAM_CENTER_OF_MASS = 4
    BODY_PARAM_GRAVITY_SCALE = 5
    BODY_PARAM_LINEAR_DAMP_MODE = 6
    BODY_PARAM_ANGULAR_DAMP_MODE = 7
    BODY_PARAM_LINEAR_DAMP = 8
    BODY_PARAM_ANGULAR_DAMP = 9
    BODY_PARAM_MAX = 10

class PhysicsServer2D_BodyDampMode(Enum):
    BODY_DAMP_MODE_COMBINE = 0
    BODY_DAMP_MODE_REPLACE = 1

class PhysicsServer2D_BodyState(Enum):
    BODY_STATE_TRANSFORM = 0
    BODY_STATE_LINEAR_VELOCITY = 1
    BODY_STATE_ANGULAR_VELOCITY = 2
    BODY_STATE_SLEEPING = 3
    BODY_STATE_CAN_SLEEP = 4

class PhysicsServer2D_JointType(Enum):
    JOINT_TYPE_PIN = 0
    JOINT_TYPE_GROOVE = 1
    JOINT_TYPE_DAMPED_SPRING = 2
    JOINT_TYPE_MAX = 3

class PhysicsServer2D_JointParam(Enum):
    JOINT_PARAM_BIAS = 0
    JOINT_PARAM_MAX_BIAS = 1
    JOINT_PARAM_MAX_FORCE = 2

class PhysicsServer2D_PinJointParam(Enum):
    PIN_JOINT_SOFTNESS = 0
    PIN_JOINT_LIMIT_UPPER = 1
    PIN_JOINT_LIMIT_LOWER = 2
    PIN_JOINT_MOTOR_TARGET_VELOCITY = 3

class PhysicsServer2D_PinJointFlag(Enum):
    PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED = 0
    PIN_JOINT_FLAG_MOTOR_ENABLED = 1

class PhysicsServer2D_DampedSpringParam(Enum):
    DAMPED_SPRING_REST_LENGTH = 0
    DAMPED_SPRING_STIFFNESS = 1
    DAMPED_SPRING_DAMPING = 2

class PhysicsServer2D_CCDMode(Enum):
    CCD_MODE_DISABLED = 0
    CCD_MODE_CAST_RAY = 1
    CCD_MODE_CAST_SHAPE = 2

class PhysicsServer2D_AreaBodyStatus(Enum):
    AREA_BODY_ADDED = 0
    AREA_BODY_REMOVED = 1

class PhysicsServer2D_ProcessInfo(Enum):
    INFO_ACTIVE_OBJECTS = 0
    INFO_COLLISION_PAIRS = 1
    INFO_ISLAND_COUNT = 2

class PhysicsServer2DExtension(PhysicsServer2D):
    def _world_boundary_shape_create(self) -> 'RID': ...
    def _separation_ray_shape_create(self) -> 'RID': ...
    def _segment_shape_create(self) -> 'RID': ...
    def _circle_shape_create(self) -> 'RID': ...
    def _rectangle_shape_create(self) -> 'RID': ...
    def _capsule_shape_create(self) -> 'RID': ...
    def _convex_polygon_shape_create(self) -> 'RID': ...
    def _concave_polygon_shape_create(self) -> 'RID': ...
    def _shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def _shape_set_custom_solver_bias(self, shape: 'RID', bias: float) -> None: ...
    def _shape_get_type(self, shape: 'RID') -> 'PhysicsServer2D_ShapeType': ...
    def _shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def _shape_get_custom_solver_bias(self, shape: 'RID') -> float: ...
    def _shape_collide(self, shape_A: 'RID', xform_A: 'Transform2D', motion_A: 'Vector2', shape_B: 'RID', xform_B: 'Transform2D', motion_B: 'Vector2', results: 'intptr', result_max: int, result_count: 'intptr') -> bool: ...
    def _space_create(self) -> 'RID': ...
    def _space_set_active(self, space: 'RID', active: bool) -> None: ...
    def _space_is_active(self, space: 'RID') -> bool: ...
    def _space_set_param(self, space: 'RID', param: 'PhysicsServer2D_SpaceParameter', value: float) -> None: ...
    def _space_get_param(self, space: 'RID', param: 'PhysicsServer2D_SpaceParameter') -> float: ...
    def _space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState2D': ...
    def _space_set_debug_contacts(self, space: 'RID', max_contacts: int) -> None: ...
    def _space_get_contacts(self, space: 'RID') -> 'PackedVector2Array': ...
    def _space_get_contact_count(self, space: 'RID') -> int: ...
    def _area_create(self) -> 'RID': ...
    def _area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def _area_get_space(self, area: 'RID') -> 'RID': ...
    def _area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform2D', disabled: bool) -> None: ...
    def _area_set_shape(self, area: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def _area_set_shape_transform(self, area: 'RID', shape_idx: int, transform: 'Transform2D') -> None: ...
    def _area_set_shape_disabled(self, area: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def _area_get_shape_count(self, area: 'RID') -> int: ...
    def _area_get_shape(self, area: 'RID', shape_idx: int) -> 'RID': ...
    def _area_get_shape_transform(self, area: 'RID', shape_idx: int) -> 'Transform2D': ...
    def _area_remove_shape(self, area: 'RID', shape_idx: int) -> None: ...
    def _area_clear_shapes(self, area: 'RID') -> None: ...
    def _area_attach_object_instance_id(self, area: 'RID', id: int) -> None: ...
    def _area_get_object_instance_id(self, area: 'RID') -> int: ...
    def _area_attach_canvas_instance_id(self, area: 'RID', id: int) -> None: ...
    def _area_get_canvas_instance_id(self, area: 'RID') -> int: ...
    def _area_set_param(self, area: 'RID', param: 'PhysicsServer2D_AreaParameter', value: 'Variant') -> None: ...
    def _area_set_transform(self, area: 'RID', transform: 'Transform2D') -> None: ...
    def _area_get_param(self, area: 'RID', param: 'PhysicsServer2D_AreaParameter') -> 'Variant': ...
    def _area_get_transform(self, area: 'RID') -> 'Transform2D': ...
    def _area_set_collision_layer(self, area: 'RID', layer: int) -> None: ...
    def _area_get_collision_layer(self, area: 'RID') -> int: ...
    def _area_set_collision_mask(self, area: 'RID', mask: int) -> None: ...
    def _area_get_collision_mask(self, area: 'RID') -> int: ...
    def _area_set_monitorable(self, area: 'RID', monitorable: bool) -> None: ...
    def _area_set_pickable(self, area: 'RID', pickable: bool) -> None: ...
    def _area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _body_create(self) -> 'RID': ...
    def _body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def _body_get_space(self, body: 'RID') -> 'RID': ...
    def _body_set_mode(self, body: 'RID', mode: 'PhysicsServer2D_BodyMode') -> None: ...
    def _body_get_mode(self, body: 'RID') -> 'PhysicsServer2D_BodyMode': ...
    def _body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform2D', disabled: bool) -> None: ...
    def _body_set_shape(self, body: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def _body_set_shape_transform(self, body: 'RID', shape_idx: int, transform: 'Transform2D') -> None: ...
    def _body_get_shape_count(self, body: 'RID') -> int: ...
    def _body_get_shape(self, body: 'RID', shape_idx: int) -> 'RID': ...
    def _body_get_shape_transform(self, body: 'RID', shape_idx: int) -> 'Transform2D': ...
    def _body_set_shape_disabled(self, body: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def _body_set_shape_as_one_way_collision(self, body: 'RID', shape_idx: int, enable: bool, margin: float) -> None: ...
    def _body_remove_shape(self, body: 'RID', shape_idx: int) -> None: ...
    def _body_clear_shapes(self, body: 'RID') -> None: ...
    def _body_attach_object_instance_id(self, body: 'RID', id: int) -> None: ...
    def _body_get_object_instance_id(self, body: 'RID') -> int: ...
    def _body_attach_canvas_instance_id(self, body: 'RID', id: int) -> None: ...
    def _body_get_canvas_instance_id(self, body: 'RID') -> int: ...
    def _body_set_continuous_collision_detection_mode(self, body: 'RID', mode: 'PhysicsServer2D_CCDMode') -> None: ...
    def _body_get_continuous_collision_detection_mode(self, body: 'RID') -> 'PhysicsServer2D_CCDMode': ...
    def _body_set_collision_layer(self, body: 'RID', layer: int) -> None: ...
    def _body_get_collision_layer(self, body: 'RID') -> int: ...
    def _body_set_collision_mask(self, body: 'RID', mask: int) -> None: ...
    def _body_get_collision_mask(self, body: 'RID') -> int: ...
    def _body_set_collision_priority(self, body: 'RID', priority: float) -> None: ...
    def _body_get_collision_priority(self, body: 'RID') -> float: ...
    def _body_set_param(self, body: 'RID', param: 'PhysicsServer2D_BodyParameter', value: 'Variant') -> None: ...
    def _body_get_param(self, body: 'RID', param: 'PhysicsServer2D_BodyParameter') -> 'Variant': ...
    def _body_reset_mass_properties(self, body: 'RID') -> None: ...
    def _body_set_state(self, body: 'RID', state: 'PhysicsServer2D_BodyState', value: 'Variant') -> None: ...
    def _body_get_state(self, body: 'RID', state: 'PhysicsServer2D_BodyState') -> 'Variant': ...
    def _body_apply_central_impulse(self, body: 'RID', impulse: 'Vector2') -> None: ...
    def _body_apply_torque_impulse(self, body: 'RID', impulse: float) -> None: ...
    def _body_apply_impulse(self, body: 'RID', impulse: 'Vector2', position: 'Vector2') -> None: ...
    def _body_apply_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def _body_apply_force(self, body: 'RID', force: 'Vector2', position: 'Vector2') -> None: ...
    def _body_apply_torque(self, body: 'RID', torque: float) -> None: ...
    def _body_add_constant_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def _body_add_constant_force(self, body: 'RID', force: 'Vector2', position: 'Vector2') -> None: ...
    def _body_add_constant_torque(self, body: 'RID', torque: float) -> None: ...
    def _body_set_constant_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def _body_get_constant_force(self, body: 'RID') -> 'Vector2': ...
    def _body_set_constant_torque(self, body: 'RID', torque: float) -> None: ...
    def _body_get_constant_torque(self, body: 'RID') -> float: ...
    def _body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector2') -> None: ...
    def _body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_get_collision_exceptions(self, body: 'RID') -> 'list[RID]': ...
    def _body_set_max_contacts_reported(self, body: 'RID', amount: int) -> None: ...
    def _body_get_max_contacts_reported(self, body: 'RID') -> int: ...
    def _body_set_contacts_reported_depth_threshold(self, body: 'RID', threshold: float) -> None: ...
    def _body_get_contacts_reported_depth_threshold(self, body: 'RID') -> float: ...
    def _body_set_omit_force_integration(self, body: 'RID', enable: bool) -> None: ...
    def _body_is_omitting_force_integration(self, body: 'RID') -> bool: ...
    def _body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def _body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant') -> None: ...
    def _body_collide_shape(self, body: 'RID', body_shape: int, shape: 'RID', shape_xform: 'Transform2D', motion: 'Vector2', results: 'intptr', result_max: int, result_count: 'intptr') -> bool: ...
    def _body_set_pickable(self, body: 'RID', pickable: bool) -> None: ...
    def _body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState2D': ...
    def _body_test_motion(self, body: 'RID', from_: 'Transform2D', motion: 'Vector2', margin: float, collide_separation_ray: bool, recovery_as_collision: bool, result: 'intptr') -> bool: ...
    def _joint_create(self) -> 'RID': ...
    def _joint_clear(self, joint: 'RID') -> None: ...
    def _joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D_JointParam', value: float) -> None: ...
    def _joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D_JointParam') -> float: ...
    def _joint_disable_collisions_between_bodies(self, joint: 'RID', disable: bool) -> None: ...
    def _joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> bool: ...
    def _joint_make_pin(self, joint: 'RID', anchor: 'Vector2', body_a: 'RID', body_b: 'RID') -> None: ...
    def _joint_make_groove(self, joint: 'RID', a_groove1: 'Vector2', a_groove2: 'Vector2', b_anchor: 'Vector2', body_a: 'RID', body_b: 'RID') -> None: ...
    def _joint_make_damped_spring(self, joint: 'RID', anchor_a: 'Vector2', anchor_b: 'Vector2', body_a: 'RID', body_b: 'RID') -> None: ...
    def _pin_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer2D_PinJointFlag', enabled: bool) -> None: ...
    def _pin_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer2D_PinJointFlag') -> bool: ...
    def _pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D_PinJointParam', value: float) -> None: ...
    def _pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D_PinJointParam') -> float: ...
    def _damped_spring_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D_DampedSpringParam', value: float) -> None: ...
    def _damped_spring_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D_DampedSpringParam') -> float: ...
    def _joint_get_type(self, joint: 'RID') -> 'PhysicsServer2D_JointType': ...
    def _free_rid(self, rid: 'RID') -> None: ...
    def _set_active(self, active: bool) -> None: ...
    def _init(self) -> None: ...
    def _step(self, step: float) -> None: ...
    def _sync(self) -> None: ...
    def _flush_queries(self) -> None: ...
    def _end_sync(self) -> None: ...
    def _finish(self) -> None: ...
    def _is_flushing_queries(self) -> bool: ...
    def _get_process_info(self, process_info: 'PhysicsServer2D_ProcessInfo') -> int: ...
    def body_test_motion_is_excluding_body(self, body: 'RID') -> bool: ...
    def body_test_motion_is_excluding_object(self, object: int) -> bool: ...
    
class PhysicsServer2DManager(Object):
    def register_server(self, name: 'String', create_callback: 'Callable') -> None: ...
    def set_default_server(self, name: 'String', priority: int) -> None: ...
    
class PhysicsServer3D(Object):
    def world_boundary_shape_create(self) -> 'RID': ...
    def separation_ray_shape_create(self) -> 'RID': ...
    def sphere_shape_create(self) -> 'RID': ...
    def box_shape_create(self) -> 'RID': ...
    def capsule_shape_create(self) -> 'RID': ...
    def cylinder_shape_create(self) -> 'RID': ...
    def convex_polygon_shape_create(self) -> 'RID': ...
    def concave_polygon_shape_create(self) -> 'RID': ...
    def heightmap_shape_create(self) -> 'RID': ...
    def custom_shape_create(self) -> 'RID': ...
    def shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def shape_set_margin(self, shape: 'RID', margin: float) -> None: ...
    def shape_get_type(self, shape: 'RID') -> 'PhysicsServer3D_ShapeType': ...
    def shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def shape_get_margin(self, shape: 'RID') -> float: ...
    def space_create(self) -> 'RID': ...
    def space_set_active(self, space: 'RID', active: bool) -> None: ...
    def space_is_active(self, space: 'RID') -> bool: ...
    def space_set_param(self, space: 'RID', param: 'PhysicsServer3D_SpaceParameter', value: float) -> None: ...
    def space_get_param(self, space: 'RID', param: 'PhysicsServer3D_SpaceParameter') -> float: ...
    def space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState3D': ...
    def area_create(self) -> 'RID': ...
    def area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def area_get_space(self, area: 'RID') -> 'RID': ...
    def area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)'''), disabled: bool = default('''false''')) -> None: ...
    def area_set_shape(self, area: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def area_set_shape_transform(self, area: 'RID', shape_idx: int, transform: 'Transform3D') -> None: ...
    def area_set_shape_disabled(self, area: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def area_get_shape_count(self, area: 'RID') -> int: ...
    def area_get_shape(self, area: 'RID', shape_idx: int) -> 'RID': ...
    def area_get_shape_transform(self, area: 'RID', shape_idx: int) -> 'Transform3D': ...
    def area_remove_shape(self, area: 'RID', shape_idx: int) -> None: ...
    def area_clear_shapes(self, area: 'RID') -> None: ...
    def area_set_collision_layer(self, area: 'RID', layer: int) -> None: ...
    def area_get_collision_layer(self, area: 'RID') -> int: ...
    def area_set_collision_mask(self, area: 'RID', mask: int) -> None: ...
    def area_get_collision_mask(self, area: 'RID') -> int: ...
    def area_set_param(self, area: 'RID', param: 'PhysicsServer3D_AreaParameter', value: 'Variant') -> None: ...
    def area_set_transform(self, area: 'RID', transform: 'Transform3D') -> None: ...
    def area_get_param(self, area: 'RID', param: 'PhysicsServer3D_AreaParameter') -> 'Variant': ...
    def area_get_transform(self, area: 'RID') -> 'Transform3D': ...
    def area_attach_object_instance_id(self, area: 'RID', id: int) -> None: ...
    def area_get_object_instance_id(self, area: 'RID') -> int: ...
    def area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_monitorable(self, area: 'RID', monitorable: bool) -> None: ...
    def area_set_ray_pickable(self, area: 'RID', enable: bool) -> None: ...
    def body_create(self) -> 'RID': ...
    def body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def body_get_space(self, body: 'RID') -> 'RID': ...
    def body_set_mode(self, body: 'RID', mode: 'PhysicsServer3D_BodyMode') -> None: ...
    def body_get_mode(self, body: 'RID') -> 'PhysicsServer3D_BodyMode': ...
    def body_set_collision_layer(self, body: 'RID', layer: int) -> None: ...
    def body_get_collision_layer(self, body: 'RID') -> int: ...
    def body_set_collision_mask(self, body: 'RID', mask: int) -> None: ...
    def body_get_collision_mask(self, body: 'RID') -> int: ...
    def body_set_collision_priority(self, body: 'RID', priority: float) -> None: ...
    def body_get_collision_priority(self, body: 'RID') -> float: ...
    def body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)'''), disabled: bool = default('''false''')) -> None: ...
    def body_set_shape(self, body: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def body_set_shape_transform(self, body: 'RID', shape_idx: int, transform: 'Transform3D') -> None: ...
    def body_set_shape_disabled(self, body: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def body_get_shape_count(self, body: 'RID') -> int: ...
    def body_get_shape(self, body: 'RID', shape_idx: int) -> 'RID': ...
    def body_get_shape_transform(self, body: 'RID', shape_idx: int) -> 'Transform3D': ...
    def body_remove_shape(self, body: 'RID', shape_idx: int) -> None: ...
    def body_clear_shapes(self, body: 'RID') -> None: ...
    def body_attach_object_instance_id(self, body: 'RID', id: int) -> None: ...
    def body_get_object_instance_id(self, body: 'RID') -> int: ...
    def body_set_enable_continuous_collision_detection(self, body: 'RID', enable: bool) -> None: ...
    def body_is_continuous_collision_detection_enabled(self, body: 'RID') -> bool: ...
    def body_set_param(self, body: 'RID', param: 'PhysicsServer3D_BodyParameter', value: 'Variant') -> None: ...
    def body_get_param(self, body: 'RID', param: 'PhysicsServer3D_BodyParameter') -> 'Variant': ...
    def body_reset_mass_properties(self, body: 'RID') -> None: ...
    def body_set_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState', value: 'Variant') -> None: ...
    def body_get_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState') -> 'Variant': ...
    def body_apply_central_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def body_apply_impulse(self, body: 'RID', impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def body_apply_torque_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def body_apply_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def body_apply_force(self, body: 'RID', force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def body_apply_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def body_add_constant_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def body_add_constant_force(self, body: 'RID', force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def body_add_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def body_set_constant_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def body_get_constant_force(self, body: 'RID') -> 'Vector3': ...
    def body_set_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def body_get_constant_torque(self, body: 'RID') -> 'Vector3': ...
    def body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector3') -> None: ...
    def body_set_axis_lock(self, body: 'RID', axis: 'PhysicsServer3D_BodyAxis', lock: bool) -> None: ...
    def body_is_axis_locked(self, body: 'RID', axis: 'PhysicsServer3D_BodyAxis') -> bool: ...
    def body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_set_max_contacts_reported(self, body: 'RID', amount: int) -> None: ...
    def body_get_max_contacts_reported(self, body: 'RID') -> int: ...
    def body_set_omit_force_integration(self, body: 'RID', enable: bool) -> None: ...
    def body_is_omitting_force_integration(self, body: 'RID') -> bool: ...
    def body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant' = default('''null''')) -> None: ...
    def body_set_ray_pickable(self, body: 'RID', enable: bool) -> None: ...
    def body_test_motion(self, body: 'RID', parameters: 'PhysicsTestMotionParameters3D', result: 'PhysicsTestMotionResult3D' = default('''null''')) -> bool: ...
    def body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState3D': ...
    def soft_body_create(self) -> 'RID': ...
    def soft_body_update_rendering_server(self, body: 'RID', rendering_server_handler: 'PhysicsServer3DRenderingServerHandler') -> None: ...
    def soft_body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def soft_body_get_space(self, body: 'RID') -> 'RID': ...
    def soft_body_set_mesh(self, body: 'RID', mesh: 'RID') -> None: ...
    def soft_body_get_bounds(self, body: 'RID') -> 'AABB': ...
    def soft_body_set_collision_layer(self, body: 'RID', layer: int) -> None: ...
    def soft_body_get_collision_layer(self, body: 'RID') -> int: ...
    def soft_body_set_collision_mask(self, body: 'RID', mask: int) -> None: ...
    def soft_body_get_collision_mask(self, body: 'RID') -> int: ...
    def soft_body_add_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def soft_body_remove_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def soft_body_set_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState', variant: 'Variant') -> None: ...
    def soft_body_get_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState') -> 'Variant': ...
    def soft_body_set_transform(self, body: 'RID', transform: 'Transform3D') -> None: ...
    def soft_body_set_ray_pickable(self, body: 'RID', enable: bool) -> None: ...
    def soft_body_set_simulation_precision(self, body: 'RID', simulation_precision: int) -> None: ...
    def soft_body_get_simulation_precision(self, body: 'RID') -> int: ...
    def soft_body_set_total_mass(self, body: 'RID', total_mass: float) -> None: ...
    def soft_body_get_total_mass(self, body: 'RID') -> float: ...
    def soft_body_set_linear_stiffness(self, body: 'RID', stiffness: float) -> None: ...
    def soft_body_get_linear_stiffness(self, body: 'RID') -> float: ...
    def soft_body_set_pressure_coefficient(self, body: 'RID', pressure_coefficient: float) -> None: ...
    def soft_body_get_pressure_coefficient(self, body: 'RID') -> float: ...
    def soft_body_set_damping_coefficient(self, body: 'RID', damping_coefficient: float) -> None: ...
    def soft_body_get_damping_coefficient(self, body: 'RID') -> float: ...
    def soft_body_set_drag_coefficient(self, body: 'RID', drag_coefficient: float) -> None: ...
    def soft_body_get_drag_coefficient(self, body: 'RID') -> float: ...
    def soft_body_move_point(self, body: 'RID', point_index: int, global_position: 'Vector3') -> None: ...
    def soft_body_get_point_global_position(self, body: 'RID', point_index: int) -> 'Vector3': ...
    def soft_body_remove_all_pinned_points(self, body: 'RID') -> None: ...
    def soft_body_pin_point(self, body: 'RID', point_index: int, pin: bool) -> None: ...
    def soft_body_is_point_pinned(self, body: 'RID', point_index: int) -> bool: ...
    def joint_create(self) -> 'RID': ...
    def joint_clear(self, joint: 'RID') -> None: ...
    def joint_make_pin(self, joint: 'RID', body_A: 'RID', local_A: 'Vector3', body_B: 'RID', local_B: 'Vector3') -> None: ...
    def pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_PinJointParam', value: float) -> None: ...
    def pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_PinJointParam') -> float: ...
    def pin_joint_set_local_a(self, joint: 'RID', local_A: 'Vector3') -> None: ...
    def pin_joint_get_local_a(self, joint: 'RID') -> 'Vector3': ...
    def pin_joint_set_local_b(self, joint: 'RID', local_B: 'Vector3') -> None: ...
    def pin_joint_get_local_b(self, joint: 'RID') -> 'Vector3': ...
    def joint_make_hinge(self, joint: 'RID', body_A: 'RID', hinge_A: 'Transform3D', body_B: 'RID', hinge_B: 'Transform3D') -> None: ...
    def hinge_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_HingeJointParam', value: float) -> None: ...
    def hinge_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_HingeJointParam') -> float: ...
    def hinge_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer3D_HingeJointFlag', enabled: bool) -> None: ...
    def hinge_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer3D_HingeJointFlag') -> bool: ...
    def joint_make_slider(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def slider_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_SliderJointParam', value: float) -> None: ...
    def slider_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_SliderJointParam') -> float: ...
    def joint_make_cone_twist(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def cone_twist_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_ConeTwistJointParam', value: float) -> None: ...
    def cone_twist_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_ConeTwistJointParam') -> float: ...
    def joint_get_type(self, joint: 'RID') -> 'PhysicsServer3D_JointType': ...
    def joint_set_solver_priority(self, joint: 'RID', priority: int) -> None: ...
    def joint_get_solver_priority(self, joint: 'RID') -> int: ...
    def joint_disable_collisions_between_bodies(self, joint: 'RID', disable: bool) -> None: ...
    def joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> bool: ...
    def joint_make_generic_6dof(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def generic_6dof_joint_set_param(self, joint: 'RID', axis: 'Vector3_Axis', param: 'PhysicsServer3D_G6DOFJointAxisParam', value: float) -> None: ...
    def generic_6dof_joint_get_param(self, joint: 'RID', axis: 'Vector3_Axis', param: 'PhysicsServer3D_G6DOFJointAxisParam') -> float: ...
    def generic_6dof_joint_set_flag(self, joint: 'RID', axis: 'Vector3_Axis', flag: 'PhysicsServer3D_G6DOFJointAxisFlag', enable: bool) -> None: ...
    def generic_6dof_joint_get_flag(self, joint: 'RID', axis: 'Vector3_Axis', flag: 'PhysicsServer3D_G6DOFJointAxisFlag') -> bool: ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_active(self, active: bool) -> None: ...
    def get_process_info(self, process_info: 'PhysicsServer3D_ProcessInfo') -> int: ...
    
class PhysicsServer3D_JointType(Enum):
    JOINT_TYPE_PIN = 0
    JOINT_TYPE_HINGE = 1
    JOINT_TYPE_SLIDER = 2
    JOINT_TYPE_CONE_TWIST = 3
    JOINT_TYPE_6DOF = 4
    JOINT_TYPE_MAX = 5

class PhysicsServer3D_PinJointParam(Enum):
    PIN_JOINT_BIAS = 0
    PIN_JOINT_DAMPING = 1
    PIN_JOINT_IMPULSE_CLAMP = 2

class PhysicsServer3D_HingeJointParam(Enum):
    HINGE_JOINT_BIAS = 0
    HINGE_JOINT_LIMIT_UPPER = 1
    HINGE_JOINT_LIMIT_LOWER = 2
    HINGE_JOINT_LIMIT_BIAS = 3
    HINGE_JOINT_LIMIT_SOFTNESS = 4
    HINGE_JOINT_LIMIT_RELAXATION = 5
    HINGE_JOINT_MOTOR_TARGET_VELOCITY = 6
    HINGE_JOINT_MOTOR_MAX_IMPULSE = 7

class PhysicsServer3D_HingeJointFlag(Enum):
    HINGE_JOINT_FLAG_USE_LIMIT = 0
    HINGE_JOINT_FLAG_ENABLE_MOTOR = 1

class PhysicsServer3D_SliderJointParam(Enum):
    SLIDER_JOINT_LINEAR_LIMIT_UPPER = 0
    SLIDER_JOINT_LINEAR_LIMIT_LOWER = 1
    SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS = 2
    SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION = 3
    SLIDER_JOINT_LINEAR_LIMIT_DAMPING = 4
    SLIDER_JOINT_LINEAR_MOTION_SOFTNESS = 5
    SLIDER_JOINT_LINEAR_MOTION_RESTITUTION = 6
    SLIDER_JOINT_LINEAR_MOTION_DAMPING = 7
    SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS = 8
    SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION = 9
    SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING = 10
    SLIDER_JOINT_ANGULAR_LIMIT_UPPER = 11
    SLIDER_JOINT_ANGULAR_LIMIT_LOWER = 12
    SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS = 13
    SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION = 14
    SLIDER_JOINT_ANGULAR_LIMIT_DAMPING = 15
    SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS = 16
    SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION = 17
    SLIDER_JOINT_ANGULAR_MOTION_DAMPING = 18
    SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS = 19
    SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION = 20
    SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING = 21
    SLIDER_JOINT_MAX = 22

class PhysicsServer3D_ConeTwistJointParam(Enum):
    CONE_TWIST_JOINT_SWING_SPAN = 0
    CONE_TWIST_JOINT_TWIST_SPAN = 1
    CONE_TWIST_JOINT_BIAS = 2
    CONE_TWIST_JOINT_SOFTNESS = 3
    CONE_TWIST_JOINT_RELAXATION = 4

class PhysicsServer3D_G6DOFJointAxisParam(Enum):
    G6DOF_JOINT_LINEAR_LOWER_LIMIT = 0
    G6DOF_JOINT_LINEAR_UPPER_LIMIT = 1
    G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS = 2
    G6DOF_JOINT_LINEAR_RESTITUTION = 3
    G6DOF_JOINT_LINEAR_DAMPING = 4
    G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY = 5
    G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT = 6
    G6DOF_JOINT_LINEAR_SPRING_STIFFNESS = 7
    G6DOF_JOINT_LINEAR_SPRING_DAMPING = 8
    G6DOF_JOINT_LINEAR_SPRING_EQUILIBRIUM_POINT = 9
    G6DOF_JOINT_ANGULAR_LOWER_LIMIT = 10
    G6DOF_JOINT_ANGULAR_UPPER_LIMIT = 11
    G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS = 12
    G6DOF_JOINT_ANGULAR_DAMPING = 13
    G6DOF_JOINT_ANGULAR_RESTITUTION = 14
    G6DOF_JOINT_ANGULAR_FORCE_LIMIT = 15
    G6DOF_JOINT_ANGULAR_ERP = 16
    G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY = 17
    G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT = 18
    G6DOF_JOINT_ANGULAR_SPRING_STIFFNESS = 19
    G6DOF_JOINT_ANGULAR_SPRING_DAMPING = 20
    G6DOF_JOINT_ANGULAR_SPRING_EQUILIBRIUM_POINT = 21
    G6DOF_JOINT_MAX = 22

class PhysicsServer3D_G6DOFJointAxisFlag(Enum):
    G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT = 0
    G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT = 1
    G6DOF_JOINT_FLAG_ENABLE_ANGULAR_SPRING = 2
    G6DOF_JOINT_FLAG_ENABLE_LINEAR_SPRING = 3
    G6DOF_JOINT_FLAG_ENABLE_MOTOR = 4
    G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR = 5
    G6DOF_JOINT_FLAG_MAX = 6

class PhysicsServer3D_ShapeType(Enum):
    SHAPE_WORLD_BOUNDARY = 0
    SHAPE_SEPARATION_RAY = 1
    SHAPE_SPHERE = 2
    SHAPE_BOX = 3
    SHAPE_CAPSULE = 4
    SHAPE_CYLINDER = 5
    SHAPE_CONVEX_POLYGON = 6
    SHAPE_CONCAVE_POLYGON = 7
    SHAPE_HEIGHTMAP = 8
    SHAPE_SOFT_BODY = 9
    SHAPE_CUSTOM = 10

class PhysicsServer3D_AreaParameter(Enum):
    AREA_PARAM_GRAVITY_OVERRIDE_MODE = 0
    AREA_PARAM_GRAVITY = 1
    AREA_PARAM_GRAVITY_VECTOR = 2
    AREA_PARAM_GRAVITY_IS_POINT = 3
    AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE = 4
    AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE = 5
    AREA_PARAM_LINEAR_DAMP = 6
    AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE = 7
    AREA_PARAM_ANGULAR_DAMP = 8
    AREA_PARAM_PRIORITY = 9
    AREA_PARAM_WIND_FORCE_MAGNITUDE = 10
    AREA_PARAM_WIND_SOURCE = 11
    AREA_PARAM_WIND_DIRECTION = 12
    AREA_PARAM_WIND_ATTENUATION_FACTOR = 13

class PhysicsServer3D_AreaSpaceOverrideMode(Enum):
    AREA_SPACE_OVERRIDE_DISABLED = 0
    AREA_SPACE_OVERRIDE_COMBINE = 1
    AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2
    AREA_SPACE_OVERRIDE_REPLACE = 3
    AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4

class PhysicsServer3D_BodyMode(Enum):
    BODY_MODE_STATIC = 0
    BODY_MODE_KINEMATIC = 1
    BODY_MODE_RIGID = 2
    BODY_MODE_RIGID_LINEAR = 3

class PhysicsServer3D_BodyParameter(Enum):
    BODY_PARAM_BOUNCE = 0
    BODY_PARAM_FRICTION = 1
    BODY_PARAM_MASS = 2
    BODY_PARAM_INERTIA = 3
    BODY_PARAM_CENTER_OF_MASS = 4
    BODY_PARAM_GRAVITY_SCALE = 5
    BODY_PARAM_LINEAR_DAMP_MODE = 6
    BODY_PARAM_ANGULAR_DAMP_MODE = 7
    BODY_PARAM_LINEAR_DAMP = 8
    BODY_PARAM_ANGULAR_DAMP = 9
    BODY_PARAM_MAX = 10

class PhysicsServer3D_BodyDampMode(Enum):
    BODY_DAMP_MODE_COMBINE = 0
    BODY_DAMP_MODE_REPLACE = 1

class PhysicsServer3D_BodyState(Enum):
    BODY_STATE_TRANSFORM = 0
    BODY_STATE_LINEAR_VELOCITY = 1
    BODY_STATE_ANGULAR_VELOCITY = 2
    BODY_STATE_SLEEPING = 3
    BODY_STATE_CAN_SLEEP = 4

class PhysicsServer3D_AreaBodyStatus(Enum):
    AREA_BODY_ADDED = 0
    AREA_BODY_REMOVED = 1

class PhysicsServer3D_ProcessInfo(Enum):
    INFO_ACTIVE_OBJECTS = 0
    INFO_COLLISION_PAIRS = 1
    INFO_ISLAND_COUNT = 2

class PhysicsServer3D_SpaceParameter(Enum):
    SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0
    SPACE_PARAM_CONTACT_MAX_SEPARATION = 1
    SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION = 2
    SPACE_PARAM_CONTACT_DEFAULT_BIAS = 3
    SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 4
    SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 5
    SPACE_PARAM_BODY_TIME_TO_SLEEP = 6
    SPACE_PARAM_SOLVER_ITERATIONS = 7

class PhysicsServer3D_BodyAxis(Enum):
    BODY_AXIS_LINEAR_X = 1
    BODY_AXIS_LINEAR_Y = 2
    BODY_AXIS_LINEAR_Z = 4
    BODY_AXIS_ANGULAR_X = 8
    BODY_AXIS_ANGULAR_Y = 16
    BODY_AXIS_ANGULAR_Z = 32

class PhysicsServer3DExtension(PhysicsServer3D):
    def _world_boundary_shape_create(self) -> 'RID': ...
    def _separation_ray_shape_create(self) -> 'RID': ...
    def _sphere_shape_create(self) -> 'RID': ...
    def _box_shape_create(self) -> 'RID': ...
    def _capsule_shape_create(self) -> 'RID': ...
    def _cylinder_shape_create(self) -> 'RID': ...
    def _convex_polygon_shape_create(self) -> 'RID': ...
    def _concave_polygon_shape_create(self) -> 'RID': ...
    def _heightmap_shape_create(self) -> 'RID': ...
    def _custom_shape_create(self) -> 'RID': ...
    def _shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def _shape_set_custom_solver_bias(self, shape: 'RID', bias: float) -> None: ...
    def _shape_set_margin(self, shape: 'RID', margin: float) -> None: ...
    def _shape_get_margin(self, shape: 'RID') -> float: ...
    def _shape_get_type(self, shape: 'RID') -> 'PhysicsServer3D_ShapeType': ...
    def _shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def _shape_get_custom_solver_bias(self, shape: 'RID') -> float: ...
    def _space_create(self) -> 'RID': ...
    def _space_set_active(self, space: 'RID', active: bool) -> None: ...
    def _space_is_active(self, space: 'RID') -> bool: ...
    def _space_set_param(self, space: 'RID', param: 'PhysicsServer3D_SpaceParameter', value: float) -> None: ...
    def _space_get_param(self, space: 'RID', param: 'PhysicsServer3D_SpaceParameter') -> float: ...
    def _space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState3D': ...
    def _space_set_debug_contacts(self, space: 'RID', max_contacts: int) -> None: ...
    def _space_get_contacts(self, space: 'RID') -> 'PackedVector3Array': ...
    def _space_get_contact_count(self, space: 'RID') -> int: ...
    def _area_create(self) -> 'RID': ...
    def _area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def _area_get_space(self, area: 'RID') -> 'RID': ...
    def _area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform3D', disabled: bool) -> None: ...
    def _area_set_shape(self, area: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def _area_set_shape_transform(self, area: 'RID', shape_idx: int, transform: 'Transform3D') -> None: ...
    def _area_set_shape_disabled(self, area: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def _area_get_shape_count(self, area: 'RID') -> int: ...
    def _area_get_shape(self, area: 'RID', shape_idx: int) -> 'RID': ...
    def _area_get_shape_transform(self, area: 'RID', shape_idx: int) -> 'Transform3D': ...
    def _area_remove_shape(self, area: 'RID', shape_idx: int) -> None: ...
    def _area_clear_shapes(self, area: 'RID') -> None: ...
    def _area_attach_object_instance_id(self, area: 'RID', id: int) -> None: ...
    def _area_get_object_instance_id(self, area: 'RID') -> int: ...
    def _area_set_param(self, area: 'RID', param: 'PhysicsServer3D_AreaParameter', value: 'Variant') -> None: ...
    def _area_set_transform(self, area: 'RID', transform: 'Transform3D') -> None: ...
    def _area_get_param(self, area: 'RID', param: 'PhysicsServer3D_AreaParameter') -> 'Variant': ...
    def _area_get_transform(self, area: 'RID') -> 'Transform3D': ...
    def _area_set_collision_layer(self, area: 'RID', layer: int) -> None: ...
    def _area_get_collision_layer(self, area: 'RID') -> int: ...
    def _area_set_collision_mask(self, area: 'RID', mask: int) -> None: ...
    def _area_get_collision_mask(self, area: 'RID') -> int: ...
    def _area_set_monitorable(self, area: 'RID', monitorable: bool) -> None: ...
    def _area_set_ray_pickable(self, area: 'RID', enable: bool) -> None: ...
    def _area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _body_create(self) -> 'RID': ...
    def _body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def _body_get_space(self, body: 'RID') -> 'RID': ...
    def _body_set_mode(self, body: 'RID', mode: 'PhysicsServer3D_BodyMode') -> None: ...
    def _body_get_mode(self, body: 'RID') -> 'PhysicsServer3D_BodyMode': ...
    def _body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform3D', disabled: bool) -> None: ...
    def _body_set_shape(self, body: 'RID', shape_idx: int, shape: 'RID') -> None: ...
    def _body_set_shape_transform(self, body: 'RID', shape_idx: int, transform: 'Transform3D') -> None: ...
    def _body_set_shape_disabled(self, body: 'RID', shape_idx: int, disabled: bool) -> None: ...
    def _body_get_shape_count(self, body: 'RID') -> int: ...
    def _body_get_shape(self, body: 'RID', shape_idx: int) -> 'RID': ...
    def _body_get_shape_transform(self, body: 'RID', shape_idx: int) -> 'Transform3D': ...
    def _body_remove_shape(self, body: 'RID', shape_idx: int) -> None: ...
    def _body_clear_shapes(self, body: 'RID') -> None: ...
    def _body_attach_object_instance_id(self, body: 'RID', id: int) -> None: ...
    def _body_get_object_instance_id(self, body: 'RID') -> int: ...
    def _body_set_enable_continuous_collision_detection(self, body: 'RID', enable: bool) -> None: ...
    def _body_is_continuous_collision_detection_enabled(self, body: 'RID') -> bool: ...
    def _body_set_collision_layer(self, body: 'RID', layer: int) -> None: ...
    def _body_get_collision_layer(self, body: 'RID') -> int: ...
    def _body_set_collision_mask(self, body: 'RID', mask: int) -> None: ...
    def _body_get_collision_mask(self, body: 'RID') -> int: ...
    def _body_set_collision_priority(self, body: 'RID', priority: float) -> None: ...
    def _body_get_collision_priority(self, body: 'RID') -> float: ...
    def _body_set_user_flags(self, body: 'RID', flags: int) -> None: ...
    def _body_get_user_flags(self, body: 'RID') -> int: ...
    def _body_set_param(self, body: 'RID', param: 'PhysicsServer3D_BodyParameter', value: 'Variant') -> None: ...
    def _body_get_param(self, body: 'RID', param: 'PhysicsServer3D_BodyParameter') -> 'Variant': ...
    def _body_reset_mass_properties(self, body: 'RID') -> None: ...
    def _body_set_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState', value: 'Variant') -> None: ...
    def _body_get_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState') -> 'Variant': ...
    def _body_apply_central_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def _body_apply_impulse(self, body: 'RID', impulse: 'Vector3', position: 'Vector3') -> None: ...
    def _body_apply_torque_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def _body_apply_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def _body_apply_force(self, body: 'RID', force: 'Vector3', position: 'Vector3') -> None: ...
    def _body_apply_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def _body_add_constant_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def _body_add_constant_force(self, body: 'RID', force: 'Vector3', position: 'Vector3') -> None: ...
    def _body_add_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def _body_set_constant_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def _body_get_constant_force(self, body: 'RID') -> 'Vector3': ...
    def _body_set_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def _body_get_constant_torque(self, body: 'RID') -> 'Vector3': ...
    def _body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector3') -> None: ...
    def _body_set_axis_lock(self, body: 'RID', axis: 'PhysicsServer3D_BodyAxis', lock: bool) -> None: ...
    def _body_is_axis_locked(self, body: 'RID', axis: 'PhysicsServer3D_BodyAxis') -> bool: ...
    def _body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_get_collision_exceptions(self, body: 'RID') -> 'list[RID]': ...
    def _body_set_max_contacts_reported(self, body: 'RID', amount: int) -> None: ...
    def _body_get_max_contacts_reported(self, body: 'RID') -> int: ...
    def _body_set_contacts_reported_depth_threshold(self, body: 'RID', threshold: float) -> None: ...
    def _body_get_contacts_reported_depth_threshold(self, body: 'RID') -> float: ...
    def _body_set_omit_force_integration(self, body: 'RID', enable: bool) -> None: ...
    def _body_is_omitting_force_integration(self, body: 'RID') -> bool: ...
    def _body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def _body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant') -> None: ...
    def _body_set_ray_pickable(self, body: 'RID', enable: bool) -> None: ...
    def _body_test_motion(self, body: 'RID', from_: 'Transform3D', motion: 'Vector3', margin: float, max_collisions: int, collide_separation_ray: bool, recovery_as_collision: bool, result: 'intptr') -> bool: ...
    def _body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState3D': ...
    def _soft_body_create(self) -> 'RID': ...
    def _soft_body_update_rendering_server(self, body: 'RID', rendering_server_handler: 'PhysicsServer3DRenderingServerHandler') -> None: ...
    def _soft_body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def _soft_body_get_space(self, body: 'RID') -> 'RID': ...
    def _soft_body_set_ray_pickable(self, body: 'RID', enable: bool) -> None: ...
    def _soft_body_set_collision_layer(self, body: 'RID', layer: int) -> None: ...
    def _soft_body_get_collision_layer(self, body: 'RID') -> int: ...
    def _soft_body_set_collision_mask(self, body: 'RID', mask: int) -> None: ...
    def _soft_body_get_collision_mask(self, body: 'RID') -> int: ...
    def _soft_body_add_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def _soft_body_remove_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def _soft_body_get_collision_exceptions(self, body: 'RID') -> 'list[RID]': ...
    def _soft_body_set_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState', variant: 'Variant') -> None: ...
    def _soft_body_get_state(self, body: 'RID', state: 'PhysicsServer3D_BodyState') -> 'Variant': ...
    def _soft_body_set_transform(self, body: 'RID', transform: 'Transform3D') -> None: ...
    def _soft_body_set_simulation_precision(self, body: 'RID', simulation_precision: int) -> None: ...
    def _soft_body_get_simulation_precision(self, body: 'RID') -> int: ...
    def _soft_body_set_total_mass(self, body: 'RID', total_mass: float) -> None: ...
    def _soft_body_get_total_mass(self, body: 'RID') -> float: ...
    def _soft_body_set_linear_stiffness(self, body: 'RID', linear_stiffness: float) -> None: ...
    def _soft_body_get_linear_stiffness(self, body: 'RID') -> float: ...
    def _soft_body_set_pressure_coefficient(self, body: 'RID', pressure_coefficient: float) -> None: ...
    def _soft_body_get_pressure_coefficient(self, body: 'RID') -> float: ...
    def _soft_body_set_damping_coefficient(self, body: 'RID', damping_coefficient: float) -> None: ...
    def _soft_body_get_damping_coefficient(self, body: 'RID') -> float: ...
    def _soft_body_set_drag_coefficient(self, body: 'RID', drag_coefficient: float) -> None: ...
    def _soft_body_get_drag_coefficient(self, body: 'RID') -> float: ...
    def _soft_body_set_mesh(self, body: 'RID', mesh: 'RID') -> None: ...
    def _soft_body_get_bounds(self, body: 'RID') -> 'AABB': ...
    def _soft_body_move_point(self, body: 'RID', point_index: int, global_position: 'Vector3') -> None: ...
    def _soft_body_get_point_global_position(self, body: 'RID', point_index: int) -> 'Vector3': ...
    def _soft_body_remove_all_pinned_points(self, body: 'RID') -> None: ...
    def _soft_body_pin_point(self, body: 'RID', point_index: int, pin: bool) -> None: ...
    def _soft_body_is_point_pinned(self, body: 'RID', point_index: int) -> bool: ...
    def _joint_create(self) -> 'RID': ...
    def _joint_clear(self, joint: 'RID') -> None: ...
    def _joint_make_pin(self, joint: 'RID', body_A: 'RID', local_A: 'Vector3', body_B: 'RID', local_B: 'Vector3') -> None: ...
    def _pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_PinJointParam', value: float) -> None: ...
    def _pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_PinJointParam') -> float: ...
    def _pin_joint_set_local_a(self, joint: 'RID', local_A: 'Vector3') -> None: ...
    def _pin_joint_get_local_a(self, joint: 'RID') -> 'Vector3': ...
    def _pin_joint_set_local_b(self, joint: 'RID', local_B: 'Vector3') -> None: ...
    def _pin_joint_get_local_b(self, joint: 'RID') -> 'Vector3': ...
    def _joint_make_hinge(self, joint: 'RID', body_A: 'RID', hinge_A: 'Transform3D', body_B: 'RID', hinge_B: 'Transform3D') -> None: ...
    def _joint_make_hinge_simple(self, joint: 'RID', body_A: 'RID', pivot_A: 'Vector3', axis_A: 'Vector3', body_B: 'RID', pivot_B: 'Vector3', axis_B: 'Vector3') -> None: ...
    def _hinge_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_HingeJointParam', value: float) -> None: ...
    def _hinge_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_HingeJointParam') -> float: ...
    def _hinge_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer3D_HingeJointFlag', enabled: bool) -> None: ...
    def _hinge_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer3D_HingeJointFlag') -> bool: ...
    def _joint_make_slider(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def _slider_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_SliderJointParam', value: float) -> None: ...
    def _slider_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_SliderJointParam') -> float: ...
    def _joint_make_cone_twist(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def _cone_twist_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D_ConeTwistJointParam', value: float) -> None: ...
    def _cone_twist_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D_ConeTwistJointParam') -> float: ...
    def _joint_make_generic_6dof(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def _generic_6dof_joint_set_param(self, joint: 'RID', axis: 'Vector3_Axis', param: 'PhysicsServer3D_G6DOFJointAxisParam', value: float) -> None: ...
    def _generic_6dof_joint_get_param(self, joint: 'RID', axis: 'Vector3_Axis', param: 'PhysicsServer3D_G6DOFJointAxisParam') -> float: ...
    def _generic_6dof_joint_set_flag(self, joint: 'RID', axis: 'Vector3_Axis', flag: 'PhysicsServer3D_G6DOFJointAxisFlag', enable: bool) -> None: ...
    def _generic_6dof_joint_get_flag(self, joint: 'RID', axis: 'Vector3_Axis', flag: 'PhysicsServer3D_G6DOFJointAxisFlag') -> bool: ...
    def _joint_get_type(self, joint: 'RID') -> 'PhysicsServer3D_JointType': ...
    def _joint_set_solver_priority(self, joint: 'RID', priority: int) -> None: ...
    def _joint_get_solver_priority(self, joint: 'RID') -> int: ...
    def _joint_disable_collisions_between_bodies(self, joint: 'RID', disable: bool) -> None: ...
    def _joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> bool: ...
    def _free_rid(self, rid: 'RID') -> None: ...
    def _set_active(self, active: bool) -> None: ...
    def _init(self) -> None: ...
    def _step(self, step: float) -> None: ...
    def _sync(self) -> None: ...
    def _flush_queries(self) -> None: ...
    def _end_sync(self) -> None: ...
    def _finish(self) -> None: ...
    def _is_flushing_queries(self) -> bool: ...
    def _get_process_info(self, process_info: 'PhysicsServer3D_ProcessInfo') -> int: ...
    def body_test_motion_is_excluding_body(self, body: 'RID') -> bool: ...
    def body_test_motion_is_excluding_object(self, object: int) -> bool: ...
    
class PhysicsServer3DManager(Object):
    def register_server(self, name: 'String', create_callback: 'Callable') -> None: ...
    def set_default_server(self, name: 'String', priority: int) -> None: ...
    
class PhysicsServer3DRenderingServerHandler(Object):
    def _set_vertex(self, vertex_id: int, vertex: 'Vector3') -> None: ...
    def _set_normal(self, vertex_id: int, normal: 'Vector3') -> None: ...
    def _set_aabb(self, aabb: 'AABB') -> None: ...
    def set_vertex(self, vertex_id: int, vertex: 'Vector3') -> None: ...
    def set_normal(self, vertex_id: int, normal: 'Vector3') -> None: ...
    def set_aabb(self, aabb: 'AABB') -> None: ...
    
class PhysicsShapeQueryParameters2D(RefCounted):
    collision_mask: int
    exclude: 'list[RID]'
    margin: float
    motion: 'Vector2'
    shape: 'Shape2D'
    shape_rid: 'RID'
    transform: 'Transform2D'
    collide_with_bodies: bool
    collide_with_areas: bool
    def set_shape(self, shape: 'Resource') -> None: ...
    def get_shape(self) -> 'Resource': ...
    def set_shape_rid(self, shape: 'RID') -> None: ...
    def get_shape_rid(self) -> 'RID': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def set_motion(self, motion: 'Vector2') -> None: ...
    def get_motion(self) -> 'Vector2': ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: 'list[RID]') -> None: ...
    def get_exclude(self) -> 'list[RID]': ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    
class PhysicsShapeQueryParameters3D(RefCounted):
    collision_mask: int
    exclude: 'list[RID]'
    margin: float
    motion: 'Vector3'
    shape: 'Shape3D'
    shape_rid: 'RID'
    transform: 'Transform3D'
    collide_with_bodies: bool
    collide_with_areas: bool
    def set_shape(self, shape: 'Resource') -> None: ...
    def get_shape(self) -> 'Resource': ...
    def set_shape_rid(self, shape: 'RID') -> None: ...
    def get_shape_rid(self) -> 'RID': ...
    def set_transform(self, transform: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def set_motion(self, motion: 'Vector3') -> None: ...
    def get_motion(self) -> 'Vector3': ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_exclude(self, exclude: 'list[RID]') -> None: ...
    def get_exclude(self) -> 'list[RID]': ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    
class PhysicsTestMotionParameters2D(RefCounted):
    from_: 'Transform2D'
    motion: 'Vector2'
    margin: float
    collide_separation_ray: bool
    exclude_bodies: 'list[RID]'
    exclude_objects: 'Array'
    recovery_as_collision: bool
    def get_from(self) -> 'Transform2D': ...
    def set_from(self, from_: 'Transform2D') -> None: ...
    def get_motion(self) -> 'Vector2': ...
    def set_motion(self, motion: 'Vector2') -> None: ...
    def get_margin(self) -> float: ...
    def set_margin(self, margin: float) -> None: ...
    def is_collide_separation_ray_enabled(self) -> bool: ...
    def set_collide_separation_ray_enabled(self, enabled: bool) -> None: ...
    def get_exclude_bodies(self) -> 'list[RID]': ...
    def set_exclude_bodies(self, exclude_list: 'list[RID]') -> None: ...
    def get_exclude_objects(self) -> 'list[int]': ...
    def set_exclude_objects(self, exclude_list: 'list[int]') -> None: ...
    def is_recovery_as_collision_enabled(self) -> bool: ...
    def set_recovery_as_collision_enabled(self, enabled: bool) -> None: ...
    
class PhysicsTestMotionParameters3D(RefCounted):
    from_: 'Transform3D'
    motion: 'Vector3'
    margin: float
    max_collisions: int
    collide_separation_ray: bool
    exclude_bodies: 'list[RID]'
    exclude_objects: 'Array'
    recovery_as_collision: bool
    def get_from(self) -> 'Transform3D': ...
    def set_from(self, from_: 'Transform3D') -> None: ...
    def get_motion(self) -> 'Vector3': ...
    def set_motion(self, motion: 'Vector3') -> None: ...
    def get_margin(self) -> float: ...
    def set_margin(self, margin: float) -> None: ...
    def get_max_collisions(self) -> int: ...
    def set_max_collisions(self, max_collisions: int) -> None: ...
    def is_collide_separation_ray_enabled(self) -> bool: ...
    def set_collide_separation_ray_enabled(self, enabled: bool) -> None: ...
    def get_exclude_bodies(self) -> 'list[RID]': ...
    def set_exclude_bodies(self, exclude_list: 'list[RID]') -> None: ...
    def get_exclude_objects(self) -> 'list[int]': ...
    def set_exclude_objects(self, exclude_list: 'list[int]') -> None: ...
    def is_recovery_as_collision_enabled(self) -> bool: ...
    def set_recovery_as_collision_enabled(self, enabled: bool) -> None: ...
    
class PhysicsTestMotionResult2D(RefCounted):
    def get_travel(self) -> 'Vector2': ...
    def get_remainder(self) -> 'Vector2': ...
    def get_collision_point(self) -> 'Vector2': ...
    def get_collision_normal(self) -> 'Vector2': ...
    def get_collider_velocity(self) -> 'Vector2': ...
    def get_collider_id(self) -> int: ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider(self) -> 'Object': ...
    def get_collider_shape(self) -> int: ...
    def get_collision_local_shape(self) -> int: ...
    def get_collision_depth(self) -> float: ...
    def get_collision_safe_fraction(self) -> float: ...
    def get_collision_unsafe_fraction(self) -> float: ...
    
class PhysicsTestMotionResult3D(RefCounted):
    def get_travel(self) -> 'Vector3': ...
    def get_remainder(self) -> 'Vector3': ...
    def get_collision_safe_fraction(self) -> float: ...
    def get_collision_unsafe_fraction(self) -> float: ...
    def get_collision_count(self) -> int: ...
    def get_collision_point(self, collision_index: int = default('''0''')) -> 'Vector3': ...
    def get_collision_normal(self, collision_index: int = default('''0''')) -> 'Vector3': ...
    def get_collider_velocity(self, collision_index: int = default('''0''')) -> 'Vector3': ...
    def get_collider_id(self, collision_index: int = default('''0''')) -> int: ...
    def get_collider_rid(self, collision_index: int = default('''0''')) -> 'RID': ...
    def get_collider(self, collision_index: int = default('''0''')) -> 'Object': ...
    def get_collider_shape(self, collision_index: int = default('''0''')) -> int: ...
    def get_collision_local_shape(self, collision_index: int = default('''0''')) -> int: ...
    def get_collision_depth(self, collision_index: int = default('''0''')) -> float: ...
    
class PinJoint2D(Joint2D):
    softness: float
    angular_limit_enabled: bool
    angular_limit_lower: float
    angular_limit_upper: float
    motor_enabled: bool
    motor_target_velocity: float
    def set_softness(self, softness: float) -> None: ...
    def get_softness(self) -> float: ...
    def set_angular_limit_lower(self, angular_limit_lower: float) -> None: ...
    def get_angular_limit_lower(self) -> float: ...
    def set_angular_limit_upper(self, angular_limit_upper: float) -> None: ...
    def get_angular_limit_upper(self) -> float: ...
    def set_motor_target_velocity(self, motor_target_velocity: float) -> None: ...
    def get_motor_target_velocity(self) -> float: ...
    def set_motor_enabled(self, enabled: bool) -> None: ...
    def is_motor_enabled(self) -> bool: ...
    def set_angular_limit_enabled(self, enabled: bool) -> None: ...
    def is_angular_limit_enabled(self) -> bool: ...
    
class PinJoint3D(Joint3D):
    def set_param(self, param: 'PinJoint3D_Param', value: float) -> None: ...
    def get_param(self, param: 'PinJoint3D_Param') -> float: ...
    
class PinJoint3D_Param(Enum):
    PARAM_BIAS = 0
    PARAM_DAMPING = 1
    PARAM_IMPULSE_CLAMP = 2

class PlaceholderCubemap(PlaceholderTextureLayered):
    pass
    
class PlaceholderCubemapArray(PlaceholderTextureLayered):
    pass
    
class PlaceholderMaterial(Material):
    pass
    
class PlaceholderMesh(Mesh):
    aabb: 'AABB'
    def set_aabb(self, aabb: 'AABB') -> None: ...
    
class PlaceholderTexture2D(Texture2D):
    size: 'Vector2'
    def set_size(self, size: 'Vector2') -> None: ...
    
class PlaceholderTexture2DArray(PlaceholderTextureLayered):
    pass
    
class PlaceholderTexture3D(Texture3D):
    size: 'Vector3i'
    def set_size(self, size: 'Vector3i') -> None: ...
    def get_size(self) -> 'Vector3i': ...
    
class PlaceholderTextureLayered(TextureLayered):
    size: 'Vector2i'
    layers: int
    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def set_layers(self, layers: int) -> None: ...
    
class PlaneMesh(PrimitiveMesh):
    size: 'Vector2'
    subdivide_width: int
    subdivide_depth: int
    center_offset: 'Vector3'
    orientation: int
    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...
    def set_subdivide_width(self, subdivide: int) -> None: ...
    def get_subdivide_width(self) -> int: ...
    def set_subdivide_depth(self, subdivide: int) -> None: ...
    def get_subdivide_depth(self) -> int: ...
    def set_center_offset(self, offset: 'Vector3') -> None: ...
    def get_center_offset(self) -> 'Vector3': ...
    def set_orientation(self, orientation: 'PlaneMesh_Orientation') -> None: ...
    def get_orientation(self) -> 'PlaneMesh_Orientation': ...
    
class PlaneMesh_Orientation(Enum):
    FACE_X = 0
    FACE_Y = 1
    FACE_Z = 2

class PointLight2D(Light2D):
    texture: 'Texture2D'
    offset: 'Vector2'
    texture_scale: float
    height: float
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_offset(self, texture_offset: 'Vector2') -> None: ...
    def get_texture_offset(self) -> 'Vector2': ...
    def set_texture_scale(self, texture_scale: float) -> None: ...
    def get_texture_scale(self) -> float: ...
    
class PointMesh(PrimitiveMesh):
    pass
    
class Polygon2D(Node2D):
    color: 'Color'
    offset: 'Vector2'
    antialiased: bool
    texture: 'Texture2D'
    texture_offset: 'Vector2'
    texture_scale: 'Vector2'
    texture_rotation: float
    skeleton: 'NodePath'
    invert_enabled: bool
    invert_border: float
    polygon: 'PackedVector2Array'
    uv: 'PackedVector2Array'
    vertex_colors: 'PackedColorArray'
    polygons: 'Array'
    bones: 'Array'
    internal_vertex_count: int
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_uv(self, uv: 'PackedVector2Array') -> None: ...
    def get_uv(self) -> 'PackedVector2Array': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_polygons(self, polygons: 'Array') -> None: ...
    def get_polygons(self) -> 'Array': ...
    def set_vertex_colors(self, vertex_colors: 'PackedColorArray') -> None: ...
    def get_vertex_colors(self) -> 'PackedColorArray': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_offset(self, texture_offset: 'Vector2') -> None: ...
    def get_texture_offset(self) -> 'Vector2': ...
    def set_texture_rotation(self, texture_rotation: float) -> None: ...
    def get_texture_rotation(self) -> float: ...
    def set_texture_scale(self, texture_scale: 'Vector2') -> None: ...
    def get_texture_scale(self) -> 'Vector2': ...
    def set_invert_enabled(self, invert: bool) -> None: ...
    def get_invert_enabled(self) -> bool: ...
    def set_antialiased(self, antialiased: bool) -> None: ...
    def get_antialiased(self) -> bool: ...
    def set_invert_border(self, invert_border: float) -> None: ...
    def get_invert_border(self) -> float: ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def add_bone(self, path: 'NodePath', weights: 'PackedFloat32Array') -> None: ...
    def get_bone_count(self) -> int: ...
    def get_bone_path(self, index: int) -> 'NodePath': ...
    def get_bone_weights(self, index: int) -> 'PackedFloat32Array': ...
    def erase_bone(self, index: int) -> None: ...
    def clear_bones(self) -> None: ...
    def set_bone_path(self, index: int, path: 'NodePath') -> None: ...
    def set_bone_weights(self, index: int, weights: 'PackedFloat32Array') -> None: ...
    def set_skeleton(self, skeleton: 'NodePath') -> None: ...
    def get_skeleton(self) -> 'NodePath': ...
    def set_internal_vertex_count(self, internal_vertex_count: int) -> None: ...
    def get_internal_vertex_count(self) -> int: ...
    
class PolygonOccluder3D(Occluder3D):
    polygon: 'PackedVector2Array'
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    
class PolygonPathFinder(Resource):
    data: 'Dictionary'
    def setup(self, points: 'PackedVector2Array', connections: 'PackedInt32Array') -> None: ...
    def find_path(self, from_: 'Vector2', to: 'Vector2') -> 'PackedVector2Array': ...
    def get_intersections(self, from_: 'Vector2', to: 'Vector2') -> 'PackedVector2Array': ...
    def get_closest_point(self, point: 'Vector2') -> 'Vector2': ...
    def is_point_inside(self, point: 'Vector2') -> bool: ...
    def set_point_penalty(self, idx: int, penalty: float) -> None: ...
    def get_point_penalty(self, idx: int) -> float: ...
    def get_bounds(self) -> 'Rect2': ...
    
class Popup(Window):
    popup_hide: Signal[Callable[[], None]]  # popup_hide()
    
class PopupMenu(Popup):
    hide_on_item_selection: bool
    hide_on_checkable_item_selection: bool
    hide_on_state_item_selection: bool
    submenu_popup_delay: float
    allow_search: bool
    system_menu_id: int
    prefer_native_menu: bool
    item_count: int
    id_pressed: Signal[Callable[['int'], None]]  # id_pressed(id: int)
    id_focused: Signal[Callable[['int'], None]]  # id_focused(id: int)
    index_pressed: Signal[Callable[['int'], None]]  # index_pressed(index: int)
    menu_changed: Signal[Callable[[], None]]  # menu_changed()
    def activate_item_by_event(self, event: 'InputEvent', for_global_only: bool = default('''false''')) -> bool: ...
    def set_prefer_native_menu(self, enabled: bool) -> None: ...
    def is_prefer_native_menu(self) -> bool: ...
    def is_native_menu(self) -> bool: ...
    def add_item(self, label: 'String', id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_icon_item(self, texture: 'Texture2D', label: 'String', id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_check_item(self, label: 'String', id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_icon_check_item(self, texture: 'Texture2D', label: 'String', id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_radio_check_item(self, label: 'String', id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_icon_radio_check_item(self, texture: 'Texture2D', label: 'String', id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_multistate_item(self, label: 'String', max_states: int, default_state: int = default('''0'''), id: int = default('''-1'''), accel: 'Key' = default('''0''')) -> None: ...
    def add_shortcut(self, shortcut: 'Shortcut', id: int = default('''-1'''), global_: bool = default('''false'''), allow_echo: bool = default('''false''')) -> None: ...
    def add_icon_shortcut(self, texture: 'Texture2D', shortcut: 'Shortcut', id: int = default('''-1'''), global_: bool = default('''false'''), allow_echo: bool = default('''false''')) -> None: ...
    def add_check_shortcut(self, shortcut: 'Shortcut', id: int = default('''-1'''), global_: bool = default('''false''')) -> None: ...
    def add_icon_check_shortcut(self, texture: 'Texture2D', shortcut: 'Shortcut', id: int = default('''-1'''), global_: bool = default('''false''')) -> None: ...
    def add_radio_check_shortcut(self, shortcut: 'Shortcut', id: int = default('''-1'''), global_: bool = default('''false''')) -> None: ...
    def add_icon_radio_check_shortcut(self, texture: 'Texture2D', shortcut: 'Shortcut', id: int = default('''-1'''), global_: bool = default('''false''')) -> None: ...
    def add_submenu_item(self, label: 'String', submenu: 'String', id: int = default('''-1''')) -> None: ...
    def add_submenu_node_item(self, label: 'String', submenu: 'PopupMenu', id: int = default('''-1''')) -> None: ...
    def set_item_text(self, index: int, text: 'String') -> None: ...
    def set_item_text_direction(self, index: int, direction: 'Control_TextDirection') -> None: ...
    def set_item_language(self, index: int, language: 'String') -> None: ...
    def set_item_icon(self, index: int, icon: 'Texture2D') -> None: ...
    def set_item_icon_max_width(self, index: int, width: int) -> None: ...
    def set_item_icon_modulate(self, index: int, modulate: 'Color') -> None: ...
    def set_item_checked(self, index: int, checked: bool) -> None: ...
    def set_item_id(self, index: int, id: int) -> None: ...
    def set_item_accelerator(self, index: int, accel: 'Key') -> None: ...
    def set_item_metadata(self, index: int, metadata: 'Variant') -> None: ...
    def set_item_disabled(self, index: int, disabled: bool) -> None: ...
    def set_item_submenu(self, index: int, submenu: 'String') -> None: ...
    def set_item_submenu_node(self, index: int, submenu: 'PopupMenu') -> None: ...
    def set_item_as_separator(self, index: int, enable: bool) -> None: ...
    def set_item_as_checkable(self, index: int, enable: bool) -> None: ...
    def set_item_as_radio_checkable(self, index: int, enable: bool) -> None: ...
    def set_item_tooltip(self, index: int, tooltip: 'String') -> None: ...
    def set_item_shortcut(self, index: int, shortcut: 'Shortcut', global_: bool = default('''false''')) -> None: ...
    def set_item_indent(self, index: int, indent: int) -> None: ...
    def set_item_multistate(self, index: int, state: int) -> None: ...
    def set_item_multistate_max(self, index: int, max_states: int) -> None: ...
    def set_item_shortcut_disabled(self, index: int, disabled: bool) -> None: ...
    def toggle_item_checked(self, index: int) -> None: ...
    def toggle_item_multistate(self, index: int) -> None: ...
    def get_item_text(self, index: int) -> 'String': ...
    def get_item_text_direction(self, index: int) -> 'Control_TextDirection': ...
    def get_item_language(self, index: int) -> 'String': ...
    def get_item_icon(self, index: int) -> 'Texture2D': ...
    def get_item_icon_max_width(self, index: int) -> int: ...
    def get_item_icon_modulate(self, index: int) -> 'Color': ...
    def is_item_checked(self, index: int) -> bool: ...
    def get_item_id(self, index: int) -> int: ...
    def get_item_index(self, id: int) -> int: ...
    def get_item_accelerator(self, index: int) -> 'Key': ...
    def get_item_metadata(self, index: int) -> 'Variant': ...
    def is_item_disabled(self, index: int) -> bool: ...
    def get_item_submenu(self, index: int) -> 'String': ...
    def get_item_submenu_node(self, index: int) -> 'PopupMenu': ...
    def is_item_separator(self, index: int) -> bool: ...
    def is_item_checkable(self, index: int) -> bool: ...
    def is_item_radio_checkable(self, index: int) -> bool: ...
    def is_item_shortcut_disabled(self, index: int) -> bool: ...
    def get_item_tooltip(self, index: int) -> 'String': ...
    def get_item_shortcut(self, index: int) -> 'Shortcut': ...
    def get_item_indent(self, index: int) -> int: ...
    def get_item_multistate_max(self, index: int) -> int: ...
    def get_item_multistate(self, index: int) -> int: ...
    def set_focused_item(self, index: int) -> None: ...
    def get_focused_item(self) -> int: ...
    def set_item_count(self, count: int) -> None: ...
    def get_item_count(self) -> int: ...
    def scroll_to_item(self, index: int) -> None: ...
    def remove_item(self, index: int) -> None: ...
    def add_separator(self, label: 'String' = default('''""'''), id: int = default('''-1''')) -> None: ...
    def clear(self, free_submenus: bool = default('''false''')) -> None: ...
    def set_hide_on_item_selection(self, enable: bool) -> None: ...
    def is_hide_on_item_selection(self) -> bool: ...
    def set_hide_on_checkable_item_selection(self, enable: bool) -> None: ...
    def is_hide_on_checkable_item_selection(self) -> bool: ...
    def set_hide_on_state_item_selection(self, enable: bool) -> None: ...
    def is_hide_on_state_item_selection(self) -> bool: ...
    def set_submenu_popup_delay(self, seconds: float) -> None: ...
    def get_submenu_popup_delay(self) -> float: ...
    def set_allow_search(self, allow: bool) -> None: ...
    def get_allow_search(self) -> bool: ...
    def is_system_menu(self) -> bool: ...
    def set_system_menu(self, system_menu_id: 'NativeMenu_SystemMenus') -> None: ...
    def get_system_menu(self) -> 'NativeMenu_SystemMenus': ...
    
class PopupPanel(Popup):
    pass
    
class PortableCompressedTexture2D(Texture2D):
    size_override: 'Vector2'
    keep_compressed_buffer: bool
    def create_from_image(self, image: 'Image', compression_mode: 'PortableCompressedTexture2D_CompressionMode', normal_map: bool = default('''false'''), lossy_quality: float = default('''0.8''')) -> None: ...
    def get_format(self) -> 'Image_Format': ...
    def get_compression_mode(self) -> 'PortableCompressedTexture2D_CompressionMode': ...
    def set_size_override(self, size: 'Vector2') -> None: ...
    def get_size_override(self) -> 'Vector2': ...
    def set_keep_compressed_buffer(self, keep: bool) -> None: ...
    def is_keeping_compressed_buffer(self) -> bool: ...
    @staticmethod
    def set_keep_all_compressed_buffers(keep: bool) -> None: ...
    @staticmethod
    def is_keeping_all_compressed_buffers() -> bool: ...
    
class PortableCompressedTexture2D_CompressionMode(Enum):
    COMPRESSION_MODE_LOSSLESS = 0
    COMPRESSION_MODE_LOSSY = 1
    COMPRESSION_MODE_BASIS_UNIVERSAL = 2
    COMPRESSION_MODE_S3TC = 3
    COMPRESSION_MODE_ETC2 = 4
    COMPRESSION_MODE_BPTC = 5

class PrimitiveMesh(Mesh):
    material: 'BaseMaterial3D'
    custom_aabb: 'AABB'
    flip_faces: bool
    add_uv2: bool
    uv2_padding: float
    def _create_mesh_array(self) -> 'Array': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def get_mesh_arrays(self) -> 'Array': ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    def set_flip_faces(self, flip_faces: bool) -> None: ...
    def get_flip_faces(self) -> bool: ...
    def set_add_uv2(self, add_uv2: bool) -> None: ...
    def get_add_uv2(self) -> bool: ...
    def set_uv2_padding(self, uv2_padding: float) -> None: ...
    def get_uv2_padding(self) -> float: ...
    def request_update(self) -> None: ...
    
class PrismMesh(PrimitiveMesh):
    left_to_right: float
    size: 'Vector3'
    subdivide_width: int
    subdivide_height: int
    subdivide_depth: int
    def set_left_to_right(self, left_to_right: float) -> None: ...
    def get_left_to_right(self) -> float: ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_subdivide_width(self, segments: int) -> None: ...
    def get_subdivide_width(self) -> int: ...
    def set_subdivide_height(self, segments: int) -> None: ...
    def get_subdivide_height(self) -> int: ...
    def set_subdivide_depth(self, segments: int) -> None: ...
    def get_subdivide_depth(self) -> int: ...
    
class ProceduralSkyMaterial(Material):
    sky_top_color: 'Color'
    sky_horizon_color: 'Color'
    sky_curve: float
    sky_energy_multiplier: float
    sky_cover: 'Texture2D'
    sky_cover_modulate: 'Color'
    ground_bottom_color: 'Color'
    ground_horizon_color: 'Color'
    ground_curve: float
    ground_energy_multiplier: float
    sun_angle_max: float
    sun_curve: float
    use_debanding: bool
    energy_multiplier: float
    def set_sky_top_color(self, color: 'Color') -> None: ...
    def get_sky_top_color(self) -> 'Color': ...
    def set_sky_horizon_color(self, color: 'Color') -> None: ...
    def get_sky_horizon_color(self) -> 'Color': ...
    def set_sky_curve(self, curve: float) -> None: ...
    def get_sky_curve(self) -> float: ...
    def set_sky_energy_multiplier(self, multiplier: float) -> None: ...
    def get_sky_energy_multiplier(self) -> float: ...
    def set_sky_cover(self, sky_cover: 'Texture2D') -> None: ...
    def get_sky_cover(self) -> 'Texture2D': ...
    def set_sky_cover_modulate(self, color: 'Color') -> None: ...
    def get_sky_cover_modulate(self) -> 'Color': ...
    def set_ground_bottom_color(self, color: 'Color') -> None: ...
    def get_ground_bottom_color(self) -> 'Color': ...
    def set_ground_horizon_color(self, color: 'Color') -> None: ...
    def get_ground_horizon_color(self) -> 'Color': ...
    def set_ground_curve(self, curve: float) -> None: ...
    def get_ground_curve(self) -> float: ...
    def set_ground_energy_multiplier(self, energy: float) -> None: ...
    def get_ground_energy_multiplier(self) -> float: ...
    def set_sun_angle_max(self, degrees: float) -> None: ...
    def get_sun_angle_max(self) -> float: ...
    def set_sun_curve(self, curve: float) -> None: ...
    def get_sun_curve(self) -> float: ...
    def set_use_debanding(self, use_debanding: bool) -> None: ...
    def get_use_debanding(self) -> bool: ...
    def set_energy_multiplier(self, multiplier: float) -> None: ...
    def get_energy_multiplier(self) -> float: ...
    
class ProgressBar(Range):
    fill_mode: int
    show_percentage: bool
    indeterminate: bool
    editor_preview_indeterminate: bool
    def set_fill_mode(self, mode: int) -> None: ...
    def get_fill_mode(self) -> int: ...
    def set_show_percentage(self, visible: bool) -> None: ...
    def is_percentage_shown(self) -> bool: ...
    def set_indeterminate(self, indeterminate: bool) -> None: ...
    def is_indeterminate(self) -> bool: ...
    def set_editor_preview_indeterminate(self, preview_indeterminate: bool) -> None: ...
    def is_editor_preview_indeterminate_enabled(self) -> bool: ...
    
class ProgressBar_FillMode(Enum):
    FILL_BEGIN_TO_END = 0
    FILL_END_TO_BEGIN = 1
    FILL_TOP_TO_BOTTOM = 2
    FILL_BOTTOM_TO_TOP = 3

class ProjectSettings(Object):
    settings_changed: Signal[Callable[[], None]]  # settings_changed()
    def has_setting(self, name: 'String') -> bool: ...
    def set_setting(self, name: 'String', value: 'Variant') -> None: ...
    def get_setting(self, name: 'String', default_value: 'Variant' = default('''null''')) -> 'Variant': ...
    def get_setting_with_override(self, name: 'StringName') -> 'Variant': ...
    def get_global_class_list(self) -> 'list[Dictionary]': ...
    def set_order(self, name: 'String', position: int) -> None: ...
    def get_order(self, name: 'String') -> int: ...
    def set_initial_value(self, name: 'String', value: 'Variant') -> None: ...
    def set_as_basic(self, name: 'String', basic: bool) -> None: ...
    def set_as_internal(self, name: 'String', internal: bool) -> None: ...
    def add_property_info(self, hint: 'Dictionary') -> None: ...
    def set_restart_if_changed(self, name: 'String', restart: bool) -> None: ...
    def clear(self, name: 'String') -> None: ...
    def localize_path(self, path: 'String') -> 'String': ...
    def globalize_path(self, path: 'String') -> 'String': ...
    def save(self) -> 'Error': ...
    def load_resource_pack(self, pack: 'String', replace_files: bool = default('''true'''), offset: int = default('''0''')) -> bool: ...
    def save_custom(self, file: 'String') -> 'Error': ...
    
class PropertyTweener(Tweener):
    def from_(self, value: 'Variant') -> 'PropertyTweener': ...
    def from_current(self) -> 'PropertyTweener': ...
    def as_relative(self) -> 'PropertyTweener': ...
    def set_trans(self, trans: 'Tween_TransitionType') -> 'PropertyTweener': ...
    def set_ease(self, ease: 'Tween_EaseType') -> 'PropertyTweener': ...
    def set_custom_interpolator(self, interpolator_method: 'Callable') -> 'PropertyTweener': ...
    def set_delay(self, delay: float) -> 'PropertyTweener': ...
    
class QuadMesh(PlaneMesh):
    pass
    
class QuadOccluder3D(Occluder3D):
    size: 'Vector2'
    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...
    
class RDAttachmentFormat(RefCounted):
    format: int
    samples: int
    usage_flags: int
    def set_format(self, p_member: 'RenderingDevice_DataFormat') -> None: ...
    def get_format(self) -> 'RenderingDevice_DataFormat': ...
    def set_samples(self, p_member: 'RenderingDevice_TextureSamples') -> None: ...
    def get_samples(self) -> 'RenderingDevice_TextureSamples': ...
    def set_usage_flags(self, p_member: int) -> None: ...
    def get_usage_flags(self) -> int: ...
    
class RDFramebufferPass(RefCounted):
    color_attachments: 'PackedInt32Array'
    input_attachments: 'PackedInt32Array'
    resolve_attachments: 'PackedInt32Array'
    preserve_attachments: 'PackedInt32Array'
    depth_attachment: int
    ATTACHMENT_UNUSED = -1
    
    def set_color_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_color_attachments(self) -> 'PackedInt32Array': ...
    def set_input_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_input_attachments(self) -> 'PackedInt32Array': ...
    def set_resolve_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_resolve_attachments(self) -> 'PackedInt32Array': ...
    def set_preserve_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_preserve_attachments(self) -> 'PackedInt32Array': ...
    def set_depth_attachment(self, p_member: int) -> None: ...
    def get_depth_attachment(self) -> int: ...
    
class RDPipelineColorBlendState(RefCounted):
    enable_logic_op: bool
    logic_op: int
    blend_constant: 'Color'
    attachments: 'list[RDPipelineColorBlendStateAttachment]'
    def set_enable_logic_op(self, p_member: bool) -> None: ...
    def get_enable_logic_op(self) -> bool: ...
    def set_logic_op(self, p_member: 'RenderingDevice_LogicOperation') -> None: ...
    def get_logic_op(self) -> 'RenderingDevice_LogicOperation': ...
    def set_blend_constant(self, p_member: 'Color') -> None: ...
    def get_blend_constant(self) -> 'Color': ...
    def set_attachments(self, attachments: 'list[RDPipelineColorBlendStateAttachment]') -> None: ...
    def get_attachments(self) -> 'list[RDPipelineColorBlendStateAttachment]': ...
    
class RDPipelineColorBlendStateAttachment(RefCounted):
    enable_blend: bool
    src_color_blend_factor: int
    dst_color_blend_factor: int
    color_blend_op: int
    src_alpha_blend_factor: int
    dst_alpha_blend_factor: int
    alpha_blend_op: int
    write_r: bool
    write_g: bool
    write_b: bool
    write_a: bool
    def set_as_mix(self) -> None: ...
    def set_enable_blend(self, p_member: bool) -> None: ...
    def get_enable_blend(self) -> bool: ...
    def set_src_color_blend_factor(self, p_member: 'RenderingDevice_BlendFactor') -> None: ...
    def get_src_color_blend_factor(self) -> 'RenderingDevice_BlendFactor': ...
    def set_dst_color_blend_factor(self, p_member: 'RenderingDevice_BlendFactor') -> None: ...
    def get_dst_color_blend_factor(self) -> 'RenderingDevice_BlendFactor': ...
    def set_color_blend_op(self, p_member: 'RenderingDevice_BlendOperation') -> None: ...
    def get_color_blend_op(self) -> 'RenderingDevice_BlendOperation': ...
    def set_src_alpha_blend_factor(self, p_member: 'RenderingDevice_BlendFactor') -> None: ...
    def get_src_alpha_blend_factor(self) -> 'RenderingDevice_BlendFactor': ...
    def set_dst_alpha_blend_factor(self, p_member: 'RenderingDevice_BlendFactor') -> None: ...
    def get_dst_alpha_blend_factor(self) -> 'RenderingDevice_BlendFactor': ...
    def set_alpha_blend_op(self, p_member: 'RenderingDevice_BlendOperation') -> None: ...
    def get_alpha_blend_op(self) -> 'RenderingDevice_BlendOperation': ...
    def set_write_r(self, p_member: bool) -> None: ...
    def get_write_r(self) -> bool: ...
    def set_write_g(self, p_member: bool) -> None: ...
    def get_write_g(self) -> bool: ...
    def set_write_b(self, p_member: bool) -> None: ...
    def get_write_b(self) -> bool: ...
    def set_write_a(self, p_member: bool) -> None: ...
    def get_write_a(self) -> bool: ...
    
class RDPipelineDepthStencilState(RefCounted):
    enable_depth_test: bool
    enable_depth_write: bool
    depth_compare_operator: int
    enable_depth_range: bool
    depth_range_min: float
    depth_range_max: float
    enable_stencil: bool
    front_op_fail: int
    front_op_pass: int
    front_op_depth_fail: int
    front_op_compare: int
    front_op_compare_mask: int
    front_op_write_mask: int
    front_op_reference: int
    back_op_fail: int
    back_op_pass: int
    back_op_depth_fail: int
    back_op_compare: int
    back_op_compare_mask: int
    back_op_write_mask: int
    back_op_reference: int
    def set_enable_depth_test(self, p_member: bool) -> None: ...
    def get_enable_depth_test(self) -> bool: ...
    def set_enable_depth_write(self, p_member: bool) -> None: ...
    def get_enable_depth_write(self) -> bool: ...
    def set_depth_compare_operator(self, p_member: 'RenderingDevice_CompareOperator') -> None: ...
    def get_depth_compare_operator(self) -> 'RenderingDevice_CompareOperator': ...
    def set_enable_depth_range(self, p_member: bool) -> None: ...
    def get_enable_depth_range(self) -> bool: ...
    def set_depth_range_min(self, p_member: float) -> None: ...
    def get_depth_range_min(self) -> float: ...
    def set_depth_range_max(self, p_member: float) -> None: ...
    def get_depth_range_max(self) -> float: ...
    def set_enable_stencil(self, p_member: bool) -> None: ...
    def get_enable_stencil(self) -> bool: ...
    def set_front_op_fail(self, p_member: 'RenderingDevice_StencilOperation') -> None: ...
    def get_front_op_fail(self) -> 'RenderingDevice_StencilOperation': ...
    def set_front_op_pass(self, p_member: 'RenderingDevice_StencilOperation') -> None: ...
    def get_front_op_pass(self) -> 'RenderingDevice_StencilOperation': ...
    def set_front_op_depth_fail(self, p_member: 'RenderingDevice_StencilOperation') -> None: ...
    def get_front_op_depth_fail(self) -> 'RenderingDevice_StencilOperation': ...
    def set_front_op_compare(self, p_member: 'RenderingDevice_CompareOperator') -> None: ...
    def get_front_op_compare(self) -> 'RenderingDevice_CompareOperator': ...
    def set_front_op_compare_mask(self, p_member: int) -> None: ...
    def get_front_op_compare_mask(self) -> int: ...
    def set_front_op_write_mask(self, p_member: int) -> None: ...
    def get_front_op_write_mask(self) -> int: ...
    def set_front_op_reference(self, p_member: int) -> None: ...
    def get_front_op_reference(self) -> int: ...
    def set_back_op_fail(self, p_member: 'RenderingDevice_StencilOperation') -> None: ...
    def get_back_op_fail(self) -> 'RenderingDevice_StencilOperation': ...
    def set_back_op_pass(self, p_member: 'RenderingDevice_StencilOperation') -> None: ...
    def get_back_op_pass(self) -> 'RenderingDevice_StencilOperation': ...
    def set_back_op_depth_fail(self, p_member: 'RenderingDevice_StencilOperation') -> None: ...
    def get_back_op_depth_fail(self) -> 'RenderingDevice_StencilOperation': ...
    def set_back_op_compare(self, p_member: 'RenderingDevice_CompareOperator') -> None: ...
    def get_back_op_compare(self) -> 'RenderingDevice_CompareOperator': ...
    def set_back_op_compare_mask(self, p_member: int) -> None: ...
    def get_back_op_compare_mask(self) -> int: ...
    def set_back_op_write_mask(self, p_member: int) -> None: ...
    def get_back_op_write_mask(self) -> int: ...
    def set_back_op_reference(self, p_member: int) -> None: ...
    def get_back_op_reference(self) -> int: ...
    
class RDPipelineMultisampleState(RefCounted):
    sample_count: int
    enable_sample_shading: bool
    min_sample_shading: float
    enable_alpha_to_coverage: bool
    enable_alpha_to_one: bool
    sample_masks: 'list[int]'
    def set_sample_count(self, p_member: 'RenderingDevice_TextureSamples') -> None: ...
    def get_sample_count(self) -> 'RenderingDevice_TextureSamples': ...
    def set_enable_sample_shading(self, p_member: bool) -> None: ...
    def get_enable_sample_shading(self) -> bool: ...
    def set_min_sample_shading(self, p_member: float) -> None: ...
    def get_min_sample_shading(self) -> float: ...
    def set_enable_alpha_to_coverage(self, p_member: bool) -> None: ...
    def get_enable_alpha_to_coverage(self) -> bool: ...
    def set_enable_alpha_to_one(self, p_member: bool) -> None: ...
    def get_enable_alpha_to_one(self) -> bool: ...
    def set_sample_masks(self, masks: 'list[int]') -> None: ...
    def get_sample_masks(self) -> 'list[int]': ...
    
class RDPipelineRasterizationState(RefCounted):
    enable_depth_clamp: bool
    discard_primitives: bool
    wireframe: bool
    cull_mode: int
    front_face: int
    depth_bias_enabled: bool
    depth_bias_constant_factor: float
    depth_bias_clamp: float
    depth_bias_slope_factor: float
    line_width: float
    patch_control_points: int
    def set_enable_depth_clamp(self, p_member: bool) -> None: ...
    def get_enable_depth_clamp(self) -> bool: ...
    def set_discard_primitives(self, p_member: bool) -> None: ...
    def get_discard_primitives(self) -> bool: ...
    def set_wireframe(self, p_member: bool) -> None: ...
    def get_wireframe(self) -> bool: ...
    def set_cull_mode(self, p_member: 'RenderingDevice_PolygonCullMode') -> None: ...
    def get_cull_mode(self) -> 'RenderingDevice_PolygonCullMode': ...
    def set_front_face(self, p_member: 'RenderingDevice_PolygonFrontFace') -> None: ...
    def get_front_face(self) -> 'RenderingDevice_PolygonFrontFace': ...
    def set_depth_bias_enabled(self, p_member: bool) -> None: ...
    def get_depth_bias_enabled(self) -> bool: ...
    def set_depth_bias_constant_factor(self, p_member: float) -> None: ...
    def get_depth_bias_constant_factor(self) -> float: ...
    def set_depth_bias_clamp(self, p_member: float) -> None: ...
    def get_depth_bias_clamp(self) -> float: ...
    def set_depth_bias_slope_factor(self, p_member: float) -> None: ...
    def get_depth_bias_slope_factor(self) -> float: ...
    def set_line_width(self, p_member: float) -> None: ...
    def get_line_width(self) -> float: ...
    def set_patch_control_points(self, p_member: int) -> None: ...
    def get_patch_control_points(self) -> int: ...
    
class RDPipelineSpecializationConstant(RefCounted):
    value: 'Variant'
    constant_id: int
    def set_value(self, value: 'Variant') -> None: ...
    def get_value(self) -> 'Variant': ...
    def set_constant_id(self, constant_id: int) -> None: ...
    def get_constant_id(self) -> int: ...
    
class RDSamplerState(RefCounted):
    mag_filter: int
    min_filter: int
    mip_filter: int
    repeat_u: int
    repeat_v: int
    repeat_w: int
    lod_bias: float
    use_anisotropy: bool
    anisotropy_max: float
    enable_compare: bool
    compare_op: int
    min_lod: float
    max_lod: float
    border_color: int
    unnormalized_uvw: bool
    def set_mag_filter(self, p_member: 'RenderingDevice_SamplerFilter') -> None: ...
    def get_mag_filter(self) -> 'RenderingDevice_SamplerFilter': ...
    def set_min_filter(self, p_member: 'RenderingDevice_SamplerFilter') -> None: ...
    def get_min_filter(self) -> 'RenderingDevice_SamplerFilter': ...
    def set_mip_filter(self, p_member: 'RenderingDevice_SamplerFilter') -> None: ...
    def get_mip_filter(self) -> 'RenderingDevice_SamplerFilter': ...
    def set_repeat_u(self, p_member: 'RenderingDevice_SamplerRepeatMode') -> None: ...
    def get_repeat_u(self) -> 'RenderingDevice_SamplerRepeatMode': ...
    def set_repeat_v(self, p_member: 'RenderingDevice_SamplerRepeatMode') -> None: ...
    def get_repeat_v(self) -> 'RenderingDevice_SamplerRepeatMode': ...
    def set_repeat_w(self, p_member: 'RenderingDevice_SamplerRepeatMode') -> None: ...
    def get_repeat_w(self) -> 'RenderingDevice_SamplerRepeatMode': ...
    def set_lod_bias(self, p_member: float) -> None: ...
    def get_lod_bias(self) -> float: ...
    def set_use_anisotropy(self, p_member: bool) -> None: ...
    def get_use_anisotropy(self) -> bool: ...
    def set_anisotropy_max(self, p_member: float) -> None: ...
    def get_anisotropy_max(self) -> float: ...
    def set_enable_compare(self, p_member: bool) -> None: ...
    def get_enable_compare(self) -> bool: ...
    def set_compare_op(self, p_member: 'RenderingDevice_CompareOperator') -> None: ...
    def get_compare_op(self) -> 'RenderingDevice_CompareOperator': ...
    def set_min_lod(self, p_member: float) -> None: ...
    def get_min_lod(self) -> float: ...
    def set_max_lod(self, p_member: float) -> None: ...
    def get_max_lod(self) -> float: ...
    def set_border_color(self, p_member: 'RenderingDevice_SamplerBorderColor') -> None: ...
    def get_border_color(self) -> 'RenderingDevice_SamplerBorderColor': ...
    def set_unnormalized_uvw(self, p_member: bool) -> None: ...
    def get_unnormalized_uvw(self) -> bool: ...
    
class RDShaderFile(Resource):
    base_error: 'String'
    def set_bytecode(self, bytecode: 'RDShaderSPIRV', version: 'StringName' = default('''&""''')) -> None: ...
    def get_spirv(self, version: 'StringName' = default('''&""''')) -> 'RDShaderSPIRV': ...
    def get_version_list(self) -> 'list[StringName]': ...
    def set_base_error(self, error: 'String') -> None: ...
    def get_base_error(self) -> 'String': ...
    
class RDShaderSPIRV(Resource):
    bytecode_vertex: 'PackedByteArray'
    bytecode_fragment: 'PackedByteArray'
    bytecode_tesselation_control: 'PackedByteArray'
    bytecode_tesselation_evaluation: 'PackedByteArray'
    bytecode_compute: 'PackedByteArray'
    compile_error_vertex: 'String'
    compile_error_fragment: 'String'
    compile_error_tesselation_control: 'String'
    compile_error_tesselation_evaluation: 'String'
    compile_error_compute: 'String'
    def set_stage_bytecode(self, stage: 'RenderingDevice_ShaderStage', bytecode: 'PackedByteArray') -> None: ...
    def get_stage_bytecode(self, stage: 'RenderingDevice_ShaderStage') -> 'PackedByteArray': ...
    def set_stage_compile_error(self, stage: 'RenderingDevice_ShaderStage', compile_error: 'String') -> None: ...
    def get_stage_compile_error(self, stage: 'RenderingDevice_ShaderStage') -> 'String': ...
    
class RDShaderSource(RefCounted):
    source_vertex: 'String'
    source_fragment: 'String'
    source_tesselation_control: 'String'
    source_tesselation_evaluation: 'String'
    source_compute: 'String'
    language: int
    def set_stage_source(self, stage: 'RenderingDevice_ShaderStage', source: 'String') -> None: ...
    def get_stage_source(self, stage: 'RenderingDevice_ShaderStage') -> 'String': ...
    def set_language(self, language: 'RenderingDevice_ShaderLanguage') -> None: ...
    def get_language(self) -> 'RenderingDevice_ShaderLanguage': ...
    
class RDTextureFormat(RefCounted):
    format: int
    width: int
    height: int
    depth: int
    array_layers: int
    mipmaps: int
    texture_type: int
    samples: int
    usage_bits: int
    is_resolve_buffer: bool
    is_discardable: bool
    def set_format(self, p_member: 'RenderingDevice_DataFormat') -> None: ...
    def get_format(self) -> 'RenderingDevice_DataFormat': ...
    def set_width(self, p_member: int) -> None: ...
    def get_width(self) -> int: ...
    def set_height(self, p_member: int) -> None: ...
    def get_height(self) -> int: ...
    def set_depth(self, p_member: int) -> None: ...
    def get_depth(self) -> int: ...
    def set_array_layers(self, p_member: int) -> None: ...
    def get_array_layers(self) -> int: ...
    def set_mipmaps(self, p_member: int) -> None: ...
    def get_mipmaps(self) -> int: ...
    def set_texture_type(self, p_member: 'RenderingDevice_TextureType') -> None: ...
    def get_texture_type(self) -> 'RenderingDevice_TextureType': ...
    def set_samples(self, p_member: 'RenderingDevice_TextureSamples') -> None: ...
    def get_samples(self) -> 'RenderingDevice_TextureSamples': ...
    def set_usage_bits(self, p_member: 'RenderingDevice_TextureUsageBits') -> None: ...
    def get_usage_bits(self) -> 'RenderingDevice_TextureUsageBits': ...
    def set_is_resolve_buffer(self, p_member: bool) -> None: ...
    def get_is_resolve_buffer(self) -> bool: ...
    def set_is_discardable(self, p_member: bool) -> None: ...
    def get_is_discardable(self) -> bool: ...
    def add_shareable_format(self, format: 'RenderingDevice_DataFormat') -> None: ...
    def remove_shareable_format(self, format: 'RenderingDevice_DataFormat') -> None: ...
    
class RDTextureView(RefCounted):
    format_override: int
    swizzle_r: int
    swizzle_g: int
    swizzle_b: int
    swizzle_a: int
    def set_format_override(self, p_member: 'RenderingDevice_DataFormat') -> None: ...
    def get_format_override(self) -> 'RenderingDevice_DataFormat': ...
    def set_swizzle_r(self, p_member: 'RenderingDevice_TextureSwizzle') -> None: ...
    def get_swizzle_r(self) -> 'RenderingDevice_TextureSwizzle': ...
    def set_swizzle_g(self, p_member: 'RenderingDevice_TextureSwizzle') -> None: ...
    def get_swizzle_g(self) -> 'RenderingDevice_TextureSwizzle': ...
    def set_swizzle_b(self, p_member: 'RenderingDevice_TextureSwizzle') -> None: ...
    def get_swizzle_b(self) -> 'RenderingDevice_TextureSwizzle': ...
    def set_swizzle_a(self, p_member: 'RenderingDevice_TextureSwizzle') -> None: ...
    def get_swizzle_a(self) -> 'RenderingDevice_TextureSwizzle': ...
    
class RDUniform(RefCounted):
    uniform_type: int
    binding: int
    def set_uniform_type(self, p_member: 'RenderingDevice_UniformType') -> None: ...
    def get_uniform_type(self) -> 'RenderingDevice_UniformType': ...
    def set_binding(self, p_member: int) -> None: ...
    def get_binding(self) -> int: ...
    def add_id(self, id: 'RID') -> None: ...
    def clear_ids(self) -> None: ...
    def get_ids(self) -> 'list[RID]': ...
    
class RDVertexAttribute(RefCounted):
    location: int
    offset: int
    format: int
    stride: int
    frequency: int
    def set_location(self, p_member: int) -> None: ...
    def get_location(self) -> int: ...
    def set_offset(self, p_member: int) -> None: ...
    def get_offset(self) -> int: ...
    def set_format(self, p_member: 'RenderingDevice_DataFormat') -> None: ...
    def get_format(self) -> 'RenderingDevice_DataFormat': ...
    def set_stride(self, p_member: int) -> None: ...
    def get_stride(self) -> int: ...
    def set_frequency(self, p_member: 'RenderingDevice_VertexFrequency') -> None: ...
    def get_frequency(self) -> 'RenderingDevice_VertexFrequency': ...
    
class RandomNumberGenerator(RefCounted):
    seed: int
    state: int
    def set_seed(self, seed: int) -> None: ...
    def get_seed(self) -> int: ...
    def set_state(self, state: int) -> None: ...
    def get_state(self) -> int: ...
    def randi(self) -> int: ...
    def randf(self) -> float: ...
    def randfn(self, mean: float = default('''0.0'''), deviation: float = default('''1.0''')) -> float: ...
    def randf_range(self, from_: float, to: float) -> float: ...
    def randi_range(self, from_: int, to: int) -> int: ...
    def rand_weighted(self, weights: 'PackedFloat32Array') -> int: ...
    def randomize(self) -> None: ...
    
class Range(Control):
    min_value: float
    max_value: float
    step: float
    page: float
    value: float
    ratio: float
    exp_edit: bool
    rounded: bool
    allow_greater: bool
    allow_lesser: bool
    value_changed: Signal[Callable[['float'], None]]  # value_changed(value: float)
    changed: Signal[Callable[[], None]]  # changed()
    def _value_changed(self, new_value: float) -> None: ...
    def get_value(self) -> float: ...
    def get_min(self) -> float: ...
    def get_max(self) -> float: ...
    def get_step(self) -> float: ...
    def get_page(self) -> float: ...
    def get_as_ratio(self) -> float: ...
    def set_value(self, value: float) -> None: ...
    def set_value_no_signal(self, value: float) -> None: ...
    def set_min(self, minimum: float) -> None: ...
    def set_max(self, maximum: float) -> None: ...
    def set_step(self, step: float) -> None: ...
    def set_page(self, pagesize: float) -> None: ...
    def set_as_ratio(self, value: float) -> None: ...
    def set_use_rounded_values(self, enabled: bool) -> None: ...
    def is_using_rounded_values(self) -> bool: ...
    def set_exp_ratio(self, enabled: bool) -> None: ...
    def is_ratio_exp(self) -> bool: ...
    def set_allow_greater(self, allow: bool) -> None: ...
    def is_greater_allowed(self) -> bool: ...
    def set_allow_lesser(self, allow: bool) -> None: ...
    def is_lesser_allowed(self) -> bool: ...
    def share(self, with_: 'Node') -> None: ...
    def unshare(self) -> None: ...
    
class RayCast2D(Node2D):
    enabled: bool
    exclude_parent: bool
    target_position: 'Vector2'
    collision_mask: int
    hit_from_inside: bool
    collide_with_areas: bool
    collide_with_bodies: bool
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_target_position(self, local_point: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def is_colliding(self) -> bool: ...
    def force_raycast_update(self) -> None: ...
    def get_collider(self) -> 'Object': ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider_shape(self) -> int: ...
    def get_collision_point(self) -> 'Vector2': ...
    def get_collision_normal(self) -> 'Vector2': ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject2D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject2D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...
    
class RayCast3D(Node3D):
    enabled: bool
    exclude_parent: bool
    target_position: 'Vector3'
    collision_mask: int
    hit_from_inside: bool
    hit_back_faces: bool
    collide_with_areas: bool
    collide_with_bodies: bool
    debug_shape_custom_color: 'Color'
    debug_shape_thickness: int
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_target_position(self, local_point: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def is_colliding(self) -> bool: ...
    def force_raycast_update(self) -> None: ...
    def get_collider(self) -> 'Object': ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider_shape(self) -> int: ...
    def get_collision_point(self) -> 'Vector3': ...
    def get_collision_normal(self) -> 'Vector3': ...
    def get_collision_face_index(self) -> int: ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject3D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject3D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def set_hit_from_inside(self, enable: bool) -> None: ...
    def is_hit_from_inside_enabled(self) -> bool: ...
    def set_hit_back_faces(self, enable: bool) -> None: ...
    def is_hit_back_faces_enabled(self) -> bool: ...
    def set_debug_shape_custom_color(self, debug_shape_custom_color: 'Color') -> None: ...
    def get_debug_shape_custom_color(self) -> 'Color': ...
    def set_debug_shape_thickness(self, debug_shape_thickness: int) -> None: ...
    def get_debug_shape_thickness(self) -> int: ...
    
class RectangleShape2D(Shape2D):
    size: 'Vector2'
    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...
    
class RefCounted(Object):
    def init_ref(self) -> bool: ...
    def reference(self) -> bool: ...
    def unreference(self) -> bool: ...
    def get_reference_count(self) -> int: ...
    
class ReferenceRect(Control):
    border_color: 'Color'
    border_width: float
    editor_only: bool
    def get_border_color(self) -> 'Color': ...
    def set_border_color(self, color: 'Color') -> None: ...
    def get_border_width(self) -> float: ...
    def set_border_width(self, width: float) -> None: ...
    def get_editor_only(self) -> bool: ...
    def set_editor_only(self, enabled: bool) -> None: ...
    
class ReflectionProbe(VisualInstance3D):
    update_mode: int
    intensity: float
    blend_distance: float
    max_distance: float
    size: 'Vector3'
    origin_offset: 'Vector3'
    box_projection: bool
    interior: bool
    enable_shadows: bool
    cull_mask: int
    reflection_mask: int
    mesh_lod_threshold: float
    ambient_mode: int
    ambient_color: 'Color'
    ambient_color_energy: float
    def set_intensity(self, intensity: float) -> None: ...
    def get_intensity(self) -> float: ...
    def set_blend_distance(self, blend_distance: float) -> None: ...
    def get_blend_distance(self) -> float: ...
    def set_ambient_mode(self, ambient: 'ReflectionProbe_AmbientMode') -> None: ...
    def get_ambient_mode(self) -> 'ReflectionProbe_AmbientMode': ...
    def set_ambient_color(self, ambient: 'Color') -> None: ...
    def get_ambient_color(self) -> 'Color': ...
    def set_ambient_color_energy(self, ambient_energy: float) -> None: ...
    def get_ambient_color_energy(self) -> float: ...
    def set_max_distance(self, max_distance: float) -> None: ...
    def get_max_distance(self) -> float: ...
    def set_mesh_lod_threshold(self, ratio: float) -> None: ...
    def get_mesh_lod_threshold(self) -> float: ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_origin_offset(self, origin_offset: 'Vector3') -> None: ...
    def get_origin_offset(self) -> 'Vector3': ...
    def set_as_interior(self, enable: bool) -> None: ...
    def is_set_as_interior(self) -> bool: ...
    def set_enable_box_projection(self, enable: bool) -> None: ...
    def is_box_projection_enabled(self) -> bool: ...
    def set_enable_shadows(self, enable: bool) -> None: ...
    def are_shadows_enabled(self) -> bool: ...
    def set_cull_mask(self, layers: int) -> None: ...
    def get_cull_mask(self) -> int: ...
    def set_reflection_mask(self, layers: int) -> None: ...
    def get_reflection_mask(self) -> int: ...
    def set_update_mode(self, mode: 'ReflectionProbe_UpdateMode') -> None: ...
    def get_update_mode(self) -> 'ReflectionProbe_UpdateMode': ...
    
class ReflectionProbe_UpdateMode(Enum):
    UPDATE_ONCE = 0
    UPDATE_ALWAYS = 1

class ReflectionProbe_AmbientMode(Enum):
    AMBIENT_DISABLED = 0
    AMBIENT_ENVIRONMENT = 1
    AMBIENT_COLOR = 2

class RegEx(RefCounted):
    @staticmethod
    def create_from_string(pattern: 'String', show_error: bool = default('''true''')) -> 'RegEx': ...
    def clear(self) -> None: ...
    def compile(self, pattern: 'String', show_error: bool = default('''true''')) -> 'Error': ...
    def search(self, subject: 'String', offset: int = default('''0'''), end: int = default('''-1''')) -> 'RegExMatch': ...
    def search_all(self, subject: 'String', offset: int = default('''0'''), end: int = default('''-1''')) -> 'list[RegExMatch]': ...
    def sub(self, subject: 'String', replacement: 'String', all: bool = default('''false'''), offset: int = default('''0'''), end: int = default('''-1''')) -> 'String': ...
    def is_valid(self) -> bool: ...
    def get_pattern(self) -> 'String': ...
    def get_group_count(self) -> int: ...
    def get_names(self) -> 'PackedStringArray': ...
    
class RegExMatch(RefCounted):
    subject: 'String'
    names: 'Dictionary'
    strings: 'Array'
    def get_subject(self) -> 'String': ...
    def get_group_count(self) -> int: ...
    def get_names(self) -> 'Dictionary': ...
    def get_strings(self) -> 'PackedStringArray': ...
    def get_string(self, name: 'Variant' = default('''0''')) -> 'String': ...
    def get_start(self, name: 'Variant' = default('''0''')) -> int: ...
    def get_end(self, name: 'Variant' = default('''0''')) -> int: ...
    
class RemoteTransform2D(Node2D):
    remote_path: 'NodePath'
    use_global_coordinates: bool
    update_position: bool
    update_rotation: bool
    update_scale: bool
    def set_remote_node(self, path: 'NodePath') -> None: ...
    def get_remote_node(self) -> 'NodePath': ...
    def force_update_cache(self) -> None: ...
    def set_use_global_coordinates(self, use_global_coordinates: bool) -> None: ...
    def get_use_global_coordinates(self) -> bool: ...
    def set_update_position(self, update_remote_position: bool) -> None: ...
    def get_update_position(self) -> bool: ...
    def set_update_rotation(self, update_remote_rotation: bool) -> None: ...
    def get_update_rotation(self) -> bool: ...
    def set_update_scale(self, update_remote_scale: bool) -> None: ...
    def get_update_scale(self) -> bool: ...
    
class RemoteTransform3D(Node3D):
    remote_path: 'NodePath'
    use_global_coordinates: bool
    update_position: bool
    update_rotation: bool
    update_scale: bool
    def set_remote_node(self, path: 'NodePath') -> None: ...
    def get_remote_node(self) -> 'NodePath': ...
    def force_update_cache(self) -> None: ...
    def set_use_global_coordinates(self, use_global_coordinates: bool) -> None: ...
    def get_use_global_coordinates(self) -> bool: ...
    def set_update_position(self, update_remote_position: bool) -> None: ...
    def get_update_position(self) -> bool: ...
    def set_update_rotation(self, update_remote_rotation: bool) -> None: ...
    def get_update_rotation(self) -> bool: ...
    def set_update_scale(self, update_remote_scale: bool) -> None: ...
    def get_update_scale(self) -> bool: ...
    
class RenderData(Object):
    def get_render_scene_buffers(self) -> 'RenderSceneBuffers': ...
    def get_render_scene_data(self) -> 'RenderSceneData': ...
    def get_environment(self) -> 'RID': ...
    def get_camera_attributes(self) -> 'RID': ...
    
class RenderDataExtension(RenderData):
    def _get_render_scene_buffers(self) -> 'RenderSceneBuffers': ...
    def _get_render_scene_data(self) -> 'RenderSceneData': ...
    def _get_environment(self) -> 'RID': ...
    def _get_camera_attributes(self) -> 'RID': ...
    
class RenderDataRD(RenderData):
    pass
    
class RenderSceneBuffers(RefCounted):
    def configure(self, config: 'RenderSceneBuffersConfiguration') -> None: ...
    
class RenderSceneBuffersConfiguration(RefCounted):
    render_target: 'RID'
    internal_size: 'Vector2i'
    target_size: 'Vector2i'
    view_count: int
    scaling_3d_mode: int
    msaa_3d: int
    screen_space_aa: int
    fsr_sharpness: bool
    texture_mipmap_bias: bool
    anisotropic_filtering_level: int
    def get_render_target(self) -> 'RID': ...
    def set_render_target(self, render_target: 'RID') -> None: ...
    def get_internal_size(self) -> 'Vector2i': ...
    def set_internal_size(self, internal_size: 'Vector2i') -> None: ...
    def get_target_size(self) -> 'Vector2i': ...
    def set_target_size(self, target_size: 'Vector2i') -> None: ...
    def get_view_count(self) -> int: ...
    def set_view_count(self, view_count: int) -> None: ...
    def get_scaling_3d_mode(self) -> 'RenderingServer_ViewportScaling3DMode': ...
    def set_scaling_3d_mode(self, scaling_3d_mode: 'RenderingServer_ViewportScaling3DMode') -> None: ...
    def get_msaa_3d(self) -> 'RenderingServer_ViewportMSAA': ...
    def set_msaa_3d(self, msaa_3d: 'RenderingServer_ViewportMSAA') -> None: ...
    def get_screen_space_aa(self) -> 'RenderingServer_ViewportScreenSpaceAA': ...
    def set_screen_space_aa(self, screen_space_aa: 'RenderingServer_ViewportScreenSpaceAA') -> None: ...
    def get_fsr_sharpness(self) -> float: ...
    def set_fsr_sharpness(self, fsr_sharpness: float) -> None: ...
    def get_texture_mipmap_bias(self) -> float: ...
    def set_texture_mipmap_bias(self, texture_mipmap_bias: float) -> None: ...
    def get_anisotropic_filtering_level(self) -> 'RenderingServer_ViewportAnisotropicFiltering': ...
    def set_anisotropic_filtering_level(self, anisotropic_filtering_level: 'RenderingServer_ViewportAnisotropicFiltering') -> None: ...
    
class RenderSceneBuffersExtension(RenderSceneBuffers):
    def _configure(self, config: 'RenderSceneBuffersConfiguration') -> None: ...
    def _set_fsr_sharpness(self, fsr_sharpness: float) -> None: ...
    def _set_texture_mipmap_bias(self, texture_mipmap_bias: float) -> None: ...
    def _set_anisotropic_filtering_level(self, anisotropic_filtering_level: int) -> None: ...
    def _set_use_debanding(self, use_debanding: bool) -> None: ...
    
class RenderSceneBuffersRD(RenderSceneBuffers):
    def has_texture(self, context: 'StringName', name: 'StringName') -> bool: ...
    def create_texture(self, context: 'StringName', name: 'StringName', data_format: 'RenderingDevice_DataFormat', usage_bits: int, texture_samples: 'RenderingDevice_TextureSamples', size: 'Vector2i', layers: int, mipmaps: int, unique: bool, discardable: bool) -> 'RID': ...
    def create_texture_from_format(self, context: 'StringName', name: 'StringName', format: 'RDTextureFormat', view: 'RDTextureView', unique: bool) -> 'RID': ...
    def create_texture_view(self, context: 'StringName', name: 'StringName', view_name: 'StringName', view: 'RDTextureView') -> 'RID': ...
    def get_texture(self, context: 'StringName', name: 'StringName') -> 'RID': ...
    def get_texture_format(self, context: 'StringName', name: 'StringName') -> 'RDTextureFormat': ...
    def get_texture_slice(self, context: 'StringName', name: 'StringName', layer: int, mipmap: int, layers: int, mipmaps: int) -> 'RID': ...
    def get_texture_slice_view(self, context: 'StringName', name: 'StringName', layer: int, mipmap: int, layers: int, mipmaps: int, view: 'RDTextureView') -> 'RID': ...
    def get_texture_slice_size(self, context: 'StringName', name: 'StringName', mipmap: int) -> 'Vector2i': ...
    def clear_context(self, context: 'StringName') -> None: ...
    def get_color_texture(self, msaa: bool = default('''false''')) -> 'RID': ...
    def get_color_layer(self, layer: int, msaa: bool = default('''false''')) -> 'RID': ...
    def get_depth_texture(self, msaa: bool = default('''false''')) -> 'RID': ...
    def get_depth_layer(self, layer: int, msaa: bool = default('''false''')) -> 'RID': ...
    def get_velocity_texture(self, msaa: bool = default('''false''')) -> 'RID': ...
    def get_velocity_layer(self, layer: int, msaa: bool = default('''false''')) -> 'RID': ...
    def get_render_target(self) -> 'RID': ...
    def get_view_count(self) -> int: ...
    def get_internal_size(self) -> 'Vector2i': ...
    def get_target_size(self) -> 'Vector2i': ...
    def get_scaling_3d_mode(self) -> 'RenderingServer_ViewportScaling3DMode': ...
    def get_fsr_sharpness(self) -> float: ...
    def get_msaa_3d(self) -> 'RenderingServer_ViewportMSAA': ...
    def get_texture_samples(self) -> 'RenderingDevice_TextureSamples': ...
    def get_screen_space_aa(self) -> 'RenderingServer_ViewportScreenSpaceAA': ...
    def get_use_taa(self) -> bool: ...
    def get_use_debanding(self) -> bool: ...
    
class RenderSceneData(Object):
    def get_cam_transform(self) -> 'Transform3D': ...
    def get_cam_projection(self) -> 'Projection': ...
    def get_view_count(self) -> int: ...
    def get_view_eye_offset(self, view: int) -> 'Vector3': ...
    def get_view_projection(self, view: int) -> 'Projection': ...
    def get_uniform_buffer(self) -> 'RID': ...
    
class RenderSceneDataExtension(RenderSceneData):
    def _get_cam_transform(self) -> 'Transform3D': ...
    def _get_cam_projection(self) -> 'Projection': ...
    def _get_view_count(self) -> int: ...
    def _get_view_eye_offset(self, view: int) -> 'Vector3': ...
    def _get_view_projection(self, view: int) -> 'Projection': ...
    def _get_uniform_buffer(self) -> 'RID': ...
    
class RenderSceneDataRD(RenderSceneData):
    pass
    
class RenderingDevice(Object):
    INVALID_ID = -1
    INVALID_FORMAT_ID = -1
    
    def texture_create(self, format: 'RDTextureFormat', view: 'RDTextureView', data: 'list[PackedByteArray]' = default('''[]''')) -> 'RID': ...
    def texture_create_shared(self, view: 'RDTextureView', with_texture: 'RID') -> 'RID': ...
    def texture_create_shared_from_slice(self, view: 'RDTextureView', with_texture: 'RID', layer: int, mipmap: int, mipmaps: int = default('''1'''), slice_type: 'RenderingDevice_TextureSliceType' = default('''0''')) -> 'RID': ...
    def texture_create_from_extension(self, type: 'RenderingDevice_TextureType', format: 'RenderingDevice_DataFormat', samples: 'RenderingDevice_TextureSamples', usage_flags: 'RenderingDevice_TextureUsageBits', image: int, width: int, height: int, depth: int, layers: int) -> 'RID': ...
    def texture_update(self, texture: 'RID', layer: int, data: 'PackedByteArray') -> 'Error': ...
    def texture_get_data(self, texture: 'RID', layer: int) -> 'PackedByteArray': ...
    def texture_get_data_async(self, texture: 'RID', layer: int, callback: 'Callable') -> 'Error': ...
    def texture_is_format_supported_for_usage(self, format: 'RenderingDevice_DataFormat', usage_flags: 'RenderingDevice_TextureUsageBits') -> bool: ...
    def texture_is_shared(self, texture: 'RID') -> bool: ...
    def texture_is_valid(self, texture: 'RID') -> bool: ...
    def texture_set_discardable(self, texture: 'RID', discardable: bool) -> None: ...
    def texture_is_discardable(self, texture: 'RID') -> bool: ...
    def texture_copy(self, from_texture: 'RID', to_texture: 'RID', from_pos: 'Vector3', to_pos: 'Vector3', size: 'Vector3', src_mipmap: int, dst_mipmap: int, src_layer: int, dst_layer: int) -> 'Error': ...
    def texture_clear(self, texture: 'RID', color: 'Color', base_mipmap: int, mipmap_count: int, base_layer: int, layer_count: int) -> 'Error': ...
    def texture_resolve_multisample(self, from_texture: 'RID', to_texture: 'RID') -> 'Error': ...
    def texture_get_format(self, texture: 'RID') -> 'RDTextureFormat': ...
    def texture_get_native_handle(self, texture: 'RID') -> int: ...
    def framebuffer_format_create(self, attachments: 'list[RDAttachmentFormat]', view_count: int = default('''1''')) -> int: ...
    def framebuffer_format_create_multipass(self, attachments: 'list[RDAttachmentFormat]', passes: 'list[RDFramebufferPass]', view_count: int = default('''1''')) -> int: ...
    def framebuffer_format_create_empty(self, samples: 'RenderingDevice_TextureSamples' = default('''0''')) -> int: ...
    def framebuffer_format_get_texture_samples(self, format: int, render_pass: int = default('''0''')) -> 'RenderingDevice_TextureSamples': ...
    def framebuffer_create(self, textures: 'list[RID]', validate_with_format: int = default('''-1'''), view_count: int = default('''1''')) -> 'RID': ...
    def framebuffer_create_multipass(self, textures: 'list[RID]', passes: 'list[RDFramebufferPass]', validate_with_format: int = default('''-1'''), view_count: int = default('''1''')) -> 'RID': ...
    def framebuffer_create_empty(self, size: 'Vector2i', samples: 'RenderingDevice_TextureSamples' = default('''0'''), validate_with_format: int = default('''-1''')) -> 'RID': ...
    def framebuffer_get_format(self, framebuffer: 'RID') -> int: ...
    def framebuffer_is_valid(self, framebuffer: 'RID') -> bool: ...
    def sampler_create(self, state: 'RDSamplerState') -> 'RID': ...
    def sampler_is_format_supported_for_filter(self, format: 'RenderingDevice_DataFormat', sampler_filter: 'RenderingDevice_SamplerFilter') -> bool: ...
    def vertex_buffer_create(self, size_bytes: int, data: 'PackedByteArray' = default('''PackedByteArray()'''), creation_bits: 'RenderingDevice_BufferCreationBits' = default('''0''')) -> 'RID': ...
    def vertex_format_create(self, vertex_descriptions: 'list[RDVertexAttribute]') -> int: ...
    def vertex_array_create(self, vertex_count: int, vertex_format: int, src_buffers: 'list[RID]', offsets: 'PackedInt64Array' = default('''PackedInt64Array()''')) -> 'RID': ...
    def index_buffer_create(self, size_indices: int, format: 'RenderingDevice_IndexBufferFormat', data: 'PackedByteArray' = default('''PackedByteArray()'''), use_restart_indices: bool = default('''false'''), creation_bits: 'RenderingDevice_BufferCreationBits' = default('''0''')) -> 'RID': ...
    def index_array_create(self, index_buffer: 'RID', index_offset: int, index_count: int) -> 'RID': ...
    def shader_compile_spirv_from_source(self, shader_source: 'RDShaderSource', allow_cache: bool = default('''true''')) -> 'RDShaderSPIRV': ...
    def shader_compile_binary_from_spirv(self, spirv_data: 'RDShaderSPIRV', name: 'String' = default('''""''')) -> 'PackedByteArray': ...
    def shader_create_from_spirv(self, spirv_data: 'RDShaderSPIRV', name: 'String' = default('''""''')) -> 'RID': ...
    def shader_create_from_bytecode(self, binary_data: 'PackedByteArray', placeholder_rid: 'RID' = default('''RID()''')) -> 'RID': ...
    def shader_create_placeholder(self) -> 'RID': ...
    def shader_get_vertex_input_attribute_mask(self, shader: 'RID') -> int: ...
    def uniform_buffer_create(self, size_bytes: int, data: 'PackedByteArray' = default('''PackedByteArray()'''), creation_bits: 'RenderingDevice_BufferCreationBits' = default('''0''')) -> 'RID': ...
    def storage_buffer_create(self, size_bytes: int, data: 'PackedByteArray' = default('''PackedByteArray()'''), usage: 'RenderingDevice_StorageBufferUsage' = default('''0'''), creation_bits: 'RenderingDevice_BufferCreationBits' = default('''0''')) -> 'RID': ...
    def texture_buffer_create(self, size_bytes: int, format: 'RenderingDevice_DataFormat', data: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'RID': ...
    def uniform_set_create(self, uniforms: 'list[RDUniform]', shader: 'RID', shader_set: int) -> 'RID': ...
    def uniform_set_is_valid(self, uniform_set: 'RID') -> bool: ...
    def buffer_copy(self, src_buffer: 'RID', dst_buffer: 'RID', src_offset: int, dst_offset: int, size: int) -> 'Error': ...
    def buffer_update(self, buffer: 'RID', offset: int, size_bytes: int, data: 'PackedByteArray') -> 'Error': ...
    def buffer_clear(self, buffer: 'RID', offset: int, size_bytes: int) -> 'Error': ...
    def buffer_get_data(self, buffer: 'RID', offset_bytes: int = default('''0'''), size_bytes: int = default('''0''')) -> 'PackedByteArray': ...
    def buffer_get_data_async(self, buffer: 'RID', callback: 'Callable', offset_bytes: int = default('''0'''), size_bytes: int = default('''0''')) -> 'Error': ...
    def buffer_get_device_address(self, buffer: 'RID') -> int: ...
    def render_pipeline_create(self, shader: 'RID', framebuffer_format: int, vertex_format: int, primitive: 'RenderingDevice_RenderPrimitive', rasterization_state: 'RDPipelineRasterizationState', multisample_state: 'RDPipelineMultisampleState', stencil_state: 'RDPipelineDepthStencilState', color_blend_state: 'RDPipelineColorBlendState', dynamic_state_flags: 'RenderingDevice_PipelineDynamicStateFlags' = default('''0'''), for_render_pass: int = default('''0'''), specialization_constants: 'list[RDPipelineSpecializationConstant]' = default('''Array[RDPipelineSpecializationConstant]([])''')) -> 'RID': ...
    def render_pipeline_is_valid(self, render_pipeline: 'RID') -> bool: ...
    def compute_pipeline_create(self, shader: 'RID', specialization_constants: 'list[RDPipelineSpecializationConstant]' = default('''Array[RDPipelineSpecializationConstant]([])''')) -> 'RID': ...
    def compute_pipeline_is_valid(self, compute_pipeline: 'RID') -> bool: ...
    def screen_get_width(self, screen: int = default('''0''')) -> int: ...
    def screen_get_height(self, screen: int = default('''0''')) -> int: ...
    def screen_get_framebuffer_format(self, screen: int = default('''0''')) -> int: ...
    def draw_list_begin_for_screen(self, screen: int = default('''0'''), clear_color: 'Color' = default('''Color(0, 0, 0, 1)''')) -> int: ...
    def draw_list_begin(self, framebuffer: 'RID', draw_flags: 'RenderingDevice_DrawFlags' = default('''0'''), clear_color_values: 'PackedColorArray' = default('''PackedColorArray()'''), clear_depth_value: float = default('''1.0'''), clear_stencil_value: int = default('''0'''), region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), breadcrumb: int = default('''0''')) -> int: ...
    def draw_list_begin_split(self, framebuffer: 'RID', splits: int, initial_color_action: 'RenderingDevice_InitialAction', final_color_action: 'RenderingDevice_FinalAction', initial_depth_action: 'RenderingDevice_InitialAction', final_depth_action: 'RenderingDevice_FinalAction', clear_color_values: 'PackedColorArray' = default('''PackedColorArray()'''), clear_depth: float = default('''1.0'''), clear_stencil: int = default('''0'''), region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), storage_textures: 'list[RID]' = default('''Array[RID]([])''')) -> 'PackedInt64Array': ...
    def draw_list_set_blend_constants(self, draw_list: int, color: 'Color') -> None: ...
    def draw_list_bind_render_pipeline(self, draw_list: int, render_pipeline: 'RID') -> None: ...
    def draw_list_bind_uniform_set(self, draw_list: int, uniform_set: 'RID', set_index: int) -> None: ...
    def draw_list_bind_vertex_array(self, draw_list: int, vertex_array: 'RID') -> None: ...
    def draw_list_bind_index_array(self, draw_list: int, index_array: 'RID') -> None: ...
    def draw_list_set_push_constant(self, draw_list: int, buffer: 'PackedByteArray', size_bytes: int) -> None: ...
    def draw_list_draw(self, draw_list: int, use_indices: bool, instances: int, procedural_vertex_count: int = default('''0''')) -> None: ...
    def draw_list_draw_indirect(self, draw_list: int, use_indices: bool, buffer: 'RID', offset: int = default('''0'''), draw_count: int = default('''1'''), stride: int = default('''0''')) -> None: ...
    def draw_list_enable_scissor(self, draw_list: int, rect: 'Rect2' = default('''Rect2(0, 0, 0, 0)''')) -> None: ...
    def draw_list_disable_scissor(self, draw_list: int) -> None: ...
    def draw_list_switch_to_next_pass(self) -> int: ...
    def draw_list_switch_to_next_pass_split(self, splits: int) -> 'PackedInt64Array': ...
    def draw_list_end(self) -> None: ...
    def compute_list_begin(self) -> int: ...
    def compute_list_bind_compute_pipeline(self, compute_list: int, compute_pipeline: 'RID') -> None: ...
    def compute_list_set_push_constant(self, compute_list: int, buffer: 'PackedByteArray', size_bytes: int) -> None: ...
    def compute_list_bind_uniform_set(self, compute_list: int, uniform_set: 'RID', set_index: int) -> None: ...
    def compute_list_dispatch(self, compute_list: int, x_groups: int, y_groups: int, z_groups: int) -> None: ...
    def compute_list_dispatch_indirect(self, compute_list: int, buffer: 'RID', offset: int) -> None: ...
    def compute_list_add_barrier(self, compute_list: int) -> None: ...
    def compute_list_end(self) -> None: ...
    def free_rid(self, rid: 'RID') -> None: ...
    def capture_timestamp(self, name: 'String') -> None: ...
    def get_captured_timestamps_count(self) -> int: ...
    def get_captured_timestamps_frame(self) -> int: ...
    def get_captured_timestamp_gpu_time(self, index: int) -> int: ...
    def get_captured_timestamp_cpu_time(self, index: int) -> int: ...
    def get_captured_timestamp_name(self, index: int) -> 'String': ...
    def has_feature(self, feature: 'RenderingDevice_Features') -> bool: ...
    def limit_get(self, limit: 'RenderingDevice_Limit') -> int: ...
    def get_frame_delay(self) -> int: ...
    def submit(self) -> None: ...
    def sync(self) -> None: ...
    def barrier(self, from_: 'RenderingDevice_BarrierMask' = default('''32767'''), to: 'RenderingDevice_BarrierMask' = default('''32767''')) -> None: ...
    def full_barrier(self) -> None: ...
    def create_local_device(self) -> 'RenderingDevice': ...
    def set_resource_name(self, id: 'RID', name: 'String') -> None: ...
    def draw_command_begin_label(self, name: 'String', color: 'Color') -> None: ...
    def draw_command_insert_label(self, name: 'String', color: 'Color') -> None: ...
    def draw_command_end_label(self) -> None: ...
    def get_device_vendor_name(self) -> 'String': ...
    def get_device_name(self) -> 'String': ...
    def get_device_pipeline_cache_uuid(self) -> 'String': ...
    def get_memory_usage(self, type: 'RenderingDevice_MemoryType') -> int: ...
    def get_driver_resource(self, resource: 'RenderingDevice_DriverResource', rid: 'RID', index: int) -> int: ...
    def get_perf_report(self) -> 'String': ...
    def get_driver_and_device_memory_report(self) -> 'String': ...
    def get_tracked_object_name(self, type_index: int) -> 'String': ...
    def get_tracked_object_type_count(self) -> int: ...
    def get_driver_total_memory(self) -> int: ...
    def get_driver_allocation_count(self) -> int: ...
    def get_driver_memory_by_object_type(self, type: int) -> int: ...
    def get_driver_allocs_by_object_type(self, type: int) -> int: ...
    def get_device_total_memory(self) -> int: ...
    def get_device_allocation_count(self) -> int: ...
    def get_device_memory_by_object_type(self, type: int) -> int: ...
    def get_device_allocs_by_object_type(self, type: int) -> int: ...
    
class RenderingDevice_DeviceType(Enum):
    DEVICE_TYPE_OTHER = 0
    DEVICE_TYPE_INTEGRATED_GPU = 1
    DEVICE_TYPE_DISCRETE_GPU = 2
    DEVICE_TYPE_VIRTUAL_GPU = 3
    DEVICE_TYPE_CPU = 4
    DEVICE_TYPE_MAX = 5

class RenderingDevice_DriverResource(Enum):
    DRIVER_RESOURCE_LOGICAL_DEVICE = 0
    DRIVER_RESOURCE_PHYSICAL_DEVICE = 1
    DRIVER_RESOURCE_TOPMOST_OBJECT = 2
    DRIVER_RESOURCE_COMMAND_QUEUE = 3
    DRIVER_RESOURCE_QUEUE_FAMILY = 4
    DRIVER_RESOURCE_TEXTURE = 5
    DRIVER_RESOURCE_TEXTURE_VIEW = 6
    DRIVER_RESOURCE_TEXTURE_DATA_FORMAT = 7
    DRIVER_RESOURCE_SAMPLER = 8
    DRIVER_RESOURCE_UNIFORM_SET = 9
    DRIVER_RESOURCE_BUFFER = 10
    DRIVER_RESOURCE_COMPUTE_PIPELINE = 11
    DRIVER_RESOURCE_RENDER_PIPELINE = 12
    DRIVER_RESOURCE_VULKAN_DEVICE = 0
    DRIVER_RESOURCE_VULKAN_PHYSICAL_DEVICE = 1
    DRIVER_RESOURCE_VULKAN_INSTANCE = 2
    DRIVER_RESOURCE_VULKAN_QUEUE = 3
    DRIVER_RESOURCE_VULKAN_QUEUE_FAMILY_INDEX = 4
    DRIVER_RESOURCE_VULKAN_IMAGE = 5
    DRIVER_RESOURCE_VULKAN_IMAGE_VIEW = 6
    DRIVER_RESOURCE_VULKAN_IMAGE_NATIVE_TEXTURE_FORMAT = 7
    DRIVER_RESOURCE_VULKAN_SAMPLER = 8
    DRIVER_RESOURCE_VULKAN_DESCRIPTOR_SET = 9
    DRIVER_RESOURCE_VULKAN_BUFFER = 10
    DRIVER_RESOURCE_VULKAN_COMPUTE_PIPELINE = 11
    DRIVER_RESOURCE_VULKAN_RENDER_PIPELINE = 12

class RenderingDevice_DataFormat(Enum):
    DATA_FORMAT_R4G4_UNORM_PACK8 = 0
    DATA_FORMAT_R4G4B4A4_UNORM_PACK16 = 1
    DATA_FORMAT_B4G4R4A4_UNORM_PACK16 = 2
    DATA_FORMAT_R5G6B5_UNORM_PACK16 = 3
    DATA_FORMAT_B5G6R5_UNORM_PACK16 = 4
    DATA_FORMAT_R5G5B5A1_UNORM_PACK16 = 5
    DATA_FORMAT_B5G5R5A1_UNORM_PACK16 = 6
    DATA_FORMAT_A1R5G5B5_UNORM_PACK16 = 7
    DATA_FORMAT_R8_UNORM = 8
    DATA_FORMAT_R8_SNORM = 9
    DATA_FORMAT_R8_USCALED = 10
    DATA_FORMAT_R8_SSCALED = 11
    DATA_FORMAT_R8_UINT = 12
    DATA_FORMAT_R8_SINT = 13
    DATA_FORMAT_R8_SRGB = 14
    DATA_FORMAT_R8G8_UNORM = 15
    DATA_FORMAT_R8G8_SNORM = 16
    DATA_FORMAT_R8G8_USCALED = 17
    DATA_FORMAT_R8G8_SSCALED = 18
    DATA_FORMAT_R8G8_UINT = 19
    DATA_FORMAT_R8G8_SINT = 20
    DATA_FORMAT_R8G8_SRGB = 21
    DATA_FORMAT_R8G8B8_UNORM = 22
    DATA_FORMAT_R8G8B8_SNORM = 23
    DATA_FORMAT_R8G8B8_USCALED = 24
    DATA_FORMAT_R8G8B8_SSCALED = 25
    DATA_FORMAT_R8G8B8_UINT = 26
    DATA_FORMAT_R8G8B8_SINT = 27
    DATA_FORMAT_R8G8B8_SRGB = 28
    DATA_FORMAT_B8G8R8_UNORM = 29
    DATA_FORMAT_B8G8R8_SNORM = 30
    DATA_FORMAT_B8G8R8_USCALED = 31
    DATA_FORMAT_B8G8R8_SSCALED = 32
    DATA_FORMAT_B8G8R8_UINT = 33
    DATA_FORMAT_B8G8R8_SINT = 34
    DATA_FORMAT_B8G8R8_SRGB = 35
    DATA_FORMAT_R8G8B8A8_UNORM = 36
    DATA_FORMAT_R8G8B8A8_SNORM = 37
    DATA_FORMAT_R8G8B8A8_USCALED = 38
    DATA_FORMAT_R8G8B8A8_SSCALED = 39
    DATA_FORMAT_R8G8B8A8_UINT = 40
    DATA_FORMAT_R8G8B8A8_SINT = 41
    DATA_FORMAT_R8G8B8A8_SRGB = 42
    DATA_FORMAT_B8G8R8A8_UNORM = 43
    DATA_FORMAT_B8G8R8A8_SNORM = 44
    DATA_FORMAT_B8G8R8A8_USCALED = 45
    DATA_FORMAT_B8G8R8A8_SSCALED = 46
    DATA_FORMAT_B8G8R8A8_UINT = 47
    DATA_FORMAT_B8G8R8A8_SINT = 48
    DATA_FORMAT_B8G8R8A8_SRGB = 49
    DATA_FORMAT_A8B8G8R8_UNORM_PACK32 = 50
    DATA_FORMAT_A8B8G8R8_SNORM_PACK32 = 51
    DATA_FORMAT_A8B8G8R8_USCALED_PACK32 = 52
    DATA_FORMAT_A8B8G8R8_SSCALED_PACK32 = 53
    DATA_FORMAT_A8B8G8R8_UINT_PACK32 = 54
    DATA_FORMAT_A8B8G8R8_SINT_PACK32 = 55
    DATA_FORMAT_A8B8G8R8_SRGB_PACK32 = 56
    DATA_FORMAT_A2R10G10B10_UNORM_PACK32 = 57
    DATA_FORMAT_A2R10G10B10_SNORM_PACK32 = 58
    DATA_FORMAT_A2R10G10B10_USCALED_PACK32 = 59
    DATA_FORMAT_A2R10G10B10_SSCALED_PACK32 = 60
    DATA_FORMAT_A2R10G10B10_UINT_PACK32 = 61
    DATA_FORMAT_A2R10G10B10_SINT_PACK32 = 62
    DATA_FORMAT_A2B10G10R10_UNORM_PACK32 = 63
    DATA_FORMAT_A2B10G10R10_SNORM_PACK32 = 64
    DATA_FORMAT_A2B10G10R10_USCALED_PACK32 = 65
    DATA_FORMAT_A2B10G10R10_SSCALED_PACK32 = 66
    DATA_FORMAT_A2B10G10R10_UINT_PACK32 = 67
    DATA_FORMAT_A2B10G10R10_SINT_PACK32 = 68
    DATA_FORMAT_R16_UNORM = 69
    DATA_FORMAT_R16_SNORM = 70
    DATA_FORMAT_R16_USCALED = 71
    DATA_FORMAT_R16_SSCALED = 72
    DATA_FORMAT_R16_UINT = 73
    DATA_FORMAT_R16_SINT = 74
    DATA_FORMAT_R16_SFLOAT = 75
    DATA_FORMAT_R16G16_UNORM = 76
    DATA_FORMAT_R16G16_SNORM = 77
    DATA_FORMAT_R16G16_USCALED = 78
    DATA_FORMAT_R16G16_SSCALED = 79
    DATA_FORMAT_R16G16_UINT = 80
    DATA_FORMAT_R16G16_SINT = 81
    DATA_FORMAT_R16G16_SFLOAT = 82
    DATA_FORMAT_R16G16B16_UNORM = 83
    DATA_FORMAT_R16G16B16_SNORM = 84
    DATA_FORMAT_R16G16B16_USCALED = 85
    DATA_FORMAT_R16G16B16_SSCALED = 86
    DATA_FORMAT_R16G16B16_UINT = 87
    DATA_FORMAT_R16G16B16_SINT = 88
    DATA_FORMAT_R16G16B16_SFLOAT = 89
    DATA_FORMAT_R16G16B16A16_UNORM = 90
    DATA_FORMAT_R16G16B16A16_SNORM = 91
    DATA_FORMAT_R16G16B16A16_USCALED = 92
    DATA_FORMAT_R16G16B16A16_SSCALED = 93
    DATA_FORMAT_R16G16B16A16_UINT = 94
    DATA_FORMAT_R16G16B16A16_SINT = 95
    DATA_FORMAT_R16G16B16A16_SFLOAT = 96
    DATA_FORMAT_R32_UINT = 97
    DATA_FORMAT_R32_SINT = 98
    DATA_FORMAT_R32_SFLOAT = 99
    DATA_FORMAT_R32G32_UINT = 100
    DATA_FORMAT_R32G32_SINT = 101
    DATA_FORMAT_R32G32_SFLOAT = 102
    DATA_FORMAT_R32G32B32_UINT = 103
    DATA_FORMAT_R32G32B32_SINT = 104
    DATA_FORMAT_R32G32B32_SFLOAT = 105
    DATA_FORMAT_R32G32B32A32_UINT = 106
    DATA_FORMAT_R32G32B32A32_SINT = 107
    DATA_FORMAT_R32G32B32A32_SFLOAT = 108
    DATA_FORMAT_R64_UINT = 109
    DATA_FORMAT_R64_SINT = 110
    DATA_FORMAT_R64_SFLOAT = 111
    DATA_FORMAT_R64G64_UINT = 112
    DATA_FORMAT_R64G64_SINT = 113
    DATA_FORMAT_R64G64_SFLOAT = 114
    DATA_FORMAT_R64G64B64_UINT = 115
    DATA_FORMAT_R64G64B64_SINT = 116
    DATA_FORMAT_R64G64B64_SFLOAT = 117
    DATA_FORMAT_R64G64B64A64_UINT = 118
    DATA_FORMAT_R64G64B64A64_SINT = 119
    DATA_FORMAT_R64G64B64A64_SFLOAT = 120
    DATA_FORMAT_B10G11R11_UFLOAT_PACK32 = 121
    DATA_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 122
    DATA_FORMAT_D16_UNORM = 123
    DATA_FORMAT_X8_D24_UNORM_PACK32 = 124
    DATA_FORMAT_D32_SFLOAT = 125
    DATA_FORMAT_S8_UINT = 126
    DATA_FORMAT_D16_UNORM_S8_UINT = 127
    DATA_FORMAT_D24_UNORM_S8_UINT = 128
    DATA_FORMAT_D32_SFLOAT_S8_UINT = 129
    DATA_FORMAT_BC1_RGB_UNORM_BLOCK = 130
    DATA_FORMAT_BC1_RGB_SRGB_BLOCK = 131
    DATA_FORMAT_BC1_RGBA_UNORM_BLOCK = 132
    DATA_FORMAT_BC1_RGBA_SRGB_BLOCK = 133
    DATA_FORMAT_BC2_UNORM_BLOCK = 134
    DATA_FORMAT_BC2_SRGB_BLOCK = 135
    DATA_FORMAT_BC3_UNORM_BLOCK = 136
    DATA_FORMAT_BC3_SRGB_BLOCK = 137
    DATA_FORMAT_BC4_UNORM_BLOCK = 138
    DATA_FORMAT_BC4_SNORM_BLOCK = 139
    DATA_FORMAT_BC5_UNORM_BLOCK = 140
    DATA_FORMAT_BC5_SNORM_BLOCK = 141
    DATA_FORMAT_BC6H_UFLOAT_BLOCK = 142
    DATA_FORMAT_BC6H_SFLOAT_BLOCK = 143
    DATA_FORMAT_BC7_UNORM_BLOCK = 144
    DATA_FORMAT_BC7_SRGB_BLOCK = 145
    DATA_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 146
    DATA_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 147
    DATA_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 148
    DATA_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 149
    DATA_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 150
    DATA_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 151
    DATA_FORMAT_EAC_R11_UNORM_BLOCK = 152
    DATA_FORMAT_EAC_R11_SNORM_BLOCK = 153
    DATA_FORMAT_EAC_R11G11_UNORM_BLOCK = 154
    DATA_FORMAT_EAC_R11G11_SNORM_BLOCK = 155
    DATA_FORMAT_ASTC_4x4_UNORM_BLOCK = 156
    DATA_FORMAT_ASTC_4x4_SRGB_BLOCK = 157
    DATA_FORMAT_ASTC_5x4_UNORM_BLOCK = 158
    DATA_FORMAT_ASTC_5x4_SRGB_BLOCK = 159
    DATA_FORMAT_ASTC_5x5_UNORM_BLOCK = 160
    DATA_FORMAT_ASTC_5x5_SRGB_BLOCK = 161
    DATA_FORMAT_ASTC_6x5_UNORM_BLOCK = 162
    DATA_FORMAT_ASTC_6x5_SRGB_BLOCK = 163
    DATA_FORMAT_ASTC_6x6_UNORM_BLOCK = 164
    DATA_FORMAT_ASTC_6x6_SRGB_BLOCK = 165
    DATA_FORMAT_ASTC_8x5_UNORM_BLOCK = 166
    DATA_FORMAT_ASTC_8x5_SRGB_BLOCK = 167
    DATA_FORMAT_ASTC_8x6_UNORM_BLOCK = 168
    DATA_FORMAT_ASTC_8x6_SRGB_BLOCK = 169
    DATA_FORMAT_ASTC_8x8_UNORM_BLOCK = 170
    DATA_FORMAT_ASTC_8x8_SRGB_BLOCK = 171
    DATA_FORMAT_ASTC_10x5_UNORM_BLOCK = 172
    DATA_FORMAT_ASTC_10x5_SRGB_BLOCK = 173
    DATA_FORMAT_ASTC_10x6_UNORM_BLOCK = 174
    DATA_FORMAT_ASTC_10x6_SRGB_BLOCK = 175
    DATA_FORMAT_ASTC_10x8_UNORM_BLOCK = 176
    DATA_FORMAT_ASTC_10x8_SRGB_BLOCK = 177
    DATA_FORMAT_ASTC_10x10_UNORM_BLOCK = 178
    DATA_FORMAT_ASTC_10x10_SRGB_BLOCK = 179
    DATA_FORMAT_ASTC_12x10_UNORM_BLOCK = 180
    DATA_FORMAT_ASTC_12x10_SRGB_BLOCK = 181
    DATA_FORMAT_ASTC_12x12_UNORM_BLOCK = 182
    DATA_FORMAT_ASTC_12x12_SRGB_BLOCK = 183
    DATA_FORMAT_G8B8G8R8_422_UNORM = 184
    DATA_FORMAT_B8G8R8G8_422_UNORM = 185
    DATA_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 186
    DATA_FORMAT_G8_B8R8_2PLANE_420_UNORM = 187
    DATA_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 188
    DATA_FORMAT_G8_B8R8_2PLANE_422_UNORM = 189
    DATA_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 190
    DATA_FORMAT_R10X6_UNORM_PACK16 = 191
    DATA_FORMAT_R10X6G10X6_UNORM_2PACK16 = 192
    DATA_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 193
    DATA_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 194
    DATA_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 195
    DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 196
    DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 197
    DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 198
    DATA_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 199
    DATA_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 200
    DATA_FORMAT_R12X4_UNORM_PACK16 = 201
    DATA_FORMAT_R12X4G12X4_UNORM_2PACK16 = 202
    DATA_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 203
    DATA_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 204
    DATA_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 205
    DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 206
    DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 207
    DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 208
    DATA_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 209
    DATA_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 210
    DATA_FORMAT_G16B16G16R16_422_UNORM = 211
    DATA_FORMAT_B16G16R16G16_422_UNORM = 212
    DATA_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 213
    DATA_FORMAT_G16_B16R16_2PLANE_420_UNORM = 214
    DATA_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 215
    DATA_FORMAT_G16_B16R16_2PLANE_422_UNORM = 216
    DATA_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 217
    DATA_FORMAT_MAX = 218

class RenderingDevice_BarrierMask(Enum):
    BARRIER_MASK_VERTEX = 1
    BARRIER_MASK_FRAGMENT = 8
    BARRIER_MASK_COMPUTE = 2
    BARRIER_MASK_TRANSFER = 4
    BARRIER_MASK_RASTER = 9
    BARRIER_MASK_ALL_BARRIERS = 32767
    BARRIER_MASK_NO_BARRIER = 32768

class RenderingDevice_TextureType(Enum):
    TEXTURE_TYPE_1D = 0
    TEXTURE_TYPE_2D = 1
    TEXTURE_TYPE_3D = 2
    TEXTURE_TYPE_CUBE = 3
    TEXTURE_TYPE_1D_ARRAY = 4
    TEXTURE_TYPE_2D_ARRAY = 5
    TEXTURE_TYPE_CUBE_ARRAY = 6
    TEXTURE_TYPE_MAX = 7

class RenderingDevice_TextureSamples(Enum):
    TEXTURE_SAMPLES_1 = 0
    TEXTURE_SAMPLES_2 = 1
    TEXTURE_SAMPLES_4 = 2
    TEXTURE_SAMPLES_8 = 3
    TEXTURE_SAMPLES_16 = 4
    TEXTURE_SAMPLES_32 = 5
    TEXTURE_SAMPLES_64 = 6
    TEXTURE_SAMPLES_MAX = 7

class RenderingDevice_TextureUsageBits(Enum):
    TEXTURE_USAGE_SAMPLING_BIT = 1
    TEXTURE_USAGE_COLOR_ATTACHMENT_BIT = 2
    TEXTURE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 4
    TEXTURE_USAGE_STORAGE_BIT = 8
    TEXTURE_USAGE_STORAGE_ATOMIC_BIT = 16
    TEXTURE_USAGE_CPU_READ_BIT = 32
    TEXTURE_USAGE_CAN_UPDATE_BIT = 64
    TEXTURE_USAGE_CAN_COPY_FROM_BIT = 128
    TEXTURE_USAGE_CAN_COPY_TO_BIT = 256
    TEXTURE_USAGE_INPUT_ATTACHMENT_BIT = 512

class RenderingDevice_TextureSwizzle(Enum):
    TEXTURE_SWIZZLE_IDENTITY = 0
    TEXTURE_SWIZZLE_ZERO = 1
    TEXTURE_SWIZZLE_ONE = 2
    TEXTURE_SWIZZLE_R = 3
    TEXTURE_SWIZZLE_G = 4
    TEXTURE_SWIZZLE_B = 5
    TEXTURE_SWIZZLE_A = 6
    TEXTURE_SWIZZLE_MAX = 7

class RenderingDevice_TextureSliceType(Enum):
    TEXTURE_SLICE_2D = 0
    TEXTURE_SLICE_CUBEMAP = 1
    TEXTURE_SLICE_3D = 2

class RenderingDevice_SamplerFilter(Enum):
    SAMPLER_FILTER_NEAREST = 0
    SAMPLER_FILTER_LINEAR = 1

class RenderingDevice_SamplerRepeatMode(Enum):
    SAMPLER_REPEAT_MODE_REPEAT = 0
    SAMPLER_REPEAT_MODE_MIRRORED_REPEAT = 1
    SAMPLER_REPEAT_MODE_CLAMP_TO_EDGE = 2
    SAMPLER_REPEAT_MODE_CLAMP_TO_BORDER = 3
    SAMPLER_REPEAT_MODE_MIRROR_CLAMP_TO_EDGE = 4
    SAMPLER_REPEAT_MODE_MAX = 5

class RenderingDevice_SamplerBorderColor(Enum):
    SAMPLER_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    SAMPLER_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    SAMPLER_BORDER_COLOR_INT_OPAQUE_BLACK = 3
    SAMPLER_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    SAMPLER_BORDER_COLOR_INT_OPAQUE_WHITE = 5
    SAMPLER_BORDER_COLOR_MAX = 6

class RenderingDevice_VertexFrequency(Enum):
    VERTEX_FREQUENCY_VERTEX = 0
    VERTEX_FREQUENCY_INSTANCE = 1

class RenderingDevice_IndexBufferFormat(Enum):
    INDEX_BUFFER_FORMAT_UINT16 = 0
    INDEX_BUFFER_FORMAT_UINT32 = 1

class RenderingDevice_StorageBufferUsage(Enum):
    STORAGE_BUFFER_USAGE_DISPATCH_INDIRECT = 1

class RenderingDevice_BufferCreationBits(Enum):
    BUFFER_CREATION_DEVICE_ADDRESS_BIT = 1
    BUFFER_CREATION_AS_STORAGE_BIT = 2

class RenderingDevice_UniformType(Enum):
    UNIFORM_TYPE_SAMPLER = 0
    UNIFORM_TYPE_SAMPLER_WITH_TEXTURE = 1
    UNIFORM_TYPE_TEXTURE = 2
    UNIFORM_TYPE_IMAGE = 3
    UNIFORM_TYPE_TEXTURE_BUFFER = 4
    UNIFORM_TYPE_SAMPLER_WITH_TEXTURE_BUFFER = 5
    UNIFORM_TYPE_IMAGE_BUFFER = 6
    UNIFORM_TYPE_UNIFORM_BUFFER = 7
    UNIFORM_TYPE_STORAGE_BUFFER = 8
    UNIFORM_TYPE_INPUT_ATTACHMENT = 9
    UNIFORM_TYPE_MAX = 10

class RenderingDevice_RenderPrimitive(Enum):
    RENDER_PRIMITIVE_POINTS = 0
    RENDER_PRIMITIVE_LINES = 1
    RENDER_PRIMITIVE_LINES_WITH_ADJACENCY = 2
    RENDER_PRIMITIVE_LINESTRIPS = 3
    RENDER_PRIMITIVE_LINESTRIPS_WITH_ADJACENCY = 4
    RENDER_PRIMITIVE_TRIANGLES = 5
    RENDER_PRIMITIVE_TRIANGLES_WITH_ADJACENCY = 6
    RENDER_PRIMITIVE_TRIANGLE_STRIPS = 7
    RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_AJACENCY = 8
    RENDER_PRIMITIVE_TRIANGLE_STRIPS_WITH_RESTART_INDEX = 9
    RENDER_PRIMITIVE_TESSELATION_PATCH = 10
    RENDER_PRIMITIVE_MAX = 11

class RenderingDevice_PolygonCullMode(Enum):
    POLYGON_CULL_DISABLED = 0
    POLYGON_CULL_FRONT = 1
    POLYGON_CULL_BACK = 2

class RenderingDevice_PolygonFrontFace(Enum):
    POLYGON_FRONT_FACE_CLOCKWISE = 0
    POLYGON_FRONT_FACE_COUNTER_CLOCKWISE = 1

class RenderingDevice_StencilOperation(Enum):
    STENCIL_OP_KEEP = 0
    STENCIL_OP_ZERO = 1
    STENCIL_OP_REPLACE = 2
    STENCIL_OP_INCREMENT_AND_CLAMP = 3
    STENCIL_OP_DECREMENT_AND_CLAMP = 4
    STENCIL_OP_INVERT = 5
    STENCIL_OP_INCREMENT_AND_WRAP = 6
    STENCIL_OP_DECREMENT_AND_WRAP = 7
    STENCIL_OP_MAX = 8

class RenderingDevice_CompareOperator(Enum):
    COMPARE_OP_NEVER = 0
    COMPARE_OP_LESS = 1
    COMPARE_OP_EQUAL = 2
    COMPARE_OP_LESS_OR_EQUAL = 3
    COMPARE_OP_GREATER = 4
    COMPARE_OP_NOT_EQUAL = 5
    COMPARE_OP_GREATER_OR_EQUAL = 6
    COMPARE_OP_ALWAYS = 7
    COMPARE_OP_MAX = 8

class RenderingDevice_LogicOperation(Enum):
    LOGIC_OP_CLEAR = 0
    LOGIC_OP_AND = 1
    LOGIC_OP_AND_REVERSE = 2
    LOGIC_OP_COPY = 3
    LOGIC_OP_AND_INVERTED = 4
    LOGIC_OP_NO_OP = 5
    LOGIC_OP_XOR = 6
    LOGIC_OP_OR = 7
    LOGIC_OP_NOR = 8
    LOGIC_OP_EQUIVALENT = 9
    LOGIC_OP_INVERT = 10
    LOGIC_OP_OR_REVERSE = 11
    LOGIC_OP_COPY_INVERTED = 12
    LOGIC_OP_OR_INVERTED = 13
    LOGIC_OP_NAND = 14
    LOGIC_OP_SET = 15
    LOGIC_OP_MAX = 16

class RenderingDevice_BlendFactor(Enum):
    BLEND_FACTOR_ZERO = 0
    BLEND_FACTOR_ONE = 1
    BLEND_FACTOR_SRC_COLOR = 2
    BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
    BLEND_FACTOR_DST_COLOR = 4
    BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
    BLEND_FACTOR_SRC_ALPHA = 6
    BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
    BLEND_FACTOR_DST_ALPHA = 8
    BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
    BLEND_FACTOR_CONSTANT_COLOR = 10
    BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
    BLEND_FACTOR_CONSTANT_ALPHA = 12
    BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
    BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
    BLEND_FACTOR_SRC1_COLOR = 15
    BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
    BLEND_FACTOR_SRC1_ALPHA = 17
    BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
    BLEND_FACTOR_MAX = 19

class RenderingDevice_BlendOperation(Enum):
    BLEND_OP_ADD = 0
    BLEND_OP_SUBTRACT = 1
    BLEND_OP_REVERSE_SUBTRACT = 2
    BLEND_OP_MINIMUM = 3
    BLEND_OP_MAXIMUM = 4
    BLEND_OP_MAX = 5

class RenderingDevice_PipelineDynamicStateFlags(Enum):
    DYNAMIC_STATE_LINE_WIDTH = 1
    DYNAMIC_STATE_DEPTH_BIAS = 2
    DYNAMIC_STATE_BLEND_CONSTANTS = 4
    DYNAMIC_STATE_DEPTH_BOUNDS = 8
    DYNAMIC_STATE_STENCIL_COMPARE_MASK = 16
    DYNAMIC_STATE_STENCIL_WRITE_MASK = 32
    DYNAMIC_STATE_STENCIL_REFERENCE = 64

class RenderingDevice_InitialAction(Enum):
    INITIAL_ACTION_LOAD = 0
    INITIAL_ACTION_CLEAR = 1
    INITIAL_ACTION_DISCARD = 2
    INITIAL_ACTION_MAX = 3
    INITIAL_ACTION_CLEAR_REGION = 1
    INITIAL_ACTION_CLEAR_REGION_CONTINUE = 1
    INITIAL_ACTION_KEEP = 0
    INITIAL_ACTION_DROP = 2
    INITIAL_ACTION_CONTINUE = 0

class RenderingDevice_FinalAction(Enum):
    FINAL_ACTION_STORE = 0
    FINAL_ACTION_DISCARD = 1
    FINAL_ACTION_MAX = 2
    FINAL_ACTION_READ = 0
    FINAL_ACTION_CONTINUE = 0

class RenderingDevice_ShaderStage(Enum):
    SHADER_STAGE_VERTEX = 0
    SHADER_STAGE_FRAGMENT = 1
    SHADER_STAGE_TESSELATION_CONTROL = 2
    SHADER_STAGE_TESSELATION_EVALUATION = 3
    SHADER_STAGE_COMPUTE = 4
    SHADER_STAGE_MAX = 5
    SHADER_STAGE_VERTEX_BIT = 1
    SHADER_STAGE_FRAGMENT_BIT = 2
    SHADER_STAGE_TESSELATION_CONTROL_BIT = 4
    SHADER_STAGE_TESSELATION_EVALUATION_BIT = 8
    SHADER_STAGE_COMPUTE_BIT = 16

class RenderingDevice_ShaderLanguage(Enum):
    SHADER_LANGUAGE_GLSL = 0
    SHADER_LANGUAGE_HLSL = 1

class RenderingDevice_PipelineSpecializationConstantType(Enum):
    PIPELINE_SPECIALIZATION_CONSTANT_TYPE_BOOL = 0
    PIPELINE_SPECIALIZATION_CONSTANT_TYPE_INT = 1
    PIPELINE_SPECIALIZATION_CONSTANT_TYPE_FLOAT = 2

class RenderingDevice_Features(Enum):
    SUPPORTS_BUFFER_DEVICE_ADDRESS = 6

class RenderingDevice_Limit(Enum):
    LIMIT_MAX_BOUND_UNIFORM_SETS = 0
    LIMIT_MAX_FRAMEBUFFER_COLOR_ATTACHMENTS = 1
    LIMIT_MAX_TEXTURES_PER_UNIFORM_SET = 2
    LIMIT_MAX_SAMPLERS_PER_UNIFORM_SET = 3
    LIMIT_MAX_STORAGE_BUFFERS_PER_UNIFORM_SET = 4
    LIMIT_MAX_STORAGE_IMAGES_PER_UNIFORM_SET = 5
    LIMIT_MAX_UNIFORM_BUFFERS_PER_UNIFORM_SET = 6
    LIMIT_MAX_DRAW_INDEXED_INDEX = 7
    LIMIT_MAX_FRAMEBUFFER_HEIGHT = 8
    LIMIT_MAX_FRAMEBUFFER_WIDTH = 9
    LIMIT_MAX_TEXTURE_ARRAY_LAYERS = 10
    LIMIT_MAX_TEXTURE_SIZE_1D = 11
    LIMIT_MAX_TEXTURE_SIZE_2D = 12
    LIMIT_MAX_TEXTURE_SIZE_3D = 13
    LIMIT_MAX_TEXTURE_SIZE_CUBE = 14
    LIMIT_MAX_TEXTURES_PER_SHADER_STAGE = 15
    LIMIT_MAX_SAMPLERS_PER_SHADER_STAGE = 16
    LIMIT_MAX_STORAGE_BUFFERS_PER_SHADER_STAGE = 17
    LIMIT_MAX_STORAGE_IMAGES_PER_SHADER_STAGE = 18
    LIMIT_MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE = 19
    LIMIT_MAX_PUSH_CONSTANT_SIZE = 20
    LIMIT_MAX_UNIFORM_BUFFER_SIZE = 21
    LIMIT_MAX_VERTEX_INPUT_ATTRIBUTE_OFFSET = 22
    LIMIT_MAX_VERTEX_INPUT_ATTRIBUTES = 23
    LIMIT_MAX_VERTEX_INPUT_BINDINGS = 24
    LIMIT_MAX_VERTEX_INPUT_BINDING_STRIDE = 25
    LIMIT_MIN_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 26
    LIMIT_MAX_COMPUTE_SHARED_MEMORY_SIZE = 27
    LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_X = 28
    LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Y = 29
    LIMIT_MAX_COMPUTE_WORKGROUP_COUNT_Z = 30
    LIMIT_MAX_COMPUTE_WORKGROUP_INVOCATIONS = 31
    LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_X = 32
    LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Y = 33
    LIMIT_MAX_COMPUTE_WORKGROUP_SIZE_Z = 34
    LIMIT_MAX_VIEWPORT_DIMENSIONS_X = 35
    LIMIT_MAX_VIEWPORT_DIMENSIONS_Y = 36
    LIMIT_METALFX_TEMPORAL_SCALER_MIN_SCALE = 46
    LIMIT_METALFX_TEMPORAL_SCALER_MAX_SCALE = 47

class RenderingDevice_MemoryType(Enum):
    MEMORY_TEXTURES = 0
    MEMORY_BUFFERS = 1
    MEMORY_TOTAL = 2

class RenderingDevice_BreadcrumbMarker(Enum):
    NONE = 0
    REFLECTION_PROBES = 65536
    SKY_PASS = 131072
    LIGHTMAPPER_PASS = 196608
    SHADOW_PASS_DIRECTIONAL = 262144
    SHADOW_PASS_CUBE = 327680
    OPAQUE_PASS = 393216
    ALPHA_PASS = 458752
    TRANSPARENT_PASS = 524288
    POST_PROCESSING_PASS = 589824
    BLIT_PASS = 655360
    UI_PASS = 720896
    DEBUG_PASS = 786432

class RenderingDevice_DrawFlags(Enum):
    DRAW_DEFAULT_ALL = 0
    DRAW_CLEAR_COLOR_0 = 1
    DRAW_CLEAR_COLOR_1 = 2
    DRAW_CLEAR_COLOR_2 = 4
    DRAW_CLEAR_COLOR_3 = 8
    DRAW_CLEAR_COLOR_4 = 16
    DRAW_CLEAR_COLOR_5 = 32
    DRAW_CLEAR_COLOR_6 = 64
    DRAW_CLEAR_COLOR_7 = 128
    DRAW_CLEAR_COLOR_MASK = 255
    DRAW_CLEAR_COLOR_ALL = 255
    DRAW_IGNORE_COLOR_0 = 256
    DRAW_IGNORE_COLOR_1 = 512
    DRAW_IGNORE_COLOR_2 = 1024
    DRAW_IGNORE_COLOR_3 = 2048
    DRAW_IGNORE_COLOR_4 = 4096
    DRAW_IGNORE_COLOR_5 = 8192
    DRAW_IGNORE_COLOR_6 = 16384
    DRAW_IGNORE_COLOR_7 = 32768
    DRAW_IGNORE_COLOR_MASK = 65280
    DRAW_IGNORE_COLOR_ALL = 65280
    DRAW_CLEAR_DEPTH = 65536
    DRAW_IGNORE_DEPTH = 131072
    DRAW_CLEAR_STENCIL = 262144
    DRAW_IGNORE_STENCIL = 524288
    DRAW_CLEAR_ALL = 327935
    DRAW_IGNORE_ALL = 720640

class RenderingServer(Object):
    render_loop_enabled: bool
    NO_INDEX_ARRAY = -1
    ARRAY_WEIGHTS_SIZE = 4
    CANVAS_ITEM_Z_MIN = -4096
    CANVAS_ITEM_Z_MAX = 4096
    MAX_GLOW_LEVELS = 7
    MAX_CURSORS = 8
    MAX_2D_DIRECTIONAL_LIGHTS = 8
    MAX_MESH_SURFACES = 256
    MATERIAL_RENDER_PRIORITY_MIN = -128
    MATERIAL_RENDER_PRIORITY_MAX = 127
    ARRAY_CUSTOM_COUNT = 4
    PARTICLES_EMIT_FLAG_POSITION = 1
    PARTICLES_EMIT_FLAG_ROTATION_SCALE = 2
    PARTICLES_EMIT_FLAG_VELOCITY = 4
    PARTICLES_EMIT_FLAG_COLOR = 8
    PARTICLES_EMIT_FLAG_CUSTOM = 16
    
    frame_pre_draw: Signal[Callable[[], None]]  # frame_pre_draw()
    frame_post_draw: Signal[Callable[[], None]]  # frame_post_draw()
    def texture_2d_create(self, image: 'Image') -> 'RID': ...
    def texture_2d_layered_create(self, layers: 'list[Image]', layered_type: 'RenderingServer_TextureLayeredType') -> 'RID': ...
    def texture_3d_create(self, format: 'Image_Format', width: int, height: int, depth: int, mipmaps: bool, data: 'list[Image]') -> 'RID': ...
    def texture_proxy_create(self, base: 'RID') -> 'RID': ...
    def texture_create_from_native_handle(self, type: 'RenderingServer_TextureType', format: 'Image_Format', native_handle: int, width: int, height: int, depth: int, layers: int = default('''1'''), layered_type: 'RenderingServer_TextureLayeredType' = default('''0''')) -> 'RID': ...
    def texture_2d_update(self, texture: 'RID', image: 'Image', layer: int) -> None: ...
    def texture_3d_update(self, texture: 'RID', data: 'list[Image]') -> None: ...
    def texture_proxy_update(self, texture: 'RID', proxy_to: 'RID') -> None: ...
    def texture_2d_placeholder_create(self) -> 'RID': ...
    def texture_2d_layered_placeholder_create(self, layered_type: 'RenderingServer_TextureLayeredType') -> 'RID': ...
    def texture_3d_placeholder_create(self) -> 'RID': ...
    def texture_2d_get(self, texture: 'RID') -> 'Image': ...
    def texture_2d_layer_get(self, texture: 'RID', layer: int) -> 'Image': ...
    def texture_3d_get(self, texture: 'RID') -> 'list[Image]': ...
    def texture_replace(self, texture: 'RID', by_texture: 'RID') -> None: ...
    def texture_set_size_override(self, texture: 'RID', width: int, height: int) -> None: ...
    def texture_set_path(self, texture: 'RID', path: 'String') -> None: ...
    def texture_get_path(self, texture: 'RID') -> 'String': ...
    def texture_get_format(self, texture: 'RID') -> 'Image_Format': ...
    def texture_set_force_redraw_if_visible(self, texture: 'RID', enable: bool) -> None: ...
    def texture_rd_create(self, rd_texture: 'RID', layer_type: 'RenderingServer_TextureLayeredType' = default('''0''')) -> 'RID': ...
    def texture_get_rd_texture(self, texture: 'RID', srgb: bool = default('''false''')) -> 'RID': ...
    def texture_get_native_handle(self, texture: 'RID', srgb: bool = default('''false''')) -> int: ...
    def shader_create(self) -> 'RID': ...
    def shader_set_code(self, shader: 'RID', code: 'String') -> None: ...
    def shader_set_path_hint(self, shader: 'RID', path: 'String') -> None: ...
    def shader_get_code(self, shader: 'RID') -> 'String': ...
    def get_shader_parameter_list(self, shader: 'RID') -> 'list[Dictionary]': ...
    def shader_get_parameter_default(self, shader: 'RID', name: 'StringName') -> 'Variant': ...
    def shader_set_default_texture_parameter(self, shader: 'RID', name: 'StringName', texture: 'RID', index: int = default('''0''')) -> None: ...
    def shader_get_default_texture_parameter(self, shader: 'RID', name: 'StringName', index: int = default('''0''')) -> 'RID': ...
    def material_create(self) -> 'RID': ...
    def material_set_shader(self, shader_material: 'RID', shader: 'RID') -> None: ...
    def material_set_param(self, material: 'RID', parameter: 'StringName', value: 'Variant') -> None: ...
    def material_get_param(self, material: 'RID', parameter: 'StringName') -> 'Variant': ...
    def material_set_render_priority(self, material: 'RID', priority: int) -> None: ...
    def material_set_next_pass(self, material: 'RID', next_material: 'RID') -> None: ...
    def mesh_create_from_surfaces(self, surfaces: 'list[Dictionary]', blend_shape_count: int = default('''0''')) -> 'RID': ...
    def mesh_create(self) -> 'RID': ...
    def mesh_surface_get_format_offset(self, format: 'RenderingServer_ArrayFormat', vertex_count: int, array_index: int) -> int: ...
    def mesh_surface_get_format_vertex_stride(self, format: 'RenderingServer_ArrayFormat', vertex_count: int) -> int: ...
    def mesh_surface_get_format_normal_tangent_stride(self, format: 'RenderingServer_ArrayFormat', vertex_count: int) -> int: ...
    def mesh_surface_get_format_attribute_stride(self, format: 'RenderingServer_ArrayFormat', vertex_count: int) -> int: ...
    def mesh_surface_get_format_skin_stride(self, format: 'RenderingServer_ArrayFormat', vertex_count: int) -> int: ...
    def mesh_add_surface(self, mesh: 'RID', surface: 'Dictionary') -> None: ...
    def mesh_add_surface_from_arrays(self, mesh: 'RID', primitive: 'RenderingServer_PrimitiveType', arrays: 'Array', blend_shapes: 'Array' = default('''[]'''), lods: 'Dictionary' = default('''{}'''), compress_format: 'RenderingServer_ArrayFormat' = default('''0''')) -> None: ...
    def mesh_get_blend_shape_count(self, mesh: 'RID') -> int: ...
    def mesh_set_blend_shape_mode(self, mesh: 'RID', mode: 'RenderingServer_BlendShapeMode') -> None: ...
    def mesh_get_blend_shape_mode(self, mesh: 'RID') -> 'RenderingServer_BlendShapeMode': ...
    def mesh_surface_set_material(self, mesh: 'RID', surface: int, material: 'RID') -> None: ...
    def mesh_surface_get_material(self, mesh: 'RID', surface: int) -> 'RID': ...
    def mesh_get_surface(self, mesh: 'RID', surface: int) -> 'Dictionary': ...
    def mesh_surface_get_arrays(self, mesh: 'RID', surface: int) -> 'Array': ...
    def mesh_surface_get_blend_shape_arrays(self, mesh: 'RID', surface: int) -> 'list[Array]': ...
    def mesh_get_surface_count(self, mesh: 'RID') -> int: ...
    def mesh_set_custom_aabb(self, mesh: 'RID', aabb: 'AABB') -> None: ...
    def mesh_get_custom_aabb(self, mesh: 'RID') -> 'AABB': ...
    def mesh_surface_remove(self, mesh: 'RID', surface: int) -> None: ...
    def mesh_clear(self, mesh: 'RID') -> None: ...
    def mesh_surface_update_vertex_region(self, mesh: 'RID', surface: int, offset: int, data: 'PackedByteArray') -> None: ...
    def mesh_surface_update_attribute_region(self, mesh: 'RID', surface: int, offset: int, data: 'PackedByteArray') -> None: ...
    def mesh_surface_update_skin_region(self, mesh: 'RID', surface: int, offset: int, data: 'PackedByteArray') -> None: ...
    def mesh_set_shadow_mesh(self, mesh: 'RID', shadow_mesh: 'RID') -> None: ...
    def multimesh_create(self) -> 'RID': ...
    def multimesh_allocate_data(self, multimesh: 'RID', instances: int, transform_format: 'RenderingServer_MultimeshTransformFormat', color_format: bool = default('''false'''), custom_data_format: bool = default('''false'''), use_indirect: bool = default('''false''')) -> None: ...
    def multimesh_get_instance_count(self, multimesh: 'RID') -> int: ...
    def multimesh_set_mesh(self, multimesh: 'RID', mesh: 'RID') -> None: ...
    def multimesh_instance_set_transform(self, multimesh: 'RID', index: int, transform: 'Transform3D') -> None: ...
    def multimesh_instance_set_transform_2d(self, multimesh: 'RID', index: int, transform: 'Transform2D') -> None: ...
    def multimesh_instance_set_color(self, multimesh: 'RID', index: int, color: 'Color') -> None: ...
    def multimesh_instance_set_custom_data(self, multimesh: 'RID', index: int, custom_data: 'Color') -> None: ...
    def multimesh_get_mesh(self, multimesh: 'RID') -> 'RID': ...
    def multimesh_get_aabb(self, multimesh: 'RID') -> 'AABB': ...
    def multimesh_set_custom_aabb(self, multimesh: 'RID', aabb: 'AABB') -> None: ...
    def multimesh_get_custom_aabb(self, multimesh: 'RID') -> 'AABB': ...
    def multimesh_instance_get_transform(self, multimesh: 'RID', index: int) -> 'Transform3D': ...
    def multimesh_instance_get_transform_2d(self, multimesh: 'RID', index: int) -> 'Transform2D': ...
    def multimesh_instance_get_color(self, multimesh: 'RID', index: int) -> 'Color': ...
    def multimesh_instance_get_custom_data(self, multimesh: 'RID', index: int) -> 'Color': ...
    def multimesh_set_visible_instances(self, multimesh: 'RID', visible: int) -> None: ...
    def multimesh_get_visible_instances(self, multimesh: 'RID') -> int: ...
    def multimesh_set_buffer(self, multimesh: 'RID', buffer: 'PackedFloat32Array') -> None: ...
    def multimesh_get_command_buffer_rd_rid(self, multimesh: 'RID') -> 'RID': ...
    def multimesh_get_buffer_rd_rid(self, multimesh: 'RID') -> 'RID': ...
    def multimesh_get_buffer(self, multimesh: 'RID') -> 'PackedFloat32Array': ...
    def multimesh_set_buffer_interpolated(self, multimesh: 'RID', buffer: 'PackedFloat32Array', buffer_previous: 'PackedFloat32Array') -> None: ...
    def multimesh_set_physics_interpolated(self, multimesh: 'RID', interpolated: bool) -> None: ...
    def multimesh_set_physics_interpolation_quality(self, multimesh: 'RID', quality: 'RenderingServer_MultimeshPhysicsInterpolationQuality') -> None: ...
    def multimesh_instance_reset_physics_interpolation(self, multimesh: 'RID', index: int) -> None: ...
    def skeleton_create(self) -> 'RID': ...
    def skeleton_allocate_data(self, skeleton: 'RID', bones: int, is_2d_skeleton: bool = default('''false''')) -> None: ...
    def skeleton_get_bone_count(self, skeleton: 'RID') -> int: ...
    def skeleton_bone_set_transform(self, skeleton: 'RID', bone: int, transform: 'Transform3D') -> None: ...
    def skeleton_bone_get_transform(self, skeleton: 'RID', bone: int) -> 'Transform3D': ...
    def skeleton_bone_set_transform_2d(self, skeleton: 'RID', bone: int, transform: 'Transform2D') -> None: ...
    def skeleton_bone_get_transform_2d(self, skeleton: 'RID', bone: int) -> 'Transform2D': ...
    def skeleton_set_base_transform_2d(self, skeleton: 'RID', base_transform: 'Transform2D') -> None: ...
    def directional_light_create(self) -> 'RID': ...
    def omni_light_create(self) -> 'RID': ...
    def spot_light_create(self) -> 'RID': ...
    def light_set_color(self, light: 'RID', color: 'Color') -> None: ...
    def light_set_param(self, light: 'RID', param: 'RenderingServer_LightParam', value: float) -> None: ...
    def light_set_shadow(self, light: 'RID', enabled: bool) -> None: ...
    def light_set_projector(self, light: 'RID', texture: 'RID') -> None: ...
    def light_set_negative(self, light: 'RID', enable: bool) -> None: ...
    def light_set_cull_mask(self, light: 'RID', mask: int) -> None: ...
    def light_set_distance_fade(self, decal: 'RID', enabled: bool, begin: float, shadow: float, length: float) -> None: ...
    def light_set_reverse_cull_face_mode(self, light: 'RID', enabled: bool) -> None: ...
    def light_set_shadow_caster_mask(self, light: 'RID', mask: int) -> None: ...
    def light_set_bake_mode(self, light: 'RID', bake_mode: 'RenderingServer_LightBakeMode') -> None: ...
    def light_set_max_sdfgi_cascade(self, light: 'RID', cascade: int) -> None: ...
    def light_omni_set_shadow_mode(self, light: 'RID', mode: 'RenderingServer_LightOmniShadowMode') -> None: ...
    def light_directional_set_shadow_mode(self, light: 'RID', mode: 'RenderingServer_LightDirectionalShadowMode') -> None: ...
    def light_directional_set_blend_splits(self, light: 'RID', enable: bool) -> None: ...
    def light_directional_set_sky_mode(self, light: 'RID', mode: 'RenderingServer_LightDirectionalSkyMode') -> None: ...
    def light_projectors_set_filter(self, filter: 'RenderingServer_LightProjectorFilter') -> None: ...
    def lightmaps_set_bicubic_filter(self, enable: bool) -> None: ...
    def positional_soft_shadow_filter_set_quality(self, quality: 'RenderingServer_ShadowQuality') -> None: ...
    def directional_soft_shadow_filter_set_quality(self, quality: 'RenderingServer_ShadowQuality') -> None: ...
    def directional_shadow_atlas_set_size(self, size: int, is_16bits: bool) -> None: ...
    def reflection_probe_create(self) -> 'RID': ...
    def reflection_probe_set_update_mode(self, probe: 'RID', mode: 'RenderingServer_ReflectionProbeUpdateMode') -> None: ...
    def reflection_probe_set_intensity(self, probe: 'RID', intensity: float) -> None: ...
    def reflection_probe_set_blend_distance(self, probe: 'RID', blend_distance: float) -> None: ...
    def reflection_probe_set_ambient_mode(self, probe: 'RID', mode: 'RenderingServer_ReflectionProbeAmbientMode') -> None: ...
    def reflection_probe_set_ambient_color(self, probe: 'RID', color: 'Color') -> None: ...
    def reflection_probe_set_ambient_energy(self, probe: 'RID', energy: float) -> None: ...
    def reflection_probe_set_max_distance(self, probe: 'RID', distance: float) -> None: ...
    def reflection_probe_set_size(self, probe: 'RID', size: 'Vector3') -> None: ...
    def reflection_probe_set_origin_offset(self, probe: 'RID', offset: 'Vector3') -> None: ...
    def reflection_probe_set_as_interior(self, probe: 'RID', enable: bool) -> None: ...
    def reflection_probe_set_enable_box_projection(self, probe: 'RID', enable: bool) -> None: ...
    def reflection_probe_set_enable_shadows(self, probe: 'RID', enable: bool) -> None: ...
    def reflection_probe_set_cull_mask(self, probe: 'RID', layers: int) -> None: ...
    def reflection_probe_set_reflection_mask(self, probe: 'RID', layers: int) -> None: ...
    def reflection_probe_set_resolution(self, probe: 'RID', resolution: int) -> None: ...
    def reflection_probe_set_mesh_lod_threshold(self, probe: 'RID', pixels: float) -> None: ...
    def decal_create(self) -> 'RID': ...
    def decal_set_size(self, decal: 'RID', size: 'Vector3') -> None: ...
    def decal_set_texture(self, decal: 'RID', type: 'RenderingServer_DecalTexture', texture: 'RID') -> None: ...
    def decal_set_emission_energy(self, decal: 'RID', energy: float) -> None: ...
    def decal_set_albedo_mix(self, decal: 'RID', albedo_mix: float) -> None: ...
    def decal_set_modulate(self, decal: 'RID', color: 'Color') -> None: ...
    def decal_set_cull_mask(self, decal: 'RID', mask: int) -> None: ...
    def decal_set_distance_fade(self, decal: 'RID', enabled: bool, begin: float, length: float) -> None: ...
    def decal_set_fade(self, decal: 'RID', above: float, below: float) -> None: ...
    def decal_set_normal_fade(self, decal: 'RID', fade: float) -> None: ...
    def decals_set_filter(self, filter: 'RenderingServer_DecalFilter') -> None: ...
    def gi_set_use_half_resolution(self, half_resolution: bool) -> None: ...
    def voxel_gi_create(self) -> 'RID': ...
    def voxel_gi_allocate_data(self, voxel_gi: 'RID', to_cell_xform: 'Transform3D', aabb: 'AABB', octree_size: 'Vector3i', octree_cells: 'PackedByteArray', data_cells: 'PackedByteArray', distance_field: 'PackedByteArray', level_counts: 'PackedInt32Array') -> None: ...
    def voxel_gi_get_octree_size(self, voxel_gi: 'RID') -> 'Vector3i': ...
    def voxel_gi_get_octree_cells(self, voxel_gi: 'RID') -> 'PackedByteArray': ...
    def voxel_gi_get_data_cells(self, voxel_gi: 'RID') -> 'PackedByteArray': ...
    def voxel_gi_get_distance_field(self, voxel_gi: 'RID') -> 'PackedByteArray': ...
    def voxel_gi_get_level_counts(self, voxel_gi: 'RID') -> 'PackedInt32Array': ...
    def voxel_gi_get_to_cell_xform(self, voxel_gi: 'RID') -> 'Transform3D': ...
    def voxel_gi_set_dynamic_range(self, voxel_gi: 'RID', range: float) -> None: ...
    def voxel_gi_set_propagation(self, voxel_gi: 'RID', amount: float) -> None: ...
    def voxel_gi_set_energy(self, voxel_gi: 'RID', energy: float) -> None: ...
    def voxel_gi_set_baked_exposure_normalization(self, voxel_gi: 'RID', baked_exposure: float) -> None: ...
    def voxel_gi_set_bias(self, voxel_gi: 'RID', bias: float) -> None: ...
    def voxel_gi_set_normal_bias(self, voxel_gi: 'RID', bias: float) -> None: ...
    def voxel_gi_set_interior(self, voxel_gi: 'RID', enable: bool) -> None: ...
    def voxel_gi_set_use_two_bounces(self, voxel_gi: 'RID', enable: bool) -> None: ...
    def voxel_gi_set_quality(self, quality: 'RenderingServer_VoxelGIQuality') -> None: ...
    def lightmap_create(self) -> 'RID': ...
    def lightmap_set_textures(self, lightmap: 'RID', light: 'RID', uses_sh: bool) -> None: ...
    def lightmap_set_probe_bounds(self, lightmap: 'RID', bounds: 'AABB') -> None: ...
    def lightmap_set_probe_interior(self, lightmap: 'RID', interior: bool) -> None: ...
    def lightmap_set_probe_capture_data(self, lightmap: 'RID', points: 'PackedVector3Array', point_sh: 'PackedColorArray', tetrahedra: 'PackedInt32Array', bsp_tree: 'PackedInt32Array') -> None: ...
    def lightmap_get_probe_capture_points(self, lightmap: 'RID') -> 'PackedVector3Array': ...
    def lightmap_get_probe_capture_sh(self, lightmap: 'RID') -> 'PackedColorArray': ...
    def lightmap_get_probe_capture_tetrahedra(self, lightmap: 'RID') -> 'PackedInt32Array': ...
    def lightmap_get_probe_capture_bsp_tree(self, lightmap: 'RID') -> 'PackedInt32Array': ...
    def lightmap_set_baked_exposure_normalization(self, lightmap: 'RID', baked_exposure: float) -> None: ...
    def lightmap_set_probe_capture_update_speed(self, speed: float) -> None: ...
    def particles_create(self) -> 'RID': ...
    def particles_set_mode(self, particles: 'RID', mode: 'RenderingServer_ParticlesMode') -> None: ...
    def particles_set_emitting(self, particles: 'RID', emitting: bool) -> None: ...
    def particles_get_emitting(self, particles: 'RID') -> bool: ...
    def particles_set_amount(self, particles: 'RID', amount: int) -> None: ...
    def particles_set_amount_ratio(self, particles: 'RID', ratio: float) -> None: ...
    def particles_set_lifetime(self, particles: 'RID', lifetime: float) -> None: ...
    def particles_set_one_shot(self, particles: 'RID', one_shot: bool) -> None: ...
    def particles_set_pre_process_time(self, particles: 'RID', time: float) -> None: ...
    def particles_request_process_time(self, particles: 'RID', time: float) -> None: ...
    def particles_set_explosiveness_ratio(self, particles: 'RID', ratio: float) -> None: ...
    def particles_set_randomness_ratio(self, particles: 'RID', ratio: float) -> None: ...
    def particles_set_interp_to_end(self, particles: 'RID', factor: float) -> None: ...
    def particles_set_emitter_velocity(self, particles: 'RID', velocity: 'Vector3') -> None: ...
    def particles_set_custom_aabb(self, particles: 'RID', aabb: 'AABB') -> None: ...
    def particles_set_speed_scale(self, particles: 'RID', scale: float) -> None: ...
    def particles_set_use_local_coordinates(self, particles: 'RID', enable: bool) -> None: ...
    def particles_set_process_material(self, particles: 'RID', material: 'RID') -> None: ...
    def particles_set_fixed_fps(self, particles: 'RID', fps: int) -> None: ...
    def particles_set_interpolate(self, particles: 'RID', enable: bool) -> None: ...
    def particles_set_fractional_delta(self, particles: 'RID', enable: bool) -> None: ...
    def particles_set_collision_base_size(self, particles: 'RID', size: float) -> None: ...
    def particles_set_transform_align(self, particles: 'RID', align: 'RenderingServer_ParticlesTransformAlign') -> None: ...
    def particles_set_trails(self, particles: 'RID', enable: bool, length_sec: float) -> None: ...
    def particles_set_trail_bind_poses(self, particles: 'RID', bind_poses: 'list[Transform3D]') -> None: ...
    def particles_is_inactive(self, particles: 'RID') -> bool: ...
    def particles_request_process(self, particles: 'RID') -> None: ...
    def particles_restart(self, particles: 'RID') -> None: ...
    def particles_set_subemitter(self, particles: 'RID', subemitter_particles: 'RID') -> None: ...
    def particles_emit(self, particles: 'RID', transform: 'Transform3D', velocity: 'Vector3', color: 'Color', custom: 'Color', emit_flags: int) -> None: ...
    def particles_set_draw_order(self, particles: 'RID', order: 'RenderingServer_ParticlesDrawOrder') -> None: ...
    def particles_set_draw_passes(self, particles: 'RID', count: int) -> None: ...
    def particles_set_draw_pass_mesh(self, particles: 'RID', pass_: int, mesh: 'RID') -> None: ...
    def particles_get_current_aabb(self, particles: 'RID') -> 'AABB': ...
    def particles_set_emission_transform(self, particles: 'RID', transform: 'Transform3D') -> None: ...
    def particles_collision_create(self) -> 'RID': ...
    def particles_collision_set_collision_type(self, particles_collision: 'RID', type: 'RenderingServer_ParticlesCollisionType') -> None: ...
    def particles_collision_set_cull_mask(self, particles_collision: 'RID', mask: int) -> None: ...
    def particles_collision_set_sphere_radius(self, particles_collision: 'RID', radius: float) -> None: ...
    def particles_collision_set_box_extents(self, particles_collision: 'RID', extents: 'Vector3') -> None: ...
    def particles_collision_set_attractor_strength(self, particles_collision: 'RID', strength: float) -> None: ...
    def particles_collision_set_attractor_directionality(self, particles_collision: 'RID', amount: float) -> None: ...
    def particles_collision_set_attractor_attenuation(self, particles_collision: 'RID', curve: float) -> None: ...
    def particles_collision_set_field_texture(self, particles_collision: 'RID', texture: 'RID') -> None: ...
    def particles_collision_height_field_update(self, particles_collision: 'RID') -> None: ...
    def particles_collision_set_height_field_resolution(self, particles_collision: 'RID', resolution: 'RenderingServer_ParticlesCollisionHeightfieldResolution') -> None: ...
    def particles_collision_set_height_field_mask(self, particles_collision: 'RID', mask: int) -> None: ...
    def fog_volume_create(self) -> 'RID': ...
    def fog_volume_set_shape(self, fog_volume: 'RID', shape: 'RenderingServer_FogVolumeShape') -> None: ...
    def fog_volume_set_size(self, fog_volume: 'RID', size: 'Vector3') -> None: ...
    def fog_volume_set_material(self, fog_volume: 'RID', material: 'RID') -> None: ...
    def visibility_notifier_create(self) -> 'RID': ...
    def visibility_notifier_set_aabb(self, notifier: 'RID', aabb: 'AABB') -> None: ...
    def visibility_notifier_set_callbacks(self, notifier: 'RID', enter_callable: 'Callable', exit_callable: 'Callable') -> None: ...
    def occluder_create(self) -> 'RID': ...
    def occluder_set_mesh(self, occluder: 'RID', vertices: 'PackedVector3Array', indices: 'PackedInt32Array') -> None: ...
    def camera_create(self) -> 'RID': ...
    def camera_set_perspective(self, camera: 'RID', fovy_degrees: float, z_near: float, z_far: float) -> None: ...
    def camera_set_orthogonal(self, camera: 'RID', size: float, z_near: float, z_far: float) -> None: ...
    def camera_set_frustum(self, camera: 'RID', size: float, offset: 'Vector2', z_near: float, z_far: float) -> None: ...
    def camera_set_transform(self, camera: 'RID', transform: 'Transform3D') -> None: ...
    def camera_set_cull_mask(self, camera: 'RID', layers: int) -> None: ...
    def camera_set_environment(self, camera: 'RID', env: 'RID') -> None: ...
    def camera_set_camera_attributes(self, camera: 'RID', effects: 'RID') -> None: ...
    def camera_set_compositor(self, camera: 'RID', compositor: 'RID') -> None: ...
    def camera_set_use_vertical_aspect(self, camera: 'RID', enable: bool) -> None: ...
    def viewport_create(self) -> 'RID': ...
    def viewport_set_use_xr(self, viewport: 'RID', use_xr: bool) -> None: ...
    def viewport_set_size(self, viewport: 'RID', width: int, height: int) -> None: ...
    def viewport_set_active(self, viewport: 'RID', active: bool) -> None: ...
    def viewport_set_parent_viewport(self, viewport: 'RID', parent_viewport: 'RID') -> None: ...
    def viewport_attach_to_screen(self, viewport: 'RID', rect: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), screen: int = default('''0''')) -> None: ...
    def viewport_set_render_direct_to_screen(self, viewport: 'RID', enabled: bool) -> None: ...
    def viewport_set_canvas_cull_mask(self, viewport: 'RID', canvas_cull_mask: int) -> None: ...
    def viewport_set_scaling_3d_mode(self, viewport: 'RID', scaling_3d_mode: 'RenderingServer_ViewportScaling3DMode') -> None: ...
    def viewport_set_scaling_3d_scale(self, viewport: 'RID', scale: float) -> None: ...
    def viewport_set_fsr_sharpness(self, viewport: 'RID', sharpness: float) -> None: ...
    def viewport_set_texture_mipmap_bias(self, viewport: 'RID', mipmap_bias: float) -> None: ...
    def viewport_set_anisotropic_filtering_level(self, viewport: 'RID', anisotropic_filtering_level: 'RenderingServer_ViewportAnisotropicFiltering') -> None: ...
    def viewport_set_update_mode(self, viewport: 'RID', update_mode: 'RenderingServer_ViewportUpdateMode') -> None: ...
    def viewport_get_update_mode(self, viewport: 'RID') -> 'RenderingServer_ViewportUpdateMode': ...
    def viewport_set_clear_mode(self, viewport: 'RID', clear_mode: 'RenderingServer_ViewportClearMode') -> None: ...
    def viewport_get_render_target(self, viewport: 'RID') -> 'RID': ...
    def viewport_get_texture(self, viewport: 'RID') -> 'RID': ...
    def viewport_set_disable_3d(self, viewport: 'RID', disable: bool) -> None: ...
    def viewport_set_disable_2d(self, viewport: 'RID', disable: bool) -> None: ...
    def viewport_set_environment_mode(self, viewport: 'RID', mode: 'RenderingServer_ViewportEnvironmentMode') -> None: ...
    def viewport_attach_camera(self, viewport: 'RID', camera: 'RID') -> None: ...
    def viewport_set_scenario(self, viewport: 'RID', scenario: 'RID') -> None: ...
    def viewport_attach_canvas(self, viewport: 'RID', canvas: 'RID') -> None: ...
    def viewport_remove_canvas(self, viewport: 'RID', canvas: 'RID') -> None: ...
    def viewport_set_snap_2d_transforms_to_pixel(self, viewport: 'RID', enabled: bool) -> None: ...
    def viewport_set_snap_2d_vertices_to_pixel(self, viewport: 'RID', enabled: bool) -> None: ...
    def viewport_set_default_canvas_item_texture_filter(self, viewport: 'RID', filter: 'RenderingServer_CanvasItemTextureFilter') -> None: ...
    def viewport_set_default_canvas_item_texture_repeat(self, viewport: 'RID', repeat: 'RenderingServer_CanvasItemTextureRepeat') -> None: ...
    def viewport_set_canvas_transform(self, viewport: 'RID', canvas: 'RID', offset: 'Transform2D') -> None: ...
    def viewport_set_canvas_stacking(self, viewport: 'RID', canvas: 'RID', layer: int, sublayer: int) -> None: ...
    def viewport_set_transparent_background(self, viewport: 'RID', enabled: bool) -> None: ...
    def viewport_set_global_canvas_transform(self, viewport: 'RID', transform: 'Transform2D') -> None: ...
    def viewport_set_sdf_oversize_and_scale(self, viewport: 'RID', oversize: 'RenderingServer_ViewportSDFOversize', scale: 'RenderingServer_ViewportSDFScale') -> None: ...
    def viewport_set_positional_shadow_atlas_size(self, viewport: 'RID', size: int, use_16_bits: bool = default('''false''')) -> None: ...
    def viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport: 'RID', quadrant: int, subdivision: int) -> None: ...
    def viewport_set_msaa_3d(self, viewport: 'RID', msaa: 'RenderingServer_ViewportMSAA') -> None: ...
    def viewport_set_msaa_2d(self, viewport: 'RID', msaa: 'RenderingServer_ViewportMSAA') -> None: ...
    def viewport_set_use_hdr_2d(self, viewport: 'RID', enabled: bool) -> None: ...
    def viewport_set_screen_space_aa(self, viewport: 'RID', mode: 'RenderingServer_ViewportScreenSpaceAA') -> None: ...
    def viewport_set_use_taa(self, viewport: 'RID', enable: bool) -> None: ...
    def viewport_set_use_debanding(self, viewport: 'RID', enable: bool) -> None: ...
    def viewport_set_use_occlusion_culling(self, viewport: 'RID', enable: bool) -> None: ...
    def viewport_set_occlusion_rays_per_thread(self, rays_per_thread: int) -> None: ...
    def viewport_set_occlusion_culling_build_quality(self, quality: 'RenderingServer_ViewportOcclusionCullingBuildQuality') -> None: ...
    def viewport_get_render_info(self, viewport: 'RID', type: 'RenderingServer_ViewportRenderInfoType', info: 'RenderingServer_ViewportRenderInfo') -> int: ...
    def viewport_set_debug_draw(self, viewport: 'RID', draw: 'RenderingServer_ViewportDebugDraw') -> None: ...
    def viewport_set_measure_render_time(self, viewport: 'RID', enable: bool) -> None: ...
    def viewport_get_measured_render_time_cpu(self, viewport: 'RID') -> float: ...
    def viewport_get_measured_render_time_gpu(self, viewport: 'RID') -> float: ...
    def viewport_set_vrs_mode(self, viewport: 'RID', mode: 'RenderingServer_ViewportVRSMode') -> None: ...
    def viewport_set_vrs_update_mode(self, viewport: 'RID', mode: 'RenderingServer_ViewportVRSUpdateMode') -> None: ...
    def viewport_set_vrs_texture(self, viewport: 'RID', texture: 'RID') -> None: ...
    def sky_create(self) -> 'RID': ...
    def sky_set_radiance_size(self, sky: 'RID', radiance_size: int) -> None: ...
    def sky_set_mode(self, sky: 'RID', mode: 'RenderingServer_SkyMode') -> None: ...
    def sky_set_material(self, sky: 'RID', material: 'RID') -> None: ...
    def sky_bake_panorama(self, sky: 'RID', energy: float, bake_irradiance: bool, size: 'Vector2i') -> 'Image': ...
    def compositor_effect_create(self) -> 'RID': ...
    def compositor_effect_set_enabled(self, effect: 'RID', enabled: bool) -> None: ...
    def compositor_effect_set_callback(self, effect: 'RID', callback_type: 'RenderingServer_CompositorEffectCallbackType', callback: 'Callable') -> None: ...
    def compositor_effect_set_flag(self, effect: 'RID', flag: 'RenderingServer_CompositorEffectFlags', set: bool) -> None: ...
    def compositor_create(self) -> 'RID': ...
    def compositor_set_compositor_effects(self, compositor: 'RID', effects: 'list[RID]') -> None: ...
    def environment_create(self) -> 'RID': ...
    def environment_set_background(self, env: 'RID', bg: 'RenderingServer_EnvironmentBG') -> None: ...
    def environment_set_camera_id(self, env: 'RID', id: int) -> None: ...
    def environment_set_sky(self, env: 'RID', sky: 'RID') -> None: ...
    def environment_set_sky_custom_fov(self, env: 'RID', scale: float) -> None: ...
    def environment_set_sky_orientation(self, env: 'RID', orientation: 'Basis') -> None: ...
    def environment_set_bg_color(self, env: 'RID', color: 'Color') -> None: ...
    def environment_set_bg_energy(self, env: 'RID', multiplier: float, exposure_value: float) -> None: ...
    def environment_set_canvas_max_layer(self, env: 'RID', max_layer: int) -> None: ...
    def environment_set_ambient_light(self, env: 'RID', color: 'Color', ambient: 'RenderingServer_EnvironmentAmbientSource' = default('''0'''), energy: float = default('''1.0'''), sky_contribution: float = default('''0.0'''), reflection_source: 'RenderingServer_EnvironmentReflectionSource' = default('''0''')) -> None: ...
    def environment_set_glow(self, env: 'RID', enable: bool, levels: 'PackedFloat32Array', intensity: float, strength: float, mix: float, bloom_threshold: float, blend_mode: 'RenderingServer_EnvironmentGlowBlendMode', hdr_bleed_threshold: float, hdr_bleed_scale: float, hdr_luminance_cap: float, glow_map_strength: float, glow_map: 'RID') -> None: ...
    def environment_set_tonemap(self, env: 'RID', tone_mapper: 'RenderingServer_EnvironmentToneMapper', exposure: float, white: float) -> None: ...
    def environment_set_adjustment(self, env: 'RID', enable: bool, brightness: float, contrast: float, saturation: float, use_1d_color_correction: bool, color_correction: 'RID') -> None: ...
    def environment_set_ssr(self, env: 'RID', enable: bool, max_steps: int, fade_in: float, fade_out: float, depth_tolerance: float) -> None: ...
    def environment_set_ssao(self, env: 'RID', enable: bool, radius: float, intensity: float, power: float, detail: float, horizon: float, sharpness: float, light_affect: float, ao_channel_affect: float) -> None: ...
    def environment_set_fog(self, env: 'RID', enable: bool, light_color: 'Color', light_energy: float, sun_scatter: float, density: float, height: float, height_density: float, aerial_perspective: float, sky_affect: float, fog_mode: 'RenderingServer_EnvironmentFogMode' = default('''0''')) -> None: ...
    def environment_set_sdfgi(self, env: 'RID', enable: bool, cascades: int, min_cell_size: float, y_scale: 'RenderingServer_EnvironmentSDFGIYScale', use_occlusion: bool, bounce_feedback: float, read_sky: bool, energy: float, normal_bias: float, probe_bias: float) -> None: ...
    def environment_set_volumetric_fog(self, env: 'RID', enable: bool, density: float, albedo: 'Color', emission: 'Color', emission_energy: float, anisotropy: float, length: float, p_detail_spread: float, gi_inject: float, temporal_reprojection: bool, temporal_reprojection_amount: float, ambient_inject: float, sky_affect: float) -> None: ...
    def environment_glow_set_use_bicubic_upscale(self, enable: bool) -> None: ...
    def environment_set_ssr_roughness_quality(self, quality: 'RenderingServer_EnvironmentSSRRoughnessQuality') -> None: ...
    def environment_set_ssao_quality(self, quality: 'RenderingServer_EnvironmentSSAOQuality', half_size: bool, adaptive_target: float, blur_passes: int, fadeout_from: float, fadeout_to: float) -> None: ...
    def environment_set_ssil_quality(self, quality: 'RenderingServer_EnvironmentSSILQuality', half_size: bool, adaptive_target: float, blur_passes: int, fadeout_from: float, fadeout_to: float) -> None: ...
    def environment_set_sdfgi_ray_count(self, ray_count: 'RenderingServer_EnvironmentSDFGIRayCount') -> None: ...
    def environment_set_sdfgi_frames_to_converge(self, frames: 'RenderingServer_EnvironmentSDFGIFramesToConverge') -> None: ...
    def environment_set_sdfgi_frames_to_update_light(self, frames: 'RenderingServer_EnvironmentSDFGIFramesToUpdateLight') -> None: ...
    def environment_set_volumetric_fog_volume_size(self, size: int, depth: int) -> None: ...
    def environment_set_volumetric_fog_filter_active(self, active: bool) -> None: ...
    def environment_bake_panorama(self, environment: 'RID', bake_irradiance: bool, size: 'Vector2i') -> 'Image': ...
    def screen_space_roughness_limiter_set_active(self, enable: bool, amount: float, limit: float) -> None: ...
    def sub_surface_scattering_set_quality(self, quality: 'RenderingServer_SubSurfaceScatteringQuality') -> None: ...
    def sub_surface_scattering_set_scale(self, scale: float, depth_scale: float) -> None: ...
    def camera_attributes_create(self) -> 'RID': ...
    def camera_attributes_set_dof_blur_quality(self, quality: 'RenderingServer_DOFBlurQuality', use_jitter: bool) -> None: ...
    def camera_attributes_set_dof_blur_bokeh_shape(self, shape: 'RenderingServer_DOFBokehShape') -> None: ...
    def camera_attributes_set_dof_blur(self, camera_attributes: 'RID', far_enable: bool, far_distance: float, far_transition: float, near_enable: bool, near_distance: float, near_transition: float, amount: float) -> None: ...
    def camera_attributes_set_exposure(self, camera_attributes: 'RID', multiplier: float, normalization: float) -> None: ...
    def camera_attributes_set_auto_exposure(self, camera_attributes: 'RID', enable: bool, min_sensitivity: float, max_sensitivity: float, speed: float, scale: float) -> None: ...
    def scenario_create(self) -> 'RID': ...
    def scenario_set_environment(self, scenario: 'RID', environment: 'RID') -> None: ...
    def scenario_set_fallback_environment(self, scenario: 'RID', environment: 'RID') -> None: ...
    def scenario_set_camera_attributes(self, scenario: 'RID', effects: 'RID') -> None: ...
    def scenario_set_compositor(self, scenario: 'RID', compositor: 'RID') -> None: ...
    def instance_create2(self, base: 'RID', scenario: 'RID') -> 'RID': ...
    def instance_create(self) -> 'RID': ...
    def instance_set_base(self, instance: 'RID', base: 'RID') -> None: ...
    def instance_set_scenario(self, instance: 'RID', scenario: 'RID') -> None: ...
    def instance_set_layer_mask(self, instance: 'RID', mask: int) -> None: ...
    def instance_set_pivot_data(self, instance: 'RID', sorting_offset: float, use_aabb_center: bool) -> None: ...
    def instance_set_transform(self, instance: 'RID', transform: 'Transform3D') -> None: ...
    def instance_set_interpolated(self, instance: 'RID', interpolated: bool) -> None: ...
    def instance_reset_physics_interpolation(self, instance: 'RID') -> None: ...
    def instance_attach_object_instance_id(self, instance: 'RID', id: int) -> None: ...
    def instance_set_blend_shape_weight(self, instance: 'RID', shape: int, weight: float) -> None: ...
    def instance_set_surface_override_material(self, instance: 'RID', surface: int, material: 'RID') -> None: ...
    def instance_set_visible(self, instance: 'RID', visible: bool) -> None: ...
    def instance_geometry_set_transparency(self, instance: 'RID', transparency: float) -> None: ...
    def instance_set_custom_aabb(self, instance: 'RID', aabb: 'AABB') -> None: ...
    def instance_attach_skeleton(self, instance: 'RID', skeleton: 'RID') -> None: ...
    def instance_set_extra_visibility_margin(self, instance: 'RID', margin: float) -> None: ...
    def instance_set_visibility_parent(self, instance: 'RID', parent: 'RID') -> None: ...
    def instance_set_ignore_culling(self, instance: 'RID', enabled: bool) -> None: ...
    def instance_geometry_set_flag(self, instance: 'RID', flag: 'RenderingServer_InstanceFlags', enabled: bool) -> None: ...
    def instance_geometry_set_cast_shadows_setting(self, instance: 'RID', shadow_casting_setting: 'RenderingServer_ShadowCastingSetting') -> None: ...
    def instance_geometry_set_material_override(self, instance: 'RID', material: 'RID') -> None: ...
    def instance_geometry_set_material_overlay(self, instance: 'RID', material: 'RID') -> None: ...
    def instance_geometry_set_visibility_range(self, instance: 'RID', min: float, max: float, min_margin: float, max_margin: float, fade_mode: 'RenderingServer_VisibilityRangeFadeMode') -> None: ...
    def instance_geometry_set_lightmap(self, instance: 'RID', lightmap: 'RID', lightmap_uv_scale: 'Rect2', lightmap_slice: int) -> None: ...
    def instance_geometry_set_lod_bias(self, instance: 'RID', lod_bias: float) -> None: ...
    def instance_geometry_set_shader_parameter(self, instance: 'RID', parameter: 'StringName', value: 'Variant') -> None: ...
    def instance_geometry_get_shader_parameter(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def instance_geometry_get_shader_parameter_default_value(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def instance_geometry_get_shader_parameter_list(self, instance: 'RID') -> 'list[Dictionary]': ...
    def instances_cull_aabb(self, aabb: 'AABB', scenario: 'RID' = default('''RID()''')) -> 'PackedInt64Array': ...
    def instances_cull_ray(self, from_: 'Vector3', to: 'Vector3', scenario: 'RID' = default('''RID()''')) -> 'PackedInt64Array': ...
    def instances_cull_convex(self, convex: 'list[Plane]', scenario: 'RID' = default('''RID()''')) -> 'PackedInt64Array': ...
    def bake_render_uv2(self, base: 'RID', material_overrides: 'list[RID]', image_size: 'Vector2i') -> 'list[Image]': ...
    def canvas_create(self) -> 'RID': ...
    def canvas_set_item_mirroring(self, canvas: 'RID', item: 'RID', mirroring: 'Vector2') -> None: ...
    def canvas_set_item_repeat(self, item: 'RID', repeat_size: 'Vector2', repeat_times: int) -> None: ...
    def canvas_set_modulate(self, canvas: 'RID', color: 'Color') -> None: ...
    def canvas_set_disable_scale(self, disable: bool) -> None: ...
    def canvas_texture_create(self) -> 'RID': ...
    def canvas_texture_set_channel(self, canvas_texture: 'RID', channel: 'RenderingServer_CanvasTextureChannel', texture: 'RID') -> None: ...
    def canvas_texture_set_shading_parameters(self, canvas_texture: 'RID', base_color: 'Color', shininess: float) -> None: ...
    def canvas_texture_set_texture_filter(self, canvas_texture: 'RID', filter: 'RenderingServer_CanvasItemTextureFilter') -> None: ...
    def canvas_texture_set_texture_repeat(self, canvas_texture: 'RID', repeat: 'RenderingServer_CanvasItemTextureRepeat') -> None: ...
    def canvas_item_create(self) -> 'RID': ...
    def canvas_item_set_parent(self, item: 'RID', parent: 'RID') -> None: ...
    def canvas_item_set_default_texture_filter(self, item: 'RID', filter: 'RenderingServer_CanvasItemTextureFilter') -> None: ...
    def canvas_item_set_default_texture_repeat(self, item: 'RID', repeat: 'RenderingServer_CanvasItemTextureRepeat') -> None: ...
    def canvas_item_set_visible(self, item: 'RID', visible: bool) -> None: ...
    def canvas_item_set_light_mask(self, item: 'RID', mask: int) -> None: ...
    def canvas_item_set_visibility_layer(self, item: 'RID', visibility_layer: int) -> None: ...
    def canvas_item_set_transform(self, item: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_item_set_clip(self, item: 'RID', clip: bool) -> None: ...
    def canvas_item_set_distance_field_mode(self, item: 'RID', enabled: bool) -> None: ...
    def canvas_item_set_custom_rect(self, item: 'RID', use_custom_rect: bool, rect: 'Rect2' = default('''Rect2(0, 0, 0, 0)''')) -> None: ...
    def canvas_item_set_modulate(self, item: 'RID', color: 'Color') -> None: ...
    def canvas_item_set_self_modulate(self, item: 'RID', color: 'Color') -> None: ...
    def canvas_item_set_draw_behind_parent(self, item: 'RID', enabled: bool) -> None: ...
    def canvas_item_set_interpolated(self, item: 'RID', interpolated: bool) -> None: ...
    def canvas_item_reset_physics_interpolation(self, item: 'RID') -> None: ...
    def canvas_item_transform_physics_interpolation(self, item: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_item_add_line(self, item: 'RID', from_: 'Vector2', to: 'Vector2', color: 'Color', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def canvas_item_add_polyline(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def canvas_item_add_multiline(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', width: float = default('''-1.0'''), antialiased: bool = default('''false''')) -> None: ...
    def canvas_item_add_rect(self, item: 'RID', rect: 'Rect2', color: 'Color', antialiased: bool = default('''false''')) -> None: ...
    def canvas_item_add_circle(self, item: 'RID', pos: 'Vector2', radius: float, color: 'Color', antialiased: bool = default('''false''')) -> None: ...
    def canvas_item_add_texture_rect(self, item: 'RID', rect: 'Rect2', texture: 'RID', tile: bool = default('''false'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false''')) -> None: ...
    def canvas_item_add_msdf_texture_rect_region(self, item: 'RID', rect: 'Rect2', texture: 'RID', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), outline_size: int = default('''0'''), px_range: float = default('''1.0'''), scale: float = default('''1.0''')) -> None: ...
    def canvas_item_add_lcd_texture_rect_region(self, item: 'RID', rect: 'Rect2', texture: 'RID', src_rect: 'Rect2', modulate: 'Color') -> None: ...
    def canvas_item_add_texture_rect_region(self, item: 'RID', rect: 'Rect2', texture: 'RID', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false'''), clip_uv: bool = default('''true''')) -> None: ...
    def canvas_item_add_nine_patch(self, item: 'RID', rect: 'Rect2', source: 'Rect2', texture: 'RID', topleft: 'Vector2', bottomright: 'Vector2', x_axis_mode: 'RenderingServer_NinePatchAxisMode' = default('''0'''), y_axis_mode: 'RenderingServer_NinePatchAxisMode' = default('''0'''), draw_center: bool = default('''true'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def canvas_item_add_primitive(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array', texture: 'RID') -> None: ...
    def canvas_item_add_polygon(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), texture: 'RID' = default('''RID()''')) -> None: ...
    def canvas_item_add_triangle_array(self, item: 'RID', indices: 'PackedInt32Array', points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), bones: 'PackedInt32Array' = default('''PackedInt32Array()'''), weights: 'PackedFloat32Array' = default('''PackedFloat32Array()'''), texture: 'RID' = default('''RID()'''), count: int = default('''-1''')) -> None: ...
    def canvas_item_add_mesh(self, item: 'RID', mesh: 'RID', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), texture: 'RID' = default('''RID()''')) -> None: ...
    def canvas_item_add_multimesh(self, item: 'RID', mesh: 'RID', texture: 'RID' = default('''RID()''')) -> None: ...
    def canvas_item_add_particles(self, item: 'RID', particles: 'RID', texture: 'RID') -> None: ...
    def canvas_item_add_set_transform(self, item: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_item_add_clip_ignore(self, item: 'RID', ignore: bool) -> None: ...
    def canvas_item_add_animation_slice(self, item: 'RID', animation_length: float, slice_begin: float, slice_end: float, offset: float = default('''0.0''')) -> None: ...
    def canvas_item_set_sort_children_by_y(self, item: 'RID', enabled: bool) -> None: ...
    def canvas_item_set_z_index(self, item: 'RID', z_index: int) -> None: ...
    def canvas_item_set_z_as_relative_to_parent(self, item: 'RID', enabled: bool) -> None: ...
    def canvas_item_set_copy_to_backbuffer(self, item: 'RID', enabled: bool, rect: 'Rect2') -> None: ...
    def canvas_item_attach_skeleton(self, item: 'RID', skeleton: 'RID') -> None: ...
    def canvas_item_clear(self, item: 'RID') -> None: ...
    def canvas_item_set_draw_index(self, item: 'RID', index: int) -> None: ...
    def canvas_item_set_material(self, item: 'RID', material: 'RID') -> None: ...
    def canvas_item_set_use_parent_material(self, item: 'RID', enabled: bool) -> None: ...
    def canvas_item_set_instance_shader_parameter(self, instance: 'RID', parameter: 'StringName', value: 'Variant') -> None: ...
    def canvas_item_get_instance_shader_parameter(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def canvas_item_get_instance_shader_parameter_default_value(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def canvas_item_get_instance_shader_parameter_list(self, instance: 'RID') -> 'list[Dictionary]': ...
    def canvas_item_set_visibility_notifier(self, item: 'RID', enable: bool, area: 'Rect2', enter_callable: 'Callable', exit_callable: 'Callable') -> None: ...
    def canvas_item_set_canvas_group_mode(self, item: 'RID', mode: 'RenderingServer_CanvasGroupMode', clear_margin: float = default('''5.0'''), fit_empty: bool = default('''false'''), fit_margin: float = default('''0.0'''), blur_mipmaps: bool = default('''false''')) -> None: ...
    def debug_canvas_item_get_rect(self, item: 'RID') -> 'Rect2': ...
    def canvas_light_create(self) -> 'RID': ...
    def canvas_light_attach_to_canvas(self, light: 'RID', canvas: 'RID') -> None: ...
    def canvas_light_set_enabled(self, light: 'RID', enabled: bool) -> None: ...
    def canvas_light_set_texture_scale(self, light: 'RID', scale: float) -> None: ...
    def canvas_light_set_transform(self, light: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_light_set_texture(self, light: 'RID', texture: 'RID') -> None: ...
    def canvas_light_set_texture_offset(self, light: 'RID', offset: 'Vector2') -> None: ...
    def canvas_light_set_color(self, light: 'RID', color: 'Color') -> None: ...
    def canvas_light_set_height(self, light: 'RID', height: float) -> None: ...
    def canvas_light_set_energy(self, light: 'RID', energy: float) -> None: ...
    def canvas_light_set_z_range(self, light: 'RID', min_z: int, max_z: int) -> None: ...
    def canvas_light_set_layer_range(self, light: 'RID', min_layer: int, max_layer: int) -> None: ...
    def canvas_light_set_item_cull_mask(self, light: 'RID', mask: int) -> None: ...
    def canvas_light_set_item_shadow_cull_mask(self, light: 'RID', mask: int) -> None: ...
    def canvas_light_set_mode(self, light: 'RID', mode: 'RenderingServer_CanvasLightMode') -> None: ...
    def canvas_light_set_shadow_enabled(self, light: 'RID', enabled: bool) -> None: ...
    def canvas_light_set_shadow_filter(self, light: 'RID', filter: 'RenderingServer_CanvasLightShadowFilter') -> None: ...
    def canvas_light_set_shadow_color(self, light: 'RID', color: 'Color') -> None: ...
    def canvas_light_set_shadow_smooth(self, light: 'RID', smooth: float) -> None: ...
    def canvas_light_set_blend_mode(self, light: 'RID', mode: 'RenderingServer_CanvasLightBlendMode') -> None: ...
    def canvas_light_set_interpolated(self, light: 'RID', interpolated: bool) -> None: ...
    def canvas_light_reset_physics_interpolation(self, light: 'RID') -> None: ...
    def canvas_light_transform_physics_interpolation(self, light: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_light_occluder_create(self) -> 'RID': ...
    def canvas_light_occluder_attach_to_canvas(self, occluder: 'RID', canvas: 'RID') -> None: ...
    def canvas_light_occluder_set_enabled(self, occluder: 'RID', enabled: bool) -> None: ...
    def canvas_light_occluder_set_polygon(self, occluder: 'RID', polygon: 'RID') -> None: ...
    def canvas_light_occluder_set_as_sdf_collision(self, occluder: 'RID', enable: bool) -> None: ...
    def canvas_light_occluder_set_transform(self, occluder: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_light_occluder_set_light_mask(self, occluder: 'RID', mask: int) -> None: ...
    def canvas_light_occluder_set_interpolated(self, occluder: 'RID', interpolated: bool) -> None: ...
    def canvas_light_occluder_reset_physics_interpolation(self, occluder: 'RID') -> None: ...
    def canvas_light_occluder_transform_physics_interpolation(self, occluder: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_occluder_polygon_create(self) -> 'RID': ...
    def canvas_occluder_polygon_set_shape(self, occluder_polygon: 'RID', shape: 'PackedVector2Array', closed: bool) -> None: ...
    def canvas_occluder_polygon_set_cull_mode(self, occluder_polygon: 'RID', mode: 'RenderingServer_CanvasOccluderPolygonCullMode') -> None: ...
    def canvas_set_shadow_texture_size(self, size: int) -> None: ...
    def global_shader_parameter_add(self, name: 'StringName', type: 'RenderingServer_GlobalShaderParameterType', default_value: 'Variant') -> None: ...
    def global_shader_parameter_remove(self, name: 'StringName') -> None: ...
    def global_shader_parameter_get_list(self) -> 'list[StringName]': ...
    def global_shader_parameter_set(self, name: 'StringName', value: 'Variant') -> None: ...
    def global_shader_parameter_set_override(self, name: 'StringName', value: 'Variant') -> None: ...
    def global_shader_parameter_get(self, name: 'StringName') -> 'Variant': ...
    def global_shader_parameter_get_type(self, name: 'StringName') -> 'RenderingServer_GlobalShaderParameterType': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def request_frame_drawn_callback(self, callable: 'Callable') -> None: ...
    def has_changed(self) -> bool: ...
    def get_rendering_info(self, info: 'RenderingServer_RenderingInfo') -> int: ...
    def get_video_adapter_name(self) -> 'String': ...
    def get_video_adapter_vendor(self) -> 'String': ...
    def get_video_adapter_type(self) -> 'RenderingDevice_DeviceType': ...
    def get_video_adapter_api_version(self) -> 'String': ...
    def get_current_rendering_driver_name(self) -> 'String': ...
    def get_current_rendering_method(self) -> 'String': ...
    def make_sphere_mesh(self, latitudes: int, longitudes: int, radius: float) -> 'RID': ...
    def get_test_cube(self) -> 'RID': ...
    def get_test_texture(self) -> 'RID': ...
    def get_white_texture(self) -> 'RID': ...
    def set_boot_image(self, image: 'Image', color: 'Color', scale: bool, use_filter: bool = default('''true''')) -> None: ...
    def get_default_clear_color(self) -> 'Color': ...
    def set_default_clear_color(self, color: 'Color') -> None: ...
    def has_os_feature(self, feature: 'String') -> bool: ...
    def set_debug_generate_wireframes(self, generate: bool) -> None: ...
    def is_render_loop_enabled(self) -> bool: ...
    def set_render_loop_enabled(self, enabled: bool) -> None: ...
    def get_frame_setup_time_cpu(self) -> float: ...
    def force_sync(self) -> None: ...
    def force_draw(self, swap_buffers: bool = default('''true'''), frame_step: float = default('''0.0''')) -> None: ...
    def get_rendering_device(self) -> 'RenderingDevice': ...
    def create_local_rendering_device(self) -> 'RenderingDevice': ...
    def is_on_render_thread(self) -> bool: ...
    def call_on_render_thread(self, callable: 'Callable') -> None: ...
    def has_feature(self, feature: 'RenderingServer_Features') -> bool: ...
    
class RenderingServer_TextureType(Enum):
    TEXTURE_TYPE_2D = 0
    TEXTURE_TYPE_LAYERED = 1
    TEXTURE_TYPE_3D = 2

class RenderingServer_TextureLayeredType(Enum):
    TEXTURE_LAYERED_2D_ARRAY = 0
    TEXTURE_LAYERED_CUBEMAP = 1
    TEXTURE_LAYERED_CUBEMAP_ARRAY = 2

class RenderingServer_CubeMapLayer(Enum):
    CUBEMAP_LAYER_LEFT = 0
    CUBEMAP_LAYER_RIGHT = 1
    CUBEMAP_LAYER_BOTTOM = 2
    CUBEMAP_LAYER_TOP = 3
    CUBEMAP_LAYER_FRONT = 4
    CUBEMAP_LAYER_BACK = 5

class RenderingServer_ShaderMode(Enum):
    SHADER_SPATIAL = 0
    SHADER_CANVAS_ITEM = 1
    SHADER_PARTICLES = 2
    SHADER_SKY = 3
    SHADER_FOG = 4
    SHADER_MAX = 5

class RenderingServer_ArrayType(Enum):
    ARRAY_VERTEX = 0
    ARRAY_NORMAL = 1
    ARRAY_TANGENT = 2
    ARRAY_COLOR = 3
    ARRAY_TEX_UV = 4
    ARRAY_TEX_UV2 = 5
    ARRAY_CUSTOM0 = 6
    ARRAY_CUSTOM1 = 7
    ARRAY_CUSTOM2 = 8
    ARRAY_CUSTOM3 = 9
    ARRAY_BONES = 10
    ARRAY_WEIGHTS = 11
    ARRAY_INDEX = 12
    ARRAY_MAX = 13

class RenderingServer_ArrayCustomFormat(Enum):
    ARRAY_CUSTOM_RGBA8_UNORM = 0
    ARRAY_CUSTOM_RGBA8_SNORM = 1
    ARRAY_CUSTOM_RG_HALF = 2
    ARRAY_CUSTOM_RGBA_HALF = 3
    ARRAY_CUSTOM_R_FLOAT = 4
    ARRAY_CUSTOM_RG_FLOAT = 5
    ARRAY_CUSTOM_RGB_FLOAT = 6
    ARRAY_CUSTOM_RGBA_FLOAT = 7
    ARRAY_CUSTOM_MAX = 8

class RenderingServer_ArrayFormat(Enum):
    ARRAY_FORMAT_VERTEX = 1
    ARRAY_FORMAT_NORMAL = 2
    ARRAY_FORMAT_TANGENT = 4
    ARRAY_FORMAT_COLOR = 8
    ARRAY_FORMAT_TEX_UV = 16
    ARRAY_FORMAT_TEX_UV2 = 32
    ARRAY_FORMAT_CUSTOM0 = 64
    ARRAY_FORMAT_CUSTOM1 = 128
    ARRAY_FORMAT_CUSTOM2 = 256
    ARRAY_FORMAT_CUSTOM3 = 512
    ARRAY_FORMAT_BONES = 1024
    ARRAY_FORMAT_WEIGHTS = 2048
    ARRAY_FORMAT_INDEX = 4096
    ARRAY_FORMAT_BLEND_SHAPE_MASK = 7
    ARRAY_FORMAT_CUSTOM_BASE = 13
    ARRAY_FORMAT_CUSTOM_BITS = 3
    ARRAY_FORMAT_CUSTOM0_SHIFT = 13
    ARRAY_FORMAT_CUSTOM1_SHIFT = 16
    ARRAY_FORMAT_CUSTOM2_SHIFT = 19
    ARRAY_FORMAT_CUSTOM3_SHIFT = 22
    ARRAY_FORMAT_CUSTOM_MASK = 7
    ARRAY_COMPRESS_FLAGS_BASE = 25
    ARRAY_FLAG_USE_2D_VERTICES = 33554432
    ARRAY_FLAG_USE_DYNAMIC_UPDATE = 67108864
    ARRAY_FLAG_USE_8_BONE_WEIGHTS = 134217728
    ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY = 268435456
    ARRAY_FLAG_COMPRESS_ATTRIBUTES = 536870912
    ARRAY_FLAG_FORMAT_VERSION_BASE = 35
    ARRAY_FLAG_FORMAT_VERSION_SHIFT = 35
    ARRAY_FLAG_FORMAT_VERSION_1 = 0
    ARRAY_FLAG_FORMAT_VERSION_2 = 34359738368
    ARRAY_FLAG_FORMAT_CURRENT_VERSION = 34359738368
    ARRAY_FLAG_FORMAT_VERSION_MASK = 255

class RenderingServer_PrimitiveType(Enum):
    PRIMITIVE_POINTS = 0
    PRIMITIVE_LINES = 1
    PRIMITIVE_LINE_STRIP = 2
    PRIMITIVE_TRIANGLES = 3
    PRIMITIVE_TRIANGLE_STRIP = 4
    PRIMITIVE_MAX = 5

class RenderingServer_BlendShapeMode(Enum):
    BLEND_SHAPE_MODE_NORMALIZED = 0
    BLEND_SHAPE_MODE_RELATIVE = 1

class RenderingServer_MultimeshTransformFormat(Enum):
    MULTIMESH_TRANSFORM_2D = 0
    MULTIMESH_TRANSFORM_3D = 1

class RenderingServer_MultimeshPhysicsInterpolationQuality(Enum):
    MULTIMESH_INTERP_QUALITY_FAST = 0
    MULTIMESH_INTERP_QUALITY_HIGH = 1

class RenderingServer_LightProjectorFilter(Enum):
    LIGHT_PROJECTOR_FILTER_NEAREST = 0
    LIGHT_PROJECTOR_FILTER_LINEAR = 1
    LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS = 2
    LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS = 3
    LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC = 4
    LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC = 5

class RenderingServer_LightType(Enum):
    LIGHT_DIRECTIONAL = 0
    LIGHT_OMNI = 1
    LIGHT_SPOT = 2

class RenderingServer_LightParam(Enum):
    LIGHT_PARAM_ENERGY = 0
    LIGHT_PARAM_INDIRECT_ENERGY = 1
    LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY = 2
    LIGHT_PARAM_SPECULAR = 3
    LIGHT_PARAM_RANGE = 4
    LIGHT_PARAM_SIZE = 5
    LIGHT_PARAM_ATTENUATION = 6
    LIGHT_PARAM_SPOT_ANGLE = 7
    LIGHT_PARAM_SPOT_ATTENUATION = 8
    LIGHT_PARAM_SHADOW_MAX_DISTANCE = 9
    LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET = 10
    LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET = 11
    LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET = 12
    LIGHT_PARAM_SHADOW_FADE_START = 13
    LIGHT_PARAM_SHADOW_NORMAL_BIAS = 14
    LIGHT_PARAM_SHADOW_BIAS = 15
    LIGHT_PARAM_SHADOW_PANCAKE_SIZE = 16
    LIGHT_PARAM_SHADOW_OPACITY = 17
    LIGHT_PARAM_SHADOW_BLUR = 18
    LIGHT_PARAM_TRANSMITTANCE_BIAS = 19
    LIGHT_PARAM_INTENSITY = 20
    LIGHT_PARAM_MAX = 21

class RenderingServer_LightBakeMode(Enum):
    LIGHT_BAKE_DISABLED = 0
    LIGHT_BAKE_STATIC = 1
    LIGHT_BAKE_DYNAMIC = 2

class RenderingServer_LightOmniShadowMode(Enum):
    LIGHT_OMNI_SHADOW_DUAL_PARABOLOID = 0
    LIGHT_OMNI_SHADOW_CUBE = 1

class RenderingServer_LightDirectionalShadowMode(Enum):
    LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL = 0
    LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS = 1
    LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS = 2

class RenderingServer_LightDirectionalSkyMode(Enum):
    LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY = 0
    LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY = 1
    LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY = 2

class RenderingServer_ShadowQuality(Enum):
    SHADOW_QUALITY_HARD = 0
    SHADOW_QUALITY_SOFT_VERY_LOW = 1
    SHADOW_QUALITY_SOFT_LOW = 2
    SHADOW_QUALITY_SOFT_MEDIUM = 3
    SHADOW_QUALITY_SOFT_HIGH = 4
    SHADOW_QUALITY_SOFT_ULTRA = 5
    SHADOW_QUALITY_MAX = 6

class RenderingServer_ReflectionProbeUpdateMode(Enum):
    REFLECTION_PROBE_UPDATE_ONCE = 0
    REFLECTION_PROBE_UPDATE_ALWAYS = 1

class RenderingServer_ReflectionProbeAmbientMode(Enum):
    REFLECTION_PROBE_AMBIENT_DISABLED = 0
    REFLECTION_PROBE_AMBIENT_ENVIRONMENT = 1
    REFLECTION_PROBE_AMBIENT_COLOR = 2

class RenderingServer_DecalTexture(Enum):
    DECAL_TEXTURE_ALBEDO = 0
    DECAL_TEXTURE_NORMAL = 1
    DECAL_TEXTURE_ORM = 2
    DECAL_TEXTURE_EMISSION = 3
    DECAL_TEXTURE_MAX = 4

class RenderingServer_DecalFilter(Enum):
    DECAL_FILTER_NEAREST = 0
    DECAL_FILTER_LINEAR = 1
    DECAL_FILTER_NEAREST_MIPMAPS = 2
    DECAL_FILTER_LINEAR_MIPMAPS = 3
    DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC = 4
    DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC = 5

class RenderingServer_VoxelGIQuality(Enum):
    VOXEL_GI_QUALITY_LOW = 0
    VOXEL_GI_QUALITY_HIGH = 1

class RenderingServer_ParticlesMode(Enum):
    PARTICLES_MODE_2D = 0
    PARTICLES_MODE_3D = 1

class RenderingServer_ParticlesTransformAlign(Enum):
    PARTICLES_TRANSFORM_ALIGN_DISABLED = 0
    PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD = 1
    PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY = 2
    PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY = 3

class RenderingServer_ParticlesDrawOrder(Enum):
    PARTICLES_DRAW_ORDER_INDEX = 0
    PARTICLES_DRAW_ORDER_LIFETIME = 1
    PARTICLES_DRAW_ORDER_REVERSE_LIFETIME = 2
    PARTICLES_DRAW_ORDER_VIEW_DEPTH = 3

class RenderingServer_ParticlesCollisionType(Enum):
    PARTICLES_COLLISION_TYPE_SPHERE_ATTRACT = 0
    PARTICLES_COLLISION_TYPE_BOX_ATTRACT = 1
    PARTICLES_COLLISION_TYPE_VECTOR_FIELD_ATTRACT = 2
    PARTICLES_COLLISION_TYPE_SPHERE_COLLIDE = 3
    PARTICLES_COLLISION_TYPE_BOX_COLLIDE = 4
    PARTICLES_COLLISION_TYPE_SDF_COLLIDE = 5
    PARTICLES_COLLISION_TYPE_HEIGHTFIELD_COLLIDE = 6

class RenderingServer_ParticlesCollisionHeightfieldResolution(Enum):
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256 = 0
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512 = 1
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024 = 2
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048 = 3
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096 = 4
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192 = 5
    PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX = 6

class RenderingServer_FogVolumeShape(Enum):
    FOG_VOLUME_SHAPE_ELLIPSOID = 0
    FOG_VOLUME_SHAPE_CONE = 1
    FOG_VOLUME_SHAPE_CYLINDER = 2
    FOG_VOLUME_SHAPE_BOX = 3
    FOG_VOLUME_SHAPE_WORLD = 4
    FOG_VOLUME_SHAPE_MAX = 5

class RenderingServer_ViewportScaling3DMode(Enum):
    VIEWPORT_SCALING_3D_MODE_BILINEAR = 0
    VIEWPORT_SCALING_3D_MODE_FSR = 1
    VIEWPORT_SCALING_3D_MODE_FSR2 = 2
    VIEWPORT_SCALING_3D_MODE_METALFX_SPATIAL = 3
    VIEWPORT_SCALING_3D_MODE_METALFX_TEMPORAL = 4
    VIEWPORT_SCALING_3D_MODE_MAX = 5

class RenderingServer_ViewportUpdateMode(Enum):
    VIEWPORT_UPDATE_DISABLED = 0
    VIEWPORT_UPDATE_ONCE = 1
    VIEWPORT_UPDATE_WHEN_VISIBLE = 2
    VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE = 3
    VIEWPORT_UPDATE_ALWAYS = 4

class RenderingServer_ViewportClearMode(Enum):
    VIEWPORT_CLEAR_ALWAYS = 0
    VIEWPORT_CLEAR_NEVER = 1
    VIEWPORT_CLEAR_ONLY_NEXT_FRAME = 2

class RenderingServer_ViewportEnvironmentMode(Enum):
    VIEWPORT_ENVIRONMENT_DISABLED = 0
    VIEWPORT_ENVIRONMENT_ENABLED = 1
    VIEWPORT_ENVIRONMENT_INHERIT = 2
    VIEWPORT_ENVIRONMENT_MAX = 3

class RenderingServer_ViewportSDFOversize(Enum):
    VIEWPORT_SDF_OVERSIZE_100_PERCENT = 0
    VIEWPORT_SDF_OVERSIZE_120_PERCENT = 1
    VIEWPORT_SDF_OVERSIZE_150_PERCENT = 2
    VIEWPORT_SDF_OVERSIZE_200_PERCENT = 3
    VIEWPORT_SDF_OVERSIZE_MAX = 4

class RenderingServer_ViewportSDFScale(Enum):
    VIEWPORT_SDF_SCALE_100_PERCENT = 0
    VIEWPORT_SDF_SCALE_50_PERCENT = 1
    VIEWPORT_SDF_SCALE_25_PERCENT = 2
    VIEWPORT_SDF_SCALE_MAX = 3

class RenderingServer_ViewportMSAA(Enum):
    VIEWPORT_MSAA_DISABLED = 0
    VIEWPORT_MSAA_2X = 1
    VIEWPORT_MSAA_4X = 2
    VIEWPORT_MSAA_8X = 3
    VIEWPORT_MSAA_MAX = 4

class RenderingServer_ViewportAnisotropicFiltering(Enum):
    VIEWPORT_ANISOTROPY_DISABLED = 0
    VIEWPORT_ANISOTROPY_2X = 1
    VIEWPORT_ANISOTROPY_4X = 2
    VIEWPORT_ANISOTROPY_8X = 3
    VIEWPORT_ANISOTROPY_16X = 4
    VIEWPORT_ANISOTROPY_MAX = 5

class RenderingServer_ViewportScreenSpaceAA(Enum):
    VIEWPORT_SCREEN_SPACE_AA_DISABLED = 0
    VIEWPORT_SCREEN_SPACE_AA_FXAA = 1
    VIEWPORT_SCREEN_SPACE_AA_MAX = 2

class RenderingServer_ViewportOcclusionCullingBuildQuality(Enum):
    VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW = 0
    VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM = 1
    VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH = 2

class RenderingServer_ViewportRenderInfo(Enum):
    VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME = 0
    VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME = 1
    VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME = 2
    VIEWPORT_RENDER_INFO_MAX = 3

class RenderingServer_ViewportRenderInfoType(Enum):
    VIEWPORT_RENDER_INFO_TYPE_VISIBLE = 0
    VIEWPORT_RENDER_INFO_TYPE_SHADOW = 1
    VIEWPORT_RENDER_INFO_TYPE_CANVAS = 2
    VIEWPORT_RENDER_INFO_TYPE_MAX = 3

class RenderingServer_ViewportDebugDraw(Enum):
    VIEWPORT_DEBUG_DRAW_DISABLED = 0
    VIEWPORT_DEBUG_DRAW_UNSHADED = 1
    VIEWPORT_DEBUG_DRAW_LIGHTING = 2
    VIEWPORT_DEBUG_DRAW_OVERDRAW = 3
    VIEWPORT_DEBUG_DRAW_WIREFRAME = 4
    VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER = 5
    VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO = 6
    VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING = 7
    VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION = 8
    VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS = 9
    VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS = 10
    VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE = 11
    VIEWPORT_DEBUG_DRAW_SSAO = 12
    VIEWPORT_DEBUG_DRAW_SSIL = 13
    VIEWPORT_DEBUG_DRAW_PSSM_SPLITS = 14
    VIEWPORT_DEBUG_DRAW_DECAL_ATLAS = 15
    VIEWPORT_DEBUG_DRAW_SDFGI = 16
    VIEWPORT_DEBUG_DRAW_SDFGI_PROBES = 17
    VIEWPORT_DEBUG_DRAW_GI_BUFFER = 18
    VIEWPORT_DEBUG_DRAW_DISABLE_LOD = 19
    VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS = 20
    VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS = 21
    VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS = 22
    VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES = 23
    VIEWPORT_DEBUG_DRAW_OCCLUDERS = 24
    VIEWPORT_DEBUG_DRAW_MOTION_VECTORS = 25
    VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER = 26

class RenderingServer_ViewportVRSMode(Enum):
    VIEWPORT_VRS_DISABLED = 0
    VIEWPORT_VRS_TEXTURE = 1
    VIEWPORT_VRS_XR = 2
    VIEWPORT_VRS_MAX = 3

class RenderingServer_ViewportVRSUpdateMode(Enum):
    VIEWPORT_VRS_UPDATE_DISABLED = 0
    VIEWPORT_VRS_UPDATE_ONCE = 1
    VIEWPORT_VRS_UPDATE_ALWAYS = 2
    VIEWPORT_VRS_UPDATE_MAX = 3

class RenderingServer_SkyMode(Enum):
    SKY_MODE_AUTOMATIC = 0
    SKY_MODE_QUALITY = 1
    SKY_MODE_INCREMENTAL = 2
    SKY_MODE_REALTIME = 3

class RenderingServer_CompositorEffectFlags(Enum):
    COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR = 1
    COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH = 2
    COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS = 4
    COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS = 8
    COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR = 16

class RenderingServer_CompositorEffectCallbackType(Enum):
    COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_OPAQUE = 0
    COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_OPAQUE = 1
    COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_SKY = 2
    COMPOSITOR_EFFECT_CALLBACK_TYPE_PRE_TRANSPARENT = 3
    COMPOSITOR_EFFECT_CALLBACK_TYPE_POST_TRANSPARENT = 4
    COMPOSITOR_EFFECT_CALLBACK_TYPE_ANY = -1

class RenderingServer_EnvironmentBG(Enum):
    ENV_BG_CLEAR_COLOR = 0
    ENV_BG_COLOR = 1
    ENV_BG_SKY = 2
    ENV_BG_CANVAS = 3
    ENV_BG_KEEP = 4
    ENV_BG_CAMERA_FEED = 5
    ENV_BG_MAX = 6

class RenderingServer_EnvironmentAmbientSource(Enum):
    ENV_AMBIENT_SOURCE_BG = 0
    ENV_AMBIENT_SOURCE_DISABLED = 1
    ENV_AMBIENT_SOURCE_COLOR = 2
    ENV_AMBIENT_SOURCE_SKY = 3

class RenderingServer_EnvironmentReflectionSource(Enum):
    ENV_REFLECTION_SOURCE_BG = 0
    ENV_REFLECTION_SOURCE_DISABLED = 1
    ENV_REFLECTION_SOURCE_SKY = 2

class RenderingServer_EnvironmentGlowBlendMode(Enum):
    ENV_GLOW_BLEND_MODE_ADDITIVE = 0
    ENV_GLOW_BLEND_MODE_SCREEN = 1
    ENV_GLOW_BLEND_MODE_SOFTLIGHT = 2
    ENV_GLOW_BLEND_MODE_REPLACE = 3
    ENV_GLOW_BLEND_MODE_MIX = 4

class RenderingServer_EnvironmentFogMode(Enum):
    ENV_FOG_MODE_EXPONENTIAL = 0
    ENV_FOG_MODE_DEPTH = 1

class RenderingServer_EnvironmentToneMapper(Enum):
    ENV_TONE_MAPPER_LINEAR = 0
    ENV_TONE_MAPPER_REINHARD = 1
    ENV_TONE_MAPPER_FILMIC = 2
    ENV_TONE_MAPPER_ACES = 3
    ENV_TONE_MAPPER_AGX = 4

class RenderingServer_EnvironmentSSRRoughnessQuality(Enum):
    ENV_SSR_ROUGHNESS_QUALITY_DISABLED = 0
    ENV_SSR_ROUGHNESS_QUALITY_LOW = 1
    ENV_SSR_ROUGHNESS_QUALITY_MEDIUM = 2
    ENV_SSR_ROUGHNESS_QUALITY_HIGH = 3

class RenderingServer_EnvironmentSSAOQuality(Enum):
    ENV_SSAO_QUALITY_VERY_LOW = 0
    ENV_SSAO_QUALITY_LOW = 1
    ENV_SSAO_QUALITY_MEDIUM = 2
    ENV_SSAO_QUALITY_HIGH = 3
    ENV_SSAO_QUALITY_ULTRA = 4

class RenderingServer_EnvironmentSSILQuality(Enum):
    ENV_SSIL_QUALITY_VERY_LOW = 0
    ENV_SSIL_QUALITY_LOW = 1
    ENV_SSIL_QUALITY_MEDIUM = 2
    ENV_SSIL_QUALITY_HIGH = 3
    ENV_SSIL_QUALITY_ULTRA = 4

class RenderingServer_EnvironmentSDFGIYScale(Enum):
    ENV_SDFGI_Y_SCALE_50_PERCENT = 0
    ENV_SDFGI_Y_SCALE_75_PERCENT = 1
    ENV_SDFGI_Y_SCALE_100_PERCENT = 2

class RenderingServer_EnvironmentSDFGIRayCount(Enum):
    ENV_SDFGI_RAY_COUNT_4 = 0
    ENV_SDFGI_RAY_COUNT_8 = 1
    ENV_SDFGI_RAY_COUNT_16 = 2
    ENV_SDFGI_RAY_COUNT_32 = 3
    ENV_SDFGI_RAY_COUNT_64 = 4
    ENV_SDFGI_RAY_COUNT_96 = 5
    ENV_SDFGI_RAY_COUNT_128 = 6
    ENV_SDFGI_RAY_COUNT_MAX = 7

class RenderingServer_EnvironmentSDFGIFramesToConverge(Enum):
    ENV_SDFGI_CONVERGE_IN_5_FRAMES = 0
    ENV_SDFGI_CONVERGE_IN_10_FRAMES = 1
    ENV_SDFGI_CONVERGE_IN_15_FRAMES = 2
    ENV_SDFGI_CONVERGE_IN_20_FRAMES = 3
    ENV_SDFGI_CONVERGE_IN_25_FRAMES = 4
    ENV_SDFGI_CONVERGE_IN_30_FRAMES = 5
    ENV_SDFGI_CONVERGE_MAX = 6

class RenderingServer_EnvironmentSDFGIFramesToUpdateLight(Enum):
    ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME = 0
    ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES = 1
    ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES = 2
    ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES = 3
    ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES = 4
    ENV_SDFGI_UPDATE_LIGHT_MAX = 5

class RenderingServer_SubSurfaceScatteringQuality(Enum):
    SUB_SURFACE_SCATTERING_QUALITY_DISABLED = 0
    SUB_SURFACE_SCATTERING_QUALITY_LOW = 1
    SUB_SURFACE_SCATTERING_QUALITY_MEDIUM = 2
    SUB_SURFACE_SCATTERING_QUALITY_HIGH = 3

class RenderingServer_DOFBokehShape(Enum):
    DOF_BOKEH_BOX = 0
    DOF_BOKEH_HEXAGON = 1
    DOF_BOKEH_CIRCLE = 2

class RenderingServer_DOFBlurQuality(Enum):
    DOF_BLUR_QUALITY_VERY_LOW = 0
    DOF_BLUR_QUALITY_LOW = 1
    DOF_BLUR_QUALITY_MEDIUM = 2
    DOF_BLUR_QUALITY_HIGH = 3

class RenderingServer_InstanceType(Enum):
    INSTANCE_NONE = 0
    INSTANCE_MESH = 1
    INSTANCE_MULTIMESH = 2
    INSTANCE_PARTICLES = 3
    INSTANCE_PARTICLES_COLLISION = 4
    INSTANCE_LIGHT = 5
    INSTANCE_REFLECTION_PROBE = 6
    INSTANCE_DECAL = 7
    INSTANCE_VOXEL_GI = 8
    INSTANCE_LIGHTMAP = 9
    INSTANCE_OCCLUDER = 10
    INSTANCE_VISIBLITY_NOTIFIER = 11
    INSTANCE_FOG_VOLUME = 12
    INSTANCE_MAX = 13
    INSTANCE_GEOMETRY_MASK = 14

class RenderingServer_InstanceFlags(Enum):
    INSTANCE_FLAG_USE_BAKED_LIGHT = 0
    INSTANCE_FLAG_USE_DYNAMIC_GI = 1
    INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE = 2
    INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING = 3
    INSTANCE_FLAG_MAX = 4

class RenderingServer_ShadowCastingSetting(Enum):
    SHADOW_CASTING_SETTING_OFF = 0
    SHADOW_CASTING_SETTING_ON = 1
    SHADOW_CASTING_SETTING_DOUBLE_SIDED = 2
    SHADOW_CASTING_SETTING_SHADOWS_ONLY = 3

class RenderingServer_VisibilityRangeFadeMode(Enum):
    VISIBILITY_RANGE_FADE_DISABLED = 0
    VISIBILITY_RANGE_FADE_SELF = 1
    VISIBILITY_RANGE_FADE_DEPENDENCIES = 2

class RenderingServer_BakeChannels(Enum):
    BAKE_CHANNEL_ALBEDO_ALPHA = 0
    BAKE_CHANNEL_NORMAL = 1
    BAKE_CHANNEL_ORM = 2
    BAKE_CHANNEL_EMISSION = 3

class RenderingServer_CanvasTextureChannel(Enum):
    CANVAS_TEXTURE_CHANNEL_DIFFUSE = 0
    CANVAS_TEXTURE_CHANNEL_NORMAL = 1
    CANVAS_TEXTURE_CHANNEL_SPECULAR = 2

class RenderingServer_NinePatchAxisMode(Enum):
    NINE_PATCH_STRETCH = 0
    NINE_PATCH_TILE = 1
    NINE_PATCH_TILE_FIT = 2

class RenderingServer_CanvasItemTextureFilter(Enum):
    CANVAS_ITEM_TEXTURE_FILTER_DEFAULT = 0
    CANVAS_ITEM_TEXTURE_FILTER_NEAREST = 1
    CANVAS_ITEM_TEXTURE_FILTER_LINEAR = 2
    CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 3
    CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 4
    CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC = 5
    CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC = 6
    CANVAS_ITEM_TEXTURE_FILTER_MAX = 7

class RenderingServer_CanvasItemTextureRepeat(Enum):
    CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT = 0
    CANVAS_ITEM_TEXTURE_REPEAT_DISABLED = 1
    CANVAS_ITEM_TEXTURE_REPEAT_ENABLED = 2
    CANVAS_ITEM_TEXTURE_REPEAT_MIRROR = 3
    CANVAS_ITEM_TEXTURE_REPEAT_MAX = 4

class RenderingServer_CanvasGroupMode(Enum):
    CANVAS_GROUP_MODE_DISABLED = 0
    CANVAS_GROUP_MODE_CLIP_ONLY = 1
    CANVAS_GROUP_MODE_CLIP_AND_DRAW = 2
    CANVAS_GROUP_MODE_TRANSPARENT = 3

class RenderingServer_CanvasLightMode(Enum):
    CANVAS_LIGHT_MODE_POINT = 0
    CANVAS_LIGHT_MODE_DIRECTIONAL = 1

class RenderingServer_CanvasLightBlendMode(Enum):
    CANVAS_LIGHT_BLEND_MODE_ADD = 0
    CANVAS_LIGHT_BLEND_MODE_SUB = 1
    CANVAS_LIGHT_BLEND_MODE_MIX = 2

class RenderingServer_CanvasLightShadowFilter(Enum):
    CANVAS_LIGHT_FILTER_NONE = 0
    CANVAS_LIGHT_FILTER_PCF5 = 1
    CANVAS_LIGHT_FILTER_PCF13 = 2
    CANVAS_LIGHT_FILTER_MAX = 3

class RenderingServer_CanvasOccluderPolygonCullMode(Enum):
    CANVAS_OCCLUDER_POLYGON_CULL_DISABLED = 0
    CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE = 1
    CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE = 2

class RenderingServer_GlobalShaderParameterType(Enum):
    GLOBAL_VAR_TYPE_BOOL = 0
    GLOBAL_VAR_TYPE_BVEC2 = 1
    GLOBAL_VAR_TYPE_BVEC3 = 2
    GLOBAL_VAR_TYPE_BVEC4 = 3
    GLOBAL_VAR_TYPE_INT = 4
    GLOBAL_VAR_TYPE_IVEC2 = 5
    GLOBAL_VAR_TYPE_IVEC3 = 6
    GLOBAL_VAR_TYPE_IVEC4 = 7
    GLOBAL_VAR_TYPE_RECT2I = 8
    GLOBAL_VAR_TYPE_UINT = 9
    GLOBAL_VAR_TYPE_UVEC2 = 10
    GLOBAL_VAR_TYPE_UVEC3 = 11
    GLOBAL_VAR_TYPE_UVEC4 = 12
    GLOBAL_VAR_TYPE_FLOAT = 13
    GLOBAL_VAR_TYPE_VEC2 = 14
    GLOBAL_VAR_TYPE_VEC3 = 15
    GLOBAL_VAR_TYPE_VEC4 = 16
    GLOBAL_VAR_TYPE_COLOR = 17
    GLOBAL_VAR_TYPE_RECT2 = 18
    GLOBAL_VAR_TYPE_MAT2 = 19
    GLOBAL_VAR_TYPE_MAT3 = 20
    GLOBAL_VAR_TYPE_MAT4 = 21
    GLOBAL_VAR_TYPE_TRANSFORM_2D = 22
    GLOBAL_VAR_TYPE_TRANSFORM = 23
    GLOBAL_VAR_TYPE_SAMPLER2D = 24
    GLOBAL_VAR_TYPE_SAMPLER2DARRAY = 25
    GLOBAL_VAR_TYPE_SAMPLER3D = 26
    GLOBAL_VAR_TYPE_SAMPLERCUBE = 27
    GLOBAL_VAR_TYPE_SAMPLEREXT = 28
    GLOBAL_VAR_TYPE_MAX = 29

class RenderingServer_RenderingInfo(Enum):
    RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME = 0
    RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME = 1
    RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME = 2
    RENDERING_INFO_TEXTURE_MEM_USED = 3
    RENDERING_INFO_BUFFER_MEM_USED = 4
    RENDERING_INFO_VIDEO_MEM_USED = 5
    RENDERING_INFO_PIPELINE_COMPILATIONS_CANVAS = 6
    RENDERING_INFO_PIPELINE_COMPILATIONS_MESH = 7
    RENDERING_INFO_PIPELINE_COMPILATIONS_SURFACE = 8
    RENDERING_INFO_PIPELINE_COMPILATIONS_DRAW = 9
    RENDERING_INFO_PIPELINE_COMPILATIONS_SPECIALIZATION = 10

class RenderingServer_PipelineSource(Enum):
    PIPELINE_SOURCE_CANVAS = 0
    PIPELINE_SOURCE_MESH = 1
    PIPELINE_SOURCE_SURFACE = 2
    PIPELINE_SOURCE_DRAW = 3
    PIPELINE_SOURCE_SPECIALIZATION = 4
    PIPELINE_SOURCE_MAX = 5

class RenderingServer_Features(Enum):
    FEATURE_SHADERS = 0
    FEATURE_MULTITHREADED = 1

class Resource(RefCounted):
    resource_local_to_scene: bool
    resource_path: 'String'
    resource_name: 'String'
    resource_scene_unique_id: 'String'
    changed: Signal[Callable[[], None]]  # changed()
    setup_local_to_scene_requested: Signal[Callable[[], None]]  # setup_local_to_scene_requested()
    def _setup_local_to_scene(self) -> None: ...
    def _get_rid(self) -> 'RID': ...
    def _reset_state(self) -> None: ...
    def _set_path_cache(self, path: 'String') -> None: ...
    def set_path(self, path: 'String') -> None: ...
    def take_over_path(self, path: 'String') -> None: ...
    def get_path(self) -> 'String': ...
    def set_path_cache(self, path: 'String') -> None: ...
    def set_name(self, name: 'String') -> None: ...
    def get_name(self) -> 'String': ...
    def get_rid(self) -> 'RID': ...
    def set_local_to_scene(self, enable: bool) -> None: ...
    def is_local_to_scene(self) -> bool: ...
    def get_local_scene(self) -> 'Node': ...
    def setup_local_to_scene(self) -> None: ...
    def reset_state(self) -> None: ...
    def set_id_for_path(self, path: 'String', id: 'String') -> None: ...
    def get_id_for_path(self, path: 'String') -> 'String': ...
    def is_built_in(self) -> bool: ...
    @staticmethod
    def generate_scene_unique_id() -> 'String': ...
    def set_scene_unique_id(self, id: 'String') -> None: ...
    def get_scene_unique_id(self) -> 'String': ...
    def emit_changed(self) -> None: ...
    def duplicate(self, subresources: bool = default('''false''')) -> 'Resource': ...
    
class ResourceFormatLoader(RefCounted):
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _recognize_path(self, path: 'String', type: 'StringName') -> bool: ...
    def _handles_type(self, type: 'StringName') -> bool: ...
    def _get_resource_type(self, path: 'String') -> 'String': ...
    def _get_resource_script_class(self, path: 'String') -> 'String': ...
    def _get_resource_uid(self, path: 'String') -> int: ...
    def _get_dependencies(self, path: 'String', add_types: bool) -> 'PackedStringArray': ...
    def _rename_dependencies(self, path: 'String', renames: 'Dictionary') -> 'Error': ...
    def _exists(self, path: 'String') -> bool: ...
    def _get_classes_used(self, path: 'String') -> 'PackedStringArray': ...
    def _load(self, path: 'String', original_path: 'String', use_sub_threads: bool, cache_mode: int) -> 'Variant': ...
    
class ResourceFormatLoader_CacheMode(Enum):
    CACHE_MODE_IGNORE = 0
    CACHE_MODE_REUSE = 1
    CACHE_MODE_REPLACE = 2
    CACHE_MODE_IGNORE_DEEP = 3
    CACHE_MODE_REPLACE_DEEP = 4

class ResourceFormatSaver(RefCounted):
    def _save(self, resource: 'Resource', path: 'String', flags: int) -> 'Error': ...
    def _set_uid(self, path: 'String', uid: int) -> 'Error': ...
    def _recognize(self, resource: 'Resource') -> bool: ...
    def _get_recognized_extensions(self, resource: 'Resource') -> 'PackedStringArray': ...
    def _recognize_path(self, resource: 'Resource', path: 'String') -> bool: ...
    
class ResourceImporter(RefCounted):
    pass
    
class ResourceImporter_ImportOrder(Enum):
    IMPORT_ORDER_DEFAULT = 0
    IMPORT_ORDER_SCENE = 100

class ResourceImporterBMFont(ResourceImporter):
    pass
    
class ResourceImporterBitMap(ResourceImporter):
    pass
    
class ResourceImporterCSVTranslation(ResourceImporter):
    pass
    
class ResourceImporterDynamicFont(ResourceImporter):
    pass
    
class ResourceImporterImage(ResourceImporter):
    pass
    
class ResourceImporterImageFont(ResourceImporter):
    pass
    
class ResourceImporterLayeredTexture(ResourceImporter):
    pass
    
class ResourceImporterMP3(ResourceImporter):
    pass
    
class ResourceImporterOBJ(ResourceImporter):
    pass
    
class ResourceImporterOggVorbis(ResourceImporter):
    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray') -> 'AudioStreamOggVorbis': ...
    @staticmethod
    def load_from_file(path: 'String') -> 'AudioStreamOggVorbis': ...
    
class ResourceImporterScene(ResourceImporter):
    pass
    
class ResourceImporterShaderFile(ResourceImporter):
    pass
    
class ResourceImporterTexture(ResourceImporter):
    pass
    
class ResourceImporterTextureAtlas(ResourceImporter):
    pass
    
class ResourceImporterWAV(ResourceImporter):
    pass
    
class ResourceLoader(Object):
    def load_threaded_request(self, path: 'String', type_hint: 'String' = default('''""'''), use_sub_threads: bool = default('''false'''), cache_mode: 'ResourceLoader_CacheMode' = default('''1''')) -> 'Error': ...
    def load_threaded_get_status(self, path: 'String', progress: 'Array' = default('''[]''')) -> 'ResourceLoader_ThreadLoadStatus': ...
    def load_threaded_get(self, path: 'String') -> 'Resource': ...
    def load(self, path: 'String', type_hint: 'String' = default('''""'''), cache_mode: 'ResourceLoader_CacheMode' = default('''1''')) -> 'Resource': ...
    def get_recognized_extensions_for_type(self, type: 'String') -> 'PackedStringArray': ...
    def add_resource_format_loader(self, format_loader: 'ResourceFormatLoader', at_front: bool = default('''false''')) -> None: ...
    def remove_resource_format_loader(self, format_loader: 'ResourceFormatLoader') -> None: ...
    def set_abort_on_missing_resources(self, abort: bool) -> None: ...
    def get_dependencies(self, path: 'String') -> 'PackedStringArray': ...
    def has_cached(self, path: 'String') -> bool: ...
    def get_cached_ref(self, path: 'String') -> 'Resource': ...
    def exists(self, path: 'String', type_hint: 'String' = default('''""''')) -> bool: ...
    def get_resource_uid(self, path: 'String') -> int: ...
    def list_directory(self, directory_path: 'String') -> 'PackedStringArray': ...
    
class ResourceLoader_ThreadLoadStatus(Enum):
    THREAD_LOAD_INVALID_RESOURCE = 0
    THREAD_LOAD_IN_PROGRESS = 1
    THREAD_LOAD_FAILED = 2
    THREAD_LOAD_LOADED = 3

class ResourceLoader_CacheMode(Enum):
    CACHE_MODE_IGNORE = 0
    CACHE_MODE_REUSE = 1
    CACHE_MODE_REPLACE = 2
    CACHE_MODE_IGNORE_DEEP = 3
    CACHE_MODE_REPLACE_DEEP = 4

class ResourcePreloader(Node):
    resources: 'Array'
    def add_resource(self, name: 'StringName', resource: 'Resource') -> None: ...
    def remove_resource(self, name: 'StringName') -> None: ...
    def rename_resource(self, name: 'StringName', newname: 'StringName') -> None: ...
    def has_resource(self, name: 'StringName') -> bool: ...
    def get_resource(self, name: 'StringName') -> 'Resource': ...
    def get_resource_list(self) -> 'PackedStringArray': ...
    
class ResourceSaver(Object):
    def save(self, resource: 'Resource', path: 'String' = default('''""'''), flags: 'ResourceSaver_SaverFlags' = default('''0''')) -> 'Error': ...
    def get_recognized_extensions(self, type: 'Resource') -> 'PackedStringArray': ...
    def add_resource_format_saver(self, format_saver: 'ResourceFormatSaver', at_front: bool = default('''false''')) -> None: ...
    def remove_resource_format_saver(self, format_saver: 'ResourceFormatSaver') -> None: ...
    def get_resource_id_for_path(self, path: 'String', generate: bool = default('''false''')) -> int: ...
    
class ResourceSaver_SaverFlags(Enum):
    FLAG_NONE = 0
    FLAG_RELATIVE_PATHS = 1
    FLAG_BUNDLE_RESOURCES = 2
    FLAG_CHANGE_PATH = 4
    FLAG_OMIT_EDITOR_PROPERTIES = 8
    FLAG_SAVE_BIG_ENDIAN = 16
    FLAG_COMPRESS = 32
    FLAG_REPLACE_SUBRESOURCE_PATHS = 64

class ResourceUID(Object):
    INVALID_ID = -1
    
    def id_to_text(self, id: int) -> 'String': ...
    def text_to_id(self, text_id: 'String') -> int: ...
    def create_id(self) -> int: ...
    def has_id(self, id: int) -> bool: ...
    def add_id(self, id: int, path: 'String') -> None: ...
    def set_id(self, id: int, path: 'String') -> None: ...
    def get_id_path(self, id: int) -> 'String': ...
    def remove_id(self, id: int) -> None: ...
    
class RetargetModifier3D(SkeletonModifier3D):
    profile: 'SkeletonProfile'
    use_global_pose: bool
    enable: int
    def set_profile(self, profile: 'SkeletonProfile') -> None: ...
    def get_profile(self) -> 'SkeletonProfile': ...
    def set_use_global_pose(self, use_global_pose: bool) -> None: ...
    def is_using_global_pose(self) -> bool: ...
    def set_enable_flags(self, enable_flags: 'RetargetModifier3D_TransformFlag') -> None: ...
    def get_enable_flags(self) -> 'RetargetModifier3D_TransformFlag': ...
    def set_position_enabled(self, enabled: bool) -> None: ...
    def is_position_enabled(self) -> bool: ...
    def set_rotation_enabled(self, enabled: bool) -> None: ...
    def is_rotation_enabled(self) -> bool: ...
    def set_scale_enabled(self, enabled: bool) -> None: ...
    def is_scale_enabled(self) -> bool: ...
    
class RetargetModifier3D_TransformFlag(Enum):
    TRANSFORM_FLAG_POSITION = 1
    TRANSFORM_FLAG_ROTATION = 2
    TRANSFORM_FLAG_SCALE = 4
    TRANSFORM_FLAG_ALL = 7

class RibbonTrailMesh(PrimitiveMesh):
    shape: int
    size: float
    sections: int
    section_length: float
    section_segments: int
    curve: 'Curve'
    def set_size(self, size: float) -> None: ...
    def get_size(self) -> float: ...
    def set_sections(self, sections: int) -> None: ...
    def get_sections(self) -> int: ...
    def set_section_length(self, section_length: float) -> None: ...
    def get_section_length(self) -> float: ...
    def set_section_segments(self, section_segments: int) -> None: ...
    def get_section_segments(self) -> int: ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    def set_shape(self, shape: 'RibbonTrailMesh_Shape') -> None: ...
    def get_shape(self) -> 'RibbonTrailMesh_Shape': ...
    
class RibbonTrailMesh_Shape(Enum):
    SHAPE_FLAT = 0
    SHAPE_CROSS = 1

class RichTextEffect(Resource):
    def _process_custom_fx(self, char_fx: 'CharFXTransform') -> bool: ...
    
class RichTextLabel(Control):
    bbcode_enabled: bool
    text: 'String'
    fit_content: bool
    scroll_active: bool
    scroll_following: bool
    autowrap_mode: int
    tab_size: int
    context_menu_enabled: bool
    shortcut_keys_enabled: bool
    horizontal_alignment: int
    vertical_alignment: int
    justification_flags: int
    tab_stops: 'PackedFloat32Array'
    custom_effects: 'list[24/17:RichTextEffect]'
    meta_underlined: bool
    hint_underlined: bool
    threaded: bool
    progress_bar_delay: int
    selection_enabled: bool
    deselect_on_focus_loss_enabled: bool
    drag_and_drop_selection_enabled: bool
    visible_characters: int
    visible_characters_behavior: int
    visible_ratio: float
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    meta_clicked: Signal[Callable[['Variant'], None]]  # meta_clicked(meta: 'Variant')
    meta_hover_started: Signal[Callable[['Variant'], None]]  # meta_hover_started(meta: 'Variant')
    meta_hover_ended: Signal[Callable[['Variant'], None]]  # meta_hover_ended(meta: 'Variant')
    finished: Signal[Callable[[], None]]  # finished()
    def get_parsed_text(self) -> 'String': ...
    def add_text(self, text: 'String') -> None: ...
    def set_text(self, text: 'String') -> None: ...
    def add_image(self, image: 'Texture2D', width: int = default('''0'''), height: int = default('''0'''), color: 'Color' = default('''Color(1, 1, 1, 1)'''), inline_align: 'InlineAlignment' = default('''5'''), region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), key: 'Variant' = default('''null'''), pad: bool = default('''false'''), tooltip: 'String' = default('''""'''), size_in_percent: bool = default('''false''')) -> None: ...
    def update_image(self, key: 'Variant', mask: 'RichTextLabel_ImageUpdateMask', image: 'Texture2D', width: int = default('''0'''), height: int = default('''0'''), color: 'Color' = default('''Color(1, 1, 1, 1)'''), inline_align: 'InlineAlignment' = default('''5'''), region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), pad: bool = default('''false'''), tooltip: 'String' = default('''""'''), size_in_percent: bool = default('''false''')) -> None: ...
    def newline(self) -> None: ...
    def remove_paragraph(self, paragraph: int, no_invalidate: bool = default('''false''')) -> bool: ...
    def invalidate_paragraph(self, paragraph: int) -> bool: ...
    def push_font(self, font: 'Font', font_size: int = default('''0''')) -> None: ...
    def push_font_size(self, font_size: int) -> None: ...
    def push_normal(self) -> None: ...
    def push_bold(self) -> None: ...
    def push_bold_italics(self) -> None: ...
    def push_italics(self) -> None: ...
    def push_mono(self) -> None: ...
    def push_color(self, color: 'Color') -> None: ...
    def push_outline_size(self, outline_size: int) -> None: ...
    def push_outline_color(self, color: 'Color') -> None: ...
    def push_paragraph(self, alignment: 'HorizontalAlignment', base_direction: 'Control_TextDirection' = default('''0'''), language: 'String' = default('''""'''), st_parser: 'TextServer_StructuredTextParser' = default('''0'''), justification_flags: 'TextServer_JustificationFlag' = default('''163'''), tab_stops: 'PackedFloat32Array' = default('''PackedFloat32Array()''')) -> None: ...
    def push_indent(self, level: int) -> None: ...
    def push_list(self, level: int, type: 'RichTextLabel_ListType', capitalize: bool, bullet: 'String' = default('''"•"''')) -> None: ...
    def push_meta(self, data: 'Variant', underline_mode: 'RichTextLabel_MetaUnderline' = default('''1'''), tooltip: 'String' = default('''""''')) -> None: ...
    def push_hint(self, description: 'String') -> None: ...
    def push_language(self, language: 'String') -> None: ...
    def push_underline(self) -> None: ...
    def push_strikethrough(self) -> None: ...
    def push_table(self, columns: int, inline_align: 'InlineAlignment' = default('''0'''), align_to_row: int = default('''-1''')) -> None: ...
    def push_dropcap(self, string: 'String', font: 'Font', size: int, dropcap_margins: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), color: 'Color' = default('''Color(1, 1, 1, 1)'''), outline_size: int = default('''0'''), outline_color: 'Color' = default('''Color(0, 0, 0, 0)''')) -> None: ...
    def set_table_column_expand(self, column: int, expand: bool, ratio: int = default('''1'''), shrink: bool = default('''true''')) -> None: ...
    def set_cell_row_background_color(self, odd_row_bg: 'Color', even_row_bg: 'Color') -> None: ...
    def set_cell_border_color(self, color: 'Color') -> None: ...
    def set_cell_size_override(self, min_size: 'Vector2', max_size: 'Vector2') -> None: ...
    def set_cell_padding(self, padding: 'Rect2') -> None: ...
    def push_cell(self) -> None: ...
    def push_fgcolor(self, fgcolor: 'Color') -> None: ...
    def push_bgcolor(self, bgcolor: 'Color') -> None: ...
    def push_customfx(self, effect: 'RichTextEffect', env: 'Dictionary') -> None: ...
    def push_context(self) -> None: ...
    def pop_context(self) -> None: ...
    def pop(self) -> None: ...
    def pop_all(self) -> None: ...
    def clear(self) -> None: ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_justification_flags(self, justification_flags: 'TextServer_JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer_JustificationFlag': ...
    def set_tab_stops(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def get_tab_stops(self) -> 'PackedFloat32Array': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer_AutowrapMode': ...
    def set_meta_underline(self, enable: bool) -> None: ...
    def is_meta_underlined(self) -> bool: ...
    def set_hint_underline(self, enable: bool) -> None: ...
    def is_hint_underlined(self) -> bool: ...
    def set_scroll_active(self, active: bool) -> None: ...
    def is_scroll_active(self) -> bool: ...
    def set_scroll_follow(self, follow: bool) -> None: ...
    def is_scroll_following(self) -> bool: ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def scroll_to_line(self, line: int) -> None: ...
    def scroll_to_paragraph(self, paragraph: int) -> None: ...
    def scroll_to_selection(self) -> None: ...
    def set_tab_size(self, spaces: int) -> None: ...
    def get_tab_size(self) -> int: ...
    def set_fit_content(self, enabled: bool) -> None: ...
    def is_fit_content_enabled(self) -> bool: ...
    def set_selection_enabled(self, enabled: bool) -> None: ...
    def is_selection_enabled(self) -> bool: ...
    def set_context_menu_enabled(self, enabled: bool) -> None: ...
    def is_context_menu_enabled(self) -> bool: ...
    def set_shortcut_keys_enabled(self, enabled: bool) -> None: ...
    def is_shortcut_keys_enabled(self) -> bool: ...
    def set_deselect_on_focus_loss_enabled(self, enable: bool) -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> bool: ...
    def set_drag_and_drop_selection_enabled(self, enable: bool) -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> bool: ...
    def get_selection_from(self) -> int: ...
    def get_selection_to(self) -> int: ...
    def get_selection_line_offset(self) -> float: ...
    def select_all(self) -> None: ...
    def get_selected_text(self) -> 'String': ...
    def deselect(self) -> None: ...
    def parse_bbcode(self, bbcode: 'String') -> None: ...
    def append_text(self, bbcode: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def is_ready(self) -> bool: ...
    def is_finished(self) -> bool: ...
    def set_threaded(self, threaded: bool) -> None: ...
    def is_threaded(self) -> bool: ...
    def set_progress_bar_delay(self, delay_ms: int) -> None: ...
    def get_progress_bar_delay(self) -> int: ...
    def set_visible_characters(self, amount: int) -> None: ...
    def get_visible_characters(self) -> int: ...
    def get_visible_characters_behavior(self) -> 'TextServer_VisibleCharactersBehavior': ...
    def set_visible_characters_behavior(self, behavior: 'TextServer_VisibleCharactersBehavior') -> None: ...
    def set_visible_ratio(self, ratio: float) -> None: ...
    def get_visible_ratio(self) -> float: ...
    def get_character_line(self, character: int) -> int: ...
    def get_character_paragraph(self, character: int) -> int: ...
    def get_total_character_count(self) -> int: ...
    def set_use_bbcode(self, enable: bool) -> None: ...
    def is_using_bbcode(self) -> bool: ...
    def get_line_count(self) -> int: ...
    def get_line_range(self, line: int) -> 'Vector2i': ...
    def get_visible_line_count(self) -> int: ...
    def get_paragraph_count(self) -> int: ...
    def get_visible_paragraph_count(self) -> int: ...
    def get_content_height(self) -> int: ...
    def get_content_width(self) -> int: ...
    def get_line_offset(self, line: int) -> float: ...
    def get_paragraph_offset(self, paragraph: int) -> float: ...
    def parse_expressions_for_values(self, expressions: 'PackedStringArray') -> 'Dictionary': ...
    def set_effects(self, effects: 'Array') -> None: ...
    def get_effects(self) -> 'Array': ...
    def install_effect(self, effect: 'Variant') -> None: ...
    def get_menu(self) -> 'PopupMenu': ...
    def is_menu_visible(self) -> bool: ...
    def menu_option(self, option: int) -> None: ...
    
class RichTextLabel_ListType(Enum):
    LIST_NUMBERS = 0
    LIST_LETTERS = 1
    LIST_ROMAN = 2
    LIST_DOTS = 3

class RichTextLabel_MenuItems(Enum):
    MENU_COPY = 0
    MENU_SELECT_ALL = 1
    MENU_MAX = 2

class RichTextLabel_MetaUnderline(Enum):
    META_UNDERLINE_NEVER = 0
    META_UNDERLINE_ALWAYS = 1
    META_UNDERLINE_ON_HOVER = 2

class RichTextLabel_ImageUpdateMask(Enum):
    UPDATE_TEXTURE = 1
    UPDATE_SIZE = 2
    UPDATE_COLOR = 4
    UPDATE_ALIGNMENT = 8
    UPDATE_REGION = 16
    UPDATE_PAD = 32
    UPDATE_TOOLTIP = 64
    UPDATE_WIDTH_IN_PERCENT = 128

class RigidBody2D(PhysicsBody2D):
    mass: float
    physics_material_override: 'PhysicsMaterial'
    gravity_scale: float
    center_of_mass_mode: int
    center_of_mass: 'Vector2'
    inertia: float
    sleeping: bool
    can_sleep: bool
    lock_rotation: bool
    freeze: bool
    freeze_mode: int
    custom_integrator: bool
    continuous_cd: int
    contact_monitor: bool
    max_contacts_reported: int
    linear_velocity: 'Vector2'
    linear_damp_mode: int
    linear_damp: float
    angular_velocity: float
    angular_damp_mode: int
    angular_damp: float
    constant_force: 'Vector2'
    constant_torque: float
    body_shape_entered: Signal[Callable[['RID', 'Node', 'int', 'int'], None]]  # body_shape_entered(body_rid: 'RID', body: 'Node', body_shape_index: int, local_shape_index: int)
    body_shape_exited: Signal[Callable[['RID', 'Node', 'int', 'int'], None]]  # body_shape_exited(body_rid: 'RID', body: 'Node', body_shape_index: int, local_shape_index: int)
    body_entered: Signal[Callable[['Node'], None]]  # body_entered(body: 'Node')
    body_exited: Signal[Callable[['Node'], None]]  # body_exited(body: 'Node')
    sleeping_state_changed: Signal[Callable[[], None]]  # sleeping_state_changed()
    def _integrate_forces(self, state: 'PhysicsDirectBodyState2D') -> None: ...
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def get_inertia(self) -> float: ...
    def set_inertia(self, inertia: float) -> None: ...
    def set_center_of_mass_mode(self, mode: 'RigidBody2D_CenterOfMassMode') -> None: ...
    def get_center_of_mass_mode(self) -> 'RigidBody2D_CenterOfMassMode': ...
    def set_center_of_mass(self, center_of_mass: 'Vector2') -> None: ...
    def get_center_of_mass(self) -> 'Vector2': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...
    def set_gravity_scale(self, gravity_scale: float) -> None: ...
    def get_gravity_scale(self) -> float: ...
    def set_linear_damp_mode(self, linear_damp_mode: 'RigidBody2D_DampMode') -> None: ...
    def get_linear_damp_mode(self) -> 'RigidBody2D_DampMode': ...
    def set_angular_damp_mode(self, angular_damp_mode: 'RigidBody2D_DampMode') -> None: ...
    def get_angular_damp_mode(self) -> 'RigidBody2D_DampMode': ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_linear_velocity(self, linear_velocity: 'Vector2') -> None: ...
    def get_linear_velocity(self) -> 'Vector2': ...
    def set_angular_velocity(self, angular_velocity: float) -> None: ...
    def get_angular_velocity(self) -> float: ...
    def set_max_contacts_reported(self, amount: int) -> None: ...
    def get_max_contacts_reported(self) -> int: ...
    def get_contact_count(self) -> int: ...
    def set_use_custom_integrator(self, enable: bool) -> None: ...
    def is_using_custom_integrator(self) -> bool: ...
    def set_contact_monitor(self, enabled: bool) -> None: ...
    def is_contact_monitor_enabled(self) -> bool: ...
    def set_continuous_collision_detection_mode(self, mode: 'RigidBody2D_CCDMode') -> None: ...
    def get_continuous_collision_detection_mode(self) -> 'RigidBody2D_CCDMode': ...
    def set_axis_velocity(self, axis_velocity: 'Vector2') -> None: ...
    def apply_central_impulse(self, impulse: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_impulse(self, impulse: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_torque_impulse(self, torque: float) -> None: ...
    def apply_central_force(self, force: 'Vector2') -> None: ...
    def apply_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_torque(self, torque: float) -> None: ...
    def add_constant_central_force(self, force: 'Vector2') -> None: ...
    def add_constant_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: float) -> None: ...
    def set_constant_force(self, force: 'Vector2') -> None: ...
    def get_constant_force(self) -> 'Vector2': ...
    def set_constant_torque(self, torque: float) -> None: ...
    def get_constant_torque(self) -> float: ...
    def set_sleeping(self, sleeping: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def set_can_sleep(self, able_to_sleep: bool) -> None: ...
    def is_able_to_sleep(self) -> bool: ...
    def set_lock_rotation_enabled(self, lock_rotation: bool) -> None: ...
    def is_lock_rotation_enabled(self) -> bool: ...
    def set_freeze_enabled(self, freeze_mode: bool) -> None: ...
    def is_freeze_enabled(self) -> bool: ...
    def set_freeze_mode(self, freeze_mode: 'RigidBody2D_FreezeMode') -> None: ...
    def get_freeze_mode(self) -> 'RigidBody2D_FreezeMode': ...
    def get_colliding_bodies(self) -> 'list[Node2D]': ...
    
class RigidBody2D_FreezeMode(Enum):
    FREEZE_MODE_STATIC = 0
    FREEZE_MODE_KINEMATIC = 1

class RigidBody2D_CenterOfMassMode(Enum):
    CENTER_OF_MASS_MODE_AUTO = 0
    CENTER_OF_MASS_MODE_CUSTOM = 1

class RigidBody2D_DampMode(Enum):
    DAMP_MODE_COMBINE = 0
    DAMP_MODE_REPLACE = 1

class RigidBody2D_CCDMode(Enum):
    CCD_MODE_DISABLED = 0
    CCD_MODE_CAST_RAY = 1
    CCD_MODE_CAST_SHAPE = 2

class RigidBody3D(PhysicsBody3D):
    mass: float
    physics_material_override: 'PhysicsMaterial'
    gravity_scale: float
    center_of_mass_mode: int
    center_of_mass: 'Vector3'
    inertia: 'Vector3'
    sleeping: bool
    can_sleep: bool
    lock_rotation: bool
    freeze: bool
    freeze_mode: int
    custom_integrator: bool
    continuous_cd: bool
    contact_monitor: bool
    max_contacts_reported: int
    linear_velocity: 'Vector3'
    linear_damp_mode: int
    linear_damp: float
    angular_velocity: 'Vector3'
    angular_damp_mode: int
    angular_damp: float
    constant_force: 'Vector3'
    constant_torque: 'Vector3'
    body_shape_entered: Signal[Callable[['RID', 'Node', 'int', 'int'], None]]  # body_shape_entered(body_rid: 'RID', body: 'Node', body_shape_index: int, local_shape_index: int)
    body_shape_exited: Signal[Callable[['RID', 'Node', 'int', 'int'], None]]  # body_shape_exited(body_rid: 'RID', body: 'Node', body_shape_index: int, local_shape_index: int)
    body_entered: Signal[Callable[['Node'], None]]  # body_entered(body: 'Node')
    body_exited: Signal[Callable[['Node'], None]]  # body_exited(body: 'Node')
    sleeping_state_changed: Signal[Callable[[], None]]  # sleeping_state_changed()
    def _integrate_forces(self, state: 'PhysicsDirectBodyState3D') -> None: ...
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_inertia(self, inertia: 'Vector3') -> None: ...
    def get_inertia(self) -> 'Vector3': ...
    def set_center_of_mass_mode(self, mode: 'RigidBody3D_CenterOfMassMode') -> None: ...
    def get_center_of_mass_mode(self) -> 'RigidBody3D_CenterOfMassMode': ...
    def set_center_of_mass(self, center_of_mass: 'Vector3') -> None: ...
    def get_center_of_mass(self) -> 'Vector3': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...
    def set_linear_velocity(self, linear_velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, angular_velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def get_inverse_inertia_tensor(self) -> 'Basis': ...
    def set_gravity_scale(self, gravity_scale: float) -> None: ...
    def get_gravity_scale(self) -> float: ...
    def set_linear_damp_mode(self, linear_damp_mode: 'RigidBody3D_DampMode') -> None: ...
    def get_linear_damp_mode(self) -> 'RigidBody3D_DampMode': ...
    def set_angular_damp_mode(self, angular_damp_mode: 'RigidBody3D_DampMode') -> None: ...
    def get_angular_damp_mode(self) -> 'RigidBody3D_DampMode': ...
    def set_linear_damp(self, linear_damp: float) -> None: ...
    def get_linear_damp(self) -> float: ...
    def set_angular_damp(self, angular_damp: float) -> None: ...
    def get_angular_damp(self) -> float: ...
    def set_max_contacts_reported(self, amount: int) -> None: ...
    def get_max_contacts_reported(self) -> int: ...
    def get_contact_count(self) -> int: ...
    def set_use_custom_integrator(self, enable: bool) -> None: ...
    def is_using_custom_integrator(self) -> bool: ...
    def set_contact_monitor(self, enabled: bool) -> None: ...
    def is_contact_monitor_enabled(self) -> bool: ...
    def set_use_continuous_collision_detection(self, enable: bool) -> None: ...
    def is_using_continuous_collision_detection(self) -> bool: ...
    def set_axis_velocity(self, axis_velocity: 'Vector3') -> None: ...
    def apply_central_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_impulse(self, impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_central_force(self, force: 'Vector3') -> None: ...
    def apply_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque(self, torque: 'Vector3') -> None: ...
    def add_constant_central_force(self, force: 'Vector3') -> None: ...
    def add_constant_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: 'Vector3') -> None: ...
    def set_constant_force(self, force: 'Vector3') -> None: ...
    def get_constant_force(self) -> 'Vector3': ...
    def set_constant_torque(self, torque: 'Vector3') -> None: ...
    def get_constant_torque(self) -> 'Vector3': ...
    def set_sleeping(self, sleeping: bool) -> None: ...
    def is_sleeping(self) -> bool: ...
    def set_can_sleep(self, able_to_sleep: bool) -> None: ...
    def is_able_to_sleep(self) -> bool: ...
    def set_lock_rotation_enabled(self, lock_rotation: bool) -> None: ...
    def is_lock_rotation_enabled(self) -> bool: ...
    def set_freeze_enabled(self, freeze_mode: bool) -> None: ...
    def is_freeze_enabled(self) -> bool: ...
    def set_freeze_mode(self, freeze_mode: 'RigidBody3D_FreezeMode') -> None: ...
    def get_freeze_mode(self) -> 'RigidBody3D_FreezeMode': ...
    def get_colliding_bodies(self) -> 'list[Node3D]': ...
    
class RigidBody3D_FreezeMode(Enum):
    FREEZE_MODE_STATIC = 0
    FREEZE_MODE_KINEMATIC = 1

class RigidBody3D_CenterOfMassMode(Enum):
    CENTER_OF_MASS_MODE_AUTO = 0
    CENTER_OF_MASS_MODE_CUSTOM = 1

class RigidBody3D_DampMode(Enum):
    DAMP_MODE_COMBINE = 0
    DAMP_MODE_REPLACE = 1

class RootMotionView(VisualInstance3D):
    animation_path: 'NodePath'
    color: 'Color'
    cell_size: float
    radius: float
    zero_y: bool
    def set_animation_path(self, path: 'NodePath') -> None: ...
    def get_animation_path(self) -> 'NodePath': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_cell_size(self, size: float) -> None: ...
    def get_cell_size(self) -> float: ...
    def set_radius(self, size: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_zero_y(self, enable: bool) -> None: ...
    def get_zero_y(self) -> bool: ...
    
class SceneMultiplayer(MultiplayerAPI):
    root_path: 'NodePath'
    auth_callback: 'Callable'
    auth_timeout: float
    allow_object_decoding: bool
    refuse_new_connections: bool
    server_relay: bool
    max_sync_packet_size: int
    max_delta_packet_size: int
    peer_authenticating: Signal[Callable[['int'], None]]  # peer_authenticating(id: int)
    peer_authentication_failed: Signal[Callable[['int'], None]]  # peer_authentication_failed(id: int)
    peer_packet: Signal[Callable[['int', 'PackedByteArray'], None]]  # peer_packet(id: int, packet: 'PackedByteArray')
    def set_root_path(self, path: 'NodePath') -> None: ...
    def get_root_path(self) -> 'NodePath': ...
    def clear(self) -> None: ...
    def disconnect_peer(self, id: int) -> None: ...
    def get_authenticating_peers(self) -> 'PackedInt32Array': ...
    def send_auth(self, id: int, data: 'PackedByteArray') -> 'Error': ...
    def complete_auth(self, id: int) -> 'Error': ...
    def set_auth_callback(self, callback: 'Callable') -> None: ...
    def get_auth_callback(self) -> 'Callable': ...
    def set_auth_timeout(self, timeout: float) -> None: ...
    def get_auth_timeout(self) -> float: ...
    def set_refuse_new_connections(self, refuse: bool) -> None: ...
    def is_refusing_new_connections(self) -> bool: ...
    def set_allow_object_decoding(self, enable: bool) -> None: ...
    def is_object_decoding_allowed(self) -> bool: ...
    def set_server_relay_enabled(self, enabled: bool) -> None: ...
    def is_server_relay_enabled(self) -> bool: ...
    def send_bytes(self, bytes: 'PackedByteArray', id: int = default('''0'''), mode: 'MultiplayerPeer_TransferMode' = default('''2'''), channel: int = default('''0''')) -> 'Error': ...
    def get_max_sync_packet_size(self) -> int: ...
    def set_max_sync_packet_size(self, size: int) -> None: ...
    def get_max_delta_packet_size(self) -> int: ...
    def set_max_delta_packet_size(self, size: int) -> None: ...
    
class SceneReplicationConfig(Resource):
    def get_properties(self) -> 'list[NodePath]': ...
    def add_property(self, path: 'NodePath', index: int = default('''-1''')) -> None: ...
    def has_property(self, path: 'NodePath') -> bool: ...
    def remove_property(self, path: 'NodePath') -> None: ...
    def property_get_index(self, path: 'NodePath') -> int: ...
    def property_get_spawn(self, path: 'NodePath') -> bool: ...
    def property_set_spawn(self, path: 'NodePath', enabled: bool) -> None: ...
    def property_get_replication_mode(self, path: 'NodePath') -> 'SceneReplicationConfig_ReplicationMode': ...
    def property_set_replication_mode(self, path: 'NodePath', mode: 'SceneReplicationConfig_ReplicationMode') -> None: ...
    def property_get_sync(self, path: 'NodePath') -> bool: ...
    def property_set_sync(self, path: 'NodePath', enabled: bool) -> None: ...
    def property_get_watch(self, path: 'NodePath') -> bool: ...
    def property_set_watch(self, path: 'NodePath', enabled: bool) -> None: ...
    
class SceneReplicationConfig_ReplicationMode(Enum):
    REPLICATION_MODE_NEVER = 0
    REPLICATION_MODE_ALWAYS = 1
    REPLICATION_MODE_ON_CHANGE = 2

class SceneState(RefCounted):
    def get_node_count(self) -> int: ...
    def get_node_type(self, idx: int) -> 'StringName': ...
    def get_node_name(self, idx: int) -> 'StringName': ...
    def get_node_path(self, idx: int, for_parent: bool = default('''false''')) -> 'NodePath': ...
    def get_node_owner_path(self, idx: int) -> 'NodePath': ...
    def is_node_instance_placeholder(self, idx: int) -> bool: ...
    def get_node_instance_placeholder(self, idx: int) -> 'String': ...
    def get_node_instance(self, idx: int) -> 'PackedScene': ...
    def get_node_groups(self, idx: int) -> 'PackedStringArray': ...
    def get_node_index(self, idx: int) -> int: ...
    def get_node_property_count(self, idx: int) -> int: ...
    def get_node_property_name(self, idx: int, prop_idx: int) -> 'StringName': ...
    def get_node_property_value(self, idx: int, prop_idx: int) -> 'Variant': ...
    def get_connection_count(self) -> int: ...
    def get_connection_source(self, idx: int) -> 'NodePath': ...
    def get_connection_signal(self, idx: int) -> 'StringName': ...
    def get_connection_target(self, idx: int) -> 'NodePath': ...
    def get_connection_method(self, idx: int) -> 'StringName': ...
    def get_connection_flags(self, idx: int) -> int: ...
    def get_connection_binds(self, idx: int) -> 'Array': ...
    def get_connection_unbinds(self, idx: int) -> int: ...
    
class SceneState_GenEditState(Enum):
    GEN_EDIT_STATE_DISABLED = 0
    GEN_EDIT_STATE_INSTANCE = 1
    GEN_EDIT_STATE_MAIN = 2
    GEN_EDIT_STATE_MAIN_INHERITED = 3

class SceneTree(MainLoop):
    auto_accept_quit: bool
    quit_on_go_back: bool
    debug_collisions_hint: bool
    debug_paths_hint: bool
    debug_navigation_hint: bool
    paused: bool
    edited_scene_root: 'Node'
    current_scene: 'Node'
    root: 'Node'
    multiplayer_poll: bool
    physics_interpolation: bool
    tree_changed: Signal[Callable[[], None]]  # tree_changed()
    tree_process_mode_changed: Signal[Callable[[], None]]  # tree_process_mode_changed()
    node_added: Signal[Callable[['Node'], None]]  # node_added(node: 'Node')
    node_removed: Signal[Callable[['Node'], None]]  # node_removed(node: 'Node')
    node_renamed: Signal[Callable[['Node'], None]]  # node_renamed(node: 'Node')
    node_configuration_warning_changed: Signal[Callable[['Node'], None]]  # node_configuration_warning_changed(node: 'Node')
    process_frame: Signal[Callable[[], None]]  # process_frame()
    physics_frame: Signal[Callable[[], None]]  # physics_frame()
    def get_root(self) -> 'Window': ...
    def has_group(self, name: 'StringName') -> bool: ...
    def is_auto_accept_quit(self) -> bool: ...
    def set_auto_accept_quit(self, enabled: bool) -> None: ...
    def is_quit_on_go_back(self) -> bool: ...
    def set_quit_on_go_back(self, enabled: bool) -> None: ...
    def set_debug_collisions_hint(self, enable: bool) -> None: ...
    def is_debugging_collisions_hint(self) -> bool: ...
    def set_debug_paths_hint(self, enable: bool) -> None: ...
    def is_debugging_paths_hint(self) -> bool: ...
    def set_debug_navigation_hint(self, enable: bool) -> None: ...
    def is_debugging_navigation_hint(self) -> bool: ...
    def set_edited_scene_root(self, scene: 'Node') -> None: ...
    def get_edited_scene_root(self) -> 'Node': ...
    def set_pause(self, enable: bool) -> None: ...
    def is_paused(self) -> bool: ...
    def create_timer(self, time_sec: float, process_always: bool = default('''true'''), process_in_physics: bool = default('''false'''), ignore_time_scale: bool = default('''false''')) -> 'SceneTreeTimer': ...
    def create_tween(self) -> 'Tween': ...
    def get_processed_tweens(self) -> 'list[Tween]': ...
    def get_node_count(self) -> int: ...
    def get_frame(self) -> int: ...
    def quit(self, exit_code: int = default('''0''')) -> None: ...
    def set_physics_interpolation_enabled(self, enabled: bool) -> None: ...
    def is_physics_interpolation_enabled(self) -> bool: ...
    def queue_delete(self, obj: 'Object') -> None: ...
    def call_group_flags(self, flags: int, group: 'StringName', method: 'StringName', *arg) -> None: ...
    def notify_group_flags(self, call_flags: int, group: 'StringName', notification: int) -> None: ...
    def set_group_flags(self, call_flags: int, group: 'StringName', property: 'String', value: 'Variant') -> None: ...
    def call_group(self, group: 'StringName', method: 'StringName', *arg) -> None: ...
    def notify_group(self, group: 'StringName', notification: int) -> None: ...
    def set_group(self, group: 'StringName', property: 'String', value: 'Variant') -> None: ...
    def get_nodes_in_group(self, group: 'StringName') -> 'list[Node]': ...
    def get_first_node_in_group(self, group: 'StringName') -> 'Node': ...
    def get_node_count_in_group(self, group: 'StringName') -> int: ...
    def set_current_scene(self, child_node: 'Node') -> None: ...
    def get_current_scene(self) -> 'Node': ...
    def change_scene_to_file(self, path: 'String') -> 'Error': ...
    def change_scene_to_packed(self, packed_scene: 'PackedScene') -> 'Error': ...
    def reload_current_scene(self) -> 'Error': ...
    def unload_current_scene(self) -> None: ...
    def set_multiplayer(self, multiplayer: 'MultiplayerAPI', root_path: 'NodePath' = default('''NodePath("")''')) -> None: ...
    def get_multiplayer(self, for_path: 'NodePath' = default('''NodePath("")''')) -> 'MultiplayerAPI': ...
    def set_multiplayer_poll_enabled(self, enabled: bool) -> None: ...
    def is_multiplayer_poll_enabled(self) -> bool: ...
    
class SceneTree_GroupCallFlags(Enum):
    GROUP_CALL_DEFAULT = 0
    GROUP_CALL_REVERSE = 1
    GROUP_CALL_DEFERRED = 2
    GROUP_CALL_UNIQUE = 4

class SceneTreeTimer(RefCounted):
    time_left: float
    timeout: Signal[Callable[[], None]]  # timeout()
    def set_time_left(self, time: float) -> None: ...
    def get_time_left(self) -> float: ...
    
class Script(Resource):
    source_code: 'String'
    def can_instantiate(self) -> bool: ...
    def instance_has(self, base_object: 'Object') -> bool: ...
    def has_source_code(self) -> bool: ...
    def get_source_code(self) -> 'String': ...
    def set_source_code(self, source: 'String') -> None: ...
    def reload(self, keep_state: bool = default('''false''')) -> 'Error': ...
    def get_base_script(self) -> 'Script': ...
    def get_instance_base_type(self) -> 'StringName': ...
    def get_global_name(self) -> 'StringName': ...
    def has_script_signal(self, signal_name: 'StringName') -> bool: ...
    def get_script_property_list(self) -> 'list[Dictionary]': ...
    def get_script_method_list(self) -> 'list[Dictionary]': ...
    def get_script_signal_list(self) -> 'list[Dictionary]': ...
    def get_script_constant_map(self) -> 'Dictionary': ...
    def get_property_default_value(self, property: 'StringName') -> 'Variant': ...
    def is_tool(self) -> bool: ...
    def is_abstract(self) -> bool: ...
    def get_rpc_config(self) -> 'Variant': ...
    
class ScriptCreateDialog(ConfirmationDialog):
    script_created: Signal[Callable[['Script'], None]]  # script_created(script: 'Script')
    def config(self, inherits: 'String', path: 'String', built_in_enabled: bool = default('''true'''), load_enabled: bool = default('''true''')) -> None: ...
    
class ScriptEditor(PanelContainer):
    editor_script_changed: Signal[Callable[['Script'], None]]  # editor_script_changed(script: 'Script')
    script_close: Signal[Callable[['Script'], None]]  # script_close(script: 'Script')
    def get_current_editor(self) -> 'ScriptEditorBase': ...
    def get_open_script_editors(self) -> 'list[ScriptEditorBase]': ...
    def get_breakpoints(self) -> 'PackedStringArray': ...
    def register_syntax_highlighter(self, syntax_highlighter: 'EditorSyntaxHighlighter') -> None: ...
    def unregister_syntax_highlighter(self, syntax_highlighter: 'EditorSyntaxHighlighter') -> None: ...
    def goto_line(self, line_number: int) -> None: ...
    def get_current_script(self) -> 'Script': ...
    def get_open_scripts(self) -> 'list[Script]': ...
    def open_script_create_dialog(self, base_name: 'String', base_path: 'String') -> None: ...
    def goto_help(self, topic: 'String') -> None: ...
    def update_docs_from_script(self, script: 'Script') -> None: ...
    
class ScriptEditorBase(VBoxContainer):
    name_changed: Signal[Callable[[], None]]  # name_changed()
    edited_script_changed: Signal[Callable[[], None]]  # edited_script_changed()
    request_help: Signal[Callable[['String'], None]]  # request_help(topic: 'String')
    request_open_script_at_line: Signal[Callable[['Object', 'int'], None]]  # request_open_script_at_line(script: 'Object', line: int)
    request_save_history: Signal[Callable[[], None]]  # request_save_history()
    request_save_previous_state: Signal[Callable[['Dictionary'], None]]  # request_save_previous_state(state: 'Dictionary')
    go_to_help: Signal[Callable[['String'], None]]  # go_to_help(what: 'String')
    search_in_files_requested: Signal[Callable[['String'], None]]  # search_in_files_requested(text: 'String')
    replace_in_files_requested: Signal[Callable[['String'], None]]  # replace_in_files_requested(text: 'String')
    go_to_method: Signal[Callable[['Object', 'String'], None]]  # go_to_method(script: 'Object', method: 'String')
    def get_base_editor(self) -> 'Control': ...
    def add_syntax_highlighter(self, highlighter: 'EditorSyntaxHighlighter') -> None: ...
    
class ScriptExtension(Script):
    def _editor_can_reload_from_file(self) -> bool: ...
    def _placeholder_erased(self, placeholder: 'intptr') -> None: ...
    def _can_instantiate(self) -> bool: ...
    def _get_base_script(self) -> 'Script': ...
    def _get_global_name(self) -> 'StringName': ...
    def _inherits_script(self, script: 'Script') -> bool: ...
    def _get_instance_base_type(self) -> 'StringName': ...
    def _instance_create(self, for_object: 'Object') -> 'intptr': ...
    def _placeholder_instance_create(self, for_object: 'Object') -> 'intptr': ...
    def _instance_has(self, object: 'Object') -> bool: ...
    def _has_source_code(self) -> bool: ...
    def _get_source_code(self) -> 'String': ...
    def _set_source_code(self, code: 'String') -> None: ...
    def _reload(self, keep_state: bool) -> 'Error': ...
    def _get_doc_class_name(self) -> 'StringName': ...
    def _get_documentation(self) -> 'list[Dictionary]': ...
    def _get_class_icon_path(self) -> 'String': ...
    def _has_method(self, method: 'StringName') -> bool: ...
    def _has_static_method(self, method: 'StringName') -> bool: ...
    def _get_script_method_argument_count(self, method: 'StringName') -> 'Variant': ...
    def _get_method_info(self, method: 'StringName') -> 'Dictionary': ...
    def _is_tool(self) -> bool: ...
    def _is_valid(self) -> bool: ...
    def _is_abstract(self) -> bool: ...
    def _get_language(self) -> 'ScriptLanguage': ...
    def _has_script_signal(self, signal: 'StringName') -> bool: ...
    def _get_script_signal_list(self) -> 'list[Dictionary]': ...
    def _has_property_default_value(self, property: 'StringName') -> bool: ...
    def _get_property_default_value(self, property: 'StringName') -> 'Variant': ...
    def _update_exports(self) -> None: ...
    def _get_script_method_list(self) -> 'list[Dictionary]': ...
    def _get_script_property_list(self) -> 'list[Dictionary]': ...
    def _get_member_line(self, member: 'StringName') -> int: ...
    def _get_constants(self) -> 'Dictionary': ...
    def _get_members(self) -> 'list[StringName]': ...
    def _is_placeholder_fallback_enabled(self) -> bool: ...
    def _get_rpc_config(self) -> 'Variant': ...
    
class ScriptLanguage(Object):
    pass
    
class ScriptLanguage_ScriptNameCasing(Enum):
    SCRIPT_NAME_CASING_AUTO = 0
    SCRIPT_NAME_CASING_PASCAL_CASE = 1
    SCRIPT_NAME_CASING_SNAKE_CASE = 2
    SCRIPT_NAME_CASING_KEBAB_CASE = 3

class ScriptLanguageExtension(ScriptLanguage):
    def _get_name(self) -> 'String': ...
    def _init(self) -> None: ...
    def _get_type(self) -> 'String': ...
    def _get_extension(self) -> 'String': ...
    def _finish(self) -> None: ...
    def _get_reserved_words(self) -> 'PackedStringArray': ...
    def _is_control_flow_keyword(self, keyword: 'String') -> bool: ...
    def _get_comment_delimiters(self) -> 'PackedStringArray': ...
    def _get_doc_comment_delimiters(self) -> 'PackedStringArray': ...
    def _get_string_delimiters(self) -> 'PackedStringArray': ...
    def _make_template(self, template: 'String', class_name: 'String', base_class_name: 'String') -> 'Script': ...
    def _get_built_in_templates(self, object: 'StringName') -> 'list[Dictionary]': ...
    def _is_using_templates(self) -> bool: ...
    def _validate(self, script: 'String', path: 'String', validate_functions: bool, validate_errors: bool, validate_warnings: bool, validate_safe_lines: bool) -> 'Dictionary': ...
    def _validate_path(self, path: 'String') -> 'String': ...
    def _create_script(self) -> 'Object': ...
    def _has_named_classes(self) -> bool: ...
    def _supports_builtin_mode(self) -> bool: ...
    def _supports_documentation(self) -> bool: ...
    def _can_inherit_from_file(self) -> bool: ...
    def _find_function(self, function: 'String', code: 'String') -> int: ...
    def _make_function(self, class_name: 'String', function_name: 'String', function_args: 'PackedStringArray') -> 'String': ...
    def _can_make_function(self) -> bool: ...
    def _open_in_external_editor(self, script: 'Script', line: int, column: int) -> 'Error': ...
    def _overrides_external_editor(self) -> bool: ...
    def _preferred_file_name_casing(self) -> 'ScriptLanguage_ScriptNameCasing': ...
    def _complete_code(self, code: 'String', path: 'String', owner: 'Object') -> 'Dictionary': ...
    def _lookup_code(self, code: 'String', symbol: 'String', path: 'String', owner: 'Object') -> 'Dictionary': ...
    def _auto_indent_code(self, code: 'String', from_line: int, to_line: int) -> 'String': ...
    def _add_global_constant(self, name: 'StringName', value: 'Variant') -> None: ...
    def _add_named_global_constant(self, name: 'StringName', value: 'Variant') -> None: ...
    def _remove_named_global_constant(self, name: 'StringName') -> None: ...
    def _thread_enter(self) -> None: ...
    def _thread_exit(self) -> None: ...
    def _debug_get_error(self) -> 'String': ...
    def _debug_get_stack_level_count(self) -> int: ...
    def _debug_get_stack_level_line(self, level: int) -> int: ...
    def _debug_get_stack_level_function(self, level: int) -> 'String': ...
    def _debug_get_stack_level_source(self, level: int) -> 'String': ...
    def _debug_get_stack_level_locals(self, level: int, max_subitems: int, max_depth: int) -> 'Dictionary': ...
    def _debug_get_stack_level_members(self, level: int, max_subitems: int, max_depth: int) -> 'Dictionary': ...
    def _debug_get_stack_level_instance(self, level: int) -> 'intptr': ...
    def _debug_get_globals(self, max_subitems: int, max_depth: int) -> 'Dictionary': ...
    def _debug_parse_stack_level_expression(self, level: int, expression: 'String', max_subitems: int, max_depth: int) -> 'String': ...
    def _debug_get_current_stack_info(self) -> 'list[Dictionary]': ...
    def _reload_all_scripts(self) -> None: ...
    def _reload_scripts(self, scripts: 'Array', soft_reload: bool) -> None: ...
    def _reload_tool_script(self, script: 'Script', soft_reload: bool) -> None: ...
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _get_public_functions(self) -> 'list[Dictionary]': ...
    def _get_public_constants(self) -> 'Dictionary': ...
    def _get_public_annotations(self) -> 'list[Dictionary]': ...
    def _profiling_start(self) -> None: ...
    def _profiling_stop(self) -> None: ...
    def _profiling_set_save_native_calls(self, enable: bool) -> None: ...
    def _profiling_get_accumulated_data(self, info_array: 'intptr', info_max: int) -> int: ...
    def _profiling_get_frame_data(self, info_array: 'intptr', info_max: int) -> int: ...
    def _frame(self) -> None: ...
    def _handles_global_class_type(self, type: 'String') -> bool: ...
    def _get_global_class_name(self, path: 'String') -> 'Dictionary': ...
    
class ScriptLanguageExtension_LookupResultType(Enum):
    LOOKUP_RESULT_SCRIPT_LOCATION = 0
    LOOKUP_RESULT_CLASS = 1
    LOOKUP_RESULT_CLASS_CONSTANT = 2
    LOOKUP_RESULT_CLASS_PROPERTY = 3
    LOOKUP_RESULT_CLASS_METHOD = 4
    LOOKUP_RESULT_CLASS_SIGNAL = 5
    LOOKUP_RESULT_CLASS_ENUM = 6
    LOOKUP_RESULT_CLASS_TBD_GLOBALSCOPE = 7
    LOOKUP_RESULT_CLASS_ANNOTATION = 8
    LOOKUP_RESULT_LOCAL_CONSTANT = 9
    LOOKUP_RESULT_LOCAL_VARIABLE = 10
    LOOKUP_RESULT_MAX = 11

class ScriptLanguageExtension_CodeCompletionLocation(Enum):
    LOCATION_LOCAL = 0
    LOCATION_PARENT_MASK = 256
    LOCATION_OTHER_USER_CODE = 512
    LOCATION_OTHER = 1024

class ScriptLanguageExtension_CodeCompletionKind(Enum):
    CODE_COMPLETION_KIND_CLASS = 0
    CODE_COMPLETION_KIND_FUNCTION = 1
    CODE_COMPLETION_KIND_SIGNAL = 2
    CODE_COMPLETION_KIND_VARIABLE = 3
    CODE_COMPLETION_KIND_MEMBER = 4
    CODE_COMPLETION_KIND_ENUM = 5
    CODE_COMPLETION_KIND_CONSTANT = 6
    CODE_COMPLETION_KIND_NODE_PATH = 7
    CODE_COMPLETION_KIND_FILE_PATH = 8
    CODE_COMPLETION_KIND_PLAIN_TEXT = 9
    CODE_COMPLETION_KIND_MAX = 10

class ScrollBar(Range):
    custom_step: float
    scrolling: Signal[Callable[[], None]]  # scrolling()
    def set_custom_step(self, step: float) -> None: ...
    def get_custom_step(self) -> float: ...
    
class ScrollContainer(Container):
    follow_focus: bool
    draw_focus_border: bool
    scroll_horizontal: int
    scroll_vertical: int
    scroll_horizontal_custom_step: float
    scroll_vertical_custom_step: float
    horizontal_scroll_mode: int
    vertical_scroll_mode: int
    scroll_deadzone: int
    scroll_started: Signal[Callable[[], None]]  # scroll_started()
    scroll_ended: Signal[Callable[[], None]]  # scroll_ended()
    def set_h_scroll(self, value: int) -> None: ...
    def get_h_scroll(self) -> int: ...
    def set_v_scroll(self, value: int) -> None: ...
    def get_v_scroll(self) -> int: ...
    def set_horizontal_custom_step(self, value: float) -> None: ...
    def get_horizontal_custom_step(self) -> float: ...
    def set_vertical_custom_step(self, value: float) -> None: ...
    def get_vertical_custom_step(self) -> float: ...
    def set_horizontal_scroll_mode(self, enable: 'ScrollContainer_ScrollMode') -> None: ...
    def get_horizontal_scroll_mode(self) -> 'ScrollContainer_ScrollMode': ...
    def set_vertical_scroll_mode(self, enable: 'ScrollContainer_ScrollMode') -> None: ...
    def get_vertical_scroll_mode(self) -> 'ScrollContainer_ScrollMode': ...
    def set_deadzone(self, deadzone: int) -> None: ...
    def get_deadzone(self) -> int: ...
    def set_follow_focus(self, enabled: bool) -> None: ...
    def is_following_focus(self) -> bool: ...
    def get_h_scroll_bar(self) -> 'HScrollBar': ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def ensure_control_visible(self, control: 'Control') -> None: ...
    def set_draw_focus_border(self, draw: bool) -> None: ...
    def get_draw_focus_border(self) -> bool: ...
    
class ScrollContainer_ScrollMode(Enum):
    SCROLL_MODE_DISABLED = 0
    SCROLL_MODE_AUTO = 1
    SCROLL_MODE_SHOW_ALWAYS = 2
    SCROLL_MODE_SHOW_NEVER = 3
    SCROLL_MODE_RESERVE = 4

class SegmentShape2D(Shape2D):
    a: 'Vector2'
    b: 'Vector2'
    def set_a(self, a: 'Vector2') -> None: ...
    def get_a(self) -> 'Vector2': ...
    def set_b(self, b: 'Vector2') -> None: ...
    def get_b(self) -> 'Vector2': ...
    
class Semaphore(RefCounted):
    def wait(self) -> None: ...
    def try_wait(self) -> bool: ...
    def post(self, count: int = default('''1''')) -> None: ...
    
class SeparationRayShape2D(Shape2D):
    length: float
    slide_on_slope: bool
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_slide_on_slope(self, active: bool) -> None: ...
    def get_slide_on_slope(self) -> bool: ...
    
class SeparationRayShape3D(Shape3D):
    length: float
    slide_on_slope: bool
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_slide_on_slope(self, active: bool) -> None: ...
    def get_slide_on_slope(self) -> bool: ...
    
class Separator(Control):
    pass
    
class Shader(Resource):
    code: 'String'
    def get_mode(self) -> 'Shader_Mode': ...
    def set_code(self, code: 'String') -> None: ...
    def get_code(self) -> 'String': ...
    def set_default_texture_parameter(self, name: 'StringName', texture: 'Texture', index: int = default('''0''')) -> None: ...
    def get_default_texture_parameter(self, name: 'StringName', index: int = default('''0''')) -> 'Texture': ...
    def get_shader_uniform_list(self, get_groups: bool = default('''false''')) -> 'Array': ...
    def inspect_native_shader_code(self) -> None: ...
    
class Shader_Mode(Enum):
    MODE_SPATIAL = 0
    MODE_CANVAS_ITEM = 1
    MODE_PARTICLES = 2
    MODE_SKY = 3
    MODE_FOG = 4

class ShaderGlobalsOverride(Node):
    pass
    
class ShaderInclude(Resource):
    code: 'String'
    def set_code(self, code: 'String') -> None: ...
    def get_code(self) -> 'String': ...
    
class ShaderIncludeDB(Object):
    @staticmethod
    def list_built_in_include_files() -> 'PackedStringArray': ...
    @staticmethod
    def has_built_in_include_file(filename: 'String') -> bool: ...
    @staticmethod
    def get_built_in_include_file(filename: 'String') -> 'String': ...
    
class ShaderMaterial(Material):
    shader: 'Shader'
    def set_shader(self, shader: 'Shader') -> None: ...
    def get_shader(self) -> 'Shader': ...
    def set_shader_parameter(self, param: 'StringName', value: 'Variant') -> None: ...
    def get_shader_parameter(self, param: 'StringName') -> 'Variant': ...
    
class Shape2D(Resource):
    custom_solver_bias: float
    def set_custom_solver_bias(self, bias: float) -> None: ...
    def get_custom_solver_bias(self) -> float: ...
    def collide(self, local_xform: 'Transform2D', with_shape: 'Shape2D', shape_xform: 'Transform2D') -> bool: ...
    def collide_with_motion(self, local_xform: 'Transform2D', local_motion: 'Vector2', with_shape: 'Shape2D', shape_xform: 'Transform2D', shape_motion: 'Vector2') -> bool: ...
    def collide_and_get_contacts(self, local_xform: 'Transform2D', with_shape: 'Shape2D', shape_xform: 'Transform2D') -> 'PackedVector2Array': ...
    def collide_with_motion_and_get_contacts(self, local_xform: 'Transform2D', local_motion: 'Vector2', with_shape: 'Shape2D', shape_xform: 'Transform2D', shape_motion: 'Vector2') -> 'PackedVector2Array': ...
    def draw(self, canvas_item: 'RID', color: 'Color') -> None: ...
    def get_rect(self) -> 'Rect2': ...
    
class Shape3D(Resource):
    custom_solver_bias: float
    margin: float
    def set_custom_solver_bias(self, bias: float) -> None: ...
    def get_custom_solver_bias(self) -> float: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def get_debug_mesh(self) -> 'ArrayMesh': ...
    
class ShapeCast2D(Node2D):
    enabled: bool
    shape: 'Shape2D'
    exclude_parent: bool
    target_position: 'Vector2'
    margin: float
    max_results: int
    collision_mask: int
    collision_result: 'Array'
    collide_with_areas: bool
    collide_with_bodies: bool
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_shape(self, shape: 'Shape2D') -> None: ...
    def get_shape(self) -> 'Shape2D': ...
    def set_target_position(self, local_point: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_max_results(self, max_results: int) -> None: ...
    def get_max_results(self) -> int: ...
    def is_colliding(self) -> bool: ...
    def get_collision_count(self) -> int: ...
    def force_shapecast_update(self) -> None: ...
    def get_collider(self, index: int) -> 'Object': ...
    def get_collider_rid(self, index: int) -> 'RID': ...
    def get_collider_shape(self, index: int) -> int: ...
    def get_collision_point(self, index: int) -> 'Vector2': ...
    def get_collision_normal(self, index: int) -> 'Vector2': ...
    def get_closest_collision_safe_fraction(self) -> float: ...
    def get_closest_collision_unsafe_fraction(self) -> float: ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject2D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject2D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def get_collision_result(self) -> 'Array': ...
    
class ShapeCast3D(Node3D):
    enabled: bool
    shape: 'Shape3D'
    exclude_parent: bool
    target_position: 'Vector3'
    margin: float
    max_results: int
    collision_mask: int
    collision_result: 'Array'
    collide_with_areas: bool
    collide_with_bodies: bool
    debug_shape_custom_color: 'Color'
    def resource_changed(self, resource: 'Resource') -> None: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_shape(self, shape: 'Shape3D') -> None: ...
    def get_shape(self) -> 'Shape3D': ...
    def set_target_position(self, local_point: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    def set_max_results(self, max_results: int) -> None: ...
    def get_max_results(self) -> int: ...
    def is_colliding(self) -> bool: ...
    def get_collision_count(self) -> int: ...
    def force_shapecast_update(self) -> None: ...
    def get_collider(self, index: int) -> 'Object': ...
    def get_collider_rid(self, index: int) -> 'RID': ...
    def get_collider_shape(self, index: int) -> int: ...
    def get_collision_point(self, index: int) -> 'Vector3': ...
    def get_collision_normal(self, index: int) -> 'Vector3': ...
    def get_closest_collision_safe_fraction(self) -> float: ...
    def get_closest_collision_unsafe_fraction(self) -> float: ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject3D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject3D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_exclude_parent_body(self, mask: bool) -> None: ...
    def get_exclude_parent_body(self) -> bool: ...
    def set_collide_with_areas(self, enable: bool) -> None: ...
    def is_collide_with_areas_enabled(self) -> bool: ...
    def set_collide_with_bodies(self, enable: bool) -> None: ...
    def is_collide_with_bodies_enabled(self) -> bool: ...
    def get_collision_result(self) -> 'Array': ...
    def set_debug_shape_custom_color(self, debug_shape_custom_color: 'Color') -> None: ...
    def get_debug_shape_custom_color(self) -> 'Color': ...
    
class Shortcut(Resource):
    events: 'list[24/17:InputEvent]'
    def set_events(self, events: 'Array') -> None: ...
    def get_events(self) -> 'Array': ...
    def has_valid_event(self) -> bool: ...
    def matches_event(self, event: 'InputEvent') -> bool: ...
    def get_as_text(self) -> 'String': ...
    
class Skeleton2D(Node2D):
    bone_setup_changed: Signal[Callable[[], None]]  # bone_setup_changed()
    def get_bone_count(self) -> int: ...
    def get_bone(self, idx: int) -> 'Bone2D': ...
    def get_skeleton(self) -> 'RID': ...
    def set_modification_stack(self, modification_stack: 'SkeletonModificationStack2D') -> None: ...
    def get_modification_stack(self) -> 'SkeletonModificationStack2D': ...
    def execute_modifications(self, delta: float, execution_mode: int) -> None: ...
    def set_bone_local_pose_override(self, bone_idx: int, override_pose: 'Transform2D', strength: float, persistent: bool) -> None: ...
    def get_bone_local_pose_override(self, bone_idx: int) -> 'Transform2D': ...
    
class Skeleton3D(Node3D):
    motion_scale: float
    show_rest_only: bool
    modifier_callback_mode_process: int
    animate_physical_bones: bool
    NOTIFICATION_UPDATE_SKELETON = 50
    
    rest_updated: Signal[Callable[[], None]]  # rest_updated()
    pose_updated: Signal[Callable[[], None]]  # pose_updated()
    skeleton_updated: Signal[Callable[[], None]]  # skeleton_updated()
    bone_enabled_changed: Signal[Callable[['int'], None]]  # bone_enabled_changed(bone_idx: int)
    bone_list_changed: Signal[Callable[[], None]]  # bone_list_changed()
    show_rest_only_changed: Signal[Callable[[], None]]  # show_rest_only_changed()
    def add_bone(self, name: 'String') -> int: ...
    def find_bone(self, name: 'String') -> int: ...
    def get_bone_name(self, bone_idx: int) -> 'String': ...
    def set_bone_name(self, bone_idx: int, name: 'String') -> None: ...
    def get_bone_meta(self, bone_idx: int, key: 'StringName') -> 'Variant': ...
    def get_bone_meta_list(self, bone_idx: int) -> 'list[StringName]': ...
    def has_bone_meta(self, bone_idx: int, key: 'StringName') -> bool: ...
    def set_bone_meta(self, bone_idx: int, key: 'StringName', value: 'Variant') -> None: ...
    def get_concatenated_bone_names(self) -> 'StringName': ...
    def get_bone_parent(self, bone_idx: int) -> int: ...
    def set_bone_parent(self, bone_idx: int, parent_idx: int) -> None: ...
    def get_bone_count(self) -> int: ...
    def get_version(self) -> int: ...
    def unparent_bone_and_rest(self, bone_idx: int) -> None: ...
    def get_bone_children(self, bone_idx: int) -> 'PackedInt32Array': ...
    def get_parentless_bones(self) -> 'PackedInt32Array': ...
    def get_bone_rest(self, bone_idx: int) -> 'Transform3D': ...
    def set_bone_rest(self, bone_idx: int, rest: 'Transform3D') -> None: ...
    def get_bone_global_rest(self, bone_idx: int) -> 'Transform3D': ...
    def create_skin_from_rest_transforms(self) -> 'Skin': ...
    def register_skin(self, skin: 'Skin') -> 'SkinReference': ...
    def localize_rests(self) -> None: ...
    def clear_bones(self) -> None: ...
    def get_bone_pose(self, bone_idx: int) -> 'Transform3D': ...
    def set_bone_pose(self, bone_idx: int, pose: 'Transform3D') -> None: ...
    def set_bone_pose_position(self, bone_idx: int, position: 'Vector3') -> None: ...
    def set_bone_pose_rotation(self, bone_idx: int, rotation: 'Quaternion') -> None: ...
    def set_bone_pose_scale(self, bone_idx: int, scale: 'Vector3') -> None: ...
    def get_bone_pose_position(self, bone_idx: int) -> 'Vector3': ...
    def get_bone_pose_rotation(self, bone_idx: int) -> 'Quaternion': ...
    def get_bone_pose_scale(self, bone_idx: int) -> 'Vector3': ...
    def reset_bone_pose(self, bone_idx: int) -> None: ...
    def reset_bone_poses(self) -> None: ...
    def is_bone_enabled(self, bone_idx: int) -> bool: ...
    def set_bone_enabled(self, bone_idx: int, enabled: bool = default('''true''')) -> None: ...
    def get_bone_global_pose(self, bone_idx: int) -> 'Transform3D': ...
    def set_bone_global_pose(self, bone_idx: int, pose: 'Transform3D') -> None: ...
    def force_update_all_bone_transforms(self) -> None: ...
    def force_update_bone_child_transform(self, bone_idx: int) -> None: ...
    def set_motion_scale(self, motion_scale: float) -> None: ...
    def get_motion_scale(self) -> float: ...
    def set_show_rest_only(self, enabled: bool) -> None: ...
    def is_show_rest_only(self) -> bool: ...
    def set_modifier_callback_mode_process(self, mode: 'Skeleton3D_ModifierCallbackModeProcess') -> None: ...
    def get_modifier_callback_mode_process(self) -> 'Skeleton3D_ModifierCallbackModeProcess': ...
    def clear_bones_global_pose_override(self) -> None: ...
    def set_bone_global_pose_override(self, bone_idx: int, pose: 'Transform3D', amount: float, persistent: bool = default('''false''')) -> None: ...
    def get_bone_global_pose_override(self, bone_idx: int) -> 'Transform3D': ...
    def get_bone_global_pose_no_override(self, bone_idx: int) -> 'Transform3D': ...
    def set_animate_physical_bones(self, enabled: bool) -> None: ...
    def get_animate_physical_bones(self) -> bool: ...
    def physical_bones_stop_simulation(self) -> None: ...
    def physical_bones_start_simulation(self, bones: 'list[StringName]' = default('''[]''')) -> None: ...
    def physical_bones_add_collision_exception(self, exception: 'RID') -> None: ...
    def physical_bones_remove_collision_exception(self, exception: 'RID') -> None: ...
    
class Skeleton3D_ModifierCallbackModeProcess(Enum):
    MODIFIER_CALLBACK_MODE_PROCESS_PHYSICS = 0
    MODIFIER_CALLBACK_MODE_PROCESS_IDLE = 1

class SkeletonIK3D(SkeletonModifier3D):
    root_bone: 'StringName'
    tip_bone: 'StringName'
    target: 'Transform3D'
    override_tip_basis: bool
    use_magnet: bool
    magnet: 'Vector3'
    target_node: 'NodePath'
    min_distance: float
    max_iterations: int
    interpolation: float
    def set_root_bone(self, root_bone: 'StringName') -> None: ...
    def get_root_bone(self) -> 'StringName': ...
    def set_tip_bone(self, tip_bone: 'StringName') -> None: ...
    def get_tip_bone(self) -> 'StringName': ...
    def set_target_transform(self, target: 'Transform3D') -> None: ...
    def get_target_transform(self) -> 'Transform3D': ...
    def set_target_node(self, node: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_override_tip_basis(self, override: bool) -> None: ...
    def is_override_tip_basis(self) -> bool: ...
    def set_use_magnet(self, use: bool) -> None: ...
    def is_using_magnet(self) -> bool: ...
    def set_magnet_position(self, local_position: 'Vector3') -> None: ...
    def get_magnet_position(self) -> 'Vector3': ...
    def get_parent_skeleton(self) -> 'Skeleton3D': ...
    def is_running(self) -> bool: ...
    def set_min_distance(self, min_distance: float) -> None: ...
    def get_min_distance(self) -> float: ...
    def set_max_iterations(self, iterations: int) -> None: ...
    def get_max_iterations(self) -> int: ...
    def start(self, one_time: bool = default('''false''')) -> None: ...
    def stop(self) -> None: ...
    def set_interpolation(self, interpolation: float) -> None: ...
    def get_interpolation(self) -> float: ...
    
class SkeletonModification2D(Resource):
    enabled: bool
    execution_mode: int
    def _execute(self, delta: float) -> None: ...
    def _setup_modification(self, modification_stack: 'SkeletonModificationStack2D') -> None: ...
    def _draw_editor_gizmo(self) -> None: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def get_enabled(self) -> bool: ...
    def get_modification_stack(self) -> 'SkeletonModificationStack2D': ...
    def set_is_setup(self, is_setup: bool) -> None: ...
    def get_is_setup(self) -> bool: ...
    def set_execution_mode(self, execution_mode: int) -> None: ...
    def get_execution_mode(self) -> int: ...
    def clamp_angle(self, angle: float, min: float, max: float, invert: bool) -> float: ...
    def set_editor_draw_gizmo(self, draw_gizmo: bool) -> None: ...
    def get_editor_draw_gizmo(self) -> bool: ...
    
class SkeletonModification2DCCDIK(SkeletonModification2D):
    target_nodepath: 'NodePath'
    tip_nodepath: 'NodePath'
    ccdik_data_chain_length: int
    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_tip_node(self, tip_nodepath: 'NodePath') -> None: ...
    def get_tip_node(self) -> 'NodePath': ...
    def set_ccdik_data_chain_length(self, length: int) -> None: ...
    def get_ccdik_data_chain_length(self) -> int: ...
    def set_ccdik_joint_bone2d_node(self, joint_idx: int, bone2d_nodepath: 'NodePath') -> None: ...
    def get_ccdik_joint_bone2d_node(self, joint_idx: int) -> 'NodePath': ...
    def set_ccdik_joint_bone_index(self, joint_idx: int, bone_idx: int) -> None: ...
    def get_ccdik_joint_bone_index(self, joint_idx: int) -> int: ...
    def set_ccdik_joint_rotate_from_joint(self, joint_idx: int, rotate_from_joint: bool) -> None: ...
    def get_ccdik_joint_rotate_from_joint(self, joint_idx: int) -> bool: ...
    def set_ccdik_joint_enable_constraint(self, joint_idx: int, enable_constraint: bool) -> None: ...
    def get_ccdik_joint_enable_constraint(self, joint_idx: int) -> bool: ...
    def set_ccdik_joint_constraint_angle_min(self, joint_idx: int, angle_min: float) -> None: ...
    def get_ccdik_joint_constraint_angle_min(self, joint_idx: int) -> float: ...
    def set_ccdik_joint_constraint_angle_max(self, joint_idx: int, angle_max: float) -> None: ...
    def get_ccdik_joint_constraint_angle_max(self, joint_idx: int) -> float: ...
    def set_ccdik_joint_constraint_angle_invert(self, joint_idx: int, invert: bool) -> None: ...
    def get_ccdik_joint_constraint_angle_invert(self, joint_idx: int) -> bool: ...
    
class SkeletonModification2DFABRIK(SkeletonModification2D):
    target_nodepath: 'NodePath'
    fabrik_data_chain_length: int
    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_fabrik_data_chain_length(self, length: int) -> None: ...
    def get_fabrik_data_chain_length(self) -> int: ...
    def set_fabrik_joint_bone2d_node(self, joint_idx: int, bone2d_nodepath: 'NodePath') -> None: ...
    def get_fabrik_joint_bone2d_node(self, joint_idx: int) -> 'NodePath': ...
    def set_fabrik_joint_bone_index(self, joint_idx: int, bone_idx: int) -> None: ...
    def get_fabrik_joint_bone_index(self, joint_idx: int) -> int: ...
    def set_fabrik_joint_magnet_position(self, joint_idx: int, magnet_position: 'Vector2') -> None: ...
    def get_fabrik_joint_magnet_position(self, joint_idx: int) -> 'Vector2': ...
    def set_fabrik_joint_use_target_rotation(self, joint_idx: int, use_target_rotation: bool) -> None: ...
    def get_fabrik_joint_use_target_rotation(self, joint_idx: int) -> bool: ...
    
class SkeletonModification2DJiggle(SkeletonModification2D):
    target_nodepath: 'NodePath'
    jiggle_data_chain_length: int
    stiffness: float
    mass: float
    damping: float
    use_gravity: bool
    gravity: 'Vector2'
    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_jiggle_data_chain_length(self, length: int) -> None: ...
    def get_jiggle_data_chain_length(self) -> int: ...
    def set_stiffness(self, stiffness: float) -> None: ...
    def get_stiffness(self) -> float: ...
    def set_mass(self, mass: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_damping(self, damping: float) -> None: ...
    def get_damping(self) -> float: ...
    def set_use_gravity(self, use_gravity: bool) -> None: ...
    def get_use_gravity(self) -> bool: ...
    def set_gravity(self, gravity: 'Vector2') -> None: ...
    def get_gravity(self) -> 'Vector2': ...
    def set_use_colliders(self, use_colliders: bool) -> None: ...
    def get_use_colliders(self) -> bool: ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_jiggle_joint_bone2d_node(self, joint_idx: int, bone2d_node: 'NodePath') -> None: ...
    def get_jiggle_joint_bone2d_node(self, joint_idx: int) -> 'NodePath': ...
    def set_jiggle_joint_bone_index(self, joint_idx: int, bone_idx: int) -> None: ...
    def get_jiggle_joint_bone_index(self, joint_idx: int) -> int: ...
    def set_jiggle_joint_override(self, joint_idx: int, override: bool) -> None: ...
    def get_jiggle_joint_override(self, joint_idx: int) -> bool: ...
    def set_jiggle_joint_stiffness(self, joint_idx: int, stiffness: float) -> None: ...
    def get_jiggle_joint_stiffness(self, joint_idx: int) -> float: ...
    def set_jiggle_joint_mass(self, joint_idx: int, mass: float) -> None: ...
    def get_jiggle_joint_mass(self, joint_idx: int) -> float: ...
    def set_jiggle_joint_damping(self, joint_idx: int, damping: float) -> None: ...
    def get_jiggle_joint_damping(self, joint_idx: int) -> float: ...
    def set_jiggle_joint_use_gravity(self, joint_idx: int, use_gravity: bool) -> None: ...
    def get_jiggle_joint_use_gravity(self, joint_idx: int) -> bool: ...
    def set_jiggle_joint_gravity(self, joint_idx: int, gravity: 'Vector2') -> None: ...
    def get_jiggle_joint_gravity(self, joint_idx: int) -> 'Vector2': ...
    
class SkeletonModification2DLookAt(SkeletonModification2D):
    bone_index: int
    bone2d_node: 'NodePath'
    target_nodepath: 'NodePath'
    def set_bone2d_node(self, bone2d_nodepath: 'NodePath') -> None: ...
    def get_bone2d_node(self) -> 'NodePath': ...
    def set_bone_index(self, bone_idx: int) -> None: ...
    def get_bone_index(self) -> int: ...
    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_additional_rotation(self, rotation: float) -> None: ...
    def get_additional_rotation(self) -> float: ...
    def set_enable_constraint(self, enable_constraint: bool) -> None: ...
    def get_enable_constraint(self) -> bool: ...
    def set_constraint_angle_min(self, angle_min: float) -> None: ...
    def get_constraint_angle_min(self) -> float: ...
    def set_constraint_angle_max(self, angle_max: float) -> None: ...
    def get_constraint_angle_max(self) -> float: ...
    def set_constraint_angle_invert(self, invert: bool) -> None: ...
    def get_constraint_angle_invert(self) -> bool: ...
    
class SkeletonModification2DPhysicalBones(SkeletonModification2D):
    physical_bone_chain_length: int
    def set_physical_bone_chain_length(self, length: int) -> None: ...
    def get_physical_bone_chain_length(self) -> int: ...
    def set_physical_bone_node(self, joint_idx: int, physicalbone2d_node: 'NodePath') -> None: ...
    def get_physical_bone_node(self, joint_idx: int) -> 'NodePath': ...
    def fetch_physical_bones(self) -> None: ...
    def start_simulation(self, bones: 'list[StringName]' = default('''[]''')) -> None: ...
    def stop_simulation(self, bones: 'list[StringName]' = default('''[]''')) -> None: ...
    
class SkeletonModification2DStackHolder(SkeletonModification2D):
    def set_held_modification_stack(self, held_modification_stack: 'SkeletonModificationStack2D') -> None: ...
    def get_held_modification_stack(self) -> 'SkeletonModificationStack2D': ...
    
class SkeletonModification2DTwoBoneIK(SkeletonModification2D):
    target_nodepath: 'NodePath'
    target_minimum_distance: float
    target_maximum_distance: float
    flip_bend_direction: bool
    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_target_minimum_distance(self, minimum_distance: float) -> None: ...
    def get_target_minimum_distance(self) -> float: ...
    def set_target_maximum_distance(self, maximum_distance: float) -> None: ...
    def get_target_maximum_distance(self) -> float: ...
    def set_flip_bend_direction(self, flip_direction: bool) -> None: ...
    def get_flip_bend_direction(self) -> bool: ...
    def set_joint_one_bone2d_node(self, bone2d_node: 'NodePath') -> None: ...
    def get_joint_one_bone2d_node(self) -> 'NodePath': ...
    def set_joint_one_bone_idx(self, bone_idx: int) -> None: ...
    def get_joint_one_bone_idx(self) -> int: ...
    def set_joint_two_bone2d_node(self, bone2d_node: 'NodePath') -> None: ...
    def get_joint_two_bone2d_node(self) -> 'NodePath': ...
    def set_joint_two_bone_idx(self, bone_idx: int) -> None: ...
    def get_joint_two_bone_idx(self) -> int: ...
    
class SkeletonModificationStack2D(Resource):
    enabled: bool
    strength: float
    modification_count: int
    def setup(self) -> None: ...
    def execute(self, delta: float, execution_mode: int) -> None: ...
    def enable_all_modifications(self, enabled: bool) -> None: ...
    def get_modification(self, mod_idx: int) -> 'SkeletonModification2D': ...
    def add_modification(self, modification: 'SkeletonModification2D') -> None: ...
    def delete_modification(self, mod_idx: int) -> None: ...
    def set_modification(self, mod_idx: int, modification: 'SkeletonModification2D') -> None: ...
    def set_modification_count(self, count: int) -> None: ...
    def get_modification_count(self) -> int: ...
    def get_is_setup(self) -> bool: ...
    def set_enabled(self, enabled: bool) -> None: ...
    def get_enabled(self) -> bool: ...
    def set_strength(self, strength: float) -> None: ...
    def get_strength(self) -> float: ...
    def get_skeleton(self) -> 'Skeleton2D': ...
    
class SkeletonModifier3D(Node3D):
    active: bool
    influence: float
    modification_processed: Signal[Callable[[], None]]  # modification_processed()
    def _process_modification(self) -> None: ...
    def get_skeleton(self) -> 'Skeleton3D': ...
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def set_influence(self, influence: float) -> None: ...
    def get_influence(self) -> float: ...
    
class SkeletonModifier3D_BoneAxis(Enum):
    BONE_AXIS_PLUS_X = 0
    BONE_AXIS_MINUS_X = 1
    BONE_AXIS_PLUS_Y = 2
    BONE_AXIS_MINUS_Y = 3
    BONE_AXIS_PLUS_Z = 4
    BONE_AXIS_MINUS_Z = 5

class SkeletonProfile(Resource):
    root_bone: 'StringName'
    scale_base_bone: 'StringName'
    group_size: int
    bone_size: int
    profile_updated: Signal[Callable[[], None]]  # profile_updated()
    def set_root_bone(self, bone_name: 'StringName') -> None: ...
    def get_root_bone(self) -> 'StringName': ...
    def set_scale_base_bone(self, bone_name: 'StringName') -> None: ...
    def get_scale_base_bone(self) -> 'StringName': ...
    def set_group_size(self, size: int) -> None: ...
    def get_group_size(self) -> int: ...
    def get_group_name(self, group_idx: int) -> 'StringName': ...
    def set_group_name(self, group_idx: int, group_name: 'StringName') -> None: ...
    def get_texture(self, group_idx: int) -> 'Texture2D': ...
    def set_texture(self, group_idx: int, texture: 'Texture2D') -> None: ...
    def set_bone_size(self, size: int) -> None: ...
    def get_bone_size(self) -> int: ...
    def find_bone(self, bone_name: 'StringName') -> int: ...
    def get_bone_name(self, bone_idx: int) -> 'StringName': ...
    def set_bone_name(self, bone_idx: int, bone_name: 'StringName') -> None: ...
    def get_bone_parent(self, bone_idx: int) -> 'StringName': ...
    def set_bone_parent(self, bone_idx: int, bone_parent: 'StringName') -> None: ...
    def get_tail_direction(self, bone_idx: int) -> 'SkeletonProfile_TailDirection': ...
    def set_tail_direction(self, bone_idx: int, tail_direction: 'SkeletonProfile_TailDirection') -> None: ...
    def get_bone_tail(self, bone_idx: int) -> 'StringName': ...
    def set_bone_tail(self, bone_idx: int, bone_tail: 'StringName') -> None: ...
    def get_reference_pose(self, bone_idx: int) -> 'Transform3D': ...
    def set_reference_pose(self, bone_idx: int, bone_name: 'Transform3D') -> None: ...
    def get_handle_offset(self, bone_idx: int) -> 'Vector2': ...
    def set_handle_offset(self, bone_idx: int, handle_offset: 'Vector2') -> None: ...
    def get_group(self, bone_idx: int) -> 'StringName': ...
    def set_group(self, bone_idx: int, group: 'StringName') -> None: ...
    def is_required(self, bone_idx: int) -> bool: ...
    def set_required(self, bone_idx: int, required: bool) -> None: ...
    
class SkeletonProfile_TailDirection(Enum):
    TAIL_DIRECTION_AVERAGE_CHILDREN = 0
    TAIL_DIRECTION_SPECIFIC_CHILD = 1
    TAIL_DIRECTION_END = 2

class SkeletonProfileHumanoid(SkeletonProfile):
    pass
    
class Skin(Resource):
    def set_bind_count(self, bind_count: int) -> None: ...
    def get_bind_count(self) -> int: ...
    def add_bind(self, bone: int, pose: 'Transform3D') -> None: ...
    def add_named_bind(self, name: 'String', pose: 'Transform3D') -> None: ...
    def set_bind_pose(self, bind_index: int, pose: 'Transform3D') -> None: ...
    def get_bind_pose(self, bind_index: int) -> 'Transform3D': ...
    def set_bind_name(self, bind_index: int, name: 'StringName') -> None: ...
    def get_bind_name(self, bind_index: int) -> 'StringName': ...
    def set_bind_bone(self, bind_index: int, bone: int) -> None: ...
    def get_bind_bone(self, bind_index: int) -> int: ...
    def clear_binds(self) -> None: ...
    
class SkinReference(RefCounted):
    def get_skeleton(self) -> 'RID': ...
    def get_skin(self) -> 'Skin': ...
    
class Sky(Resource):
    sky_material: 'PanoramaSkyMaterial'
    process_mode: int
    radiance_size: int
    def set_radiance_size(self, size: 'Sky_RadianceSize') -> None: ...
    def get_radiance_size(self) -> 'Sky_RadianceSize': ...
    def set_process_mode(self, mode: 'Sky_ProcessMode') -> None: ...
    def get_process_mode(self) -> 'Sky_ProcessMode': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    
class Sky_RadianceSize(Enum):
    RADIANCE_SIZE_32 = 0
    RADIANCE_SIZE_64 = 1
    RADIANCE_SIZE_128 = 2
    RADIANCE_SIZE_256 = 3
    RADIANCE_SIZE_512 = 4
    RADIANCE_SIZE_1024 = 5
    RADIANCE_SIZE_2048 = 6
    RADIANCE_SIZE_MAX = 7

class Sky_ProcessMode(Enum):
    PROCESS_MODE_AUTOMATIC = 0
    PROCESS_MODE_QUALITY = 1
    PROCESS_MODE_INCREMENTAL = 2
    PROCESS_MODE_REALTIME = 3

class Slider(Range):
    editable: bool
    scrollable: bool
    tick_count: int
    ticks_on_borders: bool
    drag_started: Signal[Callable[[], None]]  # drag_started()
    drag_ended: Signal[Callable[['bool'], None]]  # drag_ended(value_changed: bool)
    def set_ticks(self, count: int) -> None: ...
    def get_ticks(self) -> int: ...
    def get_ticks_on_borders(self) -> bool: ...
    def set_ticks_on_borders(self, ticks_on_border: bool) -> None: ...
    def set_editable(self, editable: bool) -> None: ...
    def is_editable(self) -> bool: ...
    def set_scrollable(self, scrollable: bool) -> None: ...
    def is_scrollable(self) -> bool: ...
    
class SliderJoint3D(Joint3D):
    def set_param(self, param: 'SliderJoint3D_Param', value: float) -> None: ...
    def get_param(self, param: 'SliderJoint3D_Param') -> float: ...
    
class SliderJoint3D_Param(Enum):
    PARAM_LINEAR_LIMIT_UPPER = 0
    PARAM_LINEAR_LIMIT_LOWER = 1
    PARAM_LINEAR_LIMIT_SOFTNESS = 2
    PARAM_LINEAR_LIMIT_RESTITUTION = 3
    PARAM_LINEAR_LIMIT_DAMPING = 4
    PARAM_LINEAR_MOTION_SOFTNESS = 5
    PARAM_LINEAR_MOTION_RESTITUTION = 6
    PARAM_LINEAR_MOTION_DAMPING = 7
    PARAM_LINEAR_ORTHOGONAL_SOFTNESS = 8
    PARAM_LINEAR_ORTHOGONAL_RESTITUTION = 9
    PARAM_LINEAR_ORTHOGONAL_DAMPING = 10
    PARAM_ANGULAR_LIMIT_UPPER = 11
    PARAM_ANGULAR_LIMIT_LOWER = 12
    PARAM_ANGULAR_LIMIT_SOFTNESS = 13
    PARAM_ANGULAR_LIMIT_RESTITUTION = 14
    PARAM_ANGULAR_LIMIT_DAMPING = 15
    PARAM_ANGULAR_MOTION_SOFTNESS = 16
    PARAM_ANGULAR_MOTION_RESTITUTION = 17
    PARAM_ANGULAR_MOTION_DAMPING = 18
    PARAM_ANGULAR_ORTHOGONAL_SOFTNESS = 19
    PARAM_ANGULAR_ORTHOGONAL_RESTITUTION = 20
    PARAM_ANGULAR_ORTHOGONAL_DAMPING = 21
    PARAM_MAX = 22

class SoftBody3D(MeshInstance3D):
    collision_layer: int
    collision_mask: int
    parent_collision_ignore: 'NodePath'
    simulation_precision: int
    total_mass: float
    linear_stiffness: float
    pressure_coefficient: float
    damping_coefficient: float
    drag_coefficient: float
    ray_pickable: bool
    disable_mode: int
    def get_physics_rid(self) -> 'RID': ...
    def set_collision_mask(self, collision_mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_collision_layer(self, collision_layer: int) -> None: ...
    def get_collision_layer(self) -> int: ...
    def set_collision_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_mask_value(self, layer_number: int) -> bool: ...
    def set_collision_layer_value(self, layer_number: int, value: bool) -> None: ...
    def get_collision_layer_value(self, layer_number: int) -> bool: ...
    def set_parent_collision_ignore(self, parent_collision_ignore: 'NodePath') -> None: ...
    def get_parent_collision_ignore(self) -> 'NodePath': ...
    def set_disable_mode(self, mode: 'SoftBody3D_DisableMode') -> None: ...
    def get_disable_mode(self) -> 'SoftBody3D_DisableMode': ...
    def get_collision_exceptions(self) -> 'list[PhysicsBody3D]': ...
    def add_collision_exception_with(self, body: 'Node') -> None: ...
    def remove_collision_exception_with(self, body: 'Node') -> None: ...
    def set_simulation_precision(self, simulation_precision: int) -> None: ...
    def get_simulation_precision(self) -> int: ...
    def set_total_mass(self, mass: float) -> None: ...
    def get_total_mass(self) -> float: ...
    def set_linear_stiffness(self, linear_stiffness: float) -> None: ...
    def get_linear_stiffness(self) -> float: ...
    def set_pressure_coefficient(self, pressure_coefficient: float) -> None: ...
    def get_pressure_coefficient(self) -> float: ...
    def set_damping_coefficient(self, damping_coefficient: float) -> None: ...
    def get_damping_coefficient(self) -> float: ...
    def set_drag_coefficient(self, drag_coefficient: float) -> None: ...
    def get_drag_coefficient(self) -> float: ...
    def get_point_transform(self, point_index: int) -> 'Vector3': ...
    def set_point_pinned(self, point_index: int, pinned: bool, attachment_path: 'NodePath' = default('''NodePath("")'''), insert_at: int = default('''-1''')) -> None: ...
    def is_point_pinned(self, point_index: int) -> bool: ...
    def set_ray_pickable(self, ray_pickable: bool) -> None: ...
    def is_ray_pickable(self) -> bool: ...
    
class SoftBody3D_DisableMode(Enum):
    DISABLE_MODE_REMOVE = 0
    DISABLE_MODE_KEEP_ACTIVE = 1

class SphereMesh(PrimitiveMesh):
    radius: float
    height: float
    radial_segments: int
    rings: int
    is_hemisphere: bool
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_radial_segments(self, radial_segments: int) -> None: ...
    def get_radial_segments(self) -> int: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_is_hemisphere(self, is_hemisphere: bool) -> None: ...
    def get_is_hemisphere(self) -> bool: ...
    
class SphereOccluder3D(Occluder3D):
    radius: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    
class SphereShape3D(Shape3D):
    radius: float
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    
class SpinBox(Range):
    alignment: int
    editable: bool
    update_on_text_changed: bool
    prefix: 'String'
    suffix: 'String'
    custom_arrow_step: float
    select_all_on_focus: bool
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_suffix(self, suffix: 'String') -> None: ...
    def get_suffix(self) -> 'String': ...
    def set_prefix(self, prefix: 'String') -> None: ...
    def get_prefix(self) -> 'String': ...
    def set_editable(self, enabled: bool) -> None: ...
    def set_custom_arrow_step(self, arrow_step: float) -> None: ...
    def get_custom_arrow_step(self) -> float: ...
    def is_editable(self) -> bool: ...
    def set_update_on_text_changed(self, enabled: bool) -> None: ...
    def get_update_on_text_changed(self) -> bool: ...
    def set_select_all_on_focus(self, enabled: bool) -> None: ...
    def is_select_all_on_focus(self) -> bool: ...
    def apply(self) -> None: ...
    def get_line_edit(self) -> 'LineEdit': ...
    
class SplitContainer(Container):
    split_offset: int
    collapsed: bool
    dragging_enabled: bool
    dragger_visibility: int
    vertical: bool
    drag_area_margin_begin: int
    drag_area_margin_end: int
    drag_area_offset: int
    drag_area_highlight_in_editor: bool
    dragged: Signal[Callable[['int'], None]]  # dragged(offset: int)
    drag_started: Signal[Callable[[], None]]  # drag_started()
    drag_ended: Signal[Callable[[], None]]  # drag_ended()
    def set_split_offset(self, offset: int) -> None: ...
    def get_split_offset(self) -> int: ...
    def clamp_split_offset(self) -> None: ...
    def set_collapsed(self, collapsed: bool) -> None: ...
    def is_collapsed(self) -> bool: ...
    def set_dragger_visibility(self, mode: 'SplitContainer_DraggerVisibility') -> None: ...
    def get_dragger_visibility(self) -> 'SplitContainer_DraggerVisibility': ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...
    def set_dragging_enabled(self, dragging_enabled: bool) -> None: ...
    def is_dragging_enabled(self) -> bool: ...
    def set_drag_area_margin_begin(self, margin: int) -> None: ...
    def get_drag_area_margin_begin(self) -> int: ...
    def set_drag_area_margin_end(self, margin: int) -> None: ...
    def get_drag_area_margin_end(self) -> int: ...
    def set_drag_area_offset(self, offset: int) -> None: ...
    def get_drag_area_offset(self) -> int: ...
    def set_drag_area_highlight_in_editor(self, drag_area_highlight_in_editor: bool) -> None: ...
    def is_drag_area_highlight_in_editor_enabled(self) -> bool: ...
    def get_drag_area_control(self) -> 'Control': ...
    
class SplitContainer_DraggerVisibility(Enum):
    DRAGGER_VISIBLE = 0
    DRAGGER_HIDDEN = 1
    DRAGGER_HIDDEN_COLLAPSED = 2

class SpotLight3D(Light3D):
    spot_range: float
    spot_attenuation: float
    spot_angle: float
    spot_angle_attenuation: float
    
class SpringArm3D(Node3D):
    collision_mask: int
    shape: 'Shape3D'
    spring_length: float
    margin: float
    def get_hit_length(self) -> float: ...
    def set_length(self, length: float) -> None: ...
    def get_length(self) -> float: ...
    def set_shape(self, shape: 'Shape3D') -> None: ...
    def get_shape(self) -> 'Shape3D': ...
    def add_excluded_object(self, RID: 'RID') -> None: ...
    def remove_excluded_object(self, RID: 'RID') -> bool: ...
    def clear_excluded_objects(self) -> None: ...
    def set_collision_mask(self, mask: int) -> None: ...
    def get_collision_mask(self) -> int: ...
    def set_margin(self, margin: float) -> None: ...
    def get_margin(self) -> float: ...
    
class SpringBoneCollision3D(Node3D):
    bone_name: 'StringName'
    bone: int
    position_offset: 'Vector3'
    rotation_offset: 'Quaternion'
    def get_skeleton(self) -> 'Skeleton3D': ...
    def set_bone_name(self, bone_name: 'String') -> None: ...
    def get_bone_name(self) -> 'String': ...
    def set_bone(self, bone: int) -> None: ...
    def get_bone(self) -> int: ...
    def set_position_offset(self, offset: 'Vector3') -> None: ...
    def get_position_offset(self) -> 'Vector3': ...
    def set_rotation_offset(self, offset: 'Quaternion') -> None: ...
    def get_rotation_offset(self) -> 'Quaternion': ...
    
class SpringBoneCollisionCapsule3D(SpringBoneCollision3D):
    radius: float
    height: float
    inside: bool
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_height(self, height: float) -> None: ...
    def get_height(self) -> float: ...
    def set_inside(self, enabled: bool) -> None: ...
    def is_inside(self) -> bool: ...
    
class SpringBoneCollisionPlane3D(SpringBoneCollision3D):
    pass
    
class SpringBoneCollisionSphere3D(SpringBoneCollision3D):
    radius: float
    inside: bool
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_inside(self, enabled: bool) -> None: ...
    def is_inside(self) -> bool: ...
    
class SpringBoneSimulator3D(SkeletonModifier3D):
    setting_count: int
    def set_root_bone_name(self, index: int, bone_name: 'String') -> None: ...
    def get_root_bone_name(self, index: int) -> 'String': ...
    def set_root_bone(self, index: int, bone: int) -> None: ...
    def get_root_bone(self, index: int) -> int: ...
    def set_end_bone_name(self, index: int, bone_name: 'String') -> None: ...
    def get_end_bone_name(self, index: int) -> 'String': ...
    def set_end_bone(self, index: int, bone: int) -> None: ...
    def get_end_bone(self, index: int) -> int: ...
    def set_extend_end_bone(self, index: int, enabled: bool) -> None: ...
    def is_end_bone_extended(self, index: int) -> bool: ...
    def set_end_bone_direction(self, index: int, bone_direction: 'SpringBoneSimulator3D_BoneDirection') -> None: ...
    def get_end_bone_direction(self, index: int) -> 'SpringBoneSimulator3D_BoneDirection': ...
    def set_end_bone_length(self, index: int, length: float) -> None: ...
    def get_end_bone_length(self, index: int) -> float: ...
    def set_center_from(self, index: int, center_from: 'SpringBoneSimulator3D_CenterFrom') -> None: ...
    def get_center_from(self, index: int) -> 'SpringBoneSimulator3D_CenterFrom': ...
    def set_center_node(self, index: int, node_path: 'NodePath') -> None: ...
    def get_center_node(self, index: int) -> 'NodePath': ...
    def set_center_bone_name(self, index: int, bone_name: 'String') -> None: ...
    def get_center_bone_name(self, index: int) -> 'String': ...
    def set_center_bone(self, index: int, bone: int) -> None: ...
    def get_center_bone(self, index: int) -> int: ...
    def set_radius(self, index: int, radius: float) -> None: ...
    def get_radius(self, index: int) -> float: ...
    def set_rotation_axis(self, index: int, axis: 'SpringBoneSimulator3D_RotationAxis') -> None: ...
    def get_rotation_axis(self, index: int) -> 'SpringBoneSimulator3D_RotationAxis': ...
    def set_radius_damping_curve(self, index: int, curve: 'Curve') -> None: ...
    def get_radius_damping_curve(self, index: int) -> 'Curve': ...
    def set_stiffness(self, index: int, stiffness: float) -> None: ...
    def get_stiffness(self, index: int) -> float: ...
    def set_stiffness_damping_curve(self, index: int, curve: 'Curve') -> None: ...
    def get_stiffness_damping_curve(self, index: int) -> 'Curve': ...
    def set_drag(self, index: int, drag: float) -> None: ...
    def get_drag(self, index: int) -> float: ...
    def set_drag_damping_curve(self, index: int, curve: 'Curve') -> None: ...
    def get_drag_damping_curve(self, index: int) -> 'Curve': ...
    def set_gravity(self, index: int, gravity: float) -> None: ...
    def get_gravity(self, index: int) -> float: ...
    def set_gravity_damping_curve(self, index: int, curve: 'Curve') -> None: ...
    def get_gravity_damping_curve(self, index: int) -> 'Curve': ...
    def set_gravity_direction(self, index: int, gravity_direction: 'Vector3') -> None: ...
    def get_gravity_direction(self, index: int) -> 'Vector3': ...
    def set_setting_count(self, count: int) -> None: ...
    def get_setting_count(self) -> int: ...
    def clear_settings(self) -> None: ...
    def set_individual_config(self, index: int, enabled: bool) -> None: ...
    def is_config_individual(self, index: int) -> bool: ...
    def get_joint_bone_name(self, index: int, joint: int) -> 'String': ...
    def get_joint_bone(self, index: int, joint: int) -> int: ...
    def set_joint_rotation_axis(self, index: int, joint: int, axis: 'SpringBoneSimulator3D_RotationAxis') -> None: ...
    def get_joint_rotation_axis(self, index: int, joint: int) -> 'SpringBoneSimulator3D_RotationAxis': ...
    def set_joint_radius(self, index: int, joint: int, radius: float) -> None: ...
    def get_joint_radius(self, index: int, joint: int) -> float: ...
    def set_joint_stiffness(self, index: int, joint: int, stiffness: float) -> None: ...
    def get_joint_stiffness(self, index: int, joint: int) -> float: ...
    def set_joint_drag(self, index: int, joint: int, drag: float) -> None: ...
    def get_joint_drag(self, index: int, joint: int) -> float: ...
    def set_joint_gravity(self, index: int, joint: int, gravity: float) -> None: ...
    def get_joint_gravity(self, index: int, joint: int) -> float: ...
    def set_joint_gravity_direction(self, index: int, joint: int, gravity_direction: 'Vector3') -> None: ...
    def get_joint_gravity_direction(self, index: int, joint: int) -> 'Vector3': ...
    def get_joint_count(self, index: int) -> int: ...
    def set_enable_all_child_collisions(self, index: int, enabled: bool) -> None: ...
    def are_all_child_collisions_enabled(self, index: int) -> bool: ...
    def set_exclude_collision_path(self, index: int, collision: int, node_path: 'NodePath') -> None: ...
    def get_exclude_collision_path(self, index: int, collision: int) -> 'NodePath': ...
    def set_exclude_collision_count(self, index: int, count: int) -> None: ...
    def get_exclude_collision_count(self, index: int) -> int: ...
    def clear_exclude_collisions(self, index: int) -> None: ...
    def set_collision_path(self, index: int, collision: int, node_path: 'NodePath') -> None: ...
    def get_collision_path(self, index: int, collision: int) -> 'NodePath': ...
    def set_collision_count(self, index: int, count: int) -> None: ...
    def get_collision_count(self, index: int) -> int: ...
    def clear_collisions(self, index: int) -> None: ...
    def reset(self) -> None: ...
    
class SpringBoneSimulator3D_BoneDirection(Enum):
    BONE_DIRECTION_PLUS_X = 0
    BONE_DIRECTION_MINUS_X = 1
    BONE_DIRECTION_PLUS_Y = 2
    BONE_DIRECTION_MINUS_Y = 3
    BONE_DIRECTION_PLUS_Z = 4
    BONE_DIRECTION_MINUS_Z = 5
    BONE_DIRECTION_FROM_PARENT = 6

class SpringBoneSimulator3D_CenterFrom(Enum):
    CENTER_FROM_WORLD_ORIGIN = 0
    CENTER_FROM_NODE = 1
    CENTER_FROM_BONE = 2

class SpringBoneSimulator3D_RotationAxis(Enum):
    ROTATION_AXIS_X = 0
    ROTATION_AXIS_Y = 1
    ROTATION_AXIS_Z = 2
    ROTATION_AXIS_ALL = 3

class Sprite2D(Node2D):
    texture: 'Texture2D'
    centered: bool
    offset: 'Vector2'
    flip_h: bool
    flip_v: bool
    hframes: int
    vframes: int
    frame: int
    frame_coords: 'Vector2i'
    region_enabled: bool
    region_rect: 'Rect2'
    region_filter_clip_enabled: bool
    frame_changed: Signal[Callable[[], None]]  # frame_changed()
    texture_changed: Signal[Callable[[], None]]  # texture_changed()
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_centered(self, centered: bool) -> None: ...
    def is_centered(self) -> bool: ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_flip_h(self, flip_h: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_region_enabled(self, enabled: bool) -> None: ...
    def is_region_enabled(self) -> bool: ...
    def is_pixel_opaque(self, pos: 'Vector2') -> bool: ...
    def set_region_rect(self, rect: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_region_filter_clip_enabled(self, enabled: bool) -> None: ...
    def is_region_filter_clip_enabled(self) -> bool: ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_coords(self, coords: 'Vector2i') -> None: ...
    def get_frame_coords(self) -> 'Vector2i': ...
    def set_vframes(self, vframes: int) -> None: ...
    def get_vframes(self) -> int: ...
    def set_hframes(self, hframes: int) -> None: ...
    def get_hframes(self) -> int: ...
    def get_rect(self) -> 'Rect2': ...
    
class Sprite3D(SpriteBase3D):
    texture: 'Texture2D'
    hframes: int
    vframes: int
    frame: int
    frame_coords: 'Vector2i'
    region_enabled: bool
    region_rect: 'Rect2'
    frame_changed: Signal[Callable[[], None]]  # frame_changed()
    texture_changed: Signal[Callable[[], None]]  # texture_changed()
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_region_enabled(self, enabled: bool) -> None: ...
    def is_region_enabled(self) -> bool: ...
    def set_region_rect(self, rect: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    def set_frame_coords(self, coords: 'Vector2i') -> None: ...
    def get_frame_coords(self) -> 'Vector2i': ...
    def set_vframes(self, vframes: int) -> None: ...
    def get_vframes(self) -> int: ...
    def set_hframes(self, hframes: int) -> None: ...
    def get_hframes(self) -> int: ...
    
class SpriteBase3D(GeometryInstance3D):
    centered: bool
    offset: 'Vector2'
    flip_h: bool
    flip_v: bool
    modulate: 'Color'
    pixel_size: float
    axis: int
    billboard: int
    transparent: bool
    shaded: bool
    double_sided: bool
    no_depth_test: bool
    fixed_size: bool
    alpha_cut: int
    alpha_scissor_threshold: float
    alpha_hash_scale: float
    alpha_antialiasing_mode: int
    alpha_antialiasing_edge: float
    texture_filter: int
    render_priority: int
    def set_centered(self, centered: bool) -> None: ...
    def is_centered(self) -> bool: ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_flip_h(self, flip_h: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_render_priority(self, priority: int) -> None: ...
    def get_render_priority(self) -> int: ...
    def set_pixel_size(self, pixel_size: float) -> None: ...
    def get_pixel_size(self) -> float: ...
    def set_axis(self, axis: 'Vector3_Axis') -> None: ...
    def get_axis(self) -> 'Vector3_Axis': ...
    def set_draw_flag(self, flag: 'SpriteBase3D_DrawFlags', enabled: bool) -> None: ...
    def get_draw_flag(self, flag: 'SpriteBase3D_DrawFlags') -> bool: ...
    def set_alpha_cut_mode(self, mode: 'SpriteBase3D_AlphaCutMode') -> None: ...
    def get_alpha_cut_mode(self) -> 'SpriteBase3D_AlphaCutMode': ...
    def set_alpha_scissor_threshold(self, threshold: float) -> None: ...
    def get_alpha_scissor_threshold(self) -> float: ...
    def set_alpha_hash_scale(self, threshold: float) -> None: ...
    def get_alpha_hash_scale(self) -> float: ...
    def set_alpha_antialiasing(self, alpha_aa: 'BaseMaterial3D_AlphaAntiAliasing') -> None: ...
    def get_alpha_antialiasing(self) -> 'BaseMaterial3D_AlphaAntiAliasing': ...
    def set_alpha_antialiasing_edge(self, edge: float) -> None: ...
    def get_alpha_antialiasing_edge(self) -> float: ...
    def set_billboard_mode(self, mode: 'BaseMaterial3D_BillboardMode') -> None: ...
    def get_billboard_mode(self) -> 'BaseMaterial3D_BillboardMode': ...
    def set_texture_filter(self, mode: 'BaseMaterial3D_TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'BaseMaterial3D_TextureFilter': ...
    def get_item_rect(self) -> 'Rect2': ...
    def generate_triangle_mesh(self) -> 'TriangleMesh': ...
    
class SpriteBase3D_DrawFlags(Enum):
    FLAG_TRANSPARENT = 0
    FLAG_SHADED = 1
    FLAG_DOUBLE_SIDED = 2
    FLAG_DISABLE_DEPTH_TEST = 3
    FLAG_FIXED_SIZE = 4
    FLAG_MAX = 5

class SpriteBase3D_AlphaCutMode(Enum):
    ALPHA_CUT_DISABLED = 0
    ALPHA_CUT_DISCARD = 1
    ALPHA_CUT_OPAQUE_PREPASS = 2
    ALPHA_CUT_HASH = 3

class SpriteFrames(Resource):
    animations: 'Array'
    def add_animation(self, anim: 'StringName') -> None: ...
    def has_animation(self, anim: 'StringName') -> bool: ...
    def duplicate_animation(self, anim_from: 'StringName', anim_to: 'StringName') -> None: ...
    def remove_animation(self, anim: 'StringName') -> None: ...
    def rename_animation(self, anim: 'StringName', newname: 'StringName') -> None: ...
    def get_animation_names(self) -> 'PackedStringArray': ...
    def set_animation_speed(self, anim: 'StringName', fps: float) -> None: ...
    def get_animation_speed(self, anim: 'StringName') -> float: ...
    def set_animation_loop(self, anim: 'StringName', loop: bool) -> None: ...
    def get_animation_loop(self, anim: 'StringName') -> bool: ...
    def add_frame(self, anim: 'StringName', texture: 'Texture2D', duration: float = default('''1.0'''), at_position: int = default('''-1''')) -> None: ...
    def set_frame(self, anim: 'StringName', idx: int, texture: 'Texture2D', duration: float = default('''1.0''')) -> None: ...
    def remove_frame(self, anim: 'StringName', idx: int) -> None: ...
    def get_frame_count(self, anim: 'StringName') -> int: ...
    def get_frame_texture(self, anim: 'StringName', idx: int) -> 'Texture2D': ...
    def get_frame_duration(self, anim: 'StringName', idx: int) -> float: ...
    def clear(self, anim: 'StringName') -> None: ...
    def clear_all(self) -> None: ...
    
class StandardMaterial3D(BaseMaterial3D):
    pass
    
class StaticBody2D(PhysicsBody2D):
    physics_material_override: 'PhysicsMaterial'
    constant_linear_velocity: 'Vector2'
    constant_angular_velocity: float
    def set_constant_linear_velocity(self, vel: 'Vector2') -> None: ...
    def set_constant_angular_velocity(self, vel: float) -> None: ...
    def get_constant_linear_velocity(self) -> 'Vector2': ...
    def get_constant_angular_velocity(self) -> float: ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...
    
class StaticBody3D(PhysicsBody3D):
    physics_material_override: 'PhysicsMaterial'
    constant_linear_velocity: 'Vector3'
    constant_angular_velocity: 'Vector3'
    def set_constant_linear_velocity(self, vel: 'Vector3') -> None: ...
    def set_constant_angular_velocity(self, vel: 'Vector3') -> None: ...
    def get_constant_linear_velocity(self) -> 'Vector3': ...
    def get_constant_angular_velocity(self) -> 'Vector3': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...
    
class StatusIndicator(Node):
    tooltip: 'String'
    icon: 'Texture2D'
    menu: 'NodePath'
    visible: bool
    pressed: Signal[Callable[['int', 'Vector2i'], None]]  # pressed(mouse_button: int, mouse_position: 'Vector2i')
    def set_tooltip(self, tooltip: 'String') -> None: ...
    def get_tooltip(self) -> 'String': ...
    def set_icon(self, texture: 'Texture2D') -> None: ...
    def get_icon(self) -> 'Texture2D': ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def set_menu(self, menu: 'NodePath') -> None: ...
    def get_menu(self) -> 'NodePath': ...
    def get_rect(self) -> 'Rect2': ...
    
class StreamPeer(RefCounted):
    big_endian: bool
    def put_data(self, data: 'PackedByteArray') -> 'Error': ...
    def put_partial_data(self, data: 'PackedByteArray') -> 'Array': ...
    def get_data(self, bytes: int) -> 'Array': ...
    def get_partial_data(self, bytes: int) -> 'Array': ...
    def get_available_bytes(self) -> int: ...
    def set_big_endian(self, enable: bool) -> None: ...
    def is_big_endian_enabled(self) -> bool: ...
    def put_8(self, value: int) -> None: ...
    def put_u8(self, value: int) -> None: ...
    def put_16(self, value: int) -> None: ...
    def put_u16(self, value: int) -> None: ...
    def put_32(self, value: int) -> None: ...
    def put_u32(self, value: int) -> None: ...
    def put_64(self, value: int) -> None: ...
    def put_u64(self, value: int) -> None: ...
    def put_half(self, value: float) -> None: ...
    def put_float(self, value: float) -> None: ...
    def put_double(self, value: float) -> None: ...
    def put_string(self, value: 'String') -> None: ...
    def put_utf8_string(self, value: 'String') -> None: ...
    def put_var(self, value: 'Variant', full_objects: bool = default('''false''')) -> None: ...
    def get_8(self) -> int: ...
    def get_u8(self) -> int: ...
    def get_16(self) -> int: ...
    def get_u16(self) -> int: ...
    def get_32(self) -> int: ...
    def get_u32(self) -> int: ...
    def get_64(self) -> int: ...
    def get_u64(self) -> int: ...
    def get_half(self) -> float: ...
    def get_float(self) -> float: ...
    def get_double(self) -> float: ...
    def get_string(self, bytes: int = default('''-1''')) -> 'String': ...
    def get_utf8_string(self, bytes: int = default('''-1''')) -> 'String': ...
    def get_var(self, allow_objects: bool = default('''false''')) -> 'Variant': ...
    
class StreamPeerBuffer(StreamPeer):
    data_array: 'PackedByteArray'
    def seek(self, position: int) -> None: ...
    def get_size(self) -> int: ...
    def get_position(self) -> int: ...
    def resize(self, size: int) -> None: ...
    def set_data_array(self, data: 'PackedByteArray') -> None: ...
    def get_data_array(self) -> 'PackedByteArray': ...
    def clear(self) -> None: ...
    def duplicate(self) -> 'StreamPeerBuffer': ...
    
class StreamPeerExtension(StreamPeer):
    def _get_data(self, r_buffer: 'intptr', r_bytes: int, r_received: 'intptr') -> 'Error': ...
    def _get_partial_data(self, r_buffer: 'intptr', r_bytes: int, r_received: 'intptr') -> 'Error': ...
    def _put_data(self, p_data: 'intptr', p_bytes: int, r_sent: 'intptr') -> 'Error': ...
    def _put_partial_data(self, p_data: 'intptr', p_bytes: int, r_sent: 'intptr') -> 'Error': ...
    def _get_available_bytes(self) -> int: ...
    
class StreamPeerGZIP(StreamPeer):
    def start_compression(self, use_deflate: bool = default('''false'''), buffer_size: int = default('''65535''')) -> 'Error': ...
    def start_decompression(self, use_deflate: bool = default('''false'''), buffer_size: int = default('''65535''')) -> 'Error': ...
    def finish(self) -> 'Error': ...
    def clear(self) -> None: ...
    
class StreamPeerTCP(StreamPeer):
    def bind(self, port: int, host: 'String' = default('''"*"''')) -> 'Error': ...
    def connect_to_host(self, host: 'String', port: int) -> 'Error': ...
    def poll(self) -> 'Error': ...
    def get_status(self) -> 'StreamPeerTCP_Status': ...
    def get_connected_host(self) -> 'String': ...
    def get_connected_port(self) -> int: ...
    def get_local_port(self) -> int: ...
    def disconnect_from_host(self) -> None: ...
    def set_no_delay(self, enabled: bool) -> None: ...
    
class StreamPeerTCP_Status(Enum):
    STATUS_NONE = 0
    STATUS_CONNECTING = 1
    STATUS_CONNECTED = 2
    STATUS_ERROR = 3

class StreamPeerTLS(StreamPeer):
    def poll(self) -> None: ...
    def accept_stream(self, stream: 'StreamPeer', server_options: 'TLSOptions') -> 'Error': ...
    def connect_to_stream(self, stream: 'StreamPeer', common_name: 'String', client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def get_status(self) -> 'StreamPeerTLS_Status': ...
    def get_stream(self) -> 'StreamPeer': ...
    def disconnect_from_stream(self) -> None: ...
    
class StreamPeerTLS_Status(Enum):
    STATUS_DISCONNECTED = 0
    STATUS_HANDSHAKING = 1
    STATUS_CONNECTED = 2
    STATUS_ERROR = 3
    STATUS_ERROR_HOSTNAME_MISMATCH = 4

class StyleBox(Resource):
    content_margin_left: float
    content_margin_top: float
    content_margin_right: float
    content_margin_bottom: float
    def _draw(self, to_canvas_item: 'RID', rect: 'Rect2') -> None: ...
    def _get_draw_rect(self, rect: 'Rect2') -> 'Rect2': ...
    def _get_minimum_size(self) -> 'Vector2': ...
    def _test_mask(self, point: 'Vector2', rect: 'Rect2') -> bool: ...
    def get_minimum_size(self) -> 'Vector2': ...
    def set_content_margin(self, margin: 'Side', offset: float) -> None: ...
    def set_content_margin_all(self, offset: float) -> None: ...
    def get_content_margin(self, margin: 'Side') -> float: ...
    def get_margin(self, margin: 'Side') -> float: ...
    def get_offset(self) -> 'Vector2': ...
    def draw(self, canvas_item: 'RID', rect: 'Rect2') -> None: ...
    def get_current_item_drawn(self) -> 'CanvasItem': ...
    def test_mask(self, point: 'Vector2', rect: 'Rect2') -> bool: ...
    
class StyleBoxEmpty(StyleBox):
    pass
    
class StyleBoxFlat(StyleBox):
    bg_color: 'Color'
    draw_center: bool
    skew: 'Vector2'
    border_width_left: int
    border_width_top: int
    border_width_right: int
    border_width_bottom: int
    border_color: 'Color'
    border_blend: bool
    corner_radius_top_left: int
    corner_radius_top_right: int
    corner_radius_bottom_right: int
    corner_radius_bottom_left: int
    corner_detail: int
    expand_margin_left: float
    expand_margin_top: float
    expand_margin_right: float
    expand_margin_bottom: float
    shadow_color: 'Color'
    shadow_size: int
    shadow_offset: 'Vector2'
    anti_aliasing: bool
    anti_aliasing_size: float
    def set_bg_color(self, color: 'Color') -> None: ...
    def get_bg_color(self) -> 'Color': ...
    def set_border_color(self, color: 'Color') -> None: ...
    def get_border_color(self) -> 'Color': ...
    def set_border_width_all(self, width: int) -> None: ...
    def get_border_width_min(self) -> int: ...
    def set_border_width(self, margin: 'Side', width: int) -> None: ...
    def get_border_width(self, margin: 'Side') -> int: ...
    def set_border_blend(self, blend: bool) -> None: ...
    def get_border_blend(self) -> bool: ...
    def set_corner_radius_all(self, radius: int) -> None: ...
    def set_corner_radius(self, corner: 'Corner', radius: int) -> None: ...
    def get_corner_radius(self, corner: 'Corner') -> int: ...
    def set_expand_margin(self, margin: 'Side', size: float) -> None: ...
    def set_expand_margin_all(self, size: float) -> None: ...
    def get_expand_margin(self, margin: 'Side') -> float: ...
    def set_draw_center(self, draw_center: bool) -> None: ...
    def is_draw_center_enabled(self) -> bool: ...
    def set_skew(self, skew: 'Vector2') -> None: ...
    def get_skew(self) -> 'Vector2': ...
    def set_shadow_color(self, color: 'Color') -> None: ...
    def get_shadow_color(self) -> 'Color': ...
    def set_shadow_size(self, size: int) -> None: ...
    def get_shadow_size(self) -> int: ...
    def set_shadow_offset(self, offset: 'Vector2') -> None: ...
    def get_shadow_offset(self) -> 'Vector2': ...
    def set_anti_aliased(self, anti_aliased: bool) -> None: ...
    def is_anti_aliased(self) -> bool: ...
    def set_aa_size(self, size: float) -> None: ...
    def get_aa_size(self) -> float: ...
    def set_corner_detail(self, detail: int) -> None: ...
    def get_corner_detail(self) -> int: ...
    
class StyleBoxLine(StyleBox):
    color: 'Color'
    grow_begin: float
    grow_end: float
    thickness: int
    vertical: bool
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_thickness(self, thickness: int) -> None: ...
    def get_thickness(self) -> int: ...
    def set_grow_begin(self, offset: float) -> None: ...
    def get_grow_begin(self) -> float: ...
    def set_grow_end(self, offset: float) -> None: ...
    def get_grow_end(self) -> float: ...
    def set_vertical(self, vertical: bool) -> None: ...
    def is_vertical(self) -> bool: ...
    
class StyleBoxTexture(StyleBox):
    texture: 'Texture2D'
    texture_margin_left: float
    texture_margin_top: float
    texture_margin_right: float
    texture_margin_bottom: float
    expand_margin_left: float
    expand_margin_top: float
    expand_margin_right: float
    expand_margin_bottom: float
    axis_stretch_horizontal: int
    axis_stretch_vertical: int
    region_rect: 'Rect2'
    modulate_color: 'Color'
    draw_center: bool
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_margin(self, margin: 'Side', size: float) -> None: ...
    def set_texture_margin_all(self, size: float) -> None: ...
    def get_texture_margin(self, margin: 'Side') -> float: ...
    def set_expand_margin(self, margin: 'Side', size: float) -> None: ...
    def set_expand_margin_all(self, size: float) -> None: ...
    def get_expand_margin(self, margin: 'Side') -> float: ...
    def set_region_rect(self, region: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_draw_center(self, enable: bool) -> None: ...
    def is_draw_center_enabled(self) -> bool: ...
    def set_modulate(self, color: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_h_axis_stretch_mode(self, mode: 'StyleBoxTexture_AxisStretchMode') -> None: ...
    def get_h_axis_stretch_mode(self) -> 'StyleBoxTexture_AxisStretchMode': ...
    def set_v_axis_stretch_mode(self, mode: 'StyleBoxTexture_AxisStretchMode') -> None: ...
    def get_v_axis_stretch_mode(self) -> 'StyleBoxTexture_AxisStretchMode': ...
    
class StyleBoxTexture_AxisStretchMode(Enum):
    AXIS_STRETCH_MODE_STRETCH = 0
    AXIS_STRETCH_MODE_TILE = 1
    AXIS_STRETCH_MODE_TILE_FIT = 2

class SubViewport(Viewport):
    size: 'Vector2i'
    size_2d_override: 'Vector2i'
    size_2d_override_stretch: bool
    render_target_clear_mode: int
    render_target_update_mode: int
    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def set_size_2d_override(self, size: 'Vector2i') -> None: ...
    def get_size_2d_override(self) -> 'Vector2i': ...
    def set_size_2d_override_stretch(self, enable: bool) -> None: ...
    def is_size_2d_override_stretch_enabled(self) -> bool: ...
    def set_update_mode(self, mode: 'SubViewport_UpdateMode') -> None: ...
    def get_update_mode(self) -> 'SubViewport_UpdateMode': ...
    def set_clear_mode(self, mode: 'SubViewport_ClearMode') -> None: ...
    def get_clear_mode(self) -> 'SubViewport_ClearMode': ...
    
class SubViewport_ClearMode(Enum):
    CLEAR_MODE_ALWAYS = 0
    CLEAR_MODE_NEVER = 1
    CLEAR_MODE_ONCE = 2

class SubViewport_UpdateMode(Enum):
    UPDATE_DISABLED = 0
    UPDATE_ONCE = 1
    UPDATE_WHEN_VISIBLE = 2
    UPDATE_WHEN_PARENT_VISIBLE = 3
    UPDATE_ALWAYS = 4

class SubViewportContainer(Container):
    stretch: bool
    stretch_shrink: int
    mouse_target: bool
    def _propagate_input_event(self, event: 'InputEvent') -> bool: ...
    def set_stretch(self, enable: bool) -> None: ...
    def is_stretch_enabled(self) -> bool: ...
    def set_stretch_shrink(self, amount: int) -> None: ...
    def get_stretch_shrink(self) -> int: ...
    def set_mouse_target(self, amount: bool) -> None: ...
    def is_mouse_target_enabled(self) -> bool: ...
    
class SubtweenTweener(Tweener):
    def set_delay(self, delay: float) -> 'SubtweenTweener': ...
    
class SurfaceTool(RefCounted):
    def set_skin_weight_count(self, count: 'SurfaceTool_SkinWeightCount') -> None: ...
    def get_skin_weight_count(self) -> 'SurfaceTool_SkinWeightCount': ...
    def set_custom_format(self, channel_index: int, format: 'SurfaceTool_CustomFormat') -> None: ...
    def get_custom_format(self, channel_index: int) -> 'SurfaceTool_CustomFormat': ...
    def begin(self, primitive: 'Mesh_PrimitiveType') -> None: ...
    def add_vertex(self, vertex: 'Vector3') -> None: ...
    def set_color(self, color: 'Color') -> None: ...
    def set_normal(self, normal: 'Vector3') -> None: ...
    def set_tangent(self, tangent: 'Plane') -> None: ...
    def set_uv(self, uv: 'Vector2') -> None: ...
    def set_uv2(self, uv2: 'Vector2') -> None: ...
    def set_bones(self, bones: 'PackedInt32Array') -> None: ...
    def set_weights(self, weights: 'PackedFloat32Array') -> None: ...
    def set_custom(self, channel_index: int, custom_color: 'Color') -> None: ...
    def set_smooth_group(self, index: int) -> None: ...
    def add_triangle_fan(self, vertices: 'PackedVector3Array', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), colors: 'PackedColorArray' = default('''PackedColorArray()'''), uv2s: 'PackedVector2Array' = default('''PackedVector2Array()'''), normals: 'PackedVector3Array' = default('''PackedVector3Array()'''), tangents: 'list[Plane]' = default('''Array[Plane]([])''')) -> None: ...
    def add_index(self, index: int) -> None: ...
    def index(self) -> None: ...
    def deindex(self) -> None: ...
    def generate_normals(self, flip: bool = default('''false''')) -> None: ...
    def generate_tangents(self) -> None: ...
    def optimize_indices_for_cache(self) -> None: ...
    def get_aabb(self) -> 'AABB': ...
    def generate_lod(self, nd_threshold: float, target_index_count: int = default('''3''')) -> 'PackedInt32Array': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_primitive_type(self) -> 'Mesh_PrimitiveType': ...
    def clear(self) -> None: ...
    def create_from(self, existing: 'Mesh', surface: int) -> None: ...
    def create_from_arrays(self, arrays: 'Array', primitive_type: 'Mesh_PrimitiveType' = default('''3''')) -> None: ...
    def create_from_blend_shape(self, existing: 'Mesh', surface: int, blend_shape: 'String') -> None: ...
    def append_from(self, existing: 'Mesh', surface: int, transform: 'Transform3D') -> None: ...
    def commit(self, existing: 'ArrayMesh' = default('''null'''), flags: int = default('''0''')) -> 'ArrayMesh': ...
    def commit_to_arrays(self) -> 'Array': ...
    
class SurfaceTool_CustomFormat(Enum):
    CUSTOM_RGBA8_UNORM = 0
    CUSTOM_RGBA8_SNORM = 1
    CUSTOM_RG_HALF = 2
    CUSTOM_RGBA_HALF = 3
    CUSTOM_R_FLOAT = 4
    CUSTOM_RG_FLOAT = 5
    CUSTOM_RGB_FLOAT = 6
    CUSTOM_RGBA_FLOAT = 7
    CUSTOM_MAX = 8

class SurfaceTool_SkinWeightCount(Enum):
    SKIN_4_WEIGHTS = 0
    SKIN_8_WEIGHTS = 1

class SyntaxHighlighter(Resource):
    def _get_line_syntax_highlighting(self, line: int) -> 'Dictionary': ...
    def _clear_highlighting_cache(self) -> None: ...
    def _update_cache(self) -> None: ...
    def get_line_syntax_highlighting(self, line: int) -> 'Dictionary': ...
    def update_cache(self) -> None: ...
    def clear_highlighting_cache(self) -> None: ...
    def get_text_edit(self) -> 'TextEdit': ...
    
class SystemFont(Font):
    font_names: 'PackedStringArray'
    font_italic: bool
    font_weight: int
    font_stretch: int
    antialiasing: int
    generate_mipmaps: bool
    disable_embedded_bitmaps: bool
    allow_system_fallback: bool
    force_autohinter: bool
    hinting: int
    subpixel_positioning: int
    keep_rounding_remainders: bool
    multichannel_signed_distance_field: bool
    msdf_pixel_range: int
    msdf_size: int
    oversampling: float
    def set_antialiasing(self, antialiasing: 'TextServer_FontAntialiasing') -> None: ...
    def get_antialiasing(self) -> 'TextServer_FontAntialiasing': ...
    def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps: bool) -> None: ...
    def get_disable_embedded_bitmaps(self) -> bool: ...
    def set_generate_mipmaps(self, generate_mipmaps: bool) -> None: ...
    def get_generate_mipmaps(self) -> bool: ...
    def set_allow_system_fallback(self, allow_system_fallback: bool) -> None: ...
    def is_allow_system_fallback(self) -> bool: ...
    def set_force_autohinter(self, force_autohinter: bool) -> None: ...
    def is_force_autohinter(self) -> bool: ...
    def set_hinting(self, hinting: 'TextServer_Hinting') -> None: ...
    def get_hinting(self) -> 'TextServer_Hinting': ...
    def set_subpixel_positioning(self, subpixel_positioning: 'TextServer_SubpixelPositioning') -> None: ...
    def get_subpixel_positioning(self) -> 'TextServer_SubpixelPositioning': ...
    def set_keep_rounding_remainders(self, keep_rounding_remainders: bool) -> None: ...
    def get_keep_rounding_remainders(self) -> bool: ...
    def set_multichannel_signed_distance_field(self, msdf: bool) -> None: ...
    def is_multichannel_signed_distance_field(self) -> bool: ...
    def set_msdf_pixel_range(self, msdf_pixel_range: int) -> None: ...
    def get_msdf_pixel_range(self) -> int: ...
    def set_msdf_size(self, msdf_size: int) -> None: ...
    def get_msdf_size(self) -> int: ...
    def set_oversampling(self, oversampling: float) -> None: ...
    def get_oversampling(self) -> float: ...
    def get_font_names(self) -> 'PackedStringArray': ...
    def set_font_names(self, names: 'PackedStringArray') -> None: ...
    def get_font_italic(self) -> bool: ...
    def set_font_italic(self, italic: bool) -> None: ...
    def set_font_weight(self, weight: int) -> None: ...
    def set_font_stretch(self, stretch: int) -> None: ...
    
class TCPServer(RefCounted):
    def listen(self, port: int, bind_address: 'String' = default('''"*"''')) -> 'Error': ...
    def is_connection_available(self) -> bool: ...
    def is_listening(self) -> bool: ...
    def get_local_port(self) -> int: ...
    def take_connection(self) -> 'StreamPeerTCP': ...
    def stop(self) -> None: ...
    
class TLSOptions(RefCounted):
    @staticmethod
    def client(trusted_chain: 'X509Certificate' = default('''null'''), common_name_override: 'String' = default('''""''')) -> 'TLSOptions': ...
    @staticmethod
    def client_unsafe(trusted_chain: 'X509Certificate' = default('''null''')) -> 'TLSOptions': ...
    @staticmethod
    def server(key: 'CryptoKey', certificate: 'X509Certificate') -> 'TLSOptions': ...
    def is_server(self) -> bool: ...
    def is_unsafe_client(self) -> bool: ...
    def get_common_name_override(self) -> 'String': ...
    def get_trusted_ca_chain(self) -> 'X509Certificate': ...
    def get_private_key(self) -> 'CryptoKey': ...
    def get_own_certificate(self) -> 'X509Certificate': ...
    
class TabBar(Control):
    current_tab: int
    tab_alignment: int
    clip_tabs: bool
    tab_close_display_policy: int
    max_tab_width: int
    scrolling_enabled: bool
    drag_to_rearrange_enabled: bool
    tabs_rearrange_group: int
    scroll_to_selected: bool
    select_with_rmb: bool
    deselect_enabled: bool
    tab_count: int
    tab_selected: Signal[Callable[['int'], None]]  # tab_selected(tab: int)
    tab_changed: Signal[Callable[['int'], None]]  # tab_changed(tab: int)
    tab_clicked: Signal[Callable[['int'], None]]  # tab_clicked(tab: int)
    tab_rmb_clicked: Signal[Callable[['int'], None]]  # tab_rmb_clicked(tab: int)
    tab_close_pressed: Signal[Callable[['int'], None]]  # tab_close_pressed(tab: int)
    tab_button_pressed: Signal[Callable[['int'], None]]  # tab_button_pressed(tab: int)
    tab_hovered: Signal[Callable[['int'], None]]  # tab_hovered(tab: int)
    active_tab_rearranged: Signal[Callable[['int'], None]]  # active_tab_rearranged(idx_to: int)
    def set_tab_count(self, count: int) -> None: ...
    def get_tab_count(self) -> int: ...
    def set_current_tab(self, tab_idx: int) -> None: ...
    def get_current_tab(self) -> int: ...
    def get_previous_tab(self) -> int: ...
    def select_previous_available(self) -> bool: ...
    def select_next_available(self) -> bool: ...
    def set_tab_title(self, tab_idx: int, title: 'String') -> None: ...
    def get_tab_title(self, tab_idx: int) -> 'String': ...
    def set_tab_tooltip(self, tab_idx: int, tooltip: 'String') -> None: ...
    def get_tab_tooltip(self, tab_idx: int) -> 'String': ...
    def set_tab_text_direction(self, tab_idx: int, direction: 'Control_TextDirection') -> None: ...
    def get_tab_text_direction(self, tab_idx: int) -> 'Control_TextDirection': ...
    def set_tab_language(self, tab_idx: int, language: 'String') -> None: ...
    def get_tab_language(self, tab_idx: int) -> 'String': ...
    def set_tab_icon(self, tab_idx: int, icon: 'Texture2D') -> None: ...
    def get_tab_icon(self, tab_idx: int) -> 'Texture2D': ...
    def set_tab_icon_max_width(self, tab_idx: int, width: int) -> None: ...
    def get_tab_icon_max_width(self, tab_idx: int) -> int: ...
    def set_tab_button_icon(self, tab_idx: int, icon: 'Texture2D') -> None: ...
    def get_tab_button_icon(self, tab_idx: int) -> 'Texture2D': ...
    def set_tab_disabled(self, tab_idx: int, disabled: bool) -> None: ...
    def is_tab_disabled(self, tab_idx: int) -> bool: ...
    def set_tab_hidden(self, tab_idx: int, hidden: bool) -> None: ...
    def is_tab_hidden(self, tab_idx: int) -> bool: ...
    def set_tab_metadata(self, tab_idx: int, metadata: 'Variant') -> None: ...
    def get_tab_metadata(self, tab_idx: int) -> 'Variant': ...
    def remove_tab(self, tab_idx: int) -> None: ...
    def add_tab(self, title: 'String' = default('''""'''), icon: 'Texture2D' = default('''null''')) -> None: ...
    def get_tab_idx_at_point(self, point: 'Vector2') -> int: ...
    def set_tab_alignment(self, alignment: 'TabBar_AlignmentMode') -> None: ...
    def get_tab_alignment(self) -> 'TabBar_AlignmentMode': ...
    def set_clip_tabs(self, clip_tabs: bool) -> None: ...
    def get_clip_tabs(self) -> bool: ...
    def get_tab_offset(self) -> int: ...
    def get_offset_buttons_visible(self) -> bool: ...
    def ensure_tab_visible(self, idx: int) -> None: ...
    def get_tab_rect(self, tab_idx: int) -> 'Rect2': ...
    def move_tab(self, from_: int, to: int) -> None: ...
    def set_tab_close_display_policy(self, policy: 'TabBar_CloseButtonDisplayPolicy') -> None: ...
    def get_tab_close_display_policy(self) -> 'TabBar_CloseButtonDisplayPolicy': ...
    def set_max_tab_width(self, width: int) -> None: ...
    def get_max_tab_width(self) -> int: ...
    def set_scrolling_enabled(self, enabled: bool) -> None: ...
    def get_scrolling_enabled(self) -> bool: ...
    def set_drag_to_rearrange_enabled(self, enabled: bool) -> None: ...
    def get_drag_to_rearrange_enabled(self) -> bool: ...
    def set_tabs_rearrange_group(self, group_id: int) -> None: ...
    def get_tabs_rearrange_group(self) -> int: ...
    def set_scroll_to_selected(self, enabled: bool) -> None: ...
    def get_scroll_to_selected(self) -> bool: ...
    def set_select_with_rmb(self, enabled: bool) -> None: ...
    def get_select_with_rmb(self) -> bool: ...
    def set_deselect_enabled(self, enabled: bool) -> None: ...
    def get_deselect_enabled(self) -> bool: ...
    def clear_tabs(self) -> None: ...
    
class TabBar_AlignmentMode(Enum):
    ALIGNMENT_LEFT = 0
    ALIGNMENT_CENTER = 1
    ALIGNMENT_RIGHT = 2
    ALIGNMENT_MAX = 3

class TabBar_CloseButtonDisplayPolicy(Enum):
    CLOSE_BUTTON_SHOW_NEVER = 0
    CLOSE_BUTTON_SHOW_ACTIVE_ONLY = 1
    CLOSE_BUTTON_SHOW_ALWAYS = 2
    CLOSE_BUTTON_MAX = 3

class TabContainer(Container):
    tab_alignment: int
    current_tab: int
    tabs_position: int
    clip_tabs: bool
    tabs_visible: bool
    all_tabs_in_front: bool
    drag_to_rearrange_enabled: bool
    tabs_rearrange_group: int
    use_hidden_tabs_for_min_size: bool
    tab_focus_mode: int
    deselect_enabled: bool
    active_tab_rearranged: Signal[Callable[['int'], None]]  # active_tab_rearranged(idx_to: int)
    tab_changed: Signal[Callable[['int'], None]]  # tab_changed(tab: int)
    tab_clicked: Signal[Callable[['int'], None]]  # tab_clicked(tab: int)
    tab_hovered: Signal[Callable[['int'], None]]  # tab_hovered(tab: int)
    tab_selected: Signal[Callable[['int'], None]]  # tab_selected(tab: int)
    tab_button_pressed: Signal[Callable[['int'], None]]  # tab_button_pressed(tab: int)
    pre_popup_pressed: Signal[Callable[[], None]]  # pre_popup_pressed()
    def get_tab_count(self) -> int: ...
    def set_current_tab(self, tab_idx: int) -> None: ...
    def get_current_tab(self) -> int: ...
    def get_previous_tab(self) -> int: ...
    def select_previous_available(self) -> bool: ...
    def select_next_available(self) -> bool: ...
    def get_current_tab_control(self) -> 'Control': ...
    def get_tab_bar(self) -> 'TabBar': ...
    def get_tab_control(self, tab_idx: int) -> 'Control': ...
    def set_tab_alignment(self, alignment: 'TabBar_AlignmentMode') -> None: ...
    def get_tab_alignment(self) -> 'TabBar_AlignmentMode': ...
    def set_tabs_position(self, tabs_position: 'TabContainer_TabPosition') -> None: ...
    def get_tabs_position(self) -> 'TabContainer_TabPosition': ...
    def set_clip_tabs(self, clip_tabs: bool) -> None: ...
    def get_clip_tabs(self) -> bool: ...
    def set_tabs_visible(self, visible: bool) -> None: ...
    def are_tabs_visible(self) -> bool: ...
    def set_all_tabs_in_front(self, is_front: bool) -> None: ...
    def is_all_tabs_in_front(self) -> bool: ...
    def set_tab_title(self, tab_idx: int, title: 'String') -> None: ...
    def get_tab_title(self, tab_idx: int) -> 'String': ...
    def set_tab_tooltip(self, tab_idx: int, tooltip: 'String') -> None: ...
    def get_tab_tooltip(self, tab_idx: int) -> 'String': ...
    def set_tab_icon(self, tab_idx: int, icon: 'Texture2D') -> None: ...
    def get_tab_icon(self, tab_idx: int) -> 'Texture2D': ...
    def set_tab_icon_max_width(self, tab_idx: int, width: int) -> None: ...
    def get_tab_icon_max_width(self, tab_idx: int) -> int: ...
    def set_tab_disabled(self, tab_idx: int, disabled: bool) -> None: ...
    def is_tab_disabled(self, tab_idx: int) -> bool: ...
    def set_tab_hidden(self, tab_idx: int, hidden: bool) -> None: ...
    def is_tab_hidden(self, tab_idx: int) -> bool: ...
    def set_tab_metadata(self, tab_idx: int, metadata: 'Variant') -> None: ...
    def get_tab_metadata(self, tab_idx: int) -> 'Variant': ...
    def set_tab_button_icon(self, tab_idx: int, icon: 'Texture2D') -> None: ...
    def get_tab_button_icon(self, tab_idx: int) -> 'Texture2D': ...
    def get_tab_idx_at_point(self, point: 'Vector2') -> int: ...
    def get_tab_idx_from_control(self, control: 'Control') -> int: ...
    def set_popup(self, popup: 'Node') -> None: ...
    def get_popup(self) -> 'Popup': ...
    def set_drag_to_rearrange_enabled(self, enabled: bool) -> None: ...
    def get_drag_to_rearrange_enabled(self) -> bool: ...
    def set_tabs_rearrange_group(self, group_id: int) -> None: ...
    def get_tabs_rearrange_group(self) -> int: ...
    def set_use_hidden_tabs_for_min_size(self, enabled: bool) -> None: ...
    def get_use_hidden_tabs_for_min_size(self) -> bool: ...
    def set_tab_focus_mode(self, focus_mode: 'Control_FocusMode') -> None: ...
    def get_tab_focus_mode(self) -> 'Control_FocusMode': ...
    def set_deselect_enabled(self, enabled: bool) -> None: ...
    def get_deselect_enabled(self) -> bool: ...
    
class TabContainer_TabPosition(Enum):
    POSITION_TOP = 0
    POSITION_BOTTOM = 1
    POSITION_MAX = 2

class TextEdit(Control):
    text: 'String'
    placeholder_text: 'String'
    editable: bool
    context_menu_enabled: bool
    emoji_menu_enabled: bool
    shortcut_keys_enabled: bool
    selecting_enabled: bool
    deselect_on_focus_loss_enabled: bool
    drag_and_drop_selection_enabled: bool
    virtual_keyboard_enabled: bool
    middle_mouse_paste_enabled: bool
    empty_selection_clipboard_enabled: bool
    wrap_mode: int
    autowrap_mode: int
    indent_wrapped_lines: bool
    scroll_smooth: bool
    scroll_v_scroll_speed: float
    scroll_past_end_of_file: bool
    scroll_vertical: float
    scroll_horizontal: int
    scroll_fit_content_height: bool
    scroll_fit_content_width: bool
    minimap_draw: bool
    minimap_width: int
    caret_type: int
    caret_blink: bool
    caret_blink_interval: float
    caret_draw_when_editable_disabled: bool
    caret_move_on_right_click: bool
    caret_mid_grapheme: bool
    caret_multiple: bool
    use_default_word_separators: bool
    use_custom_word_separators: bool
    custom_word_separators: 'String'
    syntax_highlighter: 'SyntaxHighlighter'
    highlight_all_occurrences: bool
    highlight_current_line: bool
    draw_control_chars: bool
    draw_tabs: bool
    draw_spaces: bool
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    text_set: Signal[Callable[[], None]]  # text_set()
    text_changed: Signal[Callable[[], None]]  # text_changed()
    lines_edited_from: Signal[Callable[['int', 'int'], None]]  # lines_edited_from(from_line: int, to_line: int)
    caret_changed: Signal[Callable[[], None]]  # caret_changed()
    gutter_clicked: Signal[Callable[['int', 'int'], None]]  # gutter_clicked(line: int, gutter: int)
    gutter_added: Signal[Callable[[], None]]  # gutter_added()
    gutter_removed: Signal[Callable[[], None]]  # gutter_removed()
    def _handle_unicode_input(self, unicode_char: int, caret_index: int) -> None: ...
    def _backspace(self, caret_index: int) -> None: ...
    def _cut(self, caret_index: int) -> None: ...
    def _copy(self, caret_index: int) -> None: ...
    def _paste(self, caret_index: int) -> None: ...
    def _paste_primary_clipboard(self, caret_index: int) -> None: ...
    def has_ime_text(self) -> bool: ...
    def cancel_ime(self) -> None: ...
    def apply_ime(self) -> None: ...
    def set_editable(self, enabled: bool) -> None: ...
    def is_editable(self) -> bool: ...
    def set_text_direction(self, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control_TextDirection': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_tab_size(self, size: int) -> None: ...
    def get_tab_size(self) -> int: ...
    def set_indent_wrapped_lines(self, enabled: bool) -> None: ...
    def is_indent_wrapped_lines(self) -> bool: ...
    def set_overtype_mode_enabled(self, enabled: bool) -> None: ...
    def is_overtype_mode_enabled(self) -> bool: ...
    def set_context_menu_enabled(self, enabled: bool) -> None: ...
    def is_context_menu_enabled(self) -> bool: ...
    def set_emoji_menu_enabled(self, enable: bool) -> None: ...
    def is_emoji_menu_enabled(self) -> bool: ...
    def set_shortcut_keys_enabled(self, enabled: bool) -> None: ...
    def is_shortcut_keys_enabled(self) -> bool: ...
    def set_virtual_keyboard_enabled(self, enabled: bool) -> None: ...
    def is_virtual_keyboard_enabled(self) -> bool: ...
    def set_middle_mouse_paste_enabled(self, enabled: bool) -> None: ...
    def is_middle_mouse_paste_enabled(self) -> bool: ...
    def set_empty_selection_clipboard_enabled(self, enabled: bool) -> None: ...
    def is_empty_selection_clipboard_enabled(self) -> bool: ...
    def clear(self) -> None: ...
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def get_line_count(self) -> int: ...
    def set_placeholder(self, text: 'String') -> None: ...
    def get_placeholder(self) -> 'String': ...
    def set_line(self, line: int, new_text: 'String') -> None: ...
    def get_line(self, line: int) -> 'String': ...
    def get_line_with_ime(self, line: int) -> 'String': ...
    def get_line_width(self, line: int, wrap_index: int = default('''-1''')) -> int: ...
    def get_line_height(self) -> int: ...
    def get_indent_level(self, line: int) -> int: ...
    def get_first_non_whitespace_column(self, line: int) -> int: ...
    def swap_lines(self, from_line: int, to_line: int) -> None: ...
    def insert_line_at(self, line: int, text: 'String') -> None: ...
    def remove_line_at(self, line: int, move_carets_down: bool = default('''true''')) -> None: ...
    def insert_text_at_caret(self, text: 'String', caret_index: int = default('''-1''')) -> None: ...
    def insert_text(self, text: 'String', line: int, column: int, before_selection_begin: bool = default('''true'''), before_selection_end: bool = default('''false''')) -> None: ...
    def remove_text(self, from_line: int, from_column: int, to_line: int, to_column: int) -> None: ...
    def get_last_unhidden_line(self) -> int: ...
    def get_next_visible_line_offset_from(self, line: int, visible_amount: int) -> int: ...
    def get_next_visible_line_index_offset_from(self, line: int, wrap_index: int, visible_amount: int) -> 'Vector2i': ...
    def backspace(self, caret_index: int = default('''-1''')) -> None: ...
    def cut(self, caret_index: int = default('''-1''')) -> None: ...
    def copy(self, caret_index: int = default('''-1''')) -> None: ...
    def paste(self, caret_index: int = default('''-1''')) -> None: ...
    def paste_primary_clipboard(self, caret_index: int = default('''-1''')) -> None: ...
    def start_action(self, action: 'TextEdit_EditAction') -> None: ...
    def end_action(self) -> None: ...
    def begin_complex_operation(self) -> None: ...
    def end_complex_operation(self) -> None: ...
    def has_undo(self) -> bool: ...
    def has_redo(self) -> bool: ...
    def undo(self) -> None: ...
    def redo(self) -> None: ...
    def clear_undo_history(self) -> None: ...
    def tag_saved_version(self) -> None: ...
    def get_version(self) -> int: ...
    def get_saved_version(self) -> int: ...
    def set_search_text(self, search_text: 'String') -> None: ...
    def set_search_flags(self, flags: int) -> None: ...
    def search(self, text: 'String', flags: int, from_line: int, from_column: int) -> 'Vector2i': ...
    def set_tooltip_request_func(self, callback: 'Callable') -> None: ...
    def get_local_mouse_pos(self) -> 'Vector2': ...
    def get_word_at_pos(self, position: 'Vector2') -> 'String': ...
    def get_line_column_at_pos(self, position: 'Vector2i', clamp_line: bool = default('''true'''), clamp_column: bool = default('''true''')) -> 'Vector2i': ...
    def get_pos_at_line_column(self, line: int, column: int) -> 'Vector2i': ...
    def get_rect_at_line_column(self, line: int, column: int) -> 'Rect2i': ...
    def get_minimap_line_at_pos(self, position: 'Vector2i') -> int: ...
    def is_dragging_cursor(self) -> bool: ...
    def is_mouse_over_selection(self, edges: bool, caret_index: int = default('''-1''')) -> bool: ...
    def set_caret_type(self, type: 'TextEdit_CaretType') -> None: ...
    def get_caret_type(self) -> 'TextEdit_CaretType': ...
    def set_caret_blink_enabled(self, enable: bool) -> None: ...
    def is_caret_blink_enabled(self) -> bool: ...
    def set_caret_blink_interval(self, interval: float) -> None: ...
    def get_caret_blink_interval(self) -> float: ...
    def set_draw_caret_when_editable_disabled(self, enable: bool) -> None: ...
    def is_drawing_caret_when_editable_disabled(self) -> bool: ...
    def set_move_caret_on_right_click_enabled(self, enable: bool) -> None: ...
    def is_move_caret_on_right_click_enabled(self) -> bool: ...
    def set_caret_mid_grapheme_enabled(self, enabled: bool) -> None: ...
    def is_caret_mid_grapheme_enabled(self) -> bool: ...
    def set_multiple_carets_enabled(self, enabled: bool) -> None: ...
    def is_multiple_carets_enabled(self) -> bool: ...
    def add_caret(self, line: int, column: int) -> int: ...
    def remove_caret(self, caret: int) -> None: ...
    def remove_secondary_carets(self) -> None: ...
    def get_caret_count(self) -> int: ...
    def add_caret_at_carets(self, below: bool) -> None: ...
    def get_sorted_carets(self, include_ignored_carets: bool = default('''false''')) -> 'PackedInt32Array': ...
    def collapse_carets(self, from_line: int, from_column: int, to_line: int, to_column: int, inclusive: bool = default('''false''')) -> None: ...
    def merge_overlapping_carets(self) -> None: ...
    def begin_multicaret_edit(self) -> None: ...
    def end_multicaret_edit(self) -> None: ...
    def is_in_mulitcaret_edit(self) -> bool: ...
    def multicaret_edit_ignore_caret(self, caret_index: int) -> bool: ...
    def is_caret_visible(self, caret_index: int = default('''0''')) -> bool: ...
    def get_caret_draw_pos(self, caret_index: int = default('''0''')) -> 'Vector2': ...
    def set_caret_line(self, line: int, adjust_viewport: bool = default('''true'''), can_be_hidden: bool = default('''true'''), wrap_index: int = default('''0'''), caret_index: int = default('''0''')) -> None: ...
    def get_caret_line(self, caret_index: int = default('''0''')) -> int: ...
    def set_caret_column(self, column: int, adjust_viewport: bool = default('''true'''), caret_index: int = default('''0''')) -> None: ...
    def get_caret_column(self, caret_index: int = default('''0''')) -> int: ...
    def get_caret_wrap_index(self, caret_index: int = default('''0''')) -> int: ...
    def get_word_under_caret(self, caret_index: int = default('''-1''')) -> 'String': ...
    def set_use_default_word_separators(self, enabled: bool) -> None: ...
    def is_default_word_separators_enabled(self) -> bool: ...
    def set_use_custom_word_separators(self, enabled: bool) -> None: ...
    def is_custom_word_separators_enabled(self) -> bool: ...
    def set_custom_word_separators(self, custom_word_separators: 'String') -> None: ...
    def get_custom_word_separators(self) -> 'String': ...
    def set_selecting_enabled(self, enable: bool) -> None: ...
    def is_selecting_enabled(self) -> bool: ...
    def set_deselect_on_focus_loss_enabled(self, enable: bool) -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> bool: ...
    def set_drag_and_drop_selection_enabled(self, enable: bool) -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> bool: ...
    def set_selection_mode(self, mode: 'TextEdit_SelectionMode') -> None: ...
    def get_selection_mode(self) -> 'TextEdit_SelectionMode': ...
    def select_all(self) -> None: ...
    def select_word_under_caret(self, caret_index: int = default('''-1''')) -> None: ...
    def add_selection_for_next_occurrence(self) -> None: ...
    def skip_selection_for_next_occurrence(self) -> None: ...
    def select(self, origin_line: int, origin_column: int, caret_line: int, caret_column: int, caret_index: int = default('''0''')) -> None: ...
    def has_selection(self, caret_index: int = default('''-1''')) -> bool: ...
    def get_selected_text(self, caret_index: int = default('''-1''')) -> 'String': ...
    def get_selection_at_line_column(self, line: int, column: int, include_edges: bool = default('''true'''), only_selections: bool = default('''true''')) -> int: ...
    def get_line_ranges_from_carets(self, only_selections: bool = default('''false'''), merge_adjacent: bool = default('''true''')) -> 'list[Vector2i]': ...
    def get_selection_origin_line(self, caret_index: int = default('''0''')) -> int: ...
    def get_selection_origin_column(self, caret_index: int = default('''0''')) -> int: ...
    def set_selection_origin_line(self, line: int, can_be_hidden: bool = default('''true'''), wrap_index: int = default('''-1'''), caret_index: int = default('''0''')) -> None: ...
    def set_selection_origin_column(self, column: int, caret_index: int = default('''0''')) -> None: ...
    def get_selection_from_line(self, caret_index: int = default('''0''')) -> int: ...
    def get_selection_from_column(self, caret_index: int = default('''0''')) -> int: ...
    def get_selection_to_line(self, caret_index: int = default('''0''')) -> int: ...
    def get_selection_to_column(self, caret_index: int = default('''0''')) -> int: ...
    def is_caret_after_selection_origin(self, caret_index: int = default('''0''')) -> bool: ...
    def deselect(self, caret_index: int = default('''-1''')) -> None: ...
    def delete_selection(self, caret_index: int = default('''-1''')) -> None: ...
    def set_line_wrapping_mode(self, mode: 'TextEdit_LineWrappingMode') -> None: ...
    def get_line_wrapping_mode(self) -> 'TextEdit_LineWrappingMode': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer_AutowrapMode': ...
    def is_line_wrapped(self, line: int) -> bool: ...
    def get_line_wrap_count(self, line: int) -> int: ...
    def get_line_wrap_index_at_column(self, line: int, column: int) -> int: ...
    def get_line_wrapped_text(self, line: int) -> 'PackedStringArray': ...
    def set_smooth_scroll_enabled(self, enable: bool) -> None: ...
    def is_smooth_scroll_enabled(self) -> bool: ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def get_h_scroll_bar(self) -> 'HScrollBar': ...
    def set_v_scroll(self, value: float) -> None: ...
    def get_v_scroll(self) -> float: ...
    def set_h_scroll(self, value: int) -> None: ...
    def get_h_scroll(self) -> int: ...
    def set_scroll_past_end_of_file_enabled(self, enable: bool) -> None: ...
    def is_scroll_past_end_of_file_enabled(self) -> bool: ...
    def set_v_scroll_speed(self, speed: float) -> None: ...
    def get_v_scroll_speed(self) -> float: ...
    def set_fit_content_height_enabled(self, enabled: bool) -> None: ...
    def is_fit_content_height_enabled(self) -> bool: ...
    def set_fit_content_width_enabled(self, enabled: bool) -> None: ...
    def is_fit_content_width_enabled(self) -> bool: ...
    def get_scroll_pos_for_line(self, line: int, wrap_index: int = default('''0''')) -> float: ...
    def set_line_as_first_visible(self, line: int, wrap_index: int = default('''0''')) -> None: ...
    def get_first_visible_line(self) -> int: ...
    def set_line_as_center_visible(self, line: int, wrap_index: int = default('''0''')) -> None: ...
    def set_line_as_last_visible(self, line: int, wrap_index: int = default('''0''')) -> None: ...
    def get_last_full_visible_line(self) -> int: ...
    def get_last_full_visible_line_wrap_index(self) -> int: ...
    def get_visible_line_count(self) -> int: ...
    def get_visible_line_count_in_range(self, from_line: int, to_line: int) -> int: ...
    def get_total_visible_line_count(self) -> int: ...
    def adjust_viewport_to_caret(self, caret_index: int = default('''0''')) -> None: ...
    def center_viewport_to_caret(self, caret_index: int = default('''0''')) -> None: ...
    def set_draw_minimap(self, enabled: bool) -> None: ...
    def is_drawing_minimap(self) -> bool: ...
    def set_minimap_width(self, width: int) -> None: ...
    def get_minimap_width(self) -> int: ...
    def get_minimap_visible_lines(self) -> int: ...
    def add_gutter(self, at: int = default('''-1''')) -> None: ...
    def remove_gutter(self, gutter: int) -> None: ...
    def get_gutter_count(self) -> int: ...
    def set_gutter_name(self, gutter: int, name: 'String') -> None: ...
    def get_gutter_name(self, gutter: int) -> 'String': ...
    def set_gutter_type(self, gutter: int, type: 'TextEdit_GutterType') -> None: ...
    def get_gutter_type(self, gutter: int) -> 'TextEdit_GutterType': ...
    def set_gutter_width(self, gutter: int, width: int) -> None: ...
    def get_gutter_width(self, gutter: int) -> int: ...
    def set_gutter_draw(self, gutter: int, draw: bool) -> None: ...
    def is_gutter_drawn(self, gutter: int) -> bool: ...
    def set_gutter_clickable(self, gutter: int, clickable: bool) -> None: ...
    def is_gutter_clickable(self, gutter: int) -> bool: ...
    def set_gutter_overwritable(self, gutter: int, overwritable: bool) -> None: ...
    def is_gutter_overwritable(self, gutter: int) -> bool: ...
    def merge_gutters(self, from_line: int, to_line: int) -> None: ...
    def set_gutter_custom_draw(self, column: int, draw_callback: 'Callable') -> None: ...
    def get_total_gutter_width(self) -> int: ...
    def set_line_gutter_metadata(self, line: int, gutter: int, metadata: 'Variant') -> None: ...
    def get_line_gutter_metadata(self, line: int, gutter: int) -> 'Variant': ...
    def set_line_gutter_text(self, line: int, gutter: int, text: 'String') -> None: ...
    def get_line_gutter_text(self, line: int, gutter: int) -> 'String': ...
    def set_line_gutter_icon(self, line: int, gutter: int, icon: 'Texture2D') -> None: ...
    def get_line_gutter_icon(self, line: int, gutter: int) -> 'Texture2D': ...
    def set_line_gutter_item_color(self, line: int, gutter: int, color: 'Color') -> None: ...
    def get_line_gutter_item_color(self, line: int, gutter: int) -> 'Color': ...
    def set_line_gutter_clickable(self, line: int, gutter: int, clickable: bool) -> None: ...
    def is_line_gutter_clickable(self, line: int, gutter: int) -> bool: ...
    def set_line_background_color(self, line: int, color: 'Color') -> None: ...
    def get_line_background_color(self, line: int) -> 'Color': ...
    def set_syntax_highlighter(self, syntax_highlighter: 'SyntaxHighlighter') -> None: ...
    def get_syntax_highlighter(self) -> 'SyntaxHighlighter': ...
    def set_highlight_current_line(self, enabled: bool) -> None: ...
    def is_highlight_current_line_enabled(self) -> bool: ...
    def set_highlight_all_occurrences(self, enabled: bool) -> None: ...
    def is_highlight_all_occurrences_enabled(self) -> bool: ...
    def get_draw_control_chars(self) -> bool: ...
    def set_draw_control_chars(self, enabled: bool) -> None: ...
    def set_draw_tabs(self, enabled: bool) -> None: ...
    def is_drawing_tabs(self) -> bool: ...
    def set_draw_spaces(self, enabled: bool) -> None: ...
    def is_drawing_spaces(self) -> bool: ...
    def get_menu(self) -> 'PopupMenu': ...
    def is_menu_visible(self) -> bool: ...
    def menu_option(self, option: int) -> None: ...
    def adjust_carets_after_edit(self, caret: int, from_line: int, from_col: int, to_line: int, to_col: int) -> None: ...
    def get_caret_index_edit_order(self) -> 'PackedInt32Array': ...
    def get_selection_line(self, caret_index: int = default('''0''')) -> int: ...
    def get_selection_column(self, caret_index: int = default('''0''')) -> int: ...
    
class TextEdit_MenuItems(Enum):
    MENU_CUT = 0
    MENU_COPY = 1
    MENU_PASTE = 2
    MENU_CLEAR = 3
    MENU_SELECT_ALL = 4
    MENU_UNDO = 5
    MENU_REDO = 6
    MENU_SUBMENU_TEXT_DIR = 7
    MENU_DIR_INHERITED = 8
    MENU_DIR_AUTO = 9
    MENU_DIR_LTR = 10
    MENU_DIR_RTL = 11
    MENU_DISPLAY_UCC = 12
    MENU_SUBMENU_INSERT_UCC = 13
    MENU_INSERT_LRM = 14
    MENU_INSERT_RLM = 15
    MENU_INSERT_LRE = 16
    MENU_INSERT_RLE = 17
    MENU_INSERT_LRO = 18
    MENU_INSERT_RLO = 19
    MENU_INSERT_PDF = 20
    MENU_INSERT_ALM = 21
    MENU_INSERT_LRI = 22
    MENU_INSERT_RLI = 23
    MENU_INSERT_FSI = 24
    MENU_INSERT_PDI = 25
    MENU_INSERT_ZWJ = 26
    MENU_INSERT_ZWNJ = 27
    MENU_INSERT_WJ = 28
    MENU_INSERT_SHY = 29
    MENU_EMOJI_AND_SYMBOL = 30
    MENU_MAX = 31

class TextEdit_EditAction(Enum):
    ACTION_NONE = 0
    ACTION_TYPING = 1
    ACTION_BACKSPACE = 2
    ACTION_DELETE = 3

class TextEdit_SearchFlags(Enum):
    SEARCH_MATCH_CASE = 1
    SEARCH_WHOLE_WORDS = 2
    SEARCH_BACKWARDS = 4

class TextEdit_CaretType(Enum):
    CARET_TYPE_LINE = 0
    CARET_TYPE_BLOCK = 1

class TextEdit_SelectionMode(Enum):
    SELECTION_MODE_NONE = 0
    SELECTION_MODE_SHIFT = 1
    SELECTION_MODE_POINTER = 2
    SELECTION_MODE_WORD = 3
    SELECTION_MODE_LINE = 4

class TextEdit_LineWrappingMode(Enum):
    LINE_WRAPPING_NONE = 0
    LINE_WRAPPING_BOUNDARY = 1

class TextEdit_GutterType(Enum):
    GUTTER_TYPE_STRING = 0
    GUTTER_TYPE_ICON = 1
    GUTTER_TYPE_CUSTOM = 2

class TextLine(RefCounted):
    direction: int
    orientation: int
    preserve_invalid: bool
    preserve_control: bool
    width: float
    alignment: int
    flags: int
    text_overrun_behavior: int
    ellipsis_char: 'String'
    def clear(self) -> None: ...
    def set_direction(self, direction: 'TextServer_Direction') -> None: ...
    def get_direction(self) -> 'TextServer_Direction': ...
    def set_orientation(self, orientation: 'TextServer_Orientation') -> None: ...
    def get_orientation(self) -> 'TextServer_Orientation': ...
    def set_preserve_invalid(self, enabled: bool) -> None: ...
    def get_preserve_invalid(self) -> bool: ...
    def set_preserve_control(self, enabled: bool) -> None: ...
    def get_preserve_control(self) -> bool: ...
    def set_bidi_override(self, override: 'Array') -> None: ...
    def add_string(self, text: 'String', font: 'Font', font_size: int, language: 'String' = default('''""'''), meta: 'Variant' = default('''null''')) -> bool: ...
    def add_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = default('''5'''), length: int = default('''1'''), baseline: float = default('''0.0''')) -> bool: ...
    def resize_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = default('''5'''), baseline: float = default('''0.0''')) -> bool: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def tab_align(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def set_flags(self, flags: 'TextServer_JustificationFlag') -> None: ...
    def get_flags(self) -> 'TextServer_JustificationFlag': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer_OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer_OverrunBehavior': ...
    def set_ellipsis_char(self, char: 'String') -> None: ...
    def get_ellipsis_char(self) -> 'String': ...
    def get_objects(self) -> 'Array': ...
    def get_object_rect(self, key: 'Variant') -> 'Rect2': ...
    def get_size(self) -> 'Vector2': ...
    def get_rid(self) -> 'RID': ...
    def get_line_ascent(self) -> float: ...
    def get_line_descent(self) -> float: ...
    def get_line_width(self) -> float: ...
    def get_line_underline_position(self) -> float: ...
    def get_line_underline_thickness(self) -> float: ...
    def draw(self, canvas: 'RID', pos: 'Vector2', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_outline(self, canvas: 'RID', pos: 'Vector2', outline_size: int = default('''1'''), color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def hit_test(self, coords: float) -> int: ...
    
class TextMesh(PrimitiveMesh):
    text: 'String'
    font: 'Font'
    font_size: int
    horizontal_alignment: int
    vertical_alignment: int
    uppercase: bool
    line_spacing: float
    autowrap_mode: int
    justification_flags: int
    pixel_size: float
    curve_step: float
    depth: float
    width: float
    offset: 'Vector2'
    text_direction: int
    language: 'String'
    structured_text_bidi_override: int
    structured_text_bidi_override_options: 'Array'
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_text(self, text: 'String') -> None: ...
    def get_text(self) -> 'String': ...
    def set_font(self, font: 'Font') -> None: ...
    def get_font(self) -> 'Font': ...
    def set_font_size(self, font_size: int) -> None: ...
    def get_font_size(self) -> int: ...
    def set_line_spacing(self, line_spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer_AutowrapMode': ...
    def set_justification_flags(self, justification_flags: 'TextServer_JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer_JustificationFlag': ...
    def set_depth(self, depth: float) -> None: ...
    def get_depth(self) -> float: ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def set_pixel_size(self, pixel_size: float) -> None: ...
    def get_pixel_size(self) -> float: ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_curve_step(self, curve_step: float) -> None: ...
    def get_curve_step(self) -> float: ...
    def set_text_direction(self, direction: 'TextServer_Direction') -> None: ...
    def get_text_direction(self) -> 'TextServer_Direction': ...
    def set_language(self, language: 'String') -> None: ...
    def get_language(self) -> 'String': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_uppercase(self, enable: bool) -> None: ...
    def is_uppercase(self) -> bool: ...
    
class TextParagraph(RefCounted):
    direction: int
    custom_punctuation: 'String'
    orientation: int
    preserve_invalid: bool
    preserve_control: bool
    alignment: int
    break_flags: int
    justification_flags: int
    text_overrun_behavior: int
    ellipsis_char: 'String'
    width: float
    max_lines_visible: int
    line_spacing: float
    def clear(self) -> None: ...
    def set_direction(self, direction: 'TextServer_Direction') -> None: ...
    def get_direction(self) -> 'TextServer_Direction': ...
    def set_custom_punctuation(self, custom_punctuation: 'String') -> None: ...
    def get_custom_punctuation(self) -> 'String': ...
    def set_orientation(self, orientation: 'TextServer_Orientation') -> None: ...
    def get_orientation(self) -> 'TextServer_Orientation': ...
    def set_preserve_invalid(self, enabled: bool) -> None: ...
    def get_preserve_invalid(self) -> bool: ...
    def set_preserve_control(self, enabled: bool) -> None: ...
    def get_preserve_control(self) -> bool: ...
    def set_bidi_override(self, override: 'Array') -> None: ...
    def set_dropcap(self, text: 'String', font: 'Font', font_size: int, dropcap_margins: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), language: 'String' = default('''""''')) -> bool: ...
    def clear_dropcap(self) -> None: ...
    def add_string(self, text: 'String', font: 'Font', font_size: int, language: 'String' = default('''""'''), meta: 'Variant' = default('''null''')) -> bool: ...
    def add_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = default('''5'''), length: int = default('''1'''), baseline: float = default('''0.0''')) -> bool: ...
    def resize_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = default('''5'''), baseline: float = default('''0.0''')) -> bool: ...
    def set_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_alignment(self) -> 'HorizontalAlignment': ...
    def tab_align(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def set_break_flags(self, flags: 'TextServer_LineBreakFlag') -> None: ...
    def get_break_flags(self) -> 'TextServer_LineBreakFlag': ...
    def set_justification_flags(self, flags: 'TextServer_JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer_JustificationFlag': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer_OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer_OverrunBehavior': ...
    def set_ellipsis_char(self, char: 'String') -> None: ...
    def get_ellipsis_char(self) -> 'String': ...
    def set_width(self, width: float) -> None: ...
    def get_width(self) -> float: ...
    def get_non_wrapped_size(self) -> 'Vector2': ...
    def get_size(self) -> 'Vector2': ...
    def get_rid(self) -> 'RID': ...
    def get_line_rid(self, line: int) -> 'RID': ...
    def get_dropcap_rid(self) -> 'RID': ...
    def get_line_count(self) -> int: ...
    def set_max_lines_visible(self, max_lines_visible: int) -> None: ...
    def get_max_lines_visible(self) -> int: ...
    def set_line_spacing(self, line_spacing: float) -> None: ...
    def get_line_spacing(self) -> float: ...
    def get_line_objects(self, line: int) -> 'Array': ...
    def get_line_object_rect(self, line: int, key: 'Variant') -> 'Rect2': ...
    def get_line_size(self, line: int) -> 'Vector2': ...
    def get_line_range(self, line: int) -> 'Vector2i': ...
    def get_line_ascent(self, line: int) -> float: ...
    def get_line_descent(self, line: int) -> float: ...
    def get_line_width(self, line: int) -> float: ...
    def get_line_underline_position(self, line: int) -> float: ...
    def get_line_underline_thickness(self, line: int) -> float: ...
    def get_dropcap_size(self) -> 'Vector2': ...
    def get_dropcap_lines(self) -> int: ...
    def draw(self, canvas: 'RID', pos: 'Vector2', color: 'Color' = default('''Color(1, 1, 1, 1)'''), dc_color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_outline(self, canvas: 'RID', pos: 'Vector2', outline_size: int = default('''1'''), color: 'Color' = default('''Color(1, 1, 1, 1)'''), dc_color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_line(self, canvas: 'RID', pos: 'Vector2', line: int, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_line_outline(self, canvas: 'RID', pos: 'Vector2', line: int, outline_size: int = default('''1'''), color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_dropcap(self, canvas: 'RID', pos: 'Vector2', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_dropcap_outline(self, canvas: 'RID', pos: 'Vector2', outline_size: int = default('''1'''), color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def hit_test(self, coords: 'Vector2') -> int: ...
    
class TextServer(RefCounted):
    def has_feature(self, feature: 'TextServer_Feature') -> bool: ...
    def get_name(self) -> 'String': ...
    def get_features(self) -> int: ...
    def load_support_data(self, filename: 'String') -> bool: ...
    def get_support_data_filename(self) -> 'String': ...
    def get_support_data_info(self) -> 'String': ...
    def save_support_data(self, filename: 'String') -> bool: ...
    def get_support_data(self) -> 'PackedByteArray': ...
    def is_locale_right_to_left(self, locale: 'String') -> bool: ...
    def name_to_tag(self, name: 'String') -> int: ...
    def tag_to_name(self, tag: int) -> 'String': ...
    def has(self, rid: 'RID') -> bool: ...
    def free_rid(self, rid: 'RID') -> None: ...
    def create_font(self) -> 'RID': ...
    def create_font_linked_variation(self, font_rid: 'RID') -> 'RID': ...
    def font_set_data(self, font_rid: 'RID', data: 'PackedByteArray') -> None: ...
    def font_set_face_index(self, font_rid: 'RID', face_index: int) -> None: ...
    def font_get_face_index(self, font_rid: 'RID') -> int: ...
    def font_get_face_count(self, font_rid: 'RID') -> int: ...
    def font_set_style(self, font_rid: 'RID', style: 'TextServer_FontStyle') -> None: ...
    def font_get_style(self, font_rid: 'RID') -> 'TextServer_FontStyle': ...
    def font_set_name(self, font_rid: 'RID', name: 'String') -> None: ...
    def font_get_name(self, font_rid: 'RID') -> 'String': ...
    def font_get_ot_name_strings(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_set_style_name(self, font_rid: 'RID', name: 'String') -> None: ...
    def font_get_style_name(self, font_rid: 'RID') -> 'String': ...
    def font_set_weight(self, font_rid: 'RID', weight: int) -> None: ...
    def font_get_weight(self, font_rid: 'RID') -> int: ...
    def font_set_stretch(self, font_rid: 'RID', weight: int) -> None: ...
    def font_get_stretch(self, font_rid: 'RID') -> int: ...
    def font_set_antialiasing(self, font_rid: 'RID', antialiasing: 'TextServer_FontAntialiasing') -> None: ...
    def font_get_antialiasing(self, font_rid: 'RID') -> 'TextServer_FontAntialiasing': ...
    def font_set_disable_embedded_bitmaps(self, font_rid: 'RID', disable_embedded_bitmaps: bool) -> None: ...
    def font_get_disable_embedded_bitmaps(self, font_rid: 'RID') -> bool: ...
    def font_set_generate_mipmaps(self, font_rid: 'RID', generate_mipmaps: bool) -> None: ...
    def font_get_generate_mipmaps(self, font_rid: 'RID') -> bool: ...
    def font_set_multichannel_signed_distance_field(self, font_rid: 'RID', msdf: bool) -> None: ...
    def font_is_multichannel_signed_distance_field(self, font_rid: 'RID') -> bool: ...
    def font_set_msdf_pixel_range(self, font_rid: 'RID', msdf_pixel_range: int) -> None: ...
    def font_get_msdf_pixel_range(self, font_rid: 'RID') -> int: ...
    def font_set_msdf_size(self, font_rid: 'RID', msdf_size: int) -> None: ...
    def font_get_msdf_size(self, font_rid: 'RID') -> int: ...
    def font_set_fixed_size(self, font_rid: 'RID', fixed_size: int) -> None: ...
    def font_get_fixed_size(self, font_rid: 'RID') -> int: ...
    def font_set_fixed_size_scale_mode(self, font_rid: 'RID', fixed_size_scale_mode: 'TextServer_FixedSizeScaleMode') -> None: ...
    def font_get_fixed_size_scale_mode(self, font_rid: 'RID') -> 'TextServer_FixedSizeScaleMode': ...
    def font_set_allow_system_fallback(self, font_rid: 'RID', allow_system_fallback: bool) -> None: ...
    def font_is_allow_system_fallback(self, font_rid: 'RID') -> bool: ...
    def font_set_force_autohinter(self, font_rid: 'RID', force_autohinter: bool) -> None: ...
    def font_is_force_autohinter(self, font_rid: 'RID') -> bool: ...
    def font_set_hinting(self, font_rid: 'RID', hinting: 'TextServer_Hinting') -> None: ...
    def font_get_hinting(self, font_rid: 'RID') -> 'TextServer_Hinting': ...
    def font_set_subpixel_positioning(self, font_rid: 'RID', subpixel_positioning: 'TextServer_SubpixelPositioning') -> None: ...
    def font_get_subpixel_positioning(self, font_rid: 'RID') -> 'TextServer_SubpixelPositioning': ...
    def font_set_keep_rounding_remainders(self, font_rid: 'RID', keep_rounding_remainders: bool) -> None: ...
    def font_get_keep_rounding_remainders(self, font_rid: 'RID') -> bool: ...
    def font_set_embolden(self, font_rid: 'RID', strength: float) -> None: ...
    def font_get_embolden(self, font_rid: 'RID') -> float: ...
    def font_set_spacing(self, font_rid: 'RID', spacing: 'TextServer_SpacingType', value: int) -> None: ...
    def font_get_spacing(self, font_rid: 'RID', spacing: 'TextServer_SpacingType') -> int: ...
    def font_set_baseline_offset(self, font_rid: 'RID', baseline_offset: float) -> None: ...
    def font_get_baseline_offset(self, font_rid: 'RID') -> float: ...
    def font_set_transform(self, font_rid: 'RID', transform: 'Transform2D') -> None: ...
    def font_get_transform(self, font_rid: 'RID') -> 'Transform2D': ...
    def font_set_variation_coordinates(self, font_rid: 'RID', variation_coordinates: 'Dictionary') -> None: ...
    def font_get_variation_coordinates(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_set_oversampling(self, font_rid: 'RID', oversampling: float) -> None: ...
    def font_get_oversampling(self, font_rid: 'RID') -> float: ...
    def font_get_size_cache_list(self, font_rid: 'RID') -> 'list[Vector2i]': ...
    def font_clear_size_cache(self, font_rid: 'RID') -> None: ...
    def font_remove_size_cache(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def font_set_ascent(self, font_rid: 'RID', size: int, ascent: float) -> None: ...
    def font_get_ascent(self, font_rid: 'RID', size: int) -> float: ...
    def font_set_descent(self, font_rid: 'RID', size: int, descent: float) -> None: ...
    def font_get_descent(self, font_rid: 'RID', size: int) -> float: ...
    def font_set_underline_position(self, font_rid: 'RID', size: int, underline_position: float) -> None: ...
    def font_get_underline_position(self, font_rid: 'RID', size: int) -> float: ...
    def font_set_underline_thickness(self, font_rid: 'RID', size: int, underline_thickness: float) -> None: ...
    def font_get_underline_thickness(self, font_rid: 'RID', size: int) -> float: ...
    def font_set_scale(self, font_rid: 'RID', size: int, scale: float) -> None: ...
    def font_get_scale(self, font_rid: 'RID', size: int) -> float: ...
    def font_get_texture_count(self, font_rid: 'RID', size: 'Vector2i') -> int: ...
    def font_clear_textures(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def font_remove_texture(self, font_rid: 'RID', size: 'Vector2i', texture_index: int) -> None: ...
    def font_set_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: int, image: 'Image') -> None: ...
    def font_get_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: int) -> 'Image': ...
    def font_set_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: int, offset: 'PackedInt32Array') -> None: ...
    def font_get_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: int) -> 'PackedInt32Array': ...
    def font_get_glyph_list(self, font_rid: 'RID', size: 'Vector2i') -> 'PackedInt32Array': ...
    def font_clear_glyphs(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def font_remove_glyph(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> None: ...
    def font_get_glyph_advance(self, font_rid: 'RID', size: int, glyph: int) -> 'Vector2': ...
    def font_set_glyph_advance(self, font_rid: 'RID', size: int, glyph: int, advance: 'Vector2') -> None: ...
    def font_get_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def font_set_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: int, offset: 'Vector2') -> None: ...
    def font_get_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def font_set_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: int, gl_size: 'Vector2') -> None: ...
    def font_get_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Rect2': ...
    def font_set_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: int, uv_rect: 'Rect2') -> None: ...
    def font_get_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> int: ...
    def font_set_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: int, texture_idx: int) -> None: ...
    def font_get_glyph_texture_rid(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'RID': ...
    def font_get_glyph_texture_size(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def font_get_glyph_contours(self, font: 'RID', size: int, index: int) -> 'Dictionary': ...
    def font_get_kerning_list(self, font_rid: 'RID', size: int) -> 'list[Vector2i]': ...
    def font_clear_kerning_map(self, font_rid: 'RID', size: int) -> None: ...
    def font_remove_kerning(self, font_rid: 'RID', size: int, glyph_pair: 'Vector2i') -> None: ...
    def font_set_kerning(self, font_rid: 'RID', size: int, glyph_pair: 'Vector2i', kerning: 'Vector2') -> None: ...
    def font_get_kerning(self, font_rid: 'RID', size: int, glyph_pair: 'Vector2i') -> 'Vector2': ...
    def font_get_glyph_index(self, font_rid: 'RID', size: int, char: int, variation_selector: int) -> int: ...
    def font_get_char_from_glyph_index(self, font_rid: 'RID', size: int, glyph_index: int) -> int: ...
    def font_has_char(self, font_rid: 'RID', char: int) -> bool: ...
    def font_get_supported_chars(self, font_rid: 'RID') -> 'String': ...
    def font_get_supported_glyphs(self, font_rid: 'RID') -> 'PackedInt32Array': ...
    def font_render_range(self, font_rid: 'RID', size: 'Vector2i', start: int, end: int) -> None: ...
    def font_render_glyph(self, font_rid: 'RID', size: 'Vector2i', index: int) -> None: ...
    def font_draw_glyph(self, font_rid: 'RID', canvas: 'RID', size: int, pos: 'Vector2', index: int, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def font_draw_glyph_outline(self, font_rid: 'RID', canvas: 'RID', size: int, outline_size: int, pos: 'Vector2', index: int, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def font_is_language_supported(self, font_rid: 'RID', language: 'String') -> bool: ...
    def font_set_language_support_override(self, font_rid: 'RID', language: 'String', supported: bool) -> None: ...
    def font_get_language_support_override(self, font_rid: 'RID', language: 'String') -> bool: ...
    def font_remove_language_support_override(self, font_rid: 'RID', language: 'String') -> None: ...
    def font_get_language_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def font_is_script_supported(self, font_rid: 'RID', script: 'String') -> bool: ...
    def font_set_script_support_override(self, font_rid: 'RID', script: 'String', supported: bool) -> None: ...
    def font_get_script_support_override(self, font_rid: 'RID', script: 'String') -> bool: ...
    def font_remove_script_support_override(self, font_rid: 'RID', script: 'String') -> None: ...
    def font_get_script_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def font_set_opentype_feature_overrides(self, font_rid: 'RID', overrides: 'Dictionary') -> None: ...
    def font_get_opentype_feature_overrides(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_supported_feature_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_supported_variation_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_get_global_oversampling(self) -> float: ...
    def font_set_global_oversampling(self, oversampling: float) -> None: ...
    def get_hex_code_box_size(self, size: int, index: int) -> 'Vector2': ...
    def draw_hex_code_box(self, canvas: 'RID', size: int, pos: 'Vector2', index: int, color: 'Color') -> None: ...
    def create_shaped_text(self, direction: 'TextServer_Direction' = default('''0'''), orientation: 'TextServer_Orientation' = default('''0''')) -> 'RID': ...
    def shaped_text_clear(self, rid: 'RID') -> None: ...
    def shaped_text_set_direction(self, shaped: 'RID', direction: 'TextServer_Direction' = default('''0''')) -> None: ...
    def shaped_text_get_direction(self, shaped: 'RID') -> 'TextServer_Direction': ...
    def shaped_text_get_inferred_direction(self, shaped: 'RID') -> 'TextServer_Direction': ...
    def shaped_text_set_bidi_override(self, shaped: 'RID', override: 'Array') -> None: ...
    def shaped_text_set_custom_punctuation(self, shaped: 'RID', punct: 'String') -> None: ...
    def shaped_text_get_custom_punctuation(self, shaped: 'RID') -> 'String': ...
    def shaped_text_set_custom_ellipsis(self, shaped: 'RID', char: int) -> None: ...
    def shaped_text_get_custom_ellipsis(self, shaped: 'RID') -> int: ...
    def shaped_text_set_orientation(self, shaped: 'RID', orientation: 'TextServer_Orientation' = default('''0''')) -> None: ...
    def shaped_text_get_orientation(self, shaped: 'RID') -> 'TextServer_Orientation': ...
    def shaped_text_set_preserve_invalid(self, shaped: 'RID', enabled: bool) -> None: ...
    def shaped_text_get_preserve_invalid(self, shaped: 'RID') -> bool: ...
    def shaped_text_set_preserve_control(self, shaped: 'RID', enabled: bool) -> None: ...
    def shaped_text_get_preserve_control(self, shaped: 'RID') -> bool: ...
    def shaped_text_set_spacing(self, shaped: 'RID', spacing: 'TextServer_SpacingType', value: int) -> None: ...
    def shaped_text_get_spacing(self, shaped: 'RID', spacing: 'TextServer_SpacingType') -> int: ...
    def shaped_text_add_string(self, shaped: 'RID', text: 'String', fonts: 'list[RID]', size: int, opentype_features: 'Dictionary' = default('''{}'''), language: 'String' = default('''""'''), meta: 'Variant' = default('''null''')) -> bool: ...
    def shaped_text_add_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = default('''5'''), length: int = default('''1'''), baseline: float = default('''0.0''')) -> bool: ...
    def shaped_text_resize_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = default('''5'''), baseline: float = default('''0.0''')) -> bool: ...
    def shaped_get_span_count(self, shaped: 'RID') -> int: ...
    def shaped_get_span_meta(self, shaped: 'RID', index: int) -> 'Variant': ...
    def shaped_get_span_embedded_object(self, shaped: 'RID', index: int) -> 'Variant': ...
    def shaped_set_span_update_font(self, shaped: 'RID', index: int, fonts: 'list[RID]', size: int, opentype_features: 'Dictionary' = default('''{}''')) -> None: ...
    def shaped_text_substr(self, shaped: 'RID', start: int, length: int) -> 'RID': ...
    def shaped_text_get_parent(self, shaped: 'RID') -> 'RID': ...
    def shaped_text_fit_to_width(self, shaped: 'RID', width: float, justification_flags: 'TextServer_JustificationFlag' = default('''3''')) -> float: ...
    def shaped_text_tab_align(self, shaped: 'RID', tab_stops: 'PackedFloat32Array') -> float: ...
    def shaped_text_shape(self, shaped: 'RID') -> bool: ...
    def shaped_text_is_ready(self, shaped: 'RID') -> bool: ...
    def shaped_text_has_visible_chars(self, shaped: 'RID') -> bool: ...
    def shaped_text_get_glyphs(self, shaped: 'RID') -> 'list[Dictionary]': ...
    def shaped_text_sort_logical(self, shaped: 'RID') -> 'list[Dictionary]': ...
    def shaped_text_get_glyph_count(self, shaped: 'RID') -> int: ...
    def shaped_text_get_range(self, shaped: 'RID') -> 'Vector2i': ...
    def shaped_text_get_line_breaks_adv(self, shaped: 'RID', width: 'PackedFloat32Array', start: int = default('''0'''), once: bool = default('''true'''), break_flags: 'TextServer_LineBreakFlag' = default('''3''')) -> 'PackedInt32Array': ...
    def shaped_text_get_line_breaks(self, shaped: 'RID', width: float, start: int = default('''0'''), break_flags: 'TextServer_LineBreakFlag' = default('''3''')) -> 'PackedInt32Array': ...
    def shaped_text_get_word_breaks(self, shaped: 'RID', grapheme_flags: 'TextServer_GraphemeFlag' = default('''264'''), skip_grapheme_flags: 'TextServer_GraphemeFlag' = default('''4''')) -> 'PackedInt32Array': ...
    def shaped_text_get_trim_pos(self, shaped: 'RID') -> int: ...
    def shaped_text_get_ellipsis_pos(self, shaped: 'RID') -> int: ...
    def shaped_text_get_ellipsis_glyphs(self, shaped: 'RID') -> 'list[Dictionary]': ...
    def shaped_text_get_ellipsis_glyph_count(self, shaped: 'RID') -> int: ...
    def shaped_text_overrun_trim_to_width(self, shaped: 'RID', width: float = default('''0'''), overrun_trim_flags: 'TextServer_TextOverrunFlag' = default('''0''')) -> None: ...
    def shaped_text_get_objects(self, shaped: 'RID') -> 'Array': ...
    def shaped_text_get_object_rect(self, shaped: 'RID', key: 'Variant') -> 'Rect2': ...
    def shaped_text_get_object_range(self, shaped: 'RID', key: 'Variant') -> 'Vector2i': ...
    def shaped_text_get_object_glyph(self, shaped: 'RID', key: 'Variant') -> int: ...
    def shaped_text_get_size(self, shaped: 'RID') -> 'Vector2': ...
    def shaped_text_get_ascent(self, shaped: 'RID') -> float: ...
    def shaped_text_get_descent(self, shaped: 'RID') -> float: ...
    def shaped_text_get_width(self, shaped: 'RID') -> float: ...
    def shaped_text_get_underline_position(self, shaped: 'RID') -> float: ...
    def shaped_text_get_underline_thickness(self, shaped: 'RID') -> float: ...
    def shaped_text_get_carets(self, shaped: 'RID', position: int) -> 'Dictionary': ...
    def shaped_text_get_selection(self, shaped: 'RID', start: int, end: int) -> 'PackedVector2Array': ...
    def shaped_text_hit_test_grapheme(self, shaped: 'RID', coords: float) -> int: ...
    def shaped_text_hit_test_position(self, shaped: 'RID', coords: float) -> int: ...
    def shaped_text_get_grapheme_bounds(self, shaped: 'RID', pos: int) -> 'Vector2': ...
    def shaped_text_next_grapheme_pos(self, shaped: 'RID', pos: int) -> int: ...
    def shaped_text_prev_grapheme_pos(self, shaped: 'RID', pos: int) -> int: ...
    def shaped_text_get_character_breaks(self, shaped: 'RID') -> 'PackedInt32Array': ...
    def shaped_text_next_character_pos(self, shaped: 'RID', pos: int) -> int: ...
    def shaped_text_prev_character_pos(self, shaped: 'RID', pos: int) -> int: ...
    def shaped_text_closest_character_pos(self, shaped: 'RID', pos: int) -> int: ...
    def shaped_text_draw(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: float = default('''-1'''), clip_r: float = default('''-1'''), color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def shaped_text_draw_outline(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: float = default('''-1'''), clip_r: float = default('''-1'''), outline_size: int = default('''1'''), color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def shaped_text_get_dominant_direction_in_range(self, shaped: 'RID', start: int, end: int) -> 'TextServer_Direction': ...
    def format_number(self, number: 'String', language: 'String' = default('''""''')) -> 'String': ...
    def parse_number(self, number: 'String', language: 'String' = default('''""''')) -> 'String': ...
    def percent_sign(self, language: 'String' = default('''""''')) -> 'String': ...
    def string_get_word_breaks(self, string: 'String', language: 'String' = default('''""'''), chars_per_line: int = default('''0''')) -> 'PackedInt32Array': ...
    def string_get_character_breaks(self, string: 'String', language: 'String' = default('''""''')) -> 'PackedInt32Array': ...
    def is_confusable(self, string: 'String', dict: 'PackedStringArray') -> int: ...
    def spoof_check(self, string: 'String') -> bool: ...
    def strip_diacritics(self, string: 'String') -> 'String': ...
    def is_valid_identifier(self, string: 'String') -> bool: ...
    def is_valid_letter(self, unicode: int) -> bool: ...
    def string_to_upper(self, string: 'String', language: 'String' = default('''""''')) -> 'String': ...
    def string_to_lower(self, string: 'String', language: 'String' = default('''""''')) -> 'String': ...
    def string_to_title(self, string: 'String', language: 'String' = default('''""''')) -> 'String': ...
    def parse_structured_text(self, parser_type: 'TextServer_StructuredTextParser', args: 'Array', text: 'String') -> 'list[Vector3i]': ...
    
class TextServer_FontAntialiasing(Enum):
    FONT_ANTIALIASING_NONE = 0
    FONT_ANTIALIASING_GRAY = 1
    FONT_ANTIALIASING_LCD = 2

class TextServer_FontLCDSubpixelLayout(Enum):
    FONT_LCD_SUBPIXEL_LAYOUT_NONE = 0
    FONT_LCD_SUBPIXEL_LAYOUT_HRGB = 1
    FONT_LCD_SUBPIXEL_LAYOUT_HBGR = 2
    FONT_LCD_SUBPIXEL_LAYOUT_VRGB = 3
    FONT_LCD_SUBPIXEL_LAYOUT_VBGR = 4
    FONT_LCD_SUBPIXEL_LAYOUT_MAX = 5

class TextServer_Direction(Enum):
    DIRECTION_AUTO = 0
    DIRECTION_LTR = 1
    DIRECTION_RTL = 2
    DIRECTION_INHERITED = 3

class TextServer_Orientation(Enum):
    ORIENTATION_HORIZONTAL = 0
    ORIENTATION_VERTICAL = 1

class TextServer_JustificationFlag(Enum):
    JUSTIFICATION_NONE = 0
    JUSTIFICATION_KASHIDA = 1
    JUSTIFICATION_WORD_BOUND = 2
    JUSTIFICATION_TRIM_EDGE_SPACES = 4
    JUSTIFICATION_AFTER_LAST_TAB = 8
    JUSTIFICATION_CONSTRAIN_ELLIPSIS = 16
    JUSTIFICATION_SKIP_LAST_LINE = 32
    JUSTIFICATION_SKIP_LAST_LINE_WITH_VISIBLE_CHARS = 64
    JUSTIFICATION_DO_NOT_SKIP_SINGLE_LINE = 128

class TextServer_AutowrapMode(Enum):
    AUTOWRAP_OFF = 0
    AUTOWRAP_ARBITRARY = 1
    AUTOWRAP_WORD = 2
    AUTOWRAP_WORD_SMART = 3

class TextServer_LineBreakFlag(Enum):
    BREAK_NONE = 0
    BREAK_MANDATORY = 1
    BREAK_WORD_BOUND = 2
    BREAK_GRAPHEME_BOUND = 4
    BREAK_ADAPTIVE = 8
    BREAK_TRIM_EDGE_SPACES = 16
    BREAK_TRIM_INDENT = 32

class TextServer_VisibleCharactersBehavior(Enum):
    VC_CHARS_BEFORE_SHAPING = 0
    VC_CHARS_AFTER_SHAPING = 1
    VC_GLYPHS_AUTO = 2
    VC_GLYPHS_LTR = 3
    VC_GLYPHS_RTL = 4

class TextServer_OverrunBehavior(Enum):
    OVERRUN_NO_TRIMMING = 0
    OVERRUN_TRIM_CHAR = 1
    OVERRUN_TRIM_WORD = 2
    OVERRUN_TRIM_ELLIPSIS = 3
    OVERRUN_TRIM_WORD_ELLIPSIS = 4

class TextServer_TextOverrunFlag(Enum):
    OVERRUN_NO_TRIM = 0
    OVERRUN_TRIM = 1
    OVERRUN_TRIM_WORD_ONLY = 2
    OVERRUN_ADD_ELLIPSIS = 4
    OVERRUN_ENFORCE_ELLIPSIS = 8
    OVERRUN_JUSTIFICATION_AWARE = 16

class TextServer_GraphemeFlag(Enum):
    GRAPHEME_IS_VALID = 1
    GRAPHEME_IS_RTL = 2
    GRAPHEME_IS_VIRTUAL = 4
    GRAPHEME_IS_SPACE = 8
    GRAPHEME_IS_BREAK_HARD = 16
    GRAPHEME_IS_BREAK_SOFT = 32
    GRAPHEME_IS_TAB = 64
    GRAPHEME_IS_ELONGATION = 128
    GRAPHEME_IS_PUNCTUATION = 256
    GRAPHEME_IS_UNDERSCORE = 512
    GRAPHEME_IS_CONNECTED = 1024
    GRAPHEME_IS_SAFE_TO_INSERT_TATWEEL = 2048
    GRAPHEME_IS_EMBEDDED_OBJECT = 4096
    GRAPHEME_IS_SOFT_HYPHEN = 8192

class TextServer_Hinting(Enum):
    HINTING_NONE = 0
    HINTING_LIGHT = 1
    HINTING_NORMAL = 2

class TextServer_SubpixelPositioning(Enum):
    SUBPIXEL_POSITIONING_DISABLED = 0
    SUBPIXEL_POSITIONING_AUTO = 1
    SUBPIXEL_POSITIONING_ONE_HALF = 2
    SUBPIXEL_POSITIONING_ONE_QUARTER = 3
    SUBPIXEL_POSITIONING_ONE_HALF_MAX_SIZE = 20
    SUBPIXEL_POSITIONING_ONE_QUARTER_MAX_SIZE = 16

class TextServer_Feature(Enum):
    FEATURE_SIMPLE_LAYOUT = 1
    FEATURE_BIDI_LAYOUT = 2
    FEATURE_VERTICAL_LAYOUT = 4
    FEATURE_SHAPING = 8
    FEATURE_KASHIDA_JUSTIFICATION = 16
    FEATURE_BREAK_ITERATORS = 32
    FEATURE_FONT_BITMAP = 64
    FEATURE_FONT_DYNAMIC = 128
    FEATURE_FONT_MSDF = 256
    FEATURE_FONT_SYSTEM = 512
    FEATURE_FONT_VARIABLE = 1024
    FEATURE_CONTEXT_SENSITIVE_CASE_CONVERSION = 2048
    FEATURE_USE_SUPPORT_DATA = 4096
    FEATURE_UNICODE_IDENTIFIERS = 8192
    FEATURE_UNICODE_SECURITY = 16384

class TextServer_ContourPointTag(Enum):
    CONTOUR_CURVE_TAG_ON = 1
    CONTOUR_CURVE_TAG_OFF_CONIC = 0
    CONTOUR_CURVE_TAG_OFF_CUBIC = 2

class TextServer_SpacingType(Enum):
    SPACING_GLYPH = 0
    SPACING_SPACE = 1
    SPACING_TOP = 2
    SPACING_BOTTOM = 3
    SPACING_MAX = 4

class TextServer_FontStyle(Enum):
    FONT_BOLD = 1
    FONT_ITALIC = 2
    FONT_FIXED_WIDTH = 4

class TextServer_StructuredTextParser(Enum):
    STRUCTURED_TEXT_DEFAULT = 0
    STRUCTURED_TEXT_URI = 1
    STRUCTURED_TEXT_FILE = 2
    STRUCTURED_TEXT_EMAIL = 3
    STRUCTURED_TEXT_LIST = 4
    STRUCTURED_TEXT_GDSCRIPT = 5
    STRUCTURED_TEXT_CUSTOM = 6

class TextServer_FixedSizeScaleMode(Enum):
    FIXED_SIZE_SCALE_DISABLE = 0
    FIXED_SIZE_SCALE_INTEGER_ONLY = 1
    FIXED_SIZE_SCALE_ENABLED = 2

class TextServerAdvanced(TextServerExtension):
    pass
    
class TextServerDummy(TextServerExtension):
    pass
    
class TextServerExtension(TextServer):
    def _has_feature(self, feature: 'TextServer_Feature') -> bool: ...
    def _get_name(self) -> 'String': ...
    def _get_features(self) -> int: ...
    def _free_rid(self, rid: 'RID') -> None: ...
    def _has(self, rid: 'RID') -> bool: ...
    def _load_support_data(self, filename: 'String') -> bool: ...
    def _get_support_data_filename(self) -> 'String': ...
    def _get_support_data_info(self) -> 'String': ...
    def _save_support_data(self, filename: 'String') -> bool: ...
    def _get_support_data(self) -> 'PackedByteArray': ...
    def _is_locale_right_to_left(self, locale: 'String') -> bool: ...
    def _name_to_tag(self, name: 'String') -> int: ...
    def _tag_to_name(self, tag: int) -> 'String': ...
    def _create_font(self) -> 'RID': ...
    def _create_font_linked_variation(self, font_rid: 'RID') -> 'RID': ...
    def _font_set_data(self, font_rid: 'RID', data: 'PackedByteArray') -> None: ...
    def _font_set_data_ptr(self, font_rid: 'RID', data_ptr: 'intptr', data_size: int) -> None: ...
    def _font_set_face_index(self, font_rid: 'RID', face_index: int) -> None: ...
    def _font_get_face_index(self, font_rid: 'RID') -> int: ...
    def _font_get_face_count(self, font_rid: 'RID') -> int: ...
    def _font_set_style(self, font_rid: 'RID', style: 'TextServer_FontStyle') -> None: ...
    def _font_get_style(self, font_rid: 'RID') -> 'TextServer_FontStyle': ...
    def _font_set_name(self, font_rid: 'RID', name: 'String') -> None: ...
    def _font_get_name(self, font_rid: 'RID') -> 'String': ...
    def _font_get_ot_name_strings(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_set_style_name(self, font_rid: 'RID', name_style: 'String') -> None: ...
    def _font_get_style_name(self, font_rid: 'RID') -> 'String': ...
    def _font_set_weight(self, font_rid: 'RID', weight: int) -> None: ...
    def _font_get_weight(self, font_rid: 'RID') -> int: ...
    def _font_set_stretch(self, font_rid: 'RID', stretch: int) -> None: ...
    def _font_get_stretch(self, font_rid: 'RID') -> int: ...
    def _font_set_antialiasing(self, font_rid: 'RID', antialiasing: 'TextServer_FontAntialiasing') -> None: ...
    def _font_get_antialiasing(self, font_rid: 'RID') -> 'TextServer_FontAntialiasing': ...
    def _font_set_disable_embedded_bitmaps(self, font_rid: 'RID', disable_embedded_bitmaps: bool) -> None: ...
    def _font_get_disable_embedded_bitmaps(self, font_rid: 'RID') -> bool: ...
    def _font_set_generate_mipmaps(self, font_rid: 'RID', generate_mipmaps: bool) -> None: ...
    def _font_get_generate_mipmaps(self, font_rid: 'RID') -> bool: ...
    def _font_set_multichannel_signed_distance_field(self, font_rid: 'RID', msdf: bool) -> None: ...
    def _font_is_multichannel_signed_distance_field(self, font_rid: 'RID') -> bool: ...
    def _font_set_msdf_pixel_range(self, font_rid: 'RID', msdf_pixel_range: int) -> None: ...
    def _font_get_msdf_pixel_range(self, font_rid: 'RID') -> int: ...
    def _font_set_msdf_size(self, font_rid: 'RID', msdf_size: int) -> None: ...
    def _font_get_msdf_size(self, font_rid: 'RID') -> int: ...
    def _font_set_fixed_size(self, font_rid: 'RID', fixed_size: int) -> None: ...
    def _font_get_fixed_size(self, font_rid: 'RID') -> int: ...
    def _font_set_fixed_size_scale_mode(self, font_rid: 'RID', fixed_size_scale_mode: 'TextServer_FixedSizeScaleMode') -> None: ...
    def _font_get_fixed_size_scale_mode(self, font_rid: 'RID') -> 'TextServer_FixedSizeScaleMode': ...
    def _font_set_allow_system_fallback(self, font_rid: 'RID', allow_system_fallback: bool) -> None: ...
    def _font_is_allow_system_fallback(self, font_rid: 'RID') -> bool: ...
    def _font_set_force_autohinter(self, font_rid: 'RID', force_autohinter: bool) -> None: ...
    def _font_is_force_autohinter(self, font_rid: 'RID') -> bool: ...
    def _font_set_hinting(self, font_rid: 'RID', hinting: 'TextServer_Hinting') -> None: ...
    def _font_get_hinting(self, font_rid: 'RID') -> 'TextServer_Hinting': ...
    def _font_set_subpixel_positioning(self, font_rid: 'RID', subpixel_positioning: 'TextServer_SubpixelPositioning') -> None: ...
    def _font_get_subpixel_positioning(self, font_rid: 'RID') -> 'TextServer_SubpixelPositioning': ...
    def _font_set_keep_rounding_remainders(self, font_rid: 'RID', keep_rounding_remainders: bool) -> None: ...
    def _font_get_keep_rounding_remainders(self, font_rid: 'RID') -> bool: ...
    def _font_set_embolden(self, font_rid: 'RID', strength: float) -> None: ...
    def _font_get_embolden(self, font_rid: 'RID') -> float: ...
    def _font_set_spacing(self, font_rid: 'RID', spacing: 'TextServer_SpacingType', value: int) -> None: ...
    def _font_get_spacing(self, font_rid: 'RID', spacing: 'TextServer_SpacingType') -> int: ...
    def _font_set_baseline_offset(self, font_rid: 'RID', baseline_offset: float) -> None: ...
    def _font_get_baseline_offset(self, font_rid: 'RID') -> float: ...
    def _font_set_transform(self, font_rid: 'RID', transform: 'Transform2D') -> None: ...
    def _font_get_transform(self, font_rid: 'RID') -> 'Transform2D': ...
    def _font_set_variation_coordinates(self, font_rid: 'RID', variation_coordinates: 'Dictionary') -> None: ...
    def _font_get_variation_coordinates(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_set_oversampling(self, font_rid: 'RID', oversampling: float) -> None: ...
    def _font_get_oversampling(self, font_rid: 'RID') -> float: ...
    def _font_get_size_cache_list(self, font_rid: 'RID') -> 'list[Vector2i]': ...
    def _font_clear_size_cache(self, font_rid: 'RID') -> None: ...
    def _font_remove_size_cache(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def _font_set_ascent(self, font_rid: 'RID', size: int, ascent: float) -> None: ...
    def _font_get_ascent(self, font_rid: 'RID', size: int) -> float: ...
    def _font_set_descent(self, font_rid: 'RID', size: int, descent: float) -> None: ...
    def _font_get_descent(self, font_rid: 'RID', size: int) -> float: ...
    def _font_set_underline_position(self, font_rid: 'RID', size: int, underline_position: float) -> None: ...
    def _font_get_underline_position(self, font_rid: 'RID', size: int) -> float: ...
    def _font_set_underline_thickness(self, font_rid: 'RID', size: int, underline_thickness: float) -> None: ...
    def _font_get_underline_thickness(self, font_rid: 'RID', size: int) -> float: ...
    def _font_set_scale(self, font_rid: 'RID', size: int, scale: float) -> None: ...
    def _font_get_scale(self, font_rid: 'RID', size: int) -> float: ...
    def _font_get_texture_count(self, font_rid: 'RID', size: 'Vector2i') -> int: ...
    def _font_clear_textures(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def _font_remove_texture(self, font_rid: 'RID', size: 'Vector2i', texture_index: int) -> None: ...
    def _font_set_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: int, image: 'Image') -> None: ...
    def _font_get_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: int) -> 'Image': ...
    def _font_set_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: int, offset: 'PackedInt32Array') -> None: ...
    def _font_get_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: int) -> 'PackedInt32Array': ...
    def _font_get_glyph_list(self, font_rid: 'RID', size: 'Vector2i') -> 'PackedInt32Array': ...
    def _font_clear_glyphs(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def _font_remove_glyph(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> None: ...
    def _font_get_glyph_advance(self, font_rid: 'RID', size: int, glyph: int) -> 'Vector2': ...
    def _font_set_glyph_advance(self, font_rid: 'RID', size: int, glyph: int, advance: 'Vector2') -> None: ...
    def _font_get_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def _font_set_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: int, offset: 'Vector2') -> None: ...
    def _font_get_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def _font_set_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: int, gl_size: 'Vector2') -> None: ...
    def _font_get_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Rect2': ...
    def _font_set_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: int, uv_rect: 'Rect2') -> None: ...
    def _font_get_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> int: ...
    def _font_set_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: int, texture_idx: int) -> None: ...
    def _font_get_glyph_texture_rid(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'RID': ...
    def _font_get_glyph_texture_size(self, font_rid: 'RID', size: 'Vector2i', glyph: int) -> 'Vector2': ...
    def _font_get_glyph_contours(self, font_rid: 'RID', size: int, index: int) -> 'Dictionary': ...
    def _font_get_kerning_list(self, font_rid: 'RID', size: int) -> 'list[Vector2i]': ...
    def _font_clear_kerning_map(self, font_rid: 'RID', size: int) -> None: ...
    def _font_remove_kerning(self, font_rid: 'RID', size: int, glyph_pair: 'Vector2i') -> None: ...
    def _font_set_kerning(self, font_rid: 'RID', size: int, glyph_pair: 'Vector2i', kerning: 'Vector2') -> None: ...
    def _font_get_kerning(self, font_rid: 'RID', size: int, glyph_pair: 'Vector2i') -> 'Vector2': ...
    def _font_get_glyph_index(self, font_rid: 'RID', size: int, char: int, variation_selector: int) -> int: ...
    def _font_get_char_from_glyph_index(self, font_rid: 'RID', size: int, glyph_index: int) -> int: ...
    def _font_has_char(self, font_rid: 'RID', char: int) -> bool: ...
    def _font_get_supported_chars(self, font_rid: 'RID') -> 'String': ...
    def _font_get_supported_glyphs(self, font_rid: 'RID') -> 'PackedInt32Array': ...
    def _font_render_range(self, font_rid: 'RID', size: 'Vector2i', start: int, end: int) -> None: ...
    def _font_render_glyph(self, font_rid: 'RID', size: 'Vector2i', index: int) -> None: ...
    def _font_draw_glyph(self, font_rid: 'RID', canvas: 'RID', size: int, pos: 'Vector2', index: int, color: 'Color') -> None: ...
    def _font_draw_glyph_outline(self, font_rid: 'RID', canvas: 'RID', size: int, outline_size: int, pos: 'Vector2', index: int, color: 'Color') -> None: ...
    def _font_is_language_supported(self, font_rid: 'RID', language: 'String') -> bool: ...
    def _font_set_language_support_override(self, font_rid: 'RID', language: 'String', supported: bool) -> None: ...
    def _font_get_language_support_override(self, font_rid: 'RID', language: 'String') -> bool: ...
    def _font_remove_language_support_override(self, font_rid: 'RID', language: 'String') -> None: ...
    def _font_get_language_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def _font_is_script_supported(self, font_rid: 'RID', script: 'String') -> bool: ...
    def _font_set_script_support_override(self, font_rid: 'RID', script: 'String', supported: bool) -> None: ...
    def _font_get_script_support_override(self, font_rid: 'RID', script: 'String') -> bool: ...
    def _font_remove_script_support_override(self, font_rid: 'RID', script: 'String') -> None: ...
    def _font_get_script_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def _font_set_opentype_feature_overrides(self, font_rid: 'RID', overrides: 'Dictionary') -> None: ...
    def _font_get_opentype_feature_overrides(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_supported_feature_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_supported_variation_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_get_global_oversampling(self) -> float: ...
    def _font_set_global_oversampling(self, oversampling: float) -> None: ...
    def _get_hex_code_box_size(self, size: int, index: int) -> 'Vector2': ...
    def _draw_hex_code_box(self, canvas: 'RID', size: int, pos: 'Vector2', index: int, color: 'Color') -> None: ...
    def _create_shaped_text(self, direction: 'TextServer_Direction', orientation: 'TextServer_Orientation') -> 'RID': ...
    def _shaped_text_clear(self, shaped: 'RID') -> None: ...
    def _shaped_text_set_direction(self, shaped: 'RID', direction: 'TextServer_Direction') -> None: ...
    def _shaped_text_get_direction(self, shaped: 'RID') -> 'TextServer_Direction': ...
    def _shaped_text_get_inferred_direction(self, shaped: 'RID') -> 'TextServer_Direction': ...
    def _shaped_text_set_bidi_override(self, shaped: 'RID', override: 'Array') -> None: ...
    def _shaped_text_set_custom_punctuation(self, shaped: 'RID', punct: 'String') -> None: ...
    def _shaped_text_get_custom_punctuation(self, shaped: 'RID') -> 'String': ...
    def _shaped_text_set_custom_ellipsis(self, shaped: 'RID', char: int) -> None: ...
    def _shaped_text_get_custom_ellipsis(self, shaped: 'RID') -> int: ...
    def _shaped_text_set_orientation(self, shaped: 'RID', orientation: 'TextServer_Orientation') -> None: ...
    def _shaped_text_get_orientation(self, shaped: 'RID') -> 'TextServer_Orientation': ...
    def _shaped_text_set_preserve_invalid(self, shaped: 'RID', enabled: bool) -> None: ...
    def _shaped_text_get_preserve_invalid(self, shaped: 'RID') -> bool: ...
    def _shaped_text_set_preserve_control(self, shaped: 'RID', enabled: bool) -> None: ...
    def _shaped_text_get_preserve_control(self, shaped: 'RID') -> bool: ...
    def _shaped_text_set_spacing(self, shaped: 'RID', spacing: 'TextServer_SpacingType', value: int) -> None: ...
    def _shaped_text_get_spacing(self, shaped: 'RID', spacing: 'TextServer_SpacingType') -> int: ...
    def _shaped_text_add_string(self, shaped: 'RID', text: 'String', fonts: 'list[RID]', size: int, opentype_features: 'Dictionary', language: 'String', meta: 'Variant') -> bool: ...
    def _shaped_text_add_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment', length: int, baseline: float) -> bool: ...
    def _shaped_text_resize_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment', baseline: float) -> bool: ...
    def _shaped_get_span_count(self, shaped: 'RID') -> int: ...
    def _shaped_get_span_meta(self, shaped: 'RID', index: int) -> 'Variant': ...
    def _shaped_get_span_embedded_object(self, shaped: 'RID', index: int) -> 'Variant': ...
    def _shaped_set_span_update_font(self, shaped: 'RID', index: int, fonts: 'list[RID]', size: int, opentype_features: 'Dictionary') -> None: ...
    def _shaped_text_substr(self, shaped: 'RID', start: int, length: int) -> 'RID': ...
    def _shaped_text_get_parent(self, shaped: 'RID') -> 'RID': ...
    def _shaped_text_fit_to_width(self, shaped: 'RID', width: float, justification_flags: 'TextServer_JustificationFlag') -> float: ...
    def _shaped_text_tab_align(self, shaped: 'RID', tab_stops: 'PackedFloat32Array') -> float: ...
    def _shaped_text_shape(self, shaped: 'RID') -> bool: ...
    def _shaped_text_update_breaks(self, shaped: 'RID') -> bool: ...
    def _shaped_text_update_justification_ops(self, shaped: 'RID') -> bool: ...
    def _shaped_text_is_ready(self, shaped: 'RID') -> bool: ...
    def _shaped_text_get_glyphs(self, shaped: 'RID') -> 'intptr': ...
    def _shaped_text_sort_logical(self, shaped: 'RID') -> 'intptr': ...
    def _shaped_text_get_glyph_count(self, shaped: 'RID') -> int: ...
    def _shaped_text_get_range(self, shaped: 'RID') -> 'Vector2i': ...
    def _shaped_text_get_line_breaks_adv(self, shaped: 'RID', width: 'PackedFloat32Array', start: int, once: bool, break_flags: 'TextServer_LineBreakFlag') -> 'PackedInt32Array': ...
    def _shaped_text_get_line_breaks(self, shaped: 'RID', width: float, start: int, break_flags: 'TextServer_LineBreakFlag') -> 'PackedInt32Array': ...
    def _shaped_text_get_word_breaks(self, shaped: 'RID', grapheme_flags: 'TextServer_GraphemeFlag', skip_grapheme_flags: 'TextServer_GraphemeFlag') -> 'PackedInt32Array': ...
    def _shaped_text_get_trim_pos(self, shaped: 'RID') -> int: ...
    def _shaped_text_get_ellipsis_pos(self, shaped: 'RID') -> int: ...
    def _shaped_text_get_ellipsis_glyph_count(self, shaped: 'RID') -> int: ...
    def _shaped_text_get_ellipsis_glyphs(self, shaped: 'RID') -> 'intptr': ...
    def _shaped_text_overrun_trim_to_width(self, shaped: 'RID', width: float, trim_flags: 'TextServer_TextOverrunFlag') -> None: ...
    def _shaped_text_get_objects(self, shaped: 'RID') -> 'Array': ...
    def _shaped_text_get_object_rect(self, shaped: 'RID', key: 'Variant') -> 'Rect2': ...
    def _shaped_text_get_object_range(self, shaped: 'RID', key: 'Variant') -> 'Vector2i': ...
    def _shaped_text_get_object_glyph(self, shaped: 'RID', key: 'Variant') -> int: ...
    def _shaped_text_get_size(self, shaped: 'RID') -> 'Vector2': ...
    def _shaped_text_get_ascent(self, shaped: 'RID') -> float: ...
    def _shaped_text_get_descent(self, shaped: 'RID') -> float: ...
    def _shaped_text_get_width(self, shaped: 'RID') -> float: ...
    def _shaped_text_get_underline_position(self, shaped: 'RID') -> float: ...
    def _shaped_text_get_underline_thickness(self, shaped: 'RID') -> float: ...
    def _shaped_text_get_dominant_direction_in_range(self, shaped: 'RID', start: int, end: int) -> int: ...
    def _shaped_text_get_carets(self, shaped: 'RID', position: int, caret: 'intptr') -> None: ...
    def _shaped_text_get_selection(self, shaped: 'RID', start: int, end: int) -> 'PackedVector2Array': ...
    def _shaped_text_hit_test_grapheme(self, shaped: 'RID', coord: float) -> int: ...
    def _shaped_text_hit_test_position(self, shaped: 'RID', coord: float) -> int: ...
    def _shaped_text_draw(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: float, clip_r: float, color: 'Color') -> None: ...
    def _shaped_text_draw_outline(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: float, clip_r: float, outline_size: int, color: 'Color') -> None: ...
    def _shaped_text_get_grapheme_bounds(self, shaped: 'RID', pos: int) -> 'Vector2': ...
    def _shaped_text_next_grapheme_pos(self, shaped: 'RID', pos: int) -> int: ...
    def _shaped_text_prev_grapheme_pos(self, shaped: 'RID', pos: int) -> int: ...
    def _shaped_text_get_character_breaks(self, shaped: 'RID') -> 'PackedInt32Array': ...
    def _shaped_text_next_character_pos(self, shaped: 'RID', pos: int) -> int: ...
    def _shaped_text_prev_character_pos(self, shaped: 'RID', pos: int) -> int: ...
    def _shaped_text_closest_character_pos(self, shaped: 'RID', pos: int) -> int: ...
    def _format_number(self, number: 'String', language: 'String') -> 'String': ...
    def _parse_number(self, number: 'String', language: 'String') -> 'String': ...
    def _percent_sign(self, language: 'String') -> 'String': ...
    def _strip_diacritics(self, string: 'String') -> 'String': ...
    def _is_valid_identifier(self, string: 'String') -> bool: ...
    def _is_valid_letter(self, unicode: int) -> bool: ...
    def _string_get_word_breaks(self, string: 'String', language: 'String', chars_per_line: int) -> 'PackedInt32Array': ...
    def _string_get_character_breaks(self, string: 'String', language: 'String') -> 'PackedInt32Array': ...
    def _is_confusable(self, string: 'String', dict: 'PackedStringArray') -> int: ...
    def _spoof_check(self, string: 'String') -> bool: ...
    def _string_to_upper(self, string: 'String', language: 'String') -> 'String': ...
    def _string_to_lower(self, string: 'String', language: 'String') -> 'String': ...
    def _string_to_title(self, string: 'String', language: 'String') -> 'String': ...
    def _parse_structured_text(self, parser_type: 'TextServer_StructuredTextParser', args: 'Array', text: 'String') -> 'list[Vector3i]': ...
    def _cleanup(self) -> None: ...
    
class TextServerManager(Object):
    interface_added: Signal[Callable[['StringName'], None]]  # interface_added(interface_name: 'StringName')
    interface_removed: Signal[Callable[['StringName'], None]]  # interface_removed(interface_name: 'StringName')
    def add_interface(self, interface: 'TextServer') -> None: ...
    def get_interface_count(self) -> int: ...
    def remove_interface(self, interface: 'TextServer') -> None: ...
    def get_interface(self, idx: int) -> 'TextServer': ...
    def get_interfaces(self) -> 'list[Dictionary]': ...
    def find_interface(self, name: 'String') -> 'TextServer': ...
    def set_primary_interface(self, index: 'TextServer') -> None: ...
    def get_primary_interface(self) -> 'TextServer': ...
    
class Texture(Resource):
    pass
    
class Texture2D(Texture):
    def _get_width(self) -> int: ...
    def _get_height(self) -> int: ...
    def _is_pixel_opaque(self, x: int, y: int) -> bool: ...
    def _has_alpha(self) -> bool: ...
    def _draw(self, to_canvas_item: 'RID', pos: 'Vector2', modulate: 'Color', transpose: bool) -> None: ...
    def _draw_rect(self, to_canvas_item: 'RID', rect: 'Rect2', tile: bool, modulate: 'Color', transpose: bool) -> None: ...
    def _draw_rect_region(self, to_canvas_item: 'RID', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color', transpose: bool, clip_uv: bool) -> None: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_size(self) -> 'Vector2': ...
    def has_alpha(self) -> bool: ...
    def draw(self, canvas_item: 'RID', position: 'Vector2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false''')) -> None: ...
    def draw_rect(self, canvas_item: 'RID', rect: 'Rect2', tile: bool, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false''')) -> None: ...
    def draw_rect_region(self, canvas_item: 'RID', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: bool = default('''false'''), clip_uv: bool = default('''true''')) -> None: ...
    def get_image(self) -> 'Image': ...
    def create_placeholder(self) -> 'Resource': ...
    
class Texture2DArray(ImageTextureLayered):
    def create_placeholder(self) -> 'Resource': ...
    
class Texture2DArrayRD(TextureLayeredRD):
    pass
    
class Texture2DRD(Texture2D):
    texture_rd_rid: 'RID'
    def set_texture_rd_rid(self, texture_rd_rid: 'RID') -> None: ...
    def get_texture_rd_rid(self) -> 'RID': ...
    
class Texture3D(Texture):
    def _get_format(self) -> 'Image_Format': ...
    def _get_width(self) -> int: ...
    def _get_height(self) -> int: ...
    def _get_depth(self) -> int: ...
    def _has_mipmaps(self) -> bool: ...
    def _get_data(self) -> 'list[Image]': ...
    def get_format(self) -> 'Image_Format': ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_depth(self) -> int: ...
    def has_mipmaps(self) -> bool: ...
    def get_data(self) -> 'list[Image]': ...
    def create_placeholder(self) -> 'Resource': ...
    
class Texture3DRD(Texture3D):
    texture_rd_rid: 'RID'
    def set_texture_rd_rid(self, texture_rd_rid: 'RID') -> None: ...
    def get_texture_rd_rid(self) -> 'RID': ...
    
class TextureButton(BaseButton):
    texture_normal: 'Texture2D'
    texture_pressed: 'Texture2D'
    texture_hover: 'Texture2D'
    texture_disabled: 'Texture2D'
    texture_focused: 'Texture2D'
    texture_click_mask: 'BitMap'
    ignore_texture_size: bool
    stretch_mode: int
    flip_h: bool
    flip_v: bool
    def set_texture_normal(self, texture: 'Texture2D') -> None: ...
    def set_texture_pressed(self, texture: 'Texture2D') -> None: ...
    def set_texture_hover(self, texture: 'Texture2D') -> None: ...
    def set_texture_disabled(self, texture: 'Texture2D') -> None: ...
    def set_texture_focused(self, texture: 'Texture2D') -> None: ...
    def set_click_mask(self, mask: 'BitMap') -> None: ...
    def set_ignore_texture_size(self, ignore: bool) -> None: ...
    def set_stretch_mode(self, mode: 'TextureButton_StretchMode') -> None: ...
    def set_flip_h(self, enable: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, enable: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def get_texture_normal(self) -> 'Texture2D': ...
    def get_texture_pressed(self) -> 'Texture2D': ...
    def get_texture_hover(self) -> 'Texture2D': ...
    def get_texture_disabled(self) -> 'Texture2D': ...
    def get_texture_focused(self) -> 'Texture2D': ...
    def get_click_mask(self) -> 'BitMap': ...
    def get_ignore_texture_size(self) -> bool: ...
    def get_stretch_mode(self) -> 'TextureButton_StretchMode': ...
    
class TextureButton_StretchMode(Enum):
    STRETCH_SCALE = 0
    STRETCH_TILE = 1
    STRETCH_KEEP = 2
    STRETCH_KEEP_CENTERED = 3
    STRETCH_KEEP_ASPECT = 4
    STRETCH_KEEP_ASPECT_CENTERED = 5
    STRETCH_KEEP_ASPECT_COVERED = 6

class TextureCubemapArrayRD(TextureLayeredRD):
    pass
    
class TextureCubemapRD(TextureLayeredRD):
    pass
    
class TextureLayered(Texture):
    def _get_format(self) -> 'Image_Format': ...
    def _get_layered_type(self) -> int: ...
    def _get_width(self) -> int: ...
    def _get_height(self) -> int: ...
    def _get_layers(self) -> int: ...
    def _has_mipmaps(self) -> bool: ...
    def _get_layer_data(self, layer_index: int) -> 'Image': ...
    def get_format(self) -> 'Image_Format': ...
    def get_layered_type(self) -> 'TextureLayered_LayeredType': ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_layers(self) -> int: ...
    def has_mipmaps(self) -> bool: ...
    def get_layer_data(self, layer: int) -> 'Image': ...
    
class TextureLayered_LayeredType(Enum):
    LAYERED_TYPE_2D_ARRAY = 0
    LAYERED_TYPE_CUBEMAP = 1
    LAYERED_TYPE_CUBEMAP_ARRAY = 2

class TextureLayeredRD(TextureLayered):
    texture_rd_rid: 'RID'
    def set_texture_rd_rid(self, texture_rd_rid: 'RID') -> None: ...
    def get_texture_rd_rid(self) -> 'RID': ...
    
class TextureProgressBar(Range):
    fill_mode: int
    radial_initial_angle: float
    radial_fill_degrees: float
    radial_center_offset: 'Vector2'
    nine_patch_stretch: bool
    stretch_margin_left: int
    stretch_margin_top: int
    stretch_margin_right: int
    stretch_margin_bottom: int
    texture_under: 'Texture2D'
    texture_over: 'Texture2D'
    texture_progress: 'Texture2D'
    texture_progress_offset: 'Vector2'
    tint_under: 'Color'
    tint_over: 'Color'
    tint_progress: 'Color'
    def set_under_texture(self, tex: 'Texture2D') -> None: ...
    def get_under_texture(self) -> 'Texture2D': ...
    def set_progress_texture(self, tex: 'Texture2D') -> None: ...
    def get_progress_texture(self) -> 'Texture2D': ...
    def set_over_texture(self, tex: 'Texture2D') -> None: ...
    def get_over_texture(self) -> 'Texture2D': ...
    def set_fill_mode(self, mode: int) -> None: ...
    def get_fill_mode(self) -> int: ...
    def set_tint_under(self, tint: 'Color') -> None: ...
    def get_tint_under(self) -> 'Color': ...
    def set_tint_progress(self, tint: 'Color') -> None: ...
    def get_tint_progress(self) -> 'Color': ...
    def set_tint_over(self, tint: 'Color') -> None: ...
    def get_tint_over(self) -> 'Color': ...
    def set_texture_progress_offset(self, offset: 'Vector2') -> None: ...
    def get_texture_progress_offset(self) -> 'Vector2': ...
    def set_radial_initial_angle(self, mode: float) -> None: ...
    def get_radial_initial_angle(self) -> float: ...
    def set_radial_center_offset(self, mode: 'Vector2') -> None: ...
    def get_radial_center_offset(self) -> 'Vector2': ...
    def set_fill_degrees(self, mode: float) -> None: ...
    def get_fill_degrees(self) -> float: ...
    def set_stretch_margin(self, margin: 'Side', value: int) -> None: ...
    def get_stretch_margin(self, margin: 'Side') -> int: ...
    def set_nine_patch_stretch(self, stretch: bool) -> None: ...
    def get_nine_patch_stretch(self) -> bool: ...
    
class TextureProgressBar_FillMode(Enum):
    FILL_LEFT_TO_RIGHT = 0
    FILL_RIGHT_TO_LEFT = 1
    FILL_TOP_TO_BOTTOM = 2
    FILL_BOTTOM_TO_TOP = 3
    FILL_CLOCKWISE = 4
    FILL_COUNTER_CLOCKWISE = 5
    FILL_BILINEAR_LEFT_AND_RIGHT = 6
    FILL_BILINEAR_TOP_AND_BOTTOM = 7
    FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE = 8

class TextureRect(Control):
    texture: 'Texture2D'
    expand_mode: int
    stretch_mode: int
    flip_h: bool
    flip_v: bool
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_expand_mode(self, expand_mode: 'TextureRect_ExpandMode') -> None: ...
    def get_expand_mode(self) -> 'TextureRect_ExpandMode': ...
    def set_flip_h(self, enable: bool) -> None: ...
    def is_flipped_h(self) -> bool: ...
    def set_flip_v(self, enable: bool) -> None: ...
    def is_flipped_v(self) -> bool: ...
    def set_stretch_mode(self, stretch_mode: 'TextureRect_StretchMode') -> None: ...
    def get_stretch_mode(self) -> 'TextureRect_StretchMode': ...
    
class TextureRect_ExpandMode(Enum):
    EXPAND_KEEP_SIZE = 0
    EXPAND_IGNORE_SIZE = 1
    EXPAND_FIT_WIDTH = 2
    EXPAND_FIT_WIDTH_PROPORTIONAL = 3
    EXPAND_FIT_HEIGHT = 4
    EXPAND_FIT_HEIGHT_PROPORTIONAL = 5

class TextureRect_StretchMode(Enum):
    STRETCH_SCALE = 0
    STRETCH_TILE = 1
    STRETCH_KEEP = 2
    STRETCH_KEEP_CENTERED = 3
    STRETCH_KEEP_ASPECT = 4
    STRETCH_KEEP_ASPECT_CENTERED = 5
    STRETCH_KEEP_ASPECT_COVERED = 6

class Theme(Resource):
    default_base_scale: float
    default_font: 'Font'
    default_font_size: int
    def set_icon(self, name: 'StringName', theme_type: 'StringName', texture: 'Texture2D') -> None: ...
    def get_icon(self, name: 'StringName', theme_type: 'StringName') -> 'Texture2D': ...
    def has_icon(self, name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_icon(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_icon(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_icon_list(self, theme_type: 'String') -> 'PackedStringArray': ...
    def get_icon_type_list(self) -> 'PackedStringArray': ...
    def set_stylebox(self, name: 'StringName', theme_type: 'StringName', texture: 'StyleBox') -> None: ...
    def get_stylebox(self, name: 'StringName', theme_type: 'StringName') -> 'StyleBox': ...
    def has_stylebox(self, name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_stylebox(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_stylebox(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_stylebox_list(self, theme_type: 'String') -> 'PackedStringArray': ...
    def get_stylebox_type_list(self) -> 'PackedStringArray': ...
    def set_font(self, name: 'StringName', theme_type: 'StringName', font: 'Font') -> None: ...
    def get_font(self, name: 'StringName', theme_type: 'StringName') -> 'Font': ...
    def has_font(self, name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_font(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_font(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_font_list(self, theme_type: 'String') -> 'PackedStringArray': ...
    def get_font_type_list(self) -> 'PackedStringArray': ...
    def set_font_size(self, name: 'StringName', theme_type: 'StringName', font_size: int) -> None: ...
    def get_font_size(self, name: 'StringName', theme_type: 'StringName') -> int: ...
    def has_font_size(self, name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_font_size(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_font_size(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_font_size_list(self, theme_type: 'String') -> 'PackedStringArray': ...
    def get_font_size_type_list(self) -> 'PackedStringArray': ...
    def set_color(self, name: 'StringName', theme_type: 'StringName', color: 'Color') -> None: ...
    def get_color(self, name: 'StringName', theme_type: 'StringName') -> 'Color': ...
    def has_color(self, name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_color(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_color(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_color_list(self, theme_type: 'String') -> 'PackedStringArray': ...
    def get_color_type_list(self) -> 'PackedStringArray': ...
    def set_constant(self, name: 'StringName', theme_type: 'StringName', constant: int) -> None: ...
    def get_constant(self, name: 'StringName', theme_type: 'StringName') -> int: ...
    def has_constant(self, name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_constant(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_constant(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_constant_list(self, theme_type: 'String') -> 'PackedStringArray': ...
    def get_constant_type_list(self) -> 'PackedStringArray': ...
    def set_default_base_scale(self, base_scale: float) -> None: ...
    def get_default_base_scale(self) -> float: ...
    def has_default_base_scale(self) -> bool: ...
    def set_default_font(self, font: 'Font') -> None: ...
    def get_default_font(self) -> 'Font': ...
    def has_default_font(self) -> bool: ...
    def set_default_font_size(self, font_size: int) -> None: ...
    def get_default_font_size(self) -> int: ...
    def has_default_font_size(self) -> bool: ...
    def set_theme_item(self, data_type: 'Theme_DataType', name: 'StringName', theme_type: 'StringName', value: 'Variant') -> None: ...
    def get_theme_item(self, data_type: 'Theme_DataType', name: 'StringName', theme_type: 'StringName') -> 'Variant': ...
    def has_theme_item(self, data_type: 'Theme_DataType', name: 'StringName', theme_type: 'StringName') -> bool: ...
    def rename_theme_item(self, data_type: 'Theme_DataType', old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_theme_item(self, data_type: 'Theme_DataType', name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_theme_item_list(self, data_type: 'Theme_DataType', theme_type: 'String') -> 'PackedStringArray': ...
    def get_theme_item_type_list(self, data_type: 'Theme_DataType') -> 'PackedStringArray': ...
    def set_type_variation(self, theme_type: 'StringName', base_type: 'StringName') -> None: ...
    def is_type_variation(self, theme_type: 'StringName', base_type: 'StringName') -> bool: ...
    def clear_type_variation(self, theme_type: 'StringName') -> None: ...
    def get_type_variation_base(self, theme_type: 'StringName') -> 'StringName': ...
    def get_type_variation_list(self, base_type: 'StringName') -> 'PackedStringArray': ...
    def add_type(self, theme_type: 'StringName') -> None: ...
    def remove_type(self, theme_type: 'StringName') -> None: ...
    def get_type_list(self) -> 'PackedStringArray': ...
    def merge_with(self, other: 'Theme') -> None: ...
    def clear(self) -> None: ...
    
class Theme_DataType(Enum):
    DATA_TYPE_COLOR = 0
    DATA_TYPE_CONSTANT = 1
    DATA_TYPE_FONT = 2
    DATA_TYPE_FONT_SIZE = 3
    DATA_TYPE_ICON = 4
    DATA_TYPE_STYLEBOX = 5
    DATA_TYPE_MAX = 6

class ThemeDB(Object):
    fallback_base_scale: float
    fallback_font: 'Font'
    fallback_font_size: int
    fallback_icon: 'Texture2D'
    fallback_stylebox: 'StyleBox'
    fallback_changed: Signal[Callable[[], None]]  # fallback_changed()
    def get_default_theme(self) -> 'Theme': ...
    def get_project_theme(self) -> 'Theme': ...
    def set_fallback_base_scale(self, base_scale: float) -> None: ...
    def get_fallback_base_scale(self) -> float: ...
    def set_fallback_font(self, font: 'Font') -> None: ...
    def get_fallback_font(self) -> 'Font': ...
    def set_fallback_font_size(self, font_size: int) -> None: ...
    def get_fallback_font_size(self) -> int: ...
    def set_fallback_icon(self, icon: 'Texture2D') -> None: ...
    def get_fallback_icon(self) -> 'Texture2D': ...
    def set_fallback_stylebox(self, stylebox: 'StyleBox') -> None: ...
    def get_fallback_stylebox(self) -> 'StyleBox': ...
    
class Thread(RefCounted):
    def start(self, callable: 'Callable', priority: 'Thread_Priority' = default('''1''')) -> 'Error': ...
    def get_id(self) -> 'String': ...
    def is_started(self) -> bool: ...
    def is_alive(self) -> bool: ...
    def wait_to_finish(self) -> 'Variant': ...
    @staticmethod
    def set_thread_safety_checks_enabled(enabled: bool) -> None: ...
    
class Thread_Priority(Enum):
    PRIORITY_LOW = 0
    PRIORITY_NORMAL = 1
    PRIORITY_HIGH = 2

class TileData(Object):
    flip_h: bool
    flip_v: bool
    transpose: bool
    texture_origin: 'Vector2i'
    modulate: 'Color'
    material: 'CanvasItemMaterial'
    z_index: int
    y_sort_origin: int
    terrain_set: int
    terrain: int
    probability: float
    changed: Signal[Callable[[], None]]  # changed()
    def set_flip_h(self, flip_h: bool) -> None: ...
    def get_flip_h(self) -> bool: ...
    def set_flip_v(self, flip_v: bool) -> None: ...
    def get_flip_v(self) -> bool: ...
    def set_transpose(self, transpose: bool) -> None: ...
    def get_transpose(self) -> bool: ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_texture_origin(self, texture_origin: 'Vector2i') -> None: ...
    def get_texture_origin(self) -> 'Vector2i': ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_z_index(self, z_index: int) -> None: ...
    def get_z_index(self) -> int: ...
    def set_y_sort_origin(self, y_sort_origin: int) -> None: ...
    def get_y_sort_origin(self) -> int: ...
    def set_occluder_polygons_count(self, layer_id: int, polygons_count: int) -> None: ...
    def get_occluder_polygons_count(self, layer_id: int) -> int: ...
    def add_occluder_polygon(self, layer_id: int) -> None: ...
    def remove_occluder_polygon(self, layer_id: int, polygon_index: int) -> None: ...
    def set_occluder_polygon(self, layer_id: int, polygon_index: int, polygon: 'OccluderPolygon2D') -> None: ...
    def get_occluder_polygon(self, layer_id: int, polygon_index: int, flip_h: bool = default('''false'''), flip_v: bool = default('''false'''), transpose: bool = default('''false''')) -> 'OccluderPolygon2D': ...
    def set_occluder(self, layer_id: int, occluder_polygon: 'OccluderPolygon2D') -> None: ...
    def get_occluder(self, layer_id: int, flip_h: bool = default('''false'''), flip_v: bool = default('''false'''), transpose: bool = default('''false''')) -> 'OccluderPolygon2D': ...
    def set_constant_linear_velocity(self, layer_id: int, velocity: 'Vector2') -> None: ...
    def get_constant_linear_velocity(self, layer_id: int) -> 'Vector2': ...
    def set_constant_angular_velocity(self, layer_id: int, velocity: float) -> None: ...
    def get_constant_angular_velocity(self, layer_id: int) -> float: ...
    def set_collision_polygons_count(self, layer_id: int, polygons_count: int) -> None: ...
    def get_collision_polygons_count(self, layer_id: int) -> int: ...
    def add_collision_polygon(self, layer_id: int) -> None: ...
    def remove_collision_polygon(self, layer_id: int, polygon_index: int) -> None: ...
    def set_collision_polygon_points(self, layer_id: int, polygon_index: int, polygon: 'PackedVector2Array') -> None: ...
    def get_collision_polygon_points(self, layer_id: int, polygon_index: int) -> 'PackedVector2Array': ...
    def set_collision_polygon_one_way(self, layer_id: int, polygon_index: int, one_way: bool) -> None: ...
    def is_collision_polygon_one_way(self, layer_id: int, polygon_index: int) -> bool: ...
    def set_collision_polygon_one_way_margin(self, layer_id: int, polygon_index: int, one_way_margin: float) -> None: ...
    def get_collision_polygon_one_way_margin(self, layer_id: int, polygon_index: int) -> float: ...
    def set_terrain_set(self, terrain_set: int) -> None: ...
    def get_terrain_set(self) -> int: ...
    def set_terrain(self, terrain: int) -> None: ...
    def get_terrain(self) -> int: ...
    def set_terrain_peering_bit(self, peering_bit: 'TileSet_CellNeighbor', terrain: int) -> None: ...
    def get_terrain_peering_bit(self, peering_bit: 'TileSet_CellNeighbor') -> int: ...
    def is_valid_terrain_peering_bit(self, peering_bit: 'TileSet_CellNeighbor') -> bool: ...
    def set_navigation_polygon(self, layer_id: int, navigation_polygon: 'NavigationPolygon') -> None: ...
    def get_navigation_polygon(self, layer_id: int, flip_h: bool = default('''false'''), flip_v: bool = default('''false'''), transpose: bool = default('''false''')) -> 'NavigationPolygon': ...
    def set_probability(self, probability: float) -> None: ...
    def get_probability(self) -> float: ...
    def set_custom_data(self, layer_name: 'String', value: 'Variant') -> None: ...
    def get_custom_data(self, layer_name: 'String') -> 'Variant': ...
    def has_custom_data(self, layer_name: 'String') -> bool: ...
    def set_custom_data_by_layer_id(self, layer_id: int, value: 'Variant') -> None: ...
    def get_custom_data_by_layer_id(self, layer_id: int) -> 'Variant': ...
    
class TileMap(Node2D):
    tile_set: 'TileSet'
    rendering_quadrant_size: int
    collision_animatable: bool
    collision_visibility_mode: int
    navigation_visibility_mode: int
    changed: Signal[Callable[[], None]]  # changed()
    def _use_tile_data_runtime_update(self, layer: int, coords: 'Vector2i') -> bool: ...
    def _tile_data_runtime_update(self, layer: int, coords: 'Vector2i', tile_data: 'TileData') -> None: ...
    def set_navigation_map(self, layer: int, map: 'RID') -> None: ...
    def get_navigation_map(self, layer: int) -> 'RID': ...
    def force_update(self, layer: int = default('''-1''')) -> None: ...
    def set_tileset(self, tileset: 'TileSet') -> None: ...
    def get_tileset(self) -> 'TileSet': ...
    def set_rendering_quadrant_size(self, size: int) -> None: ...
    def get_rendering_quadrant_size(self) -> int: ...
    def get_layers_count(self) -> int: ...
    def add_layer(self, to_position: int) -> None: ...
    def move_layer(self, layer: int, to_position: int) -> None: ...
    def remove_layer(self, layer: int) -> None: ...
    def set_layer_name(self, layer: int, name: 'String') -> None: ...
    def get_layer_name(self, layer: int) -> 'String': ...
    def set_layer_enabled(self, layer: int, enabled: bool) -> None: ...
    def is_layer_enabled(self, layer: int) -> bool: ...
    def set_layer_modulate(self, layer: int, modulate: 'Color') -> None: ...
    def get_layer_modulate(self, layer: int) -> 'Color': ...
    def set_layer_y_sort_enabled(self, layer: int, y_sort_enabled: bool) -> None: ...
    def is_layer_y_sort_enabled(self, layer: int) -> bool: ...
    def set_layer_y_sort_origin(self, layer: int, y_sort_origin: int) -> None: ...
    def get_layer_y_sort_origin(self, layer: int) -> int: ...
    def set_layer_z_index(self, layer: int, z_index: int) -> None: ...
    def get_layer_z_index(self, layer: int) -> int: ...
    def set_layer_navigation_enabled(self, layer: int, enabled: bool) -> None: ...
    def is_layer_navigation_enabled(self, layer: int) -> bool: ...
    def set_layer_navigation_map(self, layer: int, map: 'RID') -> None: ...
    def get_layer_navigation_map(self, layer: int) -> 'RID': ...
    def set_collision_animatable(self, enabled: bool) -> None: ...
    def is_collision_animatable(self) -> bool: ...
    def set_collision_visibility_mode(self, collision_visibility_mode: 'TileMap_VisibilityMode') -> None: ...
    def get_collision_visibility_mode(self) -> 'TileMap_VisibilityMode': ...
    def set_navigation_visibility_mode(self, navigation_visibility_mode: 'TileMap_VisibilityMode') -> None: ...
    def get_navigation_visibility_mode(self) -> 'TileMap_VisibilityMode': ...
    def set_cell(self, layer: int, coords: 'Vector2i', source_id: int = default('''-1'''), atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: int = default('''0''')) -> None: ...
    def erase_cell(self, layer: int, coords: 'Vector2i') -> None: ...
    def get_cell_source_id(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> int: ...
    def get_cell_atlas_coords(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> 'Vector2i': ...
    def get_cell_alternative_tile(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> int: ...
    def get_cell_tile_data(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> 'TileData': ...
    def is_cell_flipped_h(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> bool: ...
    def is_cell_flipped_v(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> bool: ...
    def is_cell_transposed(self, layer: int, coords: 'Vector2i', use_proxies: bool = default('''false''')) -> bool: ...
    def get_coords_for_body_rid(self, body: 'RID') -> 'Vector2i': ...
    def get_layer_for_body_rid(self, body: 'RID') -> int: ...
    def get_pattern(self, layer: int, coords_array: 'list[Vector2i]') -> 'TileMapPattern': ...
    def map_pattern(self, position_in_tilemap: 'Vector2i', coords_in_pattern: 'Vector2i', pattern: 'TileMapPattern') -> 'Vector2i': ...
    def set_pattern(self, layer: int, position: 'Vector2i', pattern: 'TileMapPattern') -> None: ...
    def set_cells_terrain_connect(self, layer: int, cells: 'list[Vector2i]', terrain_set: int, terrain: int, ignore_empty_terrains: bool = default('''true''')) -> None: ...
    def set_cells_terrain_path(self, layer: int, path: 'list[Vector2i]', terrain_set: int, terrain: int, ignore_empty_terrains: bool = default('''true''')) -> None: ...
    def fix_invalid_tiles(self) -> None: ...
    def clear_layer(self, layer: int) -> None: ...
    def clear(self) -> None: ...
    def update_internals(self) -> None: ...
    def notify_runtime_tile_data_update(self, layer: int = default('''-1''')) -> None: ...
    def get_surrounding_cells(self, coords: 'Vector2i') -> 'list[Vector2i]': ...
    def get_used_cells(self, layer: int) -> 'list[Vector2i]': ...
    def get_used_cells_by_id(self, layer: int, source_id: int = default('''-1'''), atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: int = default('''-1''')) -> 'list[Vector2i]': ...
    def get_used_rect(self) -> 'Rect2i': ...
    def map_to_local(self, map_position: 'Vector2i') -> 'Vector2': ...
    def local_to_map(self, local_position: 'Vector2') -> 'Vector2i': ...
    def get_neighbor_cell(self, coords: 'Vector2i', neighbor: 'TileSet_CellNeighbor') -> 'Vector2i': ...
    
class TileMap_VisibilityMode(Enum):
    VISIBILITY_MODE_DEFAULT = 0
    VISIBILITY_MODE_FORCE_HIDE = 2
    VISIBILITY_MODE_FORCE_SHOW = 1

class TileMapLayer(Node2D):
    tile_map_data: 'PackedByteArray'
    enabled: bool
    tile_set: 'TileSet'
    occlusion_enabled: bool
    y_sort_origin: int
    x_draw_order_reversed: bool
    rendering_quadrant_size: int
    collision_enabled: bool
    use_kinematic_bodies: bool
    collision_visibility_mode: int
    navigation_enabled: bool
    navigation_visibility_mode: int
    changed: Signal[Callable[[], None]]  # changed()
    def _use_tile_data_runtime_update(self, coords: 'Vector2i') -> bool: ...
    def _tile_data_runtime_update(self, coords: 'Vector2i', tile_data: 'TileData') -> None: ...
    def _update_cells(self, coords: 'list[Vector2i]', forced_cleanup: bool) -> None: ...
    def set_cell(self, coords: 'Vector2i', source_id: int = default('''-1'''), atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: int = default('''0''')) -> None: ...
    def erase_cell(self, coords: 'Vector2i') -> None: ...
    def fix_invalid_tiles(self) -> None: ...
    def clear(self) -> None: ...
    def get_cell_source_id(self, coords: 'Vector2i') -> int: ...
    def get_cell_atlas_coords(self, coords: 'Vector2i') -> 'Vector2i': ...
    def get_cell_alternative_tile(self, coords: 'Vector2i') -> int: ...
    def get_cell_tile_data(self, coords: 'Vector2i') -> 'TileData': ...
    def is_cell_flipped_h(self, coords: 'Vector2i') -> bool: ...
    def is_cell_flipped_v(self, coords: 'Vector2i') -> bool: ...
    def is_cell_transposed(self, coords: 'Vector2i') -> bool: ...
    def get_used_cells(self) -> 'list[Vector2i]': ...
    def get_used_cells_by_id(self, source_id: int = default('''-1'''), atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: int = default('''-1''')) -> 'list[Vector2i]': ...
    def get_used_rect(self) -> 'Rect2i': ...
    def get_pattern(self, coords_array: 'list[Vector2i]') -> 'TileMapPattern': ...
    def set_pattern(self, position: 'Vector2i', pattern: 'TileMapPattern') -> None: ...
    def set_cells_terrain_connect(self, cells: 'list[Vector2i]', terrain_set: int, terrain: int, ignore_empty_terrains: bool = default('''true''')) -> None: ...
    def set_cells_terrain_path(self, path: 'list[Vector2i]', terrain_set: int, terrain: int, ignore_empty_terrains: bool = default('''true''')) -> None: ...
    def has_body_rid(self, body: 'RID') -> bool: ...
    def get_coords_for_body_rid(self, body: 'RID') -> 'Vector2i': ...
    def update_internals(self) -> None: ...
    def notify_runtime_tile_data_update(self) -> None: ...
    def map_pattern(self, position_in_tilemap: 'Vector2i', coords_in_pattern: 'Vector2i', pattern: 'TileMapPattern') -> 'Vector2i': ...
    def get_surrounding_cells(self, coords: 'Vector2i') -> 'list[Vector2i]': ...
    def get_neighbor_cell(self, coords: 'Vector2i', neighbor: 'TileSet_CellNeighbor') -> 'Vector2i': ...
    def map_to_local(self, map_position: 'Vector2i') -> 'Vector2': ...
    def local_to_map(self, local_position: 'Vector2') -> 'Vector2i': ...
    def set_tile_map_data_from_array(self, tile_map_layer_data: 'PackedByteArray') -> None: ...
    def get_tile_map_data_as_array(self) -> 'PackedByteArray': ...
    def set_enabled(self, enabled: bool) -> None: ...
    def is_enabled(self) -> bool: ...
    def set_tile_set(self, tile_set: 'TileSet') -> None: ...
    def get_tile_set(self) -> 'TileSet': ...
    def set_y_sort_origin(self, y_sort_origin: int) -> None: ...
    def get_y_sort_origin(self) -> int: ...
    def set_x_draw_order_reversed(self, x_draw_order_reversed: bool) -> None: ...
    def is_x_draw_order_reversed(self) -> bool: ...
    def set_rendering_quadrant_size(self, size: int) -> None: ...
    def get_rendering_quadrant_size(self) -> int: ...
    def set_collision_enabled(self, enabled: bool) -> None: ...
    def is_collision_enabled(self) -> bool: ...
    def set_use_kinematic_bodies(self, use_kinematic_bodies: bool) -> None: ...
    def is_using_kinematic_bodies(self) -> bool: ...
    def set_collision_visibility_mode(self, visibility_mode: 'TileMapLayer_DebugVisibilityMode') -> None: ...
    def get_collision_visibility_mode(self) -> 'TileMapLayer_DebugVisibilityMode': ...
    def set_occlusion_enabled(self, enabled: bool) -> None: ...
    def is_occlusion_enabled(self) -> bool: ...
    def set_navigation_enabled(self, enabled: bool) -> None: ...
    def is_navigation_enabled(self) -> bool: ...
    def set_navigation_map(self, map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_navigation_visibility_mode(self, show_navigation: 'TileMapLayer_DebugVisibilityMode') -> None: ...
    def get_navigation_visibility_mode(self) -> 'TileMapLayer_DebugVisibilityMode': ...
    
class TileMapLayer_DebugVisibilityMode(Enum):
    DEBUG_VISIBILITY_MODE_DEFAULT = 0
    DEBUG_VISIBILITY_MODE_FORCE_HIDE = 2
    DEBUG_VISIBILITY_MODE_FORCE_SHOW = 1

class TileMapPattern(Resource):
    def set_cell(self, coords: 'Vector2i', source_id: int = default('''-1'''), atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: int = default('''-1''')) -> None: ...
    def has_cell(self, coords: 'Vector2i') -> bool: ...
    def remove_cell(self, coords: 'Vector2i', update_size: bool) -> None: ...
    def get_cell_source_id(self, coords: 'Vector2i') -> int: ...
    def get_cell_atlas_coords(self, coords: 'Vector2i') -> 'Vector2i': ...
    def get_cell_alternative_tile(self, coords: 'Vector2i') -> int: ...
    def get_used_cells(self) -> 'list[Vector2i]': ...
    def get_size(self) -> 'Vector2i': ...
    def set_size(self, size: 'Vector2i') -> None: ...
    def is_empty(self) -> bool: ...
    
class TileSet(Resource):
    tile_shape: int
    tile_layout: int
    tile_offset_axis: int
    tile_size: 'Vector2i'
    uv_clipping: bool
    def get_next_source_id(self) -> int: ...
    def add_source(self, source: 'TileSetSource', atlas_source_id_override: int = default('''-1''')) -> int: ...
    def remove_source(self, source_id: int) -> None: ...
    def set_source_id(self, source_id: int, new_source_id: int) -> None: ...
    def get_source_count(self) -> int: ...
    def get_source_id(self, index: int) -> int: ...
    def has_source(self, source_id: int) -> bool: ...
    def get_source(self, source_id: int) -> 'TileSetSource': ...
    def set_tile_shape(self, shape: 'TileSet_TileShape') -> None: ...
    def get_tile_shape(self) -> 'TileSet_TileShape': ...
    def set_tile_layout(self, layout: 'TileSet_TileLayout') -> None: ...
    def get_tile_layout(self) -> 'TileSet_TileLayout': ...
    def set_tile_offset_axis(self, alignment: 'TileSet_TileOffsetAxis') -> None: ...
    def get_tile_offset_axis(self) -> 'TileSet_TileOffsetAxis': ...
    def set_tile_size(self, size: 'Vector2i') -> None: ...
    def get_tile_size(self) -> 'Vector2i': ...
    def set_uv_clipping(self, uv_clipping: bool) -> None: ...
    def is_uv_clipping(self) -> bool: ...
    def get_occlusion_layers_count(self) -> int: ...
    def add_occlusion_layer(self, to_position: int = default('''-1''')) -> None: ...
    def move_occlusion_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_occlusion_layer(self, layer_index: int) -> None: ...
    def set_occlusion_layer_light_mask(self, layer_index: int, light_mask: int) -> None: ...
    def get_occlusion_layer_light_mask(self, layer_index: int) -> int: ...
    def set_occlusion_layer_sdf_collision(self, layer_index: int, sdf_collision: bool) -> None: ...
    def get_occlusion_layer_sdf_collision(self, layer_index: int) -> bool: ...
    def get_physics_layers_count(self) -> int: ...
    def add_physics_layer(self, to_position: int = default('''-1''')) -> None: ...
    def move_physics_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_physics_layer(self, layer_index: int) -> None: ...
    def set_physics_layer_collision_layer(self, layer_index: int, layer: int) -> None: ...
    def get_physics_layer_collision_layer(self, layer_index: int) -> int: ...
    def set_physics_layer_collision_mask(self, layer_index: int, mask: int) -> None: ...
    def get_physics_layer_collision_mask(self, layer_index: int) -> int: ...
    def set_physics_layer_collision_priority(self, layer_index: int, priority: float) -> None: ...
    def get_physics_layer_collision_priority(self, layer_index: int) -> float: ...
    def set_physics_layer_physics_material(self, layer_index: int, physics_material: 'PhysicsMaterial') -> None: ...
    def get_physics_layer_physics_material(self, layer_index: int) -> 'PhysicsMaterial': ...
    def get_terrain_sets_count(self) -> int: ...
    def add_terrain_set(self, to_position: int = default('''-1''')) -> None: ...
    def move_terrain_set(self, terrain_set: int, to_position: int) -> None: ...
    def remove_terrain_set(self, terrain_set: int) -> None: ...
    def set_terrain_set_mode(self, terrain_set: int, mode: 'TileSet_TerrainMode') -> None: ...
    def get_terrain_set_mode(self, terrain_set: int) -> 'TileSet_TerrainMode': ...
    def get_terrains_count(self, terrain_set: int) -> int: ...
    def add_terrain(self, terrain_set: int, to_position: int = default('''-1''')) -> None: ...
    def move_terrain(self, terrain_set: int, terrain_index: int, to_position: int) -> None: ...
    def remove_terrain(self, terrain_set: int, terrain_index: int) -> None: ...
    def set_terrain_name(self, terrain_set: int, terrain_index: int, name: 'String') -> None: ...
    def get_terrain_name(self, terrain_set: int, terrain_index: int) -> 'String': ...
    def set_terrain_color(self, terrain_set: int, terrain_index: int, color: 'Color') -> None: ...
    def get_terrain_color(self, terrain_set: int, terrain_index: int) -> 'Color': ...
    def get_navigation_layers_count(self) -> int: ...
    def add_navigation_layer(self, to_position: int = default('''-1''')) -> None: ...
    def move_navigation_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_navigation_layer(self, layer_index: int) -> None: ...
    def set_navigation_layer_layers(self, layer_index: int, layers: int) -> None: ...
    def get_navigation_layer_layers(self, layer_index: int) -> int: ...
    def set_navigation_layer_layer_value(self, layer_index: int, layer_number: int, value: bool) -> None: ...
    def get_navigation_layer_layer_value(self, layer_index: int, layer_number: int) -> bool: ...
    def get_custom_data_layers_count(self) -> int: ...
    def add_custom_data_layer(self, to_position: int = default('''-1''')) -> None: ...
    def move_custom_data_layer(self, layer_index: int, to_position: int) -> None: ...
    def remove_custom_data_layer(self, layer_index: int) -> None: ...
    def get_custom_data_layer_by_name(self, layer_name: 'String') -> int: ...
    def set_custom_data_layer_name(self, layer_index: int, layer_name: 'String') -> None: ...
    def has_custom_data_layer_by_name(self, layer_name: 'String') -> bool: ...
    def get_custom_data_layer_name(self, layer_index: int) -> 'String': ...
    def set_custom_data_layer_type(self, layer_index: int, layer_type: 'Variant_Type') -> None: ...
    def get_custom_data_layer_type(self, layer_index: int) -> 'Variant_Type': ...
    def set_source_level_tile_proxy(self, source_from: int, source_to: int) -> None: ...
    def get_source_level_tile_proxy(self, source_from: int) -> int: ...
    def has_source_level_tile_proxy(self, source_from: int) -> bool: ...
    def remove_source_level_tile_proxy(self, source_from: int) -> None: ...
    def set_coords_level_tile_proxy(self, p_source_from: int, coords_from: 'Vector2i', source_to: int, coords_to: 'Vector2i') -> None: ...
    def get_coords_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i') -> 'Array': ...
    def has_coords_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i') -> bool: ...
    def remove_coords_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i') -> None: ...
    def set_alternative_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i', alternative_from: int, source_to: int, coords_to: 'Vector2i', alternative_to: int) -> None: ...
    def get_alternative_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i', alternative_from: int) -> 'Array': ...
    def has_alternative_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i', alternative_from: int) -> bool: ...
    def remove_alternative_level_tile_proxy(self, source_from: int, coords_from: 'Vector2i', alternative_from: int) -> None: ...
    def map_tile_proxy(self, source_from: int, coords_from: 'Vector2i', alternative_from: int) -> 'Array': ...
    def cleanup_invalid_tile_proxies(self) -> None: ...
    def clear_tile_proxies(self) -> None: ...
    def add_pattern(self, pattern: 'TileMapPattern', index: int = default('''-1''')) -> int: ...
    def get_pattern(self, index: int = default('''-1''')) -> 'TileMapPattern': ...
    def remove_pattern(self, index: int) -> None: ...
    def get_patterns_count(self) -> int: ...
    
class TileSet_TileShape(Enum):
    TILE_SHAPE_SQUARE = 0
    TILE_SHAPE_ISOMETRIC = 1
    TILE_SHAPE_HALF_OFFSET_SQUARE = 2
    TILE_SHAPE_HEXAGON = 3

class TileSet_TileLayout(Enum):
    TILE_LAYOUT_STACKED = 0
    TILE_LAYOUT_STACKED_OFFSET = 1
    TILE_LAYOUT_STAIRS_RIGHT = 2
    TILE_LAYOUT_STAIRS_DOWN = 3
    TILE_LAYOUT_DIAMOND_RIGHT = 4
    TILE_LAYOUT_DIAMOND_DOWN = 5

class TileSet_TileOffsetAxis(Enum):
    TILE_OFFSET_AXIS_HORIZONTAL = 0
    TILE_OFFSET_AXIS_VERTICAL = 1

class TileSet_CellNeighbor(Enum):
    CELL_NEIGHBOR_RIGHT_SIDE = 0
    CELL_NEIGHBOR_RIGHT_CORNER = 1
    CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE = 2
    CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER = 3
    CELL_NEIGHBOR_BOTTOM_SIDE = 4
    CELL_NEIGHBOR_BOTTOM_CORNER = 5
    CELL_NEIGHBOR_BOTTOM_LEFT_SIDE = 6
    CELL_NEIGHBOR_BOTTOM_LEFT_CORNER = 7
    CELL_NEIGHBOR_LEFT_SIDE = 8
    CELL_NEIGHBOR_LEFT_CORNER = 9
    CELL_NEIGHBOR_TOP_LEFT_SIDE = 10
    CELL_NEIGHBOR_TOP_LEFT_CORNER = 11
    CELL_NEIGHBOR_TOP_SIDE = 12
    CELL_NEIGHBOR_TOP_CORNER = 13
    CELL_NEIGHBOR_TOP_RIGHT_SIDE = 14
    CELL_NEIGHBOR_TOP_RIGHT_CORNER = 15

class TileSet_TerrainMode(Enum):
    TERRAIN_MODE_MATCH_CORNERS_AND_SIDES = 0
    TERRAIN_MODE_MATCH_CORNERS = 1
    TERRAIN_MODE_MATCH_SIDES = 2

class TileSetAtlasSource(TileSetSource):
    texture: 'Texture2D'
    margins: 'Vector2i'
    separation: 'Vector2i'
    texture_region_size: 'Vector2i'
    use_texture_padding: bool
    TRANSFORM_FLIP_H = 4096
    TRANSFORM_FLIP_V = 8192
    TRANSFORM_TRANSPOSE = 16384
    
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_margins(self, margins: 'Vector2i') -> None: ...
    def get_margins(self) -> 'Vector2i': ...
    def set_separation(self, separation: 'Vector2i') -> None: ...
    def get_separation(self) -> 'Vector2i': ...
    def set_texture_region_size(self, texture_region_size: 'Vector2i') -> None: ...
    def get_texture_region_size(self) -> 'Vector2i': ...
    def set_use_texture_padding(self, use_texture_padding: bool) -> None: ...
    def get_use_texture_padding(self) -> bool: ...
    def create_tile(self, atlas_coords: 'Vector2i', size: 'Vector2i' = default('''Vector2i(1, 1)''')) -> None: ...
    def remove_tile(self, atlas_coords: 'Vector2i') -> None: ...
    def move_tile_in_atlas(self, atlas_coords: 'Vector2i', new_atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), new_size: 'Vector2i' = default('''Vector2i(-1, -1)''')) -> None: ...
    def get_tile_size_in_atlas(self, atlas_coords: 'Vector2i') -> 'Vector2i': ...
    def has_room_for_tile(self, atlas_coords: 'Vector2i', size: 'Vector2i', animation_columns: int, animation_separation: 'Vector2i', frames_count: int, ignored_tile: 'Vector2i' = default('''Vector2i(-1, -1)''')) -> bool: ...
    def get_tiles_to_be_removed_on_change(self, texture: 'Texture2D', margins: 'Vector2i', separation: 'Vector2i', texture_region_size: 'Vector2i') -> 'PackedVector2Array': ...
    def get_tile_at_coords(self, atlas_coords: 'Vector2i') -> 'Vector2i': ...
    def has_tiles_outside_texture(self) -> bool: ...
    def clear_tiles_outside_texture(self) -> None: ...
    def set_tile_animation_columns(self, atlas_coords: 'Vector2i', frame_columns: int) -> None: ...
    def get_tile_animation_columns(self, atlas_coords: 'Vector2i') -> int: ...
    def set_tile_animation_separation(self, atlas_coords: 'Vector2i', separation: 'Vector2i') -> None: ...
    def get_tile_animation_separation(self, atlas_coords: 'Vector2i') -> 'Vector2i': ...
    def set_tile_animation_speed(self, atlas_coords: 'Vector2i', speed: float) -> None: ...
    def get_tile_animation_speed(self, atlas_coords: 'Vector2i') -> float: ...
    def set_tile_animation_mode(self, atlas_coords: 'Vector2i', mode: 'TileSetAtlasSource_TileAnimationMode') -> None: ...
    def get_tile_animation_mode(self, atlas_coords: 'Vector2i') -> 'TileSetAtlasSource_TileAnimationMode': ...
    def set_tile_animation_frames_count(self, atlas_coords: 'Vector2i', frames_count: int) -> None: ...
    def get_tile_animation_frames_count(self, atlas_coords: 'Vector2i') -> int: ...
    def set_tile_animation_frame_duration(self, atlas_coords: 'Vector2i', frame_index: int, duration: float) -> None: ...
    def get_tile_animation_frame_duration(self, atlas_coords: 'Vector2i', frame_index: int) -> float: ...
    def get_tile_animation_total_duration(self, atlas_coords: 'Vector2i') -> float: ...
    def create_alternative_tile(self, atlas_coords: 'Vector2i', alternative_id_override: int = default('''-1''')) -> int: ...
    def remove_alternative_tile(self, atlas_coords: 'Vector2i', alternative_tile: int) -> None: ...
    def set_alternative_tile_id(self, atlas_coords: 'Vector2i', alternative_tile: int, new_id: int) -> None: ...
    def get_next_alternative_tile_id(self, atlas_coords: 'Vector2i') -> int: ...
    def get_tile_data(self, atlas_coords: 'Vector2i', alternative_tile: int) -> 'TileData': ...
    def get_atlas_grid_size(self) -> 'Vector2i': ...
    def get_tile_texture_region(self, atlas_coords: 'Vector2i', frame: int = default('''0''')) -> 'Rect2i': ...
    def get_runtime_texture(self) -> 'Texture2D': ...
    def get_runtime_tile_texture_region(self, atlas_coords: 'Vector2i', frame: int) -> 'Rect2i': ...
    
class TileSetAtlasSource_TileAnimationMode(Enum):
    TILE_ANIMATION_MODE_DEFAULT = 0
    TILE_ANIMATION_MODE_RANDOM_START_TIMES = 1
    TILE_ANIMATION_MODE_MAX = 2

class TileSetScenesCollectionSource(TileSetSource):
    def get_scene_tiles_count(self) -> int: ...
    def get_scene_tile_id(self, index: int) -> int: ...
    def has_scene_tile_id(self, id: int) -> bool: ...
    def create_scene_tile(self, packed_scene: 'PackedScene', id_override: int = default('''-1''')) -> int: ...
    def set_scene_tile_id(self, id: int, new_id: int) -> None: ...
    def set_scene_tile_scene(self, id: int, packed_scene: 'PackedScene') -> None: ...
    def get_scene_tile_scene(self, id: int) -> 'PackedScene': ...
    def set_scene_tile_display_placeholder(self, id: int, display_placeholder: bool) -> None: ...
    def get_scene_tile_display_placeholder(self, id: int) -> bool: ...
    def remove_scene_tile(self, id: int) -> None: ...
    def get_next_scene_tile_id(self) -> int: ...
    
class TileSetSource(Resource):
    def get_tiles_count(self) -> int: ...
    def get_tile_id(self, index: int) -> 'Vector2i': ...
    def has_tile(self, atlas_coords: 'Vector2i') -> bool: ...
    def get_alternative_tiles_count(self, atlas_coords: 'Vector2i') -> int: ...
    def get_alternative_tile_id(self, atlas_coords: 'Vector2i', index: int) -> int: ...
    def has_alternative_tile(self, atlas_coords: 'Vector2i', alternative_tile: int) -> bool: ...
    
class Time(Object):
    def get_datetime_dict_from_unix_time(self, unix_time_val: int) -> 'Dictionary': ...
    def get_date_dict_from_unix_time(self, unix_time_val: int) -> 'Dictionary': ...
    def get_time_dict_from_unix_time(self, unix_time_val: int) -> 'Dictionary': ...
    def get_datetime_string_from_unix_time(self, unix_time_val: int, use_space: bool = default('''false''')) -> 'String': ...
    def get_date_string_from_unix_time(self, unix_time_val: int) -> 'String': ...
    def get_time_string_from_unix_time(self, unix_time_val: int) -> 'String': ...
    def get_datetime_dict_from_datetime_string(self, datetime: 'String', weekday: bool) -> 'Dictionary': ...
    def get_datetime_string_from_datetime_dict(self, datetime: 'Dictionary', use_space: bool) -> 'String': ...
    def get_unix_time_from_datetime_dict(self, datetime: 'Dictionary') -> int: ...
    def get_unix_time_from_datetime_string(self, datetime: 'String') -> int: ...
    def get_offset_string_from_offset_minutes(self, offset_minutes: int) -> 'String': ...
    def get_datetime_dict_from_system(self, utc: bool = default('''false''')) -> 'Dictionary': ...
    def get_date_dict_from_system(self, utc: bool = default('''false''')) -> 'Dictionary': ...
    def get_time_dict_from_system(self, utc: bool = default('''false''')) -> 'Dictionary': ...
    def get_datetime_string_from_system(self, utc: bool = default('''false'''), use_space: bool = default('''false''')) -> 'String': ...
    def get_date_string_from_system(self, utc: bool = default('''false''')) -> 'String': ...
    def get_time_string_from_system(self, utc: bool = default('''false''')) -> 'String': ...
    def get_time_zone_from_system(self) -> 'Dictionary': ...
    def get_unix_time_from_system(self) -> float: ...
    def get_ticks_msec(self) -> int: ...
    def get_ticks_usec(self) -> int: ...
    
class Time_Month(Enum):
    MONTH_JANUARY = 1
    MONTH_FEBRUARY = 2
    MONTH_MARCH = 3
    MONTH_APRIL = 4
    MONTH_MAY = 5
    MONTH_JUNE = 6
    MONTH_JULY = 7
    MONTH_AUGUST = 8
    MONTH_SEPTEMBER = 9
    MONTH_OCTOBER = 10
    MONTH_NOVEMBER = 11
    MONTH_DECEMBER = 12

class Time_Weekday(Enum):
    WEEKDAY_SUNDAY = 0
    WEEKDAY_MONDAY = 1
    WEEKDAY_TUESDAY = 2
    WEEKDAY_WEDNESDAY = 3
    WEEKDAY_THURSDAY = 4
    WEEKDAY_FRIDAY = 5
    WEEKDAY_SATURDAY = 6

class Timer(Node):
    process_callback: int
    wait_time: float
    one_shot: bool
    autostart: bool
    paused: bool
    ignore_time_scale: bool
    time_left: float
    timeout: Signal[Callable[[], None]]  # timeout()
    def set_wait_time(self, time_sec: float) -> None: ...
    def get_wait_time(self) -> float: ...
    def set_one_shot(self, enable: bool) -> None: ...
    def is_one_shot(self) -> bool: ...
    def set_autostart(self, enable: bool) -> None: ...
    def has_autostart(self) -> bool: ...
    def start(self, time_sec: float = default('''-1''')) -> None: ...
    def stop(self) -> None: ...
    def set_paused(self, paused: bool) -> None: ...
    def is_paused(self) -> bool: ...
    def set_ignore_time_scale(self, ignore: bool) -> None: ...
    def is_ignoring_time_scale(self) -> bool: ...
    def is_stopped(self) -> bool: ...
    def get_time_left(self) -> float: ...
    def set_timer_process_callback(self, callback: 'Timer_TimerProcessCallback') -> None: ...
    def get_timer_process_callback(self) -> 'Timer_TimerProcessCallback': ...
    
class Timer_TimerProcessCallback(Enum):
    TIMER_PROCESS_PHYSICS = 0
    TIMER_PROCESS_IDLE = 1

class TorusMesh(PrimitiveMesh):
    inner_radius: float
    outer_radius: float
    rings: int
    ring_segments: int
    def set_inner_radius(self, radius: float) -> None: ...
    def get_inner_radius(self) -> float: ...
    def set_outer_radius(self, radius: float) -> None: ...
    def get_outer_radius(self) -> float: ...
    def set_rings(self, rings: int) -> None: ...
    def get_rings(self) -> int: ...
    def set_ring_segments(self, rings: int) -> None: ...
    def get_ring_segments(self) -> int: ...
    
class TouchScreenButton(Node2D):
    texture_normal: 'Texture2D'
    texture_pressed: 'Texture2D'
    bitmask: 'BitMap'
    shape: 'Shape2D'
    shape_centered: bool
    shape_visible: bool
    passby_press: bool
    action: 'StringName'
    visibility_mode: int
    pressed: Signal[Callable[[], None]]  # pressed()
    released: Signal[Callable[[], None]]  # released()
    def set_texture_normal(self, texture: 'Texture2D') -> None: ...
    def get_texture_normal(self) -> 'Texture2D': ...
    def set_texture_pressed(self, texture: 'Texture2D') -> None: ...
    def get_texture_pressed(self) -> 'Texture2D': ...
    def set_bitmask(self, bitmask: 'BitMap') -> None: ...
    def get_bitmask(self) -> 'BitMap': ...
    def set_shape(self, shape: 'Shape2D') -> None: ...
    def get_shape(self) -> 'Shape2D': ...
    def set_shape_centered(self, bool: bool) -> None: ...
    def is_shape_centered(self) -> bool: ...
    def set_shape_visible(self, bool: bool) -> None: ...
    def is_shape_visible(self) -> bool: ...
    def set_action(self, action: 'String') -> None: ...
    def get_action(self) -> 'String': ...
    def set_visibility_mode(self, mode: 'TouchScreenButton_VisibilityMode') -> None: ...
    def get_visibility_mode(self) -> 'TouchScreenButton_VisibilityMode': ...
    def set_passby_press(self, enabled: bool) -> None: ...
    def is_passby_press_enabled(self) -> bool: ...
    def is_pressed(self) -> bool: ...
    
class TouchScreenButton_VisibilityMode(Enum):
    VISIBILITY_ALWAYS = 0
    VISIBILITY_TOUCHSCREEN_ONLY = 1

class Translation(Resource):
    messages: 'Dictionary'
    locale: 'String'
    def _get_plural_message(self, src_message: 'StringName', src_plural_message: 'StringName', n: int, context: 'StringName') -> 'StringName': ...
    def _get_message(self, src_message: 'StringName', context: 'StringName') -> 'StringName': ...
    def set_locale(self, locale: 'String') -> None: ...
    def get_locale(self) -> 'String': ...
    def add_message(self, src_message: 'StringName', xlated_message: 'StringName', context: 'StringName' = default('''&""''')) -> None: ...
    def add_plural_message(self, src_message: 'StringName', xlated_messages: 'PackedStringArray', context: 'StringName' = default('''&""''')) -> None: ...
    def get_message(self, src_message: 'StringName', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def get_plural_message(self, src_message: 'StringName', src_plural_message: 'StringName', n: int, context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def erase_message(self, src_message: 'StringName', context: 'StringName' = default('''&""''')) -> None: ...
    def get_message_list(self) -> 'PackedStringArray': ...
    def get_translated_message_list(self) -> 'PackedStringArray': ...
    def get_message_count(self) -> int: ...
    
class TranslationDomain(RefCounted):
    pseudolocalization_enabled: bool
    pseudolocalization_accents_enabled: bool
    pseudolocalization_double_vowels_enabled: bool
    pseudolocalization_fake_bidi_enabled: bool
    pseudolocalization_override_enabled: bool
    pseudolocalization_skip_placeholders_enabled: bool
    pseudolocalization_expansion_ratio: float
    pseudolocalization_prefix: 'String'
    pseudolocalization_suffix: 'String'
    def get_translation_object(self, locale: 'String') -> 'Translation': ...
    def add_translation(self, translation: 'Translation') -> None: ...
    def remove_translation(self, translation: 'Translation') -> None: ...
    def clear(self) -> None: ...
    def translate(self, message: 'StringName', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def translate_plural(self, message: 'StringName', message_plural: 'StringName', n: int, context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def is_pseudolocalization_enabled(self) -> bool: ...
    def set_pseudolocalization_enabled(self, enabled: bool) -> None: ...
    def is_pseudolocalization_accents_enabled(self) -> bool: ...
    def set_pseudolocalization_accents_enabled(self, enabled: bool) -> None: ...
    def is_pseudolocalization_double_vowels_enabled(self) -> bool: ...
    def set_pseudolocalization_double_vowels_enabled(self, enabled: bool) -> None: ...
    def is_pseudolocalization_fake_bidi_enabled(self) -> bool: ...
    def set_pseudolocalization_fake_bidi_enabled(self, enabled: bool) -> None: ...
    def is_pseudolocalization_override_enabled(self) -> bool: ...
    def set_pseudolocalization_override_enabled(self, enabled: bool) -> None: ...
    def is_pseudolocalization_skip_placeholders_enabled(self) -> bool: ...
    def set_pseudolocalization_skip_placeholders_enabled(self, enabled: bool) -> None: ...
    def get_pseudolocalization_expansion_ratio(self) -> float: ...
    def set_pseudolocalization_expansion_ratio(self, ratio: float) -> None: ...
    def get_pseudolocalization_prefix(self) -> 'String': ...
    def set_pseudolocalization_prefix(self, prefix: 'String') -> None: ...
    def get_pseudolocalization_suffix(self) -> 'String': ...
    def set_pseudolocalization_suffix(self, suffix: 'String') -> None: ...
    def pseudolocalize(self, message: 'StringName') -> 'StringName': ...
    
class TranslationServer(Object):
    pseudolocalization_enabled: bool
    def set_locale(self, locale: 'String') -> None: ...
    def get_locale(self) -> 'String': ...
    def get_tool_locale(self) -> 'String': ...
    def compare_locales(self, locale_a: 'String', locale_b: 'String') -> int: ...
    def standardize_locale(self, locale: 'String', add_defaults: bool = default('''false''')) -> 'String': ...
    def get_all_languages(self) -> 'PackedStringArray': ...
    def get_language_name(self, language: 'String') -> 'String': ...
    def get_all_scripts(self) -> 'PackedStringArray': ...
    def get_script_name(self, script: 'String') -> 'String': ...
    def get_all_countries(self) -> 'PackedStringArray': ...
    def get_country_name(self, country: 'String') -> 'String': ...
    def get_locale_name(self, locale: 'String') -> 'String': ...
    def translate(self, message: 'StringName', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def translate_plural(self, message: 'StringName', plural_message: 'StringName', n: int, context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def add_translation(self, translation: 'Translation') -> None: ...
    def remove_translation(self, translation: 'Translation') -> None: ...
    def get_translation_object(self, locale: 'String') -> 'Translation': ...
    def has_domain(self, domain: 'StringName') -> bool: ...
    def get_or_add_domain(self, domain: 'StringName') -> 'TranslationDomain': ...
    def remove_domain(self, domain: 'StringName') -> None: ...
    def clear(self) -> None: ...
    def get_loaded_locales(self) -> 'PackedStringArray': ...
    def is_pseudolocalization_enabled(self) -> bool: ...
    def set_pseudolocalization_enabled(self, enabled: bool) -> None: ...
    def reload_pseudolocalization(self) -> None: ...
    def pseudolocalize(self, message: 'StringName') -> 'StringName': ...
    
class Tree(Control):
    columns: int
    column_titles_visible: bool
    allow_reselect: bool
    allow_rmb_select: bool
    allow_search: bool
    hide_folding: bool
    enable_recursive_folding: bool
    hide_root: bool
    drop_mode_flags: int
    select_mode: int
    scroll_horizontal_enabled: bool
    scroll_vertical_enabled: bool
    auto_tooltip: bool
    item_selected: Signal[Callable[[], None]]  # item_selected()
    cell_selected: Signal[Callable[[], None]]  # cell_selected()
    multi_selected: Signal[Callable[['TreeItem', 'int', 'bool'], None]]  # multi_selected(item: 'TreeItem', column: int, selected: bool)
    item_mouse_selected: Signal[Callable[['Vector2', 'int'], None]]  # item_mouse_selected(mouse_position: 'Vector2', mouse_button_index: int)
    empty_clicked: Signal[Callable[['Vector2', 'int'], None]]  # empty_clicked(click_position: 'Vector2', mouse_button_index: int)
    item_edited: Signal[Callable[[], None]]  # item_edited()
    custom_item_clicked: Signal[Callable[['int'], None]]  # custom_item_clicked(mouse_button_index: int)
    item_icon_double_clicked: Signal[Callable[[], None]]  # item_icon_double_clicked()
    item_collapsed: Signal[Callable[['TreeItem'], None]]  # item_collapsed(item: 'TreeItem')
    check_propagated_to_item: Signal[Callable[['TreeItem', 'int'], None]]  # check_propagated_to_item(item: 'TreeItem', column: int)
    button_clicked: Signal[Callable[['TreeItem', 'int', 'int', 'int'], None]]  # button_clicked(item: 'TreeItem', column: int, id: int, mouse_button_index: int)
    custom_popup_edited: Signal[Callable[['bool'], None]]  # custom_popup_edited(arrow_clicked: bool)
    item_activated: Signal[Callable[[], None]]  # item_activated()
    column_title_clicked: Signal[Callable[['int', 'int'], None]]  # column_title_clicked(column: int, mouse_button_index: int)
    nothing_selected: Signal[Callable[[], None]]  # nothing_selected()
    def clear(self) -> None: ...
    def create_item(self, parent: 'TreeItem' = default('''null'''), index: int = default('''-1''')) -> 'TreeItem': ...
    def get_root(self) -> 'TreeItem': ...
    def set_column_custom_minimum_width(self, column: int, min_width: int) -> None: ...
    def set_column_expand(self, column: int, expand: bool) -> None: ...
    def set_column_expand_ratio(self, column: int, ratio: int) -> None: ...
    def set_column_clip_content(self, column: int, enable: bool) -> None: ...
    def is_column_expanding(self, column: int) -> bool: ...
    def is_column_clipping_content(self, column: int) -> bool: ...
    def get_column_expand_ratio(self, column: int) -> int: ...
    def get_column_width(self, column: int) -> int: ...
    def set_hide_root(self, enable: bool) -> None: ...
    def is_root_hidden(self) -> bool: ...
    def get_next_selected(self, from_: 'TreeItem') -> 'TreeItem': ...
    def get_selected(self) -> 'TreeItem': ...
    def set_selected(self, item: 'TreeItem', column: int) -> None: ...
    def get_selected_column(self) -> int: ...
    def get_pressed_button(self) -> int: ...
    def set_select_mode(self, mode: 'Tree_SelectMode') -> None: ...
    def get_select_mode(self) -> 'Tree_SelectMode': ...
    def deselect_all(self) -> None: ...
    def set_columns(self, amount: int) -> None: ...
    def get_columns(self) -> int: ...
    def get_edited(self) -> 'TreeItem': ...
    def get_edited_column(self) -> int: ...
    def edit_selected(self, force_edit: bool = default('''false''')) -> bool: ...
    def get_custom_popup_rect(self) -> 'Rect2': ...
    def get_item_area_rect(self, item: 'TreeItem', column: int = default('''-1'''), button_index: int = default('''-1''')) -> 'Rect2': ...
    def get_item_at_position(self, position: 'Vector2') -> 'TreeItem': ...
    def get_column_at_position(self, position: 'Vector2') -> int: ...
    def get_drop_section_at_position(self, position: 'Vector2') -> int: ...
    def get_button_id_at_position(self, position: 'Vector2') -> int: ...
    def ensure_cursor_is_visible(self) -> None: ...
    def set_column_titles_visible(self, visible: bool) -> None: ...
    def are_column_titles_visible(self) -> bool: ...
    def set_column_title(self, column: int, title: 'String') -> None: ...
    def get_column_title(self, column: int) -> 'String': ...
    def set_column_title_alignment(self, column: int, title_alignment: 'HorizontalAlignment') -> None: ...
    def get_column_title_alignment(self, column: int) -> 'HorizontalAlignment': ...
    def set_column_title_direction(self, column: int, direction: 'Control_TextDirection') -> None: ...
    def get_column_title_direction(self, column: int) -> 'Control_TextDirection': ...
    def set_column_title_language(self, column: int, language: 'String') -> None: ...
    def get_column_title_language(self, column: int) -> 'String': ...
    def get_scroll(self) -> 'Vector2': ...
    def scroll_to_item(self, item: 'TreeItem', center_on_item: bool = default('''false''')) -> None: ...
    def set_h_scroll_enabled(self, h_scroll: bool) -> None: ...
    def is_h_scroll_enabled(self) -> bool: ...
    def set_v_scroll_enabled(self, h_scroll: bool) -> None: ...
    def is_v_scroll_enabled(self) -> bool: ...
    def set_hide_folding(self, hide: bool) -> None: ...
    def is_folding_hidden(self) -> bool: ...
    def set_enable_recursive_folding(self, enable: bool) -> None: ...
    def is_recursive_folding_enabled(self) -> bool: ...
    def set_drop_mode_flags(self, flags: int) -> None: ...
    def get_drop_mode_flags(self) -> int: ...
    def set_allow_rmb_select(self, allow: bool) -> None: ...
    def get_allow_rmb_select(self) -> bool: ...
    def set_allow_reselect(self, allow: bool) -> None: ...
    def get_allow_reselect(self) -> bool: ...
    def set_allow_search(self, allow: bool) -> None: ...
    def get_allow_search(self) -> bool: ...
    def set_auto_tooltip(self, enable: bool) -> None: ...
    def is_auto_tooltip_enabled(self) -> bool: ...
    
class Tree_SelectMode(Enum):
    SELECT_SINGLE = 0
    SELECT_ROW = 1
    SELECT_MULTI = 2

class Tree_DropModeFlags(Enum):
    DROP_MODE_DISABLED = 0
    DROP_MODE_ON_ITEM = 1
    DROP_MODE_INBETWEEN = 2

class TreeItem(Object):
    collapsed: bool
    visible: bool
    disable_folding: bool
    custom_minimum_height: int
    def set_cell_mode(self, column: int, mode: 'TreeItem_TreeCellMode') -> None: ...
    def get_cell_mode(self, column: int) -> 'TreeItem_TreeCellMode': ...
    def set_auto_translate_mode(self, column: int, mode: 'Node_AutoTranslateMode') -> None: ...
    def get_auto_translate_mode(self, column: int) -> 'Node_AutoTranslateMode': ...
    def set_edit_multiline(self, column: int, multiline: bool) -> None: ...
    def is_edit_multiline(self, column: int) -> bool: ...
    def set_checked(self, column: int, checked: bool) -> None: ...
    def set_indeterminate(self, column: int, indeterminate: bool) -> None: ...
    def is_checked(self, column: int) -> bool: ...
    def is_indeterminate(self, column: int) -> bool: ...
    def propagate_check(self, column: int, emit_signal: bool = default('''true''')) -> None: ...
    def set_text(self, column: int, text: 'String') -> None: ...
    def get_text(self, column: int) -> 'String': ...
    def set_text_direction(self, column: int, direction: 'Control_TextDirection') -> None: ...
    def get_text_direction(self, column: int) -> 'Control_TextDirection': ...
    def set_autowrap_mode(self, column: int, autowrap_mode: 'TextServer_AutowrapMode') -> None: ...
    def get_autowrap_mode(self, column: int) -> 'TextServer_AutowrapMode': ...
    def set_text_overrun_behavior(self, column: int, overrun_behavior: 'TextServer_OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self, column: int) -> 'TextServer_OverrunBehavior': ...
    def set_structured_text_bidi_override(self, column: int, parser: 'TextServer_StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self, column: int) -> 'TextServer_StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, column: int, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self, column: int) -> 'Array': ...
    def set_language(self, column: int, language: 'String') -> None: ...
    def get_language(self, column: int) -> 'String': ...
    def set_suffix(self, column: int, text: 'String') -> None: ...
    def get_suffix(self, column: int) -> 'String': ...
    def set_icon(self, column: int, texture: 'Texture2D') -> None: ...
    def get_icon(self, column: int) -> 'Texture2D': ...
    def set_icon_overlay(self, column: int, texture: 'Texture2D') -> None: ...
    def get_icon_overlay(self, column: int) -> 'Texture2D': ...
    def set_icon_region(self, column: int, region: 'Rect2') -> None: ...
    def get_icon_region(self, column: int) -> 'Rect2': ...
    def set_icon_max_width(self, column: int, width: int) -> None: ...
    def get_icon_max_width(self, column: int) -> int: ...
    def set_icon_modulate(self, column: int, modulate: 'Color') -> None: ...
    def get_icon_modulate(self, column: int) -> 'Color': ...
    def set_range(self, column: int, value: float) -> None: ...
    def get_range(self, column: int) -> float: ...
    def set_range_config(self, column: int, min: float, max: float, step: float, expr: bool = default('''false''')) -> None: ...
    def get_range_config(self, column: int) -> 'Dictionary': ...
    def set_metadata(self, column: int, meta: 'Variant') -> None: ...
    def get_metadata(self, column: int) -> 'Variant': ...
    def set_custom_draw(self, column: int, object: 'Object', callback: 'StringName') -> None: ...
    def set_custom_draw_callback(self, column: int, callback: 'Callable') -> None: ...
    def get_custom_draw_callback(self, column: int) -> 'Callable': ...
    def set_collapsed(self, enable: bool) -> None: ...
    def is_collapsed(self) -> bool: ...
    def set_collapsed_recursive(self, enable: bool) -> None: ...
    def is_any_collapsed(self, only_visible: bool = default('''false''')) -> bool: ...
    def set_visible(self, enable: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def is_visible_in_tree(self) -> bool: ...
    def uncollapse_tree(self) -> None: ...
    def set_custom_minimum_height(self, height: int) -> None: ...
    def get_custom_minimum_height(self) -> int: ...
    def set_selectable(self, column: int, selectable: bool) -> None: ...
    def is_selectable(self, column: int) -> bool: ...
    def is_selected(self, column: int) -> bool: ...
    def select(self, column: int) -> None: ...
    def deselect(self, column: int) -> None: ...
    def set_editable(self, column: int, enabled: bool) -> None: ...
    def is_editable(self, column: int) -> bool: ...
    def set_custom_color(self, column: int, color: 'Color') -> None: ...
    def get_custom_color(self, column: int) -> 'Color': ...
    def clear_custom_color(self, column: int) -> None: ...
    def set_custom_font(self, column: int, font: 'Font') -> None: ...
    def get_custom_font(self, column: int) -> 'Font': ...
    def set_custom_font_size(self, column: int, font_size: int) -> None: ...
    def get_custom_font_size(self, column: int) -> int: ...
    def set_custom_bg_color(self, column: int, color: 'Color', just_outline: bool = default('''false''')) -> None: ...
    def clear_custom_bg_color(self, column: int) -> None: ...
    def get_custom_bg_color(self, column: int) -> 'Color': ...
    def set_custom_as_button(self, column: int, enable: bool) -> None: ...
    def is_custom_set_as_button(self, column: int) -> bool: ...
    def clear_buttons(self) -> None: ...
    def add_button(self, column: int, button: 'Texture2D', id: int = default('''-1'''), disabled: bool = default('''false'''), tooltip_text: 'String' = default('''""''')) -> None: ...
    def get_button_count(self, column: int) -> int: ...
    def get_button_tooltip_text(self, column: int, button_index: int) -> 'String': ...
    def get_button_id(self, column: int, button_index: int) -> int: ...
    def get_button_by_id(self, column: int, id: int) -> int: ...
    def get_button_color(self, column: int, id: int) -> 'Color': ...
    def get_button(self, column: int, button_index: int) -> 'Texture2D': ...
    def set_button_tooltip_text(self, column: int, button_index: int, tooltip: 'String') -> None: ...
    def set_button(self, column: int, button_index: int, button: 'Texture2D') -> None: ...
    def erase_button(self, column: int, button_index: int) -> None: ...
    def set_button_disabled(self, column: int, button_index: int, disabled: bool) -> None: ...
    def set_button_color(self, column: int, button_index: int, color: 'Color') -> None: ...
    def is_button_disabled(self, column: int, button_index: int) -> bool: ...
    def set_tooltip_text(self, column: int, tooltip: 'String') -> None: ...
    def get_tooltip_text(self, column: int) -> 'String': ...
    def set_text_alignment(self, column: int, text_alignment: 'HorizontalAlignment') -> None: ...
    def get_text_alignment(self, column: int) -> 'HorizontalAlignment': ...
    def set_expand_right(self, column: int, enable: bool) -> None: ...
    def get_expand_right(self, column: int) -> bool: ...
    def set_disable_folding(self, disable: bool) -> None: ...
    def is_folding_disabled(self) -> bool: ...
    def create_child(self, index: int = default('''-1''')) -> 'TreeItem': ...
    def add_child(self, child: 'TreeItem') -> None: ...
    def remove_child(self, child: 'TreeItem') -> None: ...
    def get_tree(self) -> 'Tree': ...
    def get_next(self) -> 'TreeItem': ...
    def get_prev(self) -> 'TreeItem': ...
    def get_parent(self) -> 'TreeItem': ...
    def get_first_child(self) -> 'TreeItem': ...
    def get_next_in_tree(self, wrap: bool = default('''false''')) -> 'TreeItem': ...
    def get_prev_in_tree(self, wrap: bool = default('''false''')) -> 'TreeItem': ...
    def get_next_visible(self, wrap: bool = default('''false''')) -> 'TreeItem': ...
    def get_prev_visible(self, wrap: bool = default('''false''')) -> 'TreeItem': ...
    def get_child(self, index: int) -> 'TreeItem': ...
    def get_child_count(self) -> int: ...
    def get_children(self) -> 'list[TreeItem]': ...
    def get_index(self) -> int: ...
    def move_before(self, item: 'TreeItem') -> None: ...
    def move_after(self, item: 'TreeItem') -> None: ...
    def call_recursive(self, method: 'StringName', *arg) -> None: ...
    
class TreeItem_TreeCellMode(Enum):
    CELL_MODE_STRING = 0
    CELL_MODE_CHECK = 1
    CELL_MODE_RANGE = 2
    CELL_MODE_ICON = 3
    CELL_MODE_CUSTOM = 4

class TriangleMesh(RefCounted):
    pass
    
class TubeTrailMesh(PrimitiveMesh):
    radius: float
    radial_steps: int
    sections: int
    section_length: float
    section_rings: int
    cap_top: bool
    cap_bottom: bool
    curve: 'Curve'
    def set_radius(self, radius: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_radial_steps(self, radial_steps: int) -> None: ...
    def get_radial_steps(self) -> int: ...
    def set_sections(self, sections: int) -> None: ...
    def get_sections(self) -> int: ...
    def set_section_length(self, section_length: float) -> None: ...
    def get_section_length(self) -> float: ...
    def set_section_rings(self, section_rings: int) -> None: ...
    def get_section_rings(self) -> int: ...
    def set_cap_top(self, cap_top: bool) -> None: ...
    def is_cap_top(self) -> bool: ...
    def set_cap_bottom(self, cap_bottom: bool) -> None: ...
    def is_cap_bottom(self) -> bool: ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    
class Tween(RefCounted):
    step_finished: Signal[Callable[['int'], None]]  # step_finished(idx: int)
    loop_finished: Signal[Callable[['int'], None]]  # loop_finished(loop_count: int)
    finished: Signal[Callable[[], None]]  # finished()
    def tween_property(self, object: 'Object', property: 'NodePath', final_val: 'Variant', duration: float) -> 'PropertyTweener': ...
    def tween_interval(self, time: float) -> 'IntervalTweener': ...
    def tween_callback(self, callback: 'Callable') -> 'CallbackTweener': ...
    def tween_method(self, method: 'Callable', from_: 'Variant', to: 'Variant', duration: float) -> 'MethodTweener': ...
    def tween_subtween(self, subtween: 'Tween') -> 'SubtweenTweener': ...
    def custom_step(self, delta: float) -> bool: ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def kill(self) -> None: ...
    def get_total_elapsed_time(self) -> float: ...
    def is_running(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bind_node(self, node: 'Node') -> 'Tween': ...
    def set_process_mode(self, mode: 'Tween_TweenProcessMode') -> 'Tween': ...
    def set_pause_mode(self, mode: 'Tween_TweenPauseMode') -> 'Tween': ...
    def set_ignore_time_scale(self, ignore: bool = default('''true''')) -> 'Tween': ...
    def set_parallel(self, parallel: bool = default('''true''')) -> 'Tween': ...
    def set_loops(self, loops: int = default('''0''')) -> 'Tween': ...
    def get_loops_left(self) -> int: ...
    def set_speed_scale(self, speed: float) -> 'Tween': ...
    def set_trans(self, trans: 'Tween_TransitionType') -> 'Tween': ...
    def set_ease(self, ease: 'Tween_EaseType') -> 'Tween': ...
    def parallel(self) -> 'Tween': ...
    def chain(self) -> 'Tween': ...
    @staticmethod
    def interpolate_value(initial_value: 'Variant', delta_value: 'Variant', elapsed_time: float, duration: float, trans_type: 'Tween_TransitionType', ease_type: 'Tween_EaseType') -> 'Variant': ...
    
class Tween_TweenProcessMode(Enum):
    TWEEN_PROCESS_PHYSICS = 0
    TWEEN_PROCESS_IDLE = 1

class Tween_TweenPauseMode(Enum):
    TWEEN_PAUSE_BOUND = 0
    TWEEN_PAUSE_STOP = 1
    TWEEN_PAUSE_PROCESS = 2

class Tween_TransitionType(Enum):
    TRANS_LINEAR = 0
    TRANS_SINE = 1
    TRANS_QUINT = 2
    TRANS_QUART = 3
    TRANS_QUAD = 4
    TRANS_EXPO = 5
    TRANS_ELASTIC = 6
    TRANS_CUBIC = 7
    TRANS_CIRC = 8
    TRANS_BOUNCE = 9
    TRANS_BACK = 10
    TRANS_SPRING = 11

class Tween_EaseType(Enum):
    EASE_IN = 0
    EASE_OUT = 1
    EASE_IN_OUT = 2
    EASE_OUT_IN = 3

class Tweener(RefCounted):
    finished: Signal[Callable[[], None]]  # finished()
    
class UDPServer(RefCounted):
    max_pending_connections: int
    def listen(self, port: int, bind_address: 'String' = default('''"*"''')) -> 'Error': ...
    def poll(self) -> 'Error': ...
    def is_connection_available(self) -> bool: ...
    def get_local_port(self) -> int: ...
    def is_listening(self) -> bool: ...
    def take_connection(self) -> 'PacketPeerUDP': ...
    def stop(self) -> None: ...
    def set_max_pending_connections(self, max_pending_connections: int) -> None: ...
    def get_max_pending_connections(self) -> int: ...
    
class UPNP(RefCounted):
    discover_multicast_if: 'String'
    discover_local_port: int
    discover_ipv6: bool
    def get_device_count(self) -> int: ...
    def get_device(self, index: int) -> 'UPNPDevice': ...
    def add_device(self, device: 'UPNPDevice') -> None: ...
    def set_device(self, index: int, device: 'UPNPDevice') -> None: ...
    def remove_device(self, index: int) -> None: ...
    def clear_devices(self) -> None: ...
    def get_gateway(self) -> 'UPNPDevice': ...
    def discover(self, timeout: int = default('''2000'''), ttl: int = default('''2'''), device_filter: 'String' = default('''"InternetGatewayDevice"''')) -> int: ...
    def query_external_address(self) -> 'String': ...
    def add_port_mapping(self, port: int, port_internal: int = default('''0'''), desc: 'String' = default('''""'''), proto: 'String' = default('''"UDP"'''), duration: int = default('''0''')) -> int: ...
    def delete_port_mapping(self, port: int, proto: 'String' = default('''"UDP"''')) -> int: ...
    def set_discover_multicast_if(self, m_if: 'String') -> None: ...
    def get_discover_multicast_if(self) -> 'String': ...
    def set_discover_local_port(self, port: int) -> None: ...
    def get_discover_local_port(self) -> int: ...
    def set_discover_ipv6(self, ipv6: bool) -> None: ...
    def is_discover_ipv6(self) -> bool: ...
    
class UPNP_UPNPResult(Enum):
    UPNP_RESULT_SUCCESS = 0
    UPNP_RESULT_NOT_AUTHORIZED = 1
    UPNP_RESULT_PORT_MAPPING_NOT_FOUND = 2
    UPNP_RESULT_INCONSISTENT_PARAMETERS = 3
    UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY = 4
    UPNP_RESULT_ACTION_FAILED = 5
    UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED = 6
    UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED = 7
    UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED = 8
    UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD = 9
    UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD = 10
    UPNP_RESULT_NO_PORT_MAPS_AVAILABLE = 11
    UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM = 12
    UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING = 13
    UPNP_RESULT_SAME_PORT_VALUES_REQUIRED = 14
    UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED = 15
    UPNP_RESULT_INVALID_GATEWAY = 16
    UPNP_RESULT_INVALID_PORT = 17
    UPNP_RESULT_INVALID_PROTOCOL = 18
    UPNP_RESULT_INVALID_DURATION = 19
    UPNP_RESULT_INVALID_ARGS = 20
    UPNP_RESULT_INVALID_RESPONSE = 21
    UPNP_RESULT_INVALID_PARAM = 22
    UPNP_RESULT_HTTP_ERROR = 23
    UPNP_RESULT_SOCKET_ERROR = 24
    UPNP_RESULT_MEM_ALLOC_ERROR = 25
    UPNP_RESULT_NO_GATEWAY = 26
    UPNP_RESULT_NO_DEVICES = 27
    UPNP_RESULT_UNKNOWN_ERROR = 28

class UPNPDevice(RefCounted):
    description_url: 'String'
    service_type: 'String'
    igd_control_url: 'String'
    igd_service_type: 'String'
    igd_our_addr: 'String'
    igd_status: int
    def is_valid_gateway(self) -> bool: ...
    def query_external_address(self) -> 'String': ...
    def add_port_mapping(self, port: int, port_internal: int = default('''0'''), desc: 'String' = default('''""'''), proto: 'String' = default('''"UDP"'''), duration: int = default('''0''')) -> int: ...
    def delete_port_mapping(self, port: int, proto: 'String' = default('''"UDP"''')) -> int: ...
    def set_description_url(self, url: 'String') -> None: ...
    def get_description_url(self) -> 'String': ...
    def set_service_type(self, type: 'String') -> None: ...
    def get_service_type(self) -> 'String': ...
    def set_igd_control_url(self, url: 'String') -> None: ...
    def get_igd_control_url(self) -> 'String': ...
    def set_igd_service_type(self, type: 'String') -> None: ...
    def get_igd_service_type(self) -> 'String': ...
    def set_igd_our_addr(self, addr: 'String') -> None: ...
    def get_igd_our_addr(self) -> 'String': ...
    def set_igd_status(self, status: 'UPNPDevice_IGDStatus') -> None: ...
    def get_igd_status(self) -> 'UPNPDevice_IGDStatus': ...
    
class UPNPDevice_IGDStatus(Enum):
    IGD_STATUS_OK = 0
    IGD_STATUS_HTTP_ERROR = 1
    IGD_STATUS_HTTP_EMPTY = 2
    IGD_STATUS_NO_URLS = 3
    IGD_STATUS_NO_IGD = 4
    IGD_STATUS_DISCONNECTED = 5
    IGD_STATUS_UNKNOWN_DEVICE = 6
    IGD_STATUS_INVALID_CONTROL = 7
    IGD_STATUS_MALLOC_ERROR = 8
    IGD_STATUS_UNKNOWN_ERROR = 9

class UndoRedo(Object):
    max_steps: int
    version_changed: Signal[Callable[[], None]]  # version_changed()
    def create_action(self, name: 'String', merge_mode: 'UndoRedo_MergeMode' = default('''0'''), backward_undo_ops: bool = default('''false''')) -> None: ...
    def commit_action(self, execute: bool = default('''true''')) -> None: ...
    def is_committing_action(self) -> bool: ...
    def add_do_method(self, callable: 'Callable') -> None: ...
    def add_undo_method(self, callable: 'Callable') -> None: ...
    def add_do_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_undo_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_do_reference(self, object: 'Object') -> None: ...
    def add_undo_reference(self, object: 'Object') -> None: ...
    def start_force_keep_in_merge_ends(self) -> None: ...
    def end_force_keep_in_merge_ends(self) -> None: ...
    def get_history_count(self) -> int: ...
    def get_current_action(self) -> int: ...
    def get_action_name(self, id: int) -> 'String': ...
    def clear_history(self, increase_version: bool = default('''true''')) -> None: ...
    def get_current_action_name(self) -> 'String': ...
    def has_undo(self) -> bool: ...
    def has_redo(self) -> bool: ...
    def get_version(self) -> int: ...
    def set_max_steps(self, max_steps: int) -> None: ...
    def get_max_steps(self) -> int: ...
    def redo(self) -> bool: ...
    def undo(self) -> bool: ...
    
class UndoRedo_MergeMode(Enum):
    MERGE_DISABLE = 0
    MERGE_ENDS = 1
    MERGE_ALL = 2

class UniformSetCacheRD(Object):
    @staticmethod
    def get_cache(shader: 'RID', set: int, uniforms: 'list[RDUniform]') -> 'RID': ...
    
class VBoxContainer(BoxContainer):
    pass
    
class VFlowContainer(FlowContainer):
    pass
    
class VScrollBar(ScrollBar):
    pass
    
class VSeparator(Separator):
    pass
    
class VSlider(Slider):
    pass
    
class VSplitContainer(SplitContainer):
    pass
    
class VehicleBody3D(RigidBody3D):
    engine_force: float
    brake: float
    steering: float
    def set_engine_force(self, engine_force: float) -> None: ...
    def get_engine_force(self) -> float: ...
    def set_brake(self, brake: float) -> None: ...
    def get_brake(self) -> float: ...
    def set_steering(self, steering: float) -> None: ...
    def get_steering(self) -> float: ...
    
class VehicleWheel3D(Node3D):
    engine_force: float
    brake: float
    steering: float
    use_as_traction: bool
    use_as_steering: bool
    wheel_roll_influence: float
    wheel_radius: float
    wheel_rest_length: float
    wheel_friction_slip: float
    suspension_travel: float
    suspension_stiffness: float
    suspension_max_force: float
    damping_compression: float
    damping_relaxation: float
    def set_radius(self, length: float) -> None: ...
    def get_radius(self) -> float: ...
    def set_suspension_rest_length(self, length: float) -> None: ...
    def get_suspension_rest_length(self) -> float: ...
    def set_suspension_travel(self, length: float) -> None: ...
    def get_suspension_travel(self) -> float: ...
    def set_suspension_stiffness(self, length: float) -> None: ...
    def get_suspension_stiffness(self) -> float: ...
    def set_suspension_max_force(self, length: float) -> None: ...
    def get_suspension_max_force(self) -> float: ...
    def set_damping_compression(self, length: float) -> None: ...
    def get_damping_compression(self) -> float: ...
    def set_damping_relaxation(self, length: float) -> None: ...
    def get_damping_relaxation(self) -> float: ...
    def set_use_as_traction(self, enable: bool) -> None: ...
    def is_used_as_traction(self) -> bool: ...
    def set_use_as_steering(self, enable: bool) -> None: ...
    def is_used_as_steering(self) -> bool: ...
    def set_friction_slip(self, length: float) -> None: ...
    def get_friction_slip(self) -> float: ...
    def is_in_contact(self) -> bool: ...
    def get_contact_body(self) -> 'Node3D': ...
    def get_contact_point(self) -> 'Vector3': ...
    def get_contact_normal(self) -> 'Vector3': ...
    def set_roll_influence(self, roll_influence: float) -> None: ...
    def get_roll_influence(self) -> float: ...
    def get_skidinfo(self) -> float: ...
    def get_rpm(self) -> float: ...
    def set_engine_force(self, engine_force: float) -> None: ...
    def get_engine_force(self) -> float: ...
    def set_brake(self, brake: float) -> None: ...
    def get_brake(self) -> float: ...
    def set_steering(self, steering: float) -> None: ...
    def get_steering(self) -> float: ...
    
class VideoStream(Resource):
    file: 'String'
    def _instantiate_playback(self) -> 'VideoStreamPlayback': ...
    def set_file(self, file: 'String') -> None: ...
    def get_file(self) -> 'String': ...
    
class VideoStreamPlayback(Resource):
    def _stop(self) -> None: ...
    def _play(self) -> None: ...
    def _is_playing(self) -> bool: ...
    def _set_paused(self, paused: bool) -> None: ...
    def _is_paused(self) -> bool: ...
    def _get_length(self) -> float: ...
    def _get_playback_position(self) -> float: ...
    def _seek(self, time: float) -> None: ...
    def _set_audio_track(self, idx: int) -> None: ...
    def _get_texture(self) -> 'Texture2D': ...
    def _update(self, delta: float) -> None: ...
    def _get_channels(self) -> int: ...
    def _get_mix_rate(self) -> int: ...
    def mix_audio(self, num_frames: int, buffer: 'PackedFloat32Array' = default('''PackedFloat32Array()'''), offset: int = default('''0''')) -> int: ...
    
class VideoStreamPlayer(Control):
    audio_track: int
    stream: 'VideoStream'
    volume_db: float
    volume: float
    autoplay: bool
    paused: bool
    expand: bool
    loop: bool
    buffering_msec: int
    stream_position: float
    bus: 'StringName'
    finished: Signal[Callable[[], None]]  # finished()
    def set_stream(self, stream: 'VideoStream') -> None: ...
    def get_stream(self) -> 'VideoStream': ...
    def play(self) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> bool: ...
    def set_paused(self, paused: bool) -> None: ...
    def is_paused(self) -> bool: ...
    def set_loop(self, loop: bool) -> None: ...
    def has_loop(self) -> bool: ...
    def set_volume(self, volume: float) -> None: ...
    def get_volume(self) -> float: ...
    def set_volume_db(self, db: float) -> None: ...
    def get_volume_db(self) -> float: ...
    def set_audio_track(self, track: int) -> None: ...
    def get_audio_track(self) -> int: ...
    def get_stream_name(self) -> 'String': ...
    def get_stream_length(self) -> float: ...
    def set_stream_position(self, position: float) -> None: ...
    def get_stream_position(self) -> float: ...
    def set_autoplay(self, enabled: bool) -> None: ...
    def has_autoplay(self) -> bool: ...
    def set_expand(self, enable: bool) -> None: ...
    def has_expand(self) -> bool: ...
    def set_buffering_msec(self, msec: int) -> None: ...
    def get_buffering_msec(self) -> int: ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def get_video_texture(self) -> 'Texture2D': ...
    
class VideoStreamTheora(VideoStream):
    pass
    
class Viewport(Node):
    disable_3d: bool
    use_xr: bool
    own_world_3d: bool
    world_3d: 'World3D'
    world_2d: 'World2D'
    transparent_bg: bool
    handle_input_locally: bool
    snap_2d_transforms_to_pixel: bool
    snap_2d_vertices_to_pixel: bool
    msaa_2d: int
    msaa_3d: int
    screen_space_aa: int
    use_taa: bool
    use_debanding: bool
    use_occlusion_culling: bool
    mesh_lod_threshold: float
    debug_draw: int
    use_hdr_2d: bool
    scaling_3d_mode: int
    scaling_3d_scale: float
    texture_mipmap_bias: float
    anisotropic_filtering_level: int
    fsr_sharpness: float
    vrs_mode: int
    vrs_update_mode: int
    vrs_texture: 'Texture2D'
    canvas_item_default_texture_filter: int
    canvas_item_default_texture_repeat: int
    audio_listener_enable_2d: bool
    audio_listener_enable_3d: bool
    physics_object_picking: bool
    physics_object_picking_sort: bool
    physics_object_picking_first_only: bool
    gui_disable_input: bool
    gui_snap_controls_to_pixels: bool
    gui_embed_subwindows: bool
    sdf_oversize: int
    sdf_scale: int
    positional_shadow_atlas_size: int
    positional_shadow_atlas_16_bits: bool
    positional_shadow_atlas_quad_0: int
    positional_shadow_atlas_quad_1: int
    positional_shadow_atlas_quad_2: int
    positional_shadow_atlas_quad_3: int
    canvas_transform: 'Transform2D'
    global_canvas_transform: 'Transform2D'
    canvas_cull_mask: int
    size_changed: Signal[Callable[[], None]]  # size_changed()
    gui_focus_changed: Signal[Callable[['Control'], None]]  # gui_focus_changed(node: 'Control')
    def set_world_2d(self, world_2d: 'World2D') -> None: ...
    def get_world_2d(self) -> 'World2D': ...
    def find_world_2d(self) -> 'World2D': ...
    def set_canvas_transform(self, xform: 'Transform2D') -> None: ...
    def get_canvas_transform(self) -> 'Transform2D': ...
    def set_global_canvas_transform(self, xform: 'Transform2D') -> None: ...
    def get_global_canvas_transform(self) -> 'Transform2D': ...
    def get_stretch_transform(self) -> 'Transform2D': ...
    def get_final_transform(self) -> 'Transform2D': ...
    def get_screen_transform(self) -> 'Transform2D': ...
    def get_visible_rect(self) -> 'Rect2': ...
    def set_transparent_background(self, enable: bool) -> None: ...
    def has_transparent_background(self) -> bool: ...
    def set_use_hdr_2d(self, enable: bool) -> None: ...
    def is_using_hdr_2d(self) -> bool: ...
    def set_msaa_2d(self, msaa: 'Viewport_MSAA') -> None: ...
    def get_msaa_2d(self) -> 'Viewport_MSAA': ...
    def set_msaa_3d(self, msaa: 'Viewport_MSAA') -> None: ...
    def get_msaa_3d(self) -> 'Viewport_MSAA': ...
    def set_screen_space_aa(self, screen_space_aa: 'Viewport_ScreenSpaceAA') -> None: ...
    def get_screen_space_aa(self) -> 'Viewport_ScreenSpaceAA': ...
    def set_use_taa(self, enable: bool) -> None: ...
    def is_using_taa(self) -> bool: ...
    def set_use_debanding(self, enable: bool) -> None: ...
    def is_using_debanding(self) -> bool: ...
    def set_use_occlusion_culling(self, enable: bool) -> None: ...
    def is_using_occlusion_culling(self) -> bool: ...
    def set_debug_draw(self, debug_draw: 'Viewport_DebugDraw') -> None: ...
    def get_debug_draw(self) -> 'Viewport_DebugDraw': ...
    def get_render_info(self, type: 'Viewport_RenderInfoType', info: 'Viewport_RenderInfo') -> int: ...
    def get_texture(self) -> 'ViewportTexture': ...
    def set_physics_object_picking(self, enable: bool) -> None: ...
    def get_physics_object_picking(self) -> bool: ...
    def set_physics_object_picking_sort(self, enable: bool) -> None: ...
    def get_physics_object_picking_sort(self) -> bool: ...
    def set_physics_object_picking_first_only(self, enable: bool) -> None: ...
    def get_physics_object_picking_first_only(self) -> bool: ...
    def get_viewport_rid(self) -> 'RID': ...
    def push_text_input(self, text: 'String') -> None: ...
    def push_input(self, event: 'InputEvent', in_local_coords: bool = default('''false''')) -> None: ...
    def push_unhandled_input(self, event: 'InputEvent', in_local_coords: bool = default('''false''')) -> None: ...
    def notify_mouse_entered(self) -> None: ...
    def notify_mouse_exited(self) -> None: ...
    def get_mouse_position(self) -> 'Vector2': ...
    def warp_mouse(self, position: 'Vector2') -> None: ...
    def update_mouse_cursor_state(self) -> None: ...
    def gui_cancel_drag(self) -> None: ...
    def gui_get_drag_data(self) -> 'Variant': ...
    def gui_is_dragging(self) -> bool: ...
    def gui_is_drag_successful(self) -> bool: ...
    def gui_release_focus(self) -> None: ...
    def gui_get_focus_owner(self) -> 'Control': ...
    def gui_get_hovered_control(self) -> 'Control': ...
    def set_disable_input(self, disable: bool) -> None: ...
    def is_input_disabled(self) -> bool: ...
    def set_positional_shadow_atlas_size(self, size: int) -> None: ...
    def get_positional_shadow_atlas_size(self) -> int: ...
    def set_positional_shadow_atlas_16_bits(self, enable: bool) -> None: ...
    def get_positional_shadow_atlas_16_bits(self) -> bool: ...
    def set_snap_controls_to_pixels(self, enabled: bool) -> None: ...
    def is_snap_controls_to_pixels_enabled(self) -> bool: ...
    def set_snap_2d_transforms_to_pixel(self, enabled: bool) -> None: ...
    def is_snap_2d_transforms_to_pixel_enabled(self) -> bool: ...
    def set_snap_2d_vertices_to_pixel(self, enabled: bool) -> None: ...
    def is_snap_2d_vertices_to_pixel_enabled(self) -> bool: ...
    def set_positional_shadow_atlas_quadrant_subdiv(self, quadrant: int, subdiv: 'Viewport_PositionalShadowAtlasQuadrantSubdiv') -> None: ...
    def get_positional_shadow_atlas_quadrant_subdiv(self, quadrant: int) -> 'Viewport_PositionalShadowAtlasQuadrantSubdiv': ...
    def set_input_as_handled(self) -> None: ...
    def is_input_handled(self) -> bool: ...
    def set_handle_input_locally(self, enable: bool) -> None: ...
    def is_handling_input_locally(self) -> bool: ...
    def set_default_canvas_item_texture_filter(self, mode: 'Viewport_DefaultCanvasItemTextureFilter') -> None: ...
    def get_default_canvas_item_texture_filter(self) -> 'Viewport_DefaultCanvasItemTextureFilter': ...
    def set_embedding_subwindows(self, enable: bool) -> None: ...
    def is_embedding_subwindows(self) -> bool: ...
    def get_embedded_subwindows(self) -> 'list[Window]': ...
    def set_canvas_cull_mask(self, mask: int) -> None: ...
    def get_canvas_cull_mask(self) -> int: ...
    def set_canvas_cull_mask_bit(self, layer: int, enable: bool) -> None: ...
    def get_canvas_cull_mask_bit(self, layer: int) -> bool: ...
    def set_default_canvas_item_texture_repeat(self, mode: 'Viewport_DefaultCanvasItemTextureRepeat') -> None: ...
    def get_default_canvas_item_texture_repeat(self) -> 'Viewport_DefaultCanvasItemTextureRepeat': ...
    def set_sdf_oversize(self, oversize: 'Viewport_SDFOversize') -> None: ...
    def get_sdf_oversize(self) -> 'Viewport_SDFOversize': ...
    def set_sdf_scale(self, scale: 'Viewport_SDFScale') -> None: ...
    def get_sdf_scale(self) -> 'Viewport_SDFScale': ...
    def set_mesh_lod_threshold(self, pixels: float) -> None: ...
    def get_mesh_lod_threshold(self) -> float: ...
    def set_as_audio_listener_2d(self, enable: bool) -> None: ...
    def is_audio_listener_2d(self) -> bool: ...
    def get_audio_listener_2d(self) -> 'AudioListener2D': ...
    def get_camera_2d(self) -> 'Camera2D': ...
    def set_world_3d(self, world_3d: 'World3D') -> None: ...
    def get_world_3d(self) -> 'World3D': ...
    def find_world_3d(self) -> 'World3D': ...
    def set_use_own_world_3d(self, enable: bool) -> None: ...
    def is_using_own_world_3d(self) -> bool: ...
    def get_audio_listener_3d(self) -> 'AudioListener3D': ...
    def get_camera_3d(self) -> 'Camera3D': ...
    def set_as_audio_listener_3d(self, enable: bool) -> None: ...
    def is_audio_listener_3d(self) -> bool: ...
    def set_disable_3d(self, disable: bool) -> None: ...
    def is_3d_disabled(self) -> bool: ...
    def set_use_xr(self, use: bool) -> None: ...
    def is_using_xr(self) -> bool: ...
    def set_scaling_3d_mode(self, scaling_3d_mode: 'Viewport_Scaling3DMode') -> None: ...
    def get_scaling_3d_mode(self) -> 'Viewport_Scaling3DMode': ...
    def set_scaling_3d_scale(self, scale: float) -> None: ...
    def get_scaling_3d_scale(self) -> float: ...
    def set_fsr_sharpness(self, fsr_sharpness: float) -> None: ...
    def get_fsr_sharpness(self) -> float: ...
    def set_texture_mipmap_bias(self, texture_mipmap_bias: float) -> None: ...
    def get_texture_mipmap_bias(self) -> float: ...
    def set_anisotropic_filtering_level(self, anisotropic_filtering_level: 'Viewport_AnisotropicFiltering') -> None: ...
    def get_anisotropic_filtering_level(self) -> 'Viewport_AnisotropicFiltering': ...
    def set_vrs_mode(self, mode: 'Viewport_VRSMode') -> None: ...
    def get_vrs_mode(self) -> 'Viewport_VRSMode': ...
    def set_vrs_update_mode(self, mode: 'Viewport_VRSUpdateMode') -> None: ...
    def get_vrs_update_mode(self) -> 'Viewport_VRSUpdateMode': ...
    def set_vrs_texture(self, texture: 'Texture2D') -> None: ...
    def get_vrs_texture(self) -> 'Texture2D': ...
    
class Viewport_PositionalShadowAtlasQuadrantSubdiv(Enum):
    SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED = 0
    SHADOW_ATLAS_QUADRANT_SUBDIV_1 = 1
    SHADOW_ATLAS_QUADRANT_SUBDIV_4 = 2
    SHADOW_ATLAS_QUADRANT_SUBDIV_16 = 3
    SHADOW_ATLAS_QUADRANT_SUBDIV_64 = 4
    SHADOW_ATLAS_QUADRANT_SUBDIV_256 = 5
    SHADOW_ATLAS_QUADRANT_SUBDIV_1024 = 6
    SHADOW_ATLAS_QUADRANT_SUBDIV_MAX = 7

class Viewport_Scaling3DMode(Enum):
    SCALING_3D_MODE_BILINEAR = 0
    SCALING_3D_MODE_FSR = 1
    SCALING_3D_MODE_FSR2 = 2
    SCALING_3D_MODE_METALFX_SPATIAL = 3
    SCALING_3D_MODE_METALFX_TEMPORAL = 4
    SCALING_3D_MODE_MAX = 5

class Viewport_MSAA(Enum):
    MSAA_DISABLED = 0
    MSAA_2X = 1
    MSAA_4X = 2
    MSAA_8X = 3
    MSAA_MAX = 4

class Viewport_AnisotropicFiltering(Enum):
    ANISOTROPY_DISABLED = 0
    ANISOTROPY_2X = 1
    ANISOTROPY_4X = 2
    ANISOTROPY_8X = 3
    ANISOTROPY_16X = 4
    ANISOTROPY_MAX = 5

class Viewport_ScreenSpaceAA(Enum):
    SCREEN_SPACE_AA_DISABLED = 0
    SCREEN_SPACE_AA_FXAA = 1
    SCREEN_SPACE_AA_MAX = 2

class Viewport_RenderInfo(Enum):
    RENDER_INFO_OBJECTS_IN_FRAME = 0
    RENDER_INFO_PRIMITIVES_IN_FRAME = 1
    RENDER_INFO_DRAW_CALLS_IN_FRAME = 2
    RENDER_INFO_MAX = 3

class Viewport_RenderInfoType(Enum):
    RENDER_INFO_TYPE_VISIBLE = 0
    RENDER_INFO_TYPE_SHADOW = 1
    RENDER_INFO_TYPE_CANVAS = 2
    RENDER_INFO_TYPE_MAX = 3

class Viewport_DebugDraw(Enum):
    DEBUG_DRAW_DISABLED = 0
    DEBUG_DRAW_UNSHADED = 1
    DEBUG_DRAW_LIGHTING = 2
    DEBUG_DRAW_OVERDRAW = 3
    DEBUG_DRAW_WIREFRAME = 4
    DEBUG_DRAW_NORMAL_BUFFER = 5
    DEBUG_DRAW_VOXEL_GI_ALBEDO = 6
    DEBUG_DRAW_VOXEL_GI_LIGHTING = 7
    DEBUG_DRAW_VOXEL_GI_EMISSION = 8
    DEBUG_DRAW_SHADOW_ATLAS = 9
    DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS = 10
    DEBUG_DRAW_SCENE_LUMINANCE = 11
    DEBUG_DRAW_SSAO = 12
    DEBUG_DRAW_SSIL = 13
    DEBUG_DRAW_PSSM_SPLITS = 14
    DEBUG_DRAW_DECAL_ATLAS = 15
    DEBUG_DRAW_SDFGI = 16
    DEBUG_DRAW_SDFGI_PROBES = 17
    DEBUG_DRAW_GI_BUFFER = 18
    DEBUG_DRAW_DISABLE_LOD = 19
    DEBUG_DRAW_CLUSTER_OMNI_LIGHTS = 20
    DEBUG_DRAW_CLUSTER_SPOT_LIGHTS = 21
    DEBUG_DRAW_CLUSTER_DECALS = 22
    DEBUG_DRAW_CLUSTER_REFLECTION_PROBES = 23
    DEBUG_DRAW_OCCLUDERS = 24
    DEBUG_DRAW_MOTION_VECTORS = 25
    DEBUG_DRAW_INTERNAL_BUFFER = 26

class Viewport_DefaultCanvasItemTextureFilter(Enum):
    DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST = 0
    DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR = 1
    DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 2
    DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 3
    DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX = 4

class Viewport_DefaultCanvasItemTextureRepeat(Enum):
    DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED = 0
    DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED = 1
    DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR = 2
    DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX = 3

class Viewport_SDFOversize(Enum):
    SDF_OVERSIZE_100_PERCENT = 0
    SDF_OVERSIZE_120_PERCENT = 1
    SDF_OVERSIZE_150_PERCENT = 2
    SDF_OVERSIZE_200_PERCENT = 3
    SDF_OVERSIZE_MAX = 4

class Viewport_SDFScale(Enum):
    SDF_SCALE_100_PERCENT = 0
    SDF_SCALE_50_PERCENT = 1
    SDF_SCALE_25_PERCENT = 2
    SDF_SCALE_MAX = 3

class Viewport_VRSMode(Enum):
    VRS_DISABLED = 0
    VRS_TEXTURE = 1
    VRS_XR = 2
    VRS_MAX = 3

class Viewport_VRSUpdateMode(Enum):
    VRS_UPDATE_DISABLED = 0
    VRS_UPDATE_ONCE = 1
    VRS_UPDATE_ALWAYS = 2
    VRS_UPDATE_MAX = 3

class ViewportTexture(Texture2D):
    viewport_path: 'NodePath'
    def set_viewport_path_in_scene(self, path: 'NodePath') -> None: ...
    def get_viewport_path_in_scene(self) -> 'NodePath': ...
    
class VisibleOnScreenEnabler2D(VisibleOnScreenNotifier2D):
    enable_mode: int
    enable_node_path: 'NodePath'
    def set_enable_mode(self, mode: 'VisibleOnScreenEnabler2D_EnableMode') -> None: ...
    def get_enable_mode(self) -> 'VisibleOnScreenEnabler2D_EnableMode': ...
    def set_enable_node_path(self, path: 'NodePath') -> None: ...
    def get_enable_node_path(self) -> 'NodePath': ...
    
class VisibleOnScreenEnabler2D_EnableMode(Enum):
    ENABLE_MODE_INHERIT = 0
    ENABLE_MODE_ALWAYS = 1
    ENABLE_MODE_WHEN_PAUSED = 2

class VisibleOnScreenEnabler3D(VisibleOnScreenNotifier3D):
    enable_mode: int
    enable_node_path: 'NodePath'
    def set_enable_mode(self, mode: 'VisibleOnScreenEnabler3D_EnableMode') -> None: ...
    def get_enable_mode(self) -> 'VisibleOnScreenEnabler3D_EnableMode': ...
    def set_enable_node_path(self, path: 'NodePath') -> None: ...
    def get_enable_node_path(self) -> 'NodePath': ...
    
class VisibleOnScreenEnabler3D_EnableMode(Enum):
    ENABLE_MODE_INHERIT = 0
    ENABLE_MODE_ALWAYS = 1
    ENABLE_MODE_WHEN_PAUSED = 2

class VisibleOnScreenNotifier2D(Node2D):
    rect: 'Rect2'
    screen_entered: Signal[Callable[[], None]]  # screen_entered()
    screen_exited: Signal[Callable[[], None]]  # screen_exited()
    def set_rect(self, rect: 'Rect2') -> None: ...
    def get_rect(self) -> 'Rect2': ...
    def is_on_screen(self) -> bool: ...
    
class VisibleOnScreenNotifier3D(VisualInstance3D):
    aabb: 'AABB'
    screen_entered: Signal[Callable[[], None]]  # screen_entered()
    screen_exited: Signal[Callable[[], None]]  # screen_exited()
    def set_aabb(self, rect: 'AABB') -> None: ...
    def is_on_screen(self) -> bool: ...
    
class VisualInstance3D(Node3D):
    layers: int
    sorting_offset: float
    sorting_use_aabb_center: bool
    def _get_aabb(self) -> 'AABB': ...
    def set_base(self, base: 'RID') -> None: ...
    def get_base(self) -> 'RID': ...
    def get_instance(self) -> 'RID': ...
    def set_layer_mask(self, mask: int) -> None: ...
    def get_layer_mask(self) -> int: ...
    def set_layer_mask_value(self, layer_number: int, value: bool) -> None: ...
    def get_layer_mask_value(self, layer_number: int) -> bool: ...
    def set_sorting_offset(self, offset: float) -> None: ...
    def get_sorting_offset(self) -> float: ...
    def set_sorting_use_aabb_center(self, enabled: bool) -> None: ...
    def is_sorting_use_aabb_center(self) -> bool: ...
    def get_aabb(self) -> 'AABB': ...
    
class VisualShader(Shader):
    graph_offset: 'Vector2'
    NODE_ID_INVALID = -1
    NODE_ID_OUTPUT = 0
    
    def set_mode(self, mode: 'Shader_Mode') -> None: ...
    def add_node(self, type: 'VisualShader_Type', node: 'VisualShaderNode', position: 'Vector2', id: int) -> None: ...
    def get_node(self, type: 'VisualShader_Type', id: int) -> 'VisualShaderNode': ...
    def set_node_position(self, type: 'VisualShader_Type', id: int, position: 'Vector2') -> None: ...
    def get_node_position(self, type: 'VisualShader_Type', id: int) -> 'Vector2': ...
    def get_node_list(self, type: 'VisualShader_Type') -> 'PackedInt32Array': ...
    def get_valid_node_id(self, type: 'VisualShader_Type') -> int: ...
    def remove_node(self, type: 'VisualShader_Type', id: int) -> None: ...
    def replace_node(self, type: 'VisualShader_Type', id: int, new_class: 'StringName') -> None: ...
    def is_node_connection(self, type: 'VisualShader_Type', from_node: int, from_port: int, to_node: int, to_port: int) -> bool: ...
    def can_connect_nodes(self, type: 'VisualShader_Type', from_node: int, from_port: int, to_node: int, to_port: int) -> bool: ...
    def connect_nodes(self, type: 'VisualShader_Type', from_node: int, from_port: int, to_node: int, to_port: int) -> 'Error': ...
    def disconnect_nodes(self, type: 'VisualShader_Type', from_node: int, from_port: int, to_node: int, to_port: int) -> None: ...
    def connect_nodes_forced(self, type: 'VisualShader_Type', from_node: int, from_port: int, to_node: int, to_port: int) -> None: ...
    def get_node_connections(self, type: 'VisualShader_Type') -> 'list[Dictionary]': ...
    def set_graph_offset(self, offset: 'Vector2') -> None: ...
    def get_graph_offset(self) -> 'Vector2': ...
    def attach_node_to_frame(self, type: 'VisualShader_Type', id: int, frame: int) -> None: ...
    def detach_node_from_frame(self, type: 'VisualShader_Type', id: int) -> None: ...
    def add_varying(self, name: 'String', mode: 'VisualShader_VaryingMode', type: 'VisualShader_VaryingType') -> None: ...
    def remove_varying(self, name: 'String') -> None: ...
    def has_varying(self, name: 'String') -> bool: ...
    
class VisualShader_Type(Enum):
    TYPE_VERTEX = 0
    TYPE_FRAGMENT = 1
    TYPE_LIGHT = 2
    TYPE_START = 3
    TYPE_PROCESS = 4
    TYPE_COLLIDE = 5
    TYPE_START_CUSTOM = 6
    TYPE_PROCESS_CUSTOM = 7
    TYPE_SKY = 8
    TYPE_FOG = 9
    TYPE_MAX = 10

class VisualShader_VaryingMode(Enum):
    VARYING_MODE_VERTEX_TO_FRAG_LIGHT = 0
    VARYING_MODE_FRAG_TO_LIGHT = 1
    VARYING_MODE_MAX = 2

class VisualShader_VaryingType(Enum):
    VARYING_TYPE_FLOAT = 0
    VARYING_TYPE_INT = 1
    VARYING_TYPE_UINT = 2
    VARYING_TYPE_VECTOR_2D = 3
    VARYING_TYPE_VECTOR_3D = 4
    VARYING_TYPE_VECTOR_4D = 5
    VARYING_TYPE_BOOLEAN = 6
    VARYING_TYPE_TRANSFORM = 7
    VARYING_TYPE_MAX = 8

class VisualShaderNode(Resource):
    output_port_for_preview: int
    default_input_values: 'Array'
    expanded_output_ports: 'Array'
    linked_parent_graph_frame: int
    def get_default_input_port(self, type: 'VisualShaderNode_PortType') -> int: ...
    def set_output_port_for_preview(self, port: int) -> None: ...
    def get_output_port_for_preview(self) -> int: ...
    def set_input_port_default_value(self, port: int, value: 'Variant', prev_value: 'Variant' = default('''null''')) -> None: ...
    def get_input_port_default_value(self, port: int) -> 'Variant': ...
    def remove_input_port_default_value(self, port: int) -> None: ...
    def clear_default_input_values(self) -> None: ...
    def set_default_input_values(self, values: 'Array') -> None: ...
    def get_default_input_values(self) -> 'Array': ...
    def set_frame(self, frame: int) -> None: ...
    def get_frame(self) -> int: ...
    
class VisualShaderNode_PortType(Enum):
    PORT_TYPE_SCALAR = 0
    PORT_TYPE_SCALAR_INT = 1
    PORT_TYPE_SCALAR_UINT = 2
    PORT_TYPE_VECTOR_2D = 3
    PORT_TYPE_VECTOR_3D = 4
    PORT_TYPE_VECTOR_4D = 5
    PORT_TYPE_BOOLEAN = 6
    PORT_TYPE_TRANSFORM = 7
    PORT_TYPE_SAMPLER = 8
    PORT_TYPE_MAX = 9

class VisualShaderNodeBillboard(VisualShaderNode):
    billboard_type: int
    keep_scale: bool
    def set_billboard_type(self, billboard_type: 'VisualShaderNodeBillboard_BillboardType') -> None: ...
    def get_billboard_type(self) -> 'VisualShaderNodeBillboard_BillboardType': ...
    def set_keep_scale_enabled(self, enabled: bool) -> None: ...
    def is_keep_scale_enabled(self) -> bool: ...
    
class VisualShaderNodeBillboard_BillboardType(Enum):
    BILLBOARD_TYPE_DISABLED = 0
    BILLBOARD_TYPE_ENABLED = 1
    BILLBOARD_TYPE_FIXED_Y = 2
    BILLBOARD_TYPE_PARTICLES = 3
    BILLBOARD_TYPE_MAX = 4

class VisualShaderNodeBooleanConstant(VisualShaderNodeConstant):
    constant: bool
    def set_constant(self, constant: bool) -> None: ...
    def get_constant(self) -> bool: ...
    
class VisualShaderNodeBooleanParameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: bool
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: bool) -> None: ...
    def get_default_value(self) -> bool: ...
    
class VisualShaderNodeClamp(VisualShaderNode):
    op_type: int
    def set_op_type(self, op_type: 'VisualShaderNodeClamp_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeClamp_OpType': ...
    
class VisualShaderNodeClamp_OpType(Enum):
    OP_TYPE_FLOAT = 0
    OP_TYPE_INT = 1
    OP_TYPE_UINT = 2
    OP_TYPE_VECTOR_2D = 3
    OP_TYPE_VECTOR_3D = 4
    OP_TYPE_VECTOR_4D = 5
    OP_TYPE_MAX = 6

class VisualShaderNodeColorConstant(VisualShaderNodeConstant):
    constant: 'Color'
    def set_constant(self, constant: 'Color') -> None: ...
    def get_constant(self) -> 'Color': ...
    
class VisualShaderNodeColorFunc(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeColorFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeColorFunc_Function': ...
    
class VisualShaderNodeColorFunc_Function(Enum):
    FUNC_GRAYSCALE = 0
    FUNC_HSV2RGB = 1
    FUNC_RGB2HSV = 2
    FUNC_SEPIA = 3
    FUNC_LINEAR_TO_SRGB = 4
    FUNC_SRGB_TO_LINEAR = 5
    FUNC_MAX = 6

class VisualShaderNodeColorOp(VisualShaderNode):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeColorOp_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeColorOp_Operator': ...
    
class VisualShaderNodeColorOp_Operator(Enum):
    OP_SCREEN = 0
    OP_DIFFERENCE = 1
    OP_DARKEN = 2
    OP_LIGHTEN = 3
    OP_OVERLAY = 4
    OP_DODGE = 5
    OP_BURN = 6
    OP_SOFT_LIGHT = 7
    OP_HARD_LIGHT = 8
    OP_MAX = 9

class VisualShaderNodeColorParameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: 'Color'
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: 'Color') -> None: ...
    def get_default_value(self) -> 'Color': ...
    
class VisualShaderNodeComment(VisualShaderNodeFrame):
    description: 'String'
    def set_description(self, description: 'String') -> None: ...
    def get_description(self) -> 'String': ...
    
class VisualShaderNodeCompare(VisualShaderNode):
    type: int
    function: int
    condition: int
    def set_comparison_type(self, type: 'VisualShaderNodeCompare_ComparisonType') -> None: ...
    def get_comparison_type(self) -> 'VisualShaderNodeCompare_ComparisonType': ...
    def set_function(self, func: 'VisualShaderNodeCompare_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeCompare_Function': ...
    def set_condition(self, condition: 'VisualShaderNodeCompare_Condition') -> None: ...
    def get_condition(self) -> 'VisualShaderNodeCompare_Condition': ...
    
class VisualShaderNodeCompare_ComparisonType(Enum):
    CTYPE_SCALAR = 0
    CTYPE_SCALAR_INT = 1
    CTYPE_SCALAR_UINT = 2
    CTYPE_VECTOR_2D = 3
    CTYPE_VECTOR_3D = 4
    CTYPE_VECTOR_4D = 5
    CTYPE_BOOLEAN = 6
    CTYPE_TRANSFORM = 7
    CTYPE_MAX = 8

class VisualShaderNodeCompare_Function(Enum):
    FUNC_EQUAL = 0
    FUNC_NOT_EQUAL = 1
    FUNC_GREATER_THAN = 2
    FUNC_GREATER_THAN_EQUAL = 3
    FUNC_LESS_THAN = 4
    FUNC_LESS_THAN_EQUAL = 5
    FUNC_MAX = 6

class VisualShaderNodeCompare_Condition(Enum):
    COND_ALL = 0
    COND_ANY = 1
    COND_MAX = 2

class VisualShaderNodeConstant(VisualShaderNode):
    pass
    
class VisualShaderNodeCubemap(VisualShaderNode):
    source: int
    cube_map: 'Cubemap'
    texture_type: int
    def set_source(self, value: 'VisualShaderNodeCubemap_Source') -> None: ...
    def get_source(self) -> 'VisualShaderNodeCubemap_Source': ...
    def set_cube_map(self, value: 'TextureLayered') -> None: ...
    def get_cube_map(self) -> 'TextureLayered': ...
    def set_texture_type(self, value: 'VisualShaderNodeCubemap_TextureType') -> None: ...
    def get_texture_type(self) -> 'VisualShaderNodeCubemap_TextureType': ...
    
class VisualShaderNodeCubemap_Source(Enum):
    SOURCE_TEXTURE = 0
    SOURCE_PORT = 1
    SOURCE_MAX = 2

class VisualShaderNodeCubemap_TextureType(Enum):
    TYPE_DATA = 0
    TYPE_COLOR = 1
    TYPE_NORMAL_MAP = 2
    TYPE_MAX = 3

class VisualShaderNodeCubemapParameter(VisualShaderNodeTextureParameter):
    pass
    
class VisualShaderNodeCurveTexture(VisualShaderNodeResizableBase):
    texture: 'CurveTexture'
    def set_texture(self, texture: 'CurveTexture') -> None: ...
    def get_texture(self) -> 'CurveTexture': ...
    
class VisualShaderNodeCurveXYZTexture(VisualShaderNodeResizableBase):
    texture: 'CurveXYZTexture'
    def set_texture(self, texture: 'CurveXYZTexture') -> None: ...
    def get_texture(self) -> 'CurveXYZTexture': ...
    
class VisualShaderNodeCustom(VisualShaderNode):
    initialized: bool
    properties: 'String'
    def _get_name(self) -> 'String': ...
    def _get_description(self) -> 'String': ...
    def _get_category(self) -> 'String': ...
    def _get_return_icon_type(self) -> 'VisualShaderNode_PortType': ...
    def _get_input_port_count(self) -> int: ...
    def _get_input_port_type(self, port: int) -> 'VisualShaderNode_PortType': ...
    def _get_input_port_name(self, port: int) -> 'String': ...
    def _get_input_port_default_value(self, port: int) -> 'Variant': ...
    def _get_default_input_port(self, type: 'VisualShaderNode_PortType') -> int: ...
    def _get_output_port_count(self) -> int: ...
    def _get_output_port_type(self, port: int) -> 'VisualShaderNode_PortType': ...
    def _get_output_port_name(self, port: int) -> 'String': ...
    def _get_property_count(self) -> int: ...
    def _get_property_name(self, index: int) -> 'String': ...
    def _get_property_default_index(self, index: int) -> int: ...
    def _get_property_options(self, index: int) -> 'PackedStringArray': ...
    def _get_code(self, input_vars: 'list[String]', output_vars: 'list[String]', mode: 'Shader_Mode', type: 'VisualShader_Type') -> 'String': ...
    def _get_func_code(self, mode: 'Shader_Mode', type: 'VisualShader_Type') -> 'String': ...
    def _get_global_code(self, mode: 'Shader_Mode') -> 'String': ...
    def _is_highend(self) -> bool: ...
    def _is_available(self, mode: 'Shader_Mode', type: 'VisualShader_Type') -> bool: ...
    def get_option_index(self, option: int) -> int: ...
    
class VisualShaderNodeDerivativeFunc(VisualShaderNode):
    op_type: int
    function: int
    precision: int
    def set_op_type(self, type: 'VisualShaderNodeDerivativeFunc_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeDerivativeFunc_OpType': ...
    def set_function(self, func: 'VisualShaderNodeDerivativeFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeDerivativeFunc_Function': ...
    def set_precision(self, precision: 'VisualShaderNodeDerivativeFunc_Precision') -> None: ...
    def get_precision(self) -> 'VisualShaderNodeDerivativeFunc_Precision': ...
    
class VisualShaderNodeDerivativeFunc_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_3D = 2
    OP_TYPE_VECTOR_4D = 3
    OP_TYPE_MAX = 4

class VisualShaderNodeDerivativeFunc_Function(Enum):
    FUNC_SUM = 0
    FUNC_X = 1
    FUNC_Y = 2
    FUNC_MAX = 3

class VisualShaderNodeDerivativeFunc_Precision(Enum):
    PRECISION_NONE = 0
    PRECISION_COARSE = 1
    PRECISION_FINE = 2
    PRECISION_MAX = 3

class VisualShaderNodeDeterminant(VisualShaderNode):
    pass
    
class VisualShaderNodeDistanceFade(VisualShaderNode):
    pass
    
class VisualShaderNodeDotProduct(VisualShaderNode):
    pass
    
class VisualShaderNodeExpression(VisualShaderNodeGroupBase):
    expression: 'String'
    def set_expression(self, expression: 'String') -> None: ...
    def get_expression(self) -> 'String': ...
    
class VisualShaderNodeFaceForward(VisualShaderNodeVectorBase):
    pass
    
class VisualShaderNodeFloatConstant(VisualShaderNodeConstant):
    constant: float
    def set_constant(self, constant: float) -> None: ...
    def get_constant(self) -> float: ...
    
class VisualShaderNodeFloatFunc(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeFloatFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeFloatFunc_Function': ...
    
class VisualShaderNodeFloatFunc_Function(Enum):
    FUNC_SIN = 0
    FUNC_COS = 1
    FUNC_TAN = 2
    FUNC_ASIN = 3
    FUNC_ACOS = 4
    FUNC_ATAN = 5
    FUNC_SINH = 6
    FUNC_COSH = 7
    FUNC_TANH = 8
    FUNC_LOG = 9
    FUNC_EXP = 10
    FUNC_SQRT = 11
    FUNC_ABS = 12
    FUNC_SIGN = 13
    FUNC_FLOOR = 14
    FUNC_ROUND = 15
    FUNC_CEIL = 16
    FUNC_FRACT = 17
    FUNC_SATURATE = 18
    FUNC_NEGATE = 19
    FUNC_ACOSH = 20
    FUNC_ASINH = 21
    FUNC_ATANH = 22
    FUNC_DEGREES = 23
    FUNC_EXP2 = 24
    FUNC_INVERSE_SQRT = 25
    FUNC_LOG2 = 26
    FUNC_RADIANS = 27
    FUNC_RECIPROCAL = 28
    FUNC_ROUNDEVEN = 29
    FUNC_TRUNC = 30
    FUNC_ONEMINUS = 31
    FUNC_MAX = 32

class VisualShaderNodeFloatOp(VisualShaderNode):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeFloatOp_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeFloatOp_Operator': ...
    
class VisualShaderNodeFloatOp_Operator(Enum):
    OP_ADD = 0
    OP_SUB = 1
    OP_MUL = 2
    OP_DIV = 3
    OP_MOD = 4
    OP_POW = 5
    OP_MAX = 6
    OP_MIN = 7
    OP_ATAN2 = 8
    OP_STEP = 9
    OP_ENUM_SIZE = 10

class VisualShaderNodeFloatParameter(VisualShaderNodeParameter):
    hint: int
    min: float
    max: float
    step: float
    default_value_enabled: bool
    default_value: float
    def set_hint(self, hint: 'VisualShaderNodeFloatParameter_Hint') -> None: ...
    def get_hint(self) -> 'VisualShaderNodeFloatParameter_Hint': ...
    def set_min(self, value: float) -> None: ...
    def get_min(self) -> float: ...
    def set_max(self, value: float) -> None: ...
    def get_max(self) -> float: ...
    def set_step(self, value: float) -> None: ...
    def get_step(self) -> float: ...
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: float) -> None: ...
    def get_default_value(self) -> float: ...
    
class VisualShaderNodeFloatParameter_Hint(Enum):
    HINT_NONE = 0
    HINT_RANGE = 1
    HINT_RANGE_STEP = 2
    HINT_MAX = 3

class VisualShaderNodeFrame(VisualShaderNodeResizableBase):
    title: 'String'
    tint_color_enabled: bool
    tint_color: 'Color'
    autoshrink: bool
    attached_nodes: 'PackedInt32Array'
    def set_title(self, title: 'String') -> None: ...
    def get_title(self) -> 'String': ...
    def set_tint_color_enabled(self, enable: bool) -> None: ...
    def is_tint_color_enabled(self) -> bool: ...
    def set_tint_color(self, color: 'Color') -> None: ...
    def get_tint_color(self) -> 'Color': ...
    def set_autoshrink_enabled(self, enable: bool) -> None: ...
    def is_autoshrink_enabled(self) -> bool: ...
    def add_attached_node(self, node: int) -> None: ...
    def remove_attached_node(self, node: int) -> None: ...
    def set_attached_nodes(self, attached_nodes: 'PackedInt32Array') -> None: ...
    def get_attached_nodes(self) -> 'PackedInt32Array': ...
    
class VisualShaderNodeFresnel(VisualShaderNode):
    pass
    
class VisualShaderNodeGlobalExpression(VisualShaderNodeExpression):
    pass
    
class VisualShaderNodeGroupBase(VisualShaderNodeResizableBase):
    def set_inputs(self, inputs: 'String') -> None: ...
    def get_inputs(self) -> 'String': ...
    def set_outputs(self, outputs: 'String') -> None: ...
    def get_outputs(self) -> 'String': ...
    def is_valid_port_name(self, name: 'String') -> bool: ...
    def add_input_port(self, id: int, type: int, name: 'String') -> None: ...
    def remove_input_port(self, id: int) -> None: ...
    def get_input_port_count(self) -> int: ...
    def has_input_port(self, id: int) -> bool: ...
    def clear_input_ports(self) -> None: ...
    def add_output_port(self, id: int, type: int, name: 'String') -> None: ...
    def remove_output_port(self, id: int) -> None: ...
    def get_output_port_count(self) -> int: ...
    def has_output_port(self, id: int) -> bool: ...
    def clear_output_ports(self) -> None: ...
    def set_input_port_name(self, id: int, name: 'String') -> None: ...
    def set_input_port_type(self, id: int, type: int) -> None: ...
    def set_output_port_name(self, id: int, name: 'String') -> None: ...
    def set_output_port_type(self, id: int, type: int) -> None: ...
    def get_free_input_port_id(self) -> int: ...
    def get_free_output_port_id(self) -> int: ...
    
class VisualShaderNodeIf(VisualShaderNode):
    pass
    
class VisualShaderNodeInput(VisualShaderNode):
    input_name: 'StringName'
    input_type_changed: Signal[Callable[[], None]]  # input_type_changed()
    def set_input_name(self, name: 'String') -> None: ...
    def get_input_name(self) -> 'String': ...
    def get_input_real_name(self) -> 'String': ...
    
class VisualShaderNodeIntConstant(VisualShaderNodeConstant):
    constant: int
    def set_constant(self, constant: int) -> None: ...
    def get_constant(self) -> int: ...
    
class VisualShaderNodeIntFunc(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeIntFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeIntFunc_Function': ...
    
class VisualShaderNodeIntFunc_Function(Enum):
    FUNC_ABS = 0
    FUNC_NEGATE = 1
    FUNC_SIGN = 2
    FUNC_BITWISE_NOT = 3
    FUNC_MAX = 4

class VisualShaderNodeIntOp(VisualShaderNode):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeIntOp_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeIntOp_Operator': ...
    
class VisualShaderNodeIntOp_Operator(Enum):
    OP_ADD = 0
    OP_SUB = 1
    OP_MUL = 2
    OP_DIV = 3
    OP_MOD = 4
    OP_MAX = 5
    OP_MIN = 6
    OP_BITWISE_AND = 7
    OP_BITWISE_OR = 8
    OP_BITWISE_XOR = 9
    OP_BITWISE_LEFT_SHIFT = 10
    OP_BITWISE_RIGHT_SHIFT = 11
    OP_ENUM_SIZE = 12

class VisualShaderNodeIntParameter(VisualShaderNodeParameter):
    hint: int
    min: int
    max: int
    step: int
    enum_names: 'PackedStringArray'
    default_value_enabled: bool
    default_value: int
    def set_hint(self, hint: 'VisualShaderNodeIntParameter_Hint') -> None: ...
    def get_hint(self) -> 'VisualShaderNodeIntParameter_Hint': ...
    def set_min(self, value: int) -> None: ...
    def get_min(self) -> int: ...
    def set_max(self, value: int) -> None: ...
    def get_max(self) -> int: ...
    def set_step(self, value: int) -> None: ...
    def get_step(self) -> int: ...
    def set_enum_names(self, names: 'PackedStringArray') -> None: ...
    def get_enum_names(self) -> 'PackedStringArray': ...
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: int) -> None: ...
    def get_default_value(self) -> int: ...
    
class VisualShaderNodeIntParameter_Hint(Enum):
    HINT_NONE = 0
    HINT_RANGE = 1
    HINT_RANGE_STEP = 2
    HINT_ENUM = 3
    HINT_MAX = 4

class VisualShaderNodeIs(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeIs_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeIs_Function': ...
    
class VisualShaderNodeIs_Function(Enum):
    FUNC_IS_INF = 0
    FUNC_IS_NAN = 1
    FUNC_MAX = 2

class VisualShaderNodeLinearSceneDepth(VisualShaderNode):
    pass
    
class VisualShaderNodeMix(VisualShaderNode):
    op_type: int
    def set_op_type(self, op_type: 'VisualShaderNodeMix_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeMix_OpType': ...
    
class VisualShaderNodeMix_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_2D_SCALAR = 2
    OP_TYPE_VECTOR_3D = 3
    OP_TYPE_VECTOR_3D_SCALAR = 4
    OP_TYPE_VECTOR_4D = 5
    OP_TYPE_VECTOR_4D_SCALAR = 6
    OP_TYPE_MAX = 7

class VisualShaderNodeMultiplyAdd(VisualShaderNode):
    op_type: int
    def set_op_type(self, type: 'VisualShaderNodeMultiplyAdd_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeMultiplyAdd_OpType': ...
    
class VisualShaderNodeMultiplyAdd_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_3D = 2
    OP_TYPE_VECTOR_4D = 3
    OP_TYPE_MAX = 4

class VisualShaderNodeOuterProduct(VisualShaderNode):
    pass
    
class VisualShaderNodeOutput(VisualShaderNode):
    pass
    
class VisualShaderNodeParameter(VisualShaderNode):
    parameter_name: 'StringName'
    qualifier: int
    def set_parameter_name(self, name: 'String') -> None: ...
    def get_parameter_name(self) -> 'String': ...
    def set_qualifier(self, qualifier: 'VisualShaderNodeParameter_Qualifier') -> None: ...
    def get_qualifier(self) -> 'VisualShaderNodeParameter_Qualifier': ...
    
class VisualShaderNodeParameter_Qualifier(Enum):
    QUAL_NONE = 0
    QUAL_GLOBAL = 1
    QUAL_INSTANCE = 2
    QUAL_MAX = 3

class VisualShaderNodeParameterRef(VisualShaderNode):
    parameter_name: 'StringName'
    param_type: int
    def set_parameter_name(self, name: 'String') -> None: ...
    def get_parameter_name(self) -> 'String': ...
    
class VisualShaderNodeParticleAccelerator(VisualShaderNode):
    mode: int
    def set_mode(self, mode: 'VisualShaderNodeParticleAccelerator_Mode') -> None: ...
    def get_mode(self) -> 'VisualShaderNodeParticleAccelerator_Mode': ...
    
class VisualShaderNodeParticleAccelerator_Mode(Enum):
    MODE_LINEAR = 0
    MODE_RADIAL = 1
    MODE_TANGENTIAL = 2
    MODE_MAX = 3

class VisualShaderNodeParticleBoxEmitter(VisualShaderNodeParticleEmitter):
    pass
    
class VisualShaderNodeParticleConeVelocity(VisualShaderNode):
    pass
    
class VisualShaderNodeParticleEmit(VisualShaderNode):
    flags: int
    def set_flags(self, flags: 'VisualShaderNodeParticleEmit_EmitFlags') -> None: ...
    def get_flags(self) -> 'VisualShaderNodeParticleEmit_EmitFlags': ...
    
class VisualShaderNodeParticleEmit_EmitFlags(Enum):
    EMIT_FLAG_POSITION = 1
    EMIT_FLAG_ROT_SCALE = 2
    EMIT_FLAG_VELOCITY = 4
    EMIT_FLAG_COLOR = 8
    EMIT_FLAG_CUSTOM = 16

class VisualShaderNodeParticleEmitter(VisualShaderNode):
    mode_2d: bool
    def set_mode_2d(self, enabled: bool) -> None: ...
    def is_mode_2d(self) -> bool: ...
    
class VisualShaderNodeParticleMeshEmitter(VisualShaderNodeParticleEmitter):
    mesh: 'Mesh'
    use_all_surfaces: bool
    surface_index: int
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_use_all_surfaces(self, enabled: bool) -> None: ...
    def is_use_all_surfaces(self) -> bool: ...
    def set_surface_index(self, surface_index: int) -> None: ...
    def get_surface_index(self) -> int: ...
    
class VisualShaderNodeParticleMultiplyByAxisAngle(VisualShaderNode):
    degrees_mode: bool
    def set_degrees_mode(self, enabled: bool) -> None: ...
    def is_degrees_mode(self) -> bool: ...
    
class VisualShaderNodeParticleOutput(VisualShaderNodeOutput):
    pass
    
class VisualShaderNodeParticleRandomness(VisualShaderNode):
    op_type: int
    def set_op_type(self, type: 'VisualShaderNodeParticleRandomness_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeParticleRandomness_OpType': ...
    
class VisualShaderNodeParticleRandomness_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_3D = 2
    OP_TYPE_VECTOR_4D = 3
    OP_TYPE_MAX = 4

class VisualShaderNodeParticleRingEmitter(VisualShaderNodeParticleEmitter):
    pass
    
class VisualShaderNodeParticleSphereEmitter(VisualShaderNodeParticleEmitter):
    pass
    
class VisualShaderNodeProximityFade(VisualShaderNode):
    pass
    
class VisualShaderNodeRandomRange(VisualShaderNode):
    pass
    
class VisualShaderNodeRemap(VisualShaderNode):
    op_type: int
    def set_op_type(self, op_type: 'VisualShaderNodeRemap_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeRemap_OpType': ...
    
class VisualShaderNodeRemap_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_2D_SCALAR = 2
    OP_TYPE_VECTOR_3D = 3
    OP_TYPE_VECTOR_3D_SCALAR = 4
    OP_TYPE_VECTOR_4D = 5
    OP_TYPE_VECTOR_4D_SCALAR = 6
    OP_TYPE_MAX = 7

class VisualShaderNodeReroute(VisualShaderNode):
    port_type: int
    def get_port_type(self) -> 'VisualShaderNode_PortType': ...
    
class VisualShaderNodeResizableBase(VisualShaderNode):
    size: 'Vector2'
    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...
    
class VisualShaderNodeRotationByAxis(VisualShaderNode):
    pass
    
class VisualShaderNodeSDFRaymarch(VisualShaderNode):
    pass
    
class VisualShaderNodeSDFToScreenUV(VisualShaderNode):
    pass
    
class VisualShaderNodeSample3D(VisualShaderNode):
    source: int
    def set_source(self, value: 'VisualShaderNodeSample3D_Source') -> None: ...
    def get_source(self) -> 'VisualShaderNodeSample3D_Source': ...
    
class VisualShaderNodeSample3D_Source(Enum):
    SOURCE_TEXTURE = 0
    SOURCE_PORT = 1
    SOURCE_MAX = 2

class VisualShaderNodeScreenNormalWorldSpace(VisualShaderNode):
    pass
    
class VisualShaderNodeScreenUVToSDF(VisualShaderNode):
    pass
    
class VisualShaderNodeSmoothStep(VisualShaderNode):
    op_type: int
    def set_op_type(self, op_type: 'VisualShaderNodeSmoothStep_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeSmoothStep_OpType': ...
    
class VisualShaderNodeSmoothStep_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_2D_SCALAR = 2
    OP_TYPE_VECTOR_3D = 3
    OP_TYPE_VECTOR_3D_SCALAR = 4
    OP_TYPE_VECTOR_4D = 5
    OP_TYPE_VECTOR_4D_SCALAR = 6
    OP_TYPE_MAX = 7

class VisualShaderNodeStep(VisualShaderNode):
    op_type: int
    def set_op_type(self, op_type: 'VisualShaderNodeStep_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeStep_OpType': ...
    
class VisualShaderNodeStep_OpType(Enum):
    OP_TYPE_SCALAR = 0
    OP_TYPE_VECTOR_2D = 1
    OP_TYPE_VECTOR_2D_SCALAR = 2
    OP_TYPE_VECTOR_3D = 3
    OP_TYPE_VECTOR_3D_SCALAR = 4
    OP_TYPE_VECTOR_4D = 5
    OP_TYPE_VECTOR_4D_SCALAR = 6
    OP_TYPE_MAX = 7

class VisualShaderNodeSwitch(VisualShaderNode):
    op_type: int
    def set_op_type(self, type: 'VisualShaderNodeSwitch_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeSwitch_OpType': ...
    
class VisualShaderNodeSwitch_OpType(Enum):
    OP_TYPE_FLOAT = 0
    OP_TYPE_INT = 1
    OP_TYPE_UINT = 2
    OP_TYPE_VECTOR_2D = 3
    OP_TYPE_VECTOR_3D = 4
    OP_TYPE_VECTOR_4D = 5
    OP_TYPE_BOOLEAN = 6
    OP_TYPE_TRANSFORM = 7
    OP_TYPE_MAX = 8

class VisualShaderNodeTexture(VisualShaderNode):
    source: int
    texture: 'Texture2D'
    texture_type: int
    def set_source(self, value: 'VisualShaderNodeTexture_Source') -> None: ...
    def get_source(self) -> 'VisualShaderNodeTexture_Source': ...
    def set_texture(self, value: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_type(self, value: 'VisualShaderNodeTexture_TextureType') -> None: ...
    def get_texture_type(self) -> 'VisualShaderNodeTexture_TextureType': ...
    
class VisualShaderNodeTexture_Source(Enum):
    SOURCE_TEXTURE = 0
    SOURCE_SCREEN = 1
    SOURCE_2D_TEXTURE = 2
    SOURCE_2D_NORMAL = 3
    SOURCE_DEPTH = 4
    SOURCE_PORT = 5
    SOURCE_3D_NORMAL = 6
    SOURCE_ROUGHNESS = 7
    SOURCE_MAX = 8

class VisualShaderNodeTexture_TextureType(Enum):
    TYPE_DATA = 0
    TYPE_COLOR = 1
    TYPE_NORMAL_MAP = 2
    TYPE_MAX = 3

class VisualShaderNodeTexture2DArray(VisualShaderNodeSample3D):
    texture_array: 'Texture2DArray'
    def set_texture_array(self, value: 'TextureLayered') -> None: ...
    def get_texture_array(self) -> 'TextureLayered': ...
    
class VisualShaderNodeTexture2DArrayParameter(VisualShaderNodeTextureParameter):
    pass
    
class VisualShaderNodeTexture2DParameter(VisualShaderNodeTextureParameter):
    pass
    
class VisualShaderNodeTexture3D(VisualShaderNodeSample3D):
    texture: 'Texture3D'
    def set_texture(self, value: 'Texture3D') -> None: ...
    def get_texture(self) -> 'Texture3D': ...
    
class VisualShaderNodeTexture3DParameter(VisualShaderNodeTextureParameter):
    pass
    
class VisualShaderNodeTextureParameter(VisualShaderNodeParameter):
    texture_type: int
    color_default: int
    texture_filter: int
    texture_repeat: int
    texture_source: int
    def set_texture_type(self, type: 'VisualShaderNodeTextureParameter_TextureType') -> None: ...
    def get_texture_type(self) -> 'VisualShaderNodeTextureParameter_TextureType': ...
    def set_color_default(self, color: 'VisualShaderNodeTextureParameter_ColorDefault') -> None: ...
    def get_color_default(self) -> 'VisualShaderNodeTextureParameter_ColorDefault': ...
    def set_texture_filter(self, filter: 'VisualShaderNodeTextureParameter_TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'VisualShaderNodeTextureParameter_TextureFilter': ...
    def set_texture_repeat(self, repeat: 'VisualShaderNodeTextureParameter_TextureRepeat') -> None: ...
    def get_texture_repeat(self) -> 'VisualShaderNodeTextureParameter_TextureRepeat': ...
    def set_texture_source(self, source: 'VisualShaderNodeTextureParameter_TextureSource') -> None: ...
    def get_texture_source(self) -> 'VisualShaderNodeTextureParameter_TextureSource': ...
    
class VisualShaderNodeTextureParameter_TextureType(Enum):
    TYPE_DATA = 0
    TYPE_COLOR = 1
    TYPE_NORMAL_MAP = 2
    TYPE_ANISOTROPY = 3
    TYPE_MAX = 4

class VisualShaderNodeTextureParameter_ColorDefault(Enum):
    COLOR_DEFAULT_WHITE = 0
    COLOR_DEFAULT_BLACK = 1
    COLOR_DEFAULT_TRANSPARENT = 2
    COLOR_DEFAULT_MAX = 3

class VisualShaderNodeTextureParameter_TextureFilter(Enum):
    FILTER_DEFAULT = 0
    FILTER_NEAREST = 1
    FILTER_LINEAR = 2
    FILTER_NEAREST_MIPMAP = 3
    FILTER_LINEAR_MIPMAP = 4
    FILTER_NEAREST_MIPMAP_ANISOTROPIC = 5
    FILTER_LINEAR_MIPMAP_ANISOTROPIC = 6
    FILTER_MAX = 7

class VisualShaderNodeTextureParameter_TextureRepeat(Enum):
    REPEAT_DEFAULT = 0
    REPEAT_ENABLED = 1
    REPEAT_DISABLED = 2
    REPEAT_MAX = 3

class VisualShaderNodeTextureParameter_TextureSource(Enum):
    SOURCE_NONE = 0
    SOURCE_SCREEN = 1
    SOURCE_DEPTH = 2
    SOURCE_NORMAL_ROUGHNESS = 3
    SOURCE_MAX = 4

class VisualShaderNodeTextureParameterTriplanar(VisualShaderNodeTextureParameter):
    pass
    
class VisualShaderNodeTextureSDF(VisualShaderNode):
    pass
    
class VisualShaderNodeTextureSDFNormal(VisualShaderNode):
    pass
    
class VisualShaderNodeTransformCompose(VisualShaderNode):
    pass
    
class VisualShaderNodeTransformConstant(VisualShaderNodeConstant):
    constant: 'Transform3D'
    def set_constant(self, constant: 'Transform3D') -> None: ...
    def get_constant(self) -> 'Transform3D': ...
    
class VisualShaderNodeTransformDecompose(VisualShaderNode):
    pass
    
class VisualShaderNodeTransformFunc(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeTransformFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeTransformFunc_Function': ...
    
class VisualShaderNodeTransformFunc_Function(Enum):
    FUNC_INVERSE = 0
    FUNC_TRANSPOSE = 1
    FUNC_MAX = 2

class VisualShaderNodeTransformOp(VisualShaderNode):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeTransformOp_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeTransformOp_Operator': ...
    
class VisualShaderNodeTransformOp_Operator(Enum):
    OP_AxB = 0
    OP_BxA = 1
    OP_AxB_COMP = 2
    OP_BxA_COMP = 3
    OP_ADD = 4
    OP_A_MINUS_B = 5
    OP_B_MINUS_A = 6
    OP_A_DIV_B = 7
    OP_B_DIV_A = 8
    OP_MAX = 9

class VisualShaderNodeTransformParameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: 'Transform3D'
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: 'Transform3D') -> None: ...
    def get_default_value(self) -> 'Transform3D': ...
    
class VisualShaderNodeTransformVecMult(VisualShaderNode):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeTransformVecMult_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeTransformVecMult_Operator': ...
    
class VisualShaderNodeTransformVecMult_Operator(Enum):
    OP_AxB = 0
    OP_BxA = 1
    OP_3x3_AxB = 2
    OP_3x3_BxA = 3
    OP_MAX = 4

class VisualShaderNodeUIntConstant(VisualShaderNodeConstant):
    constant: int
    def set_constant(self, constant: int) -> None: ...
    def get_constant(self) -> int: ...
    
class VisualShaderNodeUIntFunc(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeUIntFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeUIntFunc_Function': ...
    
class VisualShaderNodeUIntFunc_Function(Enum):
    FUNC_NEGATE = 0
    FUNC_BITWISE_NOT = 1
    FUNC_MAX = 2

class VisualShaderNodeUIntOp(VisualShaderNode):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeUIntOp_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeUIntOp_Operator': ...
    
class VisualShaderNodeUIntOp_Operator(Enum):
    OP_ADD = 0
    OP_SUB = 1
    OP_MUL = 2
    OP_DIV = 3
    OP_MOD = 4
    OP_MAX = 5
    OP_MIN = 6
    OP_BITWISE_AND = 7
    OP_BITWISE_OR = 8
    OP_BITWISE_XOR = 9
    OP_BITWISE_LEFT_SHIFT = 10
    OP_BITWISE_RIGHT_SHIFT = 11
    OP_ENUM_SIZE = 12

class VisualShaderNodeUIntParameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: int
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: int) -> None: ...
    def get_default_value(self) -> int: ...
    
class VisualShaderNodeUVFunc(VisualShaderNode):
    function: int
    def set_function(self, func: 'VisualShaderNodeUVFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeUVFunc_Function': ...
    
class VisualShaderNodeUVFunc_Function(Enum):
    FUNC_PANNING = 0
    FUNC_SCALING = 1
    FUNC_MAX = 2

class VisualShaderNodeUVPolarCoord(VisualShaderNode):
    pass
    
class VisualShaderNodeVarying(VisualShaderNode):
    varying_name: 'StringName'
    varying_type: int
    def set_varying_name(self, name: 'String') -> None: ...
    def get_varying_name(self) -> 'String': ...
    def set_varying_type(self, type: 'VisualShader_VaryingType') -> None: ...
    def get_varying_type(self) -> 'VisualShader_VaryingType': ...
    
class VisualShaderNodeVaryingGetter(VisualShaderNodeVarying):
    pass
    
class VisualShaderNodeVaryingSetter(VisualShaderNodeVarying):
    pass
    
class VisualShaderNodeVec2Constant(VisualShaderNodeConstant):
    constant: 'Vector2'
    def set_constant(self, constant: 'Vector2') -> None: ...
    def get_constant(self) -> 'Vector2': ...
    
class VisualShaderNodeVec2Parameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: 'Vector2'
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: 'Vector2') -> None: ...
    def get_default_value(self) -> 'Vector2': ...
    
class VisualShaderNodeVec3Constant(VisualShaderNodeConstant):
    constant: 'Vector3'
    def set_constant(self, constant: 'Vector3') -> None: ...
    def get_constant(self) -> 'Vector3': ...
    
class VisualShaderNodeVec3Parameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: 'Vector3'
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: 'Vector3') -> None: ...
    def get_default_value(self) -> 'Vector3': ...
    
class VisualShaderNodeVec4Constant(VisualShaderNodeConstant):
    constant: 'Quaternion'
    constant_v4: 'Vector4'
    def set_constant(self, constant: 'Quaternion') -> None: ...
    def get_constant(self) -> 'Quaternion': ...
    
class VisualShaderNodeVec4Parameter(VisualShaderNodeParameter):
    default_value_enabled: bool
    default_value: 'Vector4'
    def set_default_value_enabled(self, enabled: bool) -> None: ...
    def is_default_value_enabled(self) -> bool: ...
    def set_default_value(self, value: 'Vector4') -> None: ...
    def get_default_value(self) -> 'Vector4': ...
    
class VisualShaderNodeVectorBase(VisualShaderNode):
    op_type: int
    def set_op_type(self, type: 'VisualShaderNodeVectorBase_OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeVectorBase_OpType': ...
    
class VisualShaderNodeVectorBase_OpType(Enum):
    OP_TYPE_VECTOR_2D = 0
    OP_TYPE_VECTOR_3D = 1
    OP_TYPE_VECTOR_4D = 2
    OP_TYPE_MAX = 3

class VisualShaderNodeVectorCompose(VisualShaderNodeVectorBase):
    pass
    
class VisualShaderNodeVectorDecompose(VisualShaderNodeVectorBase):
    pass
    
class VisualShaderNodeVectorDistance(VisualShaderNodeVectorBase):
    pass
    
class VisualShaderNodeVectorFunc(VisualShaderNodeVectorBase):
    function: int
    def set_function(self, func: 'VisualShaderNodeVectorFunc_Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeVectorFunc_Function': ...
    
class VisualShaderNodeVectorFunc_Function(Enum):
    FUNC_NORMALIZE = 0
    FUNC_SATURATE = 1
    FUNC_NEGATE = 2
    FUNC_RECIPROCAL = 3
    FUNC_ABS = 4
    FUNC_ACOS = 5
    FUNC_ACOSH = 6
    FUNC_ASIN = 7
    FUNC_ASINH = 8
    FUNC_ATAN = 9
    FUNC_ATANH = 10
    FUNC_CEIL = 11
    FUNC_COS = 12
    FUNC_COSH = 13
    FUNC_DEGREES = 14
    FUNC_EXP = 15
    FUNC_EXP2 = 16
    FUNC_FLOOR = 17
    FUNC_FRACT = 18
    FUNC_INVERSE_SQRT = 19
    FUNC_LOG = 20
    FUNC_LOG2 = 21
    FUNC_RADIANS = 22
    FUNC_ROUND = 23
    FUNC_ROUNDEVEN = 24
    FUNC_SIGN = 25
    FUNC_SIN = 26
    FUNC_SINH = 27
    FUNC_SQRT = 28
    FUNC_TAN = 29
    FUNC_TANH = 30
    FUNC_TRUNC = 31
    FUNC_ONEMINUS = 32
    FUNC_MAX = 33

class VisualShaderNodeVectorLen(VisualShaderNodeVectorBase):
    pass
    
class VisualShaderNodeVectorOp(VisualShaderNodeVectorBase):
    operator: int
    def set_operator(self, op: 'VisualShaderNodeVectorOp_Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeVectorOp_Operator': ...
    
class VisualShaderNodeVectorOp_Operator(Enum):
    OP_ADD = 0
    OP_SUB = 1
    OP_MUL = 2
    OP_DIV = 3
    OP_MOD = 4
    OP_POW = 5
    OP_MAX = 6
    OP_MIN = 7
    OP_CROSS = 8
    OP_ATAN2 = 9
    OP_REFLECT = 10
    OP_STEP = 11
    OP_ENUM_SIZE = 12

class VisualShaderNodeVectorRefract(VisualShaderNodeVectorBase):
    pass
    
class VisualShaderNodeWorldPositionFromDepth(VisualShaderNode):
    pass
    
class VoxelGI(VisualInstance3D):
    subdiv: int
    size: 'Vector3'
    camera_attributes: 'CameraAttributesPractical'
    data: 'VoxelGIData'
    def set_probe_data(self, data: 'VoxelGIData') -> None: ...
    def get_probe_data(self) -> 'VoxelGIData': ...
    def set_subdiv(self, subdiv: 'VoxelGI_Subdiv') -> None: ...
    def get_subdiv(self) -> 'VoxelGI_Subdiv': ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_camera_attributes(self, camera_attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    def bake(self, from_node: 'Node' = default('''null'''), create_visual_debug: bool = default('''false''')) -> None: ...
    def debug_bake(self) -> None: ...
    
class VoxelGI_Subdiv(Enum):
    SUBDIV_64 = 0
    SUBDIV_128 = 1
    SUBDIV_256 = 2
    SUBDIV_512 = 3
    SUBDIV_MAX = 4

class VoxelGIData(Resource):
    dynamic_range: float
    energy: float
    bias: float
    normal_bias: float
    propagation: float
    use_two_bounces: bool
    interior: bool
    def allocate(self, to_cell_xform: 'Transform3D', aabb: 'AABB', octree_size: 'Vector3', octree_cells: 'PackedByteArray', data_cells: 'PackedByteArray', distance_field: 'PackedByteArray', level_counts: 'PackedInt32Array') -> None: ...
    def get_bounds(self) -> 'AABB': ...
    def get_octree_size(self) -> 'Vector3': ...
    def get_to_cell_xform(self) -> 'Transform3D': ...
    def get_octree_cells(self) -> 'PackedByteArray': ...
    def get_data_cells(self) -> 'PackedByteArray': ...
    def get_level_counts(self) -> 'PackedInt32Array': ...
    def set_dynamic_range(self, dynamic_range: float) -> None: ...
    def get_dynamic_range(self) -> float: ...
    def set_energy(self, energy: float) -> None: ...
    def get_energy(self) -> float: ...
    def set_bias(self, bias: float) -> None: ...
    def get_bias(self) -> float: ...
    def set_normal_bias(self, bias: float) -> None: ...
    def get_normal_bias(self) -> float: ...
    def set_propagation(self, propagation: float) -> None: ...
    def get_propagation(self) -> float: ...
    def set_interior(self, interior: bool) -> None: ...
    def is_interior(self) -> bool: ...
    def set_use_two_bounces(self, enable: bool) -> None: ...
    def is_using_two_bounces(self) -> bool: ...
    
class WeakRef(RefCounted):
    def get_ref(self) -> 'Variant': ...
    
class WebRTCDataChannel(PacketPeer):
    write_mode: int
    def poll(self) -> 'Error': ...
    def close(self) -> None: ...
    def was_string_packet(self) -> bool: ...
    def set_write_mode(self, write_mode: 'WebRTCDataChannel_WriteMode') -> None: ...
    def get_write_mode(self) -> 'WebRTCDataChannel_WriteMode': ...
    def get_ready_state(self) -> 'WebRTCDataChannel_ChannelState': ...
    def get_label(self) -> 'String': ...
    def is_ordered(self) -> bool: ...
    def get_id(self) -> int: ...
    def get_max_packet_life_time(self) -> int: ...
    def get_max_retransmits(self) -> int: ...
    def get_protocol(self) -> 'String': ...
    def is_negotiated(self) -> bool: ...
    def get_buffered_amount(self) -> int: ...
    
class WebRTCDataChannel_WriteMode(Enum):
    WRITE_MODE_TEXT = 0
    WRITE_MODE_BINARY = 1

class WebRTCDataChannel_ChannelState(Enum):
    STATE_CONNECTING = 0
    STATE_OPEN = 1
    STATE_CLOSING = 2
    STATE_CLOSED = 3

class WebRTCDataChannelExtension(WebRTCDataChannel):
    def _get_packet(self, r_buffer: 'intptr', r_buffer_size: 'intptr') -> 'Error': ...
    def _put_packet(self, p_buffer: 'intptr', p_buffer_size: int) -> 'Error': ...
    def _get_available_packet_count(self) -> int: ...
    def _get_max_packet_size(self) -> int: ...
    def _poll(self) -> 'Error': ...
    def _close(self) -> None: ...
    def _set_write_mode(self, p_write_mode: 'WebRTCDataChannel_WriteMode') -> None: ...
    def _get_write_mode(self) -> 'WebRTCDataChannel_WriteMode': ...
    def _was_string_packet(self) -> bool: ...
    def _get_ready_state(self) -> 'WebRTCDataChannel_ChannelState': ...
    def _get_label(self) -> 'String': ...
    def _is_ordered(self) -> bool: ...
    def _get_id(self) -> int: ...
    def _get_max_packet_life_time(self) -> int: ...
    def _get_max_retransmits(self) -> int: ...
    def _get_protocol(self) -> 'String': ...
    def _is_negotiated(self) -> bool: ...
    def _get_buffered_amount(self) -> int: ...
    
class WebRTCMultiplayerPeer(MultiplayerPeer):
    def create_server(self, channels_config: 'Array' = default('''[]''')) -> 'Error': ...
    def create_client(self, peer_id: int, channels_config: 'Array' = default('''[]''')) -> 'Error': ...
    def create_mesh(self, peer_id: int, channels_config: 'Array' = default('''[]''')) -> 'Error': ...
    def add_peer(self, peer: 'WebRTCPeerConnection', peer_id: int, unreliable_lifetime: int = default('''1''')) -> 'Error': ...
    def remove_peer(self, peer_id: int) -> None: ...
    def has_peer(self, peer_id: int) -> bool: ...
    def get_peer(self, peer_id: int) -> 'Dictionary': ...
    def get_peers(self) -> 'Dictionary': ...
    
class WebRTCPeerConnection(RefCounted):
    session_description_created: Signal[Callable[['String', 'String'], None]]  # session_description_created(type: 'String', sdp: 'String')
    ice_candidate_created: Signal[Callable[['String', 'int', 'String'], None]]  # ice_candidate_created(media: 'String', index: int, name: 'String')
    data_channel_received: Signal[Callable[['WebRTCDataChannel'], None]]  # data_channel_received(channel: 'WebRTCDataChannel')
    @staticmethod
    def set_default_extension(extension_class: 'StringName') -> None: ...
    def initialize(self, configuration: 'Dictionary' = default('''{}''')) -> 'Error': ...
    def create_data_channel(self, label: 'String', options: 'Dictionary' = default('''{}''')) -> 'WebRTCDataChannel': ...
    def create_offer(self) -> 'Error': ...
    def set_local_description(self, type: 'String', sdp: 'String') -> 'Error': ...
    def set_remote_description(self, type: 'String', sdp: 'String') -> 'Error': ...
    def add_ice_candidate(self, media: 'String', index: int, name: 'String') -> 'Error': ...
    def poll(self) -> 'Error': ...
    def close(self) -> None: ...
    def get_connection_state(self) -> 'WebRTCPeerConnection_ConnectionState': ...
    def get_gathering_state(self) -> 'WebRTCPeerConnection_GatheringState': ...
    def get_signaling_state(self) -> 'WebRTCPeerConnection_SignalingState': ...
    
class WebRTCPeerConnection_ConnectionState(Enum):
    STATE_NEW = 0
    STATE_CONNECTING = 1
    STATE_CONNECTED = 2
    STATE_DISCONNECTED = 3
    STATE_FAILED = 4
    STATE_CLOSED = 5

class WebRTCPeerConnection_GatheringState(Enum):
    GATHERING_STATE_NEW = 0
    GATHERING_STATE_GATHERING = 1
    GATHERING_STATE_COMPLETE = 2

class WebRTCPeerConnection_SignalingState(Enum):
    SIGNALING_STATE_STABLE = 0
    SIGNALING_STATE_HAVE_LOCAL_OFFER = 1
    SIGNALING_STATE_HAVE_REMOTE_OFFER = 2
    SIGNALING_STATE_HAVE_LOCAL_PRANSWER = 3
    SIGNALING_STATE_HAVE_REMOTE_PRANSWER = 4
    SIGNALING_STATE_CLOSED = 5

class WebRTCPeerConnectionExtension(WebRTCPeerConnection):
    def _get_connection_state(self) -> 'WebRTCPeerConnection_ConnectionState': ...
    def _get_gathering_state(self) -> 'WebRTCPeerConnection_GatheringState': ...
    def _get_signaling_state(self) -> 'WebRTCPeerConnection_SignalingState': ...
    def _initialize(self, p_config: 'Dictionary') -> 'Error': ...
    def _create_data_channel(self, p_label: 'String', p_config: 'Dictionary') -> 'WebRTCDataChannel': ...
    def _create_offer(self) -> 'Error': ...
    def _set_remote_description(self, p_type: 'String', p_sdp: 'String') -> 'Error': ...
    def _set_local_description(self, p_type: 'String', p_sdp: 'String') -> 'Error': ...
    def _add_ice_candidate(self, p_sdp_mid_name: 'String', p_sdp_mline_index: int, p_sdp_name: 'String') -> 'Error': ...
    def _poll(self) -> 'Error': ...
    def _close(self) -> None: ...
    
class WebSocketMultiplayerPeer(MultiplayerPeer):
    supported_protocols: 'PackedStringArray'
    handshake_headers: 'PackedStringArray'
    inbound_buffer_size: int
    outbound_buffer_size: int
    handshake_timeout: float
    max_queued_packets: int
    def create_client(self, url: 'String', tls_client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def create_server(self, port: int, bind_address: 'String' = default('''"*"'''), tls_server_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def get_peer(self, peer_id: int) -> 'WebSocketPeer': ...
    def get_peer_address(self, id: int) -> 'String': ...
    def get_peer_port(self, id: int) -> int: ...
    def get_supported_protocols(self) -> 'PackedStringArray': ...
    def set_supported_protocols(self, protocols: 'PackedStringArray') -> None: ...
    def get_handshake_headers(self) -> 'PackedStringArray': ...
    def set_handshake_headers(self, protocols: 'PackedStringArray') -> None: ...
    def get_inbound_buffer_size(self) -> int: ...
    def set_inbound_buffer_size(self, buffer_size: int) -> None: ...
    def get_outbound_buffer_size(self) -> int: ...
    def set_outbound_buffer_size(self, buffer_size: int) -> None: ...
    def get_handshake_timeout(self) -> float: ...
    def set_handshake_timeout(self, timeout: float) -> None: ...
    def set_max_queued_packets(self, max_queued_packets: int) -> None: ...
    def get_max_queued_packets(self) -> int: ...
    
class WebSocketPeer(PacketPeer):
    supported_protocols: 'PackedStringArray'
    handshake_headers: 'PackedStringArray'
    inbound_buffer_size: int
    outbound_buffer_size: int
    max_queued_packets: int
    heartbeat_interval: int
    def connect_to_url(self, url: 'String', tls_client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def accept_stream(self, stream: 'StreamPeer') -> 'Error': ...
    def send(self, message: 'PackedByteArray', write_mode: 'WebSocketPeer_WriteMode' = default('''1''')) -> 'Error': ...
    def send_text(self, message: 'String') -> 'Error': ...
    def was_string_packet(self) -> bool: ...
    def poll(self) -> None: ...
    def close(self, code: int = default('''1000'''), reason: 'String' = default('''""''')) -> None: ...
    def get_connected_host(self) -> 'String': ...
    def get_connected_port(self) -> int: ...
    def get_selected_protocol(self) -> 'String': ...
    def get_requested_url(self) -> 'String': ...
    def set_no_delay(self, enabled: bool) -> None: ...
    def get_current_outbound_buffered_amount(self) -> int: ...
    def get_ready_state(self) -> 'WebSocketPeer_State': ...
    def get_close_code(self) -> int: ...
    def get_close_reason(self) -> 'String': ...
    def get_supported_protocols(self) -> 'PackedStringArray': ...
    def set_supported_protocols(self, protocols: 'PackedStringArray') -> None: ...
    def get_handshake_headers(self) -> 'PackedStringArray': ...
    def set_handshake_headers(self, protocols: 'PackedStringArray') -> None: ...
    def get_inbound_buffer_size(self) -> int: ...
    def set_inbound_buffer_size(self, buffer_size: int) -> None: ...
    def get_outbound_buffer_size(self) -> int: ...
    def set_outbound_buffer_size(self, buffer_size: int) -> None: ...
    def set_max_queued_packets(self, buffer_size: int) -> None: ...
    def get_max_queued_packets(self) -> int: ...
    def set_heartbeat_interval(self, interval: float) -> None: ...
    def get_heartbeat_interval(self) -> float: ...
    
class WebSocketPeer_WriteMode(Enum):
    WRITE_MODE_TEXT = 0
    WRITE_MODE_BINARY = 1

class WebSocketPeer_State(Enum):
    STATE_CONNECTING = 0
    STATE_OPEN = 1
    STATE_CLOSING = 2
    STATE_CLOSED = 3

class WebXRInterface(XRInterface):
    session_mode: 'String'
    required_features: 'String'
    optional_features: 'String'
    requested_reference_space_types: 'String'
    reference_space_type: 'String'
    enabled_features: 'String'
    visibility_state: 'String'
    session_supported: Signal[Callable[['String', 'bool'], None]]  # session_supported(session_mode: 'String', supported: bool)
    session_started: Signal[Callable[[], None]]  # session_started()
    session_ended: Signal[Callable[[], None]]  # session_ended()
    session_failed: Signal[Callable[['String'], None]]  # session_failed(message: 'String')
    selectstart: Signal[Callable[['int'], None]]  # selectstart(input_source_id: int)
    select: Signal[Callable[['int'], None]]  # select(input_source_id: int)
    selectend: Signal[Callable[['int'], None]]  # selectend(input_source_id: int)
    squeezestart: Signal[Callable[['int'], None]]  # squeezestart(input_source_id: int)
    squeeze: Signal[Callable[['int'], None]]  # squeeze(input_source_id: int)
    squeezeend: Signal[Callable[['int'], None]]  # squeezeend(input_source_id: int)
    visibility_state_changed: Signal[Callable[[], None]]  # visibility_state_changed()
    reference_space_reset: Signal[Callable[[], None]]  # reference_space_reset()
    display_refresh_rate_changed: Signal[Callable[[], None]]  # display_refresh_rate_changed()
    def is_session_supported(self, session_mode: 'String') -> None: ...
    def set_session_mode(self, session_mode: 'String') -> None: ...
    def get_session_mode(self) -> 'String': ...
    def set_required_features(self, required_features: 'String') -> None: ...
    def get_required_features(self) -> 'String': ...
    def set_optional_features(self, optional_features: 'String') -> None: ...
    def get_optional_features(self) -> 'String': ...
    def get_reference_space_type(self) -> 'String': ...
    def get_enabled_features(self) -> 'String': ...
    def set_requested_reference_space_types(self, requested_reference_space_types: 'String') -> None: ...
    def get_requested_reference_space_types(self) -> 'String': ...
    def is_input_source_active(self, input_source_id: int) -> bool: ...
    def get_input_source_tracker(self, input_source_id: int) -> 'XRControllerTracker': ...
    def get_input_source_target_ray_mode(self, input_source_id: int) -> 'WebXRInterface_TargetRayMode': ...
    def get_visibility_state(self) -> 'String': ...
    def get_display_refresh_rate(self) -> float: ...
    def set_display_refresh_rate(self, refresh_rate: float) -> None: ...
    def get_available_display_refresh_rates(self) -> 'Array': ...
    
class WebXRInterface_TargetRayMode(Enum):
    TARGET_RAY_MODE_UNKNOWN = 0
    TARGET_RAY_MODE_GAZE = 1
    TARGET_RAY_MODE_TRACKED_POINTER = 2
    TARGET_RAY_MODE_SCREEN = 3

class Window(Viewport):
    mode: int
    title: 'String'
    initial_position: int
    position: 'Vector2i'
    size: 'Vector2i'
    current_screen: int
    mouse_passthrough_polygon: 'PackedVector2Array'
    visible: bool
    wrap_controls: bool
    transient: bool
    transient_to_focused: bool
    exclusive: bool
    unresizable: bool
    borderless: bool
    always_on_top: bool
    transparent: bool
    unfocusable: bool
    popup_window: bool
    extend_to_title: bool
    mouse_passthrough: bool
    sharp_corners: bool
    exclude_from_capture: bool
    force_native: bool
    min_size: 'Vector2i'
    max_size: 'Vector2i'
    keep_title_visible: bool
    content_scale_size: 'Vector2i'
    content_scale_mode: int
    content_scale_aspect: int
    content_scale_stretch: int
    content_scale_factor: float
    auto_translate: bool
    theme: 'Theme'
    theme_type_variation: 'String'
    NOTIFICATION_VISIBILITY_CHANGED = 30
    NOTIFICATION_THEME_CHANGED = 32
    
    window_input: Signal[Callable[['InputEvent'], None]]  # window_input(event: 'InputEvent')
    files_dropped: Signal[Callable[['PackedStringArray'], None]]  # files_dropped(files: 'PackedStringArray')
    mouse_entered: Signal[Callable[[], None]]  # mouse_entered()
    mouse_exited: Signal[Callable[[], None]]  # mouse_exited()
    focus_entered: Signal[Callable[[], None]]  # focus_entered()
    focus_exited: Signal[Callable[[], None]]  # focus_exited()
    close_requested: Signal[Callable[[], None]]  # close_requested()
    go_back_requested: Signal[Callable[[], None]]  # go_back_requested()
    visibility_changed: Signal[Callable[[], None]]  # visibility_changed()
    about_to_popup: Signal[Callable[[], None]]  # about_to_popup()
    theme_changed: Signal[Callable[[], None]]  # theme_changed()
    dpi_changed: Signal[Callable[[], None]]  # dpi_changed()
    titlebar_changed: Signal[Callable[[], None]]  # titlebar_changed()
    title_changed: Signal[Callable[[], None]]  # title_changed()
    def _get_contents_minimum_size(self) -> 'Vector2': ...
    def set_title(self, title: 'String') -> None: ...
    def get_title(self) -> 'String': ...
    def get_window_id(self) -> int: ...
    def set_initial_position(self, initial_position: 'Window_WindowInitialPosition') -> None: ...
    def get_initial_position(self) -> 'Window_WindowInitialPosition': ...
    def set_current_screen(self, index: int) -> None: ...
    def get_current_screen(self) -> int: ...
    def set_position(self, position: 'Vector2i') -> None: ...
    def get_position(self) -> 'Vector2i': ...
    def move_to_center(self) -> None: ...
    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def reset_size(self) -> None: ...
    def get_position_with_decorations(self) -> 'Vector2i': ...
    def get_size_with_decorations(self) -> 'Vector2i': ...
    def set_max_size(self, max_size: 'Vector2i') -> None: ...
    def get_max_size(self) -> 'Vector2i': ...
    def set_min_size(self, min_size: 'Vector2i') -> None: ...
    def get_min_size(self) -> 'Vector2i': ...
    def set_mode(self, mode: 'Window_Mode') -> None: ...
    def get_mode(self) -> 'Window_Mode': ...
    def set_flag(self, flag: 'Window_Flags', enabled: bool) -> None: ...
    def get_flag(self, flag: 'Window_Flags') -> bool: ...
    def is_maximize_allowed(self) -> bool: ...
    def request_attention(self) -> None: ...
    def move_to_foreground(self) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def is_visible(self) -> bool: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def set_transient(self, transient: bool) -> None: ...
    def is_transient(self) -> bool: ...
    def set_transient_to_focused(self, enable: bool) -> None: ...
    def is_transient_to_focused(self) -> bool: ...
    def set_exclusive(self, exclusive: bool) -> None: ...
    def is_exclusive(self) -> bool: ...
    def set_unparent_when_invisible(self, unparent: bool) -> None: ...
    def can_draw(self) -> bool: ...
    def has_focus(self) -> bool: ...
    def grab_focus(self) -> None: ...
    def start_drag(self) -> None: ...
    def start_resize(self, edge: 'DisplayServer_WindowResizeEdge') -> None: ...
    def set_ime_active(self, active: bool) -> None: ...
    def set_ime_position(self, position: 'Vector2i') -> None: ...
    def is_embedded(self) -> bool: ...
    def get_contents_minimum_size(self) -> 'Vector2': ...
    def set_force_native(self, force_native: bool) -> None: ...
    def get_force_native(self) -> bool: ...
    def set_content_scale_size(self, size: 'Vector2i') -> None: ...
    def get_content_scale_size(self) -> 'Vector2i': ...
    def set_content_scale_mode(self, mode: 'Window_ContentScaleMode') -> None: ...
    def get_content_scale_mode(self) -> 'Window_ContentScaleMode': ...
    def set_content_scale_aspect(self, aspect: 'Window_ContentScaleAspect') -> None: ...
    def get_content_scale_aspect(self) -> 'Window_ContentScaleAspect': ...
    def set_content_scale_stretch(self, stretch: 'Window_ContentScaleStretch') -> None: ...
    def get_content_scale_stretch(self) -> 'Window_ContentScaleStretch': ...
    def set_keep_title_visible(self, title_visible: bool) -> None: ...
    def get_keep_title_visible(self) -> bool: ...
    def set_content_scale_factor(self, factor: float) -> None: ...
    def get_content_scale_factor(self) -> float: ...
    def set_use_font_oversampling(self, enable: bool) -> None: ...
    def is_using_font_oversampling(self) -> bool: ...
    def set_mouse_passthrough_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_mouse_passthrough_polygon(self) -> 'PackedVector2Array': ...
    def set_wrap_controls(self, enable: bool) -> None: ...
    def is_wrapping_controls(self) -> bool: ...
    def child_controls_changed(self) -> None: ...
    def set_theme(self, theme: 'Theme') -> None: ...
    def get_theme(self) -> 'Theme': ...
    def set_theme_type_variation(self, theme_type: 'StringName') -> None: ...
    def get_theme_type_variation(self) -> 'StringName': ...
    def begin_bulk_theme_override(self) -> None: ...
    def end_bulk_theme_override(self) -> None: ...
    def add_theme_icon_override(self, name: 'StringName', texture: 'Texture2D') -> None: ...
    def add_theme_stylebox_override(self, name: 'StringName', stylebox: 'StyleBox') -> None: ...
    def add_theme_font_override(self, name: 'StringName', font: 'Font') -> None: ...
    def add_theme_font_size_override(self, name: 'StringName', font_size: int) -> None: ...
    def add_theme_color_override(self, name: 'StringName', color: 'Color') -> None: ...
    def add_theme_constant_override(self, name: 'StringName', constant: int) -> None: ...
    def remove_theme_icon_override(self, name: 'StringName') -> None: ...
    def remove_theme_stylebox_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_size_override(self, name: 'StringName') -> None: ...
    def remove_theme_color_override(self, name: 'StringName') -> None: ...
    def remove_theme_constant_override(self, name: 'StringName') -> None: ...
    def get_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Texture2D': ...
    def get_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'StyleBox': ...
    def get_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Font': ...
    def get_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> int: ...
    def get_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Color': ...
    def get_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> int: ...
    def has_theme_icon_override(self, name: 'StringName') -> bool: ...
    def has_theme_stylebox_override(self, name: 'StringName') -> bool: ...
    def has_theme_font_override(self, name: 'StringName') -> bool: ...
    def has_theme_font_size_override(self, name: 'StringName') -> bool: ...
    def has_theme_color_override(self, name: 'StringName') -> bool: ...
    def has_theme_constant_override(self, name: 'StringName') -> bool: ...
    def has_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def has_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> bool: ...
    def get_theme_default_base_scale(self) -> float: ...
    def get_theme_default_font(self) -> 'Font': ...
    def get_theme_default_font_size(self) -> int: ...
    def set_layout_direction(self, direction: 'Window_LayoutDirection') -> None: ...
    def get_layout_direction(self) -> 'Window_LayoutDirection': ...
    def is_layout_rtl(self) -> bool: ...
    def set_auto_translate(self, enable: bool) -> None: ...
    def is_auto_translating(self) -> bool: ...
    def popup(self, rect: 'Rect2i' = default('''Rect2i(0, 0, 0, 0)''')) -> None: ...
    def popup_on_parent(self, parent_rect: 'Rect2i') -> None: ...
    def popup_centered(self, minsize: 'Vector2i' = default('''Vector2i(0, 0)''')) -> None: ...
    def popup_centered_ratio(self, ratio: float = default('''0.8''')) -> None: ...
    def popup_centered_clamped(self, minsize: 'Vector2i' = default('''Vector2i(0, 0)'''), fallback_ratio: float = default('''0.75''')) -> None: ...
    def popup_exclusive(self, from_node: 'Node', rect: 'Rect2i' = default('''Rect2i(0, 0, 0, 0)''')) -> None: ...
    def popup_exclusive_on_parent(self, from_node: 'Node', parent_rect: 'Rect2i') -> None: ...
    def popup_exclusive_centered(self, from_node: 'Node', minsize: 'Vector2i' = default('''Vector2i(0, 0)''')) -> None: ...
    def popup_exclusive_centered_ratio(self, from_node: 'Node', ratio: float = default('''0.8''')) -> None: ...
    def popup_exclusive_centered_clamped(self, from_node: 'Node', minsize: 'Vector2i' = default('''Vector2i(0, 0)'''), fallback_ratio: float = default('''0.75''')) -> None: ...
    
class Window_Mode(Enum):
    MODE_WINDOWED = 0
    MODE_MINIMIZED = 1
    MODE_MAXIMIZED = 2
    MODE_FULLSCREEN = 3
    MODE_EXCLUSIVE_FULLSCREEN = 4

class Window_Flags(Enum):
    FLAG_RESIZE_DISABLED = 0
    FLAG_BORDERLESS = 1
    FLAG_ALWAYS_ON_TOP = 2
    FLAG_TRANSPARENT = 3
    FLAG_NO_FOCUS = 4
    FLAG_POPUP = 5
    FLAG_EXTEND_TO_TITLE = 6
    FLAG_MOUSE_PASSTHROUGH = 7
    FLAG_SHARP_CORNERS = 8
    FLAG_EXCLUDE_FROM_CAPTURE = 9
    FLAG_MAX = 10

class Window_ContentScaleMode(Enum):
    CONTENT_SCALE_MODE_DISABLED = 0
    CONTENT_SCALE_MODE_CANVAS_ITEMS = 1
    CONTENT_SCALE_MODE_VIEWPORT = 2

class Window_ContentScaleAspect(Enum):
    CONTENT_SCALE_ASPECT_IGNORE = 0
    CONTENT_SCALE_ASPECT_KEEP = 1
    CONTENT_SCALE_ASPECT_KEEP_WIDTH = 2
    CONTENT_SCALE_ASPECT_KEEP_HEIGHT = 3
    CONTENT_SCALE_ASPECT_EXPAND = 4

class Window_ContentScaleStretch(Enum):
    CONTENT_SCALE_STRETCH_FRACTIONAL = 0
    CONTENT_SCALE_STRETCH_INTEGER = 1

class Window_LayoutDirection(Enum):
    LAYOUT_DIRECTION_INHERITED = 0
    LAYOUT_DIRECTION_APPLICATION_LOCALE = 1
    LAYOUT_DIRECTION_LTR = 2
    LAYOUT_DIRECTION_RTL = 3
    LAYOUT_DIRECTION_SYSTEM_LOCALE = 4
    LAYOUT_DIRECTION_MAX = 5
    LAYOUT_DIRECTION_LOCALE = 1

class Window_WindowInitialPosition(Enum):
    WINDOW_INITIAL_POSITION_ABSOLUTE = 0
    WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN = 1
    WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN = 2
    WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN = 3
    WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS = 4
    WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS = 5

class WorkerThreadPool(Object):
    def add_task(self, action: 'Callable', high_priority: bool = default('''false'''), description: 'String' = default('''""''')) -> int: ...
    def is_task_completed(self, task_id: int) -> bool: ...
    def wait_for_task_completion(self, task_id: int) -> 'Error': ...
    def add_group_task(self, action: 'Callable', elements: int, tasks_needed: int = default('''-1'''), high_priority: bool = default('''false'''), description: 'String' = default('''""''')) -> int: ...
    def is_group_task_completed(self, group_id: int) -> bool: ...
    def get_group_processed_element_count(self, group_id: int) -> int: ...
    def wait_for_group_task_completion(self, group_id: int) -> None: ...
    
class World2D(Resource):
    canvas: 'RID'
    space: 'RID'
    navigation_map: 'RID'
    direct_space_state: 'PhysicsDirectSpaceState2D'
    def get_canvas(self) -> 'RID': ...
    def get_space(self) -> 'RID': ...
    def get_navigation_map(self) -> 'RID': ...
    def get_direct_space_state(self) -> 'PhysicsDirectSpaceState2D': ...
    
class World3D(Resource):
    environment: 'Environment'
    fallback_environment: 'Environment'
    camera_attributes: 'CameraAttributesPractical'
    space: 'RID'
    navigation_map: 'RID'
    scenario: 'RID'
    direct_space_state: 'PhysicsDirectSpaceState3D'
    def get_space(self) -> 'RID': ...
    def get_navigation_map(self) -> 'RID': ...
    def get_scenario(self) -> 'RID': ...
    def set_environment(self, env: 'Environment') -> None: ...
    def get_environment(self) -> 'Environment': ...
    def set_fallback_environment(self, env: 'Environment') -> None: ...
    def get_fallback_environment(self) -> 'Environment': ...
    def set_camera_attributes(self, attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    def get_direct_space_state(self) -> 'PhysicsDirectSpaceState3D': ...
    
class WorldBoundaryShape2D(Shape2D):
    normal: 'Vector2'
    distance: float
    def set_normal(self, normal: 'Vector2') -> None: ...
    def get_normal(self) -> 'Vector2': ...
    def set_distance(self, distance: float) -> None: ...
    def get_distance(self) -> float: ...
    
class WorldBoundaryShape3D(Shape3D):
    plane: 'Plane'
    def set_plane(self, plane: 'Plane') -> None: ...
    def get_plane(self) -> 'Plane': ...
    
class WorldEnvironment(Node):
    environment: 'Environment'
    camera_attributes: 'CameraAttributesPractical'
    compositor: 'Compositor'
    def set_environment(self, env: 'Environment') -> None: ...
    def get_environment(self) -> 'Environment': ...
    def set_camera_attributes(self, camera_attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    def set_compositor(self, compositor: 'Compositor') -> None: ...
    def get_compositor(self) -> 'Compositor': ...
    
class X509Certificate(Resource):
    def save(self, path: 'String') -> 'Error': ...
    def load(self, path: 'String') -> 'Error': ...
    def save_to_string(self) -> 'String': ...
    def load_from_string(self, string: 'String') -> 'Error': ...
    
class XMLParser(RefCounted):
    def read(self) -> 'Error': ...
    def get_node_type(self) -> 'XMLParser_NodeType': ...
    def get_node_name(self) -> 'String': ...
    def get_node_data(self) -> 'String': ...
    def get_node_offset(self) -> int: ...
    def get_attribute_count(self) -> int: ...
    def get_attribute_name(self, idx: int) -> 'String': ...
    def get_attribute_value(self, idx: int) -> 'String': ...
    def has_attribute(self, name: 'String') -> bool: ...
    def get_named_attribute_value(self, name: 'String') -> 'String': ...
    def get_named_attribute_value_safe(self, name: 'String') -> 'String': ...
    def is_empty(self) -> bool: ...
    def get_current_line(self) -> int: ...
    def skip_section(self) -> None: ...
    def seek(self, position: int) -> 'Error': ...
    def open(self, file: 'String') -> 'Error': ...
    def open_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    
class XMLParser_NodeType(Enum):
    NODE_NONE = 0
    NODE_ELEMENT = 1
    NODE_ELEMENT_END = 2
    NODE_TEXT = 3
    NODE_COMMENT = 4
    NODE_CDATA = 5
    NODE_UNKNOWN = 6

class XRAnchor3D(XRNode3D):
    def get_size(self) -> 'Vector3': ...
    def get_plane(self) -> 'Plane': ...
    
class XRBodyModifier3D(SkeletonModifier3D):
    body_tracker: 'String'
    body_update: int
    bone_update: int
    def set_body_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_body_tracker(self) -> 'StringName': ...
    def set_body_update(self, body_update: 'XRBodyModifier3D_BodyUpdate') -> None: ...
    def get_body_update(self) -> 'XRBodyModifier3D_BodyUpdate': ...
    def set_bone_update(self, bone_update: 'XRBodyModifier3D_BoneUpdate') -> None: ...
    def get_bone_update(self) -> 'XRBodyModifier3D_BoneUpdate': ...
    
class XRBodyModifier3D_BodyUpdate(Enum):
    BODY_UPDATE_UPPER_BODY = 1
    BODY_UPDATE_LOWER_BODY = 2
    BODY_UPDATE_HANDS = 4

class XRBodyModifier3D_BoneUpdate(Enum):
    BONE_UPDATE_FULL = 0
    BONE_UPDATE_ROTATION_ONLY = 1
    BONE_UPDATE_MAX = 2

class XRBodyTracker(XRPositionalTracker):
    has_tracking_data: bool
    body_flags: int
    def set_has_tracking_data(self, has_data: bool) -> None: ...
    def get_has_tracking_data(self) -> bool: ...
    def set_body_flags(self, flags: 'XRBodyTracker_BodyFlags') -> None: ...
    def get_body_flags(self) -> 'XRBodyTracker_BodyFlags': ...
    def set_joint_flags(self, joint: 'XRBodyTracker_Joint', flags: 'XRBodyTracker_JointFlags') -> None: ...
    def get_joint_flags(self, joint: 'XRBodyTracker_Joint') -> 'XRBodyTracker_JointFlags': ...
    def set_joint_transform(self, joint: 'XRBodyTracker_Joint', transform: 'Transform3D') -> None: ...
    def get_joint_transform(self, joint: 'XRBodyTracker_Joint') -> 'Transform3D': ...
    
class XRBodyTracker_BodyFlags(Enum):
    BODY_FLAG_UPPER_BODY_SUPPORTED = 1
    BODY_FLAG_LOWER_BODY_SUPPORTED = 2
    BODY_FLAG_HANDS_SUPPORTED = 4

class XRBodyTracker_Joint(Enum):
    JOINT_ROOT = 0
    JOINT_HIPS = 1
    JOINT_SPINE = 2
    JOINT_CHEST = 3
    JOINT_UPPER_CHEST = 4
    JOINT_NECK = 5
    JOINT_HEAD = 6
    JOINT_HEAD_TIP = 7
    JOINT_LEFT_SHOULDER = 8
    JOINT_LEFT_UPPER_ARM = 9
    JOINT_LEFT_LOWER_ARM = 10
    JOINT_RIGHT_SHOULDER = 11
    JOINT_RIGHT_UPPER_ARM = 12
    JOINT_RIGHT_LOWER_ARM = 13
    JOINT_LEFT_UPPER_LEG = 14
    JOINT_LEFT_LOWER_LEG = 15
    JOINT_LEFT_FOOT = 16
    JOINT_LEFT_TOES = 17
    JOINT_RIGHT_UPPER_LEG = 18
    JOINT_RIGHT_LOWER_LEG = 19
    JOINT_RIGHT_FOOT = 20
    JOINT_RIGHT_TOES = 21
    JOINT_LEFT_HAND = 22
    JOINT_LEFT_PALM = 23
    JOINT_LEFT_WRIST = 24
    JOINT_LEFT_THUMB_METACARPAL = 25
    JOINT_LEFT_THUMB_PHALANX_PROXIMAL = 26
    JOINT_LEFT_THUMB_PHALANX_DISTAL = 27
    JOINT_LEFT_THUMB_TIP = 28
    JOINT_LEFT_INDEX_FINGER_METACARPAL = 29
    JOINT_LEFT_INDEX_FINGER_PHALANX_PROXIMAL = 30
    JOINT_LEFT_INDEX_FINGER_PHALANX_INTERMEDIATE = 31
    JOINT_LEFT_INDEX_FINGER_PHALANX_DISTAL = 32
    JOINT_LEFT_INDEX_FINGER_TIP = 33
    JOINT_LEFT_MIDDLE_FINGER_METACARPAL = 34
    JOINT_LEFT_MIDDLE_FINGER_PHALANX_PROXIMAL = 35
    JOINT_LEFT_MIDDLE_FINGER_PHALANX_INTERMEDIATE = 36
    JOINT_LEFT_MIDDLE_FINGER_PHALANX_DISTAL = 37
    JOINT_LEFT_MIDDLE_FINGER_TIP = 38
    JOINT_LEFT_RING_FINGER_METACARPAL = 39
    JOINT_LEFT_RING_FINGER_PHALANX_PROXIMAL = 40
    JOINT_LEFT_RING_FINGER_PHALANX_INTERMEDIATE = 41
    JOINT_LEFT_RING_FINGER_PHALANX_DISTAL = 42
    JOINT_LEFT_RING_FINGER_TIP = 43
    JOINT_LEFT_PINKY_FINGER_METACARPAL = 44
    JOINT_LEFT_PINKY_FINGER_PHALANX_PROXIMAL = 45
    JOINT_LEFT_PINKY_FINGER_PHALANX_INTERMEDIATE = 46
    JOINT_LEFT_PINKY_FINGER_PHALANX_DISTAL = 47
    JOINT_LEFT_PINKY_FINGER_TIP = 48
    JOINT_RIGHT_HAND = 49
    JOINT_RIGHT_PALM = 50
    JOINT_RIGHT_WRIST = 51
    JOINT_RIGHT_THUMB_METACARPAL = 52
    JOINT_RIGHT_THUMB_PHALANX_PROXIMAL = 53
    JOINT_RIGHT_THUMB_PHALANX_DISTAL = 54
    JOINT_RIGHT_THUMB_TIP = 55
    JOINT_RIGHT_INDEX_FINGER_METACARPAL = 56
    JOINT_RIGHT_INDEX_FINGER_PHALANX_PROXIMAL = 57
    JOINT_RIGHT_INDEX_FINGER_PHALANX_INTERMEDIATE = 58
    JOINT_RIGHT_INDEX_FINGER_PHALANX_DISTAL = 59
    JOINT_RIGHT_INDEX_FINGER_TIP = 60
    JOINT_RIGHT_MIDDLE_FINGER_METACARPAL = 61
    JOINT_RIGHT_MIDDLE_FINGER_PHALANX_PROXIMAL = 62
    JOINT_RIGHT_MIDDLE_FINGER_PHALANX_INTERMEDIATE = 63
    JOINT_RIGHT_MIDDLE_FINGER_PHALANX_DISTAL = 64
    JOINT_RIGHT_MIDDLE_FINGER_TIP = 65
    JOINT_RIGHT_RING_FINGER_METACARPAL = 66
    JOINT_RIGHT_RING_FINGER_PHALANX_PROXIMAL = 67
    JOINT_RIGHT_RING_FINGER_PHALANX_INTERMEDIATE = 68
    JOINT_RIGHT_RING_FINGER_PHALANX_DISTAL = 69
    JOINT_RIGHT_RING_FINGER_TIP = 70
    JOINT_RIGHT_PINKY_FINGER_METACARPAL = 71
    JOINT_RIGHT_PINKY_FINGER_PHALANX_PROXIMAL = 72
    JOINT_RIGHT_PINKY_FINGER_PHALANX_INTERMEDIATE = 73
    JOINT_RIGHT_PINKY_FINGER_PHALANX_DISTAL = 74
    JOINT_RIGHT_PINKY_FINGER_TIP = 75
    JOINT_MAX = 76

class XRBodyTracker_JointFlags(Enum):
    JOINT_FLAG_ORIENTATION_VALID = 1
    JOINT_FLAG_ORIENTATION_TRACKED = 2
    JOINT_FLAG_POSITION_VALID = 4
    JOINT_FLAG_POSITION_TRACKED = 8

class XRCamera3D(Camera3D):
    pass
    
class XRController3D(XRNode3D):
    button_pressed: Signal[Callable[['String'], None]]  # button_pressed(name: 'String')
    button_released: Signal[Callable[['String'], None]]  # button_released(name: 'String')
    input_float_changed: Signal[Callable[['String', 'float'], None]]  # input_float_changed(name: 'String', value: float)
    input_vector2_changed: Signal[Callable[['String', 'Vector2'], None]]  # input_vector2_changed(name: 'String', value: 'Vector2')
    profile_changed: Signal[Callable[['String'], None]]  # profile_changed(role: 'String')
    def is_button_pressed(self, name: 'StringName') -> bool: ...
    def get_input(self, name: 'StringName') -> 'Variant': ...
    def get_float(self, name: 'StringName') -> float: ...
    def get_vector2(self, name: 'StringName') -> 'Vector2': ...
    def get_tracker_hand(self) -> 'XRPositionalTracker_TrackerHand': ...
    
class XRControllerTracker(XRPositionalTracker):
    pass
    
class XRFaceModifier3D(Node3D):
    face_tracker: 'String'
    target: 'NodePath'
    def set_face_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_face_tracker(self) -> 'StringName': ...
    def set_target(self, target: 'NodePath') -> None: ...
    def get_target(self) -> 'NodePath': ...
    
class XRFaceTracker(XRTracker):
    blend_shapes: 'PackedFloat32Array'
    def get_blend_shape(self, blend_shape: 'XRFaceTracker_BlendShapeEntry') -> float: ...
    def set_blend_shape(self, blend_shape: 'XRFaceTracker_BlendShapeEntry', weight: float) -> None: ...
    def get_blend_shapes(self) -> 'PackedFloat32Array': ...
    def set_blend_shapes(self, weights: 'PackedFloat32Array') -> None: ...
    
class XRFaceTracker_BlendShapeEntry(Enum):
    FT_EYE_LOOK_OUT_RIGHT = 0
    FT_EYE_LOOK_IN_RIGHT = 1
    FT_EYE_LOOK_UP_RIGHT = 2
    FT_EYE_LOOK_DOWN_RIGHT = 3
    FT_EYE_LOOK_OUT_LEFT = 4
    FT_EYE_LOOK_IN_LEFT = 5
    FT_EYE_LOOK_UP_LEFT = 6
    FT_EYE_LOOK_DOWN_LEFT = 7
    FT_EYE_CLOSED_RIGHT = 8
    FT_EYE_CLOSED_LEFT = 9
    FT_EYE_SQUINT_RIGHT = 10
    FT_EYE_SQUINT_LEFT = 11
    FT_EYE_WIDE_RIGHT = 12
    FT_EYE_WIDE_LEFT = 13
    FT_EYE_DILATION_RIGHT = 14
    FT_EYE_DILATION_LEFT = 15
    FT_EYE_CONSTRICT_RIGHT = 16
    FT_EYE_CONSTRICT_LEFT = 17
    FT_BROW_PINCH_RIGHT = 18
    FT_BROW_PINCH_LEFT = 19
    FT_BROW_LOWERER_RIGHT = 20
    FT_BROW_LOWERER_LEFT = 21
    FT_BROW_INNER_UP_RIGHT = 22
    FT_BROW_INNER_UP_LEFT = 23
    FT_BROW_OUTER_UP_RIGHT = 24
    FT_BROW_OUTER_UP_LEFT = 25
    FT_NOSE_SNEER_RIGHT = 26
    FT_NOSE_SNEER_LEFT = 27
    FT_NASAL_DILATION_RIGHT = 28
    FT_NASAL_DILATION_LEFT = 29
    FT_NASAL_CONSTRICT_RIGHT = 30
    FT_NASAL_CONSTRICT_LEFT = 31
    FT_CHEEK_SQUINT_RIGHT = 32
    FT_CHEEK_SQUINT_LEFT = 33
    FT_CHEEK_PUFF_RIGHT = 34
    FT_CHEEK_PUFF_LEFT = 35
    FT_CHEEK_SUCK_RIGHT = 36
    FT_CHEEK_SUCK_LEFT = 37
    FT_JAW_OPEN = 38
    FT_MOUTH_CLOSED = 39
    FT_JAW_RIGHT = 40
    FT_JAW_LEFT = 41
    FT_JAW_FORWARD = 42
    FT_JAW_BACKWARD = 43
    FT_JAW_CLENCH = 44
    FT_JAW_MANDIBLE_RAISE = 45
    FT_LIP_SUCK_UPPER_RIGHT = 46
    FT_LIP_SUCK_UPPER_LEFT = 47
    FT_LIP_SUCK_LOWER_RIGHT = 48
    FT_LIP_SUCK_LOWER_LEFT = 49
    FT_LIP_SUCK_CORNER_RIGHT = 50
    FT_LIP_SUCK_CORNER_LEFT = 51
    FT_LIP_FUNNEL_UPPER_RIGHT = 52
    FT_LIP_FUNNEL_UPPER_LEFT = 53
    FT_LIP_FUNNEL_LOWER_RIGHT = 54
    FT_LIP_FUNNEL_LOWER_LEFT = 55
    FT_LIP_PUCKER_UPPER_RIGHT = 56
    FT_LIP_PUCKER_UPPER_LEFT = 57
    FT_LIP_PUCKER_LOWER_RIGHT = 58
    FT_LIP_PUCKER_LOWER_LEFT = 59
    FT_MOUTH_UPPER_UP_RIGHT = 60
    FT_MOUTH_UPPER_UP_LEFT = 61
    FT_MOUTH_LOWER_DOWN_RIGHT = 62
    FT_MOUTH_LOWER_DOWN_LEFT = 63
    FT_MOUTH_UPPER_DEEPEN_RIGHT = 64
    FT_MOUTH_UPPER_DEEPEN_LEFT = 65
    FT_MOUTH_UPPER_RIGHT = 66
    FT_MOUTH_UPPER_LEFT = 67
    FT_MOUTH_LOWER_RIGHT = 68
    FT_MOUTH_LOWER_LEFT = 69
    FT_MOUTH_CORNER_PULL_RIGHT = 70
    FT_MOUTH_CORNER_PULL_LEFT = 71
    FT_MOUTH_CORNER_SLANT_RIGHT = 72
    FT_MOUTH_CORNER_SLANT_LEFT = 73
    FT_MOUTH_FROWN_RIGHT = 74
    FT_MOUTH_FROWN_LEFT = 75
    FT_MOUTH_STRETCH_RIGHT = 76
    FT_MOUTH_STRETCH_LEFT = 77
    FT_MOUTH_DIMPLE_RIGHT = 78
    FT_MOUTH_DIMPLE_LEFT = 79
    FT_MOUTH_RAISER_UPPER = 80
    FT_MOUTH_RAISER_LOWER = 81
    FT_MOUTH_PRESS_RIGHT = 82
    FT_MOUTH_PRESS_LEFT = 83
    FT_MOUTH_TIGHTENER_RIGHT = 84
    FT_MOUTH_TIGHTENER_LEFT = 85
    FT_TONGUE_OUT = 86
    FT_TONGUE_UP = 87
    FT_TONGUE_DOWN = 88
    FT_TONGUE_RIGHT = 89
    FT_TONGUE_LEFT = 90
    FT_TONGUE_ROLL = 91
    FT_TONGUE_BLEND_DOWN = 92
    FT_TONGUE_CURL_UP = 93
    FT_TONGUE_SQUISH = 94
    FT_TONGUE_FLAT = 95
    FT_TONGUE_TWIST_RIGHT = 96
    FT_TONGUE_TWIST_LEFT = 97
    FT_SOFT_PALATE_CLOSE = 98
    FT_THROAT_SWALLOW = 99
    FT_NECK_FLEX_RIGHT = 100
    FT_NECK_FLEX_LEFT = 101
    FT_EYE_CLOSED = 102
    FT_EYE_WIDE = 103
    FT_EYE_SQUINT = 104
    FT_EYE_DILATION = 105
    FT_EYE_CONSTRICT = 106
    FT_BROW_DOWN_RIGHT = 107
    FT_BROW_DOWN_LEFT = 108
    FT_BROW_DOWN = 109
    FT_BROW_UP_RIGHT = 110
    FT_BROW_UP_LEFT = 111
    FT_BROW_UP = 112
    FT_NOSE_SNEER = 113
    FT_NASAL_DILATION = 114
    FT_NASAL_CONSTRICT = 115
    FT_CHEEK_PUFF = 116
    FT_CHEEK_SUCK = 117
    FT_CHEEK_SQUINT = 118
    FT_LIP_SUCK_UPPER = 119
    FT_LIP_SUCK_LOWER = 120
    FT_LIP_SUCK = 121
    FT_LIP_FUNNEL_UPPER = 122
    FT_LIP_FUNNEL_LOWER = 123
    FT_LIP_FUNNEL = 124
    FT_LIP_PUCKER_UPPER = 125
    FT_LIP_PUCKER_LOWER = 126
    FT_LIP_PUCKER = 127
    FT_MOUTH_UPPER_UP = 128
    FT_MOUTH_LOWER_DOWN = 129
    FT_MOUTH_OPEN = 130
    FT_MOUTH_RIGHT = 131
    FT_MOUTH_LEFT = 132
    FT_MOUTH_SMILE_RIGHT = 133
    FT_MOUTH_SMILE_LEFT = 134
    FT_MOUTH_SMILE = 135
    FT_MOUTH_SAD_RIGHT = 136
    FT_MOUTH_SAD_LEFT = 137
    FT_MOUTH_SAD = 138
    FT_MOUTH_STRETCH = 139
    FT_MOUTH_DIMPLE = 140
    FT_MOUTH_TIGHTENER = 141
    FT_MOUTH_PRESS = 142
    FT_MAX = 143

class XRHandModifier3D(SkeletonModifier3D):
    hand_tracker: 'String'
    bone_update: int
    def set_hand_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_hand_tracker(self) -> 'StringName': ...
    def set_bone_update(self, bone_update: 'XRHandModifier3D_BoneUpdate') -> None: ...
    def get_bone_update(self) -> 'XRHandModifier3D_BoneUpdate': ...
    
class XRHandModifier3D_BoneUpdate(Enum):
    BONE_UPDATE_FULL = 0
    BONE_UPDATE_ROTATION_ONLY = 1
    BONE_UPDATE_MAX = 2

class XRHandTracker(XRPositionalTracker):
    has_tracking_data: bool
    hand_tracking_source: int
    def set_has_tracking_data(self, has_data: bool) -> None: ...
    def get_has_tracking_data(self) -> bool: ...
    def set_hand_tracking_source(self, source: 'XRHandTracker_HandTrackingSource') -> None: ...
    def get_hand_tracking_source(self) -> 'XRHandTracker_HandTrackingSource': ...
    def set_hand_joint_flags(self, joint: 'XRHandTracker_HandJoint', flags: 'XRHandTracker_HandJointFlags') -> None: ...
    def get_hand_joint_flags(self, joint: 'XRHandTracker_HandJoint') -> 'XRHandTracker_HandJointFlags': ...
    def set_hand_joint_transform(self, joint: 'XRHandTracker_HandJoint', transform: 'Transform3D') -> None: ...
    def get_hand_joint_transform(self, joint: 'XRHandTracker_HandJoint') -> 'Transform3D': ...
    def set_hand_joint_radius(self, joint: 'XRHandTracker_HandJoint', radius: float) -> None: ...
    def get_hand_joint_radius(self, joint: 'XRHandTracker_HandJoint') -> float: ...
    def set_hand_joint_linear_velocity(self, joint: 'XRHandTracker_HandJoint', linear_velocity: 'Vector3') -> None: ...
    def get_hand_joint_linear_velocity(self, joint: 'XRHandTracker_HandJoint') -> 'Vector3': ...
    def set_hand_joint_angular_velocity(self, joint: 'XRHandTracker_HandJoint', angular_velocity: 'Vector3') -> None: ...
    def get_hand_joint_angular_velocity(self, joint: 'XRHandTracker_HandJoint') -> 'Vector3': ...
    
class XRHandTracker_HandTrackingSource(Enum):
    HAND_TRACKING_SOURCE_UNKNOWN = 0
    HAND_TRACKING_SOURCE_UNOBSTRUCTED = 1
    HAND_TRACKING_SOURCE_CONTROLLER = 2
    HAND_TRACKING_SOURCE_NOT_TRACKED = 3
    HAND_TRACKING_SOURCE_MAX = 4

class XRHandTracker_HandJoint(Enum):
    HAND_JOINT_PALM = 0
    HAND_JOINT_WRIST = 1
    HAND_JOINT_THUMB_METACARPAL = 2
    HAND_JOINT_THUMB_PHALANX_PROXIMAL = 3
    HAND_JOINT_THUMB_PHALANX_DISTAL = 4
    HAND_JOINT_THUMB_TIP = 5
    HAND_JOINT_INDEX_FINGER_METACARPAL = 6
    HAND_JOINT_INDEX_FINGER_PHALANX_PROXIMAL = 7
    HAND_JOINT_INDEX_FINGER_PHALANX_INTERMEDIATE = 8
    HAND_JOINT_INDEX_FINGER_PHALANX_DISTAL = 9
    HAND_JOINT_INDEX_FINGER_TIP = 10
    HAND_JOINT_MIDDLE_FINGER_METACARPAL = 11
    HAND_JOINT_MIDDLE_FINGER_PHALANX_PROXIMAL = 12
    HAND_JOINT_MIDDLE_FINGER_PHALANX_INTERMEDIATE = 13
    HAND_JOINT_MIDDLE_FINGER_PHALANX_DISTAL = 14
    HAND_JOINT_MIDDLE_FINGER_TIP = 15
    HAND_JOINT_RING_FINGER_METACARPAL = 16
    HAND_JOINT_RING_FINGER_PHALANX_PROXIMAL = 17
    HAND_JOINT_RING_FINGER_PHALANX_INTERMEDIATE = 18
    HAND_JOINT_RING_FINGER_PHALANX_DISTAL = 19
    HAND_JOINT_RING_FINGER_TIP = 20
    HAND_JOINT_PINKY_FINGER_METACARPAL = 21
    HAND_JOINT_PINKY_FINGER_PHALANX_PROXIMAL = 22
    HAND_JOINT_PINKY_FINGER_PHALANX_INTERMEDIATE = 23
    HAND_JOINT_PINKY_FINGER_PHALANX_DISTAL = 24
    HAND_JOINT_PINKY_FINGER_TIP = 25
    HAND_JOINT_MAX = 26

class XRHandTracker_HandJointFlags(Enum):
    HAND_JOINT_FLAG_ORIENTATION_VALID = 1
    HAND_JOINT_FLAG_ORIENTATION_TRACKED = 2
    HAND_JOINT_FLAG_POSITION_VALID = 4
    HAND_JOINT_FLAG_POSITION_TRACKED = 8
    HAND_JOINT_FLAG_LINEAR_VELOCITY_VALID = 16
    HAND_JOINT_FLAG_ANGULAR_VELOCITY_VALID = 32

class XRInterface(RefCounted):
    interface_is_primary: bool
    xr_play_area_mode: int
    environment_blend_mode: int
    ar_is_anchor_detection_enabled: bool
    play_area_changed: Signal[Callable[['int'], None]]  # play_area_changed(mode: int)
    def get_name(self) -> 'StringName': ...
    def get_capabilities(self) -> int: ...
    def is_primary(self) -> bool: ...
    def set_primary(self, primary: bool) -> None: ...
    def is_initialized(self) -> bool: ...
    def initialize(self) -> bool: ...
    def uninitialize(self) -> None: ...
    def get_system_info(self) -> 'Dictionary': ...
    def get_tracking_status(self) -> 'XRInterface_TrackingStatus': ...
    def get_render_target_size(self) -> 'Vector2': ...
    def get_view_count(self) -> int: ...
    def trigger_haptic_pulse(self, action_name: 'String', tracker_name: 'StringName', frequency: float, amplitude: float, duration_sec: float, delay_sec: float) -> None: ...
    def supports_play_area_mode(self, mode: 'XRInterface_PlayAreaMode') -> bool: ...
    def get_play_area_mode(self) -> 'XRInterface_PlayAreaMode': ...
    def set_play_area_mode(self, mode: 'XRInterface_PlayAreaMode') -> bool: ...
    def get_play_area(self) -> 'PackedVector3Array': ...
    def get_anchor_detection_is_enabled(self) -> bool: ...
    def set_anchor_detection_is_enabled(self, enable: bool) -> None: ...
    def get_camera_feed_id(self) -> int: ...
    def is_passthrough_supported(self) -> bool: ...
    def is_passthrough_enabled(self) -> bool: ...
    def start_passthrough(self) -> bool: ...
    def stop_passthrough(self) -> None: ...
    def get_transform_for_view(self, view: int, cam_transform: 'Transform3D') -> 'Transform3D': ...
    def get_projection_for_view(self, view: int, aspect: float, near: float, far: float) -> 'Projection': ...
    def get_supported_environment_blend_modes(self) -> 'Array': ...
    def set_environment_blend_mode(self, mode: 'XRInterface_EnvironmentBlendMode') -> bool: ...
    def get_environment_blend_mode(self) -> 'XRInterface_EnvironmentBlendMode': ...
    
class XRInterface_Capabilities(Enum):
    XR_NONE = 0
    XR_MONO = 1
    XR_STEREO = 2
    XR_QUAD = 4
    XR_VR = 8
    XR_AR = 16
    XR_EXTERNAL = 32

class XRInterface_TrackingStatus(Enum):
    XR_NORMAL_TRACKING = 0
    XR_EXCESSIVE_MOTION = 1
    XR_INSUFFICIENT_FEATURES = 2
    XR_UNKNOWN_TRACKING = 3
    XR_NOT_TRACKING = 4

class XRInterface_PlayAreaMode(Enum):
    XR_PLAY_AREA_UNKNOWN = 0
    XR_PLAY_AREA_3DOF = 1
    XR_PLAY_AREA_SITTING = 2
    XR_PLAY_AREA_ROOMSCALE = 3
    XR_PLAY_AREA_STAGE = 4

class XRInterface_EnvironmentBlendMode(Enum):
    XR_ENV_BLEND_MODE_OPAQUE = 0
    XR_ENV_BLEND_MODE_ADDITIVE = 1
    XR_ENV_BLEND_MODE_ALPHA_BLEND = 2

class XRInterfaceExtension(XRInterface):
    def _get_name(self) -> 'StringName': ...
    def _get_capabilities(self) -> int: ...
    def _is_initialized(self) -> bool: ...
    def _initialize(self) -> bool: ...
    def _uninitialize(self) -> None: ...
    def _get_system_info(self) -> 'Dictionary': ...
    def _supports_play_area_mode(self, mode: 'XRInterface_PlayAreaMode') -> bool: ...
    def _get_play_area_mode(self) -> 'XRInterface_PlayAreaMode': ...
    def _set_play_area_mode(self, mode: 'XRInterface_PlayAreaMode') -> bool: ...
    def _get_play_area(self) -> 'PackedVector3Array': ...
    def _get_render_target_size(self) -> 'Vector2': ...
    def _get_view_count(self) -> int: ...
    def _get_camera_transform(self) -> 'Transform3D': ...
    def _get_transform_for_view(self, view: int, cam_transform: 'Transform3D') -> 'Transform3D': ...
    def _get_projection_for_view(self, view: int, aspect: float, z_near: float, z_far: float) -> 'PackedFloat64Array': ...
    def _get_vrs_texture(self) -> 'RID': ...
    def _process(self) -> None: ...
    def _pre_render(self) -> None: ...
    def _pre_draw_viewport(self, render_target: 'RID') -> bool: ...
    def _post_draw_viewport(self, render_target: 'RID', screen_rect: 'Rect2') -> None: ...
    def _end_frame(self) -> None: ...
    def _get_suggested_tracker_names(self) -> 'PackedStringArray': ...
    def _get_suggested_pose_names(self, tracker_name: 'StringName') -> 'PackedStringArray': ...
    def _get_tracking_status(self) -> 'XRInterface_TrackingStatus': ...
    def _trigger_haptic_pulse(self, action_name: 'String', tracker_name: 'StringName', frequency: float, amplitude: float, duration_sec: float, delay_sec: float) -> None: ...
    def _get_anchor_detection_is_enabled(self) -> bool: ...
    def _set_anchor_detection_is_enabled(self, enabled: bool) -> None: ...
    def _get_camera_feed_id(self) -> int: ...
    def _get_color_texture(self) -> 'RID': ...
    def _get_depth_texture(self) -> 'RID': ...
    def _get_velocity_texture(self) -> 'RID': ...
    def get_color_texture(self) -> 'RID': ...
    def get_depth_texture(self) -> 'RID': ...
    def get_velocity_texture(self) -> 'RID': ...
    def add_blit(self, render_target: 'RID', src_rect: 'Rect2', dst_rect: 'Rect2i', use_layer: bool, layer: int, apply_lens_distortion: bool, eye_center: 'Vector2', k1: float, k2: float, upscale: float, aspect_ratio: float) -> None: ...
    def get_render_target_texture(self, render_target: 'RID') -> 'RID': ...
    
class XRNode3D(Node3D):
    tracker: 'String'
    pose: 'String'
    show_when_tracked: bool
    tracking_changed: Signal[Callable[['bool'], None]]  # tracking_changed(tracking: bool)
    def set_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_tracker(self) -> 'StringName': ...
    def set_pose_name(self, pose: 'StringName') -> None: ...
    def get_pose_name(self) -> 'StringName': ...
    def set_show_when_tracked(self, show: bool) -> None: ...
    def get_show_when_tracked(self) -> bool: ...
    def get_is_active(self) -> bool: ...
    def get_has_tracking_data(self) -> bool: ...
    def get_pose(self) -> 'XRPose': ...
    def trigger_haptic_pulse(self, action_name: 'String', frequency: float, amplitude: float, duration_sec: float, delay_sec: float) -> None: ...
    
class XROrigin3D(Node3D):
    world_scale: float
    current: bool
    def set_world_scale(self, world_scale: float) -> None: ...
    def get_world_scale(self) -> float: ...
    def set_current(self, enabled: bool) -> None: ...
    def is_current(self) -> bool: ...
    
class XRPose(RefCounted):
    has_tracking_data: bool
    name: 'String'
    transform: 'String'
    linear_velocity: 'String'
    angular_velocity: 'String'
    tracking_confidence: int
    def set_has_tracking_data(self, has_tracking_data: bool) -> None: ...
    def get_has_tracking_data(self) -> bool: ...
    def set_name(self, name: 'StringName') -> None: ...
    def get_name(self) -> 'StringName': ...
    def set_transform(self, transform: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def get_adjusted_transform(self) -> 'Transform3D': ...
    def set_linear_velocity(self, velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_tracking_confidence(self, tracking_confidence: 'XRPose_TrackingConfidence') -> None: ...
    def get_tracking_confidence(self) -> 'XRPose_TrackingConfidence': ...
    
class XRPose_TrackingConfidence(Enum):
    XR_TRACKING_CONFIDENCE_NONE = 0
    XR_TRACKING_CONFIDENCE_LOW = 1
    XR_TRACKING_CONFIDENCE_HIGH = 2

class XRPositionalTracker(XRTracker):
    profile: 'String'
    hand: int
    pose_changed: Signal[Callable[['XRPose'], None]]  # pose_changed(pose: 'XRPose')
    pose_lost_tracking: Signal[Callable[['XRPose'], None]]  # pose_lost_tracking(pose: 'XRPose')
    button_pressed: Signal[Callable[['String'], None]]  # button_pressed(name: 'String')
    button_released: Signal[Callable[['String'], None]]  # button_released(name: 'String')
    input_float_changed: Signal[Callable[['String', 'float'], None]]  # input_float_changed(name: 'String', value: float)
    input_vector2_changed: Signal[Callable[['String', 'Vector2'], None]]  # input_vector2_changed(name: 'String', vector: 'Vector2')
    profile_changed: Signal[Callable[['String'], None]]  # profile_changed(role: 'String')
    def get_tracker_profile(self) -> 'String': ...
    def set_tracker_profile(self, profile: 'String') -> None: ...
    def get_tracker_hand(self) -> 'XRPositionalTracker_TrackerHand': ...
    def set_tracker_hand(self, hand: 'XRPositionalTracker_TrackerHand') -> None: ...
    def has_pose(self, name: 'StringName') -> bool: ...
    def get_pose(self, name: 'StringName') -> 'XRPose': ...
    def invalidate_pose(self, name: 'StringName') -> None: ...
    def set_pose(self, name: 'StringName', transform: 'Transform3D', linear_velocity: 'Vector3', angular_velocity: 'Vector3', tracking_confidence: 'XRPose_TrackingConfidence') -> None: ...
    def get_input(self, name: 'StringName') -> 'Variant': ...
    def set_input(self, name: 'StringName', value: 'Variant') -> None: ...
    
class XRPositionalTracker_TrackerHand(Enum):
    TRACKER_HAND_UNKNOWN = 0
    TRACKER_HAND_LEFT = 1
    TRACKER_HAND_RIGHT = 2
    TRACKER_HAND_MAX = 3

class XRServer(Object):
    world_scale: float
    world_origin: 'Vector3'
    camera_locked_to_origin: bool
    primary_interface: 'Object'
    reference_frame_changed: Signal[Callable[[], None]]  # reference_frame_changed()
    interface_added: Signal[Callable[['StringName'], None]]  # interface_added(interface_name: 'StringName')
    interface_removed: Signal[Callable[['StringName'], None]]  # interface_removed(interface_name: 'StringName')
    tracker_added: Signal[Callable[['StringName', 'int'], None]]  # tracker_added(tracker_name: 'StringName', type: int)
    tracker_updated: Signal[Callable[['StringName', 'int'], None]]  # tracker_updated(tracker_name: 'StringName', type: int)
    tracker_removed: Signal[Callable[['StringName', 'int'], None]]  # tracker_removed(tracker_name: 'StringName', type: int)
    def get_world_scale(self) -> float: ...
    def set_world_scale(self, scale: float) -> None: ...
    def get_world_origin(self) -> 'Transform3D': ...
    def set_world_origin(self, world_origin: 'Transform3D') -> None: ...
    def get_reference_frame(self) -> 'Transform3D': ...
    def clear_reference_frame(self) -> None: ...
    def center_on_hmd(self, rotation_mode: 'XRServer_RotationMode', keep_height: bool) -> None: ...
    def get_hmd_transform(self) -> 'Transform3D': ...
    def set_camera_locked_to_origin(self, enabled: bool) -> None: ...
    def is_camera_locked_to_origin(self) -> bool: ...
    def add_interface(self, interface: 'XRInterface') -> None: ...
    def get_interface_count(self) -> int: ...
    def remove_interface(self, interface: 'XRInterface') -> None: ...
    def get_interface(self, idx: int) -> 'XRInterface': ...
    def get_interfaces(self) -> 'list[Dictionary]': ...
    def find_interface(self, name: 'String') -> 'XRInterface': ...
    def add_tracker(self, tracker: 'XRTracker') -> None: ...
    def remove_tracker(self, tracker: 'XRTracker') -> None: ...
    def get_trackers(self, tracker_types: int) -> 'Dictionary': ...
    def get_tracker(self, tracker_name: 'StringName') -> 'XRTracker': ...
    def get_primary_interface(self) -> 'XRInterface': ...
    def set_primary_interface(self, interface: 'XRInterface') -> None: ...
    
class XRServer_TrackerType(Enum):
    TRACKER_HEAD = 1
    TRACKER_CONTROLLER = 2
    TRACKER_BASESTATION = 4
    TRACKER_ANCHOR = 8
    TRACKER_HAND = 16
    TRACKER_BODY = 32
    TRACKER_FACE = 64
    TRACKER_ANY_KNOWN = 127
    TRACKER_UNKNOWN = 128
    TRACKER_ANY = 255

class XRServer_RotationMode(Enum):
    RESET_FULL_ROTATION = 0
    RESET_BUT_KEEP_TILT = 1
    DONT_RESET_ROTATION = 2

class XRTracker(RefCounted):
    type: int
    name: 'String'
    description: 'String'
    def get_tracker_type(self) -> 'XRServer_TrackerType': ...
    def set_tracker_type(self, type: 'XRServer_TrackerType') -> None: ...
    def get_tracker_name(self) -> 'StringName': ...
    def set_tracker_name(self, name: 'StringName') -> None: ...
    def get_tracker_desc(self) -> 'String': ...
    def set_tracker_desc(self, description: 'String') -> None: ...
    
class XRVRS(Object):
    vrs_min_radius: float
    vrs_strength: float
    vrs_render_region: 'Rect2i'
    def get_vrs_min_radius(self) -> float: ...
    def set_vrs_min_radius(self, radius: float) -> None: ...
    def get_vrs_strength(self) -> float: ...
    def set_vrs_strength(self, strength: float) -> None: ...
    def get_vrs_render_region(self) -> 'Rect2i': ...
    def set_vrs_render_region(self, render_region: 'Rect2i') -> None: ...
    def make_vrs_texture(self, target_size: 'Vector2', eye_foci: 'PackedVector2Array') -> 'RID': ...
    
class ZIPPacker(RefCounted):
    def open(self, path: 'String', append: 'ZIPPacker_ZipAppend' = default('''0''')) -> 'Error': ...
    def start_file(self, path: 'String') -> 'Error': ...
    def write_file(self, data: 'PackedByteArray') -> 'Error': ...
    def close_file(self) -> 'Error': ...
    def close(self) -> 'Error': ...
    
class ZIPPacker_ZipAppend(Enum):
    APPEND_CREATE = 0
    APPEND_CREATEAFTER = 1
    APPEND_ADDINZIP = 2

class ZIPReader(RefCounted):
    def open(self, path: 'String') -> 'Error': ...
    def close(self) -> 'Error': ...
    def get_files(self) -> 'PackedStringArray': ...
    def read_file(self, path: 'String', case_sensitive: bool = default('''true''')) -> 'PackedByteArray': ...
    def file_exists(self, path: 'String', case_sensitive: bool = default('''true''')) -> bool: ...
    