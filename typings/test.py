
Object = object

class RefCounted(Object): pass

class Resource(RefCounted): pass

class Node(RefCounted): pass

class Extends[T: Object]:
    @property
    def owner(self) -> T: ...

def exposed(cls):
    cls.__exposed__ = True
    return cls

def export[T](type: type[T], *, default: T | None = None) -> T: ...
def export_range[T: int | float](min: T, max: T, step: T = 1, *, default: T | None = None) -> T: ...

def export_category(name: str) -> None: ...
def export_group(name: str) -> None: ...
def export_subgroup(name: str) -> None: ...

def export_file(filter: str | None = None) -> str: ...
def export_dir() -> str: ...
def export_global_file(filter: str | None = None) -> str: ...
def export_global_dir() -> str: ...
def export_multiline() -> str: ...
def export_exp_easing() -> float: ...
def export_node_path() -> str: ...
def export_flags(): ...
def export_enum(): ...

class MyClass(Extends[Node]):
    export_category("Main Category")
    number = export(int)
    resource = export(Resource)
    my_node = export(Node)

    export_group("MyGroup")
    x_int = export_range(1, 10, 2)
    x_float = export_range(1.0, 10, 2)

    export_subgroup("Extra Properties")
    y_int = export(int, default=5)
    z_float = export(float, default=3.14)

    