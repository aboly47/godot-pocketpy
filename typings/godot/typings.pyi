from typing import Callable
from typing import Any
from .enum import *


def default(gdt_expr: str) -> Any: ...


intptr = int


class AESContext(RefCounted):



    def start(self, mode: 'AESContext__Mode', key: 'PackedByteArray', iv: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'Error': ...
    def update(self, src: 'PackedByteArray') -> 'PackedByteArray': ...
    def get_iv_state(self) -> 'PackedByteArray': ...
    def finish(self) -> None: ...


class AStar2D(RefCounted):



    def _estimate_cost(self, from_id: 'int', end_id: 'int') -> 'float': ...
    def _compute_cost(self, from_id: 'int', to_id: 'int') -> 'float': ...
    def get_available_point_id(self) -> 'int': ...
    def add_point(self, id: 'int', position: 'Vector2', weight_scale: 'float' = 1.0) -> None: ...
    def get_point_position(self, id: 'int') -> 'Vector2': ...
    def set_point_position(self, id: 'int', position: 'Vector2') -> None: ...
    def get_point_weight_scale(self, id: 'int') -> 'float': ...
    def set_point_weight_scale(self, id: 'int', weight_scale: 'float') -> None: ...
    def remove_point(self, id: 'int') -> None: ...
    def has_point(self, id: 'int') -> 'bool': ...
    def get_point_connections(self, id: 'int') -> 'PackedInt64Array': ...
    def get_point_ids(self) -> 'PackedInt64Array': ...
    def set_point_disabled(self, id: 'int', disabled: 'bool' = True) -> None: ...
    def is_point_disabled(self, id: 'int') -> 'bool': ...
    def connect_points(self, id: 'int', to_id: 'int', bidirectional: 'bool' = True) -> None: ...
    def disconnect_points(self, id: 'int', to_id: 'int', bidirectional: 'bool' = True) -> None: ...
    def are_points_connected(self, id: 'int', to_id: 'int', bidirectional: 'bool' = True) -> 'bool': ...
    def get_point_count(self) -> 'int': ...
    def get_point_capacity(self) -> 'int': ...
    def reserve_space(self, num_nodes: 'int') -> None: ...
    def clear(self) -> None: ...
    def get_closest_point(self, to_position: 'Vector2', include_disabled: 'bool' = False) -> 'int': ...
    def get_closest_position_in_segment(self, to_position: 'Vector2') -> 'Vector2': ...
    def get_point_path(self, from_id: 'int', to_id: 'int', allow_partial_path: 'bool' = False) -> 'PackedVector2Array': ...
    def get_id_path(self, from_id: 'int', to_id: 'int', allow_partial_path: 'bool' = False) -> 'PackedInt64Array': ...


class AStar3D(RefCounted):



    def _estimate_cost(self, from_id: 'int', end_id: 'int') -> 'float': ...
    def _compute_cost(self, from_id: 'int', to_id: 'int') -> 'float': ...
    def get_available_point_id(self) -> 'int': ...
    def add_point(self, id: 'int', position: 'Vector3', weight_scale: 'float' = 1.0) -> None: ...
    def get_point_position(self, id: 'int') -> 'Vector3': ...
    def set_point_position(self, id: 'int', position: 'Vector3') -> None: ...
    def get_point_weight_scale(self, id: 'int') -> 'float': ...
    def set_point_weight_scale(self, id: 'int', weight_scale: 'float') -> None: ...
    def remove_point(self, id: 'int') -> None: ...
    def has_point(self, id: 'int') -> 'bool': ...
    def get_point_connections(self, id: 'int') -> 'PackedInt64Array': ...
    def get_point_ids(self) -> 'PackedInt64Array': ...
    def set_point_disabled(self, id: 'int', disabled: 'bool' = True) -> None: ...
    def is_point_disabled(self, id: 'int') -> 'bool': ...
    def connect_points(self, id: 'int', to_id: 'int', bidirectional: 'bool' = True) -> None: ...
    def disconnect_points(self, id: 'int', to_id: 'int', bidirectional: 'bool' = True) -> None: ...
    def are_points_connected(self, id: 'int', to_id: 'int', bidirectional: 'bool' = True) -> 'bool': ...
    def get_point_count(self) -> 'int': ...
    def get_point_capacity(self) -> 'int': ...
    def reserve_space(self, num_nodes: 'int') -> None: ...
    def clear(self) -> None: ...
    def get_closest_point(self, to_position: 'Vector3', include_disabled: 'bool' = False) -> 'int': ...
    def get_closest_position_in_segment(self, to_position: 'Vector3') -> 'Vector3': ...
    def get_point_path(self, from_id: 'int', to_id: 'int', allow_partial_path: 'bool' = False) -> 'PackedVector3Array': ...
    def get_id_path(self, from_id: 'int', to_id: 'int', allow_partial_path: 'bool' = False) -> 'PackedInt64Array': ...


class AStarGrid2D(RefCounted):


    region: 'Rect2i'
    size: 'Vector2i'
    offset: 'Vector2'
    cell_size: 'Vector2'
    cell_shape: 'int'
    jumping_enabled: 'bool'
    default_compute_heuristic: 'int'
    default_estimate_heuristic: 'int'
    diagonal_mode: 'int'

    def _estimate_cost(self, from_id: 'Vector2i', end_id: 'Vector2i') -> 'float': ...
    def _compute_cost(self, from_id: 'Vector2i', to_id: 'Vector2i') -> 'float': ...
    def set_region(self, region: 'Rect2i') -> None: ...
    def get_region(self) -> 'Rect2i': ...
    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_cell_size(self, cell_size: 'Vector2') -> None: ...
    def get_cell_size(self) -> 'Vector2': ...
    def set_cell_shape(self, cell_shape: 'AStarGrid2D__CellShape') -> None: ...
    def get_cell_shape(self) -> 'AStarGrid2D__CellShape': ...
    def is_in_bounds(self, x: 'int', y: 'int') -> 'bool': ...
    def is_in_boundsv(self, id: 'Vector2i') -> 'bool': ...
    def is_dirty(self) -> 'bool': ...
    def update(self) -> None: ...
    def set_jumping_enabled(self, enabled: 'bool') -> None: ...
    def is_jumping_enabled(self) -> 'bool': ...
    def set_diagonal_mode(self, mode: 'AStarGrid2D__DiagonalMode') -> None: ...
    def get_diagonal_mode(self) -> 'AStarGrid2D__DiagonalMode': ...
    def set_default_compute_heuristic(self, heuristic: 'AStarGrid2D__Heuristic') -> None: ...
    def get_default_compute_heuristic(self) -> 'AStarGrid2D__Heuristic': ...
    def set_default_estimate_heuristic(self, heuristic: 'AStarGrid2D__Heuristic') -> None: ...
    def get_default_estimate_heuristic(self) -> 'AStarGrid2D__Heuristic': ...
    def set_point_solid(self, id: 'Vector2i', solid: 'bool' = True) -> None: ...
    def is_point_solid(self, id: 'Vector2i') -> 'bool': ...
    def set_point_weight_scale(self, id: 'Vector2i', weight_scale: 'float') -> None: ...
    def get_point_weight_scale(self, id: 'Vector2i') -> 'float': ...
    def fill_solid_region(self, region: 'Rect2i', solid: 'bool' = True) -> None: ...
    def fill_weight_scale_region(self, region: 'Rect2i', weight_scale: 'float') -> None: ...
    def clear(self) -> None: ...
    def get_point_position(self, id: 'Vector2i') -> 'Vector2': ...
    def get_point_data_in_region(self, region: 'Rect2i') -> 'Array'['Dictionary']: ...
    def get_point_path(self, from_id: 'Vector2i', to_id: 'Vector2i', allow_partial_path: 'bool' = False) -> 'PackedVector2Array': ...
    def get_id_path(self, from_id: 'Vector2i', to_id: 'Vector2i', allow_partial_path: 'bool' = False) -> 'Array'['Vector2i']: ...


class AcceptDialog(Window):


    ok_button_text: 'str'
    dialog_text: 'str'
    dialog_hide_on_ok: 'bool'
    dialog_close_on_escape: 'bool'
    dialog_autowrap: 'bool'
    confirmed: 'Signal[Callable[[], None]]'  # confirmed()
    canceled: 'Signal[Callable[[], None]]'  # canceled()
    custom_action: 'Signal[Callable[[StringName], None]]'  # custom_action(action: StringName)

    def get_ok_button(self) -> 'Button': ...
    def get_label(self) -> 'Label': ...
    def set_hide_on_ok(self, enabled: 'bool') -> None: ...
    def get_hide_on_ok(self) -> 'bool': ...
    def set_close_on_escape(self, enabled: 'bool') -> None: ...
    def get_close_on_escape(self) -> 'bool': ...
    def add_button(self, text: 'str', right: 'bool' = False, action: 'str' = "") -> 'Button': ...
    def add_cancel_button(self, name: 'str') -> 'Button': ...
    def remove_button(self, button: 'Button') -> None: ...
    def register_text_enter(self, line_edit: 'LineEdit') -> None: ...
    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def set_autowrap(self, autowrap: 'bool') -> None: ...
    def has_autowrap(self) -> 'bool': ...
    def set_ok_button_text(self, text: 'str') -> None: ...
    def get_ok_button_text(self) -> 'str': ...


class AnimatableBody2D(StaticBody2D):


    sync_to_physics: 'bool'

    def set_sync_to_physics(self, enable: 'bool') -> None: ...
    def is_sync_to_physics_enabled(self) -> 'bool': ...


class AnimatableBody3D(StaticBody3D):


    sync_to_physics: 'bool'

    def set_sync_to_physics(self, enable: 'bool') -> None: ...
    def is_sync_to_physics_enabled(self) -> 'bool': ...


class AnimatedSprite2D(Node2D):


    sprite_frames: 'SpriteFrames'
    animation: 'StringName'
    autoplay: 'StringName'
    frame: 'int'
    frame_progress: 'float'
    speed_scale: 'float'
    centered: 'bool'
    offset: 'Vector2'
    flip_h: 'bool'
    flip_v: 'bool'
    sprite_frames_changed: 'Signal[Callable[[], None]]'  # sprite_frames_changed()
    animation_changed: 'Signal[Callable[[], None]]'  # animation_changed()
    frame_changed: 'Signal[Callable[[], None]]'  # frame_changed()
    animation_looped: 'Signal[Callable[[], None]]'  # animation_looped()
    animation_finished: 'Signal[Callable[[], None]]'  # animation_finished()

    def set_sprite_frames(self, sprite_frames: 'SpriteFrames') -> None: ...
    def get_sprite_frames(self) -> 'SpriteFrames': ...
    def set_animation(self, name: 'StringName') -> None: ...
    def get_animation(self) -> 'StringName': ...
    def set_autoplay(self, name: 'str') -> None: ...
    def get_autoplay(self) -> 'str': ...
    def is_playing(self) -> 'bool': ...
    def play(self, name: 'StringName' = default('''&""'''), custom_speed: 'float' = 1.0, from_end: 'bool' = False) -> None: ...
    def play_backwards(self, name: 'StringName' = default('''&""''')) -> None: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_centered(self, centered: 'bool') -> None: ...
    def is_centered(self) -> 'bool': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_flip_h(self, flip_h: 'bool') -> None: ...
    def is_flipped_h(self) -> 'bool': ...
    def set_flip_v(self, flip_v: 'bool') -> None: ...
    def is_flipped_v(self) -> 'bool': ...
    def set_frame(self, frame: 'int') -> None: ...
    def get_frame(self) -> 'int': ...
    def set_frame_progress(self, progress: 'float') -> None: ...
    def get_frame_progress(self) -> 'float': ...
    def set_frame_and_progress(self, frame: 'int', progress: 'float') -> None: ...
    def set_speed_scale(self, speed_scale: 'float') -> None: ...
    def get_speed_scale(self) -> 'float': ...
    def get_playing_speed(self) -> 'float': ...


class AnimatedSprite3D(SpriteBase3D):


    sprite_frames: 'SpriteFrames'
    animation: 'StringName'
    autoplay: 'StringName'
    frame: 'int'
    frame_progress: 'float'
    speed_scale: 'float'
    sprite_frames_changed: 'Signal[Callable[[], None]]'  # sprite_frames_changed()
    animation_changed: 'Signal[Callable[[], None]]'  # animation_changed()
    frame_changed: 'Signal[Callable[[], None]]'  # frame_changed()
    animation_looped: 'Signal[Callable[[], None]]'  # animation_looped()
    animation_finished: 'Signal[Callable[[], None]]'  # animation_finished()

    def set_sprite_frames(self, sprite_frames: 'SpriteFrames') -> None: ...
    def get_sprite_frames(self) -> 'SpriteFrames': ...
    def set_animation(self, name: 'StringName') -> None: ...
    def get_animation(self) -> 'StringName': ...
    def set_autoplay(self, name: 'str') -> None: ...
    def get_autoplay(self) -> 'str': ...
    def is_playing(self) -> 'bool': ...
    def play(self, name: 'StringName' = default('''&""'''), custom_speed: 'float' = 1.0, from_end: 'bool' = False) -> None: ...
    def play_backwards(self, name: 'StringName' = default('''&""''')) -> None: ...
    def pause(self) -> None: ...
    def stop(self) -> None: ...
    def set_frame(self, frame: 'int') -> None: ...
    def get_frame(self) -> 'int': ...
    def set_frame_progress(self, progress: 'float') -> None: ...
    def get_frame_progress(self) -> 'float': ...
    def set_frame_and_progress(self, frame: 'int', progress: 'float') -> None: ...
    def set_speed_scale(self, speed_scale: 'float') -> None: ...
    def get_speed_scale(self) -> 'float': ...
    def get_playing_speed(self) -> 'float': ...


class AnimatedTexture(Texture2D):


    frames: 'int'
    current_frame: 'int'
    pause: 'bool'
    one_shot: 'bool'
    speed_scale: 'float'
    MAX_FRAMES: 'int' = 256

    def set_frames(self, frames: 'int') -> None: ...
    def get_frames(self) -> 'int': ...
    def set_current_frame(self, frame: 'int') -> None: ...
    def get_current_frame(self) -> 'int': ...
    def set_pause(self, pause: 'bool') -> None: ...
    def get_pause(self) -> 'bool': ...
    def set_one_shot(self, one_shot: 'bool') -> None: ...
    def get_one_shot(self) -> 'bool': ...
    def set_speed_scale(self, scale: 'float') -> None: ...
    def get_speed_scale(self) -> 'float': ...
    def set_frame_texture(self, frame: 'int', texture: 'Texture2D') -> None: ...
    def get_frame_texture(self, frame: 'int') -> 'Texture2D': ...
    def set_frame_duration(self, frame: 'int', duration: 'float') -> None: ...
    def get_frame_duration(self, frame: 'int') -> 'float': ...


class Animation(Resource):


    length: 'float'
    loop_mode: 'int'
    step: 'float'
    capture_included: 'bool'

    def add_track(self, type: 'Animation__TrackType', at_position: 'int' = -1) -> 'int': ...
    def remove_track(self, track_idx: 'int') -> None: ...
    def get_track_count(self) -> 'int': ...
    def track_get_type(self, track_idx: 'int') -> 'Animation__TrackType': ...
    def track_get_path(self, track_idx: 'int') -> 'NodePath': ...
    def track_set_path(self, track_idx: 'int', path: 'NodePath') -> None: ...
    def find_track(self, path: 'NodePath', type: 'Animation__TrackType') -> 'int': ...
    def track_move_up(self, track_idx: 'int') -> None: ...
    def track_move_down(self, track_idx: 'int') -> None: ...
    def track_move_to(self, track_idx: 'int', to_idx: 'int') -> None: ...
    def track_swap(self, track_idx: 'int', with_idx: 'int') -> None: ...
    def track_set_imported(self, track_idx: 'int', imported: 'bool') -> None: ...
    def track_is_imported(self, track_idx: 'int') -> 'bool': ...
    def track_set_enabled(self, track_idx: 'int', enabled: 'bool') -> None: ...
    def track_is_enabled(self, track_idx: 'int') -> 'bool': ...
    def position_track_insert_key(self, track_idx: 'int', time: 'float', position: 'Vector3') -> 'int': ...
    def rotation_track_insert_key(self, track_idx: 'int', time: 'float', rotation: 'Quaternion') -> 'int': ...
    def scale_track_insert_key(self, track_idx: 'int', time: 'float', scale: 'Vector3') -> 'int': ...
    def blend_shape_track_insert_key(self, track_idx: 'int', time: 'float', amount: 'float') -> 'int': ...
    def position_track_interpolate(self, track_idx: 'int', time_sec: 'float', backward: 'bool' = False) -> 'Vector3': ...
    def rotation_track_interpolate(self, track_idx: 'int', time_sec: 'float', backward: 'bool' = False) -> 'Quaternion': ...
    def scale_track_interpolate(self, track_idx: 'int', time_sec: 'float', backward: 'bool' = False) -> 'Vector3': ...
    def blend_shape_track_interpolate(self, track_idx: 'int', time_sec: 'float', backward: 'bool' = False) -> 'float': ...
    def track_insert_key(self, track_idx: 'int', time: 'float', key: 'Variant', transition: 'float' = 1) -> 'int': ...
    def track_remove_key(self, track_idx: 'int', key_idx: 'int') -> None: ...
    def track_remove_key_at_time(self, track_idx: 'int', time: 'float') -> None: ...
    def track_set_key_value(self, track_idx: 'int', key: 'int', value: 'Variant') -> None: ...
    def track_set_key_transition(self, track_idx: 'int', key_idx: 'int', transition: 'float') -> None: ...
    def track_set_key_time(self, track_idx: 'int', key_idx: 'int', time: 'float') -> None: ...
    def track_get_key_transition(self, track_idx: 'int', key_idx: 'int') -> 'float': ...
    def track_get_key_count(self, track_idx: 'int') -> 'int': ...
    def track_get_key_value(self, track_idx: 'int', key_idx: 'int') -> 'Variant': ...
    def track_get_key_time(self, track_idx: 'int', key_idx: 'int') -> 'float': ...
    def track_find_key(self, track_idx: 'int', time: 'float', find_mode: 'Animation__FindMode' = 0, limit: 'bool' = False, backward: 'bool' = False) -> 'int': ...
    def track_set_interpolation_type(self, track_idx: 'int', interpolation: 'Animation__InterpolationType') -> None: ...
    def track_get_interpolation_type(self, track_idx: 'int') -> 'Animation__InterpolationType': ...
    def track_set_interpolation_loop_wrap(self, track_idx: 'int', interpolation: 'bool') -> None: ...
    def track_get_interpolation_loop_wrap(self, track_idx: 'int') -> 'bool': ...
    def track_is_compressed(self, track_idx: 'int') -> 'bool': ...
    def value_track_set_update_mode(self, track_idx: 'int', mode: 'Animation__UpdateMode') -> None: ...
    def value_track_get_update_mode(self, track_idx: 'int') -> 'Animation__UpdateMode': ...
    def value_track_interpolate(self, track_idx: 'int', time_sec: 'float', backward: 'bool' = False) -> 'Variant': ...
    def method_track_get_name(self, track_idx: 'int', key_idx: 'int') -> 'StringName': ...
    def method_track_get_params(self, track_idx: 'int', key_idx: 'int') -> 'Array': ...
    def bezier_track_insert_key(self, track_idx: 'int', time: 'float', value: 'float', in_handle: 'Vector2' = default('''Vector2(0, 0)'''), out_handle: 'Vector2' = default('''Vector2(0, 0)''')) -> 'int': ...
    def bezier_track_set_key_value(self, track_idx: 'int', key_idx: 'int', value: 'float') -> None: ...
    def bezier_track_set_key_in_handle(self, track_idx: 'int', key_idx: 'int', in_handle: 'Vector2', balanced_value_time_ratio: 'float' = 1.0) -> None: ...
    def bezier_track_set_key_out_handle(self, track_idx: 'int', key_idx: 'int', out_handle: 'Vector2', balanced_value_time_ratio: 'float' = 1.0) -> None: ...
    def bezier_track_get_key_value(self, track_idx: 'int', key_idx: 'int') -> 'float': ...
    def bezier_track_get_key_in_handle(self, track_idx: 'int', key_idx: 'int') -> 'Vector2': ...
    def bezier_track_get_key_out_handle(self, track_idx: 'int', key_idx: 'int') -> 'Vector2': ...
    def bezier_track_interpolate(self, track_idx: 'int', time: 'float') -> 'float': ...
    def audio_track_insert_key(self, track_idx: 'int', time: 'float', stream: 'Resource', start_offset: 'float' = 0, end_offset: 'float' = 0) -> 'int': ...
    def audio_track_set_key_stream(self, track_idx: 'int', key_idx: 'int', stream: 'Resource') -> None: ...
    def audio_track_set_key_start_offset(self, track_idx: 'int', key_idx: 'int', offset: 'float') -> None: ...
    def audio_track_set_key_end_offset(self, track_idx: 'int', key_idx: 'int', offset: 'float') -> None: ...
    def audio_track_get_key_stream(self, track_idx: 'int', key_idx: 'int') -> 'Resource': ...
    def audio_track_get_key_start_offset(self, track_idx: 'int', key_idx: 'int') -> 'float': ...
    def audio_track_get_key_end_offset(self, track_idx: 'int', key_idx: 'int') -> 'float': ...
    def audio_track_set_use_blend(self, track_idx: 'int', enable: 'bool') -> None: ...
    def audio_track_is_use_blend(self, track_idx: 'int') -> 'bool': ...
    def animation_track_insert_key(self, track_idx: 'int', time: 'float', animation: 'StringName') -> 'int': ...
    def animation_track_set_key_animation(self, track_idx: 'int', key_idx: 'int', animation: 'StringName') -> None: ...
    def animation_track_get_key_animation(self, track_idx: 'int', key_idx: 'int') -> 'StringName': ...
    def add_marker(self, name: 'StringName', time: 'float') -> None: ...
    def remove_marker(self, name: 'StringName') -> None: ...
    def has_marker(self, name: 'StringName') -> 'bool': ...
    def get_marker_at_time(self, time: 'float') -> 'StringName': ...
    def get_next_marker(self, time: 'float') -> 'StringName': ...
    def get_prev_marker(self, time: 'float') -> 'StringName': ...
    def get_marker_time(self, name: 'StringName') -> 'float': ...
    def get_marker_names(self) -> 'PackedStringArray': ...
    def get_marker_color(self, name: 'StringName') -> 'Color': ...
    def set_marker_color(self, name: 'StringName', color: 'Color') -> None: ...
    def set_length(self, time_sec: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_loop_mode(self, loop_mode: 'Animation__LoopMode') -> None: ...
    def get_loop_mode(self) -> 'Animation__LoopMode': ...
    def set_step(self, size_sec: 'float') -> None: ...
    def get_step(self) -> 'float': ...
    def clear(self) -> None: ...
    def copy_track(self, track_idx: 'int', to_animation: 'Animation') -> None: ...
    def optimize(self, allowed_velocity_err: 'float' = 0.01, allowed_angular_err: 'float' = 0.01, precision: 'int' = 3) -> None: ...
    def compress(self, page_size: 'int' = 8192, fps: 'int' = 120, split_tolerance: 'float' = 4.0) -> None: ...
    def is_capture_included(self) -> 'bool': ...


class AnimationLibrary(Resource):


    animation_added: 'Signal[Callable[[StringName], None]]'  # animation_added(name: StringName)
    animation_removed: 'Signal[Callable[[StringName], None]]'  # animation_removed(name: StringName)
    animation_renamed: 'Signal[Callable[[StringName, StringName], None]]'  # animation_renamed(name: StringName, to_name: StringName)
    animation_changed: 'Signal[Callable[[StringName], None]]'  # animation_changed(name: StringName)

    def add_animation(self, name: 'StringName', animation: 'Animation') -> 'Error': ...
    def remove_animation(self, name: 'StringName') -> None: ...
    def rename_animation(self, name: 'StringName', newname: 'StringName') -> None: ...
    def has_animation(self, name: 'StringName') -> 'bool': ...
    def get_animation(self, name: 'StringName') -> 'Animation': ...
    def get_animation_list(self) -> 'Array'['StringName']: ...
    def get_animation_list_size(self) -> 'int': ...


class AnimationMixer(Node):


    active: 'bool'
    deterministic: 'bool'
    reset_on_save: 'bool'
    root_node: 'NodePath'
    root_motion_track: 'NodePath'
    root_motion_local: 'bool'
    audio_max_polyphony: 'int'
    callback_mode_process: 'int'
    callback_mode_method: 'int'
    callback_mode_discrete: 'int'
    animation_list_changed: 'Signal[Callable[[], None]]'  # animation_list_changed()
    animation_libraries_updated: 'Signal[Callable[[], None]]'  # animation_libraries_updated()
    animation_finished: 'Signal[Callable[[StringName], None]]'  # animation_finished(anim_name: StringName)
    animation_started: 'Signal[Callable[[StringName], None]]'  # animation_started(anim_name: StringName)
    caches_cleared: 'Signal[Callable[[], None]]'  # caches_cleared()
    mixer_applied: 'Signal[Callable[[], None]]'  # mixer_applied()
    mixer_updated: 'Signal[Callable[[], None]]'  # mixer_updated()

    def _post_process_key_value(self, animation: 'Animation', track: 'int', value: 'Variant', object_id: 'int', object_sub_idx: 'int') -> 'Variant': ...
    def add_animation_library(self, name: 'StringName', library: 'AnimationLibrary') -> 'Error': ...
    def remove_animation_library(self, name: 'StringName') -> None: ...
    def rename_animation_library(self, name: 'StringName', newname: 'StringName') -> None: ...
    def has_animation_library(self, name: 'StringName') -> 'bool': ...
    def get_animation_library(self, name: 'StringName') -> 'AnimationLibrary': ...
    def get_animation_library_list(self) -> 'Array'['StringName']: ...
    def has_animation(self, name: 'StringName') -> 'bool': ...
    def get_animation(self, name: 'StringName') -> 'Animation': ...
    def get_animation_list(self) -> 'PackedStringArray': ...
    def set_active(self, active: 'bool') -> None: ...
    def is_active(self) -> 'bool': ...
    def set_deterministic(self, deterministic: 'bool') -> None: ...
    def is_deterministic(self) -> 'bool': ...
    def set_root_node(self, path: 'NodePath') -> None: ...
    def get_root_node(self) -> 'NodePath': ...
    def set_callback_mode_process(self, mode: 'AnimationMixer__AnimationCallbackModeProcess') -> None: ...
    def get_callback_mode_process(self) -> 'AnimationMixer__AnimationCallbackModeProcess': ...
    def set_callback_mode_method(self, mode: 'AnimationMixer__AnimationCallbackModeMethod') -> None: ...
    def get_callback_mode_method(self) -> 'AnimationMixer__AnimationCallbackModeMethod': ...
    def set_callback_mode_discrete(self, mode: 'AnimationMixer__AnimationCallbackModeDiscrete') -> None: ...
    def get_callback_mode_discrete(self) -> 'AnimationMixer__AnimationCallbackModeDiscrete': ...
    def set_audio_max_polyphony(self, max_polyphony: 'int') -> None: ...
    def get_audio_max_polyphony(self) -> 'int': ...
    def set_root_motion_track(self, path: 'NodePath') -> None: ...
    def get_root_motion_track(self) -> 'NodePath': ...
    def set_root_motion_local(self, enabled: 'bool') -> None: ...
    def is_root_motion_local(self) -> 'bool': ...
    def get_root_motion_position(self) -> 'Vector3': ...
    def get_root_motion_rotation(self) -> 'Quaternion': ...
    def get_root_motion_scale(self) -> 'Vector3': ...
    def get_root_motion_position_accumulator(self) -> 'Vector3': ...
    def get_root_motion_rotation_accumulator(self) -> 'Quaternion': ...
    def get_root_motion_scale_accumulator(self) -> 'Vector3': ...
    def clear_caches(self) -> None: ...
    def advance(self, delta: 'float') -> None: ...
    def capture(self, name: 'StringName', duration: 'float', trans_type: 'Tween__TransitionType' = 0, ease_type: 'Tween__EaseType' = 0) -> None: ...
    def set_reset_on_save_enabled(self, enabled: 'bool') -> None: ...
    def is_reset_on_save_enabled(self) -> 'bool': ...
    def find_animation(self, animation: 'Animation') -> 'StringName': ...
    def find_animation_library(self, animation: 'Animation') -> 'StringName': ...


class AnimationNode(Resource):


    filter_enabled: 'bool'
    filters: 'Array'
    tree_changed: 'Signal[Callable[[], None]]'  # tree_changed()
    animation_node_renamed: 'Signal[Callable[[int, str, str], None]]'  # animation_node_renamed(object_id: int, old_name: String, new_name: String)
    animation_node_removed: 'Signal[Callable[[int, str], None]]'  # animation_node_removed(object_id: int, name: String)

    def _get_child_nodes(self) -> 'Dictionary': ...
    def _get_parameter_list(self) -> 'Array': ...
    def _get_child_by_name(self, name: 'StringName') -> 'AnimationNode': ...
    def _get_parameter_default_value(self, parameter: 'StringName') -> 'Variant': ...
    def _is_parameter_read_only(self, parameter: 'StringName') -> 'bool': ...
    def _process(self, time: 'float', seek: 'bool', is_external_seeking: 'bool', test_only: 'bool') -> 'float': ...
    def _get_caption(self) -> 'str': ...
    def _has_filter(self) -> 'bool': ...
    def add_input(self, name: 'str') -> 'bool': ...
    def remove_input(self, index: 'int') -> None: ...
    def set_input_name(self, input: 'int', name: 'str') -> 'bool': ...
    def get_input_name(self, input: 'int') -> 'str': ...
    def get_input_count(self) -> 'int': ...
    def find_input(self, name: 'str') -> 'int': ...
    def set_filter_path(self, path: 'NodePath', enable: 'bool') -> None: ...
    def is_path_filtered(self, path: 'NodePath') -> 'bool': ...
    def set_filter_enabled(self, enable: 'bool') -> None: ...
    def is_filter_enabled(self) -> 'bool': ...
    def get_processing_animation_tree_instance_id(self) -> 'int': ...
    def is_process_testing(self) -> 'bool': ...
    def blend_animation(self, animation: 'StringName', time: 'float', delta: 'float', seeked: 'bool', is_external_seeking: 'bool', blend: 'float', looped_flag: 'Animation__LoopedFlag' = 0) -> None: ...
    def blend_node(self, name: 'StringName', node: 'AnimationNode', time: 'float', seek: 'bool', is_external_seeking: 'bool', blend: 'float', filter: 'AnimationNode__FilterAction' = 0, sync: 'bool' = True, test_only: 'bool' = False) -> 'float': ...
    def blend_input(self, input_index: 'int', time: 'float', seek: 'bool', is_external_seeking: 'bool', blend: 'float', filter: 'AnimationNode__FilterAction' = 0, sync: 'bool' = True, test_only: 'bool' = False) -> 'float': ...
    def set_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def get_parameter(self, name: 'StringName') -> 'Variant': ...


class AnimationNodeAdd2(AnimationNodeSync): ...


class AnimationNodeAdd3(AnimationNodeSync): ...


class AnimationNodeAnimation(AnimationRootNode):


    animation: 'StringName'
    play_mode: 'int'
    advance_on_start: 'bool'
    use_custom_timeline: 'bool'
    timeline_length: 'float'
    stretch_time_scale: 'bool'
    start_offset: 'float'
    loop_mode: 'int'

    def set_animation(self, name: 'StringName') -> None: ...
    def get_animation(self) -> 'StringName': ...
    def set_play_mode(self, mode: 'AnimationNodeAnimation__PlayMode') -> None: ...
    def get_play_mode(self) -> 'AnimationNodeAnimation__PlayMode': ...
    def set_advance_on_start(self, advance_on_start: 'bool') -> None: ...
    def is_advance_on_start(self) -> 'bool': ...
    def set_use_custom_timeline(self, use_custom_timeline: 'bool') -> None: ...
    def is_using_custom_timeline(self) -> 'bool': ...
    def set_timeline_length(self, timeline_length: 'float') -> None: ...
    def get_timeline_length(self) -> 'float': ...
    def set_stretch_time_scale(self, stretch_time_scale: 'bool') -> None: ...
    def is_stretching_time_scale(self) -> 'bool': ...
    def set_start_offset(self, start_offset: 'float') -> None: ...
    def get_start_offset(self) -> 'float': ...
    def set_loop_mode(self, loop_mode: 'Animation__LoopMode') -> None: ...
    def get_loop_mode(self) -> 'Animation__LoopMode': ...


class AnimationNodeBlend2(AnimationNodeSync): ...


class AnimationNodeBlend3(AnimationNodeSync): ...


class AnimationNodeBlendSpace1D(AnimationRootNode):


    min_space: 'float'
    max_space: 'float'
    snap: 'float'
    value_label: 'str'
    blend_mode: 'int'
    sync: 'bool'

    def add_blend_point(self, node: 'AnimationRootNode', pos: 'float', at_index: 'int' = -1) -> None: ...
    def set_blend_point_position(self, point: 'int', pos: 'float') -> None: ...
    def get_blend_point_position(self, point: 'int') -> 'float': ...
    def set_blend_point_node(self, point: 'int', node: 'AnimationRootNode') -> None: ...
    def get_blend_point_node(self, point: 'int') -> 'AnimationRootNode': ...
    def remove_blend_point(self, point: 'int') -> None: ...
    def get_blend_point_count(self) -> 'int': ...
    def set_min_space(self, min_space: 'float') -> None: ...
    def get_min_space(self) -> 'float': ...
    def set_max_space(self, max_space: 'float') -> None: ...
    def get_max_space(self) -> 'float': ...
    def set_snap(self, snap: 'float') -> None: ...
    def get_snap(self) -> 'float': ...
    def set_value_label(self, text: 'str') -> None: ...
    def get_value_label(self) -> 'str': ...
    def set_blend_mode(self, mode: 'AnimationNodeBlendSpace1D__BlendMode') -> None: ...
    def get_blend_mode(self) -> 'AnimationNodeBlendSpace1D__BlendMode': ...
    def set_use_sync(self, enable: 'bool') -> None: ...
    def is_using_sync(self) -> 'bool': ...


class AnimationNodeBlendSpace2D(AnimationRootNode):


    auto_triangles: 'bool'
    triangles: 'PackedInt32Array'
    min_space: 'Vector2'
    max_space: 'Vector2'
    snap: 'Vector2'
    x_label: 'str'
    y_label: 'str'
    blend_mode: 'int'
    sync: 'bool'
    triangles_updated: 'Signal[Callable[[], None]]'  # triangles_updated()

    def add_blend_point(self, node: 'AnimationRootNode', pos: 'Vector2', at_index: 'int' = -1) -> None: ...
    def set_blend_point_position(self, point: 'int', pos: 'Vector2') -> None: ...
    def get_blend_point_position(self, point: 'int') -> 'Vector2': ...
    def set_blend_point_node(self, point: 'int', node: 'AnimationRootNode') -> None: ...
    def get_blend_point_node(self, point: 'int') -> 'AnimationRootNode': ...
    def remove_blend_point(self, point: 'int') -> None: ...
    def get_blend_point_count(self) -> 'int': ...
    def add_triangle(self, x: 'int', y: 'int', z: 'int', at_index: 'int' = -1) -> None: ...
    def get_triangle_point(self, triangle: 'int', point: 'int') -> 'int': ...
    def remove_triangle(self, triangle: 'int') -> None: ...
    def get_triangle_count(self) -> 'int': ...
    def set_min_space(self, min_space: 'Vector2') -> None: ...
    def get_min_space(self) -> 'Vector2': ...
    def set_max_space(self, max_space: 'Vector2') -> None: ...
    def get_max_space(self) -> 'Vector2': ...
    def set_snap(self, snap: 'Vector2') -> None: ...
    def get_snap(self) -> 'Vector2': ...
    def set_x_label(self, text: 'str') -> None: ...
    def get_x_label(self) -> 'str': ...
    def set_y_label(self, text: 'str') -> None: ...
    def get_y_label(self) -> 'str': ...
    def set_auto_triangles(self, enable: 'bool') -> None: ...
    def get_auto_triangles(self) -> 'bool': ...
    def set_blend_mode(self, mode: 'AnimationNodeBlendSpace2D__BlendMode') -> None: ...
    def get_blend_mode(self) -> 'AnimationNodeBlendSpace2D__BlendMode': ...
    def set_use_sync(self, enable: 'bool') -> None: ...
    def is_using_sync(self) -> 'bool': ...


class AnimationNodeBlendTree(AnimationRootNode):


    graph_offset: 'Vector2'
    CONNECTION_OK: 'int' = 0
    CONNECTION_ERROR_NO_INPUT: 'int' = 1
    CONNECTION_ERROR_NO_INPUT_INDEX: 'int' = 2
    CONNECTION_ERROR_NO_OUTPUT: 'int' = 3
    CONNECTION_ERROR_SAME_NODE: 'int' = 4
    CONNECTION_ERROR_CONNECTION_EXISTS: 'int' = 5
    node_changed: 'Signal[Callable[[StringName], None]]'  # node_changed(node_name: StringName)

    def add_node(self, name: 'StringName', node: 'AnimationNode', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def get_node(self, name: 'StringName') -> 'AnimationNode': ...
    def remove_node(self, name: 'StringName') -> None: ...
    def rename_node(self, name: 'StringName', new_name: 'StringName') -> None: ...
    def has_node(self, name: 'StringName') -> 'bool': ...
    def connect_node(self, input_node: 'StringName', input_index: 'int', output_node: 'StringName') -> None: ...
    def disconnect_node(self, input_node: 'StringName', input_index: 'int') -> None: ...
    def set_node_position(self, name: 'StringName', position: 'Vector2') -> None: ...
    def get_node_position(self, name: 'StringName') -> 'Vector2': ...
    def set_graph_offset(self, offset: 'Vector2') -> None: ...
    def get_graph_offset(self) -> 'Vector2': ...


class AnimationNodeExtension(AnimationNode):



    def _process_animation_node(self, playback_info: 'PackedFloat64Array', test_only: 'bool') -> 'PackedFloat32Array': ...
    @staticmethod
    def is_looping(node_info: 'PackedFloat32Array') -> 'bool': ...
    @staticmethod
    def get_remaining_time(node_info: 'PackedFloat32Array', break_loop: 'bool') -> 'float': ...


class AnimationNodeOneShot(AnimationNodeSync):


    mix_mode: 'int'
    fadein_time: 'float'
    fadein_curve: 'Curve'
    fadeout_time: 'float'
    fadeout_curve: 'Curve'
    break_loop_at_end: 'bool'
    autorestart: 'bool'
    autorestart_delay: 'float'
    autorestart_random_delay: 'float'

    def set_fadein_time(self, time: 'float') -> None: ...
    def get_fadein_time(self) -> 'float': ...
    def set_fadein_curve(self, curve: 'Curve') -> None: ...
    def get_fadein_curve(self) -> 'Curve': ...
    def set_fadeout_time(self, time: 'float') -> None: ...
    def get_fadeout_time(self) -> 'float': ...
    def set_fadeout_curve(self, curve: 'Curve') -> None: ...
    def get_fadeout_curve(self) -> 'Curve': ...
    def set_break_loop_at_end(self, enable: 'bool') -> None: ...
    def is_loop_broken_at_end(self) -> 'bool': ...
    def set_autorestart(self, active: 'bool') -> None: ...
    def has_autorestart(self) -> 'bool': ...
    def set_autorestart_delay(self, time: 'float') -> None: ...
    def get_autorestart_delay(self) -> 'float': ...
    def set_autorestart_random_delay(self, time: 'float') -> None: ...
    def get_autorestart_random_delay(self) -> 'float': ...
    def set_mix_mode(self, mode: 'AnimationNodeOneShot__MixMode') -> None: ...
    def get_mix_mode(self) -> 'AnimationNodeOneShot__MixMode': ...


class AnimationNodeOutput(AnimationNode): ...


class AnimationNodeStateMachine(AnimationRootNode):


    state_machine_type: 'int'
    allow_transition_to_self: 'bool'
    reset_ends: 'bool'

    def add_node(self, name: 'StringName', node: 'AnimationNode', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def replace_node(self, name: 'StringName', node: 'AnimationNode') -> None: ...
    def get_node(self, name: 'StringName') -> 'AnimationNode': ...
    def remove_node(self, name: 'StringName') -> None: ...
    def rename_node(self, name: 'StringName', new_name: 'StringName') -> None: ...
    def has_node(self, name: 'StringName') -> 'bool': ...
    def get_node_name(self, node: 'AnimationNode') -> 'StringName': ...
    def set_node_position(self, name: 'StringName', position: 'Vector2') -> None: ...
    def get_node_position(self, name: 'StringName') -> 'Vector2': ...
    def has_transition(self, from_: 'StringName', to: 'StringName') -> 'bool': ...
    def add_transition(self, from_: 'StringName', to: 'StringName', transition: 'AnimationNodeStateMachineTransition') -> None: ...
    def get_transition(self, idx: 'int') -> 'AnimationNodeStateMachineTransition': ...
    def get_transition_from(self, idx: 'int') -> 'StringName': ...
    def get_transition_to(self, idx: 'int') -> 'StringName': ...
    def get_transition_count(self) -> 'int': ...
    def remove_transition_by_index(self, idx: 'int') -> None: ...
    def remove_transition(self, from_: 'StringName', to: 'StringName') -> None: ...
    def set_graph_offset(self, offset: 'Vector2') -> None: ...
    def get_graph_offset(self) -> 'Vector2': ...
    def set_state_machine_type(self, state_machine_type: 'AnimationNodeStateMachine__StateMachineType') -> None: ...
    def get_state_machine_type(self) -> 'AnimationNodeStateMachine__StateMachineType': ...
    def set_allow_transition_to_self(self, enable: 'bool') -> None: ...
    def is_allow_transition_to_self(self) -> 'bool': ...
    def set_reset_ends(self, enable: 'bool') -> None: ...
    def are_ends_reset(self) -> 'bool': ...


class AnimationNodeStateMachinePlayback(Resource):



    def travel(self, to_node: 'StringName', reset_on_teleport: 'bool' = True) -> None: ...
    def start(self, node: 'StringName', reset: 'bool' = True) -> None: ...
    def next(self) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> 'bool': ...
    def get_current_node(self) -> 'StringName': ...
    def get_current_play_position(self) -> 'float': ...
    def get_current_length(self) -> 'float': ...
    def get_fading_from_node(self) -> 'StringName': ...
    def get_travel_path(self) -> 'Array'['StringName']: ...


class AnimationNodeStateMachineTransition(Resource):


    xfade_time: 'float'
    xfade_curve: 'Curve'
    break_loop_at_end: 'bool'
    reset: 'bool'
    priority: 'int'
    switch_mode: 'int'
    advance_mode: 'int'
    advance_condition: 'StringName'
    advance_expression: 'str'
    advance_condition_changed: 'Signal[Callable[[], None]]'  # advance_condition_changed()

    def set_switch_mode(self, mode: 'AnimationNodeStateMachineTransition__SwitchMode') -> None: ...
    def get_switch_mode(self) -> 'AnimationNodeStateMachineTransition__SwitchMode': ...
    def set_advance_mode(self, mode: 'AnimationNodeStateMachineTransition__AdvanceMode') -> None: ...
    def get_advance_mode(self) -> 'AnimationNodeStateMachineTransition__AdvanceMode': ...
    def set_advance_condition(self, name: 'StringName') -> None: ...
    def get_advance_condition(self) -> 'StringName': ...
    def set_xfade_time(self, secs: 'float') -> None: ...
    def get_xfade_time(self) -> 'float': ...
    def set_xfade_curve(self, curve: 'Curve') -> None: ...
    def get_xfade_curve(self) -> 'Curve': ...
    def set_break_loop_at_end(self, enable: 'bool') -> None: ...
    def is_loop_broken_at_end(self) -> 'bool': ...
    def set_reset(self, reset: 'bool') -> None: ...
    def is_reset(self) -> 'bool': ...
    def set_priority(self, priority: 'int') -> None: ...
    def get_priority(self) -> 'int': ...
    def set_advance_expression(self, text: 'str') -> None: ...
    def get_advance_expression(self) -> 'str': ...


class AnimationNodeSub2(AnimationNodeSync): ...


class AnimationNodeSync(AnimationNode):


    sync: 'bool'

    def set_use_sync(self, enable: 'bool') -> None: ...
    def is_using_sync(self) -> 'bool': ...


class AnimationNodeTimeScale(AnimationNode): ...


class AnimationNodeTimeSeek(AnimationNode):


    explicit_elapse: 'bool'

    def set_explicit_elapse(self, enable: 'bool') -> None: ...
    def is_explicit_elapse(self) -> 'bool': ...


class AnimationNodeTransition(AnimationNodeSync):


    xfade_time: 'float'
    xfade_curve: 'Curve'
    allow_transition_to_self: 'bool'
    input_count: 'int'

    def set_input_count(self, input_count: 'int') -> None: ...
    def set_input_as_auto_advance(self, input: 'int', enable: 'bool') -> None: ...
    def is_input_set_as_auto_advance(self, input: 'int') -> 'bool': ...
    def set_input_break_loop_at_end(self, input: 'int', enable: 'bool') -> None: ...
    def is_input_loop_broken_at_end(self, input: 'int') -> 'bool': ...
    def set_input_reset(self, input: 'int', enable: 'bool') -> None: ...
    def is_input_reset(self, input: 'int') -> 'bool': ...
    def set_xfade_time(self, time: 'float') -> None: ...
    def get_xfade_time(self) -> 'float': ...
    def set_xfade_curve(self, curve: 'Curve') -> None: ...
    def get_xfade_curve(self) -> 'Curve': ...
    def set_allow_transition_to_self(self, enable: 'bool') -> None: ...
    def is_allow_transition_to_self(self) -> 'bool': ...


class AnimationPlayer(AnimationMixer):


    current_animation: 'StringName'
    assigned_animation: 'StringName'
    autoplay: 'StringName'
    current_animation_length: 'float'
    current_animation_position: 'float'
    playback_auto_capture: 'bool'
    playback_auto_capture_duration: 'float'
    playback_auto_capture_transition_type: 'int'
    playback_auto_capture_ease_type: 'int'
    playback_default_blend_time: 'float'
    speed_scale: 'float'
    movie_quit_on_finish: 'bool'
    current_animation_changed: 'Signal[Callable[[str], None]]'  # current_animation_changed(name: String)
    animation_changed: 'Signal[Callable[[StringName, StringName], None]]'  # animation_changed(old_name: StringName, new_name: StringName)

    def animation_set_next(self, animation_from: 'StringName', animation_to: 'StringName') -> None: ...
    def animation_get_next(self, animation_from: 'StringName') -> 'StringName': ...
    def set_blend_time(self, animation_from: 'StringName', animation_to: 'StringName', sec: 'float') -> None: ...
    def get_blend_time(self, animation_from: 'StringName', animation_to: 'StringName') -> 'float': ...
    def set_default_blend_time(self, sec: 'float') -> None: ...
    def get_default_blend_time(self) -> 'float': ...
    def set_auto_capture(self, auto_capture: 'bool') -> None: ...
    def is_auto_capture(self) -> 'bool': ...
    def set_auto_capture_duration(self, auto_capture_duration: 'float') -> None: ...
    def get_auto_capture_duration(self) -> 'float': ...
    def set_auto_capture_transition_type(self, auto_capture_transition_type: 'Tween__TransitionType') -> None: ...
    def get_auto_capture_transition_type(self) -> 'Tween__TransitionType': ...
    def set_auto_capture_ease_type(self, auto_capture_ease_type: 'Tween__EaseType') -> None: ...
    def get_auto_capture_ease_type(self) -> 'Tween__EaseType': ...
    def play(self, name: 'StringName' = default('''&""'''), custom_blend: 'float' = -1, custom_speed: 'float' = 1.0, from_end: 'bool' = False) -> None: ...
    def play_section_with_markers(self, name: 'StringName' = default('''&""'''), start_marker: 'StringName' = default('''&""'''), end_marker: 'StringName' = default('''&""'''), custom_blend: 'float' = -1, custom_speed: 'float' = 1.0, from_end: 'bool' = False) -> None: ...
    def play_section(self, name: 'StringName' = default('''&""'''), start_time: 'float' = -1, end_time: 'float' = -1, custom_blend: 'float' = -1, custom_speed: 'float' = 1.0, from_end: 'bool' = False) -> None: ...
    def play_backwards(self, name: 'StringName' = default('''&""'''), custom_blend: 'float' = -1) -> None: ...
    def play_section_with_markers_backwards(self, name: 'StringName' = default('''&""'''), start_marker: 'StringName' = default('''&""'''), end_marker: 'StringName' = default('''&""'''), custom_blend: 'float' = -1) -> None: ...
    def play_section_backwards(self, name: 'StringName' = default('''&""'''), start_time: 'float' = -1, end_time: 'float' = -1, custom_blend: 'float' = -1) -> None: ...
    def play_with_capture(self, name: 'StringName' = default('''&""'''), duration: 'float' = -1.0, custom_blend: 'float' = -1, custom_speed: 'float' = 1.0, from_end: 'bool' = False, trans_type: 'Tween__TransitionType' = 0, ease_type: 'Tween__EaseType' = 0) -> None: ...
    def pause(self) -> None: ...
    def stop(self, keep_state: 'bool' = False) -> None: ...
    def is_playing(self) -> 'bool': ...
    def set_current_animation(self, animation: 'str') -> None: ...
    def get_current_animation(self) -> 'str': ...
    def set_assigned_animation(self, animation: 'str') -> None: ...
    def get_assigned_animation(self) -> 'str': ...
    def queue(self, name: 'StringName') -> None: ...
    def get_queue(self) -> 'PackedStringArray': ...
    def clear_queue(self) -> None: ...
    def set_speed_scale(self, speed: 'float') -> None: ...
    def get_speed_scale(self) -> 'float': ...
    def get_playing_speed(self) -> 'float': ...
    def set_autoplay(self, name: 'str') -> None: ...
    def get_autoplay(self) -> 'str': ...
    def set_movie_quit_on_finish_enabled(self, enabled: 'bool') -> None: ...
    def is_movie_quit_on_finish_enabled(self) -> 'bool': ...
    def get_current_animation_position(self) -> 'float': ...
    def get_current_animation_length(self) -> 'float': ...
    def set_section_with_markers(self, start_marker: 'StringName' = default('''&""'''), end_marker: 'StringName' = default('''&""''')) -> None: ...
    def set_section(self, start_time: 'float' = -1, end_time: 'float' = -1) -> None: ...
    def reset_section(self) -> None: ...
    def get_section_start_time(self) -> 'float': ...
    def get_section_end_time(self) -> 'float': ...
    def has_section(self) -> 'bool': ...
    def seek(self, seconds: 'float', update: 'bool' = False, update_only: 'bool' = False) -> None: ...
    def set_process_callback(self, mode: 'AnimationPlayer__AnimationProcessCallback') -> None: ...
    def get_process_callback(self) -> 'AnimationPlayer__AnimationProcessCallback': ...
    def set_method_call_mode(self, mode: 'AnimationPlayer__AnimationMethodCallMode') -> None: ...
    def get_method_call_mode(self) -> 'AnimationPlayer__AnimationMethodCallMode': ...
    def set_root(self, path: 'NodePath') -> None: ...
    def get_root(self) -> 'NodePath': ...


class AnimationRootNode(AnimationNode): ...


class AnimationTree(AnimationMixer):


    tree_root: 'AnimationRootNode'
    advance_expression_base_node: 'NodePath'
    anim_player: 'NodePath'
    animation_player_changed: 'Signal[Callable[[], None]]'  # animation_player_changed()

    def set_tree_root(self, animation_node: 'AnimationRootNode') -> None: ...
    def get_tree_root(self) -> 'AnimationRootNode': ...
    def set_advance_expression_base_node(self, path: 'NodePath') -> None: ...
    def get_advance_expression_base_node(self) -> 'NodePath': ...
    def set_animation_player(self, path: 'NodePath') -> None: ...
    def get_animation_player(self) -> 'NodePath': ...
    def set_process_callback(self, mode: 'AnimationTree__AnimationProcessCallback') -> None: ...
    def get_process_callback(self) -> 'AnimationTree__AnimationProcessCallback': ...


class Area2D(CollisionObject2D):


    monitoring: 'bool'
    monitorable: 'bool'
    priority: 'int'
    gravity_space_override: 'int'
    gravity_point: 'bool'
    gravity_point_unit_distance: 'float'
    gravity_point_center: 'Vector2'
    gravity_direction: 'Vector2'
    gravity: 'float'
    linear_damp_space_override: 'int'
    linear_damp: 'float'
    angular_damp_space_override: 'int'
    angular_damp: 'float'
    audio_bus_override: 'bool'
    audio_bus_name: 'StringName'
    body_shape_entered: 'Signal[Callable[[RID, Node2D, int, int], None]]'  # body_shape_entered(body_rid: RID, body: Node2D, body_shape_index: int, local_shape_index: int)
    body_shape_exited: 'Signal[Callable[[RID, Node2D, int, int], None]]'  # body_shape_exited(body_rid: RID, body: Node2D, body_shape_index: int, local_shape_index: int)
    body_entered: 'Signal[Callable[[Node2D], None]]'  # body_entered(body: Node2D)
    body_exited: 'Signal[Callable[[Node2D], None]]'  # body_exited(body: Node2D)
    area_shape_entered: 'Signal[Callable[[RID, Area2D, int, int], None]]'  # area_shape_entered(area_rid: RID, area: Area2D, area_shape_index: int, local_shape_index: int)
    area_shape_exited: 'Signal[Callable[[RID, Area2D, int, int], None]]'  # area_shape_exited(area_rid: RID, area: Area2D, area_shape_index: int, local_shape_index: int)
    area_entered: 'Signal[Callable[[Area2D], None]]'  # area_entered(area: Area2D)
    area_exited: 'Signal[Callable[[Area2D], None]]'  # area_exited(area: Area2D)

    def set_gravity_space_override_mode(self, space_override_mode: 'Area2D__SpaceOverride') -> None: ...
    def get_gravity_space_override_mode(self) -> 'Area2D__SpaceOverride': ...
    def set_gravity_is_point(self, enable: 'bool') -> None: ...
    def is_gravity_a_point(self) -> 'bool': ...
    def set_gravity_point_unit_distance(self, distance_scale: 'float') -> None: ...
    def get_gravity_point_unit_distance(self) -> 'float': ...
    def set_gravity_point_center(self, center: 'Vector2') -> None: ...
    def get_gravity_point_center(self) -> 'Vector2': ...
    def set_gravity_direction(self, direction: 'Vector2') -> None: ...
    def get_gravity_direction(self) -> 'Vector2': ...
    def set_gravity(self, gravity: 'float') -> None: ...
    def get_gravity(self) -> 'float': ...
    def set_linear_damp_space_override_mode(self, space_override_mode: 'Area2D__SpaceOverride') -> None: ...
    def get_linear_damp_space_override_mode(self) -> 'Area2D__SpaceOverride': ...
    def set_angular_damp_space_override_mode(self, space_override_mode: 'Area2D__SpaceOverride') -> None: ...
    def get_angular_damp_space_override_mode(self) -> 'Area2D__SpaceOverride': ...
    def set_linear_damp(self, linear_damp: 'float') -> None: ...
    def get_linear_damp(self) -> 'float': ...
    def set_angular_damp(self, angular_damp: 'float') -> None: ...
    def get_angular_damp(self) -> 'float': ...
    def set_priority(self, priority: 'int') -> None: ...
    def get_priority(self) -> 'int': ...
    def set_monitoring(self, enable: 'bool') -> None: ...
    def is_monitoring(self) -> 'bool': ...
    def set_monitorable(self, enable: 'bool') -> None: ...
    def is_monitorable(self) -> 'bool': ...
    def get_overlapping_bodies(self) -> 'Array'['Node2D']: ...
    def get_overlapping_areas(self) -> 'Array'['Area2D']: ...
    def has_overlapping_bodies(self) -> 'bool': ...
    def has_overlapping_areas(self) -> 'bool': ...
    def overlaps_body(self, body: 'Node') -> 'bool': ...
    def overlaps_area(self, area: 'Node') -> 'bool': ...
    def set_audio_bus_name(self, name: 'StringName') -> None: ...
    def get_audio_bus_name(self) -> 'StringName': ...
    def set_audio_bus_override(self, enable: 'bool') -> None: ...
    def is_overriding_audio_bus(self) -> 'bool': ...


class Area3D(CollisionObject3D):


    monitoring: 'bool'
    monitorable: 'bool'
    priority: 'int'
    gravity_space_override: 'int'
    gravity_point: 'bool'
    gravity_point_unit_distance: 'float'
    gravity_point_center: 'Vector3'
    gravity_direction: 'Vector3'
    gravity: 'float'
    linear_damp_space_override: 'int'
    linear_damp: 'float'
    angular_damp_space_override: 'int'
    angular_damp: 'float'
    wind_force_magnitude: 'float'
    wind_attenuation_factor: 'float'
    wind_source_path: 'NodePath'
    audio_bus_override: 'bool'
    audio_bus_name: 'StringName'
    reverb_bus_enabled: 'bool'
    reverb_bus_name: 'StringName'
    reverb_bus_amount: 'float'
    reverb_bus_uniformity: 'float'
    body_shape_entered: 'Signal[Callable[[RID, Node3D, int, int], None]]'  # body_shape_entered(body_rid: RID, body: Node3D, body_shape_index: int, local_shape_index: int)
    body_shape_exited: 'Signal[Callable[[RID, Node3D, int, int], None]]'  # body_shape_exited(body_rid: RID, body: Node3D, body_shape_index: int, local_shape_index: int)
    body_entered: 'Signal[Callable[[Node3D], None]]'  # body_entered(body: Node3D)
    body_exited: 'Signal[Callable[[Node3D], None]]'  # body_exited(body: Node3D)
    area_shape_entered: 'Signal[Callable[[RID, Area3D, int, int], None]]'  # area_shape_entered(area_rid: RID, area: Area3D, area_shape_index: int, local_shape_index: int)
    area_shape_exited: 'Signal[Callable[[RID, Area3D, int, int], None]]'  # area_shape_exited(area_rid: RID, area: Area3D, area_shape_index: int, local_shape_index: int)
    area_entered: 'Signal[Callable[[Area3D], None]]'  # area_entered(area: Area3D)
    area_exited: 'Signal[Callable[[Area3D], None]]'  # area_exited(area: Area3D)

    def set_gravity_space_override_mode(self, space_override_mode: 'Area3D__SpaceOverride') -> None: ...
    def get_gravity_space_override_mode(self) -> 'Area3D__SpaceOverride': ...
    def set_gravity_is_point(self, enable: 'bool') -> None: ...
    def is_gravity_a_point(self) -> 'bool': ...
    def set_gravity_point_unit_distance(self, distance_scale: 'float') -> None: ...
    def get_gravity_point_unit_distance(self) -> 'float': ...
    def set_gravity_point_center(self, center: 'Vector3') -> None: ...
    def get_gravity_point_center(self) -> 'Vector3': ...
    def set_gravity_direction(self, direction: 'Vector3') -> None: ...
    def get_gravity_direction(self) -> 'Vector3': ...
    def set_gravity(self, gravity: 'float') -> None: ...
    def get_gravity(self) -> 'float': ...
    def set_linear_damp_space_override_mode(self, space_override_mode: 'Area3D__SpaceOverride') -> None: ...
    def get_linear_damp_space_override_mode(self) -> 'Area3D__SpaceOverride': ...
    def set_angular_damp_space_override_mode(self, space_override_mode: 'Area3D__SpaceOverride') -> None: ...
    def get_angular_damp_space_override_mode(self) -> 'Area3D__SpaceOverride': ...
    def set_angular_damp(self, angular_damp: 'float') -> None: ...
    def get_angular_damp(self) -> 'float': ...
    def set_linear_damp(self, linear_damp: 'float') -> None: ...
    def get_linear_damp(self) -> 'float': ...
    def set_priority(self, priority: 'int') -> None: ...
    def get_priority(self) -> 'int': ...
    def set_wind_force_magnitude(self, wind_force_magnitude: 'float') -> None: ...
    def get_wind_force_magnitude(self) -> 'float': ...
    def set_wind_attenuation_factor(self, wind_attenuation_factor: 'float') -> None: ...
    def get_wind_attenuation_factor(self) -> 'float': ...
    def set_wind_source_path(self, wind_source_path: 'NodePath') -> None: ...
    def get_wind_source_path(self) -> 'NodePath': ...
    def set_monitorable(self, enable: 'bool') -> None: ...
    def is_monitorable(self) -> 'bool': ...
    def set_monitoring(self, enable: 'bool') -> None: ...
    def is_monitoring(self) -> 'bool': ...
    def get_overlapping_bodies(self) -> 'Array'['Node3D']: ...
    def get_overlapping_areas(self) -> 'Array'['Area3D']: ...
    def has_overlapping_bodies(self) -> 'bool': ...
    def has_overlapping_areas(self) -> 'bool': ...
    def overlaps_body(self, body: 'Node') -> 'bool': ...
    def overlaps_area(self, area: 'Node') -> 'bool': ...
    def set_audio_bus_override(self, enable: 'bool') -> None: ...
    def is_overriding_audio_bus(self) -> 'bool': ...
    def set_audio_bus_name(self, name: 'StringName') -> None: ...
    def get_audio_bus_name(self) -> 'StringName': ...
    def set_use_reverb_bus(self, enable: 'bool') -> None: ...
    def is_using_reverb_bus(self) -> 'bool': ...
    def set_reverb_bus_name(self, name: 'StringName') -> None: ...
    def get_reverb_bus_name(self) -> 'StringName': ...
    def set_reverb_amount(self, amount: 'float') -> None: ...
    def get_reverb_amount(self) -> 'float': ...
    def set_reverb_uniformity(self, amount: 'float') -> None: ...
    def get_reverb_uniformity(self) -> 'float': ...


class ArrayMesh(Mesh):


    blend_shape_mode: 'int'
    custom_aabb: 'AABB'
    shadow_mesh: 'ArrayMesh'

    def add_blend_shape(self, name: 'StringName') -> None: ...
    def get_blend_shape_count(self) -> 'int': ...
    def get_blend_shape_name(self, index: 'int') -> 'StringName': ...
    def set_blend_shape_name(self, index: 'int', name: 'StringName') -> None: ...
    def clear_blend_shapes(self) -> None: ...
    def set_blend_shape_mode(self, mode: 'Mesh__BlendShapeMode') -> None: ...
    def get_blend_shape_mode(self) -> 'Mesh__BlendShapeMode': ...
    def add_surface_from_arrays(self, primitive: 'Mesh__PrimitiveType', arrays: 'Array', blend_shapes: 'Array'['Array'] = default('''[]'''), lods: 'Dictionary' = default('''{}'''), flags: 'Mesh__ArrayFormat' = 0) -> None: ...
    def clear_surfaces(self) -> None: ...
    def surface_remove(self, surf_idx: 'int') -> None: ...
    def surface_update_vertex_region(self, surf_idx: 'int', offset: 'int', data: 'PackedByteArray') -> None: ...
    def surface_update_attribute_region(self, surf_idx: 'int', offset: 'int', data: 'PackedByteArray') -> None: ...
    def surface_update_skin_region(self, surf_idx: 'int', offset: 'int', data: 'PackedByteArray') -> None: ...
    def surface_get_array_len(self, surf_idx: 'int') -> 'int': ...
    def surface_get_array_index_len(self, surf_idx: 'int') -> 'int': ...
    def surface_get_format(self, surf_idx: 'int') -> 'Mesh__ArrayFormat': ...
    def surface_get_primitive_type(self, surf_idx: 'int') -> 'Mesh__PrimitiveType': ...
    def surface_find_by_name(self, name: 'str') -> 'int': ...
    def surface_set_name(self, surf_idx: 'int', name: 'str') -> None: ...
    def surface_get_name(self, surf_idx: 'int') -> 'str': ...
    def regen_normal_maps(self) -> None: ...
    def lightmap_unwrap(self, transform: 'Transform3D', texel_size: 'float') -> 'Error': ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    def set_shadow_mesh(self, mesh: 'ArrayMesh') -> None: ...
    def get_shadow_mesh(self) -> 'ArrayMesh': ...


class ArrayOccluder3D(Occluder3D):


    vertices: 'PackedVector3Array'
    indices: 'PackedInt32Array'

    def set_arrays(self, vertices: 'PackedVector3Array', indices: 'PackedInt32Array') -> None: ...
    def set_vertices(self, vertices: 'PackedVector3Array') -> None: ...
    def set_indices(self, indices: 'PackedInt32Array') -> None: ...


class AspectRatioContainer(Container):


    ratio: 'float'
    stretch_mode: 'int'
    alignment_horizontal: 'int'
    alignment_vertical: 'int'

    def set_ratio(self, ratio: 'float') -> None: ...
    def get_ratio(self) -> 'float': ...
    def set_stretch_mode(self, stretch_mode: 'AspectRatioContainer__StretchMode') -> None: ...
    def get_stretch_mode(self) -> 'AspectRatioContainer__StretchMode': ...
    def set_alignment_horizontal(self, alignment_horizontal: 'AspectRatioContainer__AlignmentMode') -> None: ...
    def get_alignment_horizontal(self) -> 'AspectRatioContainer__AlignmentMode': ...
    def set_alignment_vertical(self, alignment_vertical: 'AspectRatioContainer__AlignmentMode') -> None: ...
    def get_alignment_vertical(self) -> 'AspectRatioContainer__AlignmentMode': ...


class AtlasTexture(Texture2D):


    atlas: 'Texture2D'
    region: 'Rect2'
    margin: 'Rect2'
    filter_clip: 'bool'

    def set_atlas(self, atlas: 'Texture2D') -> None: ...
    def get_atlas(self) -> 'Texture2D': ...
    def set_region(self, region: 'Rect2') -> None: ...
    def get_region(self) -> 'Rect2': ...
    def set_margin(self, margin: 'Rect2') -> None: ...
    def get_margin(self) -> 'Rect2': ...
    def set_filter_clip(self, enable: 'bool') -> None: ...
    def has_filter_clip(self) -> 'bool': ...


class AudioBusLayout(Resource): ...


class AudioEffect(Resource):



    def _instantiate(self) -> 'AudioEffectInstance': ...


class AudioEffectAmplify(AudioEffect):


    volume_db: 'float'
    volume_linear: 'float'

    def set_volume_db(self, volume: 'float') -> None: ...
    def get_volume_db(self) -> 'float': ...
    def set_volume_linear(self, volume: 'float') -> None: ...
    def get_volume_linear(self) -> 'float': ...


class AudioEffectBandLimitFilter(AudioEffectFilter): ...


class AudioEffectBandPassFilter(AudioEffectFilter): ...


class AudioEffectCapture(AudioEffect):


    buffer_length: 'float'

    def can_get_buffer(self, frames: 'int') -> 'bool': ...
    def get_buffer(self, frames: 'int') -> 'PackedVector2Array': ...
    def clear_buffer(self) -> None: ...
    def set_buffer_length(self, buffer_length_seconds: 'float') -> None: ...
    def get_buffer_length(self) -> 'float': ...
    def get_frames_available(self) -> 'int': ...
    def get_discarded_frames(self) -> 'int': ...
    def get_buffer_length_frames(self) -> 'int': ...
    def get_pushed_frames(self) -> 'int': ...


class AudioEffectChorus(AudioEffect):


    voice_count: 'int'
    dry: 'float'
    wet: 'float'

    def set_voice_count(self, voices: 'int') -> None: ...
    def get_voice_count(self) -> 'int': ...
    def set_voice_delay_ms(self, voice_idx: 'int', delay_ms: 'float') -> None: ...
    def get_voice_delay_ms(self, voice_idx: 'int') -> 'float': ...
    def set_voice_rate_hz(self, voice_idx: 'int', rate_hz: 'float') -> None: ...
    def get_voice_rate_hz(self, voice_idx: 'int') -> 'float': ...
    def set_voice_depth_ms(self, voice_idx: 'int', depth_ms: 'float') -> None: ...
    def get_voice_depth_ms(self, voice_idx: 'int') -> 'float': ...
    def set_voice_level_db(self, voice_idx: 'int', level_db: 'float') -> None: ...
    def get_voice_level_db(self, voice_idx: 'int') -> 'float': ...
    def set_voice_cutoff_hz(self, voice_idx: 'int', cutoff_hz: 'float') -> None: ...
    def get_voice_cutoff_hz(self, voice_idx: 'int') -> 'float': ...
    def set_voice_pan(self, voice_idx: 'int', pan: 'float') -> None: ...
    def get_voice_pan(self, voice_idx: 'int') -> 'float': ...
    def set_wet(self, amount: 'float') -> None: ...
    def get_wet(self) -> 'float': ...
    def set_dry(self, amount: 'float') -> None: ...
    def get_dry(self) -> 'float': ...


class AudioEffectCompressor(AudioEffect):


    threshold: 'float'
    ratio: 'float'
    gain: 'float'
    attack_us: 'float'
    release_ms: 'float'
    mix: 'float'
    sidechain: 'StringName'

    def set_threshold(self, threshold: 'float') -> None: ...
    def get_threshold(self) -> 'float': ...
    def set_ratio(self, ratio: 'float') -> None: ...
    def get_ratio(self) -> 'float': ...
    def set_gain(self, gain: 'float') -> None: ...
    def get_gain(self) -> 'float': ...
    def set_attack_us(self, attack_us: 'float') -> None: ...
    def get_attack_us(self) -> 'float': ...
    def set_release_ms(self, release_ms: 'float') -> None: ...
    def get_release_ms(self) -> 'float': ...
    def set_mix(self, mix: 'float') -> None: ...
    def get_mix(self) -> 'float': ...
    def set_sidechain(self, sidechain: 'StringName') -> None: ...
    def get_sidechain(self) -> 'StringName': ...


class AudioEffectDelay(AudioEffect):


    dry: 'float'
    tap1_active: 'bool'
    tap1_delay_ms: 'float'
    tap1_level_db: 'float'
    tap1_pan: 'float'
    tap2_active: 'bool'
    tap2_delay_ms: 'float'
    tap2_level_db: 'float'
    tap2_pan: 'float'
    feedback_active: 'bool'
    feedback_delay_ms: 'float'
    feedback_level_db: 'float'
    feedback_lowpass: 'float'

    def set_dry(self, amount: 'float') -> None: ...
    def get_dry(self) -> 'float': ...
    def set_tap1_active(self, amount: 'bool') -> None: ...
    def is_tap1_active(self) -> 'bool': ...
    def set_tap1_delay_ms(self, amount: 'float') -> None: ...
    def get_tap1_delay_ms(self) -> 'float': ...
    def set_tap1_level_db(self, amount: 'float') -> None: ...
    def get_tap1_level_db(self) -> 'float': ...
    def set_tap1_pan(self, amount: 'float') -> None: ...
    def get_tap1_pan(self) -> 'float': ...
    def set_tap2_active(self, amount: 'bool') -> None: ...
    def is_tap2_active(self) -> 'bool': ...
    def set_tap2_delay_ms(self, amount: 'float') -> None: ...
    def get_tap2_delay_ms(self) -> 'float': ...
    def set_tap2_level_db(self, amount: 'float') -> None: ...
    def get_tap2_level_db(self) -> 'float': ...
    def set_tap2_pan(self, amount: 'float') -> None: ...
    def get_tap2_pan(self) -> 'float': ...
    def set_feedback_active(self, amount: 'bool') -> None: ...
    def is_feedback_active(self) -> 'bool': ...
    def set_feedback_delay_ms(self, amount: 'float') -> None: ...
    def get_feedback_delay_ms(self) -> 'float': ...
    def set_feedback_level_db(self, amount: 'float') -> None: ...
    def get_feedback_level_db(self) -> 'float': ...
    def set_feedback_lowpass(self, amount: 'float') -> None: ...
    def get_feedback_lowpass(self) -> 'float': ...


class AudioEffectDistortion(AudioEffect):


    mode: 'int'
    pre_gain: 'float'
    keep_hf_hz: 'float'
    drive: 'float'
    post_gain: 'float'

    def set_mode(self, mode: 'AudioEffectDistortion__Mode') -> None: ...
    def get_mode(self) -> 'AudioEffectDistortion__Mode': ...
    def set_pre_gain(self, pre_gain: 'float') -> None: ...
    def get_pre_gain(self) -> 'float': ...
    def set_keep_hf_hz(self, keep_hf_hz: 'float') -> None: ...
    def get_keep_hf_hz(self) -> 'float': ...
    def set_drive(self, drive: 'float') -> None: ...
    def get_drive(self) -> 'float': ...
    def set_post_gain(self, post_gain: 'float') -> None: ...
    def get_post_gain(self) -> 'float': ...


class AudioEffectEQ(AudioEffect):



    def set_band_gain_db(self, band_idx: 'int', volume_db: 'float') -> None: ...
    def get_band_gain_db(self, band_idx: 'int') -> 'float': ...
    def get_band_count(self) -> 'int': ...


class AudioEffectEQ10(AudioEffectEQ): ...


class AudioEffectEQ21(AudioEffectEQ): ...


class AudioEffectEQ6(AudioEffectEQ): ...


class AudioEffectFilter(AudioEffect):


    cutoff_hz: 'float'
    resonance: 'float'
    gain: 'float'
    db: 'int'

    def set_cutoff(self, freq: 'float') -> None: ...
    def get_cutoff(self) -> 'float': ...
    def set_resonance(self, amount: 'float') -> None: ...
    def get_resonance(self) -> 'float': ...
    def set_gain(self, amount: 'float') -> None: ...
    def get_gain(self) -> 'float': ...
    def set_db(self, amount: 'AudioEffectFilter__FilterDB') -> None: ...
    def get_db(self) -> 'AudioEffectFilter__FilterDB': ...


class AudioEffectHardLimiter(AudioEffect):


    pre_gain_db: 'float'
    ceiling_db: 'float'
    release: 'float'

    def set_ceiling_db(self, ceiling: 'float') -> None: ...
    def get_ceiling_db(self) -> 'float': ...
    def set_pre_gain_db(self, p_pre_gain: 'float') -> None: ...
    def get_pre_gain_db(self) -> 'float': ...
    def set_release(self, p_release: 'float') -> None: ...
    def get_release(self) -> 'float': ...


class AudioEffectHighPassFilter(AudioEffectFilter): ...


class AudioEffectHighShelfFilter(AudioEffectFilter): ...


class AudioEffectInstance(RefCounted):



    def _process(self, src_buffer: 'intptr', dst_buffer: 'intptr', frame_count: 'int') -> None: ...
    def _process_silence(self) -> 'bool': ...


class AudioEffectLimiter(AudioEffect):


    ceiling_db: 'float'
    threshold_db: 'float'
    soft_clip_db: 'float'
    soft_clip_ratio: 'float'

    def set_ceiling_db(self, ceiling: 'float') -> None: ...
    def get_ceiling_db(self) -> 'float': ...
    def set_threshold_db(self, threshold: 'float') -> None: ...
    def get_threshold_db(self) -> 'float': ...
    def set_soft_clip_db(self, soft_clip: 'float') -> None: ...
    def get_soft_clip_db(self) -> 'float': ...
    def set_soft_clip_ratio(self, soft_clip: 'float') -> None: ...
    def get_soft_clip_ratio(self) -> 'float': ...


class AudioEffectLowPassFilter(AudioEffectFilter): ...


class AudioEffectLowShelfFilter(AudioEffectFilter): ...


class AudioEffectNotchFilter(AudioEffectFilter): ...


class AudioEffectPanner(AudioEffect):


    pan: 'float'

    def set_pan(self, cpanume: 'float') -> None: ...
    def get_pan(self) -> 'float': ...


class AudioEffectPhaser(AudioEffect):


    range_min_hz: 'float'
    range_max_hz: 'float'
    rate_hz: 'float'
    feedback: 'float'
    depth: 'float'

    def set_range_min_hz(self, hz: 'float') -> None: ...
    def get_range_min_hz(self) -> 'float': ...
    def set_range_max_hz(self, hz: 'float') -> None: ...
    def get_range_max_hz(self) -> 'float': ...
    def set_rate_hz(self, hz: 'float') -> None: ...
    def get_rate_hz(self) -> 'float': ...
    def set_feedback(self, fbk: 'float') -> None: ...
    def get_feedback(self) -> 'float': ...
    def set_depth(self, depth: 'float') -> None: ...
    def get_depth(self) -> 'float': ...


class AudioEffectPitchShift(AudioEffect):


    pitch_scale: 'float'
    oversampling: 'float'
    fft_size: 'int'

    def set_pitch_scale(self, rate: 'float') -> None: ...
    def get_pitch_scale(self) -> 'float': ...
    def set_oversampling(self, amount: 'int') -> None: ...
    def get_oversampling(self) -> 'int': ...
    def set_fft_size(self, size: 'AudioEffectPitchShift__FFTSize') -> None: ...
    def get_fft_size(self) -> 'AudioEffectPitchShift__FFTSize': ...


class AudioEffectRecord(AudioEffect):


    format: 'int'

    def set_recording_active(self, record: 'bool') -> None: ...
    def is_recording_active(self) -> 'bool': ...
    def set_format(self, format: 'AudioStreamWAV__Format') -> None: ...
    def get_format(self) -> 'AudioStreamWAV__Format': ...
    def get_recording(self) -> 'AudioStreamWAV': ...


class AudioEffectReverb(AudioEffect):


    predelay_msec: 'float'
    predelay_feedback: 'float'
    room_size: 'float'
    damping: 'float'
    spread: 'float'
    hipass: 'float'
    dry: 'float'
    wet: 'float'

    def set_predelay_msec(self, msec: 'float') -> None: ...
    def get_predelay_msec(self) -> 'float': ...
    def set_predelay_feedback(self, feedback: 'float') -> None: ...
    def get_predelay_feedback(self) -> 'float': ...
    def set_room_size(self, size: 'float') -> None: ...
    def get_room_size(self) -> 'float': ...
    def set_damping(self, amount: 'float') -> None: ...
    def get_damping(self) -> 'float': ...
    def set_spread(self, amount: 'float') -> None: ...
    def get_spread(self) -> 'float': ...
    def set_dry(self, amount: 'float') -> None: ...
    def get_dry(self) -> 'float': ...
    def set_wet(self, amount: 'float') -> None: ...
    def get_wet(self) -> 'float': ...
    def set_hpf(self, amount: 'float') -> None: ...
    def get_hpf(self) -> 'float': ...


class AudioEffectSpectrumAnalyzer(AudioEffect):


    buffer_length: 'float'
    tap_back_pos: 'float'
    fft_size: 'int'

    def set_buffer_length(self, seconds: 'float') -> None: ...
    def get_buffer_length(self) -> 'float': ...
    def set_tap_back_pos(self, seconds: 'float') -> None: ...
    def get_tap_back_pos(self) -> 'float': ...
    def set_fft_size(self, size: 'AudioEffectSpectrumAnalyzer__FFTSize') -> None: ...
    def get_fft_size(self) -> 'AudioEffectSpectrumAnalyzer__FFTSize': ...


class AudioEffectSpectrumAnalyzerInstance(AudioEffectInstance):



    def get_magnitude_for_frequency_range(self, from_hz: 'float', to_hz: 'float', mode: 'AudioEffectSpectrumAnalyzerInstance__MagnitudeMode' = 1) -> 'Vector2': ...


class AudioEffectStereoEnhance(AudioEffect):


    pan_pullout: 'float'
    time_pullout_ms: 'float'
    surround: 'float'

    def set_pan_pullout(self, amount: 'float') -> None: ...
    def get_pan_pullout(self) -> 'float': ...
    def set_time_pullout(self, amount: 'float') -> None: ...
    def get_time_pullout(self) -> 'float': ...
    def set_surround(self, amount: 'float') -> None: ...
    def get_surround(self) -> 'float': ...


class AudioListener2D(Node2D):



    def make_current(self) -> None: ...
    def clear_current(self) -> None: ...
    def is_current(self) -> 'bool': ...


class AudioListener3D(Node3D):



    def make_current(self) -> None: ...
    def clear_current(self) -> None: ...
    def is_current(self) -> 'bool': ...
    def get_listener_transform(self) -> 'Transform3D': ...


class AudioSample(RefCounted): ...


class AudioSamplePlayback(RefCounted): ...


class AudioServer(Object):


    bus_count: 'int'
    output_device: 'str'
    input_device: 'str'
    playback_speed_scale: 'float'
    bus_layout_changed: 'Signal[Callable[[], None]]'  # bus_layout_changed()
    bus_renamed: 'Signal[Callable[[int, StringName, StringName], None]]'  # bus_renamed(bus_index: int, old_name: StringName, new_name: StringName)

    def set_bus_count(self, amount: 'int') -> None: ...
    def get_bus_count(self) -> 'int': ...
    def remove_bus(self, index: 'int') -> None: ...
    def add_bus(self, at_position: 'int' = -1) -> None: ...
    def move_bus(self, index: 'int', to_index: 'int') -> None: ...
    def set_bus_name(self, bus_idx: 'int', name: 'str') -> None: ...
    def get_bus_name(self, bus_idx: 'int') -> 'str': ...
    def get_bus_index(self, bus_name: 'StringName') -> 'int': ...
    def get_bus_channels(self, bus_idx: 'int') -> 'int': ...
    def set_bus_volume_db(self, bus_idx: 'int', volume_db: 'float') -> None: ...
    def get_bus_volume_db(self, bus_idx: 'int') -> 'float': ...
    def set_bus_volume_linear(self, bus_idx: 'int', volume_linear: 'float') -> None: ...
    def get_bus_volume_linear(self, bus_idx: 'int') -> 'float': ...
    def set_bus_send(self, bus_idx: 'int', send: 'StringName') -> None: ...
    def get_bus_send(self, bus_idx: 'int') -> 'StringName': ...
    def set_bus_solo(self, bus_idx: 'int', enable: 'bool') -> None: ...
    def is_bus_solo(self, bus_idx: 'int') -> 'bool': ...
    def set_bus_mute(self, bus_idx: 'int', enable: 'bool') -> None: ...
    def is_bus_mute(self, bus_idx: 'int') -> 'bool': ...
    def set_bus_bypass_effects(self, bus_idx: 'int', enable: 'bool') -> None: ...
    def is_bus_bypassing_effects(self, bus_idx: 'int') -> 'bool': ...
    def add_bus_effect(self, bus_idx: 'int', effect: 'AudioEffect', at_position: 'int' = -1) -> None: ...
    def remove_bus_effect(self, bus_idx: 'int', effect_idx: 'int') -> None: ...
    def get_bus_effect_count(self, bus_idx: 'int') -> 'int': ...
    def get_bus_effect(self, bus_idx: 'int', effect_idx: 'int') -> 'AudioEffect': ...
    def get_bus_effect_instance(self, bus_idx: 'int', effect_idx: 'int', channel: 'int' = 0) -> 'AudioEffectInstance': ...
    def swap_bus_effects(self, bus_idx: 'int', effect_idx: 'int', by_effect_idx: 'int') -> None: ...
    def set_bus_effect_enabled(self, bus_idx: 'int', effect_idx: 'int', enabled: 'bool') -> None: ...
    def is_bus_effect_enabled(self, bus_idx: 'int', effect_idx: 'int') -> 'bool': ...
    def get_bus_peak_volume_left_db(self, bus_idx: 'int', channel: 'int') -> 'float': ...
    def get_bus_peak_volume_right_db(self, bus_idx: 'int', channel: 'int') -> 'float': ...
    def set_playback_speed_scale(self, scale: 'float') -> None: ...
    def get_playback_speed_scale(self) -> 'float': ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def get_speaker_mode(self) -> 'AudioServer__SpeakerMode': ...
    def get_mix_rate(self) -> 'float': ...
    def get_input_mix_rate(self) -> 'float': ...
    def get_driver_name(self) -> 'str': ...
    def get_output_device_list(self) -> 'PackedStringArray': ...
    def get_output_device(self) -> 'str': ...
    def set_output_device(self, name: 'str') -> None: ...
    def get_time_to_next_mix(self) -> 'float': ...
    def get_time_since_last_mix(self) -> 'float': ...
    def get_output_latency(self) -> 'float': ...
    def get_input_device_list(self) -> 'PackedStringArray': ...
    def get_input_device(self) -> 'str': ...
    def set_input_device(self, name: 'str') -> None: ...
    def set_bus_layout(self, bus_layout: 'AudioBusLayout') -> None: ...
    def generate_bus_layout(self) -> 'AudioBusLayout': ...
    def set_enable_tagging_used_audio_streams(self, enable: 'bool') -> None: ...
    def is_stream_registered_as_sample(self, stream: 'AudioStream') -> 'bool': ...
    def register_stream_as_sample(self, stream: 'AudioStream') -> None: ...


class AudioStream(Resource):


    parameter_list_changed: 'Signal[Callable[[], None]]'  # parameter_list_changed()

    def _instantiate_playback(self) -> 'AudioStreamPlayback': ...
    def _get_stream_name(self) -> 'str': ...
    def _get_length(self) -> 'float': ...
    def _is_monophonic(self) -> 'bool': ...
    def _get_bpm(self) -> 'float': ...
    def _get_beat_count(self) -> 'int': ...
    def _get_parameter_list(self) -> 'Array'['Dictionary']: ...
    def _has_loop(self) -> 'bool': ...
    def _get_bar_beats(self) -> 'int': ...
    def get_length(self) -> 'float': ...
    def is_monophonic(self) -> 'bool': ...
    def instantiate_playback(self) -> 'AudioStreamPlayback': ...
    def can_be_sampled(self) -> 'bool': ...
    def generate_sample(self) -> 'AudioSample': ...
    def is_meta_stream(self) -> 'bool': ...


class AudioStreamGenerator(AudioStream):


    mix_rate_mode: 'int'
    mix_rate: 'float'
    buffer_length: 'float'

    def set_mix_rate(self, hz: 'float') -> None: ...
    def get_mix_rate(self) -> 'float': ...
    def set_mix_rate_mode(self, mode: 'AudioStreamGenerator__AudioStreamGeneratorMixRate') -> None: ...
    def get_mix_rate_mode(self) -> 'AudioStreamGenerator__AudioStreamGeneratorMixRate': ...
    def set_buffer_length(self, seconds: 'float') -> None: ...
    def get_buffer_length(self) -> 'float': ...


class AudioStreamGeneratorPlayback(AudioStreamPlaybackResampled):



    def push_frame(self, frame: 'Vector2') -> 'bool': ...
    def can_push_buffer(self, amount: 'int') -> 'bool': ...
    def push_buffer(self, frames: 'PackedVector2Array') -> 'bool': ...
    def get_frames_available(self) -> 'int': ...
    def get_skips(self) -> 'int': ...
    def clear_buffer(self) -> None: ...


class AudioStreamInteractive(AudioStream):


    clip_count: 'int'
    initial_clip: 'int'
    CLIP_ANY: 'int' = -1

    def set_clip_count(self, clip_count: 'int') -> None: ...
    def get_clip_count(self) -> 'int': ...
    def set_initial_clip(self, clip_index: 'int') -> None: ...
    def get_initial_clip(self) -> 'int': ...
    def set_clip_name(self, clip_index: 'int', name: 'StringName') -> None: ...
    def get_clip_name(self, clip_index: 'int') -> 'StringName': ...
    def set_clip_stream(self, clip_index: 'int', stream: 'AudioStream') -> None: ...
    def get_clip_stream(self, clip_index: 'int') -> 'AudioStream': ...
    def set_clip_auto_advance(self, clip_index: 'int', mode: 'AudioStreamInteractive__AutoAdvanceMode') -> None: ...
    def get_clip_auto_advance(self, clip_index: 'int') -> 'AudioStreamInteractive__AutoAdvanceMode': ...
    def set_clip_auto_advance_next_clip(self, clip_index: 'int', auto_advance_next_clip: 'int') -> None: ...
    def get_clip_auto_advance_next_clip(self, clip_index: 'int') -> 'int': ...
    def add_transition(self, from_clip: 'int', to_clip: 'int', from_time: 'AudioStreamInteractive__TransitionFromTime', to_time: 'AudioStreamInteractive__TransitionToTime', fade_mode: 'AudioStreamInteractive__FadeMode', fade_beats: 'float', use_filler_clip: 'bool' = False, filler_clip: 'int' = -1, hold_previous: 'bool' = False) -> None: ...
    def has_transition(self, from_clip: 'int', to_clip: 'int') -> 'bool': ...
    def erase_transition(self, from_clip: 'int', to_clip: 'int') -> None: ...
    def get_transition_list(self) -> 'PackedInt32Array': ...
    def get_transition_from_time(self, from_clip: 'int', to_clip: 'int') -> 'AudioStreamInteractive__TransitionFromTime': ...
    def get_transition_to_time(self, from_clip: 'int', to_clip: 'int') -> 'AudioStreamInteractive__TransitionToTime': ...
    def get_transition_fade_mode(self, from_clip: 'int', to_clip: 'int') -> 'AudioStreamInteractive__FadeMode': ...
    def get_transition_fade_beats(self, from_clip: 'int', to_clip: 'int') -> 'float': ...
    def is_transition_using_filler_clip(self, from_clip: 'int', to_clip: 'int') -> 'bool': ...
    def get_transition_filler_clip(self, from_clip: 'int', to_clip: 'int') -> 'int': ...
    def is_transition_holding_previous(self, from_clip: 'int', to_clip: 'int') -> 'bool': ...


class AudioStreamMP3(AudioStream):


    data: 'PackedByteArray'
    bpm: 'float'
    beat_count: 'int'
    bar_beats: 'int'
    loop: 'bool'
    loop_offset: 'float'

    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray') -> 'AudioStreamMP3': ...
    @staticmethod
    def load_from_file(path: 'str') -> 'AudioStreamMP3': ...
    def set_data(self, data: 'PackedByteArray') -> None: ...
    def get_data(self) -> 'PackedByteArray': ...
    def set_loop(self, enable: 'bool') -> None: ...
    def has_loop(self) -> 'bool': ...
    def set_loop_offset(self, seconds: 'float') -> None: ...
    def get_loop_offset(self) -> 'float': ...
    def set_bpm(self, bpm: 'float') -> None: ...
    def get_bpm(self) -> 'float': ...
    def set_beat_count(self, count: 'int') -> None: ...
    def get_beat_count(self) -> 'int': ...
    def set_bar_beats(self, count: 'int') -> None: ...
    def get_bar_beats(self) -> 'int': ...


class AudioStreamMicrophone(AudioStream): ...


class AudioStreamOggVorbis(AudioStream):


    packet_sequence: 'Object'
    bpm: 'float'
    beat_count: 'int'
    bar_beats: 'int'
    loop: 'bool'
    loop_offset: 'float'

    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray') -> 'AudioStreamOggVorbis': ...
    @staticmethod
    def load_from_file(path: 'str') -> 'AudioStreamOggVorbis': ...
    def set_packet_sequence(self, packet_sequence: 'OggPacketSequence') -> None: ...
    def get_packet_sequence(self) -> 'OggPacketSequence': ...
    def set_loop(self, enable: 'bool') -> None: ...
    def has_loop(self) -> 'bool': ...
    def set_loop_offset(self, seconds: 'float') -> None: ...
    def get_loop_offset(self) -> 'float': ...
    def set_bpm(self, bpm: 'float') -> None: ...
    def get_bpm(self) -> 'float': ...
    def set_beat_count(self, count: 'int') -> None: ...
    def get_beat_count(self) -> 'int': ...
    def set_bar_beats(self, count: 'int') -> None: ...
    def get_bar_beats(self) -> 'int': ...


class AudioStreamPlayback(RefCounted):



    def _start(self, from_pos: 'float') -> None: ...
    def _stop(self) -> None: ...
    def _is_playing(self) -> 'bool': ...
    def _get_loop_count(self) -> 'int': ...
    def _get_playback_position(self) -> 'float': ...
    def _seek(self, position: 'float') -> None: ...
    def _mix(self, buffer: 'intptr', rate_scale: 'float', frames: 'int') -> 'int': ...
    def _tag_used_streams(self) -> None: ...
    def _set_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def _get_parameter(self, name: 'StringName') -> 'Variant': ...
    def set_sample_playback(self, playback_sample: 'AudioSamplePlayback') -> None: ...
    def get_sample_playback(self) -> 'AudioSamplePlayback': ...
    def mix_audio(self, rate_scale: 'float', frames: 'int') -> 'PackedVector2Array': ...
    def start(self, from_pos: 'float' = 0.0) -> None: ...
    def seek(self, time: 'float' = 0.0) -> None: ...
    def stop(self) -> None: ...
    def get_loop_count(self) -> 'int': ...
    def get_playback_position(self) -> 'float': ...
    def is_playing(self) -> 'bool': ...


class AudioStreamPlaybackInteractive(AudioStreamPlayback):



    def switch_to_clip_by_name(self, clip_name: 'StringName') -> None: ...
    def switch_to_clip(self, clip_index: 'int') -> None: ...
    def get_current_clip_index(self) -> 'int': ...


class AudioStreamPlaybackOggVorbis(AudioStreamPlaybackResampled): ...


class AudioStreamPlaybackPlaylist(AudioStreamPlayback): ...


class AudioStreamPlaybackPolyphonic(AudioStreamPlayback):


    INVALID_ID: 'int' = -1

    def play_stream(self, stream: 'AudioStream', from_offset: 'float' = 0, volume_db: 'float' = 0, pitch_scale: 'float' = 1.0, playback_type: 'AudioServer__PlaybackType' = 0, bus: 'StringName' = default('''&"Master"''')) -> 'int': ...
    def set_stream_volume(self, stream: 'int', volume_db: 'float') -> None: ...
    def set_stream_pitch_scale(self, stream: 'int', pitch_scale: 'float') -> None: ...
    def is_stream_playing(self, stream: 'int') -> 'bool': ...
    def stop_stream(self, stream: 'int') -> None: ...


class AudioStreamPlaybackResampled(AudioStreamPlayback):



    def _mix_resampled(self, dst_buffer: 'intptr', frame_count: 'int') -> 'int': ...
    def _get_stream_sampling_rate(self) -> 'float': ...
    def begin_resample(self) -> None: ...


class AudioStreamPlaybackSynchronized(AudioStreamPlayback): ...


class AudioStreamPlayer(Node):


    stream: 'AudioStream'
    volume_db: 'float'
    volume_linear: 'float'
    pitch_scale: 'float'
    playing: 'bool'
    autoplay: 'bool'
    stream_paused: 'bool'
    mix_target: 'int'
    max_polyphony: 'int'
    bus: 'StringName'
    playback_type: 'int'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_stream(self, stream: 'AudioStream') -> None: ...
    def get_stream(self) -> 'AudioStream': ...
    def set_volume_db(self, volume_db: 'float') -> None: ...
    def get_volume_db(self) -> 'float': ...
    def set_volume_linear(self, volume_linear: 'float') -> None: ...
    def get_volume_linear(self) -> 'float': ...
    def set_pitch_scale(self, pitch_scale: 'float') -> None: ...
    def get_pitch_scale(self) -> 'float': ...
    def play(self, from_position: 'float' = 0.0) -> None: ...
    def seek(self, to_position: 'float') -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> 'bool': ...
    def get_playback_position(self) -> 'float': ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def set_autoplay(self, enable: 'bool') -> None: ...
    def is_autoplay_enabled(self) -> 'bool': ...
    def set_mix_target(self, mix_target: 'AudioStreamPlayer__MixTarget') -> None: ...
    def get_mix_target(self) -> 'AudioStreamPlayer__MixTarget': ...
    def set_playing(self, enable: 'bool') -> None: ...
    def set_stream_paused(self, pause: 'bool') -> None: ...
    def get_stream_paused(self) -> 'bool': ...
    def set_max_polyphony(self, max_polyphony: 'int') -> None: ...
    def get_max_polyphony(self) -> 'int': ...
    def has_stream_playback(self) -> 'bool': ...
    def get_stream_playback(self) -> 'AudioStreamPlayback': ...
    def set_playback_type(self, playback_type: 'AudioServer__PlaybackType') -> None: ...
    def get_playback_type(self) -> 'AudioServer__PlaybackType': ...


class AudioStreamPlayer2D(Node2D):


    stream: 'AudioStream'
    volume_db: 'float'
    volume_linear: 'float'
    pitch_scale: 'float'
    playing: 'bool'
    autoplay: 'bool'
    stream_paused: 'bool'
    max_distance: 'float'
    attenuation: 'float'
    max_polyphony: 'int'
    panning_strength: 'float'
    bus: 'StringName'
    area_mask: 'int'
    playback_type: 'int'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_stream(self, stream: 'AudioStream') -> None: ...
    def get_stream(self) -> 'AudioStream': ...
    def set_volume_db(self, volume_db: 'float') -> None: ...
    def get_volume_db(self) -> 'float': ...
    def set_volume_linear(self, volume_linear: 'float') -> None: ...
    def get_volume_linear(self) -> 'float': ...
    def set_pitch_scale(self, pitch_scale: 'float') -> None: ...
    def get_pitch_scale(self) -> 'float': ...
    def play(self, from_position: 'float' = 0.0) -> None: ...
    def seek(self, to_position: 'float') -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> 'bool': ...
    def get_playback_position(self) -> 'float': ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def set_autoplay(self, enable: 'bool') -> None: ...
    def is_autoplay_enabled(self) -> 'bool': ...
    def set_playing(self, enable: 'bool') -> None: ...
    def set_max_distance(self, pixels: 'float') -> None: ...
    def get_max_distance(self) -> 'float': ...
    def set_attenuation(self, curve: 'float') -> None: ...
    def get_attenuation(self) -> 'float': ...
    def set_area_mask(self, mask: 'int') -> None: ...
    def get_area_mask(self) -> 'int': ...
    def set_stream_paused(self, pause: 'bool') -> None: ...
    def get_stream_paused(self) -> 'bool': ...
    def set_max_polyphony(self, max_polyphony: 'int') -> None: ...
    def get_max_polyphony(self) -> 'int': ...
    def set_panning_strength(self, panning_strength: 'float') -> None: ...
    def get_panning_strength(self) -> 'float': ...
    def has_stream_playback(self) -> 'bool': ...
    def get_stream_playback(self) -> 'AudioStreamPlayback': ...
    def set_playback_type(self, playback_type: 'AudioServer__PlaybackType') -> None: ...
    def get_playback_type(self) -> 'AudioServer__PlaybackType': ...


class AudioStreamPlayer3D(Node3D):


    stream: 'AudioStream'
    attenuation_model: 'int'
    volume_db: 'float'
    volume_linear: 'float'
    unit_size: 'float'
    max_db: 'float'
    pitch_scale: 'float'
    playing: 'bool'
    autoplay: 'bool'
    stream_paused: 'bool'
    max_distance: 'float'
    max_polyphony: 'int'
    panning_strength: 'float'
    bus: 'StringName'
    area_mask: 'int'
    playback_type: 'int'
    emission_angle_enabled: 'bool'
    emission_angle_degrees: 'float'
    emission_angle_filter_attenuation_db: 'float'
    attenuation_filter_cutoff_hz: 'float'
    attenuation_filter_db: 'float'
    doppler_tracking: 'int'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_stream(self, stream: 'AudioStream') -> None: ...
    def get_stream(self) -> 'AudioStream': ...
    def set_volume_db(self, volume_db: 'float') -> None: ...
    def get_volume_db(self) -> 'float': ...
    def set_volume_linear(self, volume_linear: 'float') -> None: ...
    def get_volume_linear(self) -> 'float': ...
    def set_unit_size(self, unit_size: 'float') -> None: ...
    def get_unit_size(self) -> 'float': ...
    def set_max_db(self, max_db: 'float') -> None: ...
    def get_max_db(self) -> 'float': ...
    def set_pitch_scale(self, pitch_scale: 'float') -> None: ...
    def get_pitch_scale(self) -> 'float': ...
    def play(self, from_position: 'float' = 0.0) -> None: ...
    def seek(self, to_position: 'float') -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> 'bool': ...
    def get_playback_position(self) -> 'float': ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def set_autoplay(self, enable: 'bool') -> None: ...
    def is_autoplay_enabled(self) -> 'bool': ...
    def set_playing(self, enable: 'bool') -> None: ...
    def set_max_distance(self, meters: 'float') -> None: ...
    def get_max_distance(self) -> 'float': ...
    def set_area_mask(self, mask: 'int') -> None: ...
    def get_area_mask(self) -> 'int': ...
    def set_emission_angle(self, degrees: 'float') -> None: ...
    def get_emission_angle(self) -> 'float': ...
    def set_emission_angle_enabled(self, enabled: 'bool') -> None: ...
    def is_emission_angle_enabled(self) -> 'bool': ...
    def set_emission_angle_filter_attenuation_db(self, db: 'float') -> None: ...
    def get_emission_angle_filter_attenuation_db(self) -> 'float': ...
    def set_attenuation_filter_cutoff_hz(self, degrees: 'float') -> None: ...
    def get_attenuation_filter_cutoff_hz(self) -> 'float': ...
    def set_attenuation_filter_db(self, db: 'float') -> None: ...
    def get_attenuation_filter_db(self) -> 'float': ...
    def set_attenuation_model(self, model: 'AudioStreamPlayer3D__AttenuationModel') -> None: ...
    def get_attenuation_model(self) -> 'AudioStreamPlayer3D__AttenuationModel': ...
    def set_doppler_tracking(self, mode: 'AudioStreamPlayer3D__DopplerTracking') -> None: ...
    def get_doppler_tracking(self) -> 'AudioStreamPlayer3D__DopplerTracking': ...
    def set_stream_paused(self, pause: 'bool') -> None: ...
    def get_stream_paused(self) -> 'bool': ...
    def set_max_polyphony(self, max_polyphony: 'int') -> None: ...
    def get_max_polyphony(self) -> 'int': ...
    def set_panning_strength(self, panning_strength: 'float') -> None: ...
    def get_panning_strength(self) -> 'float': ...
    def has_stream_playback(self) -> 'bool': ...
    def get_stream_playback(self) -> 'AudioStreamPlayback': ...
    def set_playback_type(self, playback_type: 'AudioServer__PlaybackType') -> None: ...
    def get_playback_type(self) -> 'AudioServer__PlaybackType': ...


class AudioStreamPlaylist(AudioStream):


    shuffle: 'bool'
    loop: 'bool'
    fade_time: 'float'
    stream_count: 'int'
    stream_0: 'AudioStream'
    stream_1: 'AudioStream'
    stream_2: 'AudioStream'
    stream_3: 'AudioStream'
    stream_4: 'AudioStream'
    stream_5: 'AudioStream'
    stream_6: 'AudioStream'
    stream_7: 'AudioStream'
    stream_8: 'AudioStream'
    stream_9: 'AudioStream'
    stream_10: 'AudioStream'
    stream_11: 'AudioStream'
    stream_12: 'AudioStream'
    stream_13: 'AudioStream'
    stream_14: 'AudioStream'
    stream_15: 'AudioStream'
    stream_16: 'AudioStream'
    stream_17: 'AudioStream'
    stream_18: 'AudioStream'
    stream_19: 'AudioStream'
    stream_20: 'AudioStream'
    stream_21: 'AudioStream'
    stream_22: 'AudioStream'
    stream_23: 'AudioStream'
    stream_24: 'AudioStream'
    stream_25: 'AudioStream'
    stream_26: 'AudioStream'
    stream_27: 'AudioStream'
    stream_28: 'AudioStream'
    stream_29: 'AudioStream'
    stream_30: 'AudioStream'
    stream_31: 'AudioStream'
    stream_32: 'AudioStream'
    stream_33: 'AudioStream'
    stream_34: 'AudioStream'
    stream_35: 'AudioStream'
    stream_36: 'AudioStream'
    stream_37: 'AudioStream'
    stream_38: 'AudioStream'
    stream_39: 'AudioStream'
    stream_40: 'AudioStream'
    stream_41: 'AudioStream'
    stream_42: 'AudioStream'
    stream_43: 'AudioStream'
    stream_44: 'AudioStream'
    stream_45: 'AudioStream'
    stream_46: 'AudioStream'
    stream_47: 'AudioStream'
    stream_48: 'AudioStream'
    stream_49: 'AudioStream'
    stream_50: 'AudioStream'
    stream_51: 'AudioStream'
    stream_52: 'AudioStream'
    stream_53: 'AudioStream'
    stream_54: 'AudioStream'
    stream_55: 'AudioStream'
    stream_56: 'AudioStream'
    stream_57: 'AudioStream'
    stream_58: 'AudioStream'
    stream_59: 'AudioStream'
    stream_60: 'AudioStream'
    stream_61: 'AudioStream'
    stream_62: 'AudioStream'
    stream_63: 'AudioStream'
    MAX_STREAMS: 'int' = 64

    def set_stream_count(self, stream_count: 'int') -> None: ...
    def get_stream_count(self) -> 'int': ...
    def get_bpm(self) -> 'float': ...
    def set_list_stream(self, stream_index: 'int', audio_stream: 'AudioStream') -> None: ...
    def get_list_stream(self, stream_index: 'int') -> 'AudioStream': ...
    def set_shuffle(self, shuffle: 'bool') -> None: ...
    def get_shuffle(self) -> 'bool': ...
    def set_fade_time(self, dec: 'float') -> None: ...
    def get_fade_time(self) -> 'float': ...
    def set_loop(self, loop: 'bool') -> None: ...
    def has_loop(self) -> 'bool': ...


class AudioStreamPolyphonic(AudioStream):


    polyphony: 'int'

    def set_polyphony(self, voices: 'int') -> None: ...
    def get_polyphony(self) -> 'int': ...


class AudioStreamRandomizer(AudioStream):


    playback_mode: 'int'
    random_pitch: 'float'
    random_volume_offset_db: 'float'
    streams_count: 'int'

    def add_stream(self, index: 'int', stream: 'AudioStream', weight: 'float' = 1.0) -> None: ...
    def move_stream(self, index_from: 'int', index_to: 'int') -> None: ...
    def remove_stream(self, index: 'int') -> None: ...
    def set_stream(self, index: 'int', stream: 'AudioStream') -> None: ...
    def get_stream(self, index: 'int') -> 'AudioStream': ...
    def set_stream_probability_weight(self, index: 'int', weight: 'float') -> None: ...
    def get_stream_probability_weight(self, index: 'int') -> 'float': ...
    def set_streams_count(self, count: 'int') -> None: ...
    def get_streams_count(self) -> 'int': ...
    def set_random_pitch(self, scale: 'float') -> None: ...
    def get_random_pitch(self) -> 'float': ...
    def set_random_volume_offset_db(self, db_offset: 'float') -> None: ...
    def get_random_volume_offset_db(self) -> 'float': ...
    def set_playback_mode(self, mode: 'AudioStreamRandomizer__PlaybackMode') -> None: ...
    def get_playback_mode(self) -> 'AudioStreamRandomizer__PlaybackMode': ...


class AudioStreamSynchronized(AudioStream):


    stream_count: 'int'
    MAX_STREAMS: 'int' = 32

    def set_stream_count(self, stream_count: 'int') -> None: ...
    def get_stream_count(self) -> 'int': ...
    def set_sync_stream(self, stream_index: 'int', audio_stream: 'AudioStream') -> None: ...
    def get_sync_stream(self, stream_index: 'int') -> 'AudioStream': ...
    def set_sync_stream_volume(self, stream_index: 'int', volume_db: 'float') -> None: ...
    def get_sync_stream_volume(self, stream_index: 'int') -> 'float': ...


class AudioStreamWAV(AudioStream):


    data: 'PackedByteArray'
    format: 'int'
    loop_mode: 'int'
    loop_begin: 'int'
    loop_end: 'int'
    mix_rate: 'int'
    stereo: 'bool'

    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray', options: 'Dictionary' = default('''{}''')) -> 'AudioStreamWAV': ...
    @staticmethod
    def load_from_file(path: 'str', options: 'Dictionary' = default('''{}''')) -> 'AudioStreamWAV': ...
    def set_data(self, data: 'PackedByteArray') -> None: ...
    def get_data(self) -> 'PackedByteArray': ...
    def set_format(self, format: 'AudioStreamWAV__Format') -> None: ...
    def get_format(self) -> 'AudioStreamWAV__Format': ...
    def set_loop_mode(self, loop_mode: 'AudioStreamWAV__LoopMode') -> None: ...
    def get_loop_mode(self) -> 'AudioStreamWAV__LoopMode': ...
    def set_loop_begin(self, loop_begin: 'int') -> None: ...
    def get_loop_begin(self) -> 'int': ...
    def set_loop_end(self, loop_end: 'int') -> None: ...
    def get_loop_end(self) -> 'int': ...
    def set_mix_rate(self, mix_rate: 'int') -> None: ...
    def get_mix_rate(self) -> 'int': ...
    def set_stereo(self, stereo: 'bool') -> None: ...
    def is_stereo(self) -> 'bool': ...
    def save_to_wav(self, path: 'str') -> 'Error': ...


class BackBufferCopy(Node2D):


    copy_mode: 'int'
    rect: 'Rect2'

    def set_rect(self, rect: 'Rect2') -> None: ...
    def get_rect(self) -> 'Rect2': ...
    def set_copy_mode(self, copy_mode: 'BackBufferCopy__CopyMode') -> None: ...
    def get_copy_mode(self) -> 'BackBufferCopy__CopyMode': ...


class BaseButton(Control):


    disabled: 'bool'
    toggle_mode: 'bool'
    button_pressed: 'bool'
    action_mode: 'int'
    button_mask: 'int'
    keep_pressed_outside: 'bool'
    button_group: 'ButtonGroup'
    shortcut: 'Shortcut'
    shortcut_feedback: 'bool'
    shortcut_in_tooltip: 'bool'
    pressed: 'Signal[Callable[[], None]]'  # pressed()
    button_up: 'Signal[Callable[[], None]]'  # button_up()
    button_down: 'Signal[Callable[[], None]]'  # button_down()
    toggled: 'Signal[Callable[[bool], None]]'  # toggled(toggled_on: bool)

    def _pressed(self) -> None: ...
    def _toggled(self, toggled_on: 'bool') -> None: ...
    def set_pressed(self, pressed: 'bool') -> None: ...
    def is_pressed(self) -> 'bool': ...
    def set_pressed_no_signal(self, pressed: 'bool') -> None: ...
    def is_hovered(self) -> 'bool': ...
    def set_toggle_mode(self, enabled: 'bool') -> None: ...
    def is_toggle_mode(self) -> 'bool': ...
    def set_shortcut_in_tooltip(self, enabled: 'bool') -> None: ...
    def is_shortcut_in_tooltip_enabled(self) -> 'bool': ...
    def set_disabled(self, disabled: 'bool') -> None: ...
    def is_disabled(self) -> 'bool': ...
    def set_action_mode(self, mode: 'BaseButton__ActionMode') -> None: ...
    def get_action_mode(self) -> 'BaseButton__ActionMode': ...
    def set_button_mask(self, mask: 'MouseButtonMask') -> None: ...
    def get_button_mask(self) -> 'MouseButtonMask': ...
    def get_draw_mode(self) -> 'BaseButton__DrawMode': ...
    def set_keep_pressed_outside(self, enabled: 'bool') -> None: ...
    def is_keep_pressed_outside(self) -> 'bool': ...
    def set_shortcut_feedback(self, enabled: 'bool') -> None: ...
    def is_shortcut_feedback(self) -> 'bool': ...
    def set_shortcut(self, shortcut: 'Shortcut') -> None: ...
    def get_shortcut(self) -> 'Shortcut': ...
    def set_button_group(self, button_group: 'ButtonGroup') -> None: ...
    def get_button_group(self) -> 'ButtonGroup': ...


class BaseMaterial3D(Material):


    transparency: 'int'
    alpha_scissor_threshold: 'float'
    alpha_hash_scale: 'float'
    alpha_antialiasing_mode: 'int'
    alpha_antialiasing_edge: 'float'
    blend_mode: 'int'
    cull_mode: 'int'
    depth_draw_mode: 'int'
    no_depth_test: 'bool'
    shading_mode: 'int'
    diffuse_mode: 'int'
    specular_mode: 'int'
    disable_ambient_light: 'bool'
    disable_fog: 'bool'
    vertex_color_use_as_albedo: 'bool'
    vertex_color_is_srgb: 'bool'
    albedo_color: 'Color'
    albedo_texture: 'Texture2D'
    albedo_texture_force_srgb: 'bool'
    albedo_texture_msdf: 'bool'
    orm_texture: 'Texture2D'
    metallic: 'float'
    metallic_specular: 'float'
    metallic_texture: 'Texture2D'
    metallic_texture_channel: 'int'
    roughness: 'float'
    roughness_texture: 'Texture2D'
    roughness_texture_channel: 'int'
    emission_enabled: 'bool'
    emission: 'Color'
    emission_energy_multiplier: 'float'
    emission_intensity: 'float'
    emission_operator: 'int'
    emission_on_uv2: 'bool'
    emission_texture: 'Texture2D'
    normal_enabled: 'bool'
    normal_scale: 'float'
    normal_texture: 'Texture2D'
    rim_enabled: 'bool'
    rim: 'float'
    rim_tint: 'float'
    rim_texture: 'Texture2D'
    clearcoat_enabled: 'bool'
    clearcoat: 'float'
    clearcoat_roughness: 'float'
    clearcoat_texture: 'Texture2D'
    anisotropy_enabled: 'bool'
    anisotropy: 'float'
    anisotropy_flowmap: 'Texture2D'
    ao_enabled: 'bool'
    ao_light_affect: 'float'
    ao_texture: 'Texture2D'
    ao_on_uv2: 'bool'
    ao_texture_channel: 'int'
    heightmap_enabled: 'bool'
    heightmap_scale: 'float'
    heightmap_deep_parallax: 'bool'
    heightmap_min_layers: 'int'
    heightmap_max_layers: 'int'
    heightmap_flip_tangent: 'bool'
    heightmap_flip_binormal: 'bool'
    heightmap_texture: 'Texture2D'
    heightmap_flip_texture: 'bool'
    subsurf_scatter_enabled: 'bool'
    subsurf_scatter_strength: 'float'
    subsurf_scatter_skin_mode: 'bool'
    subsurf_scatter_texture: 'Texture2D'
    subsurf_scatter_transmittance_enabled: 'bool'
    subsurf_scatter_transmittance_color: 'Color'
    subsurf_scatter_transmittance_texture: 'Texture2D'
    subsurf_scatter_transmittance_depth: 'float'
    subsurf_scatter_transmittance_boost: 'float'
    backlight_enabled: 'bool'
    backlight: 'Color'
    backlight_texture: 'Texture2D'
    refraction_enabled: 'bool'
    refraction_scale: 'float'
    refraction_texture: 'Texture2D'
    refraction_texture_channel: 'int'
    detail_enabled: 'bool'
    detail_mask: 'Texture2D'
    detail_blend_mode: 'int'
    detail_uv_layer: 'int'
    detail_albedo: 'Texture2D'
    detail_normal: 'Texture2D'
    uv1_scale: 'Vector3'
    uv1_offset: 'Vector3'
    uv1_triplanar: 'bool'
    uv1_triplanar_sharpness: 'float'
    uv1_world_triplanar: 'bool'
    uv2_scale: 'Vector3'
    uv2_offset: 'Vector3'
    uv2_triplanar: 'bool'
    uv2_triplanar_sharpness: 'float'
    uv2_world_triplanar: 'bool'
    texture_filter: 'int'
    texture_repeat: 'bool'
    disable_receive_shadows: 'bool'
    shadow_to_opacity: 'bool'
    billboard_mode: 'int'
    billboard_keep_scale: 'bool'
    particles_anim_h_frames: 'int'
    particles_anim_v_frames: 'int'
    particles_anim_loop: 'bool'
    grow: 'bool'
    grow_amount: 'float'
    fixed_size: 'bool'
    use_point_size: 'bool'
    point_size: 'float'
    use_particle_trails: 'bool'
    proximity_fade_enabled: 'bool'
    proximity_fade_distance: 'float'
    msdf_pixel_range: 'float'
    msdf_outline_size: 'float'
    distance_fade_mode: 'int'
    distance_fade_min_distance: 'float'
    distance_fade_max_distance: 'float'

    def set_albedo(self, albedo: 'Color') -> None: ...
    def get_albedo(self) -> 'Color': ...
    def set_transparency(self, transparency: 'BaseMaterial3D__Transparency') -> None: ...
    def get_transparency(self) -> 'BaseMaterial3D__Transparency': ...
    def set_alpha_antialiasing(self, alpha_aa: 'BaseMaterial3D__AlphaAntiAliasing') -> None: ...
    def get_alpha_antialiasing(self) -> 'BaseMaterial3D__AlphaAntiAliasing': ...
    def set_alpha_antialiasing_edge(self, edge: 'float') -> None: ...
    def get_alpha_antialiasing_edge(self) -> 'float': ...
    def set_shading_mode(self, shading_mode: 'BaseMaterial3D__ShadingMode') -> None: ...
    def get_shading_mode(self) -> 'BaseMaterial3D__ShadingMode': ...
    def set_specular(self, specular: 'float') -> None: ...
    def get_specular(self) -> 'float': ...
    def set_metallic(self, metallic: 'float') -> None: ...
    def get_metallic(self) -> 'float': ...
    def set_roughness(self, roughness: 'float') -> None: ...
    def get_roughness(self) -> 'float': ...
    def set_emission(self, emission: 'Color') -> None: ...
    def get_emission(self) -> 'Color': ...
    def set_emission_energy_multiplier(self, emission_energy_multiplier: 'float') -> None: ...
    def get_emission_energy_multiplier(self) -> 'float': ...
    def set_emission_intensity(self, emission_energy_multiplier: 'float') -> None: ...
    def get_emission_intensity(self) -> 'float': ...
    def set_normal_scale(self, normal_scale: 'float') -> None: ...
    def get_normal_scale(self) -> 'float': ...
    def set_rim(self, rim: 'float') -> None: ...
    def get_rim(self) -> 'float': ...
    def set_rim_tint(self, rim_tint: 'float') -> None: ...
    def get_rim_tint(self) -> 'float': ...
    def set_clearcoat(self, clearcoat: 'float') -> None: ...
    def get_clearcoat(self) -> 'float': ...
    def set_clearcoat_roughness(self, clearcoat_roughness: 'float') -> None: ...
    def get_clearcoat_roughness(self) -> 'float': ...
    def set_anisotropy(self, anisotropy: 'float') -> None: ...
    def get_anisotropy(self) -> 'float': ...
    def set_heightmap_scale(self, heightmap_scale: 'float') -> None: ...
    def get_heightmap_scale(self) -> 'float': ...
    def set_subsurface_scattering_strength(self, strength: 'float') -> None: ...
    def get_subsurface_scattering_strength(self) -> 'float': ...
    def set_transmittance_color(self, color: 'Color') -> None: ...
    def get_transmittance_color(self) -> 'Color': ...
    def set_transmittance_depth(self, depth: 'float') -> None: ...
    def get_transmittance_depth(self) -> 'float': ...
    def set_transmittance_boost(self, boost: 'float') -> None: ...
    def get_transmittance_boost(self) -> 'float': ...
    def set_backlight(self, backlight: 'Color') -> None: ...
    def get_backlight(self) -> 'Color': ...
    def set_refraction(self, refraction: 'float') -> None: ...
    def get_refraction(self) -> 'float': ...
    def set_point_size(self, point_size: 'float') -> None: ...
    def get_point_size(self) -> 'float': ...
    def set_detail_uv(self, detail_uv: 'BaseMaterial3D__DetailUV') -> None: ...
    def get_detail_uv(self) -> 'BaseMaterial3D__DetailUV': ...
    def set_blend_mode(self, blend_mode: 'BaseMaterial3D__BlendMode') -> None: ...
    def get_blend_mode(self) -> 'BaseMaterial3D__BlendMode': ...
    def set_depth_draw_mode(self, depth_draw_mode: 'BaseMaterial3D__DepthDrawMode') -> None: ...
    def get_depth_draw_mode(self) -> 'BaseMaterial3D__DepthDrawMode': ...
    def set_cull_mode(self, cull_mode: 'BaseMaterial3D__CullMode') -> None: ...
    def get_cull_mode(self) -> 'BaseMaterial3D__CullMode': ...
    def set_diffuse_mode(self, diffuse_mode: 'BaseMaterial3D__DiffuseMode') -> None: ...
    def get_diffuse_mode(self) -> 'BaseMaterial3D__DiffuseMode': ...
    def set_specular_mode(self, specular_mode: 'BaseMaterial3D__SpecularMode') -> None: ...
    def get_specular_mode(self) -> 'BaseMaterial3D__SpecularMode': ...
    def set_flag(self, flag: 'BaseMaterial3D__Flags', enable: 'bool') -> None: ...
    def get_flag(self, flag: 'BaseMaterial3D__Flags') -> 'bool': ...
    def set_texture_filter(self, mode: 'BaseMaterial3D__TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'BaseMaterial3D__TextureFilter': ...
    def set_feature(self, feature: 'BaseMaterial3D__Feature', enable: 'bool') -> None: ...
    def get_feature(self, feature: 'BaseMaterial3D__Feature') -> 'bool': ...
    def set_texture(self, param: 'BaseMaterial3D__TextureParam', texture: 'Texture2D') -> None: ...
    def get_texture(self, param: 'BaseMaterial3D__TextureParam') -> 'Texture2D': ...
    def set_detail_blend_mode(self, detail_blend_mode: 'BaseMaterial3D__BlendMode') -> None: ...
    def get_detail_blend_mode(self) -> 'BaseMaterial3D__BlendMode': ...
    def set_uv1_scale(self, scale: 'Vector3') -> None: ...
    def get_uv1_scale(self) -> 'Vector3': ...
    def set_uv1_offset(self, offset: 'Vector3') -> None: ...
    def get_uv1_offset(self) -> 'Vector3': ...
    def set_uv1_triplanar_blend_sharpness(self, sharpness: 'float') -> None: ...
    def get_uv1_triplanar_blend_sharpness(self) -> 'float': ...
    def set_uv2_scale(self, scale: 'Vector3') -> None: ...
    def get_uv2_scale(self) -> 'Vector3': ...
    def set_uv2_offset(self, offset: 'Vector3') -> None: ...
    def get_uv2_offset(self) -> 'Vector3': ...
    def set_uv2_triplanar_blend_sharpness(self, sharpness: 'float') -> None: ...
    def get_uv2_triplanar_blend_sharpness(self) -> 'float': ...
    def set_billboard_mode(self, mode: 'BaseMaterial3D__BillboardMode') -> None: ...
    def get_billboard_mode(self) -> 'BaseMaterial3D__BillboardMode': ...
    def set_particles_anim_h_frames(self, frames: 'int') -> None: ...
    def get_particles_anim_h_frames(self) -> 'int': ...
    def set_particles_anim_v_frames(self, frames: 'int') -> None: ...
    def get_particles_anim_v_frames(self) -> 'int': ...
    def set_particles_anim_loop(self, loop: 'bool') -> None: ...
    def get_particles_anim_loop(self) -> 'bool': ...
    def set_heightmap_deep_parallax(self, enable: 'bool') -> None: ...
    def is_heightmap_deep_parallax_enabled(self) -> 'bool': ...
    def set_heightmap_deep_parallax_min_layers(self, layer: 'int') -> None: ...
    def get_heightmap_deep_parallax_min_layers(self) -> 'int': ...
    def set_heightmap_deep_parallax_max_layers(self, layer: 'int') -> None: ...
    def get_heightmap_deep_parallax_max_layers(self) -> 'int': ...
    def set_heightmap_deep_parallax_flip_tangent(self, flip: 'bool') -> None: ...
    def get_heightmap_deep_parallax_flip_tangent(self) -> 'bool': ...
    def set_heightmap_deep_parallax_flip_binormal(self, flip: 'bool') -> None: ...
    def get_heightmap_deep_parallax_flip_binormal(self) -> 'bool': ...
    def set_grow(self, amount: 'float') -> None: ...
    def get_grow(self) -> 'float': ...
    def set_emission_operator(self, operator: 'BaseMaterial3D__EmissionOperator') -> None: ...
    def get_emission_operator(self) -> 'BaseMaterial3D__EmissionOperator': ...
    def set_ao_light_affect(self, amount: 'float') -> None: ...
    def get_ao_light_affect(self) -> 'float': ...
    def set_alpha_scissor_threshold(self, threshold: 'float') -> None: ...
    def get_alpha_scissor_threshold(self) -> 'float': ...
    def set_alpha_hash_scale(self, threshold: 'float') -> None: ...
    def get_alpha_hash_scale(self) -> 'float': ...
    def set_grow_enabled(self, enable: 'bool') -> None: ...
    def is_grow_enabled(self) -> 'bool': ...
    def set_metallic_texture_channel(self, channel: 'BaseMaterial3D__TextureChannel') -> None: ...
    def get_metallic_texture_channel(self) -> 'BaseMaterial3D__TextureChannel': ...
    def set_roughness_texture_channel(self, channel: 'BaseMaterial3D__TextureChannel') -> None: ...
    def get_roughness_texture_channel(self) -> 'BaseMaterial3D__TextureChannel': ...
    def set_ao_texture_channel(self, channel: 'BaseMaterial3D__TextureChannel') -> None: ...
    def get_ao_texture_channel(self) -> 'BaseMaterial3D__TextureChannel': ...
    def set_refraction_texture_channel(self, channel: 'BaseMaterial3D__TextureChannel') -> None: ...
    def get_refraction_texture_channel(self) -> 'BaseMaterial3D__TextureChannel': ...
    def set_proximity_fade_enabled(self, enabled: 'bool') -> None: ...
    def is_proximity_fade_enabled(self) -> 'bool': ...
    def set_proximity_fade_distance(self, distance: 'float') -> None: ...
    def get_proximity_fade_distance(self) -> 'float': ...
    def set_msdf_pixel_range(self, range: 'float') -> None: ...
    def get_msdf_pixel_range(self) -> 'float': ...
    def set_msdf_outline_size(self, size: 'float') -> None: ...
    def get_msdf_outline_size(self) -> 'float': ...
    def set_distance_fade(self, mode: 'BaseMaterial3D__DistanceFadeMode') -> None: ...
    def get_distance_fade(self) -> 'BaseMaterial3D__DistanceFadeMode': ...
    def set_distance_fade_max_distance(self, distance: 'float') -> None: ...
    def get_distance_fade_max_distance(self) -> 'float': ...
    def set_distance_fade_min_distance(self, distance: 'float') -> None: ...
    def get_distance_fade_min_distance(self) -> 'float': ...


class BitMap(Resource):


    data: 'Dictionary'

    def create(self, size: 'Vector2i') -> None: ...
    def create_from_image_alpha(self, image: 'Image', threshold: 'float' = 0.1) -> None: ...
    def set_bitv(self, position: 'Vector2i', bit: 'bool') -> None: ...
    def set_bit(self, x: 'int', y: 'int', bit: 'bool') -> None: ...
    def get_bitv(self, position: 'Vector2i') -> 'bool': ...
    def get_bit(self, x: 'int', y: 'int') -> 'bool': ...
    def set_bit_rect(self, rect: 'Rect2i', bit: 'bool') -> None: ...
    def get_true_bit_count(self) -> 'int': ...
    def get_size(self) -> 'Vector2i': ...
    def resize(self, new_size: 'Vector2i') -> None: ...
    def grow_mask(self, pixels: 'int', rect: 'Rect2i') -> None: ...
    def convert_to_image(self) -> 'Image': ...
    def opaque_to_polygons(self, rect: 'Rect2i', epsilon: 'float' = 2.0) -> 'Array'['PackedVector2Array']: ...


class Bone2D(Node2D):


    rest: 'Transform2D'

    def set_rest(self, rest: 'Transform2D') -> None: ...
    def get_rest(self) -> 'Transform2D': ...
    def apply_rest(self) -> None: ...
    def get_skeleton_rest(self) -> 'Transform2D': ...
    def get_index_in_skeleton(self) -> 'int': ...
    def set_autocalculate_length_and_angle(self, auto_calculate: 'bool') -> None: ...
    def get_autocalculate_length_and_angle(self) -> 'bool': ...
    def set_length(self, length: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_bone_angle(self, angle: 'float') -> None: ...
    def get_bone_angle(self) -> 'float': ...


class BoneAttachment3D(Node3D):


    bone_name: 'StringName'
    bone_idx: 'int'
    override_pose: 'bool'

    def get_skeleton(self) -> 'Skeleton3D': ...
    def set_bone_name(self, bone_name: 'str') -> None: ...
    def get_bone_name(self) -> 'str': ...
    def set_bone_idx(self, bone_idx: 'int') -> None: ...
    def get_bone_idx(self) -> 'int': ...
    def on_skeleton_update(self) -> None: ...
    def set_override_pose(self, override_pose: 'bool') -> None: ...
    def get_override_pose(self) -> 'bool': ...
    def set_use_external_skeleton(self, use_external_skeleton: 'bool') -> None: ...
    def get_use_external_skeleton(self) -> 'bool': ...
    def set_external_skeleton(self, external_skeleton: 'NodePath') -> None: ...
    def get_external_skeleton(self) -> 'NodePath': ...


class BoneMap(Resource):


    profile: 'SkeletonProfile'
    bone_map_updated: 'Signal[Callable[[], None]]'  # bone_map_updated()
    profile_updated: 'Signal[Callable[[], None]]'  # profile_updated()

    def get_profile(self) -> 'SkeletonProfile': ...
    def set_profile(self, profile: 'SkeletonProfile') -> None: ...
    def get_skeleton_bone_name(self, profile_bone_name: 'StringName') -> 'StringName': ...
    def set_skeleton_bone_name(self, profile_bone_name: 'StringName', skeleton_bone_name: 'StringName') -> None: ...
    def find_profile_bone_name(self, skeleton_bone_name: 'StringName') -> 'StringName': ...


class BoxContainer(Container):


    alignment: 'int'
    vertical: 'bool'

    def add_spacer(self, begin: 'bool') -> 'Control': ...
    def set_alignment(self, alignment: 'BoxContainer__AlignmentMode') -> None: ...
    def get_alignment(self) -> 'BoxContainer__AlignmentMode': ...
    def set_vertical(self, vertical: 'bool') -> None: ...
    def is_vertical(self) -> 'bool': ...


class BoxMesh(PrimitiveMesh):


    size: 'Vector3'
    subdivide_width: 'int'
    subdivide_height: 'int'
    subdivide_depth: 'int'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_subdivide_width(self, subdivide: 'int') -> None: ...
    def get_subdivide_width(self) -> 'int': ...
    def set_subdivide_height(self, divisions: 'int') -> None: ...
    def get_subdivide_height(self) -> 'int': ...
    def set_subdivide_depth(self, divisions: 'int') -> None: ...
    def get_subdivide_depth(self) -> 'int': ...


class BoxOccluder3D(Occluder3D):


    size: 'Vector3'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...


class BoxShape3D(Shape3D):


    size: 'Vector3'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...


class Button(BaseButton):


    text: 'str'
    icon: 'Texture2D'
    flat: 'bool'
    alignment: 'int'
    text_overrun_behavior: 'int'
    autowrap_mode: 'int'
    clip_text: 'bool'
    icon_alignment: 'int'
    vertical_icon_alignment: 'int'
    expand_icon: 'bool'
    text_direction: 'int'
    language: 'str'

    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer__OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer__OverrunBehavior': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer__AutowrapMode': ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_button_icon(self, texture: 'Texture2D') -> None: ...
    def get_button_icon(self) -> 'Texture2D': ...
    def set_flat(self, enabled: 'bool') -> None: ...
    def is_flat(self) -> 'bool': ...
    def set_clip_text(self, enabled: 'bool') -> None: ...
    def get_clip_text(self) -> 'bool': ...
    def set_text_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_text_alignment(self) -> 'HorizontalAlignment': ...
    def set_icon_alignment(self, icon_alignment: 'HorizontalAlignment') -> None: ...
    def get_icon_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_icon_alignment(self, vertical_icon_alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_icon_alignment(self) -> 'VerticalAlignment': ...
    def set_expand_icon(self, enabled: 'bool') -> None: ...
    def is_expand_icon(self) -> 'bool': ...


class ButtonGroup(Resource):


    allow_unpress: 'bool'
    pressed: 'Signal[Callable[[BaseButton], None]]'  # pressed(button: BaseButton)

    def get_pressed_button(self) -> 'BaseButton': ...
    def get_buttons(self) -> 'Array'['BaseButton']: ...
    def set_allow_unpress(self, enabled: 'bool') -> None: ...
    def is_allow_unpress(self) -> 'bool': ...


class CPUParticles2D(Node2D):


    emitting: 'bool'
    amount: 'int'
    texture: 'Texture2D'
    lifetime: 'float'
    one_shot: 'bool'
    preprocess: 'float'
    speed_scale: 'float'
    explosiveness: 'float'
    randomness: 'float'
    use_fixed_seed: 'bool'
    seed: 'int'
    lifetime_randomness: 'float'
    fixed_fps: 'int'
    fract_delta: 'bool'
    local_coords: 'bool'
    draw_order: 'int'
    emission_shape: 'int'
    emission_sphere_radius: 'float'
    emission_rect_extents: 'Vector2'
    emission_points: 'PackedVector2Array'
    emission_normals: 'PackedVector2Array'
    emission_colors: 'PackedColorArray'
    particle_flag_align_y: 'bool'
    direction: 'Vector2'
    spread: 'float'
    gravity: 'Vector2'
    initial_velocity_min: 'float'
    initial_velocity_max: 'float'
    angular_velocity_min: 'float'
    angular_velocity_max: 'float'
    angular_velocity_curve: 'Curve'
    orbit_velocity_min: 'float'
    orbit_velocity_max: 'float'
    orbit_velocity_curve: 'Curve'
    linear_accel_min: 'float'
    linear_accel_max: 'float'
    linear_accel_curve: 'Curve'
    radial_accel_min: 'float'
    radial_accel_max: 'float'
    radial_accel_curve: 'Curve'
    tangential_accel_min: 'float'
    tangential_accel_max: 'float'
    tangential_accel_curve: 'Curve'
    damping_min: 'float'
    damping_max: 'float'
    damping_curve: 'Curve'
    angle_min: 'float'
    angle_max: 'float'
    angle_curve: 'Curve'
    scale_amount_min: 'float'
    scale_amount_max: 'float'
    scale_amount_curve: 'Curve'
    split_scale: 'bool'
    scale_curve_x: 'Curve'
    scale_curve_y: 'Curve'
    color: 'Color'
    color_ramp: 'Gradient'
    color_initial_ramp: 'Gradient'
    hue_variation_min: 'float'
    hue_variation_max: 'float'
    hue_variation_curve: 'Curve'
    anim_speed_min: 'float'
    anim_speed_max: 'float'
    anim_speed_curve: 'Curve'
    anim_offset_min: 'float'
    anim_offset_max: 'float'
    anim_offset_curve: 'Curve'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_emitting(self, emitting: 'bool') -> None: ...
    def set_amount(self, amount: 'int') -> None: ...
    def set_lifetime(self, secs: 'float') -> None: ...
    def set_one_shot(self, enable: 'bool') -> None: ...
    def set_pre_process_time(self, secs: 'float') -> None: ...
    def set_explosiveness_ratio(self, ratio: 'float') -> None: ...
    def set_randomness_ratio(self, ratio: 'float') -> None: ...
    def set_lifetime_randomness(self, random: 'float') -> None: ...
    def set_use_local_coordinates(self, enable: 'bool') -> None: ...
    def set_fixed_fps(self, fps: 'int') -> None: ...
    def set_fractional_delta(self, enable: 'bool') -> None: ...
    def set_speed_scale(self, scale: 'float') -> None: ...
    def request_particles_process(self, process_time: 'float') -> None: ...
    def is_emitting(self) -> 'bool': ...
    def get_amount(self) -> 'int': ...
    def get_lifetime(self) -> 'float': ...
    def get_one_shot(self) -> 'bool': ...
    def get_pre_process_time(self) -> 'float': ...
    def get_explosiveness_ratio(self) -> 'float': ...
    def get_randomness_ratio(self) -> 'float': ...
    def get_lifetime_randomness(self) -> 'float': ...
    def get_use_local_coordinates(self) -> 'bool': ...
    def get_fixed_fps(self) -> 'int': ...
    def get_fractional_delta(self) -> 'bool': ...
    def get_speed_scale(self) -> 'float': ...
    def set_use_fixed_seed(self, use_fixed_seed: 'bool') -> None: ...
    def get_use_fixed_seed(self) -> 'bool': ...
    def set_seed(self, seed: 'int') -> None: ...
    def get_seed(self) -> 'int': ...
    def set_draw_order(self, order: 'CPUParticles2D__DrawOrder') -> None: ...
    def get_draw_order(self) -> 'CPUParticles2D__DrawOrder': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def restart(self, keep_seed: 'bool' = False) -> None: ...
    def set_direction(self, direction: 'Vector2') -> None: ...
    def get_direction(self) -> 'Vector2': ...
    def set_spread(self, spread: 'float') -> None: ...
    def get_spread(self) -> 'float': ...
    def set_param_min(self, param: 'CPUParticles2D__Parameter', value: 'float') -> None: ...
    def get_param_min(self, param: 'CPUParticles2D__Parameter') -> 'float': ...
    def set_param_max(self, param: 'CPUParticles2D__Parameter', value: 'float') -> None: ...
    def get_param_max(self, param: 'CPUParticles2D__Parameter') -> 'float': ...
    def set_param_curve(self, param: 'CPUParticles2D__Parameter', curve: 'Curve') -> None: ...
    def get_param_curve(self, param: 'CPUParticles2D__Parameter') -> 'Curve': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_color_initial_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_initial_ramp(self) -> 'Gradient': ...
    def set_particle_flag(self, particle_flag: 'CPUParticles2D__ParticleFlags', enable: 'bool') -> None: ...
    def get_particle_flag(self, particle_flag: 'CPUParticles2D__ParticleFlags') -> 'bool': ...
    def set_emission_shape(self, shape: 'CPUParticles2D__EmissionShape') -> None: ...
    def get_emission_shape(self) -> 'CPUParticles2D__EmissionShape': ...
    def set_emission_sphere_radius(self, radius: 'float') -> None: ...
    def get_emission_sphere_radius(self) -> 'float': ...
    def set_emission_rect_extents(self, extents: 'Vector2') -> None: ...
    def get_emission_rect_extents(self) -> 'Vector2': ...
    def set_emission_points(self, array: 'PackedVector2Array') -> None: ...
    def get_emission_points(self) -> 'PackedVector2Array': ...
    def set_emission_normals(self, array: 'PackedVector2Array') -> None: ...
    def get_emission_normals(self) -> 'PackedVector2Array': ...
    def set_emission_colors(self, array: 'PackedColorArray') -> None: ...
    def get_emission_colors(self) -> 'PackedColorArray': ...
    def get_gravity(self) -> 'Vector2': ...
    def set_gravity(self, accel_vec: 'Vector2') -> None: ...
    def get_split_scale(self) -> 'bool': ...
    def set_split_scale(self, split_scale: 'bool') -> None: ...
    def get_scale_curve_x(self) -> 'Curve': ...
    def set_scale_curve_x(self, scale_curve: 'Curve') -> None: ...
    def get_scale_curve_y(self) -> 'Curve': ...
    def set_scale_curve_y(self, scale_curve: 'Curve') -> None: ...
    def convert_from_particles(self, particles: 'Node') -> None: ...


class CPUParticles3D(GeometryInstance3D):


    emitting: 'bool'
    amount: 'int'
    lifetime: 'float'
    one_shot: 'bool'
    preprocess: 'float'
    speed_scale: 'float'
    explosiveness: 'float'
    randomness: 'float'
    use_fixed_seed: 'bool'
    seed: 'int'
    lifetime_randomness: 'float'
    fixed_fps: 'int'
    fract_delta: 'bool'
    visibility_aabb: 'AABB'
    local_coords: 'bool'
    draw_order: 'int'
    mesh: 'Mesh'
    emission_shape: 'int'
    emission_sphere_radius: 'float'
    emission_box_extents: 'Vector3'
    emission_points: 'PackedVector3Array'
    emission_normals: 'PackedVector3Array'
    emission_colors: 'PackedColorArray'
    emission_ring_axis: 'Vector3'
    emission_ring_height: 'float'
    emission_ring_radius: 'float'
    emission_ring_inner_radius: 'float'
    emission_ring_cone_angle: 'float'
    particle_flag_align_y: 'bool'
    particle_flag_rotate_y: 'bool'
    particle_flag_disable_z: 'bool'
    direction: 'Vector3'
    spread: 'float'
    flatness: 'float'
    gravity: 'Vector3'
    initial_velocity_min: 'float'
    initial_velocity_max: 'float'
    angular_velocity_min: 'float'
    angular_velocity_max: 'float'
    angular_velocity_curve: 'Curve'
    orbit_velocity_min: 'float'
    orbit_velocity_max: 'float'
    orbit_velocity_curve: 'Curve'
    linear_accel_min: 'float'
    linear_accel_max: 'float'
    linear_accel_curve: 'Curve'
    radial_accel_min: 'float'
    radial_accel_max: 'float'
    radial_accel_curve: 'Curve'
    tangential_accel_min: 'float'
    tangential_accel_max: 'float'
    tangential_accel_curve: 'Curve'
    damping_min: 'float'
    damping_max: 'float'
    damping_curve: 'Curve'
    angle_min: 'float'
    angle_max: 'float'
    angle_curve: 'Curve'
    scale_amount_min: 'float'
    scale_amount_max: 'float'
    scale_amount_curve: 'Curve'
    split_scale: 'bool'
    scale_curve_x: 'Curve'
    scale_curve_y: 'Curve'
    scale_curve_z: 'Curve'
    color: 'Color'
    color_ramp: 'Gradient'
    color_initial_ramp: 'Gradient'
    hue_variation_min: 'float'
    hue_variation_max: 'float'
    hue_variation_curve: 'Curve'
    anim_speed_min: 'float'
    anim_speed_max: 'float'
    anim_speed_curve: 'Curve'
    anim_offset_min: 'float'
    anim_offset_max: 'float'
    anim_offset_curve: 'Curve'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_emitting(self, emitting: 'bool') -> None: ...
    def set_amount(self, amount: 'int') -> None: ...
    def set_lifetime(self, secs: 'float') -> None: ...
    def set_one_shot(self, enable: 'bool') -> None: ...
    def set_pre_process_time(self, secs: 'float') -> None: ...
    def set_explosiveness_ratio(self, ratio: 'float') -> None: ...
    def set_randomness_ratio(self, ratio: 'float') -> None: ...
    def set_visibility_aabb(self, aabb: 'AABB') -> None: ...
    def set_lifetime_randomness(self, random: 'float') -> None: ...
    def set_use_local_coordinates(self, enable: 'bool') -> None: ...
    def set_fixed_fps(self, fps: 'int') -> None: ...
    def set_fractional_delta(self, enable: 'bool') -> None: ...
    def set_speed_scale(self, scale: 'float') -> None: ...
    def is_emitting(self) -> 'bool': ...
    def get_amount(self) -> 'int': ...
    def get_lifetime(self) -> 'float': ...
    def get_one_shot(self) -> 'bool': ...
    def get_pre_process_time(self) -> 'float': ...
    def get_explosiveness_ratio(self) -> 'float': ...
    def get_randomness_ratio(self) -> 'float': ...
    def get_visibility_aabb(self) -> 'AABB': ...
    def get_lifetime_randomness(self) -> 'float': ...
    def get_use_local_coordinates(self) -> 'bool': ...
    def get_fixed_fps(self) -> 'int': ...
    def get_fractional_delta(self) -> 'bool': ...
    def get_speed_scale(self) -> 'float': ...
    def set_draw_order(self, order: 'CPUParticles3D__DrawOrder') -> None: ...
    def get_draw_order(self) -> 'CPUParticles3D__DrawOrder': ...
    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_use_fixed_seed(self, use_fixed_seed: 'bool') -> None: ...
    def get_use_fixed_seed(self) -> 'bool': ...
    def set_seed(self, seed: 'int') -> None: ...
    def get_seed(self) -> 'int': ...
    def restart(self, keep_seed: 'bool' = False) -> None: ...
    def request_particles_process(self, process_time: 'float') -> None: ...
    def capture_aabb(self) -> 'AABB': ...
    def set_direction(self, direction: 'Vector3') -> None: ...
    def get_direction(self) -> 'Vector3': ...
    def set_spread(self, degrees: 'float') -> None: ...
    def get_spread(self) -> 'float': ...
    def set_flatness(self, amount: 'float') -> None: ...
    def get_flatness(self) -> 'float': ...
    def set_param_min(self, param: 'CPUParticles3D__Parameter', value: 'float') -> None: ...
    def get_param_min(self, param: 'CPUParticles3D__Parameter') -> 'float': ...
    def set_param_max(self, param: 'CPUParticles3D__Parameter', value: 'float') -> None: ...
    def get_param_max(self, param: 'CPUParticles3D__Parameter') -> 'float': ...
    def set_param_curve(self, param: 'CPUParticles3D__Parameter', curve: 'Curve') -> None: ...
    def get_param_curve(self, param: 'CPUParticles3D__Parameter') -> 'Curve': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_color_initial_ramp(self, ramp: 'Gradient') -> None: ...
    def get_color_initial_ramp(self) -> 'Gradient': ...
    def set_particle_flag(self, particle_flag: 'CPUParticles3D__ParticleFlags', enable: 'bool') -> None: ...
    def get_particle_flag(self, particle_flag: 'CPUParticles3D__ParticleFlags') -> 'bool': ...
    def set_emission_shape(self, shape: 'CPUParticles3D__EmissionShape') -> None: ...
    def get_emission_shape(self) -> 'CPUParticles3D__EmissionShape': ...
    def set_emission_sphere_radius(self, radius: 'float') -> None: ...
    def get_emission_sphere_radius(self) -> 'float': ...
    def set_emission_box_extents(self, extents: 'Vector3') -> None: ...
    def get_emission_box_extents(self) -> 'Vector3': ...
    def set_emission_points(self, array: 'PackedVector3Array') -> None: ...
    def get_emission_points(self) -> 'PackedVector3Array': ...
    def set_emission_normals(self, array: 'PackedVector3Array') -> None: ...
    def get_emission_normals(self) -> 'PackedVector3Array': ...
    def set_emission_colors(self, array: 'PackedColorArray') -> None: ...
    def get_emission_colors(self) -> 'PackedColorArray': ...
    def set_emission_ring_axis(self, axis: 'Vector3') -> None: ...
    def get_emission_ring_axis(self) -> 'Vector3': ...
    def set_emission_ring_height(self, height: 'float') -> None: ...
    def get_emission_ring_height(self) -> 'float': ...
    def set_emission_ring_radius(self, radius: 'float') -> None: ...
    def get_emission_ring_radius(self) -> 'float': ...
    def set_emission_ring_inner_radius(self, inner_radius: 'float') -> None: ...
    def get_emission_ring_inner_radius(self) -> 'float': ...
    def set_emission_ring_cone_angle(self, cone_angle: 'float') -> None: ...
    def get_emission_ring_cone_angle(self) -> 'float': ...
    def get_gravity(self) -> 'Vector3': ...
    def set_gravity(self, accel_vec: 'Vector3') -> None: ...
    def get_split_scale(self) -> 'bool': ...
    def set_split_scale(self, split_scale: 'bool') -> None: ...
    def get_scale_curve_x(self) -> 'Curve': ...
    def set_scale_curve_x(self, scale_curve: 'Curve') -> None: ...
    def get_scale_curve_y(self) -> 'Curve': ...
    def set_scale_curve_y(self, scale_curve: 'Curve') -> None: ...
    def get_scale_curve_z(self) -> 'Curve': ...
    def set_scale_curve_z(self, scale_curve: 'Curve') -> None: ...
    def convert_from_particles(self, particles: 'Node') -> None: ...


class CSGBox3D(CSGPrimitive3D):


    size: 'Vector3'
    material: 'BaseMaterial3D' | 'ShaderMaterial'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...


class CSGCombiner3D(CSGShape3D): ...


class CSGCylinder3D(CSGPrimitive3D):


    radius: 'float'
    height: 'float'
    sides: 'int'
    cone: 'bool'
    smooth_faces: 'bool'
    material: 'BaseMaterial3D' | 'ShaderMaterial'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_sides(self, sides: 'int') -> None: ...
    def get_sides(self) -> 'int': ...
    def set_cone(self, cone: 'bool') -> None: ...
    def is_cone(self) -> 'bool': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_smooth_faces(self, smooth_faces: 'bool') -> None: ...
    def get_smooth_faces(self) -> 'bool': ...


class CSGMesh3D(CSGPrimitive3D):


    mesh: 'Mesh' | 'ArrayMesh' | 'ImmediateMesh' | 'PlaceholderMesh' | 'PrimitiveMesh' | 'BoxMesh' | 'CapsuleMesh' | 'CylinderMesh' | 'PrismMesh' | 'SphereMesh' | 'TextMesh' | 'TorusMesh' | 'TubeTrailMesh'
    material: 'BaseMaterial3D' | 'ShaderMaterial'

    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...


class CSGPolygon3D(CSGPrimitive3D):


    polygon: 'PackedVector2Array'
    mode: 'int'
    depth: 'float'
    spin_degrees: 'float'
    spin_sides: 'int'
    path_node: 'NodePath'
    path_interval_type: 'int'
    path_interval: 'float'
    path_simplify_angle: 'float'
    path_rotation: 'int'
    path_rotation_accurate: 'bool'
    path_local: 'bool'
    path_continuous_u: 'bool'
    path_u_distance: 'float'
    path_joined: 'bool'
    smooth_faces: 'bool'
    material: 'BaseMaterial3D' | 'ShaderMaterial'

    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_mode(self, mode: 'CSGPolygon3D__Mode') -> None: ...
    def get_mode(self) -> 'CSGPolygon3D__Mode': ...
    def set_depth(self, depth: 'float') -> None: ...
    def get_depth(self) -> 'float': ...
    def set_spin_degrees(self, degrees: 'float') -> None: ...
    def get_spin_degrees(self) -> 'float': ...
    def set_spin_sides(self, spin_sides: 'int') -> None: ...
    def get_spin_sides(self) -> 'int': ...
    def set_path_node(self, path: 'NodePath') -> None: ...
    def get_path_node(self) -> 'NodePath': ...
    def set_path_interval_type(self, interval_type: 'CSGPolygon3D__PathIntervalType') -> None: ...
    def get_path_interval_type(self) -> 'CSGPolygon3D__PathIntervalType': ...
    def set_path_interval(self, interval: 'float') -> None: ...
    def get_path_interval(self) -> 'float': ...
    def set_path_simplify_angle(self, degrees: 'float') -> None: ...
    def get_path_simplify_angle(self) -> 'float': ...
    def set_path_rotation(self, path_rotation: 'CSGPolygon3D__PathRotation') -> None: ...
    def get_path_rotation(self) -> 'CSGPolygon3D__PathRotation': ...
    def set_path_rotation_accurate(self, enable: 'bool') -> None: ...
    def get_path_rotation_accurate(self) -> 'bool': ...
    def set_path_local(self, enable: 'bool') -> None: ...
    def is_path_local(self) -> 'bool': ...
    def set_path_continuous_u(self, enable: 'bool') -> None: ...
    def is_path_continuous_u(self) -> 'bool': ...
    def set_path_u_distance(self, distance: 'float') -> None: ...
    def get_path_u_distance(self) -> 'float': ...
    def set_path_joined(self, enable: 'bool') -> None: ...
    def is_path_joined(self) -> 'bool': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_smooth_faces(self, smooth_faces: 'bool') -> None: ...
    def get_smooth_faces(self) -> 'bool': ...


class CSGPrimitive3D(CSGShape3D):


    flip_faces: 'bool'

    def set_flip_faces(self, flip_faces: 'bool') -> None: ...
    def get_flip_faces(self) -> 'bool': ...


class CSGShape3D(GeometryInstance3D):


    operation: 'int'
    snap: 'float'
    calculate_tangents: 'bool'
    use_collision: 'bool'
    collision_layer: 'int'
    collision_mask: 'int'
    collision_priority: 'float'

    def is_root_shape(self) -> 'bool': ...
    def set_operation(self, operation: 'CSGShape3D__Operation') -> None: ...
    def get_operation(self) -> 'CSGShape3D__Operation': ...
    def set_snap(self, snap: 'float') -> None: ...
    def get_snap(self) -> 'float': ...
    def set_use_collision(self, operation: 'bool') -> None: ...
    def is_using_collision(self) -> 'bool': ...
    def set_collision_layer(self, layer: 'int') -> None: ...
    def get_collision_layer(self) -> 'int': ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_priority(self, priority: 'float') -> None: ...
    def get_collision_priority(self) -> 'float': ...
    def set_calculate_tangents(self, enabled: 'bool') -> None: ...
    def is_calculating_tangents(self) -> 'bool': ...
    def get_meshes(self) -> 'Array': ...
    def bake_static_mesh(self) -> 'ArrayMesh': ...
    def bake_collision_shape(self) -> 'ConcavePolygonShape3D': ...


class CSGSphere3D(CSGPrimitive3D):


    radius: 'float'
    radial_segments: 'int'
    rings: 'int'
    smooth_faces: 'bool'
    material: 'BaseMaterial3D' | 'ShaderMaterial'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_radial_segments(self, radial_segments: 'int') -> None: ...
    def get_radial_segments(self) -> 'int': ...
    def set_rings(self, rings: 'int') -> None: ...
    def get_rings(self) -> 'int': ...
    def set_smooth_faces(self, smooth_faces: 'bool') -> None: ...
    def get_smooth_faces(self) -> 'bool': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...


class CSGTorus3D(CSGPrimitive3D):


    inner_radius: 'float'
    outer_radius: 'float'
    sides: 'int'
    ring_sides: 'int'
    smooth_faces: 'bool'
    material: 'BaseMaterial3D' | 'ShaderMaterial'

    def set_inner_radius(self, radius: 'float') -> None: ...
    def get_inner_radius(self) -> 'float': ...
    def set_outer_radius(self, radius: 'float') -> None: ...
    def get_outer_radius(self) -> 'float': ...
    def set_sides(self, sides: 'int') -> None: ...
    def get_sides(self) -> 'int': ...
    def set_ring_sides(self, sides: 'int') -> None: ...
    def get_ring_sides(self) -> 'int': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_smooth_faces(self, smooth_faces: 'bool') -> None: ...
    def get_smooth_faces(self) -> 'bool': ...


class CallbackTweener(Tweener):



    def set_delay(self, delay: 'float') -> 'CallbackTweener': ...


class Camera2D(Node2D):


    offset: 'Vector2'
    anchor_mode: 'int'
    ignore_rotation: 'bool'
    enabled: 'bool'
    zoom: 'Vector2'
    custom_viewport: 'Viewport'
    process_callback: 'int'
    limit_left: 'int'
    limit_top: 'int'
    limit_right: 'int'
    limit_bottom: 'int'
    limit_smoothed: 'bool'
    position_smoothing_enabled: 'bool'
    position_smoothing_speed: 'float'
    rotation_smoothing_enabled: 'bool'
    rotation_smoothing_speed: 'float'
    drag_horizontal_enabled: 'bool'
    drag_vertical_enabled: 'bool'
    drag_horizontal_offset: 'float'
    drag_vertical_offset: 'float'
    drag_left_margin: 'float'
    drag_top_margin: 'float'
    drag_right_margin: 'float'
    drag_bottom_margin: 'float'
    editor_draw_screen: 'bool'
    editor_draw_limits: 'bool'
    editor_draw_drag_margin: 'bool'

    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_anchor_mode(self, anchor_mode: 'Camera2D__AnchorMode') -> None: ...
    def get_anchor_mode(self) -> 'Camera2D__AnchorMode': ...
    def set_ignore_rotation(self, ignore: 'bool') -> None: ...
    def is_ignoring_rotation(self) -> 'bool': ...
    def set_process_callback(self, mode: 'Camera2D__Camera2DProcessCallback') -> None: ...
    def get_process_callback(self) -> 'Camera2D__Camera2DProcessCallback': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def make_current(self) -> None: ...
    def is_current(self) -> 'bool': ...
    def set_limit(self, margin: 'Side', limit: 'int') -> None: ...
    def get_limit(self, margin: 'Side') -> 'int': ...
    def set_limit_smoothing_enabled(self, limit_smoothing_enabled: 'bool') -> None: ...
    def is_limit_smoothing_enabled(self) -> 'bool': ...
    def set_drag_vertical_enabled(self, enabled: 'bool') -> None: ...
    def is_drag_vertical_enabled(self) -> 'bool': ...
    def set_drag_horizontal_enabled(self, enabled: 'bool') -> None: ...
    def is_drag_horizontal_enabled(self) -> 'bool': ...
    def set_drag_vertical_offset(self, offset: 'float') -> None: ...
    def get_drag_vertical_offset(self) -> 'float': ...
    def set_drag_horizontal_offset(self, offset: 'float') -> None: ...
    def get_drag_horizontal_offset(self) -> 'float': ...
    def set_drag_margin(self, margin: 'Side', drag_margin: 'float') -> None: ...
    def get_drag_margin(self, margin: 'Side') -> 'float': ...
    def get_target_position(self) -> 'Vector2': ...
    def get_screen_center_position(self) -> 'Vector2': ...
    def set_zoom(self, zoom: 'Vector2') -> None: ...
    def get_zoom(self) -> 'Vector2': ...
    def set_custom_viewport(self, viewport: 'Node') -> None: ...
    def get_custom_viewport(self) -> 'Node': ...
    def set_position_smoothing_speed(self, position_smoothing_speed: 'float') -> None: ...
    def get_position_smoothing_speed(self) -> 'float': ...
    def set_position_smoothing_enabled(self, position_smoothing_speed: 'bool') -> None: ...
    def is_position_smoothing_enabled(self) -> 'bool': ...
    def set_rotation_smoothing_enabled(self, enabled: 'bool') -> None: ...
    def is_rotation_smoothing_enabled(self) -> 'bool': ...
    def set_rotation_smoothing_speed(self, speed: 'float') -> None: ...
    def get_rotation_smoothing_speed(self) -> 'float': ...
    def force_update_scroll(self) -> None: ...
    def reset_smoothing(self) -> None: ...
    def align(self) -> None: ...
    def set_screen_drawing_enabled(self, screen_drawing_enabled: 'bool') -> None: ...
    def is_screen_drawing_enabled(self) -> 'bool': ...
    def set_limit_drawing_enabled(self, limit_drawing_enabled: 'bool') -> None: ...
    def is_limit_drawing_enabled(self) -> 'bool': ...
    def set_margin_drawing_enabled(self, margin_drawing_enabled: 'bool') -> None: ...
    def is_margin_drawing_enabled(self) -> 'bool': ...


class Camera3D(Node3D):


    keep_aspect: 'int'
    cull_mask: 'int'
    environment: 'Environment'
    attributes: 'CameraAttributesPractical' | 'CameraAttributesPhysical'
    compositor: 'Compositor'
    h_offset: 'float'
    v_offset: 'float'
    doppler_tracking: 'int'
    projection: 'int'
    current: 'bool'
    fov: 'float'
    size: 'float'
    frustum_offset: 'Vector2'
    near: 'float'
    far: 'float'

    def project_ray_normal(self, screen_point: 'Vector2') -> 'Vector3': ...
    def project_local_ray_normal(self, screen_point: 'Vector2') -> 'Vector3': ...
    def project_ray_origin(self, screen_point: 'Vector2') -> 'Vector3': ...
    def unproject_position(self, world_point: 'Vector3') -> 'Vector2': ...
    def is_position_behind(self, world_point: 'Vector3') -> 'bool': ...
    def project_position(self, screen_point: 'Vector2', z_depth: 'float') -> 'Vector3': ...
    def set_perspective(self, fov: 'float', z_near: 'float', z_far: 'float') -> None: ...
    def set_orthogonal(self, size: 'float', z_near: 'float', z_far: 'float') -> None: ...
    def set_frustum(self, size: 'float', offset: 'Vector2', z_near: 'float', z_far: 'float') -> None: ...
    def make_current(self) -> None: ...
    def clear_current(self, enable_next: 'bool' = True) -> None: ...
    def set_current(self, enabled: 'bool') -> None: ...
    def is_current(self) -> 'bool': ...
    def get_camera_transform(self) -> 'Transform3D': ...
    def get_camera_projection(self) -> 'Projection': ...
    def get_fov(self) -> 'float': ...
    def get_frustum_offset(self) -> 'Vector2': ...
    def get_size(self) -> 'float': ...
    def get_far(self) -> 'float': ...
    def get_near(self) -> 'float': ...
    def set_fov(self, fov: 'float') -> None: ...
    def set_frustum_offset(self, offset: 'Vector2') -> None: ...
    def set_size(self, size: 'float') -> None: ...
    def set_far(self, far: 'float') -> None: ...
    def set_near(self, near: 'float') -> None: ...
    def get_projection(self) -> 'Camera3D__ProjectionType': ...
    def set_projection(self, mode: 'Camera3D__ProjectionType') -> None: ...
    def set_h_offset(self, offset: 'float') -> None: ...
    def get_h_offset(self) -> 'float': ...
    def set_v_offset(self, offset: 'float') -> None: ...
    def get_v_offset(self) -> 'float': ...
    def set_cull_mask(self, mask: 'int') -> None: ...
    def get_cull_mask(self) -> 'int': ...
    def set_environment(self, env: 'Environment') -> None: ...
    def get_environment(self) -> 'Environment': ...
    def set_attributes(self, env: 'CameraAttributes') -> None: ...
    def get_attributes(self) -> 'CameraAttributes': ...
    def set_compositor(self, compositor: 'Compositor') -> None: ...
    def get_compositor(self) -> 'Compositor': ...
    def set_keep_aspect_mode(self, mode: 'Camera3D__KeepAspect') -> None: ...
    def get_keep_aspect_mode(self) -> 'Camera3D__KeepAspect': ...
    def set_doppler_tracking(self, mode: 'Camera3D__DopplerTracking') -> None: ...
    def get_doppler_tracking(self) -> 'Camera3D__DopplerTracking': ...
    def get_frustum(self) -> 'Array'['Plane']: ...
    def is_position_in_frustum(self, world_point: 'Vector3') -> 'bool': ...
    def get_camera_rid(self) -> 'RID': ...
    def get_pyramid_shape_rid(self) -> 'RID': ...
    def set_cull_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_cull_mask_value(self, layer_number: 'int') -> 'bool': ...


class CameraAttributes(Resource):


    exposure_sensitivity: 'float'
    exposure_multiplier: 'float'
    auto_exposure_enabled: 'bool'
    auto_exposure_scale: 'float'
    auto_exposure_speed: 'float'

    def set_exposure_multiplier(self, multiplier: 'float') -> None: ...
    def get_exposure_multiplier(self) -> 'float': ...
    def set_exposure_sensitivity(self, sensitivity: 'float') -> None: ...
    def get_exposure_sensitivity(self) -> 'float': ...
    def set_auto_exposure_enabled(self, enabled: 'bool') -> None: ...
    def is_auto_exposure_enabled(self) -> 'bool': ...
    def set_auto_exposure_speed(self, exposure_speed: 'float') -> None: ...
    def get_auto_exposure_speed(self) -> 'float': ...
    def set_auto_exposure_scale(self, exposure_grey: 'float') -> None: ...
    def get_auto_exposure_scale(self) -> 'float': ...


class CameraAttributesPhysical(CameraAttributes):


    frustum_focus_distance: 'float'
    frustum_focal_length: 'float'
    frustum_near: 'float'
    frustum_far: 'float'
    exposure_aperture: 'float'
    exposure_shutter_speed: 'float'
    auto_exposure_min_exposure_value: 'float'
    auto_exposure_max_exposure_value: 'float'

    def set_aperture(self, aperture: 'float') -> None: ...
    def get_aperture(self) -> 'float': ...
    def set_shutter_speed(self, shutter_speed: 'float') -> None: ...
    def get_shutter_speed(self) -> 'float': ...
    def set_focal_length(self, focal_length: 'float') -> None: ...
    def get_focal_length(self) -> 'float': ...
    def set_focus_distance(self, focus_distance: 'float') -> None: ...
    def get_focus_distance(self) -> 'float': ...
    def set_near(self, near: 'float') -> None: ...
    def get_near(self) -> 'float': ...
    def set_far(self, far: 'float') -> None: ...
    def get_far(self) -> 'float': ...
    def get_fov(self) -> 'float': ...
    def set_auto_exposure_max_exposure_value(self, exposure_value_max: 'float') -> None: ...
    def get_auto_exposure_max_exposure_value(self) -> 'float': ...
    def set_auto_exposure_min_exposure_value(self, exposure_value_min: 'float') -> None: ...
    def get_auto_exposure_min_exposure_value(self) -> 'float': ...


class CameraAttributesPractical(CameraAttributes):


    dof_blur_far_enabled: 'bool'
    dof_blur_far_distance: 'float'
    dof_blur_far_transition: 'float'
    dof_blur_near_enabled: 'bool'
    dof_blur_near_distance: 'float'
    dof_blur_near_transition: 'float'
    dof_blur_amount: 'float'
    auto_exposure_min_sensitivity: 'float'
    auto_exposure_max_sensitivity: 'float'

    def set_dof_blur_far_enabled(self, enabled: 'bool') -> None: ...
    def is_dof_blur_far_enabled(self) -> 'bool': ...
    def set_dof_blur_far_distance(self, distance: 'float') -> None: ...
    def get_dof_blur_far_distance(self) -> 'float': ...
    def set_dof_blur_far_transition(self, distance: 'float') -> None: ...
    def get_dof_blur_far_transition(self) -> 'float': ...
    def set_dof_blur_near_enabled(self, enabled: 'bool') -> None: ...
    def is_dof_blur_near_enabled(self) -> 'bool': ...
    def set_dof_blur_near_distance(self, distance: 'float') -> None: ...
    def get_dof_blur_near_distance(self) -> 'float': ...
    def set_dof_blur_near_transition(self, distance: 'float') -> None: ...
    def get_dof_blur_near_transition(self) -> 'float': ...
    def set_dof_blur_amount(self, amount: 'float') -> None: ...
    def get_dof_blur_amount(self) -> 'float': ...
    def set_auto_exposure_max_sensitivity(self, max_sensitivity: 'float') -> None: ...
    def get_auto_exposure_max_sensitivity(self) -> 'float': ...
    def set_auto_exposure_min_sensitivity(self, min_sensitivity: 'float') -> None: ...
    def get_auto_exposure_min_sensitivity(self) -> 'float': ...


class CameraFeed(RefCounted):


    feed_is_active: 'bool'
    feed_transform: 'Transform2D'
    formats: 'Array'
    frame_changed: 'Signal[Callable[[], None]]'  # frame_changed()
    format_changed: 'Signal[Callable[[], None]]'  # format_changed()

    def _activate_feed(self) -> 'bool': ...
    def _deactivate_feed(self) -> None: ...
    def get_id(self) -> 'int': ...
    def is_active(self) -> 'bool': ...
    def set_active(self, active: 'bool') -> None: ...
    def get_name(self) -> 'str': ...
    def set_name(self, name: 'str') -> None: ...
    def get_position(self) -> 'CameraFeed__FeedPosition': ...
    def set_position(self, position: 'CameraFeed__FeedPosition') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def set_rgb_image(self, rgb_image: 'Image') -> None: ...
    def set_ycbcr_image(self, ycbcr_image: 'Image') -> None: ...
    def set_external(self, width: 'int', height: 'int') -> None: ...
    def get_texture_tex_id(self, feed_image_type: 'CameraServer__FeedImage') -> 'int': ...
    def get_datatype(self) -> 'CameraFeed__FeedDataType': ...
    def get_formats(self) -> 'Array': ...
    def set_format(self, index: 'int', parameters: 'Dictionary') -> 'bool': ...


class CameraServer(Object):


    camera_feed_added: 'Signal[Callable[[int], None]]'  # camera_feed_added(id: int)
    camera_feed_removed: 'Signal[Callable[[int], None]]'  # camera_feed_removed(id: int)

    def get_feed(self, index: 'int') -> 'CameraFeed': ...
    def get_feed_count(self) -> 'int': ...
    def feeds(self) -> 'Array'['CameraFeed']: ...
    def add_feed(self, feed: 'CameraFeed') -> None: ...
    def remove_feed(self, feed: 'CameraFeed') -> None: ...


class CameraTexture(Texture2D):


    camera_feed_id: 'int'
    which_feed: 'int'
    camera_is_active: 'bool'

    def set_camera_feed_id(self, feed_id: 'int') -> None: ...
    def get_camera_feed_id(self) -> 'int': ...
    def set_which_feed(self, which_feed: 'CameraServer__FeedImage') -> None: ...
    def get_which_feed(self) -> 'CameraServer__FeedImage': ...
    def set_camera_active(self, active: 'bool') -> None: ...
    def get_camera_active(self) -> 'bool': ...


class CanvasGroup(Node2D):


    fit_margin: 'float'
    clear_margin: 'float'
    use_mipmaps: 'bool'

    def set_fit_margin(self, fit_margin: 'float') -> None: ...
    def get_fit_margin(self) -> 'float': ...
    def set_clear_margin(self, clear_margin: 'float') -> None: ...
    def get_clear_margin(self) -> 'float': ...
    def set_use_mipmaps(self, use_mipmaps: 'bool') -> None: ...
    def is_using_mipmaps(self) -> 'bool': ...


class CanvasItem(Node):


    visible: 'bool'
    modulate: 'Color'
    self_modulate: 'Color'
    show_behind_parent: 'bool'
    top_level: 'bool'
    clip_children: 'int'
    light_mask: 'int'
    visibility_layer: 'int'
    z_index: 'int'
    z_as_relative: 'bool'
    y_sort_enabled: 'bool'
    texture_filter: 'int'
    texture_repeat: 'int'
    material: 'CanvasItemMaterial' | 'ShaderMaterial'
    use_parent_material: 'bool'
    NOTIFICATION_TRANSFORM_CHANGED: 'int' = 2000
    NOTIFICATION_LOCAL_TRANSFORM_CHANGED: 'int' = 35
    NOTIFICATION_DRAW: 'int' = 30
    NOTIFICATION_VISIBILITY_CHANGED: 'int' = 31
    NOTIFICATION_ENTER_CANVAS: 'int' = 32
    NOTIFICATION_EXIT_CANVAS: 'int' = 33
    NOTIFICATION_WORLD_2D_CHANGED: 'int' = 36
    draw: 'Signal[Callable[[], None]]'  # draw()
    visibility_changed: 'Signal[Callable[[], None]]'  # visibility_changed()
    hidden: 'Signal[Callable[[], None]]'  # hidden()
    item_rect_changed: 'Signal[Callable[[], None]]'  # item_rect_changed()

    def _draw(self) -> None: ...
    def get_canvas_item(self) -> 'RID': ...
    def set_visible(self, visible: 'bool') -> None: ...
    def is_visible(self) -> 'bool': ...
    def is_visible_in_tree(self) -> 'bool': ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def queue_redraw(self) -> None: ...
    def move_to_front(self) -> None: ...
    def set_as_top_level(self, enable: 'bool') -> None: ...
    def is_set_as_top_level(self) -> 'bool': ...
    def set_light_mask(self, light_mask: 'int') -> None: ...
    def get_light_mask(self) -> 'int': ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_self_modulate(self, self_modulate: 'Color') -> None: ...
    def get_self_modulate(self) -> 'Color': ...
    def set_z_index(self, z_index: 'int') -> None: ...
    def get_z_index(self) -> 'int': ...
    def set_z_as_relative(self, enable: 'bool') -> None: ...
    def is_z_relative(self) -> 'bool': ...
    def set_y_sort_enabled(self, enabled: 'bool') -> None: ...
    def is_y_sort_enabled(self) -> 'bool': ...
    def set_draw_behind_parent(self, enable: 'bool') -> None: ...
    def is_draw_behind_parent_enabled(self) -> 'bool': ...
    def draw_line(self, from_: 'Vector2', to: 'Vector2', color: 'Color', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_dashed_line(self, from_: 'Vector2', to: 'Vector2', color: 'Color', width: 'float' = -1.0, dash: 'float' = 2.0, aligned: 'bool' = True, antialiased: 'bool' = False) -> None: ...
    def draw_polyline(self, points: 'PackedVector2Array', color: 'Color', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_polyline_colors(self, points: 'PackedVector2Array', colors: 'PackedColorArray', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_arc(self, center: 'Vector2', radius: 'float', start_angle: 'float', end_angle: 'float', point_count: 'int', color: 'Color', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_multiline(self, points: 'PackedVector2Array', color: 'Color', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_multiline_colors(self, points: 'PackedVector2Array', colors: 'PackedColorArray', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_rect(self, rect: 'Rect2', color: 'Color', filled: 'bool' = True, width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_circle(self, position: 'Vector2', radius: 'float', color: 'Color', filled: 'bool' = True, width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def draw_texture(self, texture: 'Texture2D', position: 'Vector2', modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_texture_rect(self, texture: 'Texture2D', rect: 'Rect2', tile: 'bool', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False) -> None: ...
    def draw_texture_rect_region(self, texture: 'Texture2D', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False, clip_uv: 'bool' = True) -> None: ...
    def draw_msdf_texture_rect_region(self, texture: 'Texture2D', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), outline: 'float' = 0.0, pixel_range: 'float' = 4.0, scale: 'float' = 1.0) -> None: ...
    def draw_lcd_texture_rect_region(self, texture: 'Texture2D', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_style_box(self, style_box: 'StyleBox', rect: 'Rect2') -> None: ...
    def draw_primitive(self, points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array', texture: 'Texture2D' = default('''null''')) -> None: ...
    def draw_polygon(self, points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), texture: 'Texture2D' = default('''null''')) -> None: ...
    def draw_colored_polygon(self, points: 'PackedVector2Array', color: 'Color', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), texture: 'Texture2D' = default('''null''')) -> None: ...
    def draw_string(self, font: 'Font', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_multiline_string(self, font: 'Font', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, max_lines: 'int' = -1, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer__LineBreakFlag' = 3, justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_string_outline(self, font: 'Font', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, size: 'int' = 1, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_multiline_string_outline(self, font: 'Font', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, max_lines: 'int' = -1, size: 'int' = 1, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer__LineBreakFlag' = 3, justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_char(self, font: 'Font', pos: 'Vector2', char: 'str', font_size: 'int' = 16, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_char_outline(self, font: 'Font', pos: 'Vector2', char: 'str', font_size: 'int' = 16, size: 'int' = -1, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_mesh(self, mesh: 'Mesh', texture: 'Texture2D', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_multimesh(self, multimesh: 'MultiMesh', texture: 'Texture2D') -> None: ...
    def draw_set_transform(self, position: 'Vector2', rotation: 'float' = 0.0, scale: 'Vector2' = default('''Vector2(1, 1)''')) -> None: ...
    def draw_set_transform_matrix(self, xform: 'Transform2D') -> None: ...
    def draw_animation_slice(self, animation_length: 'float', slice_begin: 'float', slice_end: 'float', offset: 'float' = 0.0) -> None: ...
    def draw_end_animation(self) -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def get_global_transform(self) -> 'Transform2D': ...
    def get_global_transform_with_canvas(self) -> 'Transform2D': ...
    def get_viewport_transform(self) -> 'Transform2D': ...
    def get_viewport_rect(self) -> 'Rect2': ...
    def get_canvas_transform(self) -> 'Transform2D': ...
    def get_screen_transform(self) -> 'Transform2D': ...
    def get_local_mouse_position(self) -> 'Vector2': ...
    def get_global_mouse_position(self) -> 'Vector2': ...
    def get_canvas(self) -> 'RID': ...
    def get_canvas_layer_node(self) -> 'CanvasLayer': ...
    def get_world_2d(self) -> 'World2D': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_instance_shader_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def get_instance_shader_parameter(self, name: 'StringName') -> 'Variant': ...
    def set_use_parent_material(self, enable: 'bool') -> None: ...
    def get_use_parent_material(self) -> 'bool': ...
    def set_notify_local_transform(self, enable: 'bool') -> None: ...
    def is_local_transform_notification_enabled(self) -> 'bool': ...
    def set_notify_transform(self, enable: 'bool') -> None: ...
    def is_transform_notification_enabled(self) -> 'bool': ...
    def force_update_transform(self) -> None: ...
    def make_canvas_position_local(self, viewport_point: 'Vector2') -> 'Vector2': ...
    def make_input_local(self, event: 'InputEvent') -> 'InputEvent': ...
    def set_visibility_layer(self, layer: 'int') -> None: ...
    def get_visibility_layer(self) -> 'int': ...
    def set_visibility_layer_bit(self, layer: 'int', enabled: 'bool') -> None: ...
    def get_visibility_layer_bit(self, layer: 'int') -> 'bool': ...
    def set_texture_filter(self, mode: 'CanvasItem__TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'CanvasItem__TextureFilter': ...
    def set_texture_repeat(self, mode: 'CanvasItem__TextureRepeat') -> None: ...
    def get_texture_repeat(self) -> 'CanvasItem__TextureRepeat': ...
    def set_clip_children_mode(self, mode: 'CanvasItem__ClipChildrenMode') -> None: ...
    def get_clip_children_mode(self) -> 'CanvasItem__ClipChildrenMode': ...


class CanvasItemMaterial(Material):


    blend_mode: 'int'
    light_mode: 'int'
    particles_animation: 'bool'
    particles_anim_h_frames: 'int'
    particles_anim_v_frames: 'int'
    particles_anim_loop: 'bool'

    def set_blend_mode(self, blend_mode: 'CanvasItemMaterial__BlendMode') -> None: ...
    def get_blend_mode(self) -> 'CanvasItemMaterial__BlendMode': ...
    def set_light_mode(self, light_mode: 'CanvasItemMaterial__LightMode') -> None: ...
    def get_light_mode(self) -> 'CanvasItemMaterial__LightMode': ...
    def set_particles_animation(self, particles_anim: 'bool') -> None: ...
    def get_particles_animation(self) -> 'bool': ...
    def set_particles_anim_h_frames(self, frames: 'int') -> None: ...
    def get_particles_anim_h_frames(self) -> 'int': ...
    def set_particles_anim_v_frames(self, frames: 'int') -> None: ...
    def get_particles_anim_v_frames(self) -> 'int': ...
    def set_particles_anim_loop(self, loop: 'bool') -> None: ...
    def get_particles_anim_loop(self) -> 'bool': ...


class CanvasLayer(Node):


    layer: 'int'
    visible: 'bool'
    offset: 'Vector2'
    rotation: 'float'
    scale: 'Vector2'
    transform: 'Transform2D'
    custom_viewport: 'Viewport'
    follow_viewport_enabled: 'bool'
    follow_viewport_scale: 'float'
    visibility_changed: 'Signal[Callable[[], None]]'  # visibility_changed()

    def set_layer(self, layer: 'int') -> None: ...
    def get_layer(self) -> 'int': ...
    def set_visible(self, visible: 'bool') -> None: ...
    def is_visible(self) -> 'bool': ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def get_final_transform(self) -> 'Transform2D': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_rotation(self, radians: 'float') -> None: ...
    def get_rotation(self) -> 'float': ...
    def set_scale(self, scale: 'Vector2') -> None: ...
    def get_scale(self) -> 'Vector2': ...
    def set_follow_viewport(self, enable: 'bool') -> None: ...
    def is_following_viewport(self) -> 'bool': ...
    def set_follow_viewport_scale(self, scale: 'float') -> None: ...
    def get_follow_viewport_scale(self) -> 'float': ...
    def set_custom_viewport(self, viewport: 'Node') -> None: ...
    def get_custom_viewport(self) -> 'Node': ...
    def get_canvas(self) -> 'RID': ...


class CanvasModulate(Node2D):


    color: 'Color'

    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...


class CanvasTexture(Texture2D):


    diffuse_texture: 'Texture2D'
    normal_texture: 'Texture2D'
    specular_texture: 'Texture2D'
    specular_color: 'Color'
    specular_shininess: 'float'
    texture_filter: 'int'
    texture_repeat: 'int'

    def set_diffuse_texture(self, texture: 'Texture2D') -> None: ...
    def get_diffuse_texture(self) -> 'Texture2D': ...
    def set_normal_texture(self, texture: 'Texture2D') -> None: ...
    def get_normal_texture(self) -> 'Texture2D': ...
    def set_specular_texture(self, texture: 'Texture2D') -> None: ...
    def get_specular_texture(self) -> 'Texture2D': ...
    def set_specular_color(self, color: 'Color') -> None: ...
    def get_specular_color(self) -> 'Color': ...
    def set_specular_shininess(self, shininess: 'float') -> None: ...
    def get_specular_shininess(self) -> 'float': ...
    def set_texture_filter(self, filter: 'CanvasItem__TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'CanvasItem__TextureFilter': ...
    def set_texture_repeat(self, repeat: 'CanvasItem__TextureRepeat') -> None: ...
    def get_texture_repeat(self) -> 'CanvasItem__TextureRepeat': ...


class CapsuleMesh(PrimitiveMesh):


    radius: 'float'
    height: 'float'
    radial_segments: 'int'
    rings: 'int'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_radial_segments(self, segments: 'int') -> None: ...
    def get_radial_segments(self) -> 'int': ...
    def set_rings(self, rings: 'int') -> None: ...
    def get_rings(self) -> 'int': ...


class CapsuleShape2D(Shape2D):


    radius: 'float'
    height: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...


class CapsuleShape3D(Shape3D):


    radius: 'float'
    height: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...


class CenterContainer(Container):


    use_top_left: 'bool'

    def set_use_top_left(self, enable: 'bool') -> None: ...
    def is_using_top_left(self) -> 'bool': ...


class CharFXTransform(RefCounted):


    transform: 'Transform2D'
    range: 'Vector2i'
    elapsed_time: 'float'
    visible: 'bool'
    outline: 'bool'
    offset: 'Vector2'
    color: 'Color'
    env: 'Dictionary'
    glyph_index: 'int'
    glyph_count: 'int'
    glyph_flags: 'int'
    relative_index: 'int'
    font: 'RID'

    def get_transform(self) -> 'Transform2D': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_range(self) -> 'Vector2i': ...
    def set_range(self, range: 'Vector2i') -> None: ...
    def get_elapsed_time(self) -> 'float': ...
    def set_elapsed_time(self, time: 'float') -> None: ...
    def is_visible(self) -> 'bool': ...
    def set_visibility(self, visibility: 'bool') -> None: ...
    def is_outline(self) -> 'bool': ...
    def set_outline(self, outline: 'bool') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_environment(self) -> 'Dictionary': ...
    def set_environment(self, environment: 'Dictionary') -> None: ...
    def get_glyph_index(self) -> 'int': ...
    def set_glyph_index(self, glyph_index: 'int') -> None: ...
    def get_relative_index(self) -> 'int': ...
    def set_relative_index(self, relative_index: 'int') -> None: ...
    def get_glyph_count(self) -> 'int': ...
    def set_glyph_count(self, glyph_count: 'int') -> None: ...
    def get_glyph_flags(self) -> 'int': ...
    def set_glyph_flags(self, glyph_flags: 'int') -> None: ...
    def get_font(self) -> 'RID': ...
    def set_font(self, font: 'RID') -> None: ...


class CharacterBody2D(PhysicsBody2D):


    motion_mode: 'int'
    up_direction: 'Vector2'
    velocity: 'Vector2'
    slide_on_ceiling: 'bool'
    max_slides: 'int'
    wall_min_slide_angle: 'float'
    floor_stop_on_slope: 'bool'
    floor_constant_speed: 'bool'
    floor_block_on_wall: 'bool'
    floor_max_angle: 'float'
    floor_snap_length: 'float'
    platform_on_leave: 'int'
    platform_floor_layers: 'int'
    platform_wall_layers: 'int'
    safe_margin: 'float'

    def move_and_slide(self) -> 'bool': ...
    def apply_floor_snap(self) -> None: ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_safe_margin(self, margin: 'float') -> None: ...
    def get_safe_margin(self) -> 'float': ...
    def is_floor_stop_on_slope_enabled(self) -> 'bool': ...
    def set_floor_stop_on_slope_enabled(self, enabled: 'bool') -> None: ...
    def set_floor_constant_speed_enabled(self, enabled: 'bool') -> None: ...
    def is_floor_constant_speed_enabled(self) -> 'bool': ...
    def set_floor_block_on_wall_enabled(self, enabled: 'bool') -> None: ...
    def is_floor_block_on_wall_enabled(self) -> 'bool': ...
    def set_slide_on_ceiling_enabled(self, enabled: 'bool') -> None: ...
    def is_slide_on_ceiling_enabled(self) -> 'bool': ...
    def set_platform_floor_layers(self, exclude_layer: 'int') -> None: ...
    def get_platform_floor_layers(self) -> 'int': ...
    def set_platform_wall_layers(self, exclude_layer: 'int') -> None: ...
    def get_platform_wall_layers(self) -> 'int': ...
    def get_max_slides(self) -> 'int': ...
    def set_max_slides(self, max_slides: 'int') -> None: ...
    def get_floor_max_angle(self) -> 'float': ...
    def set_floor_max_angle(self, radians: 'float') -> None: ...
    def get_floor_snap_length(self) -> 'float': ...
    def set_floor_snap_length(self, floor_snap_length: 'float') -> None: ...
    def get_wall_min_slide_angle(self) -> 'float': ...
    def set_wall_min_slide_angle(self, radians: 'float') -> None: ...
    def get_up_direction(self) -> 'Vector2': ...
    def set_up_direction(self, up_direction: 'Vector2') -> None: ...
    def set_motion_mode(self, mode: 'CharacterBody2D__MotionMode') -> None: ...
    def get_motion_mode(self) -> 'CharacterBody2D__MotionMode': ...
    def set_platform_on_leave(self, on_leave_apply_velocity: 'CharacterBody2D__PlatformOnLeave') -> None: ...
    def get_platform_on_leave(self) -> 'CharacterBody2D__PlatformOnLeave': ...
    def is_on_floor(self) -> 'bool': ...
    def is_on_floor_only(self) -> 'bool': ...
    def is_on_ceiling(self) -> 'bool': ...
    def is_on_ceiling_only(self) -> 'bool': ...
    def is_on_wall(self) -> 'bool': ...
    def is_on_wall_only(self) -> 'bool': ...
    def get_floor_normal(self) -> 'Vector2': ...
    def get_wall_normal(self) -> 'Vector2': ...
    def get_last_motion(self) -> 'Vector2': ...
    def get_position_delta(self) -> 'Vector2': ...
    def get_real_velocity(self) -> 'Vector2': ...
    def get_floor_angle(self, up_direction: 'Vector2' = default('''Vector2(0, -1)''')) -> 'float': ...
    def get_platform_velocity(self) -> 'Vector2': ...
    def get_slide_collision_count(self) -> 'int': ...
    def get_slide_collision(self, slide_idx: 'int') -> 'KinematicCollision2D': ...
    def get_last_slide_collision(self) -> 'KinematicCollision2D': ...


class CharacterBody3D(PhysicsBody3D):


    motion_mode: 'int'
    up_direction: 'Vector3'
    slide_on_ceiling: 'bool'
    velocity: 'Vector3'
    max_slides: 'int'
    wall_min_slide_angle: 'float'
    floor_stop_on_slope: 'bool'
    floor_constant_speed: 'bool'
    floor_block_on_wall: 'bool'
    floor_max_angle: 'float'
    floor_snap_length: 'float'
    platform_on_leave: 'int'
    platform_floor_layers: 'int'
    platform_wall_layers: 'int'
    safe_margin: 'float'

    def move_and_slide(self) -> 'bool': ...
    def apply_floor_snap(self) -> None: ...
    def set_velocity(self, velocity: 'Vector3') -> None: ...
    def get_velocity(self) -> 'Vector3': ...
    def set_safe_margin(self, margin: 'float') -> None: ...
    def get_safe_margin(self) -> 'float': ...
    def is_floor_stop_on_slope_enabled(self) -> 'bool': ...
    def set_floor_stop_on_slope_enabled(self, enabled: 'bool') -> None: ...
    def set_floor_constant_speed_enabled(self, enabled: 'bool') -> None: ...
    def is_floor_constant_speed_enabled(self) -> 'bool': ...
    def set_floor_block_on_wall_enabled(self, enabled: 'bool') -> None: ...
    def is_floor_block_on_wall_enabled(self) -> 'bool': ...
    def set_slide_on_ceiling_enabled(self, enabled: 'bool') -> None: ...
    def is_slide_on_ceiling_enabled(self) -> 'bool': ...
    def set_platform_floor_layers(self, exclude_layer: 'int') -> None: ...
    def get_platform_floor_layers(self) -> 'int': ...
    def set_platform_wall_layers(self, exclude_layer: 'int') -> None: ...
    def get_platform_wall_layers(self) -> 'int': ...
    def get_max_slides(self) -> 'int': ...
    def set_max_slides(self, max_slides: 'int') -> None: ...
    def get_floor_max_angle(self) -> 'float': ...
    def set_floor_max_angle(self, radians: 'float') -> None: ...
    def get_floor_snap_length(self) -> 'float': ...
    def set_floor_snap_length(self, floor_snap_length: 'float') -> None: ...
    def get_wall_min_slide_angle(self) -> 'float': ...
    def set_wall_min_slide_angle(self, radians: 'float') -> None: ...
    def get_up_direction(self) -> 'Vector3': ...
    def set_up_direction(self, up_direction: 'Vector3') -> None: ...
    def set_motion_mode(self, mode: 'CharacterBody3D__MotionMode') -> None: ...
    def get_motion_mode(self) -> 'CharacterBody3D__MotionMode': ...
    def set_platform_on_leave(self, on_leave_apply_velocity: 'CharacterBody3D__PlatformOnLeave') -> None: ...
    def get_platform_on_leave(self) -> 'CharacterBody3D__PlatformOnLeave': ...
    def is_on_floor(self) -> 'bool': ...
    def is_on_floor_only(self) -> 'bool': ...
    def is_on_ceiling(self) -> 'bool': ...
    def is_on_ceiling_only(self) -> 'bool': ...
    def is_on_wall(self) -> 'bool': ...
    def is_on_wall_only(self) -> 'bool': ...
    def get_floor_normal(self) -> 'Vector3': ...
    def get_wall_normal(self) -> 'Vector3': ...
    def get_last_motion(self) -> 'Vector3': ...
    def get_position_delta(self) -> 'Vector3': ...
    def get_real_velocity(self) -> 'Vector3': ...
    def get_floor_angle(self, up_direction: 'Vector3' = default('''Vector3(0, 1, 0)''')) -> 'float': ...
    def get_platform_velocity(self) -> 'Vector3': ...
    def get_platform_angular_velocity(self) -> 'Vector3': ...
    def get_slide_collision_count(self) -> 'int': ...
    def get_slide_collision(self, slide_idx: 'int') -> 'KinematicCollision3D': ...
    def get_last_slide_collision(self) -> 'KinematicCollision3D': ...


class CheckBox(Button): ...


class CheckButton(Button): ...


class CircleShape2D(Shape2D):


    radius: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...


class ClassDB(Object):



    def get_class_list(self) -> 'PackedStringArray': ...
    def get_inheriters_from_class(self, class_: 'StringName') -> 'PackedStringArray': ...
    def get_parent_class(self, class_: 'StringName') -> 'StringName': ...
    def class_exists(self, class_: 'StringName') -> 'bool': ...
    def is_parent_class(self, class_: 'StringName', inherits: 'StringName') -> 'bool': ...
    def can_instantiate(self, class_: 'StringName') -> 'bool': ...
    def instantiate(self, class_: 'StringName') -> 'Variant': ...
    def class_get_api_type(self, class_: 'StringName') -> 'ClassDB__APIType': ...
    def class_has_signal(self, class_: 'StringName', signal: 'StringName') -> 'bool': ...
    def class_get_signal(self, class_: 'StringName', signal: 'StringName') -> 'Dictionary': ...
    def class_get_signal_list(self, class_: 'StringName', no_inheritance: 'bool' = False) -> 'Array'['Dictionary']: ...
    def class_get_property_list(self, class_: 'StringName', no_inheritance: 'bool' = False) -> 'Array'['Dictionary']: ...
    def class_get_property_getter(self, class_: 'StringName', property: 'StringName') -> 'StringName': ...
    def class_get_property_setter(self, class_: 'StringName', property: 'StringName') -> 'StringName': ...
    def class_get_property(self, object: 'Object', property: 'StringName') -> 'Variant': ...
    def class_set_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> 'Error': ...
    def class_get_property_default_value(self, class_: 'StringName', property: 'StringName') -> 'Variant': ...
    def class_has_method(self, class_: 'StringName', method: 'StringName', no_inheritance: 'bool' = False) -> 'bool': ...
    def class_get_method_argument_count(self, class_: 'StringName', method: 'StringName', no_inheritance: 'bool' = False) -> 'int': ...
    def class_get_method_list(self, class_: 'StringName', no_inheritance: 'bool' = False) -> 'Array'['Dictionary']: ...
    def class_call_static(self, class_: 'StringName', method: 'StringName') -> 'Variant': ...
    def class_get_integer_constant_list(self, class_: 'StringName', no_inheritance: 'bool' = False) -> 'PackedStringArray': ...
    def class_has_integer_constant(self, class_: 'StringName', name: 'StringName') -> 'bool': ...
    def class_get_integer_constant(self, class_: 'StringName', name: 'StringName') -> 'int': ...
    def class_has_enum(self, class_: 'StringName', name: 'StringName', no_inheritance: 'bool' = False) -> 'bool': ...
    def class_get_enum_list(self, class_: 'StringName', no_inheritance: 'bool' = False) -> 'PackedStringArray': ...
    def class_get_enum_constants(self, class_: 'StringName', enum: 'StringName', no_inheritance: 'bool' = False) -> 'PackedStringArray': ...
    def class_get_integer_constant_enum(self, class_: 'StringName', name: 'StringName', no_inheritance: 'bool' = False) -> 'StringName': ...
    def is_class_enum_bitfield(self, class_: 'StringName', enum: 'StringName', no_inheritance: 'bool' = False) -> 'bool': ...
    def is_class_enabled(self, class_: 'StringName') -> 'bool': ...


class CodeEdit(TextEdit):


    symbol_lookup_on_click: 'bool'
    symbol_tooltip_on_hover: 'bool'
    line_folding: 'bool'
    line_length_guidelines: 'PackedInt32Array'
    gutters_draw_breakpoints_gutter: 'bool'
    gutters_draw_bookmarks: 'bool'
    gutters_draw_executing_lines: 'bool'
    gutters_draw_line_numbers: 'bool'
    gutters_zero_pad_line_numbers: 'bool'
    gutters_draw_fold_gutter: 'bool'
    delimiter_strings: 'PackedStringArray'
    delimiter_comments: 'PackedStringArray'
    code_completion_enabled: 'bool'
    code_completion_prefixes: 'PackedStringArray'
    indent_size: 'int'
    indent_use_spaces: 'bool'
    indent_automatic: 'bool'
    indent_automatic_prefixes: 'PackedStringArray'
    auto_brace_completion_enabled: 'bool'
    auto_brace_completion_highlight_matching: 'bool'
    auto_brace_completion_pairs: 'Dictionary'
    breakpoint_toggled: 'Signal[Callable[[int], None]]'  # breakpoint_toggled(line: int)
    code_completion_requested: 'Signal[Callable[[], None]]'  # code_completion_requested()
    symbol_lookup: 'Signal[Callable[[str, int, int], None]]'  # symbol_lookup(symbol: String, line: int, column: int)
    symbol_validate: 'Signal[Callable[[str], None]]'  # symbol_validate(symbol: String)
    symbol_hovered: 'Signal[Callable[[str, int, int], None]]'  # symbol_hovered(symbol: String, line: int, column: int)

    def _confirm_code_completion(self, replace: 'bool') -> None: ...
    def _request_code_completion(self, force: 'bool') -> None: ...
    def _filter_code_completion_candidates(self, candidates: 'Array'['Dictionary']) -> 'Array'['Dictionary']: ...
    def set_indent_size(self, size: 'int') -> None: ...
    def get_indent_size(self) -> 'int': ...
    def set_indent_using_spaces(self, use_spaces: 'bool') -> None: ...
    def is_indent_using_spaces(self) -> 'bool': ...
    def set_auto_indent_enabled(self, enable: 'bool') -> None: ...
    def is_auto_indent_enabled(self) -> 'bool': ...
    def set_auto_indent_prefixes(self, prefixes: 'Array'['str']) -> None: ...
    def get_auto_indent_prefixes(self) -> 'Array'['str']: ...
    def do_indent(self) -> None: ...
    def indent_lines(self) -> None: ...
    def unindent_lines(self) -> None: ...
    def convert_indent(self, from_line: 'int' = -1, to_line: 'int' = -1) -> None: ...
    def set_auto_brace_completion_enabled(self, enable: 'bool') -> None: ...
    def is_auto_brace_completion_enabled(self) -> 'bool': ...
    def set_highlight_matching_braces_enabled(self, enable: 'bool') -> None: ...
    def is_highlight_matching_braces_enabled(self) -> 'bool': ...
    def add_auto_brace_completion_pair(self, start_key: 'str', end_key: 'str') -> None: ...
    def set_auto_brace_completion_pairs(self, pairs: 'Dictionary') -> None: ...
    def get_auto_brace_completion_pairs(self) -> 'Dictionary': ...
    def has_auto_brace_completion_open_key(self, open_key: 'str') -> 'bool': ...
    def has_auto_brace_completion_close_key(self, close_key: 'str') -> 'bool': ...
    def get_auto_brace_completion_close_key(self, open_key: 'str') -> 'str': ...
    def set_draw_breakpoints_gutter(self, enable: 'bool') -> None: ...
    def is_drawing_breakpoints_gutter(self) -> 'bool': ...
    def set_draw_bookmarks_gutter(self, enable: 'bool') -> None: ...
    def is_drawing_bookmarks_gutter(self) -> 'bool': ...
    def set_draw_executing_lines_gutter(self, enable: 'bool') -> None: ...
    def is_drawing_executing_lines_gutter(self) -> 'bool': ...
    def set_line_as_breakpoint(self, line: 'int', breakpointed: 'bool') -> None: ...
    def is_line_breakpointed(self, line: 'int') -> 'bool': ...
    def clear_breakpointed_lines(self) -> None: ...
    def get_breakpointed_lines(self) -> 'PackedInt32Array': ...
    def set_line_as_bookmarked(self, line: 'int', bookmarked: 'bool') -> None: ...
    def is_line_bookmarked(self, line: 'int') -> 'bool': ...
    def clear_bookmarked_lines(self) -> None: ...
    def get_bookmarked_lines(self) -> 'PackedInt32Array': ...
    def set_line_as_executing(self, line: 'int', executing: 'bool') -> None: ...
    def is_line_executing(self, line: 'int') -> 'bool': ...
    def clear_executing_lines(self) -> None: ...
    def get_executing_lines(self) -> 'PackedInt32Array': ...
    def set_draw_line_numbers(self, enable: 'bool') -> None: ...
    def is_draw_line_numbers_enabled(self) -> 'bool': ...
    def set_line_numbers_zero_padded(self, enable: 'bool') -> None: ...
    def is_line_numbers_zero_padded(self) -> 'bool': ...
    def set_draw_fold_gutter(self, enable: 'bool') -> None: ...
    def is_drawing_fold_gutter(self) -> 'bool': ...
    def set_line_folding_enabled(self, enabled: 'bool') -> None: ...
    def is_line_folding_enabled(self) -> 'bool': ...
    def can_fold_line(self, line: 'int') -> 'bool': ...
    def fold_line(self, line: 'int') -> None: ...
    def unfold_line(self, line: 'int') -> None: ...
    def fold_all_lines(self) -> None: ...
    def unfold_all_lines(self) -> None: ...
    def toggle_foldable_line(self, line: 'int') -> None: ...
    def toggle_foldable_lines_at_carets(self) -> None: ...
    def is_line_folded(self, line: 'int') -> 'bool': ...
    def get_folded_lines(self) -> 'Array'['int']: ...
    def create_code_region(self) -> None: ...
    def get_code_region_start_tag(self) -> 'str': ...
    def get_code_region_end_tag(self) -> 'str': ...
    def set_code_region_tags(self, start: 'str' = "region", end: 'str' = "endregion") -> None: ...
    def is_line_code_region_start(self, line: 'int') -> 'bool': ...
    def is_line_code_region_end(self, line: 'int') -> 'bool': ...
    def add_string_delimiter(self, start_key: 'str', end_key: 'str', line_only: 'bool' = False) -> None: ...
    def remove_string_delimiter(self, start_key: 'str') -> None: ...
    def has_string_delimiter(self, start_key: 'str') -> 'bool': ...
    def set_string_delimiters(self, string_delimiters: 'Array'['str']) -> None: ...
    def clear_string_delimiters(self) -> None: ...
    def get_string_delimiters(self) -> 'Array'['str']: ...
    def is_in_string(self, line: 'int', column: 'int' = -1) -> 'int': ...
    def add_comment_delimiter(self, start_key: 'str', end_key: 'str', line_only: 'bool' = False) -> None: ...
    def remove_comment_delimiter(self, start_key: 'str') -> None: ...
    def has_comment_delimiter(self, start_key: 'str') -> 'bool': ...
    def set_comment_delimiters(self, comment_delimiters: 'Array'['str']) -> None: ...
    def clear_comment_delimiters(self) -> None: ...
    def get_comment_delimiters(self) -> 'Array'['str']: ...
    def is_in_comment(self, line: 'int', column: 'int' = -1) -> 'int': ...
    def get_delimiter_start_key(self, delimiter_index: 'int') -> 'str': ...
    def get_delimiter_end_key(self, delimiter_index: 'int') -> 'str': ...
    def get_delimiter_start_position(self, line: 'int', column: 'int') -> 'Vector2': ...
    def get_delimiter_end_position(self, line: 'int', column: 'int') -> 'Vector2': ...
    def set_code_hint(self, code_hint: 'str') -> None: ...
    def set_code_hint_draw_below(self, draw_below: 'bool') -> None: ...
    def get_text_for_code_completion(self) -> 'str': ...
    def request_code_completion(self, force: 'bool' = False) -> None: ...
    def add_code_completion_option(self, type: 'CodeEdit__CodeCompletionKind', display_text: 'str', insert_text: 'str', text_color: 'Color' = default('''Color(1, 1, 1, 1)'''), icon: 'Resource' = default('''null'''), value: 'Variant' = default('''null'''), location: 'int' = 1024) -> None: ...
    def update_code_completion_options(self, force: 'bool') -> None: ...
    def get_code_completion_options(self) -> 'Array'['Dictionary']: ...
    def get_code_completion_option(self, index: 'int') -> 'Dictionary': ...
    def get_code_completion_selected_index(self) -> 'int': ...
    def set_code_completion_selected_index(self, index: 'int') -> None: ...
    def confirm_code_completion(self, replace: 'bool' = False) -> None: ...
    def cancel_code_completion(self) -> None: ...
    def set_code_completion_enabled(self, enable: 'bool') -> None: ...
    def is_code_completion_enabled(self) -> 'bool': ...
    def set_code_completion_prefixes(self, prefixes: 'Array'['str']) -> None: ...
    def get_code_completion_prefixes(self) -> 'Array'['str']: ...
    def set_line_length_guidelines(self, guideline_columns: 'Array'['int']) -> None: ...
    def get_line_length_guidelines(self) -> 'Array'['int']: ...
    def set_symbol_lookup_on_click_enabled(self, enable: 'bool') -> None: ...
    def is_symbol_lookup_on_click_enabled(self) -> 'bool': ...
    def get_text_for_symbol_lookup(self) -> 'str': ...
    def get_text_with_cursor_char(self, line: 'int', column: 'int') -> 'str': ...
    def set_symbol_lookup_word_as_valid(self, valid: 'bool') -> None: ...
    def set_symbol_tooltip_on_hover_enabled(self, enable: 'bool') -> None: ...
    def is_symbol_tooltip_on_hover_enabled(self) -> 'bool': ...
    def move_lines_up(self) -> None: ...
    def move_lines_down(self) -> None: ...
    def delete_lines(self) -> None: ...
    def duplicate_selection(self) -> None: ...
    def duplicate_lines(self) -> None: ...


class CodeHighlighter(SyntaxHighlighter):


    number_color: 'Color'
    symbol_color: 'Color'
    function_color: 'Color'
    member_variable_color: 'Color'
    keyword_colors: 'Dictionary'
    member_keyword_colors: 'Dictionary'
    color_regions: 'Dictionary'

    def add_keyword_color(self, keyword: 'str', color: 'Color') -> None: ...
    def remove_keyword_color(self, keyword: 'str') -> None: ...
    def has_keyword_color(self, keyword: 'str') -> 'bool': ...
    def get_keyword_color(self, keyword: 'str') -> 'Color': ...
    def set_keyword_colors(self, keywords: 'Dictionary') -> None: ...
    def clear_keyword_colors(self) -> None: ...
    def get_keyword_colors(self) -> 'Dictionary': ...
    def add_member_keyword_color(self, member_keyword: 'str', color: 'Color') -> None: ...
    def remove_member_keyword_color(self, member_keyword: 'str') -> None: ...
    def has_member_keyword_color(self, member_keyword: 'str') -> 'bool': ...
    def get_member_keyword_color(self, member_keyword: 'str') -> 'Color': ...
    def set_member_keyword_colors(self, member_keyword: 'Dictionary') -> None: ...
    def clear_member_keyword_colors(self) -> None: ...
    def get_member_keyword_colors(self) -> 'Dictionary': ...
    def add_color_region(self, start_key: 'str', end_key: 'str', color: 'Color', line_only: 'bool' = False) -> None: ...
    def remove_color_region(self, start_key: 'str') -> None: ...
    def has_color_region(self, start_key: 'str') -> 'bool': ...
    def set_color_regions(self, color_regions: 'Dictionary') -> None: ...
    def clear_color_regions(self) -> None: ...
    def get_color_regions(self) -> 'Dictionary': ...
    def set_function_color(self, color: 'Color') -> None: ...
    def get_function_color(self) -> 'Color': ...
    def set_number_color(self, color: 'Color') -> None: ...
    def get_number_color(self) -> 'Color': ...
    def set_symbol_color(self, color: 'Color') -> None: ...
    def get_symbol_color(self) -> 'Color': ...
    def set_member_variable_color(self, color: 'Color') -> None: ...
    def get_member_variable_color(self) -> 'Color': ...


class CollisionObject2D(Node2D):


    disable_mode: 'int'
    collision_layer: 'int'
    collision_mask: 'int'
    collision_priority: 'float'
    input_pickable: 'bool'
    input_event: 'Signal[Callable[[Node, InputEvent, int], None]]'  # input_event(viewport: Node, event: InputEvent, shape_idx: int)
    mouse_entered: 'Signal[Callable[[], None]]'  # mouse_entered()
    mouse_exited: 'Signal[Callable[[], None]]'  # mouse_exited()
    mouse_shape_entered: 'Signal[Callable[[int], None]]'  # mouse_shape_entered(shape_idx: int)
    mouse_shape_exited: 'Signal[Callable[[int], None]]'  # mouse_shape_exited(shape_idx: int)

    def _input_event(self, viewport: 'Viewport', event: 'InputEvent', shape_idx: 'int') -> None: ...
    def _mouse_enter(self) -> None: ...
    def _mouse_exit(self) -> None: ...
    def _mouse_shape_enter(self, shape_idx: 'int') -> None: ...
    def _mouse_shape_exit(self, shape_idx: 'int') -> None: ...
    def get_rid(self) -> 'RID': ...
    def set_collision_layer(self, layer: 'int') -> None: ...
    def get_collision_layer(self) -> 'int': ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_priority(self, priority: 'float') -> None: ...
    def get_collision_priority(self) -> 'float': ...
    def set_disable_mode(self, mode: 'CollisionObject2D__DisableMode') -> None: ...
    def get_disable_mode(self) -> 'CollisionObject2D__DisableMode': ...
    def set_pickable(self, enabled: 'bool') -> None: ...
    def is_pickable(self) -> 'bool': ...
    def create_shape_owner(self, owner: 'Object') -> 'int': ...
    def remove_shape_owner(self, owner_id: 'int') -> None: ...
    def get_shape_owners(self) -> 'PackedInt32Array': ...
    def shape_owner_set_transform(self, owner_id: 'int', transform: 'Transform2D') -> None: ...
    def shape_owner_get_transform(self, owner_id: 'int') -> 'Transform2D': ...
    def shape_owner_get_owner(self, owner_id: 'int') -> 'Object': ...
    def shape_owner_set_disabled(self, owner_id: 'int', disabled: 'bool') -> None: ...
    def is_shape_owner_disabled(self, owner_id: 'int') -> 'bool': ...
    def shape_owner_set_one_way_collision(self, owner_id: 'int', enable: 'bool') -> None: ...
    def is_shape_owner_one_way_collision_enabled(self, owner_id: 'int') -> 'bool': ...
    def shape_owner_set_one_way_collision_margin(self, owner_id: 'int', margin: 'float') -> None: ...
    def get_shape_owner_one_way_collision_margin(self, owner_id: 'int') -> 'float': ...
    def shape_owner_add_shape(self, owner_id: 'int', shape: 'Shape2D') -> None: ...
    def shape_owner_get_shape_count(self, owner_id: 'int') -> 'int': ...
    def shape_owner_get_shape(self, owner_id: 'int', shape_id: 'int') -> 'Shape2D': ...
    def shape_owner_get_shape_index(self, owner_id: 'int', shape_id: 'int') -> 'int': ...
    def shape_owner_remove_shape(self, owner_id: 'int', shape_id: 'int') -> None: ...
    def shape_owner_clear_shapes(self, owner_id: 'int') -> None: ...
    def shape_find_owner(self, shape_index: 'int') -> 'int': ...


class CollisionObject3D(Node3D):


    disable_mode: 'int'
    collision_layer: 'int'
    collision_mask: 'int'
    collision_priority: 'float'
    input_ray_pickable: 'bool'
    input_capture_on_drag: 'bool'
    input_event: 'Signal[Callable[[Node, InputEvent, Vector3, Vector3, int], None]]'  # input_event(camera: Node, event: InputEvent, event_position: Vector3, normal: Vector3, shape_idx: int)
    mouse_entered: 'Signal[Callable[[], None]]'  # mouse_entered()
    mouse_exited: 'Signal[Callable[[], None]]'  # mouse_exited()

    def _input_event(self, camera: 'Camera3D', event: 'InputEvent', event_position: 'Vector3', normal: 'Vector3', shape_idx: 'int') -> None: ...
    def _mouse_enter(self) -> None: ...
    def _mouse_exit(self) -> None: ...
    def set_collision_layer(self, layer: 'int') -> None: ...
    def get_collision_layer(self) -> 'int': ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_priority(self, priority: 'float') -> None: ...
    def get_collision_priority(self) -> 'float': ...
    def set_disable_mode(self, mode: 'CollisionObject3D__DisableMode') -> None: ...
    def get_disable_mode(self) -> 'CollisionObject3D__DisableMode': ...
    def set_ray_pickable(self, ray_pickable: 'bool') -> None: ...
    def is_ray_pickable(self) -> 'bool': ...
    def set_capture_input_on_drag(self, enable: 'bool') -> None: ...
    def get_capture_input_on_drag(self) -> 'bool': ...
    def get_rid(self) -> 'RID': ...
    def create_shape_owner(self, owner: 'Object') -> 'int': ...
    def remove_shape_owner(self, owner_id: 'int') -> None: ...
    def get_shape_owners(self) -> 'PackedInt32Array': ...
    def shape_owner_set_transform(self, owner_id: 'int', transform: 'Transform3D') -> None: ...
    def shape_owner_get_transform(self, owner_id: 'int') -> 'Transform3D': ...
    def shape_owner_get_owner(self, owner_id: 'int') -> 'Object': ...
    def shape_owner_set_disabled(self, owner_id: 'int', disabled: 'bool') -> None: ...
    def is_shape_owner_disabled(self, owner_id: 'int') -> 'bool': ...
    def shape_owner_add_shape(self, owner_id: 'int', shape: 'Shape3D') -> None: ...
    def shape_owner_get_shape_count(self, owner_id: 'int') -> 'int': ...
    def shape_owner_get_shape(self, owner_id: 'int', shape_id: 'int') -> 'Shape3D': ...
    def shape_owner_get_shape_index(self, owner_id: 'int', shape_id: 'int') -> 'int': ...
    def shape_owner_remove_shape(self, owner_id: 'int', shape_id: 'int') -> None: ...
    def shape_owner_clear_shapes(self, owner_id: 'int') -> None: ...
    def shape_find_owner(self, shape_index: 'int') -> 'int': ...


class CollisionPolygon2D(Node2D):


    build_mode: 'int'
    polygon: 'PackedVector2Array'
    disabled: 'bool'
    one_way_collision: 'bool'
    one_way_collision_margin: 'float'

    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_build_mode(self, build_mode: 'CollisionPolygon2D__BuildMode') -> None: ...
    def get_build_mode(self) -> 'CollisionPolygon2D__BuildMode': ...
    def set_disabled(self, disabled: 'bool') -> None: ...
    def is_disabled(self) -> 'bool': ...
    def set_one_way_collision(self, enabled: 'bool') -> None: ...
    def is_one_way_collision_enabled(self) -> 'bool': ...
    def set_one_way_collision_margin(self, margin: 'float') -> None: ...
    def get_one_way_collision_margin(self) -> 'float': ...


class CollisionPolygon3D(Node3D):


    depth: 'float'
    disabled: 'bool'
    polygon: 'PackedVector2Array'
    margin: 'float'
    debug_color: 'Color'
    debug_fill: 'bool'

    def set_depth(self, depth: 'float') -> None: ...
    def get_depth(self) -> 'float': ...
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_disabled(self, disabled: 'bool') -> None: ...
    def is_disabled(self) -> 'bool': ...
    def set_debug_color(self, color: 'Color') -> None: ...
    def get_debug_color(self) -> 'Color': ...
    def set_enable_debug_fill(self, enable: 'bool') -> None: ...
    def get_enable_debug_fill(self) -> 'bool': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...


class CollisionShape2D(Node2D):


    shape: 'Shape2D'
    disabled: 'bool'
    one_way_collision: 'bool'
    one_way_collision_margin: 'float'
    debug_color: 'Color'

    def set_shape(self, shape: 'Shape2D') -> None: ...
    def get_shape(self) -> 'Shape2D': ...
    def set_disabled(self, disabled: 'bool') -> None: ...
    def is_disabled(self) -> 'bool': ...
    def set_one_way_collision(self, enabled: 'bool') -> None: ...
    def is_one_way_collision_enabled(self) -> 'bool': ...
    def set_one_way_collision_margin(self, margin: 'float') -> None: ...
    def get_one_way_collision_margin(self) -> 'float': ...
    def set_debug_color(self, color: 'Color') -> None: ...
    def get_debug_color(self) -> 'Color': ...


class CollisionShape3D(Node3D):


    shape: 'Shape3D'
    disabled: 'bool'
    debug_color: 'Color'
    debug_fill: 'bool'

    def resource_changed(self, resource: 'Resource') -> None: ...
    def set_shape(self, shape: 'Shape3D') -> None: ...
    def get_shape(self) -> 'Shape3D': ...
    def set_disabled(self, enable: 'bool') -> None: ...
    def is_disabled(self) -> 'bool': ...
    def make_convex_from_siblings(self) -> None: ...
    def set_debug_color(self, color: 'Color') -> None: ...
    def get_debug_color(self) -> 'Color': ...
    def set_enable_debug_fill(self, enable: 'bool') -> None: ...
    def get_enable_debug_fill(self) -> 'bool': ...


class ColorPalette(Resource):


    colors: 'PackedColorArray'

    def set_colors(self, colors: 'PackedColorArray') -> None: ...
    def get_colors(self) -> 'PackedColorArray': ...


class ColorPicker(VBoxContainer):


    color: 'Color'
    edit_alpha: 'bool'
    color_mode: 'int'
    deferred_mode: 'bool'
    picker_shape: 'int'
    can_add_swatches: 'bool'
    sampler_visible: 'bool'
    color_modes_visible: 'bool'
    sliders_visible: 'bool'
    hex_visible: 'bool'
    presets_visible: 'bool'
    color_changed: 'Signal[Callable[[Color], None]]'  # color_changed(color: Color)
    preset_added: 'Signal[Callable[[Color], None]]'  # preset_added(color: Color)
    preset_removed: 'Signal[Callable[[Color], None]]'  # preset_removed(color: Color)

    def set_pick_color(self, color: 'Color') -> None: ...
    def get_pick_color(self) -> 'Color': ...
    def set_deferred_mode(self, mode: 'bool') -> None: ...
    def is_deferred_mode(self) -> 'bool': ...
    def set_color_mode(self, color_mode: 'ColorPicker__ColorModeType') -> None: ...
    def get_color_mode(self) -> 'ColorPicker__ColorModeType': ...
    def set_edit_alpha(self, show: 'bool') -> None: ...
    def is_editing_alpha(self) -> 'bool': ...
    def set_can_add_swatches(self, enabled: 'bool') -> None: ...
    def are_swatches_enabled(self) -> 'bool': ...
    def set_presets_visible(self, visible: 'bool') -> None: ...
    def are_presets_visible(self) -> 'bool': ...
    def set_modes_visible(self, visible: 'bool') -> None: ...
    def are_modes_visible(self) -> 'bool': ...
    def set_sampler_visible(self, visible: 'bool') -> None: ...
    def is_sampler_visible(self) -> 'bool': ...
    def set_sliders_visible(self, visible: 'bool') -> None: ...
    def are_sliders_visible(self) -> 'bool': ...
    def set_hex_visible(self, visible: 'bool') -> None: ...
    def is_hex_visible(self) -> 'bool': ...
    def add_preset(self, color: 'Color') -> None: ...
    def erase_preset(self, color: 'Color') -> None: ...
    def get_presets(self) -> 'PackedColorArray': ...
    def add_recent_preset(self, color: 'Color') -> None: ...
    def erase_recent_preset(self, color: 'Color') -> None: ...
    def get_recent_presets(self) -> 'PackedColorArray': ...
    def set_picker_shape(self, shape: 'ColorPicker__PickerShapeType') -> None: ...
    def get_picker_shape(self) -> 'ColorPicker__PickerShapeType': ...


class ColorPickerButton(Button):


    color: 'Color'
    edit_alpha: 'bool'
    color_changed: 'Signal[Callable[[Color], None]]'  # color_changed(color: Color)
    popup_closed: 'Signal[Callable[[], None]]'  # popup_closed()
    picker_created: 'Signal[Callable[[], None]]'  # picker_created()

    def set_pick_color(self, color: 'Color') -> None: ...
    def get_pick_color(self) -> 'Color': ...
    def get_picker(self) -> 'ColorPicker': ...
    def get_popup(self) -> 'PopupPanel': ...
    def set_edit_alpha(self, show: 'bool') -> None: ...
    def is_editing_alpha(self) -> 'bool': ...


class ColorRect(Control):


    color: 'Color'

    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...


class Compositor(Resource):


    compositor_effects: 'Array'['CompositorEffect']

    def set_compositor_effects(self, compositor_effects: 'Array'['CompositorEffect']) -> None: ...
    def get_compositor_effects(self) -> 'Array'['CompositorEffect']: ...


class CompositorEffect(Resource):


    enabled: 'bool'
    effect_callback_type: 'int'
    access_resolved_color: 'bool'
    access_resolved_depth: 'bool'
    needs_motion_vectors: 'bool'
    needs_normal_roughness: 'bool'
    needs_separate_specular: 'bool'

    def _render_callback(self, effect_callback_type: 'int', render_data: 'RenderData') -> None: ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def get_enabled(self) -> 'bool': ...
    def set_effect_callback_type(self, effect_callback_type: 'CompositorEffect__EffectCallbackType') -> None: ...
    def get_effect_callback_type(self) -> 'CompositorEffect__EffectCallbackType': ...
    def set_access_resolved_color(self, enable: 'bool') -> None: ...
    def get_access_resolved_color(self) -> 'bool': ...
    def set_access_resolved_depth(self, enable: 'bool') -> None: ...
    def get_access_resolved_depth(self) -> 'bool': ...
    def set_needs_motion_vectors(self, enable: 'bool') -> None: ...
    def get_needs_motion_vectors(self) -> 'bool': ...
    def set_needs_normal_roughness(self, enable: 'bool') -> None: ...
    def get_needs_normal_roughness(self) -> 'bool': ...
    def set_needs_separate_specular(self, enable: 'bool') -> None: ...
    def get_needs_separate_specular(self) -> 'bool': ...


class CompressedCubemap(CompressedTextureLayered): ...


class CompressedCubemapArray(CompressedTextureLayered): ...


class CompressedTexture2D(Texture2D):


    load_path: 'str'

    def load(self, path: 'str') -> 'Error': ...
    def get_load_path(self) -> 'str': ...


class CompressedTexture2DArray(CompressedTextureLayered): ...


class CompressedTexture3D(Texture3D):


    load_path: 'str'

    def load(self, path: 'str') -> 'Error': ...
    def get_load_path(self) -> 'str': ...


class CompressedTextureLayered(TextureLayered):


    load_path: 'str'

    def load(self, path: 'str') -> 'Error': ...
    def get_load_path(self) -> 'str': ...


class ConcavePolygonShape2D(Shape2D):


    segments: 'PackedVector2Array'

    def set_segments(self, segments: 'PackedVector2Array') -> None: ...
    def get_segments(self) -> 'PackedVector2Array': ...


class ConcavePolygonShape3D(Shape3D):


    data: 'PackedVector3Array'
    backface_collision: 'bool'

    def set_faces(self, faces: 'PackedVector3Array') -> None: ...
    def get_faces(self) -> 'PackedVector3Array': ...
    def set_backface_collision_enabled(self, enabled: 'bool') -> None: ...
    def is_backface_collision_enabled(self) -> 'bool': ...


class ConeTwistJoint3D(Joint3D):


    swing_span: 'float'
    twist_span: 'float'
    bias: 'float'
    softness: 'float'
    relaxation: 'float'

    def set_param(self, param: 'ConeTwistJoint3D__Param', value: 'float') -> None: ...
    def get_param(self, param: 'ConeTwistJoint3D__Param') -> 'float': ...


class ConfigFile(RefCounted):



    def set_value(self, section: 'str', key: 'str', value: 'Variant') -> None: ...
    def get_value(self, section: 'str', key: 'str', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def has_section(self, section: 'str') -> 'bool': ...
    def has_section_key(self, section: 'str', key: 'str') -> 'bool': ...
    def get_sections(self) -> 'PackedStringArray': ...
    def get_section_keys(self, section: 'str') -> 'PackedStringArray': ...
    def erase_section(self, section: 'str') -> None: ...
    def erase_section_key(self, section: 'str', key: 'str') -> None: ...
    def load(self, path: 'str') -> 'Error': ...
    def parse(self, data: 'str') -> 'Error': ...
    def save(self, path: 'str') -> 'Error': ...
    def encode_to_text(self) -> 'str': ...
    def load_encrypted(self, path: 'str', key: 'PackedByteArray') -> 'Error': ...
    def load_encrypted_pass(self, path: 'str', password: 'str') -> 'Error': ...
    def save_encrypted(self, path: 'str', key: 'PackedByteArray') -> 'Error': ...
    def save_encrypted_pass(self, path: 'str', password: 'str') -> 'Error': ...
    def clear(self) -> None: ...


class ConfirmationDialog(AcceptDialog):


    cancel_button_text: 'str'

    def get_cancel_button(self) -> 'Button': ...
    def set_cancel_button_text(self, text: 'str') -> None: ...
    def get_cancel_button_text(self) -> 'str': ...


class Container(Control):


    NOTIFICATION_PRE_SORT_CHILDREN: 'int' = 50
    NOTIFICATION_SORT_CHILDREN: 'int' = 51
    pre_sort_children: 'Signal[Callable[[], None]]'  # pre_sort_children()
    sort_children: 'Signal[Callable[[], None]]'  # sort_children()

    def _get_allowed_size_flags_horizontal(self) -> 'PackedInt32Array': ...
    def _get_allowed_size_flags_vertical(self) -> 'PackedInt32Array': ...
    def queue_sort(self) -> None: ...
    def fit_child_in_rect(self, child: 'Control', rect: 'Rect2') -> None: ...


class Control(CanvasItem):


    clip_contents: 'bool'
    custom_minimum_size: 'Vector2'
    layout_direction: 'int'
    layout_mode: 'int'
    anchors_preset: 'int'
    anchor_left: 'float'
    anchor_top: 'float'
    anchor_right: 'float'
    anchor_bottom: 'float'
    offset_left: 'float'
    offset_top: 'float'
    offset_right: 'float'
    offset_bottom: 'float'
    grow_horizontal: 'int'
    grow_vertical: 'int'
    size: 'Vector2'
    position: 'Vector2'
    global_position: 'Vector2'
    rotation: 'float'
    rotation_degrees: 'float'
    scale: 'Vector2'
    pivot_offset: 'Vector2'
    size_flags_horizontal: 'int'
    size_flags_vertical: 'int'
    size_flags_stretch_ratio: 'float'
    localize_numeral_system: 'bool'
    auto_translate: 'bool'
    tooltip_text: 'str'
    tooltip_auto_translate_mode: 'int'
    focus_neighbor_left: 'NodePath'
    focus_neighbor_top: 'NodePath'
    focus_neighbor_right: 'NodePath'
    focus_neighbor_bottom: 'NodePath'
    focus_next: 'NodePath'
    focus_previous: 'NodePath'
    focus_mode: 'int'
    mouse_filter: 'int'
    mouse_force_pass_scroll_events: 'bool'
    mouse_default_cursor_shape: 'int'
    shortcut_context: 'Object'
    theme: 'Theme'
    theme_type_variation: 'str'
    NOTIFICATION_RESIZED: 'int' = 40
    NOTIFICATION_MOUSE_ENTER: 'int' = 41
    NOTIFICATION_MOUSE_EXIT: 'int' = 42
    NOTIFICATION_MOUSE_ENTER_SELF: 'int' = 60
    NOTIFICATION_MOUSE_EXIT_SELF: 'int' = 61
    NOTIFICATION_FOCUS_ENTER: 'int' = 43
    NOTIFICATION_FOCUS_EXIT: 'int' = 44
    NOTIFICATION_THEME_CHANGED: 'int' = 45
    NOTIFICATION_SCROLL_BEGIN: 'int' = 47
    NOTIFICATION_SCROLL_END: 'int' = 48
    NOTIFICATION_LAYOUT_DIRECTION_CHANGED: 'int' = 49
    resized: 'Signal[Callable[[], None]]'  # resized()
    gui_input: 'Signal[Callable[[InputEvent], None]]'  # gui_input(event: InputEvent)
    mouse_entered: 'Signal[Callable[[], None]]'  # mouse_entered()
    mouse_exited: 'Signal[Callable[[], None]]'  # mouse_exited()
    focus_entered: 'Signal[Callable[[], None]]'  # focus_entered()
    focus_exited: 'Signal[Callable[[], None]]'  # focus_exited()
    size_flags_changed: 'Signal[Callable[[], None]]'  # size_flags_changed()
    minimum_size_changed: 'Signal[Callable[[], None]]'  # minimum_size_changed()
    theme_changed: 'Signal[Callable[[], None]]'  # theme_changed()

    def _has_point(self, point: 'Vector2') -> 'bool': ...
    def _structured_text_parser(self, args: 'Array', text: 'str') -> 'Array'['Vector3i']: ...
    def _get_minimum_size(self) -> 'Vector2': ...
    def _get_tooltip(self, at_position: 'Vector2') -> 'str': ...
    def _get_drag_data(self, at_position: 'Vector2') -> 'Variant': ...
    def _can_drop_data(self, at_position: 'Vector2', data: 'Variant') -> 'bool': ...
    def _drop_data(self, at_position: 'Vector2', data: 'Variant') -> None: ...
    def _make_custom_tooltip(self, for_text: 'str') -> 'Object': ...
    def _gui_input(self, event: 'InputEvent') -> None: ...
    def accept_event(self) -> None: ...
    def get_minimum_size(self) -> 'Vector2': ...
    def get_combined_minimum_size(self) -> 'Vector2': ...
    def set_anchors_preset(self, preset: 'Control__LayoutPreset', keep_offsets: 'bool' = False) -> None: ...
    def set_offsets_preset(self, preset: 'Control__LayoutPreset', resize_mode: 'Control__LayoutPresetMode' = 0, margin: 'int' = 0) -> None: ...
    def set_anchors_and_offsets_preset(self, preset: 'Control__LayoutPreset', resize_mode: 'Control__LayoutPresetMode' = 0, margin: 'int' = 0) -> None: ...
    def set_anchor(self, side: 'Side', anchor: 'float', keep_offset: 'bool' = False, push_opposite_anchor: 'bool' = True) -> None: ...
    def get_anchor(self, side: 'Side') -> 'float': ...
    def set_offset(self, side: 'Side', offset: 'float') -> None: ...
    def get_offset(self, offset: 'Side') -> 'float': ...
    def set_anchor_and_offset(self, side: 'Side', anchor: 'float', offset: 'float', push_opposite_anchor: 'bool' = False) -> None: ...
    def set_begin(self, position: 'Vector2') -> None: ...
    def set_end(self, position: 'Vector2') -> None: ...
    def set_position(self, position: 'Vector2', keep_offsets: 'bool' = False) -> None: ...
    def set_size(self, size: 'Vector2', keep_offsets: 'bool' = False) -> None: ...
    def reset_size(self) -> None: ...
    def set_custom_minimum_size(self, size: 'Vector2') -> None: ...
    def set_global_position(self, position: 'Vector2', keep_offsets: 'bool' = False) -> None: ...
    def set_rotation(self, radians: 'float') -> None: ...
    def set_rotation_degrees(self, degrees: 'float') -> None: ...
    def set_scale(self, scale: 'Vector2') -> None: ...
    def set_pivot_offset(self, pivot_offset: 'Vector2') -> None: ...
    def get_begin(self) -> 'Vector2': ...
    def get_end(self) -> 'Vector2': ...
    def get_position(self) -> 'Vector2': ...
    def get_size(self) -> 'Vector2': ...
    def get_rotation(self) -> 'float': ...
    def get_rotation_degrees(self) -> 'float': ...
    def get_scale(self) -> 'Vector2': ...
    def get_pivot_offset(self) -> 'Vector2': ...
    def get_custom_minimum_size(self) -> 'Vector2': ...
    def get_parent_area_size(self) -> 'Vector2': ...
    def get_global_position(self) -> 'Vector2': ...
    def get_screen_position(self) -> 'Vector2': ...
    def get_rect(self) -> 'Rect2': ...
    def get_global_rect(self) -> 'Rect2': ...
    def set_focus_mode(self, mode: 'Control__FocusMode') -> None: ...
    def get_focus_mode(self) -> 'Control__FocusMode': ...
    def has_focus(self) -> 'bool': ...
    def grab_focus(self) -> None: ...
    def release_focus(self) -> None: ...
    def find_prev_valid_focus(self) -> 'Control': ...
    def find_next_valid_focus(self) -> 'Control': ...
    def find_valid_focus_neighbor(self, side: 'Side') -> 'Control': ...
    def set_h_size_flags(self, flags: 'Control__SizeFlags') -> None: ...
    def get_h_size_flags(self) -> 'Control__SizeFlags': ...
    def set_stretch_ratio(self, ratio: 'float') -> None: ...
    def get_stretch_ratio(self) -> 'float': ...
    def set_v_size_flags(self, flags: 'Control__SizeFlags') -> None: ...
    def get_v_size_flags(self) -> 'Control__SizeFlags': ...
    def set_theme(self, theme: 'Theme') -> None: ...
    def get_theme(self) -> 'Theme': ...
    def set_theme_type_variation(self, theme_type: 'StringName') -> None: ...
    def get_theme_type_variation(self) -> 'StringName': ...
    def begin_bulk_theme_override(self) -> None: ...
    def end_bulk_theme_override(self) -> None: ...
    def add_theme_icon_override(self, name: 'StringName', texture: 'Texture2D') -> None: ...
    def add_theme_stylebox_override(self, name: 'StringName', stylebox: 'StyleBox') -> None: ...
    def add_theme_font_override(self, name: 'StringName', font: 'Font') -> None: ...
    def add_theme_font_size_override(self, name: 'StringName', font_size: 'int') -> None: ...
    def add_theme_color_override(self, name: 'StringName', color: 'Color') -> None: ...
    def add_theme_constant_override(self, name: 'StringName', constant: 'int') -> None: ...
    def remove_theme_icon_override(self, name: 'StringName') -> None: ...
    def remove_theme_stylebox_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_size_override(self, name: 'StringName') -> None: ...
    def remove_theme_color_override(self, name: 'StringName') -> None: ...
    def remove_theme_constant_override(self, name: 'StringName') -> None: ...
    def get_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Texture2D': ...
    def get_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'StyleBox': ...
    def get_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Font': ...
    def get_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'int': ...
    def get_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Color': ...
    def get_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'int': ...
    def has_theme_icon_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_stylebox_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_font_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_font_size_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_color_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_constant_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def get_theme_default_base_scale(self) -> 'float': ...
    def get_theme_default_font(self) -> 'Font': ...
    def get_theme_default_font_size(self) -> 'int': ...
    def get_parent_control(self) -> 'Control': ...
    def set_h_grow_direction(self, direction: 'Control__GrowDirection') -> None: ...
    def get_h_grow_direction(self) -> 'Control__GrowDirection': ...
    def set_v_grow_direction(self, direction: 'Control__GrowDirection') -> None: ...
    def get_v_grow_direction(self) -> 'Control__GrowDirection': ...
    def set_tooltip_auto_translate_mode(self, mode: 'Node__AutoTranslateMode') -> None: ...
    def get_tooltip_auto_translate_mode(self) -> 'Node__AutoTranslateMode': ...
    def set_tooltip_text(self, hint: 'str') -> None: ...
    def get_tooltip_text(self) -> 'str': ...
    def get_tooltip(self, at_position: 'Vector2' = default('''Vector2(0, 0)''')) -> 'str': ...
    def set_default_cursor_shape(self, shape: 'Control__CursorShape') -> None: ...
    def get_default_cursor_shape(self) -> 'Control__CursorShape': ...
    def get_cursor_shape(self, position: 'Vector2' = default('''Vector2(0, 0)''')) -> 'Control__CursorShape': ...
    def set_focus_neighbor(self, side: 'Side', neighbor: 'NodePath') -> None: ...
    def get_focus_neighbor(self, side: 'Side') -> 'NodePath': ...
    def set_focus_next(self, next: 'NodePath') -> None: ...
    def get_focus_next(self) -> 'NodePath': ...
    def set_focus_previous(self, previous: 'NodePath') -> None: ...
    def get_focus_previous(self) -> 'NodePath': ...
    def force_drag(self, data: 'Variant', preview: 'Control') -> None: ...
    def set_mouse_filter(self, filter: 'Control__MouseFilter') -> None: ...
    def get_mouse_filter(self) -> 'Control__MouseFilter': ...
    def set_force_pass_scroll_events(self, force_pass_scroll_events: 'bool') -> None: ...
    def is_force_pass_scroll_events(self) -> 'bool': ...
    def set_clip_contents(self, enable: 'bool') -> None: ...
    def is_clipping_contents(self) -> 'bool': ...
    def grab_click_focus(self) -> None: ...
    def set_drag_forwarding(self, drag_func: 'Callable', can_drop_func: 'Callable', drop_func: 'Callable') -> None: ...
    def set_drag_preview(self, control: 'Control') -> None: ...
    def is_drag_successful(self) -> 'bool': ...
    def warp_mouse(self, position: 'Vector2') -> None: ...
    def set_shortcut_context(self, node: 'Node') -> None: ...
    def get_shortcut_context(self) -> 'Node': ...
    def update_minimum_size(self) -> None: ...
    def set_layout_direction(self, direction: 'Control__LayoutDirection') -> None: ...
    def get_layout_direction(self) -> 'Control__LayoutDirection': ...
    def is_layout_rtl(self) -> 'bool': ...
    def set_auto_translate(self, enable: 'bool') -> None: ...
    def is_auto_translating(self) -> 'bool': ...
    def set_localize_numeral_system(self, enable: 'bool') -> None: ...
    def is_localizing_numeral_system(self) -> 'bool': ...


class ConvexPolygonShape2D(Shape2D):


    points: 'PackedVector2Array'

    def set_point_cloud(self, point_cloud: 'PackedVector2Array') -> None: ...
    def set_points(self, points: 'PackedVector2Array') -> None: ...
    def get_points(self) -> 'PackedVector2Array': ...


class ConvexPolygonShape3D(Shape3D):


    points: 'Array'

    def set_points(self, points: 'PackedVector3Array') -> None: ...
    def get_points(self) -> 'PackedVector3Array': ...


class Crypto(RefCounted):



    def generate_random_bytes(self, size: 'int') -> 'PackedByteArray': ...
    def generate_rsa(self, size: 'int') -> 'CryptoKey': ...
    def generate_self_signed_certificate(self, key: 'CryptoKey', issuer_name: 'str' = "CN=myserver,O=myorganisation,C=IT", not_before: 'str' = "20140101000000", not_after: 'str' = "20340101000000") -> 'X509Certificate': ...
    def sign(self, hash_type: 'HashingContext__HashType', hash: 'PackedByteArray', key: 'CryptoKey') -> 'PackedByteArray': ...
    def verify(self, hash_type: 'HashingContext__HashType', hash: 'PackedByteArray', signature: 'PackedByteArray', key: 'CryptoKey') -> 'bool': ...
    def encrypt(self, key: 'CryptoKey', plaintext: 'PackedByteArray') -> 'PackedByteArray': ...
    def decrypt(self, key: 'CryptoKey', ciphertext: 'PackedByteArray') -> 'PackedByteArray': ...
    def hmac_digest(self, hash_type: 'HashingContext__HashType', key: 'PackedByteArray', msg: 'PackedByteArray') -> 'PackedByteArray': ...
    def constant_time_compare(self, trusted: 'PackedByteArray', received: 'PackedByteArray') -> 'bool': ...


class CryptoKey(Resource):



    def save(self, path: 'str', public_only: 'bool' = False) -> 'Error': ...
    def load(self, path: 'str', public_only: 'bool' = False) -> 'Error': ...
    def is_public_only(self) -> 'bool': ...
    def save_to_string(self, public_only: 'bool' = False) -> 'str': ...
    def load_from_string(self, string_key: 'str', public_only: 'bool' = False) -> 'Error': ...


class Cubemap(ImageTextureLayered):



    def create_placeholder(self) -> 'Resource': ...


class CubemapArray(ImageTextureLayered):



    def create_placeholder(self) -> 'Resource': ...


class Curve(Resource):


    min_domain: 'float'
    max_domain: 'float'
    min_value: 'float'
    max_value: 'float'
    bake_resolution: 'int'
    point_count: 'int'
    range_changed: 'Signal[Callable[[], None]]'  # range_changed()
    domain_changed: 'Signal[Callable[[], None]]'  # domain_changed()

    def get_point_count(self) -> 'int': ...
    def set_point_count(self, count: 'int') -> None: ...
    def add_point(self, position: 'Vector2', left_tangent: 'float' = 0, right_tangent: 'float' = 0, left_mode: 'Curve__TangentMode' = 0, right_mode: 'Curve__TangentMode' = 0) -> 'int': ...
    def remove_point(self, index: 'int') -> None: ...
    def clear_points(self) -> None: ...
    def get_point_position(self, index: 'int') -> 'Vector2': ...
    def set_point_value(self, index: 'int', y: 'float') -> None: ...
    def set_point_offset(self, index: 'int', offset: 'float') -> 'int': ...
    def sample(self, offset: 'float') -> 'float': ...
    def sample_baked(self, offset: 'float') -> 'float': ...
    def get_point_left_tangent(self, index: 'int') -> 'float': ...
    def get_point_right_tangent(self, index: 'int') -> 'float': ...
    def get_point_left_mode(self, index: 'int') -> 'Curve__TangentMode': ...
    def get_point_right_mode(self, index: 'int') -> 'Curve__TangentMode': ...
    def set_point_left_tangent(self, index: 'int', tangent: 'float') -> None: ...
    def set_point_right_tangent(self, index: 'int', tangent: 'float') -> None: ...
    def set_point_left_mode(self, index: 'int', mode: 'Curve__TangentMode') -> None: ...
    def set_point_right_mode(self, index: 'int', mode: 'Curve__TangentMode') -> None: ...
    def get_min_value(self) -> 'float': ...
    def set_min_value(self, min: 'float') -> None: ...
    def get_max_value(self) -> 'float': ...
    def set_max_value(self, max: 'float') -> None: ...
    def get_value_range(self) -> 'float': ...
    def get_min_domain(self) -> 'float': ...
    def set_min_domain(self, min: 'float') -> None: ...
    def get_max_domain(self) -> 'float': ...
    def set_max_domain(self, max: 'float') -> None: ...
    def get_domain_range(self) -> 'float': ...
    def clean_dupes(self) -> None: ...
    def bake(self) -> None: ...
    def get_bake_resolution(self) -> 'int': ...
    def set_bake_resolution(self, resolution: 'int') -> None: ...


class Curve2D(Resource):


    bake_interval: 'float'
    point_count: 'int'

    def get_point_count(self) -> 'int': ...
    def set_point_count(self, count: 'int') -> None: ...
    def add_point(self, position: 'Vector2', in_: 'Vector2' = default('''Vector2(0, 0)'''), out: 'Vector2' = default('''Vector2(0, 0)'''), index: 'int' = -1) -> None: ...
    def set_point_position(self, idx: 'int', position: 'Vector2') -> None: ...
    def get_point_position(self, idx: 'int') -> 'Vector2': ...
    def set_point_in(self, idx: 'int', position: 'Vector2') -> None: ...
    def get_point_in(self, idx: 'int') -> 'Vector2': ...
    def set_point_out(self, idx: 'int', position: 'Vector2') -> None: ...
    def get_point_out(self, idx: 'int') -> 'Vector2': ...
    def remove_point(self, idx: 'int') -> None: ...
    def clear_points(self) -> None: ...
    def sample(self, idx: 'int', t: 'float') -> 'Vector2': ...
    def samplef(self, fofs: 'float') -> 'Vector2': ...
    def set_bake_interval(self, distance: 'float') -> None: ...
    def get_bake_interval(self) -> 'float': ...
    def get_baked_length(self) -> 'float': ...
    def sample_baked(self, offset: 'float' = 0.0, cubic: 'bool' = False) -> 'Vector2': ...
    def sample_baked_with_rotation(self, offset: 'float' = 0.0, cubic: 'bool' = False) -> 'Transform2D': ...
    def get_baked_points(self) -> 'PackedVector2Array': ...
    def get_closest_point(self, to_point: 'Vector2') -> 'Vector2': ...
    def get_closest_offset(self, to_point: 'Vector2') -> 'float': ...
    def tessellate(self, max_stages: 'int' = 5, tolerance_degrees: 'float' = 4) -> 'PackedVector2Array': ...
    def tessellate_even_length(self, max_stages: 'int' = 5, tolerance_length: 'float' = 20.0) -> 'PackedVector2Array': ...


class Curve3D(Resource):


    closed: 'bool'
    bake_interval: 'float'
    point_count: 'int'
    up_vector_enabled: 'bool'

    def get_point_count(self) -> 'int': ...
    def set_point_count(self, count: 'int') -> None: ...
    def add_point(self, position: 'Vector3', in_: 'Vector3' = default('''Vector3(0, 0, 0)'''), out: 'Vector3' = default('''Vector3(0, 0, 0)'''), index: 'int' = -1) -> None: ...
    def set_point_position(self, idx: 'int', position: 'Vector3') -> None: ...
    def get_point_position(self, idx: 'int') -> 'Vector3': ...
    def set_point_tilt(self, idx: 'int', tilt: 'float') -> None: ...
    def get_point_tilt(self, idx: 'int') -> 'float': ...
    def set_point_in(self, idx: 'int', position: 'Vector3') -> None: ...
    def get_point_in(self, idx: 'int') -> 'Vector3': ...
    def set_point_out(self, idx: 'int', position: 'Vector3') -> None: ...
    def get_point_out(self, idx: 'int') -> 'Vector3': ...
    def remove_point(self, idx: 'int') -> None: ...
    def clear_points(self) -> None: ...
    def sample(self, idx: 'int', t: 'float') -> 'Vector3': ...
    def samplef(self, fofs: 'float') -> 'Vector3': ...
    def set_closed(self, closed: 'bool') -> None: ...
    def is_closed(self) -> 'bool': ...
    def set_bake_interval(self, distance: 'float') -> None: ...
    def get_bake_interval(self) -> 'float': ...
    def set_up_vector_enabled(self, enable: 'bool') -> None: ...
    def is_up_vector_enabled(self) -> 'bool': ...
    def get_baked_length(self) -> 'float': ...
    def sample_baked(self, offset: 'float' = 0.0, cubic: 'bool' = False) -> 'Vector3': ...
    def sample_baked_with_rotation(self, offset: 'float' = 0.0, cubic: 'bool' = False, apply_tilt: 'bool' = False) -> 'Transform3D': ...
    def sample_baked_up_vector(self, offset: 'float', apply_tilt: 'bool' = False) -> 'Vector3': ...
    def get_baked_points(self) -> 'PackedVector3Array': ...
    def get_baked_tilts(self) -> 'PackedFloat32Array': ...
    def get_baked_up_vectors(self) -> 'PackedVector3Array': ...
    def get_closest_point(self, to_point: 'Vector3') -> 'Vector3': ...
    def get_closest_offset(self, to_point: 'Vector3') -> 'float': ...
    def tessellate(self, max_stages: 'int' = 5, tolerance_degrees: 'float' = 4) -> 'PackedVector3Array': ...
    def tessellate_even_length(self, max_stages: 'int' = 5, tolerance_length: 'float' = 0.2) -> 'PackedVector3Array': ...


class CurveTexture(Texture2D):


    width: 'int'
    texture_mode: 'int'
    curve: 'Curve'

    def set_width(self, width: 'int') -> None: ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    def set_texture_mode(self, texture_mode: 'CurveTexture__TextureMode') -> None: ...
    def get_texture_mode(self) -> 'CurveTexture__TextureMode': ...


class CurveXYZTexture(Texture2D):


    width: 'int'
    curve_x: 'Curve'
    curve_y: 'Curve'
    curve_z: 'Curve'

    def set_width(self, width: 'int') -> None: ...
    def set_curve_x(self, curve: 'Curve') -> None: ...
    def get_curve_x(self) -> 'Curve': ...
    def set_curve_y(self, curve: 'Curve') -> None: ...
    def get_curve_y(self) -> 'Curve': ...
    def set_curve_z(self, curve: 'Curve') -> None: ...
    def get_curve_z(self) -> 'Curve': ...


class CylinderMesh(PrimitiveMesh):


    top_radius: 'float'
    bottom_radius: 'float'
    height: 'float'
    radial_segments: 'int'
    rings: 'int'
    cap_top: 'bool'
    cap_bottom: 'bool'

    def set_top_radius(self, radius: 'float') -> None: ...
    def get_top_radius(self) -> 'float': ...
    def set_bottom_radius(self, radius: 'float') -> None: ...
    def get_bottom_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_radial_segments(self, segments: 'int') -> None: ...
    def get_radial_segments(self) -> 'int': ...
    def set_rings(self, rings: 'int') -> None: ...
    def get_rings(self) -> 'int': ...
    def set_cap_top(self, cap_top: 'bool') -> None: ...
    def is_cap_top(self) -> 'bool': ...
    def set_cap_bottom(self, cap_bottom: 'bool') -> None: ...
    def is_cap_bottom(self) -> 'bool': ...


class CylinderShape3D(Shape3D):


    height: 'float'
    radius: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...


class DTLSServer(RefCounted):



    def setup(self, server_options: 'TLSOptions') -> 'Error': ...
    def take_connection(self, udp_peer: 'PacketPeerUDP') -> 'PacketPeerDTLS': ...


class DampedSpringJoint2D(Joint2D):


    length: 'float'
    rest_length: 'float'
    stiffness: 'float'
    damping: 'float'

    def set_length(self, length: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_rest_length(self, rest_length: 'float') -> None: ...
    def get_rest_length(self) -> 'float': ...
    def set_stiffness(self, stiffness: 'float') -> None: ...
    def get_stiffness(self) -> 'float': ...
    def set_damping(self, damping: 'float') -> None: ...
    def get_damping(self) -> 'float': ...


class Decal(VisualInstance3D):


    size: 'Vector3'
    texture_albedo: 'Texture2D' | 'CompressedTexture2D' | 'CurveTexture' | 'CurveXYZTexture' | 'ExternalTexture' | 'GradientTexture1D' | 'GradientTexture2D' | 'ImageTexture' | 'NoiseTexture2D' | 'PlaceholderTexture2D' | 'PortableCompressedTexture2D'
    texture_normal: 'Texture2D' | 'CompressedTexture2D' | 'CurveTexture' | 'CurveXYZTexture' | 'ExternalTexture' | 'GradientTexture1D' | 'GradientTexture2D' | 'ImageTexture' | 'NoiseTexture2D' | 'PlaceholderTexture2D' | 'PortableCompressedTexture2D'
    texture_orm: 'Texture2D' | 'CompressedTexture2D' | 'CurveTexture' | 'CurveXYZTexture' | 'ExternalTexture' | 'GradientTexture1D' | 'GradientTexture2D' | 'ImageTexture' | 'NoiseTexture2D' | 'PlaceholderTexture2D' | 'PortableCompressedTexture2D'
    texture_emission: 'Texture2D' | 'CompressedTexture2D' | 'CurveTexture' | 'CurveXYZTexture' | 'ExternalTexture' | 'GradientTexture1D' | 'GradientTexture2D' | 'ImageTexture' | 'NoiseTexture2D' | 'PlaceholderTexture2D' | 'PortableCompressedTexture2D'
    emission_energy: 'float'
    modulate: 'Color'
    albedo_mix: 'float'
    normal_fade: 'float'
    upper_fade: 'float'
    lower_fade: 'float'
    distance_fade_enabled: 'bool'
    distance_fade_begin: 'float'
    distance_fade_length: 'float'
    cull_mask: 'int'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_texture(self, type: 'Decal__DecalTexture', texture: 'Texture2D') -> None: ...
    def get_texture(self, type: 'Decal__DecalTexture') -> 'Texture2D': ...
    def set_emission_energy(self, energy: 'float') -> None: ...
    def get_emission_energy(self) -> 'float': ...
    def set_albedo_mix(self, energy: 'float') -> None: ...
    def get_albedo_mix(self) -> 'float': ...
    def set_modulate(self, color: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_upper_fade(self, fade: 'float') -> None: ...
    def get_upper_fade(self) -> 'float': ...
    def set_lower_fade(self, fade: 'float') -> None: ...
    def get_lower_fade(self) -> 'float': ...
    def set_normal_fade(self, fade: 'float') -> None: ...
    def get_normal_fade(self) -> 'float': ...
    def set_enable_distance_fade(self, enable: 'bool') -> None: ...
    def is_distance_fade_enabled(self) -> 'bool': ...
    def set_distance_fade_begin(self, distance: 'float') -> None: ...
    def get_distance_fade_begin(self) -> 'float': ...
    def set_distance_fade_length(self, distance: 'float') -> None: ...
    def get_distance_fade_length(self) -> 'float': ...
    def set_cull_mask(self, mask: 'int') -> None: ...
    def get_cull_mask(self) -> 'int': ...


class DirAccess(RefCounted):


    include_navigational: 'bool'
    include_hidden: 'bool'

    @staticmethod
    def open(path: 'str') -> 'DirAccess': ...
    @staticmethod
    def get_open_error() -> 'Error': ...
    @staticmethod
    def create_temp(prefix: 'str' = "", keep: 'bool' = False) -> 'DirAccess': ...
    def list_dir_begin(self) -> 'Error': ...
    def get_next(self) -> 'str': ...
    def current_is_dir(self) -> 'bool': ...
    def list_dir_end(self) -> None: ...
    def get_files(self) -> 'PackedStringArray': ...
    @staticmethod
    def get_files_at(path: 'str') -> 'PackedStringArray': ...
    def get_directories(self) -> 'PackedStringArray': ...
    @staticmethod
    def get_directories_at(path: 'str') -> 'PackedStringArray': ...
    @staticmethod
    def get_drive_count() -> 'int': ...
    @staticmethod
    def get_drive_name(idx: 'int') -> 'str': ...
    def get_current_drive(self) -> 'int': ...
    def change_dir(self, to_dir: 'str') -> 'Error': ...
    def get_current_dir(self, include_drive: 'bool' = True) -> 'str': ...
    def make_dir(self, path: 'str') -> 'Error': ...
    @staticmethod
    def make_dir_absolute(path: 'str') -> 'Error': ...
    def make_dir_recursive(self, path: 'str') -> 'Error': ...
    @staticmethod
    def make_dir_recursive_absolute(path: 'str') -> 'Error': ...
    def file_exists(self, path: 'str') -> 'bool': ...
    def dir_exists(self, path: 'str') -> 'bool': ...
    @staticmethod
    def dir_exists_absolute(path: 'str') -> 'bool': ...
    def get_space_left(self) -> 'int': ...
    def copy(self, from_: 'str', to: 'str', chmod_flags: 'int' = -1) -> 'Error': ...
    @staticmethod
    def copy_absolute(from_: 'str', to: 'str', chmod_flags: 'int' = -1) -> 'Error': ...
    def rename(self, from_: 'str', to: 'str') -> 'Error': ...
    @staticmethod
    def rename_absolute(from_: 'str', to: 'str') -> 'Error': ...
    def remove(self, path: 'str') -> 'Error': ...
    @staticmethod
    def remove_absolute(path: 'str') -> 'Error': ...
    def is_link(self, path: 'str') -> 'bool': ...
    def read_link(self, path: 'str') -> 'str': ...
    def create_link(self, source: 'str', target: 'str') -> 'Error': ...
    def is_bundle(self, path: 'str') -> 'bool': ...
    def set_include_navigational(self, enable: 'bool') -> None: ...
    def get_include_navigational(self) -> 'bool': ...
    def set_include_hidden(self, enable: 'bool') -> None: ...
    def get_include_hidden(self) -> 'bool': ...
    def is_case_sensitive(self, path: 'str') -> 'bool': ...


class DirectionalLight2D(Light2D):


    height: 'float'
    max_distance: 'float'

    def set_max_distance(self, pixels: 'float') -> None: ...
    def get_max_distance(self) -> 'float': ...


class DirectionalLight3D(Light3D):


    directional_shadow_mode: 'int'
    directional_shadow_split_1: 'float'
    directional_shadow_split_2: 'float'
    directional_shadow_split_3: 'float'
    directional_shadow_blend_splits: 'bool'
    directional_shadow_fade_start: 'float'
    directional_shadow_max_distance: 'float'
    directional_shadow_pancake_size: 'float'
    sky_mode: 'int'

    def set_shadow_mode(self, mode: 'DirectionalLight3D__ShadowMode') -> None: ...
    def get_shadow_mode(self) -> 'DirectionalLight3D__ShadowMode': ...
    def set_blend_splits(self, enabled: 'bool') -> None: ...
    def is_blend_splits_enabled(self) -> 'bool': ...
    def set_sky_mode(self, mode: 'DirectionalLight3D__SkyMode') -> None: ...
    def get_sky_mode(self) -> 'DirectionalLight3D__SkyMode': ...


class DisplayServer(Object):


    SCREEN_WITH_MOUSE_FOCUS: 'int' = -4
    SCREEN_WITH_KEYBOARD_FOCUS: 'int' = -3
    SCREEN_PRIMARY: 'int' = -2
    SCREEN_OF_MAIN_WINDOW: 'int' = -1
    MAIN_WINDOW_ID: 'int' = 0
    INVALID_WINDOW_ID: 'int' = -1
    INVALID_INDICATOR_ID: 'int' = -1

    def has_feature(self, feature: 'DisplayServer__Feature') -> 'bool': ...
    def get_name(self) -> 'str': ...
    def help_set_search_callbacks(self, search_callback: 'Callable', action_callback: 'Callable') -> None: ...
    def global_menu_set_popup_callbacks(self, menu_root: 'str', open_callback: 'Callable', close_callback: 'Callable') -> None: ...
    def global_menu_add_submenu_item(self, menu_root: 'str', label: 'str', submenu: 'str', index: 'int' = -1) -> 'int': ...
    def global_menu_add_item(self, menu_root: 'str', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_check_item(self, menu_root: 'str', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_icon_item(self, menu_root: 'str', icon: 'Texture2D', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_icon_check_item(self, menu_root: 'str', icon: 'Texture2D', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_radio_check_item(self, menu_root: 'str', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_icon_radio_check_item(self, menu_root: 'str', icon: 'Texture2D', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_multistate_item(self, menu_root: 'str', label: 'str', max_states: 'int', default_state: 'int', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def global_menu_add_separator(self, menu_root: 'str', index: 'int' = -1) -> 'int': ...
    def global_menu_get_item_index_from_text(self, menu_root: 'str', text: 'str') -> 'int': ...
    def global_menu_get_item_index_from_tag(self, menu_root: 'str', tag: 'Variant') -> 'int': ...
    def global_menu_is_item_checked(self, menu_root: 'str', idx: 'int') -> 'bool': ...
    def global_menu_is_item_checkable(self, menu_root: 'str', idx: 'int') -> 'bool': ...
    def global_menu_is_item_radio_checkable(self, menu_root: 'str', idx: 'int') -> 'bool': ...
    def global_menu_get_item_callback(self, menu_root: 'str', idx: 'int') -> 'Callable': ...
    def global_menu_get_item_key_callback(self, menu_root: 'str', idx: 'int') -> 'Callable': ...
    def global_menu_get_item_tag(self, menu_root: 'str', idx: 'int') -> 'Variant': ...
    def global_menu_get_item_text(self, menu_root: 'str', idx: 'int') -> 'str': ...
    def global_menu_get_item_submenu(self, menu_root: 'str', idx: 'int') -> 'str': ...
    def global_menu_get_item_accelerator(self, menu_root: 'str', idx: 'int') -> 'Key': ...
    def global_menu_is_item_disabled(self, menu_root: 'str', idx: 'int') -> 'bool': ...
    def global_menu_is_item_hidden(self, menu_root: 'str', idx: 'int') -> 'bool': ...
    def global_menu_get_item_tooltip(self, menu_root: 'str', idx: 'int') -> 'str': ...
    def global_menu_get_item_state(self, menu_root: 'str', idx: 'int') -> 'int': ...
    def global_menu_get_item_max_states(self, menu_root: 'str', idx: 'int') -> 'int': ...
    def global_menu_get_item_icon(self, menu_root: 'str', idx: 'int') -> 'Texture2D': ...
    def global_menu_get_item_indentation_level(self, menu_root: 'str', idx: 'int') -> 'int': ...
    def global_menu_set_item_checked(self, menu_root: 'str', idx: 'int', checked: 'bool') -> None: ...
    def global_menu_set_item_checkable(self, menu_root: 'str', idx: 'int', checkable: 'bool') -> None: ...
    def global_menu_set_item_radio_checkable(self, menu_root: 'str', idx: 'int', checkable: 'bool') -> None: ...
    def global_menu_set_item_callback(self, menu_root: 'str', idx: 'int', callback: 'Callable') -> None: ...
    def global_menu_set_item_hover_callbacks(self, menu_root: 'str', idx: 'int', callback: 'Callable') -> None: ...
    def global_menu_set_item_key_callback(self, menu_root: 'str', idx: 'int', key_callback: 'Callable') -> None: ...
    def global_menu_set_item_tag(self, menu_root: 'str', idx: 'int', tag: 'Variant') -> None: ...
    def global_menu_set_item_text(self, menu_root: 'str', idx: 'int', text: 'str') -> None: ...
    def global_menu_set_item_submenu(self, menu_root: 'str', idx: 'int', submenu: 'str') -> None: ...
    def global_menu_set_item_accelerator(self, menu_root: 'str', idx: 'int', keycode: 'Key') -> None: ...
    def global_menu_set_item_disabled(self, menu_root: 'str', idx: 'int', disabled: 'bool') -> None: ...
    def global_menu_set_item_hidden(self, menu_root: 'str', idx: 'int', hidden: 'bool') -> None: ...
    def global_menu_set_item_tooltip(self, menu_root: 'str', idx: 'int', tooltip: 'str') -> None: ...
    def global_menu_set_item_state(self, menu_root: 'str', idx: 'int', state: 'int') -> None: ...
    def global_menu_set_item_max_states(self, menu_root: 'str', idx: 'int', max_states: 'int') -> None: ...
    def global_menu_set_item_icon(self, menu_root: 'str', idx: 'int', icon: 'Texture2D') -> None: ...
    def global_menu_set_item_indentation_level(self, menu_root: 'str', idx: 'int', level: 'int') -> None: ...
    def global_menu_get_item_count(self, menu_root: 'str') -> 'int': ...
    def global_menu_remove_item(self, menu_root: 'str', idx: 'int') -> None: ...
    def global_menu_clear(self, menu_root: 'str') -> None: ...
    def global_menu_get_system_menu_roots(self) -> 'Dictionary': ...
    def tts_is_speaking(self) -> 'bool': ...
    def tts_is_paused(self) -> 'bool': ...
    def tts_get_voices(self) -> 'Array'['Dictionary']: ...
    def tts_get_voices_for_language(self, language: 'str') -> 'PackedStringArray': ...
    def tts_speak(self, text: 'str', voice: 'str', volume: 'int' = 50, pitch: 'float' = 1.0, rate: 'float' = 1.0, utterance_id: 'int' = 0, interrupt: 'bool' = False) -> None: ...
    def tts_pause(self) -> None: ...
    def tts_resume(self) -> None: ...
    def tts_stop(self) -> None: ...
    def tts_set_utterance_callback(self, event: 'DisplayServer__TTSUtteranceEvent', callable: 'Callable') -> None: ...
    def is_dark_mode_supported(self) -> 'bool': ...
    def is_dark_mode(self) -> 'bool': ...
    def get_accent_color(self) -> 'Color': ...
    def get_base_color(self) -> 'Color': ...
    def set_system_theme_change_callback(self, callable: 'Callable') -> None: ...
    def mouse_set_mode(self, mouse_mode: 'DisplayServer__MouseMode') -> None: ...
    def mouse_get_mode(self) -> 'DisplayServer__MouseMode': ...
    def warp_mouse(self, position: 'Vector2i') -> None: ...
    def mouse_get_position(self) -> 'Vector2i': ...
    def mouse_get_button_state(self) -> 'MouseButtonMask': ...
    def clipboard_set(self, clipboard: 'str') -> None: ...
    def clipboard_get(self) -> 'str': ...
    def clipboard_get_image(self) -> 'Image': ...
    def clipboard_has(self) -> 'bool': ...
    def clipboard_has_image(self) -> 'bool': ...
    def clipboard_set_primary(self, clipboard_primary: 'str') -> None: ...
    def clipboard_get_primary(self) -> 'str': ...
    def get_display_cutouts(self) -> 'Array'['Rect2']: ...
    def get_display_safe_area(self) -> 'Rect2i': ...
    def get_screen_count(self) -> 'int': ...
    def get_primary_screen(self) -> 'int': ...
    def get_keyboard_focus_screen(self) -> 'int': ...
    def get_screen_from_rect(self, rect: 'Rect2') -> 'int': ...
    def screen_get_position(self, screen: 'int' = -1) -> 'Vector2i': ...
    def screen_get_size(self, screen: 'int' = -1) -> 'Vector2i': ...
    def screen_get_usable_rect(self, screen: 'int' = -1) -> 'Rect2i': ...
    def screen_get_dpi(self, screen: 'int' = -1) -> 'int': ...
    def screen_get_scale(self, screen: 'int' = -1) -> 'float': ...
    def is_touchscreen_available(self) -> 'bool': ...
    def screen_get_max_scale(self) -> 'float': ...
    def screen_get_refresh_rate(self, screen: 'int' = -1) -> 'float': ...
    def screen_get_pixel(self, position: 'Vector2i') -> 'Color': ...
    def screen_get_image(self, screen: 'int' = -1) -> 'Image': ...
    def screen_get_image_rect(self, rect: 'Rect2i') -> 'Image': ...
    def screen_set_orientation(self, orientation: 'DisplayServer__ScreenOrientation', screen: 'int' = -1) -> None: ...
    def screen_get_orientation(self, screen: 'int' = -1) -> 'DisplayServer__ScreenOrientation': ...
    def screen_set_keep_on(self, enable: 'bool') -> None: ...
    def screen_is_kept_on(self) -> 'bool': ...
    def get_window_list(self) -> 'PackedInt32Array': ...
    def get_window_at_screen_position(self, position: 'Vector2i') -> 'int': ...
    def window_get_native_handle(self, handle_type: 'DisplayServer__HandleType', window_id: 'int' = 0) -> 'int': ...
    def window_get_active_popup(self) -> 'int': ...
    def window_set_popup_safe_rect(self, window: 'int', rect: 'Rect2i') -> None: ...
    def window_get_popup_safe_rect(self, window: 'int') -> 'Rect2i': ...
    def window_set_title(self, title: 'str', window_id: 'int' = 0) -> None: ...
    def window_get_title_size(self, title: 'str', window_id: 'int' = 0) -> 'Vector2i': ...
    def window_set_mouse_passthrough(self, region: 'PackedVector2Array', window_id: 'int' = 0) -> None: ...
    def window_get_current_screen(self, window_id: 'int' = 0) -> 'int': ...
    def window_set_current_screen(self, screen: 'int', window_id: 'int' = 0) -> None: ...
    def window_get_position(self, window_id: 'int' = 0) -> 'Vector2i': ...
    def window_get_position_with_decorations(self, window_id: 'int' = 0) -> 'Vector2i': ...
    def window_set_position(self, position: 'Vector2i', window_id: 'int' = 0) -> None: ...
    def window_get_size(self, window_id: 'int' = 0) -> 'Vector2i': ...
    def window_set_size(self, size: 'Vector2i', window_id: 'int' = 0) -> None: ...
    def window_set_rect_changed_callback(self, callback: 'Callable', window_id: 'int' = 0) -> None: ...
    def window_set_window_event_callback(self, callback: 'Callable', window_id: 'int' = 0) -> None: ...
    def window_set_input_event_callback(self, callback: 'Callable', window_id: 'int' = 0) -> None: ...
    def window_set_input_text_callback(self, callback: 'Callable', window_id: 'int' = 0) -> None: ...
    def window_set_drop_files_callback(self, callback: 'Callable', window_id: 'int' = 0) -> None: ...
    def window_get_attached_instance_id(self, window_id: 'int' = 0) -> 'int': ...
    def window_get_max_size(self, window_id: 'int' = 0) -> 'Vector2i': ...
    def window_set_max_size(self, max_size: 'Vector2i', window_id: 'int' = 0) -> None: ...
    def window_get_min_size(self, window_id: 'int' = 0) -> 'Vector2i': ...
    def window_set_min_size(self, min_size: 'Vector2i', window_id: 'int' = 0) -> None: ...
    def window_get_size_with_decorations(self, window_id: 'int' = 0) -> 'Vector2i': ...
    def window_get_mode(self, window_id: 'int' = 0) -> 'DisplayServer__WindowMode': ...
    def window_set_mode(self, mode: 'DisplayServer__WindowMode', window_id: 'int' = 0) -> None: ...
    def window_set_flag(self, flag: 'DisplayServer__WindowFlags', enabled: 'bool', window_id: 'int' = 0) -> None: ...
    def window_get_flag(self, flag: 'DisplayServer__WindowFlags', window_id: 'int' = 0) -> 'bool': ...
    def window_set_window_buttons_offset(self, offset: 'Vector2i', window_id: 'int' = 0) -> None: ...
    def window_get_safe_title_margins(self, window_id: 'int' = 0) -> 'Vector3i': ...
    def window_request_attention(self, window_id: 'int' = 0) -> None: ...
    def window_move_to_foreground(self, window_id: 'int' = 0) -> None: ...
    def window_is_focused(self, window_id: 'int' = 0) -> 'bool': ...
    def window_can_draw(self, window_id: 'int' = 0) -> 'bool': ...
    def window_set_transient(self, window_id: 'int', parent_window_id: 'int') -> None: ...
    def window_set_exclusive(self, window_id: 'int', exclusive: 'bool') -> None: ...
    def window_set_ime_active(self, active: 'bool', window_id: 'int' = 0) -> None: ...
    def window_set_ime_position(self, position: 'Vector2i', window_id: 'int' = 0) -> None: ...
    def window_set_vsync_mode(self, vsync_mode: 'DisplayServer__VSyncMode', window_id: 'int' = 0) -> None: ...
    def window_get_vsync_mode(self, window_id: 'int' = 0) -> 'DisplayServer__VSyncMode': ...
    def window_is_maximize_allowed(self, window_id: 'int' = 0) -> 'bool': ...
    def window_maximize_on_title_dbl_click(self) -> 'bool': ...
    def window_minimize_on_title_dbl_click(self) -> 'bool': ...
    def window_start_drag(self, window_id: 'int' = 0) -> None: ...
    def window_start_resize(self, edge: 'DisplayServer__WindowResizeEdge', window_id: 'int' = 0) -> None: ...
    def ime_get_selection(self) -> 'Vector2i': ...
    def ime_get_text(self) -> 'str': ...
    def virtual_keyboard_show(self, existing_text: 'str', position: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), type: 'DisplayServer__VirtualKeyboardType' = 0, max_length: 'int' = -1, cursor_start: 'int' = -1, cursor_end: 'int' = -1) -> None: ...
    def virtual_keyboard_hide(self) -> None: ...
    def virtual_keyboard_get_height(self) -> 'int': ...
    def has_hardware_keyboard(self) -> 'bool': ...
    def cursor_set_shape(self, shape: 'DisplayServer__CursorShape') -> None: ...
    def cursor_get_shape(self) -> 'DisplayServer__CursorShape': ...
    def cursor_set_custom_image(self, cursor: 'Resource', shape: 'DisplayServer__CursorShape' = 0, hotspot: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def get_swap_cancel_ok(self) -> 'bool': ...
    def enable_for_stealing_focus(self, process_id: 'int') -> None: ...
    def dialog_show(self, title: 'str', description: 'str', buttons: 'PackedStringArray', callback: 'Callable') -> 'Error': ...
    def dialog_input_text(self, title: 'str', description: 'str', existing_text: 'str', callback: 'Callable') -> 'Error': ...
    def file_dialog_show(self, title: 'str', current_directory: 'str', filename: 'str', show_hidden: 'bool', mode: 'DisplayServer__FileDialogMode', filters: 'PackedStringArray', callback: 'Callable') -> 'Error': ...
    def file_dialog_with_options_show(self, title: 'str', current_directory: 'str', root: 'str', filename: 'str', show_hidden: 'bool', mode: 'DisplayServer__FileDialogMode', filters: 'PackedStringArray', options: 'Array'['Dictionary'], callback: 'Callable') -> 'Error': ...
    def beep(self) -> None: ...
    def keyboard_get_layout_count(self) -> 'int': ...
    def keyboard_get_current_layout(self) -> 'int': ...
    def keyboard_set_current_layout(self, index: 'int') -> None: ...
    def keyboard_get_layout_language(self, index: 'int') -> 'str': ...
    def keyboard_get_layout_name(self, index: 'int') -> 'str': ...
    def keyboard_get_keycode_from_physical(self, keycode: 'Key') -> 'Key': ...
    def keyboard_get_label_from_physical(self, keycode: 'Key') -> 'Key': ...
    def show_emoji_and_symbol_picker(self) -> None: ...
    def process_events(self) -> None: ...
    def force_process_and_drop_events(self) -> None: ...
    def set_native_icon(self, filename: 'str') -> None: ...
    def set_icon(self, image: 'Image') -> None: ...
    def create_status_indicator(self, icon: 'Texture2D', tooltip: 'str', callback: 'Callable') -> 'int': ...
    def status_indicator_set_icon(self, id: 'int', icon: 'Texture2D') -> None: ...
    def status_indicator_set_tooltip(self, id: 'int', tooltip: 'str') -> None: ...
    def status_indicator_set_menu(self, id: 'int', menu_rid: 'RID') -> None: ...
    def status_indicator_set_callback(self, id: 'int', callback: 'Callable') -> None: ...
    def status_indicator_get_rect(self, id: 'int') -> 'Rect2': ...
    def delete_status_indicator(self, id: 'int') -> None: ...
    def tablet_get_driver_count(self) -> 'int': ...
    def tablet_get_driver_name(self, idx: 'int') -> 'str': ...
    def tablet_get_current_driver(self) -> 'str': ...
    def tablet_set_current_driver(self, name: 'str') -> None: ...
    def is_window_transparency_available(self) -> 'bool': ...
    def register_additional_output(self, object: 'Object') -> None: ...
    def unregister_additional_output(self, object: 'Object') -> None: ...
    def has_additional_outputs(self) -> 'bool': ...


class ENetConnection(RefCounted):



    def create_host_bound(self, bind_address: 'str', bind_port: 'int', max_peers: 'int' = 32, max_channels: 'int' = 0, in_bandwidth: 'int' = 0, out_bandwidth: 'int' = 0) -> 'Error': ...
    def create_host(self, max_peers: 'int' = 32, max_channels: 'int' = 0, in_bandwidth: 'int' = 0, out_bandwidth: 'int' = 0) -> 'Error': ...
    def destroy(self) -> None: ...
    def connect_to_host(self, address: 'str', port: 'int', channels: 'int' = 0, data: 'int' = 0) -> 'ENetPacketPeer': ...
    def service(self, timeout: 'int' = 0) -> 'Array': ...
    def flush(self) -> None: ...
    def bandwidth_limit(self, in_bandwidth: 'int' = 0, out_bandwidth: 'int' = 0) -> None: ...
    def channel_limit(self, limit: 'int') -> None: ...
    def broadcast(self, channel: 'int', packet: 'PackedByteArray', flags: 'int') -> None: ...
    def compress(self, mode: 'ENetConnection__CompressionMode') -> None: ...
    def dtls_server_setup(self, server_options: 'TLSOptions') -> 'Error': ...
    def dtls_client_setup(self, hostname: 'str', client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def refuse_new_connections(self, refuse: 'bool') -> None: ...
    def pop_statistic(self, statistic: 'ENetConnection__HostStatistic') -> 'float': ...
    def get_max_channels(self) -> 'int': ...
    def get_local_port(self) -> 'int': ...
    def get_peers(self) -> 'Array'['ENetPacketPeer']: ...
    def socket_send(self, destination_address: 'str', destination_port: 'int', packet: 'PackedByteArray') -> None: ...


class ENetMultiplayerPeer(MultiplayerPeer):


    host: 'ENetConnection'

    def create_server(self, port: 'int', max_clients: 'int' = 32, max_channels: 'int' = 0, in_bandwidth: 'int' = 0, out_bandwidth: 'int' = 0) -> 'Error': ...
    def create_client(self, address: 'str', port: 'int', channel_count: 'int' = 0, in_bandwidth: 'int' = 0, out_bandwidth: 'int' = 0, local_port: 'int' = 0) -> 'Error': ...
    def create_mesh(self, unique_id: 'int') -> 'Error': ...
    def add_mesh_peer(self, peer_id: 'int', host: 'ENetConnection') -> 'Error': ...
    def set_bind_ip(self, ip: 'str') -> None: ...
    def get_host(self) -> 'ENetConnection': ...
    def get_peer(self, id: 'int') -> 'ENetPacketPeer': ...


class ENetPacketPeer(PacketPeer):


    PACKET_LOSS_SCALE: 'int' = 65536
    PACKET_THROTTLE_SCALE: 'int' = 32
    FLAG_RELIABLE: 'int' = 1
    FLAG_UNSEQUENCED: 'int' = 2
    FLAG_UNRELIABLE_FRAGMENT: 'int' = 8

    def peer_disconnect(self, data: 'int' = 0) -> None: ...
    def peer_disconnect_later(self, data: 'int' = 0) -> None: ...
    def peer_disconnect_now(self, data: 'int' = 0) -> None: ...
    def ping(self) -> None: ...
    def ping_interval(self, ping_interval: 'int') -> None: ...
    def reset(self) -> None: ...
    def send(self, channel: 'int', packet: 'PackedByteArray', flags: 'int') -> 'Error': ...
    def throttle_configure(self, interval: 'int', acceleration: 'int', deceleration: 'int') -> None: ...
    def set_timeout(self, timeout: 'int', timeout_min: 'int', timeout_max: 'int') -> None: ...
    def get_packet_flags(self) -> 'int': ...
    def get_remote_address(self) -> 'str': ...
    def get_remote_port(self) -> 'int': ...
    def get_statistic(self, statistic: 'ENetPacketPeer__PeerStatistic') -> 'float': ...
    def get_state(self) -> 'ENetPacketPeer__PeerState': ...
    def get_channels(self) -> 'int': ...
    def is_active(self) -> 'bool': ...


class EditorCommandPalette(ConfirmationDialog):



    def add_command(self, command_name: 'str', key_name: 'str', binded_callable: 'Callable', shortcut_text: 'str' = "None") -> None: ...
    def remove_command(self, key_name: 'str') -> None: ...


class EditorContextMenuPlugin(RefCounted):



    def _popup_menu(self, paths: 'PackedStringArray') -> None: ...
    def add_menu_shortcut(self, shortcut: 'Shortcut', callback: 'Callable') -> None: ...
    def add_context_menu_item(self, name: 'str', callback: 'Callable', icon: 'Texture2D' = default('''null''')) -> None: ...
    def add_context_menu_item_from_shortcut(self, name: 'str', shortcut: 'Shortcut', icon: 'Texture2D' = default('''null''')) -> None: ...
    def add_context_submenu_item(self, name: 'str', menu: 'PopupMenu', icon: 'Texture2D' = default('''null''')) -> None: ...


class EditorDebuggerPlugin(RefCounted):



    def _setup_session(self, session_id: 'int') -> None: ...
    def _has_capture(self, capture: 'str') -> 'bool': ...
    def _capture(self, message: 'str', data: 'Array', session_id: 'int') -> 'bool': ...
    def _goto_script_line(self, script: 'Script', line: 'int') -> None: ...
    def _breakpoints_cleared_in_tree(self) -> None: ...
    def _breakpoint_set_in_tree(self, script: 'Script', line: 'int', enabled: 'bool') -> None: ...
    def get_session(self, id: 'int') -> 'EditorDebuggerSession': ...
    def get_sessions(self) -> 'Array': ...


class EditorDebuggerSession(RefCounted):


    started: 'Signal[Callable[[], None]]'  # started()
    stopped: 'Signal[Callable[[], None]]'  # stopped()
    breaked: 'Signal[Callable[[bool], None]]'  # breaked(can_debug: bool)
    continued: 'Signal[Callable[[], None]]'  # continued()

    def send_message(self, message: 'str', data: 'Array' = default('''[]''')) -> None: ...
    def toggle_profiler(self, profiler: 'str', enable: 'bool', data: 'Array' = default('''[]''')) -> None: ...
    def is_breaked(self) -> 'bool': ...
    def is_debuggable(self) -> 'bool': ...
    def is_active(self) -> 'bool': ...
    def add_session_tab(self, control: 'Control') -> None: ...
    def remove_session_tab(self, control: 'Control') -> None: ...
    def set_breakpoint(self, path: 'str', line: 'int', enabled: 'bool') -> None: ...


class EditorExportPlatform(RefCounted):



    def get_os_name(self) -> 'str': ...
    def create_preset(self) -> 'EditorExportPreset': ...
    def find_export_template(self, template_file_name: 'str') -> 'Dictionary': ...
    def get_current_presets(self) -> 'Array': ...
    def save_pack(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', embed: 'bool' = False) -> 'Dictionary': ...
    def save_zip(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str') -> 'Dictionary': ...
    def save_pack_patch(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str') -> 'Dictionary': ...
    def save_zip_patch(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str') -> 'Dictionary': ...
    def gen_export_flags(self, flags: 'EditorExportPlatform__DebugFlags') -> 'PackedStringArray': ...
    def export_project_files(self, preset: 'EditorExportPreset', debug: 'bool', save_cb: 'Callable', shared_cb: 'Callable' = default('''Callable()''')) -> 'Error': ...
    def export_project(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', flags: 'EditorExportPlatform__DebugFlags' = 0) -> 'Error': ...
    def export_pack(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', flags: 'EditorExportPlatform__DebugFlags' = 0) -> 'Error': ...
    def export_zip(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', flags: 'EditorExportPlatform__DebugFlags' = 0) -> 'Error': ...
    def export_pack_patch(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', patches: 'PackedStringArray' = default('''PackedStringArray()'''), flags: 'EditorExportPlatform__DebugFlags' = 0) -> 'Error': ...
    def export_zip_patch(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', patches: 'PackedStringArray' = default('''PackedStringArray()'''), flags: 'EditorExportPlatform__DebugFlags' = 0) -> 'Error': ...
    def clear_messages(self) -> None: ...
    def add_message(self, type: 'EditorExportPlatform__ExportMessageType', category: 'str', message: 'str') -> None: ...
    def get_message_count(self) -> 'int': ...
    def get_message_type(self, index: 'int') -> 'EditorExportPlatform__ExportMessageType': ...
    def get_message_category(self, index: 'int') -> 'str': ...
    def get_message_text(self, index: 'int') -> 'str': ...
    def get_worst_message_type(self) -> 'EditorExportPlatform__ExportMessageType': ...
    def ssh_run_on_remote(self, host: 'str', port: 'str', ssh_arg: 'PackedStringArray', cmd_args: 'str', output: 'Array' = default('''[]'''), port_fwd: 'int' = -1) -> 'Error': ...
    def ssh_run_on_remote_no_wait(self, host: 'str', port: 'str', ssh_args: 'PackedStringArray', cmd_args: 'str', port_fwd: 'int' = -1) -> 'int': ...
    def ssh_push_to_remote(self, host: 'str', port: 'str', scp_args: 'PackedStringArray', src_file: 'str', dst_file: 'str') -> 'Error': ...
    def get_internal_export_files(self, preset: 'EditorExportPreset', debug: 'bool') -> 'Dictionary': ...
    @staticmethod
    def get_forced_export_files() -> 'PackedStringArray': ...


class EditorExportPlatformAndroid(EditorExportPlatform): ...


class EditorExportPlatformExtension(EditorExportPlatform):



    def _get_preset_features(self, preset: 'EditorExportPreset') -> 'PackedStringArray': ...
    def _is_executable(self, path: 'str') -> 'bool': ...
    def _get_export_options(self) -> 'Array'['Dictionary']: ...
    def _should_update_export_options(self) -> 'bool': ...
    def _get_export_option_visibility(self, preset: 'EditorExportPreset', option: 'str') -> 'bool': ...
    def _get_export_option_warning(self, preset: 'EditorExportPreset', option: 'StringName') -> 'str': ...
    def _get_os_name(self) -> 'str': ...
    def _get_name(self) -> 'str': ...
    def _get_logo(self) -> 'Texture2D': ...
    def _poll_export(self) -> 'bool': ...
    def _get_options_count(self) -> 'int': ...
    def _get_options_tooltip(self) -> 'str': ...
    def _get_option_icon(self, device: 'int') -> 'ImageTexture': ...
    def _get_option_label(self, device: 'int') -> 'str': ...
    def _get_option_tooltip(self, device: 'int') -> 'str': ...
    def _get_device_architecture(self, device: 'int') -> 'str': ...
    def _cleanup(self) -> None: ...
    def _run(self, preset: 'EditorExportPreset', device: 'int', debug_flags: 'EditorExportPlatform__DebugFlags') -> 'Error': ...
    def _get_run_icon(self) -> 'Texture2D': ...
    def _can_export(self, preset: 'EditorExportPreset', debug: 'bool') -> 'bool': ...
    def _has_valid_export_configuration(self, preset: 'EditorExportPreset', debug: 'bool') -> 'bool': ...
    def _has_valid_project_configuration(self, preset: 'EditorExportPreset') -> 'bool': ...
    def _get_binary_extensions(self, preset: 'EditorExportPreset') -> 'PackedStringArray': ...
    def _export_project(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', flags: 'EditorExportPlatform__DebugFlags') -> 'Error': ...
    def _export_pack(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', flags: 'EditorExportPlatform__DebugFlags') -> 'Error': ...
    def _export_zip(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', flags: 'EditorExportPlatform__DebugFlags') -> 'Error': ...
    def _export_pack_patch(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', patches: 'PackedStringArray', flags: 'EditorExportPlatform__DebugFlags') -> 'Error': ...
    def _export_zip_patch(self, preset: 'EditorExportPreset', debug: 'bool', path: 'str', patches: 'PackedStringArray', flags: 'EditorExportPlatform__DebugFlags') -> 'Error': ...
    def _get_platform_features(self) -> 'PackedStringArray': ...
    def _get_debug_protocol(self) -> 'str': ...
    def set_config_error(self, error_text: 'str') -> None: ...
    def get_config_error(self) -> 'str': ...
    def set_config_missing_templates(self, missing_templates: 'bool') -> None: ...
    def get_config_missing_templates(self) -> 'bool': ...


class EditorExportPlatformIOS(EditorExportPlatform): ...


class EditorExportPlatformLinuxBSD(EditorExportPlatformPC): ...


class EditorExportPlatformMacOS(EditorExportPlatform): ...


class EditorExportPlatformPC(EditorExportPlatform): ...


class EditorExportPlatformWeb(EditorExportPlatform): ...


class EditorExportPlatformWindows(EditorExportPlatformPC): ...


class EditorExportPlugin(RefCounted):



    def _export_file(self, path: 'str', type: 'str', features: 'PackedStringArray') -> None: ...
    def _export_begin(self, features: 'PackedStringArray', is_debug: 'bool', path: 'str', flags: 'int') -> None: ...
    def _export_end(self) -> None: ...
    def _begin_customize_resources(self, platform: 'EditorExportPlatform', features: 'PackedStringArray') -> 'bool': ...
    def _customize_resource(self, resource: 'Resource', path: 'str') -> 'Resource': ...
    def _begin_customize_scenes(self, platform: 'EditorExportPlatform', features: 'PackedStringArray') -> 'bool': ...
    def _customize_scene(self, scene: 'Node', path: 'str') -> 'Node': ...
    def _get_customization_configuration_hash(self) -> 'int': ...
    def _end_customize_scenes(self) -> None: ...
    def _end_customize_resources(self) -> None: ...
    def _get_export_options(self, platform: 'EditorExportPlatform') -> 'Array'['Dictionary']: ...
    def _get_export_options_overrides(self, platform: 'EditorExportPlatform') -> 'Dictionary': ...
    def _should_update_export_options(self, platform: 'EditorExportPlatform') -> 'bool': ...
    def _get_export_option_visibility(self, platform: 'EditorExportPlatform', option: 'str') -> 'bool': ...
    def _get_export_option_warning(self, platform: 'EditorExportPlatform', option: 'str') -> 'str': ...
    def _get_export_features(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'PackedStringArray': ...
    def _get_name(self) -> 'str': ...
    def _supports_platform(self, platform: 'EditorExportPlatform') -> 'bool': ...
    def _get_android_dependencies(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'PackedStringArray': ...
    def _get_android_dependencies_maven_repos(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'PackedStringArray': ...
    def _get_android_libraries(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'PackedStringArray': ...
    def _get_android_manifest_activity_element_contents(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'str': ...
    def _get_android_manifest_application_element_contents(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'str': ...
    def _get_android_manifest_element_contents(self, platform: 'EditorExportPlatform', debug: 'bool') -> 'str': ...
    def add_shared_object(self, path: 'str', tags: 'PackedStringArray', target: 'str') -> None: ...
    def add_ios_project_static_lib(self, path: 'str') -> None: ...
    def add_file(self, path: 'str', file: 'PackedByteArray', remap: 'bool') -> None: ...
    def add_ios_framework(self, path: 'str') -> None: ...
    def add_ios_embedded_framework(self, path: 'str') -> None: ...
    def add_ios_plist_content(self, plist_content: 'str') -> None: ...
    def add_ios_linker_flags(self, flags: 'str') -> None: ...
    def add_ios_bundle_file(self, path: 'str') -> None: ...
    def add_ios_cpp_code(self, code: 'str') -> None: ...
    def add_macos_plugin_file(self, path: 'str') -> None: ...
    def skip(self) -> None: ...
    def get_option(self, name: 'StringName') -> 'Variant': ...
    def get_export_preset(self) -> 'EditorExportPreset': ...
    def get_export_platform(self) -> 'EditorExportPlatform': ...


class EditorExportPreset(RefCounted):



    def has(self, property: 'StringName') -> 'bool': ...
    def get_files_to_export(self) -> 'PackedStringArray': ...
    def get_customized_files(self) -> 'Dictionary': ...
    def get_customized_files_count(self) -> 'int': ...
    def has_export_file(self, path: 'str') -> 'bool': ...
    def get_file_export_mode(self, path: 'str', default: 'EditorExportPreset__FileExportMode' = 0) -> 'EditorExportPreset__FileExportMode': ...
    def get_preset_name(self) -> 'str': ...
    def is_runnable(self) -> 'bool': ...
    def are_advanced_options_enabled(self) -> 'bool': ...
    def is_dedicated_server(self) -> 'bool': ...
    def get_export_filter(self) -> 'EditorExportPreset__ExportFilter': ...
    def get_include_filter(self) -> 'str': ...
    def get_exclude_filter(self) -> 'str': ...
    def get_custom_features(self) -> 'str': ...
    def get_patches(self) -> 'PackedStringArray': ...
    def get_export_path(self) -> 'str': ...
    def get_encryption_in_filter(self) -> 'str': ...
    def get_encryption_ex_filter(self) -> 'str': ...
    def get_encrypt_pck(self) -> 'bool': ...
    def get_encrypt_directory(self) -> 'bool': ...
    def get_encryption_key(self) -> 'str': ...
    def get_script_export_mode(self) -> 'int': ...
    def get_or_env(self, name: 'StringName', env_var: 'str') -> 'Variant': ...
    def get_version(self, name: 'StringName', windows_version: 'bool') -> 'str': ...


class EditorFeatureProfile(RefCounted):



    def set_disable_class(self, class_name: 'StringName', disable: 'bool') -> None: ...
    def is_class_disabled(self, class_name: 'StringName') -> 'bool': ...
    def set_disable_class_editor(self, class_name: 'StringName', disable: 'bool') -> None: ...
    def is_class_editor_disabled(self, class_name: 'StringName') -> 'bool': ...
    def set_disable_class_property(self, class_name: 'StringName', property: 'StringName', disable: 'bool') -> None: ...
    def is_class_property_disabled(self, class_name: 'StringName', property: 'StringName') -> 'bool': ...
    def set_disable_feature(self, feature: 'EditorFeatureProfile__Feature', disable: 'bool') -> None: ...
    def is_feature_disabled(self, feature: 'EditorFeatureProfile__Feature') -> 'bool': ...
    def get_feature_name(self, feature: 'EditorFeatureProfile__Feature') -> 'str': ...
    def save_to_file(self, path: 'str') -> 'Error': ...
    def load_from_file(self, path: 'str') -> 'Error': ...


class EditorFileDialog(ConfirmationDialog):


    access: 'int'
    display_mode: 'int'
    file_mode: 'int'
    current_dir: 'str'
    current_file: 'str'
    current_path: 'str'
    filters: 'PackedStringArray'
    option_count: 'int'
    show_hidden_files: 'bool'
    disable_overwrite_warning: 'bool'
    file_selected: 'Signal[Callable[[str], None]]'  # file_selected(path: String)
    files_selected: 'Signal[Callable[[PackedStringArray], None]]'  # files_selected(paths: PackedStringArray)
    dir_selected: 'Signal[Callable[[str], None]]'  # dir_selected(dir: String)
    filename_filter_changed: 'Signal[Callable[[str], None]]'  # filename_filter_changed(filter: String)

    def clear_filters(self) -> None: ...
    def add_filter(self, filter: 'str', description: 'str' = "") -> None: ...
    def set_filters(self, filters: 'PackedStringArray') -> None: ...
    def get_filters(self) -> 'PackedStringArray': ...
    def get_option_name(self, option: 'int') -> 'str': ...
    def get_option_values(self, option: 'int') -> 'PackedStringArray': ...
    def get_option_default(self, option: 'int') -> 'int': ...
    def set_option_name(self, option: 'int', name: 'str') -> None: ...
    def set_option_values(self, option: 'int', values: 'PackedStringArray') -> None: ...
    def set_option_default(self, option: 'int', default_value_index: 'int') -> None: ...
    def set_option_count(self, count: 'int') -> None: ...
    def get_option_count(self) -> 'int': ...
    def add_option(self, name: 'str', values: 'PackedStringArray', default_value_index: 'int') -> None: ...
    def get_selected_options(self) -> 'Dictionary': ...
    def clear_filename_filter(self) -> None: ...
    def set_filename_filter(self, filter: 'str') -> None: ...
    def get_filename_filter(self) -> 'str': ...
    def get_current_dir(self) -> 'str': ...
    def get_current_file(self) -> 'str': ...
    def get_current_path(self) -> 'str': ...
    def set_current_dir(self, dir: 'str') -> None: ...
    def set_current_file(self, file: 'str') -> None: ...
    def set_current_path(self, path: 'str') -> None: ...
    def set_file_mode(self, mode: 'EditorFileDialog__FileMode') -> None: ...
    def get_file_mode(self) -> 'EditorFileDialog__FileMode': ...
    def get_vbox(self) -> 'VBoxContainer': ...
    def get_line_edit(self) -> 'LineEdit': ...
    def set_access(self, access: 'EditorFileDialog__Access') -> None: ...
    def get_access(self) -> 'EditorFileDialog__Access': ...
    def set_show_hidden_files(self, show: 'bool') -> None: ...
    def is_showing_hidden_files(self) -> 'bool': ...
    def set_display_mode(self, mode: 'EditorFileDialog__DisplayMode') -> None: ...
    def get_display_mode(self) -> 'EditorFileDialog__DisplayMode': ...
    def set_disable_overwrite_warning(self, disable: 'bool') -> None: ...
    def is_overwrite_warning_disabled(self) -> 'bool': ...
    def add_side_menu(self, menu: 'Control', title: 'str' = "") -> None: ...
    def popup_file_dialog(self) -> None: ...
    def invalidate(self) -> None: ...


class EditorFileSystem(Node):


    filesystem_changed: 'Signal[Callable[[], None]]'  # filesystem_changed()
    script_classes_updated: 'Signal[Callable[[], None]]'  # script_classes_updated()
    sources_changed: 'Signal[Callable[[bool], None]]'  # sources_changed(exist: bool)
    resources_reimporting: 'Signal[Callable[[PackedStringArray], None]]'  # resources_reimporting(resources: PackedStringArray)
    resources_reimported: 'Signal[Callable[[PackedStringArray], None]]'  # resources_reimported(resources: PackedStringArray)
    resources_reload: 'Signal[Callable[[PackedStringArray], None]]'  # resources_reload(resources: PackedStringArray)

    def get_filesystem(self) -> 'EditorFileSystemDirectory': ...
    def is_scanning(self) -> 'bool': ...
    def get_scanning_progress(self) -> 'float': ...
    def scan(self) -> None: ...
    def scan_sources(self) -> None: ...
    def update_file(self, path: 'str') -> None: ...
    def get_filesystem_path(self, path: 'str') -> 'EditorFileSystemDirectory': ...
    def get_file_type(self, path: 'str') -> 'str': ...
    def reimport_files(self, files: 'PackedStringArray') -> None: ...


class EditorFileSystemDirectory(Object):



    def get_subdir_count(self) -> 'int': ...
    def get_subdir(self, idx: 'int') -> 'EditorFileSystemDirectory': ...
    def get_file_count(self) -> 'int': ...
    def get_file(self, idx: 'int') -> 'str': ...
    def get_file_path(self, idx: 'int') -> 'str': ...
    def get_file_type(self, idx: 'int') -> 'StringName': ...
    def get_file_script_class_name(self, idx: 'int') -> 'str': ...
    def get_file_script_class_extends(self, idx: 'int') -> 'str': ...
    def get_file_import_is_valid(self, idx: 'int') -> 'bool': ...
    def get_name(self) -> 'str': ...
    def get_path(self) -> 'str': ...
    def get_parent(self) -> 'EditorFileSystemDirectory': ...
    def find_file_index(self, name: 'str') -> 'int': ...
    def find_dir_index(self, name: 'str') -> 'int': ...


class EditorFileSystemImportFormatSupportQuery(RefCounted):



    def _is_active(self) -> 'bool': ...
    def _get_file_extensions(self) -> 'PackedStringArray': ...
    def _query(self) -> 'bool': ...


class EditorImportPlugin(ResourceImporter):



    def _get_importer_name(self) -> 'str': ...
    def _get_visible_name(self) -> 'str': ...
    def _get_preset_count(self) -> 'int': ...
    def _get_preset_name(self, preset_index: 'int') -> 'str': ...
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _get_import_options(self, path: 'str', preset_index: 'int') -> 'Array'['Dictionary']: ...
    def _get_save_extension(self) -> 'str': ...
    def _get_resource_type(self) -> 'str': ...
    def _get_priority(self) -> 'float': ...
    def _get_import_order(self) -> 'int': ...
    def _get_format_version(self) -> 'int': ...
    def _get_option_visibility(self, path: 'str', option_name: 'StringName', options: 'Dictionary') -> 'bool': ...
    def _import(self, source_file: 'str', save_path: 'str', options: 'Dictionary', platform_variants: 'Array'['str'], gen_files: 'Array'['str']) -> 'Error': ...
    def _can_import_threaded(self) -> 'bool': ...
    def append_import_external_resource(self, path: 'str', custom_options: 'Dictionary' = default('''{}'''), custom_importer: 'str' = "", generator_parameters: 'Variant' = default('''null''')) -> 'Error': ...


class EditorInspector(ScrollContainer):


    property_selected: 'Signal[Callable[[str], None]]'  # property_selected(property: String)
    property_keyed: 'Signal[Callable[[str, Variant, bool], None]]'  # property_keyed(property: String, value: Variant, advance: bool)
    property_deleted: 'Signal[Callable[[str], None]]'  # property_deleted(property: String)
    resource_selected: 'Signal[Callable[[Resource, str], None]]'  # resource_selected(resource: Resource, path: String)
    object_id_selected: 'Signal[Callable[[int], None]]'  # object_id_selected(id: int)
    property_edited: 'Signal[Callable[[str], None]]'  # property_edited(property: String)
    property_toggled: 'Signal[Callable[[str, bool], None]]'  # property_toggled(property: String, checked: bool)
    edited_object_changed: 'Signal[Callable[[], None]]'  # edited_object_changed()
    restart_requested: 'Signal[Callable[[], None]]'  # restart_requested()

    def edit(self, object: 'Object') -> None: ...
    def get_selected_path(self) -> 'str': ...
    def get_edited_object(self) -> 'Object': ...
    @staticmethod
    def instantiate_property_editor(object: 'Object', type: 'Variant__Type', path: 'str', hint: 'PropertyHint', hint_text: 'str', usage: 'int', wide: 'bool' = False) -> 'EditorProperty': ...


class EditorInspectorPlugin(RefCounted):



    def _can_handle(self, object: 'Object') -> 'bool': ...
    def _parse_begin(self, object: 'Object') -> None: ...
    def _parse_category(self, object: 'Object', category: 'str') -> None: ...
    def _parse_group(self, object: 'Object', group: 'str') -> None: ...
    def _parse_property(self, object: 'Object', type: 'Variant__Type', name: 'str', hint_type: 'PropertyHint', hint_string: 'str', usage_flags: 'PropertyUsageFlags', wide: 'bool') -> 'bool': ...
    def _parse_end(self, object: 'Object') -> None: ...
    def add_custom_control(self, control: 'Control') -> None: ...
    def add_property_editor(self, property: 'str', editor: 'Control', add_to_end: 'bool' = False, label: 'str' = "") -> None: ...
    def add_property_editor_for_multiple_properties(self, label: 'str', properties: 'PackedStringArray', editor: 'Control') -> None: ...


class EditorInterface(Object):


    distraction_free_mode: 'bool'
    movie_maker_enabled: 'bool'

    def restart_editor(self, save: 'bool' = True) -> None: ...
    def get_command_palette(self) -> 'EditorCommandPalette': ...
    def get_resource_filesystem(self) -> 'EditorFileSystem': ...
    def get_editor_paths(self) -> 'EditorPaths': ...
    def get_resource_previewer(self) -> 'EditorResourcePreview': ...
    def get_selection(self) -> 'EditorSelection': ...
    def get_editor_settings(self) -> 'EditorSettings': ...
    def get_editor_toaster(self) -> 'EditorToaster': ...
    def get_editor_undo_redo(self) -> 'EditorUndoRedoManager': ...
    def make_mesh_previews(self, meshes: 'Array'['Mesh'], preview_size: 'int') -> 'Array'['Texture2D']: ...
    def set_plugin_enabled(self, plugin: 'str', enabled: 'bool') -> None: ...
    def is_plugin_enabled(self, plugin: 'str') -> 'bool': ...
    def get_editor_theme(self) -> 'Theme': ...
    def get_base_control(self) -> 'Control': ...
    def get_editor_main_screen(self) -> 'VBoxContainer': ...
    def get_script_editor(self) -> 'ScriptEditor': ...
    def get_editor_viewport_2d(self) -> 'SubViewport': ...
    def get_editor_viewport_3d(self, idx: 'int' = 0) -> 'SubViewport': ...
    def set_main_screen_editor(self, name: 'str') -> None: ...
    def set_distraction_free_mode(self, enter: 'bool') -> None: ...
    def is_distraction_free_mode_enabled(self) -> 'bool': ...
    def is_multi_window_enabled(self) -> 'bool': ...
    def get_editor_scale(self) -> 'float': ...
    def popup_dialog(self, dialog: 'Window', rect: 'Rect2i' = default('''Rect2i(0, 0, 0, 0)''')) -> None: ...
    def popup_dialog_centered(self, dialog: 'Window', minsize: 'Vector2i' = default('''Vector2i(0, 0)''')) -> None: ...
    def popup_dialog_centered_ratio(self, dialog: 'Window', ratio: 'float' = 0.8) -> None: ...
    def popup_dialog_centered_clamped(self, dialog: 'Window', minsize: 'Vector2i' = default('''Vector2i(0, 0)'''), fallback_ratio: 'float' = 0.75) -> None: ...
    def get_current_feature_profile(self) -> 'str': ...
    def set_current_feature_profile(self, profile_name: 'str') -> None: ...
    def popup_node_selector(self, callback: 'Callable', valid_types: 'Array'['StringName'] = default('''Array[StringName]([])'''), current_value: 'Node' = default('''null''')) -> None: ...
    def popup_property_selector(self, object: 'Object', callback: 'Callable', type_filter: 'PackedInt32Array' = default('''PackedInt32Array()'''), current_value: 'str' = "") -> None: ...
    def popup_method_selector(self, object: 'Object', callback: 'Callable', current_value: 'str' = "") -> None: ...
    def popup_quick_open(self, callback: 'Callable', base_types: 'Array'['StringName'] = default('''Array[StringName]([])''')) -> None: ...
    def popup_create_dialog(self, callback: 'Callable', base_type: 'StringName' = default('''""'''), current_type: 'str' = "", dialog_title: 'str' = "", type_blocklist: 'Array'['StringName'] = default('''Array[StringName]([])''')) -> None: ...
    def get_file_system_dock(self) -> 'FileSystemDock': ...
    def select_file(self, file: 'str') -> None: ...
    def get_selected_paths(self) -> 'PackedStringArray': ...
    def get_current_path(self) -> 'str': ...
    def get_current_directory(self) -> 'str': ...
    def get_inspector(self) -> 'EditorInspector': ...
    def inspect_object(self, object: 'Object', for_property: 'str' = "", inspector_only: 'bool' = False) -> None: ...
    def edit_resource(self, resource: 'Resource') -> None: ...
    def edit_node(self, node: 'Node') -> None: ...
    def edit_script(self, script: 'Script', line: 'int' = -1, column: 'int' = 0, grab_focus: 'bool' = True) -> None: ...
    def open_scene_from_path(self, scene_filepath: 'str', set_inherited: 'bool' = False) -> None: ...
    def reload_scene_from_path(self, scene_filepath: 'str') -> None: ...
    def get_open_scenes(self) -> 'PackedStringArray': ...
    def get_edited_scene_root(self) -> 'Node': ...
    def save_scene(self) -> 'Error': ...
    def save_scene_as(self, path: 'str', with_preview: 'bool' = True) -> None: ...
    def save_all_scenes(self) -> None: ...
    def mark_scene_as_unsaved(self) -> None: ...
    def play_main_scene(self) -> None: ...
    def play_current_scene(self) -> None: ...
    def play_custom_scene(self, scene_filepath: 'str') -> None: ...
    def stop_playing_scene(self) -> None: ...
    def is_playing_scene(self) -> 'bool': ...
    def get_playing_scene(self) -> 'str': ...
    def set_movie_maker_enabled(self, enabled: 'bool') -> None: ...
    def is_movie_maker_enabled(self) -> 'bool': ...


class EditorNode3DGizmo(Node3DGizmo):



    def _redraw(self) -> None: ...
    def _get_handle_name(self, id: 'int', secondary: 'bool') -> 'str': ...
    def _is_handle_highlighted(self, id: 'int', secondary: 'bool') -> 'bool': ...
    def _get_handle_value(self, id: 'int', secondary: 'bool') -> 'Variant': ...
    def _begin_handle_action(self, id: 'int', secondary: 'bool') -> None: ...
    def _set_handle(self, id: 'int', secondary: 'bool', camera: 'Camera3D', point: 'Vector2') -> None: ...
    def _commit_handle(self, id: 'int', secondary: 'bool', restore: 'Variant', cancel: 'bool') -> None: ...
    def _subgizmos_intersect_ray(self, camera: 'Camera3D', point: 'Vector2') -> 'int': ...
    def _subgizmos_intersect_frustum(self, camera: 'Camera3D', frustum: 'Array'['Plane']) -> 'PackedInt32Array': ...
    def _set_subgizmo_transform(self, id: 'int', transform: 'Transform3D') -> None: ...
    def _get_subgizmo_transform(self, id: 'int') -> 'Transform3D': ...
    def _commit_subgizmos(self, ids: 'PackedInt32Array', restores: 'Array'['Transform3D'], cancel: 'bool') -> None: ...
    def add_lines(self, lines: 'PackedVector3Array', material: 'Material', billboard: 'bool' = False, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def add_mesh(self, mesh: 'Mesh', material: 'Material' = default('''null'''), transform: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)'''), skeleton: 'SkinReference' = default('''null''')) -> None: ...
    def add_collision_segments(self, segments: 'PackedVector3Array') -> None: ...
    def add_collision_triangles(self, triangles: 'TriangleMesh') -> None: ...
    def add_unscaled_billboard(self, material: 'Material', default_scale: 'float' = 1, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def add_handles(self, handles: 'PackedVector3Array', material: 'Material', ids: 'PackedInt32Array', billboard: 'bool' = False, secondary: 'bool' = False) -> None: ...
    def set_node_3d(self, node: 'Node') -> None: ...
    def get_node_3d(self) -> 'Node3D': ...
    def get_plugin(self) -> 'EditorNode3DGizmoPlugin': ...
    def clear(self) -> None: ...
    def set_hidden(self, hidden: 'bool') -> None: ...
    def is_subgizmo_selected(self, id: 'int') -> 'bool': ...
    def get_subgizmo_selection(self) -> 'PackedInt32Array': ...


class EditorNode3DGizmoPlugin(Resource):



    def _has_gizmo(self, for_node_3d: 'Node3D') -> 'bool': ...
    def _create_gizmo(self, for_node_3d: 'Node3D') -> 'EditorNode3DGizmo': ...
    def _get_gizmo_name(self) -> 'str': ...
    def _get_priority(self) -> 'int': ...
    def _can_be_hidden(self) -> 'bool': ...
    def _is_selectable_when_hidden(self) -> 'bool': ...
    def _redraw(self, gizmo: 'EditorNode3DGizmo') -> None: ...
    def _get_handle_name(self, gizmo: 'EditorNode3DGizmo', handle_id: 'int', secondary: 'bool') -> 'str': ...
    def _is_handle_highlighted(self, gizmo: 'EditorNode3DGizmo', handle_id: 'int', secondary: 'bool') -> 'bool': ...
    def _get_handle_value(self, gizmo: 'EditorNode3DGizmo', handle_id: 'int', secondary: 'bool') -> 'Variant': ...
    def _begin_handle_action(self, gizmo: 'EditorNode3DGizmo', handle_id: 'int', secondary: 'bool') -> None: ...
    def _set_handle(self, gizmo: 'EditorNode3DGizmo', handle_id: 'int', secondary: 'bool', camera: 'Camera3D', screen_pos: 'Vector2') -> None: ...
    def _commit_handle(self, gizmo: 'EditorNode3DGizmo', handle_id: 'int', secondary: 'bool', restore: 'Variant', cancel: 'bool') -> None: ...
    def _subgizmos_intersect_ray(self, gizmo: 'EditorNode3DGizmo', camera: 'Camera3D', screen_pos: 'Vector2') -> 'int': ...
    def _subgizmos_intersect_frustum(self, gizmo: 'EditorNode3DGizmo', camera: 'Camera3D', frustum_planes: 'Array'['Plane']) -> 'PackedInt32Array': ...
    def _get_subgizmo_transform(self, gizmo: 'EditorNode3DGizmo', subgizmo_id: 'int') -> 'Transform3D': ...
    def _set_subgizmo_transform(self, gizmo: 'EditorNode3DGizmo', subgizmo_id: 'int', transform: 'Transform3D') -> None: ...
    def _commit_subgizmos(self, gizmo: 'EditorNode3DGizmo', ids: 'PackedInt32Array', restores: 'Array'['Transform3D'], cancel: 'bool') -> None: ...
    def create_material(self, name: 'str', color: 'Color', billboard: 'bool' = False, on_top: 'bool' = False, use_vertex_color: 'bool' = False) -> None: ...
    def create_icon_material(self, name: 'str', texture: 'Texture2D', on_top: 'bool' = False, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def create_handle_material(self, name: 'str', billboard: 'bool' = False, texture: 'Texture2D' = default('''null''')) -> None: ...
    def add_material(self, name: 'str', material: 'StandardMaterial3D') -> None: ...
    def get_material(self, name: 'str', gizmo: 'EditorNode3DGizmo' = default('''null''')) -> 'StandardMaterial3D': ...


class EditorPaths(Object):



    def get_data_dir(self) -> 'str': ...
    def get_config_dir(self) -> 'str': ...
    def get_cache_dir(self) -> 'str': ...
    def is_self_contained(self) -> 'bool': ...
    def get_self_contained_file(self) -> 'str': ...
    def get_project_settings_dir(self) -> 'str': ...


class EditorPlugin(Node):


    scene_changed: 'Signal[Callable[[Node], None]]'  # scene_changed(scene_root: Node)
    scene_closed: 'Signal[Callable[[str], None]]'  # scene_closed(filepath: String)
    main_screen_changed: 'Signal[Callable[[str], None]]'  # main_screen_changed(screen_name: String)
    resource_saved: 'Signal[Callable[[Resource], None]]'  # resource_saved(resource: Resource)
    scene_saved: 'Signal[Callable[[str], None]]'  # scene_saved(filepath: String)
    project_settings_changed: 'Signal[Callable[[], None]]'  # project_settings_changed()

    def _forward_canvas_gui_input(self, event: 'InputEvent') -> 'bool': ...
    def _forward_canvas_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _forward_canvas_force_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _forward_3d_gui_input(self, viewport_camera: 'Camera3D', event: 'InputEvent') -> 'int': ...
    def _forward_3d_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _forward_3d_force_draw_over_viewport(self, viewport_control: 'Control') -> None: ...
    def _get_plugin_name(self) -> 'str': ...
    def _get_plugin_icon(self) -> 'Texture2D': ...
    def _has_main_screen(self) -> 'bool': ...
    def _make_visible(self, visible: 'bool') -> None: ...
    def _edit(self, object: 'Object') -> None: ...
    def _handles(self, object: 'Object') -> 'bool': ...
    def _get_state(self) -> 'Dictionary': ...
    def _set_state(self, state: 'Dictionary') -> None: ...
    def _clear(self) -> None: ...
    def _get_unsaved_status(self, for_scene: 'str') -> 'str': ...
    def _save_external_data(self) -> None: ...
    def _apply_changes(self) -> None: ...
    def _get_breakpoints(self) -> 'PackedStringArray': ...
    def _set_window_layout(self, configuration: 'ConfigFile') -> None: ...
    def _get_window_layout(self, configuration: 'ConfigFile') -> None: ...
    def _build(self) -> 'bool': ...
    def _enable_plugin(self) -> None: ...
    def _disable_plugin(self) -> None: ...
    def add_control_to_container(self, container: 'EditorPlugin__CustomControlContainer', control: 'Control') -> None: ...
    def add_control_to_bottom_panel(self, control: 'Control', title: 'str', shortcut: 'Shortcut' = default('''null''')) -> 'Button': ...
    def add_control_to_dock(self, slot: 'EditorPlugin__DockSlot', control: 'Control', shortcut: 'Shortcut' = default('''null''')) -> None: ...
    def remove_control_from_docks(self, control: 'Control') -> None: ...
    def remove_control_from_bottom_panel(self, control: 'Control') -> None: ...
    def remove_control_from_container(self, container: 'EditorPlugin__CustomControlContainer', control: 'Control') -> None: ...
    def set_dock_tab_icon(self, control: 'Control', icon: 'Texture2D') -> None: ...
    def add_tool_menu_item(self, name: 'str', callable: 'Callable') -> None: ...
    def add_tool_submenu_item(self, name: 'str', submenu: 'PopupMenu') -> None: ...
    def remove_tool_menu_item(self, name: 'str') -> None: ...
    def get_export_as_menu(self) -> 'PopupMenu': ...
    def add_custom_type(self, type: 'str', base: 'str', script: 'Script', icon: 'Texture2D') -> None: ...
    def remove_custom_type(self, type: 'str') -> None: ...
    def add_autoload_singleton(self, name: 'str', path: 'str') -> None: ...
    def remove_autoload_singleton(self, name: 'str') -> None: ...
    def update_overlays(self) -> 'int': ...
    def make_bottom_panel_item_visible(self, item: 'Control') -> None: ...
    def hide_bottom_panel(self) -> None: ...
    def get_undo_redo(self) -> 'EditorUndoRedoManager': ...
    def add_undo_redo_inspector_hook_callback(self, callable: 'Callable') -> None: ...
    def remove_undo_redo_inspector_hook_callback(self, callable: 'Callable') -> None: ...
    def queue_save_layout(self) -> None: ...
    def add_translation_parser_plugin(self, parser: 'EditorTranslationParserPlugin') -> None: ...
    def remove_translation_parser_plugin(self, parser: 'EditorTranslationParserPlugin') -> None: ...
    def add_import_plugin(self, importer: 'EditorImportPlugin', first_priority: 'bool' = False) -> None: ...
    def remove_import_plugin(self, importer: 'EditorImportPlugin') -> None: ...
    def add_scene_format_importer_plugin(self, scene_format_importer: 'EditorSceneFormatImporter', first_priority: 'bool' = False) -> None: ...
    def remove_scene_format_importer_plugin(self, scene_format_importer: 'EditorSceneFormatImporter') -> None: ...
    def add_scene_post_import_plugin(self, scene_import_plugin: 'EditorScenePostImportPlugin', first_priority: 'bool' = False) -> None: ...
    def remove_scene_post_import_plugin(self, scene_import_plugin: 'EditorScenePostImportPlugin') -> None: ...
    def add_export_plugin(self, plugin: 'EditorExportPlugin') -> None: ...
    def remove_export_plugin(self, plugin: 'EditorExportPlugin') -> None: ...
    def add_export_platform(self, platform: 'EditorExportPlatform') -> None: ...
    def remove_export_platform(self, platform: 'EditorExportPlatform') -> None: ...
    def add_node_3d_gizmo_plugin(self, plugin: 'EditorNode3DGizmoPlugin') -> None: ...
    def remove_node_3d_gizmo_plugin(self, plugin: 'EditorNode3DGizmoPlugin') -> None: ...
    def add_inspector_plugin(self, plugin: 'EditorInspectorPlugin') -> None: ...
    def remove_inspector_plugin(self, plugin: 'EditorInspectorPlugin') -> None: ...
    def add_resource_conversion_plugin(self, plugin: 'EditorResourceConversionPlugin') -> None: ...
    def remove_resource_conversion_plugin(self, plugin: 'EditorResourceConversionPlugin') -> None: ...
    def set_input_event_forwarding_always_enabled(self) -> None: ...
    def set_force_draw_over_forwarding_enabled(self) -> None: ...
    def add_context_menu_plugin(self, slot: 'EditorContextMenuPlugin__ContextMenuSlot', plugin: 'EditorContextMenuPlugin') -> None: ...
    def remove_context_menu_plugin(self, plugin: 'EditorContextMenuPlugin') -> None: ...
    def get_editor_interface(self) -> 'EditorInterface': ...
    def get_script_create_dialog(self) -> 'ScriptCreateDialog': ...
    def add_debugger_plugin(self, script: 'EditorDebuggerPlugin') -> None: ...
    def remove_debugger_plugin(self, script: 'EditorDebuggerPlugin') -> None: ...
    def get_plugin_version(self) -> 'str': ...


class EditorProperty(Container):


    label: 'str'
    read_only: 'bool'
    draw_label: 'bool'
    draw_background: 'bool'
    checkable: 'bool'
    checked: 'bool'
    draw_warning: 'bool'
    keying: 'bool'
    deletable: 'bool'
    selectable: 'bool'
    use_folding: 'bool'
    name_split_ratio: 'float'
    property_changed: 'Signal[Callable[[StringName, Variant, StringName, bool], None]]'  # property_changed(property: StringName, value: Variant, field: StringName, changing: bool)
    multiple_properties_changed: 'Signal[Callable[[PackedStringArray, Array], None]]'  # multiple_properties_changed(properties: PackedStringArray, value: Array)
    property_keyed: 'Signal[Callable[[StringName], None]]'  # property_keyed(property: StringName)
    property_deleted: 'Signal[Callable[[StringName], None]]'  # property_deleted(property: StringName)
    property_keyed_with_value: 'Signal[Callable[[StringName, Variant], None]]'  # property_keyed_with_value(property: StringName, value: Variant)
    property_checked: 'Signal[Callable[[StringName, bool], None]]'  # property_checked(property: StringName, checked: bool)
    property_favorited: 'Signal[Callable[[StringName, bool], None]]'  # property_favorited(property: StringName, favorited: bool)
    property_pinned: 'Signal[Callable[[StringName, bool], None]]'  # property_pinned(property: StringName, pinned: bool)
    property_can_revert_changed: 'Signal[Callable[[StringName, bool], None]]'  # property_can_revert_changed(property: StringName, can_revert: bool)
    resource_selected: 'Signal[Callable[[str, Resource], None]]'  # resource_selected(path: String, resource: Resource)
    object_id_selected: 'Signal[Callable[[StringName, int], None]]'  # object_id_selected(property: StringName, id: int)
    selected: 'Signal[Callable[[str, int], None]]'  # selected(path: String, focusable_idx: int)

    def _update_property(self) -> None: ...
    def _set_read_only(self, read_only: 'bool') -> None: ...
    def set_label(self, text: 'str') -> None: ...
    def get_label(self) -> 'str': ...
    def set_read_only(self, read_only: 'bool') -> None: ...
    def is_read_only(self) -> 'bool': ...
    def set_draw_label(self, draw_label: 'bool') -> None: ...
    def is_draw_label(self) -> 'bool': ...
    def set_draw_background(self, draw_background: 'bool') -> None: ...
    def is_draw_background(self) -> 'bool': ...
    def set_checkable(self, checkable: 'bool') -> None: ...
    def is_checkable(self) -> 'bool': ...
    def set_checked(self, checked: 'bool') -> None: ...
    def is_checked(self) -> 'bool': ...
    def set_draw_warning(self, draw_warning: 'bool') -> None: ...
    def is_draw_warning(self) -> 'bool': ...
    def set_keying(self, keying: 'bool') -> None: ...
    def is_keying(self) -> 'bool': ...
    def set_deletable(self, deletable: 'bool') -> None: ...
    def is_deletable(self) -> 'bool': ...
    def get_edited_property(self) -> 'StringName': ...
    def get_edited_object(self) -> 'Object': ...
    def update_property(self) -> None: ...
    def add_focusable(self, control: 'Control') -> None: ...
    def set_bottom_editor(self, editor: 'Control') -> None: ...
    def set_selectable(self, selectable: 'bool') -> None: ...
    def is_selectable(self) -> 'bool': ...
    def set_use_folding(self, use_folding: 'bool') -> None: ...
    def is_using_folding(self) -> 'bool': ...
    def set_name_split_ratio(self, ratio: 'float') -> None: ...
    def get_name_split_ratio(self) -> 'float': ...
    def deselect(self) -> None: ...
    def is_selected(self) -> 'bool': ...
    def select(self, focusable: 'int' = -1) -> None: ...
    def set_object_and_property(self, object: 'Object', property: 'StringName') -> None: ...
    def set_label_reference(self, control: 'Control') -> None: ...
    def emit_changed(self, property: 'StringName', value: 'Variant', field: 'StringName' = default('''&""'''), changing: 'bool' = False) -> None: ...


class EditorResourceConversionPlugin(RefCounted):



    def _converts_to(self) -> 'str': ...
    def _handles(self, resource: 'Resource') -> 'bool': ...
    def _convert(self, resource: 'Resource') -> 'Resource': ...


class EditorResourcePicker(HBoxContainer):


    base_type: 'str'
    edited_resource: 'Resource'
    editable: 'bool'
    toggle_mode: 'bool'
    resource_selected: 'Signal[Callable[[Resource, bool], None]]'  # resource_selected(resource: Resource, inspect: bool)
    resource_changed: 'Signal[Callable[[Resource], None]]'  # resource_changed(resource: Resource)

    def _set_create_options(self, menu_node: 'Object') -> None: ...
    def _handle_menu_selected(self, id: 'int') -> 'bool': ...
    def set_base_type(self, base_type: 'str') -> None: ...
    def get_base_type(self) -> 'str': ...
    def get_allowed_types(self) -> 'PackedStringArray': ...
    def set_edited_resource(self, resource: 'Resource') -> None: ...
    def get_edited_resource(self) -> 'Resource': ...
    def set_toggle_mode(self, enable: 'bool') -> None: ...
    def is_toggle_mode(self) -> 'bool': ...
    def set_toggle_pressed(self, pressed: 'bool') -> None: ...
    def set_editable(self, enable: 'bool') -> None: ...
    def is_editable(self) -> 'bool': ...


class EditorResourcePreview(Node):


    preview_invalidated: 'Signal[Callable[[str], None]]'  # preview_invalidated(path: String)

    def queue_resource_preview(self, path: 'str', receiver: 'Object', receiver_func: 'StringName', userdata: 'Variant') -> None: ...
    def queue_edited_resource_preview(self, resource: 'Resource', receiver: 'Object', receiver_func: 'StringName', userdata: 'Variant') -> None: ...
    def add_preview_generator(self, generator: 'EditorResourcePreviewGenerator') -> None: ...
    def remove_preview_generator(self, generator: 'EditorResourcePreviewGenerator') -> None: ...
    def check_for_invalidation(self, path: 'str') -> None: ...


class EditorResourcePreviewGenerator(RefCounted):



    def _handles(self, type: 'str') -> 'bool': ...
    def _generate(self, resource: 'Resource', size: 'Vector2i', metadata: 'Dictionary') -> 'Texture2D': ...
    def _generate_from_path(self, path: 'str', size: 'Vector2i', metadata: 'Dictionary') -> 'Texture2D': ...
    def _generate_small_preview_automatically(self) -> 'bool': ...
    def _can_generate_small_preview(self) -> 'bool': ...


class EditorResourceTooltipPlugin(RefCounted):



    def _handles(self, type: 'str') -> 'bool': ...
    def _make_tooltip_for_path(self, path: 'str', metadata: 'Dictionary', base: 'Control') -> 'Control': ...
    def request_thumbnail(self, path: 'str', control: 'TextureRect') -> None: ...


class EditorSceneFormatImporter(RefCounted):


    IMPORT_SCENE: 'int' = 1
    IMPORT_ANIMATION: 'int' = 2
    IMPORT_FAIL_ON_MISSING_DEPENDENCIES: 'int' = 4
    IMPORT_GENERATE_TANGENT_ARRAYS: 'int' = 8
    IMPORT_USE_NAMED_SKIN_BINDS: 'int' = 16
    IMPORT_DISCARD_MESHES_AND_MATERIALS: 'int' = 32
    IMPORT_FORCE_DISABLE_MESH_COMPRESSION: 'int' = 64

    def _get_extensions(self) -> 'PackedStringArray': ...
    def _import_scene(self, path: 'str', flags: 'int', options: 'Dictionary') -> 'Object': ...
    def _get_import_options(self, path: 'str') -> None: ...
    def _get_option_visibility(self, path: 'str', for_animation: 'bool', option: 'str') -> 'Variant': ...
    def add_import_option(self, name: 'str', value: 'Variant') -> None: ...
    def add_import_option_advanced(self, type: 'Variant__Type', name: 'str', default_value: 'Variant', hint: 'PropertyHint' = 0, hint_string: 'str' = "", usage_flags: 'int' = 6) -> None: ...


class EditorSceneFormatImporterBlend(EditorSceneFormatImporter): ...


class EditorSceneFormatImporterFBX2GLTF(EditorSceneFormatImporter): ...


class EditorSceneFormatImporterGLTF(EditorSceneFormatImporter): ...


class EditorSceneFormatImporterUFBX(EditorSceneFormatImporter): ...


class EditorScenePostImport(RefCounted):



    def _post_import(self, scene: 'Node') -> 'Object': ...
    def get_source_file(self) -> 'str': ...


class EditorScenePostImportPlugin(RefCounted):



    def _get_internal_import_options(self, category: 'int') -> None: ...
    def _get_internal_option_visibility(self, category: 'int', for_animation: 'bool', option: 'str') -> 'Variant': ...
    def _get_internal_option_update_view_required(self, category: 'int', option: 'str') -> 'Variant': ...
    def _internal_process(self, category: 'int', base_node: 'Node', node: 'Node', resource: 'Resource') -> None: ...
    def _get_import_options(self, path: 'str') -> None: ...
    def _get_option_visibility(self, path: 'str', for_animation: 'bool', option: 'str') -> 'Variant': ...
    def _pre_process(self, scene: 'Node') -> None: ...
    def _post_process(self, scene: 'Node') -> None: ...
    def get_option_value(self, name: 'StringName') -> 'Variant': ...
    def add_import_option(self, name: 'str', value: 'Variant') -> None: ...
    def add_import_option_advanced(self, type: 'Variant__Type', name: 'str', default_value: 'Variant', hint: 'PropertyHint' = 0, hint_string: 'str' = "", usage_flags: 'int' = 6) -> None: ...


class EditorScript(RefCounted):



    def _run(self) -> None: ...
    def add_root_node(self, node: 'Node') -> None: ...
    def get_scene(self) -> 'Node': ...
    def get_editor_interface(self) -> 'EditorInterface': ...


class EditorScriptPicker(EditorResourcePicker):


    script_owner: 'Node'

    def set_script_owner(self, owner_node: 'Node') -> None: ...
    def get_script_owner(self) -> 'Node': ...


class EditorSelection(Object):


    selection_changed: 'Signal[Callable[[], None]]'  # selection_changed()

    def clear(self) -> None: ...
    def add_node(self, node: 'Node') -> None: ...
    def remove_node(self, node: 'Node') -> None: ...
    def get_selected_nodes(self) -> 'Array'['Node']: ...
    def get_transformable_selected_nodes(self) -> 'Array'['Node']: ...


class EditorSettings(Resource):


    NOTIFICATION_EDITOR_SETTINGS_CHANGED: 'int' = 10000
    settings_changed: 'Signal[Callable[[], None]]'  # settings_changed()

    def has_setting(self, name: 'str') -> 'bool': ...
    def set_setting(self, name: 'str', value: 'Variant') -> None: ...
    def get_setting(self, name: 'str') -> 'Variant': ...
    def erase(self, property: 'str') -> None: ...
    def set_initial_value(self, name: 'StringName', value: 'Variant', update_current: 'bool') -> None: ...
    def add_property_info(self, info: 'Dictionary') -> None: ...
    def set_project_metadata(self, section: 'str', key: 'str', data: 'Variant') -> None: ...
    def get_project_metadata(self, section: 'str', key: 'str', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def set_favorites(self, dirs: 'PackedStringArray') -> None: ...
    def get_favorites(self) -> 'PackedStringArray': ...
    def set_recent_dirs(self, dirs: 'PackedStringArray') -> None: ...
    def get_recent_dirs(self) -> 'PackedStringArray': ...
    def set_builtin_action_override(self, name: 'str', actions_list: 'Array'['InputEvent']) -> None: ...
    def check_changed_settings_in_group(self, setting_prefix: 'str') -> 'bool': ...
    def get_changed_settings(self) -> 'PackedStringArray': ...
    def mark_setting_changed(self, setting: 'str') -> None: ...


class EditorSpinSlider(Range):


    label: 'str'
    suffix: 'str'
    read_only: 'bool'
    flat: 'bool'
    hide_slider: 'bool'
    editing_integer: 'bool'
    grabbed: 'Signal[Callable[[], None]]'  # grabbed()
    ungrabbed: 'Signal[Callable[[], None]]'  # ungrabbed()
    updown_pressed: 'Signal[Callable[[], None]]'  # updown_pressed()
    value_focus_entered: 'Signal[Callable[[], None]]'  # value_focus_entered()
    value_focus_exited: 'Signal[Callable[[], None]]'  # value_focus_exited()

    def set_label(self, label: 'str') -> None: ...
    def get_label(self) -> 'str': ...
    def set_suffix(self, suffix: 'str') -> None: ...
    def get_suffix(self) -> 'str': ...
    def set_read_only(self, read_only: 'bool') -> None: ...
    def is_read_only(self) -> 'bool': ...
    def set_flat(self, flat: 'bool') -> None: ...
    def is_flat(self) -> 'bool': ...
    def set_hide_slider(self, hide_slider: 'bool') -> None: ...
    def is_hiding_slider(self) -> 'bool': ...
    def set_editing_integer(self, editing_integer: 'bool') -> None: ...
    def is_editing_integer(self) -> 'bool': ...


class EditorSyntaxHighlighter(SyntaxHighlighter):



    def _get_name(self) -> 'str': ...
    def _get_supported_languages(self) -> 'PackedStringArray': ...


class EditorToaster(HBoxContainer):



    def push_toast(self, message: 'str', severity: 'EditorToaster__Severity' = 0, tooltip: 'str' = "") -> None: ...


class EditorTranslationParserPlugin(RefCounted):



    def _parse_file(self, path: 'str') -> 'Array'['PackedStringArray']: ...
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...


class EditorUndoRedoManager(Object):


    history_changed: 'Signal[Callable[[], None]]'  # history_changed()
    version_changed: 'Signal[Callable[[], None]]'  # version_changed()

    def create_action(self, name: 'str', merge_mode: 'UndoRedo__MergeMode' = 0, custom_context: 'Object' = default('''null'''), backward_undo_ops: 'bool' = False) -> None: ...
    def commit_action(self, execute: 'bool' = True) -> None: ...
    def is_committing_action(self) -> 'bool': ...
    def force_fixed_history(self) -> None: ...
    def add_do_method(self, object: 'Object', method: 'StringName') -> None: ...
    def add_undo_method(self, object: 'Object', method: 'StringName') -> None: ...
    def add_do_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_undo_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_do_reference(self, object: 'Object') -> None: ...
    def add_undo_reference(self, object: 'Object') -> None: ...
    def get_object_history_id(self, object: 'Object') -> 'int': ...
    def get_history_undo_redo(self, id: 'int') -> 'UndoRedo': ...
    def clear_history(self, id: 'int' = -99, increase_version: 'bool' = True) -> None: ...


class EditorVCSInterface(Object):



    def _initialize(self, project_path: 'str') -> 'bool': ...
    def _set_credentials(self, username: 'str', password: 'str', ssh_public_key_path: 'str', ssh_private_key_path: 'str', ssh_passphrase: 'str') -> None: ...
    def _get_modified_files_data(self) -> 'Array'['Dictionary']: ...
    def _stage_file(self, file_path: 'str') -> None: ...
    def _unstage_file(self, file_path: 'str') -> None: ...
    def _discard_file(self, file_path: 'str') -> None: ...
    def _commit(self, msg: 'str') -> None: ...
    def _get_diff(self, identifier: 'str', area: 'int') -> 'Array'['Dictionary']: ...
    def _shut_down(self) -> 'bool': ...
    def _get_vcs_name(self) -> 'str': ...
    def _get_previous_commits(self, max_commits: 'int') -> 'Array'['Dictionary']: ...
    def _get_branch_list(self) -> 'Array'['str']: ...
    def _get_remotes(self) -> 'Array'['str']: ...
    def _create_branch(self, branch_name: 'str') -> None: ...
    def _remove_branch(self, branch_name: 'str') -> None: ...
    def _create_remote(self, remote_name: 'str', remote_url: 'str') -> None: ...
    def _remove_remote(self, remote_name: 'str') -> None: ...
    def _get_current_branch_name(self) -> 'str': ...
    def _checkout_branch(self, branch_name: 'str') -> 'bool': ...
    def _pull(self, remote: 'str') -> None: ...
    def _push(self, remote: 'str', force: 'bool') -> None: ...
    def _fetch(self, remote: 'str') -> None: ...
    def _get_line_diff(self, file_path: 'str', text: 'str') -> 'Array'['Dictionary']: ...
    def create_diff_line(self, new_line_no: 'int', old_line_no: 'int', content: 'str', status: 'str') -> 'Dictionary': ...
    def create_diff_hunk(self, old_start: 'int', new_start: 'int', old_lines: 'int', new_lines: 'int') -> 'Dictionary': ...
    def create_diff_file(self, new_file: 'str', old_file: 'str') -> 'Dictionary': ...
    def create_commit(self, msg: 'str', author: 'str', id: 'str', unix_timestamp: 'int', offset_minutes: 'int') -> 'Dictionary': ...
    def create_status_file(self, file_path: 'str', change_type: 'EditorVCSInterface__ChangeType', area: 'EditorVCSInterface__TreeArea') -> 'Dictionary': ...
    def add_diff_hunks_into_diff_file(self, diff_file: 'Dictionary', diff_hunks: 'Array'['Dictionary']) -> 'Dictionary': ...
    def add_line_diffs_into_diff_hunk(self, diff_hunk: 'Dictionary', line_diffs: 'Array'['Dictionary']) -> 'Dictionary': ...
    def popup_error(self, msg: 'str') -> None: ...


class EncodedObjectAsID(RefCounted):


    object_id: 'int'

    def set_object_id(self, id: 'int') -> None: ...
    def get_object_id(self) -> 'int': ...


class Engine(Object):


    print_error_messages: 'bool'
    print_to_stdout: 'bool'
    physics_ticks_per_second: 'int'
    max_physics_steps_per_frame: 'int'
    max_fps: 'int'
    time_scale: 'float'
    physics_jitter_fix: 'float'

    def set_physics_ticks_per_second(self, physics_ticks_per_second: 'int') -> None: ...
    def get_physics_ticks_per_second(self) -> 'int': ...
    def set_max_physics_steps_per_frame(self, max_physics_steps: 'int') -> None: ...
    def get_max_physics_steps_per_frame(self) -> 'int': ...
    def set_physics_jitter_fix(self, physics_jitter_fix: 'float') -> None: ...
    def get_physics_jitter_fix(self) -> 'float': ...
    def get_physics_interpolation_fraction(self) -> 'float': ...
    def set_max_fps(self, max_fps: 'int') -> None: ...
    def get_max_fps(self) -> 'int': ...
    def set_time_scale(self, time_scale: 'float') -> None: ...
    def get_time_scale(self) -> 'float': ...
    def get_frames_drawn(self) -> 'int': ...
    def get_frames_per_second(self) -> 'float': ...
    def get_physics_frames(self) -> 'int': ...
    def get_process_frames(self) -> 'int': ...
    def get_main_loop(self) -> 'MainLoop': ...
    def get_version_info(self) -> 'Dictionary': ...
    def get_author_info(self) -> 'Dictionary': ...
    def get_copyright_info(self) -> 'Array'['Dictionary']: ...
    def get_donor_info(self) -> 'Dictionary': ...
    def get_license_info(self) -> 'Dictionary': ...
    def get_license_text(self) -> 'str': ...
    def get_architecture_name(self) -> 'str': ...
    def is_in_physics_frame(self) -> 'bool': ...
    def has_singleton(self, name: 'StringName') -> 'bool': ...
    def get_singleton(self, name: 'StringName') -> 'Object': ...
    def register_singleton(self, name: 'StringName', instance: 'Object') -> None: ...
    def unregister_singleton(self, name: 'StringName') -> None: ...
    def get_singleton_list(self) -> 'PackedStringArray': ...
    def register_script_language(self, language: 'ScriptLanguage') -> 'Error': ...
    def unregister_script_language(self, language: 'ScriptLanguage') -> 'Error': ...
    def get_script_language_count(self) -> 'int': ...
    def get_script_language(self, index: 'int') -> 'ScriptLanguage': ...
    def is_editor_hint(self) -> 'bool': ...
    def is_embedded_in_editor(self) -> 'bool': ...
    def get_write_movie_path(self) -> 'str': ...
    def set_print_to_stdout(self, enabled: 'bool') -> None: ...
    def is_printing_to_stdout(self) -> 'bool': ...
    def set_print_error_messages(self, enabled: 'bool') -> None: ...
    def is_printing_error_messages(self) -> 'bool': ...


class EngineDebugger(Object):



    def is_active(self) -> 'bool': ...
    def register_profiler(self, name: 'StringName', profiler: 'EngineProfiler') -> None: ...
    def unregister_profiler(self, name: 'StringName') -> None: ...
    def is_profiling(self, name: 'StringName') -> 'bool': ...
    def has_profiler(self, name: 'StringName') -> 'bool': ...
    def profiler_add_frame_data(self, name: 'StringName', data: 'Array') -> None: ...
    def profiler_enable(self, name: 'StringName', enable: 'bool', arguments: 'Array' = default('''[]''')) -> None: ...
    def register_message_capture(self, name: 'StringName', callable: 'Callable') -> None: ...
    def unregister_message_capture(self, name: 'StringName') -> None: ...
    def has_capture(self, name: 'StringName') -> 'bool': ...
    def line_poll(self) -> None: ...
    def send_message(self, message: 'str', data: 'Array') -> None: ...
    def debug(self, can_continue: 'bool' = True, is_error_breakpoint: 'bool' = False) -> None: ...
    def script_debug(self, language: 'ScriptLanguage', can_continue: 'bool' = True, is_error_breakpoint: 'bool' = False) -> None: ...
    def set_lines_left(self, lines: 'int') -> None: ...
    def get_lines_left(self) -> 'int': ...
    def set_depth(self, depth: 'int') -> None: ...
    def get_depth(self) -> 'int': ...
    def is_breakpoint(self, line: 'int', source: 'StringName') -> 'bool': ...
    def is_skipping_breakpoints(self) -> 'bool': ...
    def insert_breakpoint(self, line: 'int', source: 'StringName') -> None: ...
    def remove_breakpoint(self, line: 'int', source: 'StringName') -> None: ...
    def clear_breakpoints(self) -> None: ...


class EngineProfiler(RefCounted):



    def _toggle(self, enable: 'bool', options: 'Array') -> None: ...
    def _add_frame(self, data: 'Array') -> None: ...
    def _tick(self, frame_time: 'float', process_time: 'float', physics_time: 'float', physics_frame_time: 'float') -> None: ...


class Environment(Resource):


    background_mode: 'int'
    background_color: 'Color'
    background_energy_multiplier: 'float'
    background_intensity: 'float'
    background_canvas_max_layer: 'int'
    background_camera_feed_id: 'int'
    sky: 'Sky'
    sky_custom_fov: 'float'
    sky_rotation: 'Vector3'
    ambient_light_source: 'int'
    ambient_light_color: 'Color'
    ambient_light_sky_contribution: 'float'
    ambient_light_energy: 'float'
    reflected_light_source: 'int'
    tonemap_mode: 'int'
    tonemap_exposure: 'float'
    tonemap_white: 'float'
    ssr_enabled: 'bool'
    ssr_max_steps: 'int'
    ssr_fade_in: 'float'
    ssr_fade_out: 'float'
    ssr_depth_tolerance: 'float'
    ssao_enabled: 'bool'
    ssao_radius: 'float'
    ssao_intensity: 'float'
    ssao_power: 'float'
    ssao_detail: 'float'
    ssao_horizon: 'float'
    ssao_sharpness: 'float'
    ssao_light_affect: 'float'
    ssao_ao_channel_affect: 'float'
    ssil_enabled: 'bool'
    ssil_radius: 'float'
    ssil_intensity: 'float'
    ssil_sharpness: 'float'
    ssil_normal_rejection: 'float'
    sdfgi_enabled: 'bool'
    sdfgi_use_occlusion: 'bool'
    sdfgi_read_sky_light: 'bool'
    sdfgi_bounce_feedback: 'float'
    sdfgi_cascades: 'int'
    sdfgi_min_cell_size: 'float'
    sdfgi_cascade0_distance: 'float'
    sdfgi_max_distance: 'float'
    sdfgi_y_scale: 'int'
    sdfgi_energy: 'float'
    sdfgi_normal_bias: 'float'
    sdfgi_probe_bias: 'float'
    glow_enabled: 'bool'
    glow_normalized: 'bool'
    glow_intensity: 'float'
    glow_strength: 'float'
    glow_mix: 'float'
    glow_bloom: 'float'
    glow_blend_mode: 'int'
    glow_hdr_threshold: 'float'
    glow_hdr_scale: 'float'
    glow_hdr_luminance_cap: 'float'
    glow_map_strength: 'float'
    glow_map: 'Texture2D'
    fog_enabled: 'bool'
    fog_mode: 'int'
    fog_light_color: 'Color'
    fog_light_energy: 'float'
    fog_sun_scatter: 'float'
    fog_density: 'float'
    fog_aerial_perspective: 'float'
    fog_sky_affect: 'float'
    fog_height: 'float'
    fog_height_density: 'float'
    fog_depth_curve: 'float'
    fog_depth_begin: 'float'
    fog_depth_end: 'float'
    volumetric_fog_enabled: 'bool'
    volumetric_fog_density: 'float'
    volumetric_fog_albedo: 'Color'
    volumetric_fog_emission: 'Color'
    volumetric_fog_emission_energy: 'float'
    volumetric_fog_gi_inject: 'float'
    volumetric_fog_anisotropy: 'float'
    volumetric_fog_length: 'float'
    volumetric_fog_detail_spread: 'float'
    volumetric_fog_ambient_inject: 'float'
    volumetric_fog_sky_affect: 'float'
    volumetric_fog_temporal_reprojection_enabled: 'bool'
    volumetric_fog_temporal_reprojection_amount: 'float'
    adjustment_enabled: 'bool'
    adjustment_brightness: 'float'
    adjustment_contrast: 'float'
    adjustment_saturation: 'float'
    adjustment_color_correction: 'Texture2D' | 'Texture3D'

    def set_background(self, mode: 'Environment__BGMode') -> None: ...
    def get_background(self) -> 'Environment__BGMode': ...
    def set_sky(self, sky: 'Sky') -> None: ...
    def get_sky(self) -> 'Sky': ...
    def set_sky_custom_fov(self, scale: 'float') -> None: ...
    def get_sky_custom_fov(self) -> 'float': ...
    def set_sky_rotation(self, euler_radians: 'Vector3') -> None: ...
    def get_sky_rotation(self) -> 'Vector3': ...
    def set_bg_color(self, color: 'Color') -> None: ...
    def get_bg_color(self) -> 'Color': ...
    def set_bg_energy_multiplier(self, energy: 'float') -> None: ...
    def get_bg_energy_multiplier(self) -> 'float': ...
    def set_bg_intensity(self, energy: 'float') -> None: ...
    def get_bg_intensity(self) -> 'float': ...
    def set_canvas_max_layer(self, layer: 'int') -> None: ...
    def get_canvas_max_layer(self) -> 'int': ...
    def set_camera_feed_id(self, id: 'int') -> None: ...
    def get_camera_feed_id(self) -> 'int': ...
    def set_ambient_light_color(self, color: 'Color') -> None: ...
    def get_ambient_light_color(self) -> 'Color': ...
    def set_ambient_source(self, source: 'Environment__AmbientSource') -> None: ...
    def get_ambient_source(self) -> 'Environment__AmbientSource': ...
    def set_ambient_light_energy(self, energy: 'float') -> None: ...
    def get_ambient_light_energy(self) -> 'float': ...
    def set_ambient_light_sky_contribution(self, ratio: 'float') -> None: ...
    def get_ambient_light_sky_contribution(self) -> 'float': ...
    def set_reflection_source(self, source: 'Environment__ReflectionSource') -> None: ...
    def get_reflection_source(self) -> 'Environment__ReflectionSource': ...
    def set_tonemapper(self, mode: 'Environment__ToneMapper') -> None: ...
    def get_tonemapper(self) -> 'Environment__ToneMapper': ...
    def set_tonemap_exposure(self, exposure: 'float') -> None: ...
    def get_tonemap_exposure(self) -> 'float': ...
    def set_tonemap_white(self, white: 'float') -> None: ...
    def get_tonemap_white(self) -> 'float': ...
    def set_ssr_enabled(self, enabled: 'bool') -> None: ...
    def is_ssr_enabled(self) -> 'bool': ...
    def set_ssr_max_steps(self, max_steps: 'int') -> None: ...
    def get_ssr_max_steps(self) -> 'int': ...
    def set_ssr_fade_in(self, fade_in: 'float') -> None: ...
    def get_ssr_fade_in(self) -> 'float': ...
    def set_ssr_fade_out(self, fade_out: 'float') -> None: ...
    def get_ssr_fade_out(self) -> 'float': ...
    def set_ssr_depth_tolerance(self, depth_tolerance: 'float') -> None: ...
    def get_ssr_depth_tolerance(self) -> 'float': ...
    def set_ssao_enabled(self, enabled: 'bool') -> None: ...
    def is_ssao_enabled(self) -> 'bool': ...
    def set_ssao_radius(self, radius: 'float') -> None: ...
    def get_ssao_radius(self) -> 'float': ...
    def set_ssao_intensity(self, intensity: 'float') -> None: ...
    def get_ssao_intensity(self) -> 'float': ...
    def set_ssao_power(self, power: 'float') -> None: ...
    def get_ssao_power(self) -> 'float': ...
    def set_ssao_detail(self, detail: 'float') -> None: ...
    def get_ssao_detail(self) -> 'float': ...
    def set_ssao_horizon(self, horizon: 'float') -> None: ...
    def get_ssao_horizon(self) -> 'float': ...
    def set_ssao_sharpness(self, sharpness: 'float') -> None: ...
    def get_ssao_sharpness(self) -> 'float': ...
    def set_ssao_direct_light_affect(self, amount: 'float') -> None: ...
    def get_ssao_direct_light_affect(self) -> 'float': ...
    def set_ssao_ao_channel_affect(self, amount: 'float') -> None: ...
    def get_ssao_ao_channel_affect(self) -> 'float': ...
    def set_ssil_enabled(self, enabled: 'bool') -> None: ...
    def is_ssil_enabled(self) -> 'bool': ...
    def set_ssil_radius(self, radius: 'float') -> None: ...
    def get_ssil_radius(self) -> 'float': ...
    def set_ssil_intensity(self, intensity: 'float') -> None: ...
    def get_ssil_intensity(self) -> 'float': ...
    def set_ssil_sharpness(self, sharpness: 'float') -> None: ...
    def get_ssil_sharpness(self) -> 'float': ...
    def set_ssil_normal_rejection(self, normal_rejection: 'float') -> None: ...
    def get_ssil_normal_rejection(self) -> 'float': ...
    def set_sdfgi_enabled(self, enabled: 'bool') -> None: ...
    def is_sdfgi_enabled(self) -> 'bool': ...
    def set_sdfgi_cascades(self, amount: 'int') -> None: ...
    def get_sdfgi_cascades(self) -> 'int': ...
    def set_sdfgi_min_cell_size(self, size: 'float') -> None: ...
    def get_sdfgi_min_cell_size(self) -> 'float': ...
    def set_sdfgi_max_distance(self, distance: 'float') -> None: ...
    def get_sdfgi_max_distance(self) -> 'float': ...
    def set_sdfgi_cascade0_distance(self, distance: 'float') -> None: ...
    def get_sdfgi_cascade0_distance(self) -> 'float': ...
    def set_sdfgi_y_scale(self, scale: 'Environment__SDFGIYScale') -> None: ...
    def get_sdfgi_y_scale(self) -> 'Environment__SDFGIYScale': ...
    def set_sdfgi_use_occlusion(self, enable: 'bool') -> None: ...
    def is_sdfgi_using_occlusion(self) -> 'bool': ...
    def set_sdfgi_bounce_feedback(self, amount: 'float') -> None: ...
    def get_sdfgi_bounce_feedback(self) -> 'float': ...
    def set_sdfgi_read_sky_light(self, enable: 'bool') -> None: ...
    def is_sdfgi_reading_sky_light(self) -> 'bool': ...
    def set_sdfgi_energy(self, amount: 'float') -> None: ...
    def get_sdfgi_energy(self) -> 'float': ...
    def set_sdfgi_normal_bias(self, bias: 'float') -> None: ...
    def get_sdfgi_normal_bias(self) -> 'float': ...
    def set_sdfgi_probe_bias(self, bias: 'float') -> None: ...
    def get_sdfgi_probe_bias(self) -> 'float': ...
    def set_glow_enabled(self, enabled: 'bool') -> None: ...
    def is_glow_enabled(self) -> 'bool': ...
    def set_glow_level(self, idx: 'int', intensity: 'float') -> None: ...
    def get_glow_level(self, idx: 'int') -> 'float': ...
    def set_glow_normalized(self, normalize: 'bool') -> None: ...
    def is_glow_normalized(self) -> 'bool': ...
    def set_glow_intensity(self, intensity: 'float') -> None: ...
    def get_glow_intensity(self) -> 'float': ...
    def set_glow_strength(self, strength: 'float') -> None: ...
    def get_glow_strength(self) -> 'float': ...
    def set_glow_mix(self, mix: 'float') -> None: ...
    def get_glow_mix(self) -> 'float': ...
    def set_glow_bloom(self, amount: 'float') -> None: ...
    def get_glow_bloom(self) -> 'float': ...
    def set_glow_blend_mode(self, mode: 'Environment__GlowBlendMode') -> None: ...
    def get_glow_blend_mode(self) -> 'Environment__GlowBlendMode': ...
    def set_glow_hdr_bleed_threshold(self, threshold: 'float') -> None: ...
    def get_glow_hdr_bleed_threshold(self) -> 'float': ...
    def set_glow_hdr_bleed_scale(self, scale: 'float') -> None: ...
    def get_glow_hdr_bleed_scale(self) -> 'float': ...
    def set_glow_hdr_luminance_cap(self, amount: 'float') -> None: ...
    def get_glow_hdr_luminance_cap(self) -> 'float': ...
    def set_glow_map_strength(self, strength: 'float') -> None: ...
    def get_glow_map_strength(self) -> 'float': ...
    def set_glow_map(self, mode: 'Texture') -> None: ...
    def get_glow_map(self) -> 'Texture': ...
    def set_fog_enabled(self, enabled: 'bool') -> None: ...
    def is_fog_enabled(self) -> 'bool': ...
    def set_fog_mode(self, mode: 'Environment__FogMode') -> None: ...
    def get_fog_mode(self) -> 'Environment__FogMode': ...
    def set_fog_light_color(self, light_color: 'Color') -> None: ...
    def get_fog_light_color(self) -> 'Color': ...
    def set_fog_light_energy(self, light_energy: 'float') -> None: ...
    def get_fog_light_energy(self) -> 'float': ...
    def set_fog_sun_scatter(self, sun_scatter: 'float') -> None: ...
    def get_fog_sun_scatter(self) -> 'float': ...
    def set_fog_density(self, density: 'float') -> None: ...
    def get_fog_density(self) -> 'float': ...
    def set_fog_height(self, height: 'float') -> None: ...
    def get_fog_height(self) -> 'float': ...
    def set_fog_height_density(self, height_density: 'float') -> None: ...
    def get_fog_height_density(self) -> 'float': ...
    def set_fog_aerial_perspective(self, aerial_perspective: 'float') -> None: ...
    def get_fog_aerial_perspective(self) -> 'float': ...
    def set_fog_sky_affect(self, sky_affect: 'float') -> None: ...
    def get_fog_sky_affect(self) -> 'float': ...
    def set_fog_depth_curve(self, curve: 'float') -> None: ...
    def get_fog_depth_curve(self) -> 'float': ...
    def set_fog_depth_begin(self, begin: 'float') -> None: ...
    def get_fog_depth_begin(self) -> 'float': ...
    def set_fog_depth_end(self, end: 'float') -> None: ...
    def get_fog_depth_end(self) -> 'float': ...
    def set_volumetric_fog_enabled(self, enabled: 'bool') -> None: ...
    def is_volumetric_fog_enabled(self) -> 'bool': ...
    def set_volumetric_fog_emission(self, color: 'Color') -> None: ...
    def get_volumetric_fog_emission(self) -> 'Color': ...
    def set_volumetric_fog_albedo(self, color: 'Color') -> None: ...
    def get_volumetric_fog_albedo(self) -> 'Color': ...
    def set_volumetric_fog_density(self, density: 'float') -> None: ...
    def get_volumetric_fog_density(self) -> 'float': ...
    def set_volumetric_fog_emission_energy(self, begin: 'float') -> None: ...
    def get_volumetric_fog_emission_energy(self) -> 'float': ...
    def set_volumetric_fog_anisotropy(self, anisotropy: 'float') -> None: ...
    def get_volumetric_fog_anisotropy(self) -> 'float': ...
    def set_volumetric_fog_length(self, length: 'float') -> None: ...
    def get_volumetric_fog_length(self) -> 'float': ...
    def set_volumetric_fog_detail_spread(self, detail_spread: 'float') -> None: ...
    def get_volumetric_fog_detail_spread(self) -> 'float': ...
    def set_volumetric_fog_gi_inject(self, gi_inject: 'float') -> None: ...
    def get_volumetric_fog_gi_inject(self) -> 'float': ...
    def set_volumetric_fog_ambient_inject(self, enabled: 'float') -> None: ...
    def get_volumetric_fog_ambient_inject(self) -> 'float': ...
    def set_volumetric_fog_sky_affect(self, sky_affect: 'float') -> None: ...
    def get_volumetric_fog_sky_affect(self) -> 'float': ...
    def set_volumetric_fog_temporal_reprojection_enabled(self, enabled: 'bool') -> None: ...
    def is_volumetric_fog_temporal_reprojection_enabled(self) -> 'bool': ...
    def set_volumetric_fog_temporal_reprojection_amount(self, temporal_reprojection_amount: 'float') -> None: ...
    def get_volumetric_fog_temporal_reprojection_amount(self) -> 'float': ...
    def set_adjustment_enabled(self, enabled: 'bool') -> None: ...
    def is_adjustment_enabled(self) -> 'bool': ...
    def set_adjustment_brightness(self, brightness: 'float') -> None: ...
    def get_adjustment_brightness(self) -> 'float': ...
    def set_adjustment_contrast(self, contrast: 'float') -> None: ...
    def get_adjustment_contrast(self) -> 'float': ...
    def set_adjustment_saturation(self, saturation: 'float') -> None: ...
    def get_adjustment_saturation(self) -> 'float': ...
    def set_adjustment_color_correction(self, color_correction: 'Texture') -> None: ...
    def get_adjustment_color_correction(self) -> 'Texture': ...


class Expression(RefCounted):



    def parse(self, expression: 'str', input_names: 'PackedStringArray' = default('''PackedStringArray()''')) -> 'Error': ...
    def execute(self, inputs: 'Array' = default('''[]'''), base_instance: 'Object' = default('''null'''), show_error: 'bool' = True, const_calls_only: 'bool' = False) -> 'Variant': ...
    def has_execute_failed(self) -> 'bool': ...
    def get_error_text(self) -> 'str': ...


class ExternalTexture(Texture2D):


    size: 'Vector2'

    def set_size(self, size: 'Vector2') -> None: ...
    def get_external_texture_id(self) -> 'int': ...
    def set_external_buffer_id(self, external_buffer_id: 'int') -> None: ...


class FBXDocument(GLTFDocument): ...


class FBXState(GLTFState):


    allow_geometry_helper_nodes: 'bool'

    def get_allow_geometry_helper_nodes(self) -> 'bool': ...
    def set_allow_geometry_helper_nodes(self, allow: 'bool') -> None: ...


class FastNoiseLite(Noise):


    noise_type: 'int'
    seed: 'int'
    frequency: 'float'
    offset: 'Vector3'
    fractal_type: 'int'
    fractal_octaves: 'int'
    fractal_lacunarity: 'float'
    fractal_gain: 'float'
    fractal_weighted_strength: 'float'
    fractal_ping_pong_strength: 'float'
    cellular_distance_function: 'int'
    cellular_jitter: 'float'
    cellular_return_type: 'int'
    domain_warp_enabled: 'bool'
    domain_warp_type: 'int'
    domain_warp_amplitude: 'float'
    domain_warp_frequency: 'float'
    domain_warp_fractal_type: 'int'
    domain_warp_fractal_octaves: 'int'
    domain_warp_fractal_lacunarity: 'float'
    domain_warp_fractal_gain: 'float'

    def set_noise_type(self, type: 'FastNoiseLite__NoiseType') -> None: ...
    def get_noise_type(self) -> 'FastNoiseLite__NoiseType': ...
    def set_seed(self, seed: 'int') -> None: ...
    def get_seed(self) -> 'int': ...
    def set_frequency(self, freq: 'float') -> None: ...
    def get_frequency(self) -> 'float': ...
    def set_offset(self, offset: 'Vector3') -> None: ...
    def get_offset(self) -> 'Vector3': ...
    def set_fractal_type(self, type: 'FastNoiseLite__FractalType') -> None: ...
    def get_fractal_type(self) -> 'FastNoiseLite__FractalType': ...
    def set_fractal_octaves(self, octave_count: 'int') -> None: ...
    def get_fractal_octaves(self) -> 'int': ...
    def set_fractal_lacunarity(self, lacunarity: 'float') -> None: ...
    def get_fractal_lacunarity(self) -> 'float': ...
    def set_fractal_gain(self, gain: 'float') -> None: ...
    def get_fractal_gain(self) -> 'float': ...
    def set_fractal_weighted_strength(self, weighted_strength: 'float') -> None: ...
    def get_fractal_weighted_strength(self) -> 'float': ...
    def set_fractal_ping_pong_strength(self, ping_pong_strength: 'float') -> None: ...
    def get_fractal_ping_pong_strength(self) -> 'float': ...
    def set_cellular_distance_function(self, func: 'FastNoiseLite__CellularDistanceFunction') -> None: ...
    def get_cellular_distance_function(self) -> 'FastNoiseLite__CellularDistanceFunction': ...
    def set_cellular_jitter(self, jitter: 'float') -> None: ...
    def get_cellular_jitter(self) -> 'float': ...
    def set_cellular_return_type(self, ret: 'FastNoiseLite__CellularReturnType') -> None: ...
    def get_cellular_return_type(self) -> 'FastNoiseLite__CellularReturnType': ...
    def set_domain_warp_enabled(self, domain_warp_enabled: 'bool') -> None: ...
    def is_domain_warp_enabled(self) -> 'bool': ...
    def set_domain_warp_type(self, domain_warp_type: 'FastNoiseLite__DomainWarpType') -> None: ...
    def get_domain_warp_type(self) -> 'FastNoiseLite__DomainWarpType': ...
    def set_domain_warp_amplitude(self, domain_warp_amplitude: 'float') -> None: ...
    def get_domain_warp_amplitude(self) -> 'float': ...
    def set_domain_warp_frequency(self, domain_warp_frequency: 'float') -> None: ...
    def get_domain_warp_frequency(self) -> 'float': ...
    def set_domain_warp_fractal_type(self, domain_warp_fractal_type: 'FastNoiseLite__DomainWarpFractalType') -> None: ...
    def get_domain_warp_fractal_type(self) -> 'FastNoiseLite__DomainWarpFractalType': ...
    def set_domain_warp_fractal_octaves(self, domain_warp_octave_count: 'int') -> None: ...
    def get_domain_warp_fractal_octaves(self) -> 'int': ...
    def set_domain_warp_fractal_lacunarity(self, domain_warp_lacunarity: 'float') -> None: ...
    def get_domain_warp_fractal_lacunarity(self) -> 'float': ...
    def set_domain_warp_fractal_gain(self, domain_warp_gain: 'float') -> None: ...
    def get_domain_warp_fractal_gain(self) -> 'float': ...


class FileAccess(RefCounted):


    big_endian: 'bool'

    @staticmethod
    def open(path: 'str', flags: 'FileAccess__ModeFlags') -> 'FileAccess': ...
    @staticmethod
    def open_encrypted(path: 'str', mode_flags: 'FileAccess__ModeFlags', key: 'PackedByteArray', iv: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'FileAccess': ...
    @staticmethod
    def open_encrypted_with_pass(path: 'str', mode_flags: 'FileAccess__ModeFlags', pass_: 'str') -> 'FileAccess': ...
    @staticmethod
    def open_compressed(path: 'str', mode_flags: 'FileAccess__ModeFlags', compression_mode: 'FileAccess__CompressionMode' = 0) -> 'FileAccess': ...
    @staticmethod
    def get_open_error() -> 'Error': ...
    @staticmethod
    def create_temp(mode_flags: 'int', prefix: 'str' = "", extension: 'str' = "", keep: 'bool' = False) -> 'FileAccess': ...
    @staticmethod
    def get_file_as_bytes(path: 'str') -> 'PackedByteArray': ...
    @staticmethod
    def get_file_as_string(path: 'str') -> 'str': ...
    def resize(self, length: 'int') -> 'Error': ...
    def flush(self) -> None: ...
    def get_path(self) -> 'str': ...
    def get_path_absolute(self) -> 'str': ...
    def is_open(self) -> 'bool': ...
    def seek(self, position: 'int') -> None: ...
    def seek_end(self, position: 'int' = 0) -> None: ...
    def get_position(self) -> 'int': ...
    def get_length(self) -> 'int': ...
    def eof_reached(self) -> 'bool': ...
    def get_8(self) -> 'int': ...
    def get_16(self) -> 'int': ...
    def get_32(self) -> 'int': ...
    def get_64(self) -> 'int': ...
    def get_half(self) -> 'float': ...
    def get_float(self) -> 'float': ...
    def get_double(self) -> 'float': ...
    def get_real(self) -> 'float': ...
    def get_buffer(self, length: 'int') -> 'PackedByteArray': ...
    def get_line(self) -> 'str': ...
    def get_csv_line(self, delim: 'str' = ",") -> 'PackedStringArray': ...
    def get_as_text(self, skip_cr: 'bool' = False) -> 'str': ...
    @staticmethod
    def get_md5(path: 'str') -> 'str': ...
    @staticmethod
    def get_sha256(path: 'str') -> 'str': ...
    def is_big_endian(self) -> 'bool': ...
    def set_big_endian(self, big_endian: 'bool') -> None: ...
    def get_error(self) -> 'Error': ...
    def get_var(self, allow_objects: 'bool' = False) -> 'Variant': ...
    def store_8(self, value: 'int') -> 'bool': ...
    def store_16(self, value: 'int') -> 'bool': ...
    def store_32(self, value: 'int') -> 'bool': ...
    def store_64(self, value: 'int') -> 'bool': ...
    def store_half(self, value: 'float') -> 'bool': ...
    def store_float(self, value: 'float') -> 'bool': ...
    def store_double(self, value: 'float') -> 'bool': ...
    def store_real(self, value: 'float') -> 'bool': ...
    def store_buffer(self, buffer: 'PackedByteArray') -> 'bool': ...
    def store_line(self, line: 'str') -> 'bool': ...
    def store_csv_line(self, values: 'PackedStringArray', delim: 'str' = ",") -> 'bool': ...
    def store_string(self, string: 'str') -> 'bool': ...
    def store_var(self, value: 'Variant', full_objects: 'bool' = False) -> 'bool': ...
    def store_pascal_string(self, string: 'str') -> 'bool': ...
    def get_pascal_string(self) -> 'str': ...
    def close(self) -> None: ...
    @staticmethod
    def file_exists(path: 'str') -> 'bool': ...
    @staticmethod
    def get_modified_time(file: 'str') -> 'int': ...
    @staticmethod
    def get_unix_permissions(file: 'str') -> 'FileAccess__UnixPermissionFlags': ...
    @staticmethod
    def set_unix_permissions(file: 'str', permissions: 'FileAccess__UnixPermissionFlags') -> 'Error': ...
    @staticmethod
    def get_hidden_attribute(file: 'str') -> 'bool': ...
    @staticmethod
    def set_hidden_attribute(file: 'str', hidden: 'bool') -> 'Error': ...
    @staticmethod
    def set_read_only_attribute(file: 'str', ro: 'bool') -> 'Error': ...
    @staticmethod
    def get_read_only_attribute(file: 'str') -> 'bool': ...


class FileDialog(ConfirmationDialog):


    mode_overrides_title: 'bool'
    file_mode: 'int'
    access: 'int'
    root_subfolder: 'str'
    filters: 'PackedStringArray'
    filename_filter: 'str'
    option_count: 'int'
    show_hidden_files: 'bool'
    use_native_dialog: 'bool'
    current_dir: 'str'
    current_file: 'str'
    current_path: 'str'
    file_selected: 'Signal[Callable[[str], None]]'  # file_selected(path: String)
    files_selected: 'Signal[Callable[[PackedStringArray], None]]'  # files_selected(paths: PackedStringArray)
    dir_selected: 'Signal[Callable[[str], None]]'  # dir_selected(dir: String)
    filename_filter_changed: 'Signal[Callable[[str], None]]'  # filename_filter_changed(filter: String)

    def clear_filters(self) -> None: ...
    def add_filter(self, filter: 'str', description: 'str' = "") -> None: ...
    def set_filters(self, filters: 'PackedStringArray') -> None: ...
    def get_filters(self) -> 'PackedStringArray': ...
    def clear_filename_filter(self) -> None: ...
    def set_filename_filter(self, filter: 'str') -> None: ...
    def get_filename_filter(self) -> 'str': ...
    def get_option_name(self, option: 'int') -> 'str': ...
    def get_option_values(self, option: 'int') -> 'PackedStringArray': ...
    def get_option_default(self, option: 'int') -> 'int': ...
    def set_option_name(self, option: 'int', name: 'str') -> None: ...
    def set_option_values(self, option: 'int', values: 'PackedStringArray') -> None: ...
    def set_option_default(self, option: 'int', default_value_index: 'int') -> None: ...
    def set_option_count(self, count: 'int') -> None: ...
    def get_option_count(self) -> 'int': ...
    def add_option(self, name: 'str', values: 'PackedStringArray', default_value_index: 'int') -> None: ...
    def get_selected_options(self) -> 'Dictionary': ...
    def get_current_dir(self) -> 'str': ...
    def get_current_file(self) -> 'str': ...
    def get_current_path(self) -> 'str': ...
    def set_current_dir(self, dir: 'str') -> None: ...
    def set_current_file(self, file: 'str') -> None: ...
    def set_current_path(self, path: 'str') -> None: ...
    def set_mode_overrides_title(self, override: 'bool') -> None: ...
    def is_mode_overriding_title(self) -> 'bool': ...
    def set_file_mode(self, mode: 'FileDialog__FileMode') -> None: ...
    def get_file_mode(self) -> 'FileDialog__FileMode': ...
    def get_vbox(self) -> 'VBoxContainer': ...
    def get_line_edit(self) -> 'LineEdit': ...
    def set_access(self, access: 'FileDialog__Access') -> None: ...
    def get_access(self) -> 'FileDialog__Access': ...
    def set_root_subfolder(self, dir: 'str') -> None: ...
    def get_root_subfolder(self) -> 'str': ...
    def set_show_hidden_files(self, show: 'bool') -> None: ...
    def is_showing_hidden_files(self) -> 'bool': ...
    def set_use_native_dialog(self, native: 'bool') -> None: ...
    def get_use_native_dialog(self) -> 'bool': ...
    def deselect_all(self) -> None: ...
    def invalidate(self) -> None: ...


class FileSystemDock(VBoxContainer):


    inherit: 'Signal[Callable[[str], None]]'  # inherit(file: String)
    instantiate: 'Signal[Callable[[PackedStringArray], None]]'  # instantiate(files: PackedStringArray)
    resource_removed: 'Signal[Callable[[Resource], None]]'  # resource_removed(resource: Resource)
    file_removed: 'Signal[Callable[[str], None]]'  # file_removed(file: String)
    folder_removed: 'Signal[Callable[[str], None]]'  # folder_removed(folder: String)
    files_moved: 'Signal[Callable[[str, str], None]]'  # files_moved(old_file: String, new_file: String)
    folder_moved: 'Signal[Callable[[str, str], None]]'  # folder_moved(old_folder: String, new_folder: String)
    folder_color_changed: 'Signal[Callable[[], None]]'  # folder_color_changed()
    display_mode_changed: 'Signal[Callable[[], None]]'  # display_mode_changed()

    def navigate_to_path(self, path: 'str') -> None: ...
    def add_resource_tooltip_plugin(self, plugin: 'EditorResourceTooltipPlugin') -> None: ...
    def remove_resource_tooltip_plugin(self, plugin: 'EditorResourceTooltipPlugin') -> None: ...


class FlowContainer(Container):


    alignment: 'int'
    last_wrap_alignment: 'int'
    vertical: 'bool'
    reverse_fill: 'bool'

    def get_line_count(self) -> 'int': ...
    def set_alignment(self, alignment: 'FlowContainer__AlignmentMode') -> None: ...
    def get_alignment(self) -> 'FlowContainer__AlignmentMode': ...
    def set_last_wrap_alignment(self, last_wrap_alignment: 'FlowContainer__LastWrapAlignmentMode') -> None: ...
    def get_last_wrap_alignment(self) -> 'FlowContainer__LastWrapAlignmentMode': ...
    def set_vertical(self, vertical: 'bool') -> None: ...
    def is_vertical(self) -> 'bool': ...
    def set_reverse_fill(self, reverse_fill: 'bool') -> None: ...
    def is_reverse_fill(self) -> 'bool': ...


class FogMaterial(Material):


    density: 'float'
    albedo: 'Color'
    emission: 'Color'
    height_falloff: 'float'
    edge_fade: 'float'
    density_texture: 'Texture3D'

    def set_density(self, density: 'float') -> None: ...
    def get_density(self) -> 'float': ...
    def set_albedo(self, albedo: 'Color') -> None: ...
    def get_albedo(self) -> 'Color': ...
    def set_emission(self, emission: 'Color') -> None: ...
    def get_emission(self) -> 'Color': ...
    def set_height_falloff(self, height_falloff: 'float') -> None: ...
    def get_height_falloff(self) -> 'float': ...
    def set_edge_fade(self, edge_fade: 'float') -> None: ...
    def get_edge_fade(self) -> 'float': ...
    def set_density_texture(self, density_texture: 'Texture3D') -> None: ...
    def get_density_texture(self) -> 'Texture3D': ...


class FogVolume(VisualInstance3D):


    size: 'Vector3'
    shape: 'int'
    material: 'FogMaterial' | 'ShaderMaterial'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_shape(self, shape: 'RenderingServer__FogVolumeShape') -> None: ...
    def get_shape(self) -> 'RenderingServer__FogVolumeShape': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...


class Font(Resource):


    fallbacks: 'Array'['Font']

    def set_fallbacks(self, fallbacks: 'Array'['Font']) -> None: ...
    def get_fallbacks(self) -> 'Array'['Font']: ...
    def find_variation(self, variation_coordinates: 'Dictionary', face_index: 'int' = 0, strength: 'float' = 0.0, transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), spacing_top: 'int' = 0, spacing_bottom: 'int' = 0, spacing_space: 'int' = 0, spacing_glyph: 'int' = 0, baseline_offset: 'float' = 0.0) -> 'RID': ...
    def get_rids(self) -> 'Array'['RID']: ...
    def get_height(self, font_size: 'int' = 16) -> 'float': ...
    def get_ascent(self, font_size: 'int' = 16) -> 'float': ...
    def get_descent(self, font_size: 'int' = 16) -> 'float': ...
    def get_underline_position(self, font_size: 'int' = 16) -> 'float': ...
    def get_underline_thickness(self, font_size: 'int' = 16) -> 'float': ...
    def get_font_name(self) -> 'str': ...
    def get_font_style_name(self) -> 'str': ...
    def get_ot_name_strings(self) -> 'Dictionary': ...
    def get_font_style(self) -> 'TextServer__FontStyle': ...
    def get_font_weight(self) -> 'int': ...
    def get_font_stretch(self) -> 'int': ...
    def get_spacing(self, spacing: 'TextServer__SpacingType') -> 'int': ...
    def get_opentype_features(self) -> 'Dictionary': ...
    def set_cache_capacity(self, single_line: 'int', multi_line: 'int') -> None: ...
    def get_string_size(self, text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> 'Vector2': ...
    def get_multiline_string_size(self, text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, max_lines: 'int' = -1, brk_flags: 'TextServer__LineBreakFlag' = 3, justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> 'Vector2': ...
    def draw_string(self, canvas_item: 'RID', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_multiline_string(self, canvas_item: 'RID', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, max_lines: 'int' = -1, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer__LineBreakFlag' = 3, justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_string_outline(self, canvas_item: 'RID', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, size: 'int' = 1, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def draw_multiline_string_outline(self, canvas_item: 'RID', pos: 'Vector2', text: 'str', alignment: 'HorizontalAlignment' = 0, width: 'float' = -1, font_size: 'int' = 16, max_lines: 'int' = -1, size: 'int' = 1, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), brk_flags: 'TextServer__LineBreakFlag' = 3, justification_flags: 'TextServer__JustificationFlag' = 3, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> None: ...
    def get_char_size(self, char: 'int', font_size: 'int') -> 'Vector2': ...
    def draw_char(self, canvas_item: 'RID', pos: 'Vector2', char: 'int', font_size: 'int', modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> 'float': ...
    def draw_char_outline(self, canvas_item: 'RID', pos: 'Vector2', char: 'int', font_size: 'int', size: 'int' = -1, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> 'float': ...
    def has_char(self, char: 'int') -> 'bool': ...
    def get_supported_chars(self) -> 'str': ...
    def is_language_supported(self, language: 'str') -> 'bool': ...
    def is_script_supported(self, script: 'str') -> 'bool': ...
    def get_supported_feature_list(self) -> 'Dictionary': ...
    def get_supported_variation_list(self) -> 'Dictionary': ...
    def get_face_count(self) -> 'int': ...


class FontFile(Font):


    data: 'PackedByteArray'
    generate_mipmaps: 'bool'
    disable_embedded_bitmaps: 'bool'
    antialiasing: 'int'
    font_name: 'str'
    style_name: 'str'
    font_style: 'int'
    font_weight: 'int'
    font_stretch: 'int'
    subpixel_positioning: 'int'
    keep_rounding_remainders: 'bool'
    multichannel_signed_distance_field: 'bool'
    msdf_pixel_range: 'int'
    msdf_size: 'int'
    allow_system_fallback: 'bool'
    force_autohinter: 'bool'
    hinting: 'int'
    oversampling: 'float'
    fixed_size: 'int'
    fixed_size_scale_mode: 'int'
    opentype_feature_overrides: 'Dictionary'

    def load_bitmap_font(self, path: 'str') -> 'Error': ...
    def load_dynamic_font(self, path: 'str') -> 'Error': ...
    def set_data(self, data: 'PackedByteArray') -> None: ...
    def get_data(self) -> 'PackedByteArray': ...
    def set_font_name(self, name: 'str') -> None: ...
    def set_font_style_name(self, name: 'str') -> None: ...
    def set_font_style(self, style: 'TextServer__FontStyle') -> None: ...
    def set_font_weight(self, weight: 'int') -> None: ...
    def set_font_stretch(self, stretch: 'int') -> None: ...
    def set_antialiasing(self, antialiasing: 'TextServer__FontAntialiasing') -> None: ...
    def get_antialiasing(self) -> 'TextServer__FontAntialiasing': ...
    def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps: 'bool') -> None: ...
    def get_disable_embedded_bitmaps(self) -> 'bool': ...
    def set_generate_mipmaps(self, generate_mipmaps: 'bool') -> None: ...
    def get_generate_mipmaps(self) -> 'bool': ...
    def set_multichannel_signed_distance_field(self, msdf: 'bool') -> None: ...
    def is_multichannel_signed_distance_field(self) -> 'bool': ...
    def set_msdf_pixel_range(self, msdf_pixel_range: 'int') -> None: ...
    def get_msdf_pixel_range(self) -> 'int': ...
    def set_msdf_size(self, msdf_size: 'int') -> None: ...
    def get_msdf_size(self) -> 'int': ...
    def set_fixed_size(self, fixed_size: 'int') -> None: ...
    def get_fixed_size(self) -> 'int': ...
    def set_fixed_size_scale_mode(self, fixed_size_scale_mode: 'TextServer__FixedSizeScaleMode') -> None: ...
    def get_fixed_size_scale_mode(self) -> 'TextServer__FixedSizeScaleMode': ...
    def set_allow_system_fallback(self, allow_system_fallback: 'bool') -> None: ...
    def is_allow_system_fallback(self) -> 'bool': ...
    def set_force_autohinter(self, force_autohinter: 'bool') -> None: ...
    def is_force_autohinter(self) -> 'bool': ...
    def set_hinting(self, hinting: 'TextServer__Hinting') -> None: ...
    def get_hinting(self) -> 'TextServer__Hinting': ...
    def set_subpixel_positioning(self, subpixel_positioning: 'TextServer__SubpixelPositioning') -> None: ...
    def get_subpixel_positioning(self) -> 'TextServer__SubpixelPositioning': ...
    def set_keep_rounding_remainders(self, keep_rounding_remainders: 'bool') -> None: ...
    def get_keep_rounding_remainders(self) -> 'bool': ...
    def set_oversampling(self, oversampling: 'float') -> None: ...
    def get_oversampling(self) -> 'float': ...
    def get_cache_count(self) -> 'int': ...
    def clear_cache(self) -> None: ...
    def remove_cache(self, cache_index: 'int') -> None: ...
    def get_size_cache_list(self, cache_index: 'int') -> 'Array'['Vector2i']: ...
    def clear_size_cache(self, cache_index: 'int') -> None: ...
    def remove_size_cache(self, cache_index: 'int', size: 'Vector2i') -> None: ...
    def set_variation_coordinates(self, cache_index: 'int', variation_coordinates: 'Dictionary') -> None: ...
    def get_variation_coordinates(self, cache_index: 'int') -> 'Dictionary': ...
    def set_embolden(self, cache_index: 'int', strength: 'float') -> None: ...
    def get_embolden(self, cache_index: 'int') -> 'float': ...
    def set_transform(self, cache_index: 'int', transform: 'Transform2D') -> None: ...
    def get_transform(self, cache_index: 'int') -> 'Transform2D': ...
    def set_extra_spacing(self, cache_index: 'int', spacing: 'TextServer__SpacingType', value: 'int') -> None: ...
    def get_extra_spacing(self, cache_index: 'int', spacing: 'TextServer__SpacingType') -> 'int': ...
    def set_extra_baseline_offset(self, cache_index: 'int', baseline_offset: 'float') -> None: ...
    def get_extra_baseline_offset(self, cache_index: 'int') -> 'float': ...
    def set_face_index(self, cache_index: 'int', face_index: 'int') -> None: ...
    def get_face_index(self, cache_index: 'int') -> 'int': ...
    def set_cache_ascent(self, cache_index: 'int', size: 'int', ascent: 'float') -> None: ...
    def get_cache_ascent(self, cache_index: 'int', size: 'int') -> 'float': ...
    def set_cache_descent(self, cache_index: 'int', size: 'int', descent: 'float') -> None: ...
    def get_cache_descent(self, cache_index: 'int', size: 'int') -> 'float': ...
    def set_cache_underline_position(self, cache_index: 'int', size: 'int', underline_position: 'float') -> None: ...
    def get_cache_underline_position(self, cache_index: 'int', size: 'int') -> 'float': ...
    def set_cache_underline_thickness(self, cache_index: 'int', size: 'int', underline_thickness: 'float') -> None: ...
    def get_cache_underline_thickness(self, cache_index: 'int', size: 'int') -> 'float': ...
    def set_cache_scale(self, cache_index: 'int', size: 'int', scale: 'float') -> None: ...
    def get_cache_scale(self, cache_index: 'int', size: 'int') -> 'float': ...
    def get_texture_count(self, cache_index: 'int', size: 'Vector2i') -> 'int': ...
    def clear_textures(self, cache_index: 'int', size: 'Vector2i') -> None: ...
    def remove_texture(self, cache_index: 'int', size: 'Vector2i', texture_index: 'int') -> None: ...
    def set_texture_image(self, cache_index: 'int', size: 'Vector2i', texture_index: 'int', image: 'Image') -> None: ...
    def get_texture_image(self, cache_index: 'int', size: 'Vector2i', texture_index: 'int') -> 'Image': ...
    def set_texture_offsets(self, cache_index: 'int', size: 'Vector2i', texture_index: 'int', offset: 'PackedInt32Array') -> None: ...
    def get_texture_offsets(self, cache_index: 'int', size: 'Vector2i', texture_index: 'int') -> 'PackedInt32Array': ...
    def get_glyph_list(self, cache_index: 'int', size: 'Vector2i') -> 'PackedInt32Array': ...
    def clear_glyphs(self, cache_index: 'int', size: 'Vector2i') -> None: ...
    def remove_glyph(self, cache_index: 'int', size: 'Vector2i', glyph: 'int') -> None: ...
    def set_glyph_advance(self, cache_index: 'int', size: 'int', glyph: 'int', advance: 'Vector2') -> None: ...
    def get_glyph_advance(self, cache_index: 'int', size: 'int', glyph: 'int') -> 'Vector2': ...
    def set_glyph_offset(self, cache_index: 'int', size: 'Vector2i', glyph: 'int', offset: 'Vector2') -> None: ...
    def get_glyph_offset(self, cache_index: 'int', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def set_glyph_size(self, cache_index: 'int', size: 'Vector2i', glyph: 'int', gl_size: 'Vector2') -> None: ...
    def get_glyph_size(self, cache_index: 'int', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def set_glyph_uv_rect(self, cache_index: 'int', size: 'Vector2i', glyph: 'int', uv_rect: 'Rect2') -> None: ...
    def get_glyph_uv_rect(self, cache_index: 'int', size: 'Vector2i', glyph: 'int') -> 'Rect2': ...
    def set_glyph_texture_idx(self, cache_index: 'int', size: 'Vector2i', glyph: 'int', texture_idx: 'int') -> None: ...
    def get_glyph_texture_idx(self, cache_index: 'int', size: 'Vector2i', glyph: 'int') -> 'int': ...
    def get_kerning_list(self, cache_index: 'int', size: 'int') -> 'Array'['Vector2i']: ...
    def clear_kerning_map(self, cache_index: 'int', size: 'int') -> None: ...
    def remove_kerning(self, cache_index: 'int', size: 'int', glyph_pair: 'Vector2i') -> None: ...
    def set_kerning(self, cache_index: 'int', size: 'int', glyph_pair: 'Vector2i', kerning: 'Vector2') -> None: ...
    def get_kerning(self, cache_index: 'int', size: 'int', glyph_pair: 'Vector2i') -> 'Vector2': ...
    def render_range(self, cache_index: 'int', size: 'Vector2i', start: 'int', end: 'int') -> None: ...
    def render_glyph(self, cache_index: 'int', size: 'Vector2i', index: 'int') -> None: ...
    def set_language_support_override(self, language: 'str', supported: 'bool') -> None: ...
    def get_language_support_override(self, language: 'str') -> 'bool': ...
    def remove_language_support_override(self, language: 'str') -> None: ...
    def get_language_support_overrides(self) -> 'PackedStringArray': ...
    def set_script_support_override(self, script: 'str', supported: 'bool') -> None: ...
    def get_script_support_override(self, script: 'str') -> 'bool': ...
    def remove_script_support_override(self, script: 'str') -> None: ...
    def get_script_support_overrides(self) -> 'PackedStringArray': ...
    def set_opentype_feature_overrides(self, overrides: 'Dictionary') -> None: ...
    def get_opentype_feature_overrides(self) -> 'Dictionary': ...
    def get_glyph_index(self, size: 'int', char: 'int', variation_selector: 'int') -> 'int': ...
    def get_char_from_glyph_index(self, size: 'int', glyph_index: 'int') -> 'int': ...


class FontVariation(Font):


    base_font: 'Font'
    variation_opentype: 'Dictionary'
    variation_face_index: 'int'
    variation_embolden: 'float'
    variation_transform: 'Transform2D'
    opentype_features: 'Dictionary'
    spacing_glyph: 'int'
    spacing_space: 'int'
    spacing_top: 'int'
    spacing_bottom: 'int'
    baseline_offset: 'float'

    def set_base_font(self, font: 'Font') -> None: ...
    def get_base_font(self) -> 'Font': ...
    def set_variation_opentype(self, coords: 'Dictionary') -> None: ...
    def get_variation_opentype(self) -> 'Dictionary': ...
    def set_variation_embolden(self, strength: 'float') -> None: ...
    def get_variation_embolden(self) -> 'float': ...
    def set_variation_face_index(self, face_index: 'int') -> None: ...
    def get_variation_face_index(self) -> 'int': ...
    def set_variation_transform(self, transform: 'Transform2D') -> None: ...
    def get_variation_transform(self) -> 'Transform2D': ...
    def set_opentype_features(self, features: 'Dictionary') -> None: ...
    def set_spacing(self, spacing: 'TextServer__SpacingType', value: 'int') -> None: ...
    def set_baseline_offset(self, baseline_offset: 'float') -> None: ...
    def get_baseline_offset(self) -> 'float': ...


class FramebufferCacheRD(Object):



    @staticmethod
    def get_cache_multipass(textures: 'Array'['RID'], passes: 'Array'['RDFramebufferPass'], views: 'int') -> 'RID': ...


class GDExtension(Resource):



    def is_library_open(self) -> 'bool': ...
    def get_minimum_library_initialization_level(self) -> 'GDExtension__InitializationLevel': ...


class GDExtensionManager(Object):


    extensions_reloaded: 'Signal[Callable[[], None]]'  # extensions_reloaded()
    extension_loaded: 'Signal[Callable[[GDExtension], None]]'  # extension_loaded(extension: GDExtension)
    extension_unloading: 'Signal[Callable[[GDExtension], None]]'  # extension_unloading(extension: GDExtension)

    def load_extension(self, path: 'str') -> 'GDExtensionManager__LoadStatus': ...
    def reload_extension(self, path: 'str') -> 'GDExtensionManager__LoadStatus': ...
    def unload_extension(self, path: 'str') -> 'GDExtensionManager__LoadStatus': ...
    def is_extension_loaded(self, path: 'str') -> 'bool': ...
    def get_loaded_extensions(self) -> 'PackedStringArray': ...
    def get_extension(self, path: 'str') -> 'GDExtension': ...


class GDScript(Script):



    def new(self) -> 'Variant': ...


class GDScriptSyntaxHighlighter(EditorSyntaxHighlighter): ...


class GLTFAccessor(Resource):


    buffer_view: 'int'
    byte_offset: 'int'
    component_type: 'int'
    normalized: 'bool'
    count: 'int'
    accessor_type: 'int'
    type: 'int'
    min: 'PackedFloat64Array'
    max: 'PackedFloat64Array'
    sparse_count: 'int'
    sparse_indices_buffer_view: 'int'
    sparse_indices_byte_offset: 'int'
    sparse_indices_component_type: 'int'
    sparse_values_buffer_view: 'int'
    sparse_values_byte_offset: 'int'

    def get_buffer_view(self) -> 'int': ...
    def set_buffer_view(self, buffer_view: 'int') -> None: ...
    def get_byte_offset(self) -> 'int': ...
    def set_byte_offset(self, byte_offset: 'int') -> None: ...
    def get_component_type(self) -> 'int': ...
    def set_component_type(self, component_type: 'int') -> None: ...
    def get_normalized(self) -> 'bool': ...
    def set_normalized(self, normalized: 'bool') -> None: ...
    def get_count(self) -> 'int': ...
    def set_count(self, count: 'int') -> None: ...
    def get_accessor_type(self) -> 'GLTFAccessor__GLTFAccessorType': ...
    def set_accessor_type(self, accessor_type: 'GLTFAccessor__GLTFAccessorType') -> None: ...
    def get_type(self) -> 'int': ...
    def set_type(self, type: 'int') -> None: ...
    def get_min(self) -> 'PackedFloat64Array': ...
    def set_min(self, min: 'PackedFloat64Array') -> None: ...
    def get_max(self) -> 'PackedFloat64Array': ...
    def set_max(self, max: 'PackedFloat64Array') -> None: ...
    def get_sparse_count(self) -> 'int': ...
    def set_sparse_count(self, sparse_count: 'int') -> None: ...
    def get_sparse_indices_buffer_view(self) -> 'int': ...
    def set_sparse_indices_buffer_view(self, sparse_indices_buffer_view: 'int') -> None: ...
    def get_sparse_indices_byte_offset(self) -> 'int': ...
    def set_sparse_indices_byte_offset(self, sparse_indices_byte_offset: 'int') -> None: ...
    def get_sparse_indices_component_type(self) -> 'int': ...
    def set_sparse_indices_component_type(self, sparse_indices_component_type: 'int') -> None: ...
    def get_sparse_values_buffer_view(self) -> 'int': ...
    def set_sparse_values_buffer_view(self, sparse_values_buffer_view: 'int') -> None: ...
    def get_sparse_values_byte_offset(self) -> 'int': ...
    def set_sparse_values_byte_offset(self, sparse_values_byte_offset: 'int') -> None: ...


class GLTFAnimation(Resource):


    original_name: 'str'
    loop: 'bool'

    def get_original_name(self) -> 'str': ...
    def set_original_name(self, original_name: 'str') -> None: ...
    def get_loop(self) -> 'bool': ...
    def set_loop(self, loop: 'bool') -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...


class GLTFBufferView(Resource):


    buffer: 'int'
    byte_offset: 'int'
    byte_length: 'int'
    byte_stride: 'int'
    indices: 'bool'
    vertex_attributes: 'bool'

    def load_buffer_view_data(self, state: 'GLTFState') -> 'PackedByteArray': ...
    def get_buffer(self) -> 'int': ...
    def set_buffer(self, buffer: 'int') -> None: ...
    def get_byte_offset(self) -> 'int': ...
    def set_byte_offset(self, byte_offset: 'int') -> None: ...
    def get_byte_length(self) -> 'int': ...
    def set_byte_length(self, byte_length: 'int') -> None: ...
    def get_byte_stride(self) -> 'int': ...
    def set_byte_stride(self, byte_stride: 'int') -> None: ...
    def get_indices(self) -> 'bool': ...
    def set_indices(self, indices: 'bool') -> None: ...
    def get_vertex_attributes(self) -> 'bool': ...
    def set_vertex_attributes(self, is_attributes: 'bool') -> None: ...


class GLTFCamera(Resource):


    perspective: 'bool'
    fov: 'float'
    size_mag: 'float'
    depth_far: 'float'
    depth_near: 'float'

    @staticmethod
    def from_node(camera_node: 'Camera3D') -> 'GLTFCamera': ...
    def to_node(self) -> 'Camera3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFCamera': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_perspective(self) -> 'bool': ...
    def set_perspective(self, perspective: 'bool') -> None: ...
    def get_fov(self) -> 'float': ...
    def set_fov(self, fov: 'float') -> None: ...
    def get_size_mag(self) -> 'float': ...
    def set_size_mag(self, size_mag: 'float') -> None: ...
    def get_depth_far(self) -> 'float': ...
    def set_depth_far(self, zdepth_far: 'float') -> None: ...
    def get_depth_near(self) -> 'float': ...
    def set_depth_near(self, zdepth_near: 'float') -> None: ...


class GLTFDocument(Resource):


    image_format: 'str'
    lossy_quality: 'float'
    root_node_mode: 'int'

    def set_image_format(self, image_format: 'str') -> None: ...
    def get_image_format(self) -> 'str': ...
    def set_lossy_quality(self, lossy_quality: 'float') -> None: ...
    def get_lossy_quality(self) -> 'float': ...
    def set_root_node_mode(self, root_node_mode: 'GLTFDocument__RootNodeMode') -> None: ...
    def get_root_node_mode(self) -> 'GLTFDocument__RootNodeMode': ...
    def append_from_file(self, path: 'str', state: 'GLTFState', flags: 'int' = 0, base_path: 'str' = "") -> 'Error': ...
    def append_from_buffer(self, bytes: 'PackedByteArray', base_path: 'str', state: 'GLTFState', flags: 'int' = 0) -> 'Error': ...
    def append_from_scene(self, node: 'Node', state: 'GLTFState', flags: 'int' = 0) -> 'Error': ...
    def generate_scene(self, state: 'GLTFState', bake_fps: 'float' = 30, trimming: 'bool' = False, remove_immutable_tracks: 'bool' = True) -> 'Node': ...
    def generate_buffer(self, state: 'GLTFState') -> 'PackedByteArray': ...
    def write_to_filesystem(self, state: 'GLTFState', path: 'str') -> 'Error': ...
    @staticmethod
    def import_object_model_property(state: 'GLTFState', json_pointer: 'str') -> 'GLTFObjectModelProperty': ...
    @staticmethod
    def export_object_model_property(state: 'GLTFState', node_path: 'NodePath', godot_node: 'Node', gltf_node_index: 'int') -> 'GLTFObjectModelProperty': ...
    @staticmethod
    def register_gltf_document_extension(extension: 'GLTFDocumentExtension', first_priority: 'bool' = False) -> None: ...
    @staticmethod
    def unregister_gltf_document_extension(extension: 'GLTFDocumentExtension') -> None: ...
    @staticmethod
    def get_supported_gltf_extensions() -> 'PackedStringArray': ...


class GLTFDocumentExtension(Resource):



    def _import_preflight(self, state: 'GLTFState', extensions: 'PackedStringArray') -> 'Error': ...
    def _get_supported_extensions(self) -> 'PackedStringArray': ...
    def _parse_node_extensions(self, state: 'GLTFState', gltf_node: 'GLTFNode', extensions: 'Dictionary') -> 'Error': ...
    def _parse_image_data(self, state: 'GLTFState', image_data: 'PackedByteArray', mime_type: 'str', ret_image: 'Image') -> 'Error': ...
    def _get_image_file_extension(self) -> 'str': ...
    def _parse_texture_json(self, state: 'GLTFState', texture_json: 'Dictionary', ret_gltf_texture: 'GLTFTexture') -> 'Error': ...
    def _import_object_model_property(self, state: 'GLTFState', split_json_pointer: 'PackedStringArray', partial_paths: 'Array'['NodePath']) -> 'GLTFObjectModelProperty': ...
    def _import_post_parse(self, state: 'GLTFState') -> 'Error': ...
    def _import_pre_generate(self, state: 'GLTFState') -> 'Error': ...
    def _generate_scene_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', scene_parent: 'Node') -> 'Node3D': ...
    def _import_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', json: 'Dictionary', node: 'Node') -> 'Error': ...
    def _import_post(self, state: 'GLTFState', root: 'Node') -> 'Error': ...
    def _export_preflight(self, state: 'GLTFState', root: 'Node') -> 'Error': ...
    def _convert_scene_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', scene_node: 'Node') -> None: ...
    def _export_post_convert(self, state: 'GLTFState', root: 'Node') -> 'Error': ...
    def _export_preserialize(self, state: 'GLTFState') -> 'Error': ...
    def _export_object_model_property(self, state: 'GLTFState', node_path: 'NodePath', godot_node: 'Node', gltf_node_index: 'int', target_object: 'Object', target_depth: 'int') -> 'GLTFObjectModelProperty': ...
    def _get_saveable_image_formats(self) -> 'PackedStringArray': ...
    def _serialize_image_to_bytes(self, state: 'GLTFState', image: 'Image', image_dict: 'Dictionary', image_format: 'str', lossy_quality: 'float') -> 'PackedByteArray': ...
    def _save_image_at_path(self, state: 'GLTFState', image: 'Image', file_path: 'str', image_format: 'str', lossy_quality: 'float') -> 'Error': ...
    def _serialize_texture_json(self, state: 'GLTFState', texture_json: 'Dictionary', gltf_texture: 'GLTFTexture', image_format: 'str') -> 'Error': ...
    def _export_node(self, state: 'GLTFState', gltf_node: 'GLTFNode', json: 'Dictionary', node: 'Node') -> 'Error': ...
    def _export_post(self, state: 'GLTFState') -> 'Error': ...


class GLTFDocumentExtensionConvertImporterMesh(GLTFDocumentExtension): ...


class GLTFLight(Resource):


    color: 'Color'
    intensity: 'float'
    light_type: 'str'
    range: 'float'
    inner_cone_angle: 'float'
    outer_cone_angle: 'float'

    @staticmethod
    def from_node(light_node: 'Light3D') -> 'GLTFLight': ...
    def to_node(self) -> 'Light3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFLight': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_color(self) -> 'Color': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_intensity(self) -> 'float': ...
    def set_intensity(self, intensity: 'float') -> None: ...
    def get_light_type(self) -> 'str': ...
    def set_light_type(self, light_type: 'str') -> None: ...
    def get_range(self) -> 'float': ...
    def set_range(self, range: 'float') -> None: ...
    def get_inner_cone_angle(self) -> 'float': ...
    def set_inner_cone_angle(self, inner_cone_angle: 'float') -> None: ...
    def get_outer_cone_angle(self) -> 'float': ...
    def set_outer_cone_angle(self, outer_cone_angle: 'float') -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...


class GLTFMesh(Resource):


    original_name: 'str'
    mesh: 'Object'
    blend_weights: 'PackedFloat32Array'
    instance_materials: 'Array'

    def get_original_name(self) -> 'str': ...
    def set_original_name(self, original_name: 'str') -> None: ...
    def get_mesh(self) -> 'ImporterMesh': ...
    def set_mesh(self, mesh: 'ImporterMesh') -> None: ...
    def get_blend_weights(self) -> 'PackedFloat32Array': ...
    def set_blend_weights(self, blend_weights: 'PackedFloat32Array') -> None: ...
    def get_instance_materials(self) -> 'Array'['Material']: ...
    def set_instance_materials(self, instance_materials: 'Array'['Material']) -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...


class GLTFNode(Resource):


    original_name: 'str'
    parent: 'int'
    height: 'int'
    xform: 'Transform3D'
    mesh: 'int'
    camera: 'int'
    skin: 'int'
    skeleton: 'int'
    position: 'Vector3'
    rotation: 'Quaternion'
    scale: 'Vector3'
    children: 'PackedInt32Array'
    light: 'int'

    def get_original_name(self) -> 'str': ...
    def set_original_name(self, original_name: 'str') -> None: ...
    def get_parent(self) -> 'int': ...
    def set_parent(self, parent: 'int') -> None: ...
    def get_height(self) -> 'int': ...
    def set_height(self, height: 'int') -> None: ...
    def get_xform(self) -> 'Transform3D': ...
    def set_xform(self, xform: 'Transform3D') -> None: ...
    def get_mesh(self) -> 'int': ...
    def set_mesh(self, mesh: 'int') -> None: ...
    def get_camera(self) -> 'int': ...
    def set_camera(self, camera: 'int') -> None: ...
    def get_skin(self) -> 'int': ...
    def set_skin(self, skin: 'int') -> None: ...
    def get_skeleton(self) -> 'int': ...
    def set_skeleton(self, skeleton: 'int') -> None: ...
    def get_position(self) -> 'Vector3': ...
    def set_position(self, position: 'Vector3') -> None: ...
    def get_rotation(self) -> 'Quaternion': ...
    def set_rotation(self, rotation: 'Quaternion') -> None: ...
    def get_scale(self) -> 'Vector3': ...
    def set_scale(self, scale: 'Vector3') -> None: ...
    def get_children(self) -> 'PackedInt32Array': ...
    def set_children(self, children: 'PackedInt32Array') -> None: ...
    def append_child_index(self, child_index: 'int') -> None: ...
    def get_light(self) -> 'int': ...
    def set_light(self, light: 'int') -> None: ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    def get_scene_node_path(self, gltf_state: 'GLTFState', handle_skeletons: 'bool' = True) -> 'NodePath': ...


class GLTFObjectModelProperty(RefCounted):


    gltf_to_godot_expression: 'Expression'
    godot_to_gltf_expression: 'Expression'
    node_paths: 'Array'
    object_model_type: 'int'
    json_pointers: 'PackedStringArray'
    variant_type: 'int'

    def append_node_path(self, node_path: 'NodePath') -> None: ...
    def append_path_to_property(self, node_path: 'NodePath', prop_name: 'StringName') -> None: ...
    def get_accessor_type(self) -> 'GLTFAccessor__GLTFAccessorType': ...
    def get_gltf_to_godot_expression(self) -> 'Expression': ...
    def set_gltf_to_godot_expression(self, gltf_to_godot_expr: 'Expression') -> None: ...
    def get_godot_to_gltf_expression(self) -> 'Expression': ...
    def set_godot_to_gltf_expression(self, godot_to_gltf_expr: 'Expression') -> None: ...
    def get_node_paths(self) -> 'Array'['NodePath']: ...
    def has_node_paths(self) -> 'bool': ...
    def set_node_paths(self, node_paths: 'Array'['NodePath']) -> None: ...
    def get_object_model_type(self) -> 'GLTFObjectModelProperty__GLTFObjectModelType': ...
    def set_object_model_type(self, type: 'GLTFObjectModelProperty__GLTFObjectModelType') -> None: ...
    def get_json_pointers(self) -> 'Array'['PackedStringArray']: ...
    def has_json_pointers(self) -> 'bool': ...
    def set_json_pointers(self, json_pointers: 'Array'['PackedStringArray']) -> None: ...
    def get_variant_type(self) -> 'Variant__Type': ...
    def set_variant_type(self, variant_type: 'Variant__Type') -> None: ...
    def set_types(self, variant_type: 'Variant__Type', obj_model_type: 'GLTFObjectModelProperty__GLTFObjectModelType') -> None: ...


class GLTFPhysicsBody(Resource):


    body_type: 'str'
    mass: 'float'
    linear_velocity: 'Vector3'
    angular_velocity: 'Vector3'
    center_of_mass: 'Vector3'
    inertia_diagonal: 'Vector3'
    inertia_orientation: 'Quaternion'
    inertia_tensor: 'Basis'

    @staticmethod
    def from_node(body_node: 'CollisionObject3D') -> 'GLTFPhysicsBody': ...
    def to_node(self) -> 'CollisionObject3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFPhysicsBody': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_body_type(self) -> 'str': ...
    def set_body_type(self, body_type: 'str') -> None: ...
    def get_mass(self) -> 'float': ...
    def set_mass(self, mass: 'float') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_linear_velocity(self, linear_velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, angular_velocity: 'Vector3') -> None: ...
    def get_center_of_mass(self) -> 'Vector3': ...
    def set_center_of_mass(self, center_of_mass: 'Vector3') -> None: ...
    def get_inertia_diagonal(self) -> 'Vector3': ...
    def set_inertia_diagonal(self, inertia_diagonal: 'Vector3') -> None: ...
    def get_inertia_orientation(self) -> 'Quaternion': ...
    def set_inertia_orientation(self, inertia_orientation: 'Quaternion') -> None: ...
    def get_inertia_tensor(self) -> 'Basis': ...
    def set_inertia_tensor(self, inertia_tensor: 'Basis') -> None: ...


class GLTFPhysicsShape(Resource):


    shape_type: 'str'
    size: 'Vector3'
    radius: 'float'
    height: 'float'
    is_trigger: 'bool'
    mesh_index: 'int'
    importer_mesh: 'ImporterMesh'

    @staticmethod
    def from_node(shape_node: 'CollisionShape3D') -> 'GLTFPhysicsShape': ...
    def to_node(self, cache_shapes: 'bool' = False) -> 'CollisionShape3D': ...
    @staticmethod
    def from_resource(shape_resource: 'Shape3D') -> 'GLTFPhysicsShape': ...
    def to_resource(self, cache_shapes: 'bool' = False) -> 'Shape3D': ...
    @staticmethod
    def from_dictionary(dictionary: 'Dictionary') -> 'GLTFPhysicsShape': ...
    def to_dictionary(self) -> 'Dictionary': ...
    def get_shape_type(self) -> 'str': ...
    def set_shape_type(self, shape_type: 'str') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_radius(self, radius: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_is_trigger(self) -> 'bool': ...
    def set_is_trigger(self, is_trigger: 'bool') -> None: ...
    def get_mesh_index(self) -> 'int': ...
    def set_mesh_index(self, mesh_index: 'int') -> None: ...
    def get_importer_mesh(self) -> 'ImporterMesh': ...
    def set_importer_mesh(self, importer_mesh: 'ImporterMesh') -> None: ...


class GLTFSkeleton(Resource):


    joints: 'PackedInt32Array'
    roots: 'PackedInt32Array'
    unique_names: 'Array'
    godot_bone_node: 'Dictionary'

    def get_joints(self) -> 'PackedInt32Array': ...
    def set_joints(self, joints: 'PackedInt32Array') -> None: ...
    def get_roots(self) -> 'PackedInt32Array': ...
    def set_roots(self, roots: 'PackedInt32Array') -> None: ...
    def get_godot_skeleton(self) -> 'Skeleton3D': ...
    def get_unique_names(self) -> 'Array'['str']: ...
    def set_unique_names(self, unique_names: 'Array'['str']) -> None: ...
    def get_godot_bone_node(self) -> 'Dictionary': ...
    def set_godot_bone_node(self, godot_bone_node: 'Dictionary') -> None: ...
    def get_bone_attachment_count(self) -> 'int': ...
    def get_bone_attachment(self, idx: 'int') -> 'BoneAttachment3D': ...


class GLTFSkin(Resource):


    skin_root: 'int'
    joints_original: 'PackedInt32Array'
    inverse_binds: 'Array'
    joints: 'PackedInt32Array'
    non_joints: 'PackedInt32Array'
    roots: 'PackedInt32Array'
    skeleton: 'int'
    joint_i_to_bone_i: 'Dictionary'
    joint_i_to_name: 'Dictionary'
    godot_skin: 'Skin'

    def get_skin_root(self) -> 'int': ...
    def set_skin_root(self, skin_root: 'int') -> None: ...
    def get_joints_original(self) -> 'PackedInt32Array': ...
    def set_joints_original(self, joints_original: 'PackedInt32Array') -> None: ...
    def get_inverse_binds(self) -> 'Array'['Transform3D']: ...
    def set_inverse_binds(self, inverse_binds: 'Array'['Transform3D']) -> None: ...
    def get_joints(self) -> 'PackedInt32Array': ...
    def set_joints(self, joints: 'PackedInt32Array') -> None: ...
    def get_non_joints(self) -> 'PackedInt32Array': ...
    def set_non_joints(self, non_joints: 'PackedInt32Array') -> None: ...
    def get_roots(self) -> 'PackedInt32Array': ...
    def set_roots(self, roots: 'PackedInt32Array') -> None: ...
    def get_skeleton(self) -> 'int': ...
    def set_skeleton(self, skeleton: 'int') -> None: ...
    def get_joint_i_to_bone_i(self) -> 'Dictionary': ...
    def set_joint_i_to_bone_i(self, joint_i_to_bone_i: 'Dictionary') -> None: ...
    def get_joint_i_to_name(self) -> 'Dictionary': ...
    def set_joint_i_to_name(self, joint_i_to_name: 'Dictionary') -> None: ...
    def get_godot_skin(self) -> 'Skin': ...
    def set_godot_skin(self, godot_skin: 'Skin') -> None: ...


class GLTFSpecGloss(Resource):


    diffuse_img: 'Object'
    diffuse_factor: 'Color'
    gloss_factor: 'float'
    specular_factor: 'Color'
    spec_gloss_img: 'Object'

    def get_diffuse_img(self) -> 'Image': ...
    def set_diffuse_img(self, diffuse_img: 'Image') -> None: ...
    def get_diffuse_factor(self) -> 'Color': ...
    def set_diffuse_factor(self, diffuse_factor: 'Color') -> None: ...
    def get_gloss_factor(self) -> 'float': ...
    def set_gloss_factor(self, gloss_factor: 'float') -> None: ...
    def get_specular_factor(self) -> 'Color': ...
    def set_specular_factor(self, specular_factor: 'Color') -> None: ...
    def get_spec_gloss_img(self) -> 'Image': ...
    def set_spec_gloss_img(self, spec_gloss_img: 'Image') -> None: ...


class GLTFState(Resource):


    json: 'Dictionary'
    major_version: 'int'
    minor_version: 'int'
    copyright: 'str'
    glb_data: 'PackedByteArray'
    use_named_skin_binds: 'bool'
    nodes: 'Array'
    buffers: 'Array'
    buffer_views: 'Array'
    accessors: 'Array'
    meshes: 'Array'
    materials: 'Array'
    scene_name: 'str'
    base_path: 'str'
    filename: 'str'
    root_nodes: 'PackedInt32Array'
    textures: 'Array'
    texture_samplers: 'Array'
    images: 'Array'
    skins: 'Array'
    cameras: 'Array'
    lights: 'Array'
    unique_names: 'Array'
    unique_animation_names: 'Array'
    skeletons: 'Array'
    create_animations: 'bool'
    import_as_skeleton_bones: 'bool'
    animations: 'Array'
    handle_binary_image: 'int'
    bake_fps: 'float'
    HANDLE_BINARY_DISCARD_TEXTURES: 'int' = 0
    HANDLE_BINARY_EXTRACT_TEXTURES: 'int' = 1
    HANDLE_BINARY_EMBED_AS_BASISU: 'int' = 2
    HANDLE_BINARY_EMBED_AS_UNCOMPRESSED: 'int' = 3

    def add_used_extension(self, extension_name: 'str', required: 'bool') -> None: ...
    def append_data_to_buffers(self, data: 'PackedByteArray', deduplication: 'bool') -> 'int': ...
    def append_gltf_node(self, gltf_node: 'GLTFNode', godot_scene_node: 'Node', parent_node_index: 'int') -> 'int': ...
    def get_json(self) -> 'Dictionary': ...
    def set_json(self, json: 'Dictionary') -> None: ...
    def get_major_version(self) -> 'int': ...
    def set_major_version(self, major_version: 'int') -> None: ...
    def get_minor_version(self) -> 'int': ...
    def set_minor_version(self, minor_version: 'int') -> None: ...
    def get_copyright(self) -> 'str': ...
    def set_copyright(self, copyright: 'str') -> None: ...
    def get_glb_data(self) -> 'PackedByteArray': ...
    def set_glb_data(self, glb_data: 'PackedByteArray') -> None: ...
    def get_use_named_skin_binds(self) -> 'bool': ...
    def set_use_named_skin_binds(self, use_named_skin_binds: 'bool') -> None: ...
    def get_nodes(self) -> 'Array'['GLTFNode']: ...
    def set_nodes(self, nodes: 'Array'['GLTFNode']) -> None: ...
    def get_buffers(self) -> 'Array'['PackedByteArray']: ...
    def set_buffers(self, buffers: 'Array'['PackedByteArray']) -> None: ...
    def get_buffer_views(self) -> 'Array'['GLTFBufferView']: ...
    def set_buffer_views(self, buffer_views: 'Array'['GLTFBufferView']) -> None: ...
    def get_accessors(self) -> 'Array'['GLTFAccessor']: ...
    def set_accessors(self, accessors: 'Array'['GLTFAccessor']) -> None: ...
    def get_meshes(self) -> 'Array'['GLTFMesh']: ...
    def set_meshes(self, meshes: 'Array'['GLTFMesh']) -> None: ...
    def get_animation_players_count(self, idx: 'int') -> 'int': ...
    def get_animation_player(self, idx: 'int') -> 'AnimationPlayer': ...
    def get_materials(self) -> 'Array'['Material']: ...
    def set_materials(self, materials: 'Array'['Material']) -> None: ...
    def get_scene_name(self) -> 'str': ...
    def set_scene_name(self, scene_name: 'str') -> None: ...
    def get_base_path(self) -> 'str': ...
    def set_base_path(self, base_path: 'str') -> None: ...
    def get_filename(self) -> 'str': ...
    def set_filename(self, filename: 'str') -> None: ...
    def get_root_nodes(self) -> 'PackedInt32Array': ...
    def set_root_nodes(self, root_nodes: 'PackedInt32Array') -> None: ...
    def get_textures(self) -> 'Array'['GLTFTexture']: ...
    def set_textures(self, textures: 'Array'['GLTFTexture']) -> None: ...
    def get_texture_samplers(self) -> 'Array'['GLTFTextureSampler']: ...
    def set_texture_samplers(self, texture_samplers: 'Array'['GLTFTextureSampler']) -> None: ...
    def get_images(self) -> 'Array'['Texture2D']: ...
    def set_images(self, images: 'Array'['Texture2D']) -> None: ...
    def get_skins(self) -> 'Array'['GLTFSkin']: ...
    def set_skins(self, skins: 'Array'['GLTFSkin']) -> None: ...
    def get_cameras(self) -> 'Array'['GLTFCamera']: ...
    def set_cameras(self, cameras: 'Array'['GLTFCamera']) -> None: ...
    def get_lights(self) -> 'Array'['GLTFLight']: ...
    def set_lights(self, lights: 'Array'['GLTFLight']) -> None: ...
    def get_unique_names(self) -> 'Array'['str']: ...
    def set_unique_names(self, unique_names: 'Array'['str']) -> None: ...
    def get_unique_animation_names(self) -> 'Array'['str']: ...
    def set_unique_animation_names(self, unique_animation_names: 'Array'['str']) -> None: ...
    def get_skeletons(self) -> 'Array'['GLTFSkeleton']: ...
    def set_skeletons(self, skeletons: 'Array'['GLTFSkeleton']) -> None: ...
    def get_create_animations(self) -> 'bool': ...
    def set_create_animations(self, create_animations: 'bool') -> None: ...
    def get_import_as_skeleton_bones(self) -> 'bool': ...
    def set_import_as_skeleton_bones(self, import_as_skeleton_bones: 'bool') -> None: ...
    def get_animations(self) -> 'Array'['GLTFAnimation']: ...
    def set_animations(self, animations: 'Array'['GLTFAnimation']) -> None: ...
    def get_scene_node(self, idx: 'int') -> 'Node': ...
    def get_node_index(self, scene_node: 'Node') -> 'int': ...
    def get_additional_data(self, extension_name: 'StringName') -> 'Variant': ...
    def set_additional_data(self, extension_name: 'StringName', additional_data: 'Variant') -> None: ...
    def get_handle_binary_image(self) -> 'int': ...
    def set_handle_binary_image(self, method: 'int') -> None: ...
    def set_bake_fps(self, value: 'float') -> None: ...
    def get_bake_fps(self) -> 'float': ...


class GLTFTexture(Resource):


    src_image: 'int'
    sampler: 'int'

    def get_src_image(self) -> 'int': ...
    def set_src_image(self, src_image: 'int') -> None: ...
    def get_sampler(self) -> 'int': ...
    def set_sampler(self, sampler: 'int') -> None: ...


class GLTFTextureSampler(Resource):


    mag_filter: 'int'
    min_filter: 'int'
    wrap_s: 'int'
    wrap_t: 'int'

    def get_mag_filter(self) -> 'int': ...
    def set_mag_filter(self, filter_mode: 'int') -> None: ...
    def get_min_filter(self) -> 'int': ...
    def set_min_filter(self, filter_mode: 'int') -> None: ...
    def get_wrap_s(self) -> 'int': ...
    def set_wrap_s(self, wrap_mode: 'int') -> None: ...
    def get_wrap_t(self) -> 'int': ...
    def set_wrap_t(self, wrap_mode: 'int') -> None: ...


class GPUParticles2D(Node2D):


    emitting: 'bool'
    amount: 'int'
    amount_ratio: 'float'
    sub_emitter: 'NodePath'
    texture: 'Texture2D'
    lifetime: 'float'
    interp_to_end: 'float'
    one_shot: 'bool'
    preprocess: 'float'
    speed_scale: 'float'
    explosiveness: 'float'
    randomness: 'float'
    use_fixed_seed: 'bool'
    seed: 'int'
    fixed_fps: 'int'
    interpolate: 'bool'
    fract_delta: 'bool'
    collision_base_size: 'float'
    visibility_rect: 'Rect2'
    local_coords: 'bool'
    draw_order: 'int'
    trail_enabled: 'bool'
    trail_lifetime: 'float'
    trail_sections: 'int'
    trail_section_subdivisions: 'int'
    process_material: 'ParticleProcessMaterial' | 'ShaderMaterial'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_emitting(self, emitting: 'bool') -> None: ...
    def set_amount(self, amount: 'int') -> None: ...
    def set_lifetime(self, secs: 'float') -> None: ...
    def set_one_shot(self, secs: 'bool') -> None: ...
    def set_pre_process_time(self, secs: 'float') -> None: ...
    def set_explosiveness_ratio(self, ratio: 'float') -> None: ...
    def set_randomness_ratio(self, ratio: 'float') -> None: ...
    def set_visibility_rect(self, visibility_rect: 'Rect2') -> None: ...
    def set_use_local_coordinates(self, enable: 'bool') -> None: ...
    def set_fixed_fps(self, fps: 'int') -> None: ...
    def set_fractional_delta(self, enable: 'bool') -> None: ...
    def set_interpolate(self, enable: 'bool') -> None: ...
    def set_process_material(self, material: 'Material') -> None: ...
    def set_speed_scale(self, scale: 'float') -> None: ...
    def set_collision_base_size(self, size: 'float') -> None: ...
    def set_interp_to_end(self, interp: 'float') -> None: ...
    def request_particles_process(self, process_time: 'float') -> None: ...
    def is_emitting(self) -> 'bool': ...
    def get_amount(self) -> 'int': ...
    def get_lifetime(self) -> 'float': ...
    def get_one_shot(self) -> 'bool': ...
    def get_pre_process_time(self) -> 'float': ...
    def get_explosiveness_ratio(self) -> 'float': ...
    def get_randomness_ratio(self) -> 'float': ...
    def get_visibility_rect(self) -> 'Rect2': ...
    def get_use_local_coordinates(self) -> 'bool': ...
    def get_fixed_fps(self) -> 'int': ...
    def get_fractional_delta(self) -> 'bool': ...
    def get_interpolate(self) -> 'bool': ...
    def get_process_material(self) -> 'Material': ...
    def get_speed_scale(self) -> 'float': ...
    def get_collision_base_size(self) -> 'float': ...
    def get_interp_to_end(self) -> 'float': ...
    def set_draw_order(self, order: 'GPUParticles2D__DrawOrder') -> None: ...
    def get_draw_order(self) -> 'GPUParticles2D__DrawOrder': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def capture_rect(self) -> 'Rect2': ...
    def restart(self, keep_seed: 'bool' = False) -> None: ...
    def set_sub_emitter(self, path: 'NodePath') -> None: ...
    def get_sub_emitter(self) -> 'NodePath': ...
    def emit_particle(self, xform: 'Transform2D', velocity: 'Vector2', color: 'Color', custom: 'Color', flags: 'int') -> None: ...
    def set_trail_enabled(self, enabled: 'bool') -> None: ...
    def set_trail_lifetime(self, secs: 'float') -> None: ...
    def is_trail_enabled(self) -> 'bool': ...
    def get_trail_lifetime(self) -> 'float': ...
    def set_trail_sections(self, sections: 'int') -> None: ...
    def get_trail_sections(self) -> 'int': ...
    def set_trail_section_subdivisions(self, subdivisions: 'int') -> None: ...
    def get_trail_section_subdivisions(self) -> 'int': ...
    def convert_from_particles(self, particles: 'Node') -> None: ...
    def set_amount_ratio(self, ratio: 'float') -> None: ...
    def get_amount_ratio(self) -> 'float': ...
    def set_use_fixed_seed(self, use_fixed_seed: 'bool') -> None: ...
    def get_use_fixed_seed(self) -> 'bool': ...
    def set_seed(self, seed: 'int') -> None: ...
    def get_seed(self) -> 'int': ...


class GPUParticles3D(GeometryInstance3D):


    emitting: 'bool'
    amount: 'int'
    amount_ratio: 'float'
    sub_emitter: 'NodePath'
    lifetime: 'float'
    interp_to_end: 'float'
    one_shot: 'bool'
    preprocess: 'float'
    speed_scale: 'float'
    explosiveness: 'float'
    randomness: 'float'
    use_fixed_seed: 'bool'
    seed: 'int'
    fixed_fps: 'int'
    interpolate: 'bool'
    fract_delta: 'bool'
    collision_base_size: 'float'
    visibility_aabb: 'AABB'
    local_coords: 'bool'
    draw_order: 'int'
    transform_align: 'int'
    trail_enabled: 'bool'
    trail_lifetime: 'float'
    process_material: 'ParticleProcessMaterial' | 'ShaderMaterial'
    draw_passes: 'int'
    draw_pass_1: 'Mesh'
    draw_pass_2: 'Mesh'
    draw_pass_3: 'Mesh'
    draw_pass_4: 'Mesh'
    draw_skin: 'Skin'
    MAX_DRAW_PASSES: 'int' = 4
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_emitting(self, emitting: 'bool') -> None: ...
    def set_amount(self, amount: 'int') -> None: ...
    def set_lifetime(self, secs: 'float') -> None: ...
    def set_one_shot(self, enable: 'bool') -> None: ...
    def set_pre_process_time(self, secs: 'float') -> None: ...
    def set_explosiveness_ratio(self, ratio: 'float') -> None: ...
    def set_randomness_ratio(self, ratio: 'float') -> None: ...
    def set_visibility_aabb(self, aabb: 'AABB') -> None: ...
    def set_use_local_coordinates(self, enable: 'bool') -> None: ...
    def set_fixed_fps(self, fps: 'int') -> None: ...
    def set_fractional_delta(self, enable: 'bool') -> None: ...
    def set_interpolate(self, enable: 'bool') -> None: ...
    def set_process_material(self, material: 'Material') -> None: ...
    def set_speed_scale(self, scale: 'float') -> None: ...
    def set_collision_base_size(self, size: 'float') -> None: ...
    def set_interp_to_end(self, interp: 'float') -> None: ...
    def is_emitting(self) -> 'bool': ...
    def get_amount(self) -> 'int': ...
    def get_lifetime(self) -> 'float': ...
    def get_one_shot(self) -> 'bool': ...
    def get_pre_process_time(self) -> 'float': ...
    def get_explosiveness_ratio(self) -> 'float': ...
    def get_randomness_ratio(self) -> 'float': ...
    def get_visibility_aabb(self) -> 'AABB': ...
    def get_use_local_coordinates(self) -> 'bool': ...
    def get_fixed_fps(self) -> 'int': ...
    def get_fractional_delta(self) -> 'bool': ...
    def get_interpolate(self) -> 'bool': ...
    def get_process_material(self) -> 'Material': ...
    def get_speed_scale(self) -> 'float': ...
    def get_collision_base_size(self) -> 'float': ...
    def get_interp_to_end(self) -> 'float': ...
    def set_use_fixed_seed(self, use_fixed_seed: 'bool') -> None: ...
    def get_use_fixed_seed(self) -> 'bool': ...
    def set_seed(self, seed: 'int') -> None: ...
    def get_seed(self) -> 'int': ...
    def set_draw_order(self, order: 'GPUParticles3D__DrawOrder') -> None: ...
    def get_draw_order(self) -> 'GPUParticles3D__DrawOrder': ...
    def set_draw_passes(self, passes: 'int') -> None: ...
    def set_draw_pass_mesh(self, pass_: 'int', mesh: 'Mesh') -> None: ...
    def get_draw_passes(self) -> 'int': ...
    def get_draw_pass_mesh(self, pass_: 'int') -> 'Mesh': ...
    def set_skin(self, skin: 'Skin') -> None: ...
    def get_skin(self) -> 'Skin': ...
    def restart(self, keep_seed: 'bool' = False) -> None: ...
    def capture_aabb(self) -> 'AABB': ...
    def set_sub_emitter(self, path: 'NodePath') -> None: ...
    def get_sub_emitter(self) -> 'NodePath': ...
    def emit_particle(self, xform: 'Transform3D', velocity: 'Vector3', color: 'Color', custom: 'Color', flags: 'int') -> None: ...
    def set_trail_enabled(self, enabled: 'bool') -> None: ...
    def set_trail_lifetime(self, secs: 'float') -> None: ...
    def is_trail_enabled(self) -> 'bool': ...
    def get_trail_lifetime(self) -> 'float': ...
    def set_transform_align(self, align: 'GPUParticles3D__TransformAlign') -> None: ...
    def get_transform_align(self) -> 'GPUParticles3D__TransformAlign': ...
    def convert_from_particles(self, particles: 'Node') -> None: ...
    def set_amount_ratio(self, ratio: 'float') -> None: ...
    def get_amount_ratio(self) -> 'float': ...
    def request_particles_process(self, process_time: 'float') -> None: ...


class GPUParticlesAttractor3D(VisualInstance3D):


    strength: 'float'
    attenuation: 'float'
    directionality: 'float'
    cull_mask: 'int'

    def set_cull_mask(self, mask: 'int') -> None: ...
    def get_cull_mask(self) -> 'int': ...
    def set_strength(self, strength: 'float') -> None: ...
    def get_strength(self) -> 'float': ...
    def set_attenuation(self, attenuation: 'float') -> None: ...
    def get_attenuation(self) -> 'float': ...
    def set_directionality(self, amount: 'float') -> None: ...
    def get_directionality(self) -> 'float': ...


class GPUParticlesAttractorBox3D(GPUParticlesAttractor3D):


    size: 'Vector3'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...


class GPUParticlesAttractorSphere3D(GPUParticlesAttractor3D):


    radius: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...


class GPUParticlesAttractorVectorField3D(GPUParticlesAttractor3D):


    size: 'Vector3'
    texture: 'Texture3D'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_texture(self, texture: 'Texture3D') -> None: ...
    def get_texture(self) -> 'Texture3D': ...


class GPUParticlesCollision3D(VisualInstance3D):


    cull_mask: 'int'

    def set_cull_mask(self, mask: 'int') -> None: ...
    def get_cull_mask(self) -> 'int': ...


class GPUParticlesCollisionBox3D(GPUParticlesCollision3D):


    size: 'Vector3'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...


class GPUParticlesCollisionHeightField3D(GPUParticlesCollision3D):


    size: 'Vector3'
    resolution: 'int'
    update_mode: 'int'
    follow_camera_enabled: 'bool'
    heightfield_mask: 'int'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_resolution(self, resolution: 'GPUParticlesCollisionHeightField3D__Resolution') -> None: ...
    def get_resolution(self) -> 'GPUParticlesCollisionHeightField3D__Resolution': ...
    def set_update_mode(self, update_mode: 'GPUParticlesCollisionHeightField3D__UpdateMode') -> None: ...
    def get_update_mode(self) -> 'GPUParticlesCollisionHeightField3D__UpdateMode': ...
    def set_heightfield_mask(self, heightfield_mask: 'int') -> None: ...
    def get_heightfield_mask(self) -> 'int': ...
    def set_heightfield_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_heightfield_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_follow_camera_enabled(self, enabled: 'bool') -> None: ...
    def is_follow_camera_enabled(self) -> 'bool': ...


class GPUParticlesCollisionSDF3D(GPUParticlesCollision3D):


    size: 'Vector3'
    resolution: 'int'
    thickness: 'float'
    bake_mask: 'int'
    texture: 'Texture3D'

    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_resolution(self, resolution: 'GPUParticlesCollisionSDF3D__Resolution') -> None: ...
    def get_resolution(self) -> 'GPUParticlesCollisionSDF3D__Resolution': ...
    def set_texture(self, texture: 'Texture3D') -> None: ...
    def get_texture(self) -> 'Texture3D': ...
    def set_thickness(self, thickness: 'float') -> None: ...
    def get_thickness(self) -> 'float': ...
    def set_bake_mask(self, mask: 'int') -> None: ...
    def get_bake_mask(self) -> 'int': ...
    def set_bake_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_bake_mask_value(self, layer_number: 'int') -> 'bool': ...


class GPUParticlesCollisionSphere3D(GPUParticlesCollision3D):


    radius: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...


class Generic6DOFJoint3D(Joint3D):



    def set_param_x(self, param: 'Generic6DOFJoint3D__Param', value: 'float') -> None: ...
    def get_param_x(self, param: 'Generic6DOFJoint3D__Param') -> 'float': ...
    def set_param_y(self, param: 'Generic6DOFJoint3D__Param', value: 'float') -> None: ...
    def get_param_y(self, param: 'Generic6DOFJoint3D__Param') -> 'float': ...
    def set_param_z(self, param: 'Generic6DOFJoint3D__Param', value: 'float') -> None: ...
    def get_param_z(self, param: 'Generic6DOFJoint3D__Param') -> 'float': ...
    def set_flag_x(self, flag: 'Generic6DOFJoint3D__Flag', value: 'bool') -> None: ...
    def get_flag_x(self, flag: 'Generic6DOFJoint3D__Flag') -> 'bool': ...
    def set_flag_y(self, flag: 'Generic6DOFJoint3D__Flag', value: 'bool') -> None: ...
    def get_flag_y(self, flag: 'Generic6DOFJoint3D__Flag') -> 'bool': ...
    def set_flag_z(self, flag: 'Generic6DOFJoint3D__Flag', value: 'bool') -> None: ...
    def get_flag_z(self, flag: 'Generic6DOFJoint3D__Flag') -> 'bool': ...


class Geometry2D(Object):



    def is_point_in_circle(self, point: 'Vector2', circle_position: 'Vector2', circle_radius: 'float') -> 'bool': ...
    def segment_intersects_circle(self, segment_from: 'Vector2', segment_to: 'Vector2', circle_position: 'Vector2', circle_radius: 'float') -> 'float': ...
    def segment_intersects_segment(self, from_a: 'Vector2', to_a: 'Vector2', from_b: 'Vector2', to_b: 'Vector2') -> 'Variant': ...
    def line_intersects_line(self, from_a: 'Vector2', dir_a: 'Vector2', from_b: 'Vector2', dir_b: 'Vector2') -> 'Variant': ...
    def get_closest_points_between_segments(self, p1: 'Vector2', q1: 'Vector2', p2: 'Vector2', q2: 'Vector2') -> 'PackedVector2Array': ...
    def get_closest_point_to_segment(self, point: 'Vector2', s1: 'Vector2', s2: 'Vector2') -> 'Vector2': ...
    def get_closest_point_to_segment_uncapped(self, point: 'Vector2', s1: 'Vector2', s2: 'Vector2') -> 'Vector2': ...
    def point_is_inside_triangle(self, point: 'Vector2', a: 'Vector2', b: 'Vector2', c: 'Vector2') -> 'bool': ...
    def is_polygon_clockwise(self, polygon: 'PackedVector2Array') -> 'bool': ...
    def is_point_in_polygon(self, point: 'Vector2', polygon: 'PackedVector2Array') -> 'bool': ...
    def triangulate_polygon(self, polygon: 'PackedVector2Array') -> 'PackedInt32Array': ...
    def triangulate_delaunay(self, points: 'PackedVector2Array') -> 'PackedInt32Array': ...
    def convex_hull(self, points: 'PackedVector2Array') -> 'PackedVector2Array': ...
    def decompose_polygon_in_convex(self, polygon: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def merge_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def clip_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def intersect_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def exclude_polygons(self, polygon_a: 'PackedVector2Array', polygon_b: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def clip_polyline_with_polygon(self, polyline: 'PackedVector2Array', polygon: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def intersect_polyline_with_polygon(self, polyline: 'PackedVector2Array', polygon: 'PackedVector2Array') -> 'Array'['PackedVector2Array']: ...
    def offset_polygon(self, polygon: 'PackedVector2Array', delta: 'float', join_type: 'Geometry2D__PolyJoinType' = 0) -> 'Array'['PackedVector2Array']: ...
    def offset_polyline(self, polyline: 'PackedVector2Array', delta: 'float', join_type: 'Geometry2D__PolyJoinType' = 0, end_type: 'Geometry2D__PolyEndType' = 3) -> 'Array'['PackedVector2Array']: ...
    def make_atlas(self, sizes: 'PackedVector2Array') -> 'Dictionary': ...
    def bresenham_line(self, from_: 'Vector2i', to: 'Vector2i') -> 'Array'['Vector2i']: ...


class Geometry3D(Object):



    def compute_convex_mesh_points(self, planes: 'Array'['Plane']) -> 'PackedVector3Array': ...
    def build_box_planes(self, extents: 'Vector3') -> 'Array'['Plane']: ...
    def build_cylinder_planes(self, radius: 'float', height: 'float', sides: 'int', axis: 'Vector3__Axis' = 2) -> 'Array'['Plane']: ...
    def build_capsule_planes(self, radius: 'float', height: 'float', sides: 'int', lats: 'int', axis: 'Vector3__Axis' = 2) -> 'Array'['Plane']: ...
    def get_closest_points_between_segments(self, p1: 'Vector3', p2: 'Vector3', q1: 'Vector3', q2: 'Vector3') -> 'PackedVector3Array': ...
    def get_closest_point_to_segment(self, point: 'Vector3', s1: 'Vector3', s2: 'Vector3') -> 'Vector3': ...
    def get_closest_point_to_segment_uncapped(self, point: 'Vector3', s1: 'Vector3', s2: 'Vector3') -> 'Vector3': ...
    def get_triangle_barycentric_coords(self, point: 'Vector3', a: 'Vector3', b: 'Vector3', c: 'Vector3') -> 'Vector3': ...
    def ray_intersects_triangle(self, from_: 'Vector3', dir: 'Vector3', a: 'Vector3', b: 'Vector3', c: 'Vector3') -> 'Variant': ...
    def segment_intersects_triangle(self, from_: 'Vector3', to: 'Vector3', a: 'Vector3', b: 'Vector3', c: 'Vector3') -> 'Variant': ...
    def segment_intersects_sphere(self, from_: 'Vector3', to: 'Vector3', sphere_position: 'Vector3', sphere_radius: 'float') -> 'PackedVector3Array': ...
    def segment_intersects_cylinder(self, from_: 'Vector3', to: 'Vector3', height: 'float', radius: 'float') -> 'PackedVector3Array': ...
    def segment_intersects_convex(self, from_: 'Vector3', to: 'Vector3', planes: 'Array'['Plane']) -> 'PackedVector3Array': ...
    def clip_polygon(self, points: 'PackedVector3Array', plane: 'Plane') -> 'PackedVector3Array': ...
    def tetrahedralize_delaunay(self, points: 'PackedVector3Array') -> 'PackedInt32Array': ...


class GeometryInstance3D(VisualInstance3D):


    material_override: 'BaseMaterial3D' | 'ShaderMaterial'
    material_overlay: 'BaseMaterial3D' | 'ShaderMaterial'
    transparency: 'float'
    cast_shadow: 'int'
    extra_cull_margin: 'float'
    custom_aabb: 'AABB'
    lod_bias: 'float'
    ignore_occlusion_culling: 'bool'
    gi_mode: 'int'
    gi_lightmap_texel_scale: 'float'
    gi_lightmap_scale: 'int'
    visibility_range_begin: 'float'
    visibility_range_begin_margin: 'float'
    visibility_range_end: 'float'
    visibility_range_end_margin: 'float'
    visibility_range_fade_mode: 'int'

    def set_material_override(self, material: 'Material') -> None: ...
    def get_material_override(self) -> 'Material': ...
    def set_material_overlay(self, material: 'Material') -> None: ...
    def get_material_overlay(self) -> 'Material': ...
    def set_cast_shadows_setting(self, shadow_casting_setting: 'GeometryInstance3D__ShadowCastingSetting') -> None: ...
    def get_cast_shadows_setting(self) -> 'GeometryInstance3D__ShadowCastingSetting': ...
    def set_lod_bias(self, bias: 'float') -> None: ...
    def get_lod_bias(self) -> 'float': ...
    def set_transparency(self, transparency: 'float') -> None: ...
    def get_transparency(self) -> 'float': ...
    def set_visibility_range_end_margin(self, distance: 'float') -> None: ...
    def get_visibility_range_end_margin(self) -> 'float': ...
    def set_visibility_range_end(self, distance: 'float') -> None: ...
    def get_visibility_range_end(self) -> 'float': ...
    def set_visibility_range_begin_margin(self, distance: 'float') -> None: ...
    def get_visibility_range_begin_margin(self) -> 'float': ...
    def set_visibility_range_begin(self, distance: 'float') -> None: ...
    def get_visibility_range_begin(self) -> 'float': ...
    def set_visibility_range_fade_mode(self, mode: 'GeometryInstance3D__VisibilityRangeFadeMode') -> None: ...
    def get_visibility_range_fade_mode(self) -> 'GeometryInstance3D__VisibilityRangeFadeMode': ...
    def set_instance_shader_parameter(self, name: 'StringName', value: 'Variant') -> None: ...
    def get_instance_shader_parameter(self, name: 'StringName') -> 'Variant': ...
    def set_extra_cull_margin(self, margin: 'float') -> None: ...
    def get_extra_cull_margin(self) -> 'float': ...
    def set_lightmap_texel_scale(self, scale: 'float') -> None: ...
    def get_lightmap_texel_scale(self) -> 'float': ...
    def set_lightmap_scale(self, scale: 'GeometryInstance3D__LightmapScale') -> None: ...
    def get_lightmap_scale(self) -> 'GeometryInstance3D__LightmapScale': ...
    def set_gi_mode(self, mode: 'GeometryInstance3D__GIMode') -> None: ...
    def get_gi_mode(self) -> 'GeometryInstance3D__GIMode': ...
    def set_ignore_occlusion_culling(self, ignore_culling: 'bool') -> None: ...
    def is_ignoring_occlusion_culling(self) -> 'bool': ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...


class Gradient(Resource):


    interpolation_mode: 'int'
    interpolation_color_space: 'int'
    offsets: 'PackedFloat32Array'
    colors: 'PackedColorArray'

    def add_point(self, offset: 'float', color: 'Color') -> None: ...
    def remove_point(self, point: 'int') -> None: ...
    def set_offset(self, point: 'int', offset: 'float') -> None: ...
    def get_offset(self, point: 'int') -> 'float': ...
    def reverse(self) -> None: ...
    def set_color(self, point: 'int', color: 'Color') -> None: ...
    def get_color(self, point: 'int') -> 'Color': ...
    def sample(self, offset: 'float') -> 'Color': ...
    def get_point_count(self) -> 'int': ...
    def set_offsets(self, offsets: 'PackedFloat32Array') -> None: ...
    def get_offsets(self) -> 'PackedFloat32Array': ...
    def set_colors(self, colors: 'PackedColorArray') -> None: ...
    def get_colors(self) -> 'PackedColorArray': ...
    def set_interpolation_mode(self, interpolation_mode: 'Gradient__InterpolationMode') -> None: ...
    def get_interpolation_mode(self) -> 'Gradient__InterpolationMode': ...
    def set_interpolation_color_space(self, interpolation_color_space: 'Gradient__ColorSpace') -> None: ...
    def get_interpolation_color_space(self) -> 'Gradient__ColorSpace': ...


class GradientTexture1D(Texture2D):


    gradient: 'Gradient'
    width: 'int'
    use_hdr: 'bool'

    def set_gradient(self, gradient: 'Gradient') -> None: ...
    def get_gradient(self) -> 'Gradient': ...
    def set_width(self, width: 'int') -> None: ...
    def set_use_hdr(self, enabled: 'bool') -> None: ...
    def is_using_hdr(self) -> 'bool': ...


class GradientTexture2D(Texture2D):


    gradient: 'Gradient'
    width: 'int'
    height: 'int'
    use_hdr: 'bool'
    fill: 'int'
    fill_from: 'Vector2'
    fill_to: 'Vector2'
    repeat: 'int'

    def set_gradient(self, gradient: 'Gradient') -> None: ...
    def get_gradient(self) -> 'Gradient': ...
    def set_width(self, width: 'int') -> None: ...
    def set_height(self, height: 'int') -> None: ...
    def set_use_hdr(self, enabled: 'bool') -> None: ...
    def is_using_hdr(self) -> 'bool': ...
    def set_fill(self, fill: 'GradientTexture2D__Fill') -> None: ...
    def get_fill(self) -> 'GradientTexture2D__Fill': ...
    def set_fill_from(self, fill_from: 'Vector2') -> None: ...
    def get_fill_from(self) -> 'Vector2': ...
    def set_fill_to(self, fill_to: 'Vector2') -> None: ...
    def get_fill_to(self) -> 'Vector2': ...
    def set_repeat(self, repeat: 'GradientTexture2D__Repeat') -> None: ...
    def get_repeat(self) -> 'GradientTexture2D__Repeat': ...


class GraphEdit(Control):


    scroll_offset: 'Vector2'
    show_grid: 'bool'
    grid_pattern: 'int'
    snapping_enabled: 'bool'
    snapping_distance: 'int'
    panning_scheme: 'int'
    right_disconnects: 'bool'
    connection_lines_curvature: 'float'
    connection_lines_thickness: 'float'
    connection_lines_antialiased: 'bool'
    connections: 'Array'
    zoom: 'float'
    zoom_min: 'float'
    zoom_max: 'float'
    zoom_step: 'float'
    minimap_enabled: 'bool'
    minimap_size: 'Vector2'
    minimap_opacity: 'float'
    show_menu: 'bool'
    show_zoom_label: 'bool'
    show_zoom_buttons: 'bool'
    show_grid_buttons: 'bool'
    show_minimap_button: 'bool'
    show_arrange_button: 'bool'
    connection_request: 'Signal[Callable[[StringName, int, StringName, int], None]]'  # connection_request(from_node: StringName, from_port: int, to_node: StringName, to_port: int)
    disconnection_request: 'Signal[Callable[[StringName, int, StringName, int], None]]'  # disconnection_request(from_node: StringName, from_port: int, to_node: StringName, to_port: int)
    connection_to_empty: 'Signal[Callable[[StringName, int, Vector2], None]]'  # connection_to_empty(from_node: StringName, from_port: int, release_position: Vector2)
    connection_from_empty: 'Signal[Callable[[StringName, int, Vector2], None]]'  # connection_from_empty(to_node: StringName, to_port: int, release_position: Vector2)
    connection_drag_started: 'Signal[Callable[[StringName, int, bool], None]]'  # connection_drag_started(from_node: StringName, from_port: int, is_output: bool)
    connection_drag_ended: 'Signal[Callable[[], None]]'  # connection_drag_ended()
    copy_nodes_request: 'Signal[Callable[[], None]]'  # copy_nodes_request()
    cut_nodes_request: 'Signal[Callable[[], None]]'  # cut_nodes_request()
    paste_nodes_request: 'Signal[Callable[[], None]]'  # paste_nodes_request()
    duplicate_nodes_request: 'Signal[Callable[[], None]]'  # duplicate_nodes_request()
    delete_nodes_request: 'Signal[Callable[[Array[StringName]], None]]'  # delete_nodes_request(nodes: typedarray::StringName)
    node_selected: 'Signal[Callable[[Node], None]]'  # node_selected(node: Node)
    node_deselected: 'Signal[Callable[[Node], None]]'  # node_deselected(node: Node)
    frame_rect_changed: 'Signal[Callable[[GraphFrame, Rect2], None]]'  # frame_rect_changed(frame: GraphFrame, new_rect: Rect2)
    popup_request: 'Signal[Callable[[Vector2], None]]'  # popup_request(at_position: Vector2)
    begin_node_move: 'Signal[Callable[[], None]]'  # begin_node_move()
    end_node_move: 'Signal[Callable[[], None]]'  # end_node_move()
    graph_elements_linked_to_frame_request: 'Signal[Callable[[Array, StringName], None]]'  # graph_elements_linked_to_frame_request(elements: Array, frame: StringName)
    scroll_offset_changed: 'Signal[Callable[[Vector2], None]]'  # scroll_offset_changed(offset: Vector2)

    def _is_in_input_hotzone(self, in_node: 'Object', in_port: 'int', mouse_position: 'Vector2') -> 'bool': ...
    def _is_in_output_hotzone(self, in_node: 'Object', in_port: 'int', mouse_position: 'Vector2') -> 'bool': ...
    def _get_connection_line(self, from_position: 'Vector2', to_position: 'Vector2') -> 'PackedVector2Array': ...
    def _is_node_hover_valid(self, from_node: 'StringName', from_port: 'int', to_node: 'StringName', to_port: 'int') -> 'bool': ...
    def connect_node(self, from_node: 'StringName', from_port: 'int', to_node: 'StringName', to_port: 'int', keep_alive: 'bool' = False) -> 'Error': ...
    def is_node_connected(self, from_node: 'StringName', from_port: 'int', to_node: 'StringName', to_port: 'int') -> 'bool': ...
    def disconnect_node(self, from_node: 'StringName', from_port: 'int', to_node: 'StringName', to_port: 'int') -> None: ...
    def set_connection_activity(self, from_node: 'StringName', from_port: 'int', to_node: 'StringName', to_port: 'int', amount: 'float') -> None: ...
    def set_connections(self, connections: 'Array'['Dictionary']) -> None: ...
    def get_connection_list(self) -> 'Array'['Dictionary']: ...
    def get_connection_count(self, from_node: 'StringName', from_port: 'int') -> 'int': ...
    def get_closest_connection_at_point(self, point: 'Vector2', max_distance: 'float' = 4.0) -> 'Dictionary': ...
    def get_connections_intersecting_with_rect(self, rect: 'Rect2') -> 'Array'['Dictionary']: ...
    def clear_connections(self) -> None: ...
    def force_connection_drag_end(self) -> None: ...
    def get_scroll_offset(self) -> 'Vector2': ...
    def set_scroll_offset(self, offset: 'Vector2') -> None: ...
    def add_valid_right_disconnect_type(self, type: 'int') -> None: ...
    def remove_valid_right_disconnect_type(self, type: 'int') -> None: ...
    def add_valid_left_disconnect_type(self, type: 'int') -> None: ...
    def remove_valid_left_disconnect_type(self, type: 'int') -> None: ...
    def add_valid_connection_type(self, from_type: 'int', to_type: 'int') -> None: ...
    def remove_valid_connection_type(self, from_type: 'int', to_type: 'int') -> None: ...
    def is_valid_connection_type(self, from_type: 'int', to_type: 'int') -> 'bool': ...
    def get_connection_line(self, from_node: 'Vector2', to_node: 'Vector2') -> 'PackedVector2Array': ...
    def attach_graph_element_to_frame(self, element: 'StringName', frame: 'StringName') -> None: ...
    def detach_graph_element_from_frame(self, element: 'StringName') -> None: ...
    def get_element_frame(self, element: 'StringName') -> 'GraphFrame': ...
    def get_attached_nodes_of_frame(self, frame: 'StringName') -> 'Array'['StringName']: ...
    def set_panning_scheme(self, scheme: 'GraphEdit__PanningScheme') -> None: ...
    def get_panning_scheme(self) -> 'GraphEdit__PanningScheme': ...
    def set_zoom(self, zoom: 'float') -> None: ...
    def get_zoom(self) -> 'float': ...
    def set_zoom_min(self, zoom_min: 'float') -> None: ...
    def get_zoom_min(self) -> 'float': ...
    def set_zoom_max(self, zoom_max: 'float') -> None: ...
    def get_zoom_max(self) -> 'float': ...
    def set_zoom_step(self, zoom_step: 'float') -> None: ...
    def get_zoom_step(self) -> 'float': ...
    def set_show_grid(self, enable: 'bool') -> None: ...
    def is_showing_grid(self) -> 'bool': ...
    def set_grid_pattern(self, pattern: 'GraphEdit__GridPattern') -> None: ...
    def get_grid_pattern(self) -> 'GraphEdit__GridPattern': ...
    def set_snapping_enabled(self, enable: 'bool') -> None: ...
    def is_snapping_enabled(self) -> 'bool': ...
    def set_snapping_distance(self, pixels: 'int') -> None: ...
    def get_snapping_distance(self) -> 'int': ...
    def set_connection_lines_curvature(self, curvature: 'float') -> None: ...
    def get_connection_lines_curvature(self) -> 'float': ...
    def set_connection_lines_thickness(self, pixels: 'float') -> None: ...
    def get_connection_lines_thickness(self) -> 'float': ...
    def set_connection_lines_antialiased(self, pixels: 'bool') -> None: ...
    def is_connection_lines_antialiased(self) -> 'bool': ...
    def set_minimap_size(self, size: 'Vector2') -> None: ...
    def get_minimap_size(self) -> 'Vector2': ...
    def set_minimap_opacity(self, opacity: 'float') -> None: ...
    def get_minimap_opacity(self) -> 'float': ...
    def set_minimap_enabled(self, enable: 'bool') -> None: ...
    def is_minimap_enabled(self) -> 'bool': ...
    def set_show_menu(self, hidden: 'bool') -> None: ...
    def is_showing_menu(self) -> 'bool': ...
    def set_show_zoom_label(self, enable: 'bool') -> None: ...
    def is_showing_zoom_label(self) -> 'bool': ...
    def set_show_grid_buttons(self, hidden: 'bool') -> None: ...
    def is_showing_grid_buttons(self) -> 'bool': ...
    def set_show_zoom_buttons(self, hidden: 'bool') -> None: ...
    def is_showing_zoom_buttons(self) -> 'bool': ...
    def set_show_minimap_button(self, hidden: 'bool') -> None: ...
    def is_showing_minimap_button(self) -> 'bool': ...
    def set_show_arrange_button(self, hidden: 'bool') -> None: ...
    def is_showing_arrange_button(self) -> 'bool': ...
    def set_right_disconnects(self, enable: 'bool') -> None: ...
    def is_right_disconnects_enabled(self) -> 'bool': ...
    def get_menu_hbox(self) -> 'HBoxContainer': ...
    def arrange_nodes(self) -> None: ...
    def set_selected(self, node: 'Node') -> None: ...


class GraphElement(Container):


    position_offset: 'Vector2'
    resizable: 'bool'
    draggable: 'bool'
    selectable: 'bool'
    selected: 'bool'
    node_selected: 'Signal[Callable[[], None]]'  # node_selected()
    node_deselected: 'Signal[Callable[[], None]]'  # node_deselected()
    raise_request: 'Signal[Callable[[], None]]'  # raise_request()
    delete_request: 'Signal[Callable[[], None]]'  # delete_request()
    resize_request: 'Signal[Callable[[Vector2], None]]'  # resize_request(new_size: Vector2)
    resize_end: 'Signal[Callable[[Vector2], None]]'  # resize_end(new_size: Vector2)
    dragged: 'Signal[Callable[[Vector2, Vector2], None]]'  # dragged(from: Vector2, to: Vector2)
    position_offset_changed: 'Signal[Callable[[], None]]'  # position_offset_changed()

    def set_resizable(self, resizable: 'bool') -> None: ...
    def is_resizable(self) -> 'bool': ...
    def set_draggable(self, draggable: 'bool') -> None: ...
    def is_draggable(self) -> 'bool': ...
    def set_selectable(self, selectable: 'bool') -> None: ...
    def is_selectable(self) -> 'bool': ...
    def set_selected(self, selected: 'bool') -> None: ...
    def is_selected(self) -> 'bool': ...
    def set_position_offset(self, offset: 'Vector2') -> None: ...
    def get_position_offset(self) -> 'Vector2': ...


class GraphFrame(GraphElement):


    title: 'str'
    autoshrink_enabled: 'bool'
    autoshrink_margin: 'int'
    drag_margin: 'int'
    tint_color_enabled: 'bool'
    tint_color: 'Color'
    autoshrink_changed: 'Signal[Callable[[], None]]'  # autoshrink_changed()

    def set_title(self, title: 'str') -> None: ...
    def get_title(self) -> 'str': ...
    def get_titlebar_hbox(self) -> 'HBoxContainer': ...
    def set_autoshrink_enabled(self, shrink: 'bool') -> None: ...
    def is_autoshrink_enabled(self) -> 'bool': ...
    def set_autoshrink_margin(self, autoshrink_margin: 'int') -> None: ...
    def get_autoshrink_margin(self) -> 'int': ...
    def set_drag_margin(self, drag_margin: 'int') -> None: ...
    def get_drag_margin(self) -> 'int': ...
    def set_tint_color_enabled(self, enable: 'bool') -> None: ...
    def is_tint_color_enabled(self) -> 'bool': ...
    def set_tint_color(self, color: 'Color') -> None: ...
    def get_tint_color(self) -> 'Color': ...


class GraphNode(GraphElement):


    title: 'str'
    ignore_invalid_connection_type: 'bool'
    slot_updated: 'Signal[Callable[[int], None]]'  # slot_updated(slot_index: int)

    def _draw_port(self, slot_index: 'int', position: 'Vector2i', left: 'bool', color: 'Color') -> None: ...
    def set_title(self, title: 'str') -> None: ...
    def get_title(self) -> 'str': ...
    def get_titlebar_hbox(self) -> 'HBoxContainer': ...
    def set_slot(self, slot_index: 'int', enable_left_port: 'bool', type_left: 'int', color_left: 'Color', enable_right_port: 'bool', type_right: 'int', color_right: 'Color', custom_icon_left: 'Texture2D' = default('''null'''), custom_icon_right: 'Texture2D' = default('''null'''), draw_stylebox: 'bool' = True) -> None: ...
    def clear_slot(self, slot_index: 'int') -> None: ...
    def clear_all_slots(self) -> None: ...
    def is_slot_enabled_left(self, slot_index: 'int') -> 'bool': ...
    def set_slot_enabled_left(self, slot_index: 'int', enable: 'bool') -> None: ...
    def set_slot_type_left(self, slot_index: 'int', type: 'int') -> None: ...
    def get_slot_type_left(self, slot_index: 'int') -> 'int': ...
    def set_slot_color_left(self, slot_index: 'int', color: 'Color') -> None: ...
    def get_slot_color_left(self, slot_index: 'int') -> 'Color': ...
    def set_slot_custom_icon_left(self, slot_index: 'int', custom_icon: 'Texture2D') -> None: ...
    def get_slot_custom_icon_left(self, slot_index: 'int') -> 'Texture2D': ...
    def is_slot_enabled_right(self, slot_index: 'int') -> 'bool': ...
    def set_slot_enabled_right(self, slot_index: 'int', enable: 'bool') -> None: ...
    def set_slot_type_right(self, slot_index: 'int', type: 'int') -> None: ...
    def get_slot_type_right(self, slot_index: 'int') -> 'int': ...
    def set_slot_color_right(self, slot_index: 'int', color: 'Color') -> None: ...
    def get_slot_color_right(self, slot_index: 'int') -> 'Color': ...
    def set_slot_custom_icon_right(self, slot_index: 'int', custom_icon: 'Texture2D') -> None: ...
    def get_slot_custom_icon_right(self, slot_index: 'int') -> 'Texture2D': ...
    def is_slot_draw_stylebox(self, slot_index: 'int') -> 'bool': ...
    def set_slot_draw_stylebox(self, slot_index: 'int', enable: 'bool') -> None: ...
    def set_ignore_invalid_connection_type(self, ignore: 'bool') -> None: ...
    def is_ignoring_valid_connection_type(self) -> 'bool': ...
    def get_input_port_count(self) -> 'int': ...
    def get_input_port_position(self, port_idx: 'int') -> 'Vector2': ...
    def get_input_port_type(self, port_idx: 'int') -> 'int': ...
    def get_input_port_color(self, port_idx: 'int') -> 'Color': ...
    def get_input_port_slot(self, port_idx: 'int') -> 'int': ...
    def get_output_port_count(self) -> 'int': ...
    def get_output_port_position(self, port_idx: 'int') -> 'Vector2': ...
    def get_output_port_type(self, port_idx: 'int') -> 'int': ...
    def get_output_port_color(self, port_idx: 'int') -> 'Color': ...
    def get_output_port_slot(self, port_idx: 'int') -> 'int': ...


class GridContainer(Container):


    columns: 'int'

    def set_columns(self, columns: 'int') -> None: ...
    def get_columns(self) -> 'int': ...


class GridMap(Node3D):


    mesh_library: 'MeshLibrary'
    physics_material: 'PhysicsMaterial'
    cell_size: 'Vector3'
    cell_octant_size: 'int'
    cell_center_x: 'bool'
    cell_center_y: 'bool'
    cell_center_z: 'bool'
    cell_scale: 'float'
    collision_layer: 'int'
    collision_mask: 'int'
    collision_priority: 'float'
    bake_navigation: 'bool'
    INVALID_CELL_ITEM: 'int' = -1
    cell_size_changed: 'Signal[Callable[[Vector3], None]]'  # cell_size_changed(cell_size: Vector3)
    changed: 'Signal[Callable[[], None]]'  # changed()

    def set_collision_layer(self, layer: 'int') -> None: ...
    def get_collision_layer(self) -> 'int': ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_priority(self, priority: 'float') -> None: ...
    def get_collision_priority(self) -> 'float': ...
    def set_physics_material(self, material: 'PhysicsMaterial') -> None: ...
    def get_physics_material(self) -> 'PhysicsMaterial': ...
    def set_bake_navigation(self, bake_navigation: 'bool') -> None: ...
    def is_baking_navigation(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_mesh_library(self, mesh_library: 'MeshLibrary') -> None: ...
    def get_mesh_library(self) -> 'MeshLibrary': ...
    def set_cell_size(self, size: 'Vector3') -> None: ...
    def get_cell_size(self) -> 'Vector3': ...
    def set_cell_scale(self, scale: 'float') -> None: ...
    def get_cell_scale(self) -> 'float': ...
    def set_octant_size(self, size: 'int') -> None: ...
    def get_octant_size(self) -> 'int': ...
    def set_cell_item(self, position: 'Vector3i', item: 'int', orientation: 'int' = 0) -> None: ...
    def get_cell_item(self, position: 'Vector3i') -> 'int': ...
    def get_cell_item_orientation(self, position: 'Vector3i') -> 'int': ...
    def get_cell_item_basis(self, position: 'Vector3i') -> 'Basis': ...
    def get_basis_with_orthogonal_index(self, index: 'int') -> 'Basis': ...
    def get_orthogonal_index_from_basis(self, basis: 'Basis') -> 'int': ...
    def local_to_map(self, local_position: 'Vector3') -> 'Vector3i': ...
    def map_to_local(self, map_position: 'Vector3i') -> 'Vector3': ...
    def resource_changed(self, resource: 'Resource') -> None: ...
    def set_center_x(self, enable: 'bool') -> None: ...
    def get_center_x(self) -> 'bool': ...
    def set_center_y(self, enable: 'bool') -> None: ...
    def get_center_y(self) -> 'bool': ...
    def set_center_z(self, enable: 'bool') -> None: ...
    def get_center_z(self) -> 'bool': ...
    def clear(self) -> None: ...
    def get_used_cells(self) -> 'Array'['Vector3i']: ...
    def get_used_cells_by_item(self, item: 'int') -> 'Array'['Vector3i']: ...
    def get_meshes(self) -> 'Array': ...
    def get_bake_meshes(self) -> 'Array': ...
    def get_bake_mesh_instance(self, idx: 'int') -> 'RID': ...
    def clear_baked_meshes(self) -> None: ...
    def make_baked_meshes(self, gen_lightmap_uv: 'bool' = False, lightmap_uv_texel_size: 'float' = 0.1) -> None: ...


class GridMapEditorPlugin(EditorPlugin):



    def get_current_grid_map(self) -> 'GridMap': ...
    def set_selection(self, begin: 'Vector3i', end: 'Vector3i') -> None: ...
    def clear_selection(self) -> None: ...
    def get_selection(self) -> 'AABB': ...
    def has_selection(self) -> 'bool': ...
    def get_selected_cells(self) -> 'Array': ...
    def set_selected_palette_item(self, item: 'int') -> None: ...
    def get_selected_palette_item(self) -> 'int': ...


class GrooveJoint2D(Joint2D):


    length: 'float'
    initial_offset: 'float'

    def set_length(self, length: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_initial_offset(self, offset: 'float') -> None: ...
    def get_initial_offset(self) -> 'float': ...


class HBoxContainer(BoxContainer): ...


class HFlowContainer(FlowContainer): ...


class HMACContext(RefCounted):



    def start(self, hash_type: 'HashingContext__HashType', key: 'PackedByteArray') -> 'Error': ...
    def update(self, data: 'PackedByteArray') -> 'Error': ...
    def finish(self) -> 'PackedByteArray': ...


class HScrollBar(ScrollBar): ...


class HSeparator(Separator): ...


class HSlider(Slider): ...


class HSplitContainer(SplitContainer): ...


class HTTPClient(RefCounted):


    blocking_mode_enabled: 'bool'
    connection: 'StreamPeer'
    read_chunk_size: 'int'

    def connect_to_host(self, host: 'str', port: 'int' = -1, tls_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def set_connection(self, connection: 'StreamPeer') -> None: ...
    def get_connection(self) -> 'StreamPeer': ...
    def request_raw(self, method: 'HTTPClient__Method', url: 'str', headers: 'PackedStringArray', body: 'PackedByteArray') -> 'Error': ...
    def request(self, method: 'HTTPClient__Method', url: 'str', headers: 'PackedStringArray', body: 'str' = "") -> 'Error': ...
    def close(self) -> None: ...
    def has_response(self) -> 'bool': ...
    def is_response_chunked(self) -> 'bool': ...
    def get_response_code(self) -> 'int': ...
    def get_response_headers(self) -> 'PackedStringArray': ...
    def get_response_headers_as_dictionary(self) -> 'Dictionary': ...
    def get_response_body_length(self) -> 'int': ...
    def read_response_body_chunk(self) -> 'PackedByteArray': ...
    def set_read_chunk_size(self, bytes: 'int') -> None: ...
    def get_read_chunk_size(self) -> 'int': ...
    def set_blocking_mode(self, enabled: 'bool') -> None: ...
    def is_blocking_mode_enabled(self) -> 'bool': ...
    def get_status(self) -> 'HTTPClient__Status': ...
    def poll(self) -> 'Error': ...
    def set_http_proxy(self, host: 'str', port: 'int') -> None: ...
    def set_https_proxy(self, host: 'str', port: 'int') -> None: ...
    def query_string_from_dict(self, fields: 'Dictionary') -> 'str': ...


class HTTPRequest(Node):


    download_file: 'str'
    download_chunk_size: 'int'
    use_threads: 'bool'
    accept_gzip: 'bool'
    body_size_limit: 'int'
    max_redirects: 'int'
    timeout: 'float'
    request_completed: 'Signal[Callable[[int, int, PackedStringArray, PackedByteArray], None]]'  # request_completed(result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray)

    def request(self, url: 'str', custom_headers: 'PackedStringArray' = default('''PackedStringArray()'''), method: 'HTTPClient__Method' = 0, request_data: 'str' = "") -> 'Error': ...
    def request_raw(self, url: 'str', custom_headers: 'PackedStringArray' = default('''PackedStringArray()'''), method: 'HTTPClient__Method' = 0, request_data_raw: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'Error': ...
    def cancel_request(self) -> None: ...
    def set_tls_options(self, client_options: 'TLSOptions') -> None: ...
    def get_http_client_status(self) -> 'HTTPClient__Status': ...
    def set_use_threads(self, enable: 'bool') -> None: ...
    def is_using_threads(self) -> 'bool': ...
    def set_accept_gzip(self, enable: 'bool') -> None: ...
    def is_accepting_gzip(self) -> 'bool': ...
    def set_body_size_limit(self, bytes: 'int') -> None: ...
    def get_body_size_limit(self) -> 'int': ...
    def set_max_redirects(self, amount: 'int') -> None: ...
    def get_max_redirects(self) -> 'int': ...
    def set_download_file(self, path: 'str') -> None: ...
    def get_download_file(self) -> 'str': ...
    def get_downloaded_bytes(self) -> 'int': ...
    def get_body_size(self) -> 'int': ...
    def set_timeout(self, timeout: 'float') -> None: ...
    def get_timeout(self) -> 'float': ...
    def set_download_chunk_size(self, chunk_size: 'int') -> None: ...
    def get_download_chunk_size(self) -> 'int': ...
    def set_http_proxy(self, host: 'str', port: 'int') -> None: ...
    def set_https_proxy(self, host: 'str', port: 'int') -> None: ...


class HashingContext(RefCounted):



    def start(self, type: 'HashingContext__HashType') -> 'Error': ...
    def update(self, chunk: 'PackedByteArray') -> 'Error': ...
    def finish(self) -> 'PackedByteArray': ...


class HeightMapShape3D(Shape3D):


    map_width: 'int'
    map_depth: 'int'
    map_data: 'PackedFloat32Array'

    def set_map_width(self, width: 'int') -> None: ...
    def get_map_width(self) -> 'int': ...
    def set_map_depth(self, height: 'int') -> None: ...
    def get_map_depth(self) -> 'int': ...
    def set_map_data(self, data: 'PackedFloat32Array') -> None: ...
    def get_map_data(self) -> 'PackedFloat32Array': ...
    def get_min_height(self) -> 'float': ...
    def get_max_height(self) -> 'float': ...
    def update_map_data_from_image(self, image: 'Image', height_min: 'float', height_max: 'float') -> None: ...


class HingeJoint3D(Joint3D):



    def set_param(self, param: 'HingeJoint3D__Param', value: 'float') -> None: ...
    def get_param(self, param: 'HingeJoint3D__Param') -> 'float': ...
    def set_flag(self, flag: 'HingeJoint3D__Flag', enabled: 'bool') -> None: ...
    def get_flag(self, flag: 'HingeJoint3D__Flag') -> 'bool': ...


class IP(Object):


    RESOLVER_MAX_QUERIES: 'int' = 256
    RESOLVER_INVALID_ID: 'int' = -1

    def resolve_hostname(self, host: 'str', ip_type: 'IP__Type' = 3) -> 'str': ...
    def resolve_hostname_addresses(self, host: 'str', ip_type: 'IP__Type' = 3) -> 'PackedStringArray': ...
    def resolve_hostname_queue_item(self, host: 'str', ip_type: 'IP__Type' = 3) -> 'int': ...
    def get_resolve_item_status(self, id: 'int') -> 'IP__ResolverStatus': ...
    def get_resolve_item_address(self, id: 'int') -> 'str': ...
    def get_resolve_item_addresses(self, id: 'int') -> 'Array': ...
    def erase_resolve_item(self, id: 'int') -> None: ...
    def get_local_addresses(self) -> 'PackedStringArray': ...
    def get_local_interfaces(self) -> 'Array'['Dictionary']: ...
    def clear_cache(self, hostname: 'str' = "") -> None: ...


class Image(Resource):


    data: 'Dictionary'
    MAX_WIDTH: 'int' = 16777216
    MAX_HEIGHT: 'int' = 16777216

    def get_width(self) -> 'int': ...
    def get_height(self) -> 'int': ...
    def get_size(self) -> 'Vector2i': ...
    def has_mipmaps(self) -> 'bool': ...
    def get_format(self) -> 'Image__Format': ...
    def get_data(self) -> 'PackedByteArray': ...
    def get_data_size(self) -> 'int': ...
    def convert(self, format: 'Image__Format') -> None: ...
    def get_mipmap_count(self) -> 'int': ...
    def get_mipmap_offset(self, mipmap: 'int') -> 'int': ...
    def resize_to_po2(self, square: 'bool' = False, interpolation: 'Image__Interpolation' = 1) -> None: ...
    def resize(self, width: 'int', height: 'int', interpolation: 'Image__Interpolation' = 1) -> None: ...
    def shrink_x2(self) -> None: ...
    def crop(self, width: 'int', height: 'int') -> None: ...
    def flip_x(self) -> None: ...
    def flip_y(self) -> None: ...
    def generate_mipmaps(self, renormalize: 'bool' = False) -> 'Error': ...
    def clear_mipmaps(self) -> None: ...
    @staticmethod
    def create(width: 'int', height: 'int', use_mipmaps: 'bool', format: 'Image__Format') -> 'Image': ...
    @staticmethod
    def create_empty(width: 'int', height: 'int', use_mipmaps: 'bool', format: 'Image__Format') -> 'Image': ...
    @staticmethod
    def create_from_data(width: 'int', height: 'int', use_mipmaps: 'bool', format: 'Image__Format', data: 'PackedByteArray') -> 'Image': ...
    def set_data(self, width: 'int', height: 'int', use_mipmaps: 'bool', format: 'Image__Format', data: 'PackedByteArray') -> None: ...
    def is_empty(self) -> 'bool': ...
    def load(self, path: 'str') -> 'Error': ...
    @staticmethod
    def load_from_file(path: 'str') -> 'Image': ...
    def save_png(self, path: 'str') -> 'Error': ...
    def save_png_to_buffer(self) -> 'PackedByteArray': ...
    def save_jpg(self, path: 'str', quality: 'float' = 0.75) -> 'Error': ...
    def save_jpg_to_buffer(self, quality: 'float' = 0.75) -> 'PackedByteArray': ...
    def save_exr(self, path: 'str', grayscale: 'bool' = False) -> 'Error': ...
    def save_exr_to_buffer(self, grayscale: 'bool' = False) -> 'PackedByteArray': ...
    def save_webp(self, path: 'str', lossy: 'bool' = False, quality: 'float' = 0.75) -> 'Error': ...
    def save_webp_to_buffer(self, lossy: 'bool' = False, quality: 'float' = 0.75) -> 'PackedByteArray': ...
    def detect_alpha(self) -> 'Image__AlphaMode': ...
    def is_invisible(self) -> 'bool': ...
    def detect_used_channels(self, source: 'Image__CompressSource' = 0) -> 'Image__UsedChannels': ...
    def compress(self, mode: 'Image__CompressMode', source: 'Image__CompressSource' = 0, astc_format: 'Image__ASTCFormat' = 0) -> 'Error': ...
    def compress_from_channels(self, mode: 'Image__CompressMode', channels: 'Image__UsedChannels', astc_format: 'Image__ASTCFormat' = 0) -> 'Error': ...
    def decompress(self) -> 'Error': ...
    def is_compressed(self) -> 'bool': ...
    def rotate_90(self, direction: 'ClockDirection') -> None: ...
    def rotate_180(self) -> None: ...
    def fix_alpha_edges(self) -> None: ...
    def premultiply_alpha(self) -> None: ...
    def srgb_to_linear(self) -> None: ...
    def linear_to_srgb(self) -> None: ...
    def normal_map_to_xy(self) -> None: ...
    def rgbe_to_srgb(self) -> 'Image': ...
    def bump_map_to_normal_map(self, bump_scale: 'float' = 1.0) -> None: ...
    def compute_image_metrics(self, compared_image: 'Image', use_luma: 'bool') -> 'Dictionary': ...
    def blit_rect(self, src: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def blit_rect_mask(self, src: 'Image', mask: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def blend_rect(self, src: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def blend_rect_mask(self, src: 'Image', mask: 'Image', src_rect: 'Rect2i', dst: 'Vector2i') -> None: ...
    def fill(self, color: 'Color') -> None: ...
    def fill_rect(self, rect: 'Rect2i', color: 'Color') -> None: ...
    def get_used_rect(self) -> 'Rect2i': ...
    def get_region(self, region: 'Rect2i') -> 'Image': ...
    def copy_from(self, src: 'Image') -> None: ...
    def get_pixelv(self, point: 'Vector2i') -> 'Color': ...
    def get_pixel(self, x: 'int', y: 'int') -> 'Color': ...
    def set_pixelv(self, point: 'Vector2i', color: 'Color') -> None: ...
    def set_pixel(self, x: 'int', y: 'int', color: 'Color') -> None: ...
    def adjust_bcs(self, brightness: 'float', contrast: 'float', saturation: 'float') -> None: ...
    def load_png_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_jpg_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_webp_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_tga_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_bmp_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_ktx_from_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...
    def load_svg_from_buffer(self, buffer: 'PackedByteArray', scale: 'float' = 1.0) -> 'Error': ...
    def load_svg_from_string(self, svg_str: 'str', scale: 'float' = 1.0) -> 'Error': ...


class ImageFormatLoader(RefCounted): ...


class ImageFormatLoaderExtension(ImageFormatLoader):



    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _load_image(self, image: 'Image', fileaccess: 'FileAccess', flags: 'ImageFormatLoader__LoaderFlags', scale: 'float') -> 'Error': ...
    def add_format_loader(self) -> None: ...
    def remove_format_loader(self) -> None: ...


class ImageTexture(Texture2D):



    @staticmethod
    def create_from_image(image: 'Image') -> 'ImageTexture': ...
    def get_format(self) -> 'Image__Format': ...
    def set_image(self, image: 'Image') -> None: ...
    def update(self, image: 'Image') -> None: ...
    def set_size_override(self, size: 'Vector2i') -> None: ...


class ImageTexture3D(Texture3D):



    def create(self, format: 'Image__Format', width: 'int', height: 'int', depth: 'int', use_mipmaps: 'bool', data: 'Array'['Image']) -> 'Error': ...
    def update(self, data: 'Array'['Image']) -> None: ...


class ImageTextureLayered(TextureLayered):



    def create_from_images(self, images: 'Array'['Image']) -> 'Error': ...
    def update_layer(self, image: 'Image', layer: 'int') -> None: ...


class ImmediateMesh(Mesh):



    def surface_begin(self, primitive: 'Mesh__PrimitiveType', material: 'Material' = default('''null''')) -> None: ...
    def surface_set_color(self, color: 'Color') -> None: ...
    def surface_set_normal(self, normal: 'Vector3') -> None: ...
    def surface_set_tangent(self, tangent: 'Plane') -> None: ...
    def surface_set_uv(self, uv: 'Vector2') -> None: ...
    def surface_set_uv2(self, uv2: 'Vector2') -> None: ...
    def surface_add_vertex(self, vertex: 'Vector3') -> None: ...
    def surface_add_vertex_2d(self, vertex: 'Vector2') -> None: ...
    def surface_end(self) -> None: ...
    def clear_surfaces(self) -> None: ...


class ImporterMesh(Resource):



    def add_blend_shape(self, name: 'str') -> None: ...
    def get_blend_shape_count(self) -> 'int': ...
    def get_blend_shape_name(self, blend_shape_idx: 'int') -> 'str': ...
    def set_blend_shape_mode(self, mode: 'Mesh__BlendShapeMode') -> None: ...
    def get_blend_shape_mode(self) -> 'Mesh__BlendShapeMode': ...
    def add_surface(self, primitive: 'Mesh__PrimitiveType', arrays: 'Array', blend_shapes: 'Array'['Array'] = default('''Array[Array]([])'''), lods: 'Dictionary' = default('''{}'''), material: 'Material' = default('''null'''), name: 'str' = "", flags: 'int' = 0) -> None: ...
    def get_surface_count(self) -> 'int': ...
    def get_surface_primitive_type(self, surface_idx: 'int') -> 'Mesh__PrimitiveType': ...
    def get_surface_name(self, surface_idx: 'int') -> 'str': ...
    def get_surface_arrays(self, surface_idx: 'int') -> 'Array': ...
    def get_surface_blend_shape_arrays(self, surface_idx: 'int', blend_shape_idx: 'int') -> 'Array': ...
    def get_surface_lod_count(self, surface_idx: 'int') -> 'int': ...
    def get_surface_lod_size(self, surface_idx: 'int', lod_idx: 'int') -> 'float': ...
    def get_surface_lod_indices(self, surface_idx: 'int', lod_idx: 'int') -> 'PackedInt32Array': ...
    def get_surface_material(self, surface_idx: 'int') -> 'Material': ...
    def get_surface_format(self, surface_idx: 'int') -> 'int': ...
    def set_surface_name(self, surface_idx: 'int', name: 'str') -> None: ...
    def set_surface_material(self, surface_idx: 'int', material: 'Material') -> None: ...
    def generate_lods(self, normal_merge_angle: 'float', normal_split_angle: 'float', bone_transform_array: 'Array') -> None: ...
    def get_mesh(self, base_mesh: 'ArrayMesh' = default('''null''')) -> 'ArrayMesh': ...
    def clear(self) -> None: ...
    def set_lightmap_size_hint(self, size: 'Vector2i') -> None: ...
    def get_lightmap_size_hint(self) -> 'Vector2i': ...


class ImporterMeshInstance3D(Node3D):


    mesh: 'ImporterMesh'
    skin: 'Skin'
    skeleton_path: 'NodePath'
    layer_mask: 'int'
    cast_shadow: 'int'
    visibility_range_begin: 'float'
    visibility_range_begin_margin: 'float'
    visibility_range_end: 'float'
    visibility_range_end_margin: 'float'
    visibility_range_fade_mode: 'int'

    def set_mesh(self, mesh: 'ImporterMesh') -> None: ...
    def get_mesh(self) -> 'ImporterMesh': ...
    def set_skin(self, skin: 'Skin') -> None: ...
    def get_skin(self) -> 'Skin': ...
    def set_skeleton_path(self, skeleton_path: 'NodePath') -> None: ...
    def get_skeleton_path(self) -> 'NodePath': ...
    def set_layer_mask(self, layer_mask: 'int') -> None: ...
    def get_layer_mask(self) -> 'int': ...
    def set_cast_shadows_setting(self, shadow_casting_setting: 'GeometryInstance3D__ShadowCastingSetting') -> None: ...
    def get_cast_shadows_setting(self) -> 'GeometryInstance3D__ShadowCastingSetting': ...
    def set_visibility_range_end_margin(self, distance: 'float') -> None: ...
    def get_visibility_range_end_margin(self) -> 'float': ...
    def set_visibility_range_end(self, distance: 'float') -> None: ...
    def get_visibility_range_end(self) -> 'float': ...
    def set_visibility_range_begin_margin(self, distance: 'float') -> None: ...
    def get_visibility_range_begin_margin(self) -> 'float': ...
    def set_visibility_range_begin(self, distance: 'float') -> None: ...
    def get_visibility_range_begin(self) -> 'float': ...
    def set_visibility_range_fade_mode(self, mode: 'GeometryInstance3D__VisibilityRangeFadeMode') -> None: ...
    def get_visibility_range_fade_mode(self) -> 'GeometryInstance3D__VisibilityRangeFadeMode': ...


class Input(Object):


    mouse_mode: 'int'
    use_accumulated_input: 'bool'
    emulate_mouse_from_touch: 'bool'
    emulate_touch_from_mouse: 'bool'
    joy_connection_changed: 'Signal[Callable[[int, bool], None]]'  # joy_connection_changed(device: int, connected: bool)

    def is_anything_pressed(self) -> 'bool': ...
    def is_key_pressed(self, keycode: 'Key') -> 'bool': ...
    def is_physical_key_pressed(self, keycode: 'Key') -> 'bool': ...
    def is_key_label_pressed(self, keycode: 'Key') -> 'bool': ...
    def is_mouse_button_pressed(self, button: 'MouseButton') -> 'bool': ...
    def is_joy_button_pressed(self, device: 'int', button: 'JoyButton') -> 'bool': ...
    def is_action_pressed(self, action: 'StringName', exact_match: 'bool' = False) -> 'bool': ...
    def is_action_just_pressed(self, action: 'StringName', exact_match: 'bool' = False) -> 'bool': ...
    def is_action_just_released(self, action: 'StringName', exact_match: 'bool' = False) -> 'bool': ...
    def get_action_strength(self, action: 'StringName', exact_match: 'bool' = False) -> 'float': ...
    def get_action_raw_strength(self, action: 'StringName', exact_match: 'bool' = False) -> 'float': ...
    def get_axis(self, negative_action: 'StringName', positive_action: 'StringName') -> 'float': ...
    def get_vector(self, negative_x: 'StringName', positive_x: 'StringName', negative_y: 'StringName', positive_y: 'StringName', deadzone: 'float' = -1.0) -> 'Vector2': ...
    def add_joy_mapping(self, mapping: 'str', update_existing: 'bool' = False) -> None: ...
    def remove_joy_mapping(self, guid: 'str') -> None: ...
    def is_joy_known(self, device: 'int') -> 'bool': ...
    def get_joy_axis(self, device: 'int', axis: 'JoyAxis') -> 'float': ...
    def get_joy_name(self, device: 'int') -> 'str': ...
    def get_joy_guid(self, device: 'int') -> 'str': ...
    def get_joy_info(self, device: 'int') -> 'Dictionary': ...
    def should_ignore_device(self, vendor_id: 'int', product_id: 'int') -> 'bool': ...
    def get_connected_joypads(self) -> 'Array'['int']: ...
    def get_joy_vibration_strength(self, device: 'int') -> 'Vector2': ...
    def get_joy_vibration_duration(self, device: 'int') -> 'float': ...
    def start_joy_vibration(self, device: 'int', weak_magnitude: 'float', strong_magnitude: 'float', duration: 'float' = 0) -> None: ...
    def stop_joy_vibration(self, device: 'int') -> None: ...
    def vibrate_handheld(self, duration_ms: 'int' = 500, amplitude: 'float' = -1.0) -> None: ...
    def get_gravity(self) -> 'Vector3': ...
    def get_accelerometer(self) -> 'Vector3': ...
    def get_magnetometer(self) -> 'Vector3': ...
    def get_gyroscope(self) -> 'Vector3': ...
    def set_gravity(self, value: 'Vector3') -> None: ...
    def set_accelerometer(self, value: 'Vector3') -> None: ...
    def set_magnetometer(self, value: 'Vector3') -> None: ...
    def set_gyroscope(self, value: 'Vector3') -> None: ...
    def get_last_mouse_velocity(self) -> 'Vector2': ...
    def get_last_mouse_screen_velocity(self) -> 'Vector2': ...
    def get_mouse_button_mask(self) -> 'MouseButtonMask': ...
    def set_mouse_mode(self, mode: 'Input__MouseMode') -> None: ...
    def get_mouse_mode(self) -> 'Input__MouseMode': ...
    def warp_mouse(self, position: 'Vector2') -> None: ...
    def action_press(self, action: 'StringName', strength: 'float' = 1.0) -> None: ...
    def action_release(self, action: 'StringName') -> None: ...
    def set_default_cursor_shape(self, shape: 'Input__CursorShape' = 0) -> None: ...
    def get_current_cursor_shape(self) -> 'Input__CursorShape': ...
    def set_custom_mouse_cursor(self, image: 'Resource', shape: 'Input__CursorShape' = 0, hotspot: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def parse_input_event(self, event: 'InputEvent') -> None: ...
    def set_use_accumulated_input(self, enable: 'bool') -> None: ...
    def is_using_accumulated_input(self) -> 'bool': ...
    def flush_buffered_events(self) -> None: ...
    def set_emulate_mouse_from_touch(self, enable: 'bool') -> None: ...
    def is_emulating_mouse_from_touch(self) -> 'bool': ...
    def set_emulate_touch_from_mouse(self, enable: 'bool') -> None: ...
    def is_emulating_touch_from_mouse(self) -> 'bool': ...


class InputEvent(Resource):


    device: 'int'
    DEVICE_ID_EMULATION: 'int' = -1

    def set_device(self, device: 'int') -> None: ...
    def get_device(self) -> 'int': ...
    def is_action(self, action: 'StringName', exact_match: 'bool' = False) -> 'bool': ...
    def is_action_pressed(self, action: 'StringName', allow_echo: 'bool' = False, exact_match: 'bool' = False) -> 'bool': ...
    def is_action_released(self, action: 'StringName', exact_match: 'bool' = False) -> 'bool': ...
    def get_action_strength(self, action: 'StringName', exact_match: 'bool' = False) -> 'float': ...
    def is_canceled(self) -> 'bool': ...
    def is_pressed(self) -> 'bool': ...
    def is_released(self) -> 'bool': ...
    def is_echo(self) -> 'bool': ...
    def as_text(self) -> 'str': ...
    def is_match(self, event: 'InputEvent', exact_match: 'bool' = True) -> 'bool': ...
    def is_action_type(self) -> 'bool': ...
    def accumulate(self, with_event: 'InputEvent') -> 'bool': ...
    def xformed_by(self, xform: 'Transform2D', local_ofs: 'Vector2' = default('''Vector2(0, 0)''')) -> 'InputEvent': ...


class InputEventAction(InputEvent):


    action: 'StringName'
    pressed: 'bool'
    strength: 'float'
    event_index: 'int'

    def set_action(self, action: 'StringName') -> None: ...
    def get_action(self) -> 'StringName': ...
    def set_pressed(self, pressed: 'bool') -> None: ...
    def set_strength(self, strength: 'float') -> None: ...
    def get_strength(self) -> 'float': ...
    def set_event_index(self, index: 'int') -> None: ...
    def get_event_index(self) -> 'int': ...


class InputEventFromWindow(InputEvent):


    window_id: 'int'

    def set_window_id(self, id: 'int') -> None: ...
    def get_window_id(self) -> 'int': ...


class InputEventGesture(InputEventWithModifiers):


    position: 'Vector2'

    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...


class InputEventJoypadButton(InputEvent):


    button_index: 'int'
    pressure: 'float'
    pressed: 'bool'

    def set_button_index(self, button_index: 'JoyButton') -> None: ...
    def get_button_index(self) -> 'JoyButton': ...
    def set_pressure(self, pressure: 'float') -> None: ...
    def get_pressure(self) -> 'float': ...
    def set_pressed(self, pressed: 'bool') -> None: ...


class InputEventJoypadMotion(InputEvent):


    axis: 'int'
    axis_value: 'float'

    def set_axis(self, axis: 'JoyAxis') -> None: ...
    def get_axis(self) -> 'JoyAxis': ...
    def set_axis_value(self, axis_value: 'float') -> None: ...
    def get_axis_value(self) -> 'float': ...


class InputEventKey(InputEventWithModifiers):


    pressed: 'bool'
    keycode: 'int'
    physical_keycode: 'int'
    key_label: 'int'
    unicode: 'int'
    location: 'int'
    echo: 'bool'

    def set_pressed(self, pressed: 'bool') -> None: ...
    def set_keycode(self, keycode: 'Key') -> None: ...
    def get_keycode(self) -> 'Key': ...
    def set_physical_keycode(self, physical_keycode: 'Key') -> None: ...
    def get_physical_keycode(self) -> 'Key': ...
    def set_key_label(self, key_label: 'Key') -> None: ...
    def get_key_label(self) -> 'Key': ...
    def set_unicode(self, unicode: 'int') -> None: ...
    def get_unicode(self) -> 'int': ...
    def set_location(self, location: 'KeyLocation') -> None: ...
    def get_location(self) -> 'KeyLocation': ...
    def set_echo(self, echo: 'bool') -> None: ...
    def get_keycode_with_modifiers(self) -> 'Key': ...
    def get_physical_keycode_with_modifiers(self) -> 'Key': ...
    def get_key_label_with_modifiers(self) -> 'Key': ...
    def as_text_keycode(self) -> 'str': ...
    def as_text_physical_keycode(self) -> 'str': ...
    def as_text_key_label(self) -> 'str': ...
    def as_text_location(self) -> 'str': ...


class InputEventMIDI(InputEvent):


    channel: 'int'
    message: 'int'
    pitch: 'int'
    velocity: 'int'
    instrument: 'int'
    pressure: 'int'
    controller_number: 'int'
    controller_value: 'int'

    def set_channel(self, channel: 'int') -> None: ...
    def get_channel(self) -> 'int': ...
    def set_message(self, message: 'MIDIMessage') -> None: ...
    def get_message(self) -> 'MIDIMessage': ...
    def set_pitch(self, pitch: 'int') -> None: ...
    def get_pitch(self) -> 'int': ...
    def set_velocity(self, velocity: 'int') -> None: ...
    def get_velocity(self) -> 'int': ...
    def set_instrument(self, instrument: 'int') -> None: ...
    def get_instrument(self) -> 'int': ...
    def set_pressure(self, pressure: 'int') -> None: ...
    def get_pressure(self) -> 'int': ...
    def set_controller_number(self, controller_number: 'int') -> None: ...
    def get_controller_number(self) -> 'int': ...
    def set_controller_value(self, controller_value: 'int') -> None: ...
    def get_controller_value(self) -> 'int': ...


class InputEventMagnifyGesture(InputEventGesture):


    factor: 'float'

    def set_factor(self, factor: 'float') -> None: ...
    def get_factor(self) -> 'float': ...


class InputEventMouse(InputEventWithModifiers):


    button_mask: 'int'
    position: 'Vector2'
    global_position: 'Vector2'

    def set_button_mask(self, button_mask: 'MouseButtonMask') -> None: ...
    def get_button_mask(self) -> 'MouseButtonMask': ...
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_global_position(self, global_position: 'Vector2') -> None: ...
    def get_global_position(self) -> 'Vector2': ...


class InputEventMouseButton(InputEventMouse):


    factor: 'float'
    button_index: 'int'
    canceled: 'bool'
    pressed: 'bool'
    double_click: 'bool'

    def set_factor(self, factor: 'float') -> None: ...
    def get_factor(self) -> 'float': ...
    def set_button_index(self, button_index: 'MouseButton') -> None: ...
    def get_button_index(self) -> 'MouseButton': ...
    def set_pressed(self, pressed: 'bool') -> None: ...
    def set_canceled(self, canceled: 'bool') -> None: ...
    def set_double_click(self, double_click: 'bool') -> None: ...
    def is_double_click(self) -> 'bool': ...


class InputEventMouseMotion(InputEventMouse):


    tilt: 'Vector2'
    pressure: 'float'
    pen_inverted: 'bool'
    relative: 'Vector2'
    screen_relative: 'Vector2'
    velocity: 'Vector2'
    screen_velocity: 'Vector2'

    def set_tilt(self, tilt: 'Vector2') -> None: ...
    def get_tilt(self) -> 'Vector2': ...
    def set_pressure(self, pressure: 'float') -> None: ...
    def get_pressure(self) -> 'float': ...
    def set_pen_inverted(self, pen_inverted: 'bool') -> None: ...
    def get_pen_inverted(self) -> 'bool': ...
    def set_relative(self, relative: 'Vector2') -> None: ...
    def get_relative(self) -> 'Vector2': ...
    def set_screen_relative(self, relative: 'Vector2') -> None: ...
    def get_screen_relative(self) -> 'Vector2': ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_screen_velocity(self, velocity: 'Vector2') -> None: ...
    def get_screen_velocity(self) -> 'Vector2': ...


class InputEventPanGesture(InputEventGesture):


    delta: 'Vector2'

    def set_delta(self, delta: 'Vector2') -> None: ...
    def get_delta(self) -> 'Vector2': ...


class InputEventScreenDrag(InputEventFromWindow):


    index: 'int'
    tilt: 'Vector2'
    pressure: 'float'
    pen_inverted: 'bool'
    position: 'Vector2'
    relative: 'Vector2'
    screen_relative: 'Vector2'
    velocity: 'Vector2'
    screen_velocity: 'Vector2'

    def set_index(self, index: 'int') -> None: ...
    def get_index(self) -> 'int': ...
    def set_tilt(self, tilt: 'Vector2') -> None: ...
    def get_tilt(self) -> 'Vector2': ...
    def set_pressure(self, pressure: 'float') -> None: ...
    def get_pressure(self) -> 'float': ...
    def set_pen_inverted(self, pen_inverted: 'bool') -> None: ...
    def get_pen_inverted(self) -> 'bool': ...
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_relative(self, relative: 'Vector2') -> None: ...
    def get_relative(self) -> 'Vector2': ...
    def set_screen_relative(self, relative: 'Vector2') -> None: ...
    def get_screen_relative(self) -> 'Vector2': ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_screen_velocity(self, velocity: 'Vector2') -> None: ...
    def get_screen_velocity(self) -> 'Vector2': ...


class InputEventScreenTouch(InputEventFromWindow):


    index: 'int'
    position: 'Vector2'
    canceled: 'bool'
    pressed: 'bool'
    double_tap: 'bool'

    def set_index(self, index: 'int') -> None: ...
    def get_index(self) -> 'int': ...
    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_pressed(self, pressed: 'bool') -> None: ...
    def set_canceled(self, canceled: 'bool') -> None: ...
    def set_double_tap(self, double_tap: 'bool') -> None: ...
    def is_double_tap(self) -> 'bool': ...


class InputEventShortcut(InputEvent):


    shortcut: 'Shortcut'

    def set_shortcut(self, shortcut: 'Shortcut') -> None: ...
    def get_shortcut(self) -> 'Shortcut': ...


class InputEventWithModifiers(InputEventFromWindow):


    command_or_control_autoremap: 'bool'
    alt_pressed: 'bool'
    shift_pressed: 'bool'
    ctrl_pressed: 'bool'
    meta_pressed: 'bool'

    def set_command_or_control_autoremap(self, enable: 'bool') -> None: ...
    def is_command_or_control_autoremap(self) -> 'bool': ...
    def is_command_or_control_pressed(self) -> 'bool': ...
    def set_alt_pressed(self, pressed: 'bool') -> None: ...
    def is_alt_pressed(self) -> 'bool': ...
    def set_shift_pressed(self, pressed: 'bool') -> None: ...
    def is_shift_pressed(self) -> 'bool': ...
    def set_ctrl_pressed(self, pressed: 'bool') -> None: ...
    def is_ctrl_pressed(self) -> 'bool': ...
    def set_meta_pressed(self, pressed: 'bool') -> None: ...
    def is_meta_pressed(self) -> 'bool': ...
    def get_modifiers_mask(self) -> 'KeyModifierMask': ...


class InputMap(Object):



    def has_action(self, action: 'StringName') -> 'bool': ...
    def get_actions(self) -> 'Array'['StringName']: ...
    def add_action(self, action: 'StringName', deadzone: 'float' = 0.2) -> None: ...
    def erase_action(self, action: 'StringName') -> None: ...
    def action_set_deadzone(self, action: 'StringName', deadzone: 'float') -> None: ...
    def action_get_deadzone(self, action: 'StringName') -> 'float': ...
    def action_add_event(self, action: 'StringName', event: 'InputEvent') -> None: ...
    def action_has_event(self, action: 'StringName', event: 'InputEvent') -> 'bool': ...
    def action_erase_event(self, action: 'StringName', event: 'InputEvent') -> None: ...
    def action_erase_events(self, action: 'StringName') -> None: ...
    def action_get_events(self, action: 'StringName') -> 'Array'['InputEvent']: ...
    def event_is_action(self, event: 'InputEvent', action: 'StringName', exact_match: 'bool' = False) -> 'bool': ...
    def load_from_project_settings(self) -> None: ...


class InstancePlaceholder(Node):



    def get_stored_values(self, with_order: 'bool' = False) -> 'Dictionary': ...
    def create_instance(self, replace: 'bool' = False, custom_scene: 'PackedScene' = default('''null''')) -> 'Node': ...
    def get_instance_path(self) -> 'str': ...


class IntervalTweener(Tweener): ...


class ItemList(Control):


    select_mode: 'int'
    allow_reselect: 'bool'
    allow_rmb_select: 'bool'
    allow_search: 'bool'
    max_text_lines: 'int'
    auto_width: 'bool'
    auto_height: 'bool'
    text_overrun_behavior: 'int'
    wraparound_items: 'bool'
    item_count: 'int'
    max_columns: 'int'
    same_column_width: 'bool'
    fixed_column_width: 'int'
    icon_mode: 'int'
    icon_scale: 'float'
    fixed_icon_size: 'Vector2i'
    item_selected: 'Signal[Callable[[int], None]]'  # item_selected(index: int)
    empty_clicked: 'Signal[Callable[[Vector2, int], None]]'  # empty_clicked(at_position: Vector2, mouse_button_index: int)
    item_clicked: 'Signal[Callable[[int, Vector2, int], None]]'  # item_clicked(index: int, at_position: Vector2, mouse_button_index: int)
    multi_selected: 'Signal[Callable[[int, bool], None]]'  # multi_selected(index: int, selected: bool)
    item_activated: 'Signal[Callable[[int], None]]'  # item_activated(index: int)

    def add_item(self, text: 'str', icon: 'Texture2D' = default('''null'''), selectable: 'bool' = True) -> 'int': ...
    def add_icon_item(self, icon: 'Texture2D', selectable: 'bool' = True) -> 'int': ...
    def set_item_text(self, idx: 'int', text: 'str') -> None: ...
    def get_item_text(self, idx: 'int') -> 'str': ...
    def set_item_icon(self, idx: 'int', icon: 'Texture2D') -> None: ...
    def get_item_icon(self, idx: 'int') -> 'Texture2D': ...
    def set_item_text_direction(self, idx: 'int', direction: 'Control__TextDirection') -> None: ...
    def get_item_text_direction(self, idx: 'int') -> 'Control__TextDirection': ...
    def set_item_language(self, idx: 'int', language: 'str') -> None: ...
    def get_item_language(self, idx: 'int') -> 'str': ...
    def set_item_auto_translate_mode(self, idx: 'int', mode: 'Node__AutoTranslateMode') -> None: ...
    def get_item_auto_translate_mode(self, idx: 'int') -> 'Node__AutoTranslateMode': ...
    def set_item_icon_transposed(self, idx: 'int', transposed: 'bool') -> None: ...
    def is_item_icon_transposed(self, idx: 'int') -> 'bool': ...
    def set_item_icon_region(self, idx: 'int', rect: 'Rect2') -> None: ...
    def get_item_icon_region(self, idx: 'int') -> 'Rect2': ...
    def set_item_icon_modulate(self, idx: 'int', modulate: 'Color') -> None: ...
    def get_item_icon_modulate(self, idx: 'int') -> 'Color': ...
    def set_item_selectable(self, idx: 'int', selectable: 'bool') -> None: ...
    def is_item_selectable(self, idx: 'int') -> 'bool': ...
    def set_item_disabled(self, idx: 'int', disabled: 'bool') -> None: ...
    def is_item_disabled(self, idx: 'int') -> 'bool': ...
    def set_item_metadata(self, idx: 'int', metadata: 'Variant') -> None: ...
    def get_item_metadata(self, idx: 'int') -> 'Variant': ...
    def set_item_custom_bg_color(self, idx: 'int', custom_bg_color: 'Color') -> None: ...
    def get_item_custom_bg_color(self, idx: 'int') -> 'Color': ...
    def set_item_custom_fg_color(self, idx: 'int', custom_fg_color: 'Color') -> None: ...
    def get_item_custom_fg_color(self, idx: 'int') -> 'Color': ...
    def get_item_rect(self, idx: 'int', expand: 'bool' = True) -> 'Rect2': ...
    def set_item_tooltip_enabled(self, idx: 'int', enable: 'bool') -> None: ...
    def is_item_tooltip_enabled(self, idx: 'int') -> 'bool': ...
    def set_item_tooltip(self, idx: 'int', tooltip: 'str') -> None: ...
    def get_item_tooltip(self, idx: 'int') -> 'str': ...
    def select(self, idx: 'int', single: 'bool' = True) -> None: ...
    def deselect(self, idx: 'int') -> None: ...
    def deselect_all(self) -> None: ...
    def is_selected(self, idx: 'int') -> 'bool': ...
    def get_selected_items(self) -> 'PackedInt32Array': ...
    def move_item(self, from_idx: 'int', to_idx: 'int') -> None: ...
    def set_item_count(self, count: 'int') -> None: ...
    def get_item_count(self) -> 'int': ...
    def remove_item(self, idx: 'int') -> None: ...
    def clear(self) -> None: ...
    def sort_items_by_text(self) -> None: ...
    def set_fixed_column_width(self, width: 'int') -> None: ...
    def get_fixed_column_width(self) -> 'int': ...
    def set_same_column_width(self, enable: 'bool') -> None: ...
    def is_same_column_width(self) -> 'bool': ...
    def set_max_text_lines(self, lines: 'int') -> None: ...
    def get_max_text_lines(self) -> 'int': ...
    def set_max_columns(self, amount: 'int') -> None: ...
    def get_max_columns(self) -> 'int': ...
    def set_select_mode(self, mode: 'ItemList__SelectMode') -> None: ...
    def get_select_mode(self) -> 'ItemList__SelectMode': ...
    def set_icon_mode(self, mode: 'ItemList__IconMode') -> None: ...
    def get_icon_mode(self) -> 'ItemList__IconMode': ...
    def set_fixed_icon_size(self, size: 'Vector2i') -> None: ...
    def get_fixed_icon_size(self) -> 'Vector2i': ...
    def set_icon_scale(self, scale: 'float') -> None: ...
    def get_icon_scale(self) -> 'float': ...
    def set_allow_rmb_select(self, allow: 'bool') -> None: ...
    def get_allow_rmb_select(self) -> 'bool': ...
    def set_allow_reselect(self, allow: 'bool') -> None: ...
    def get_allow_reselect(self) -> 'bool': ...
    def set_allow_search(self, allow: 'bool') -> None: ...
    def get_allow_search(self) -> 'bool': ...
    def set_auto_width(self, enable: 'bool') -> None: ...
    def has_auto_width(self) -> 'bool': ...
    def set_auto_height(self, enable: 'bool') -> None: ...
    def has_auto_height(self) -> 'bool': ...
    def is_anything_selected(self) -> 'bool': ...
    def get_item_at_position(self, position: 'Vector2', exact: 'bool' = False) -> 'int': ...
    def ensure_current_is_visible(self) -> None: ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def get_h_scroll_bar(self) -> 'HScrollBar': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer__OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer__OverrunBehavior': ...
    def set_wraparound_items(self, enable: 'bool') -> None: ...
    def has_wraparound_items(self) -> 'bool': ...
    def force_update_list_size(self) -> None: ...


class JNISingleton(Object): ...


class JSON(Resource):


    data: 'Variant'

    @staticmethod
    def stringify(data: 'Variant', indent: 'str' = "", sort_keys: 'bool' = True, full_precision: 'bool' = False) -> 'str': ...
    @staticmethod
    def parse_string(json_string: 'str') -> 'Variant': ...
    def parse(self, json_text: 'str', keep_text: 'bool' = False) -> 'Error': ...
    def get_data(self) -> 'Variant': ...
    def set_data(self, data: 'Variant') -> None: ...
    def get_parsed_text(self) -> 'str': ...
    def get_error_line(self) -> 'int': ...
    def get_error_message(self) -> 'str': ...
    @staticmethod
    def from_native(variant: 'Variant', full_objects: 'bool' = False) -> 'Variant': ...
    @staticmethod
    def to_native(json: 'Variant', allow_objects: 'bool' = False) -> 'Variant': ...


class JSONRPC(Object):



    def set_scope(self, scope: 'str', target: 'Object') -> None: ...
    def process_action(self, action: 'Variant', recurse: 'bool' = False) -> 'Variant': ...
    def process_string(self, action: 'str') -> 'str': ...
    def make_request(self, method: 'str', params: 'Variant', id: 'Variant') -> 'Dictionary': ...
    def make_response(self, result: 'Variant', id: 'Variant') -> 'Dictionary': ...
    def make_notification(self, method: 'str', params: 'Variant') -> 'Dictionary': ...
    def make_response_error(self, code: 'int', message: 'str', id: 'Variant' = default('''null''')) -> 'Dictionary': ...


class JavaClass(RefCounted):



    def get_java_class_name(self) -> 'str': ...
    def get_java_method_list(self) -> 'Array'['Dictionary']: ...
    def get_java_parent_class(self) -> 'JavaClass': ...


class JavaClassWrapper(Object):



    def wrap(self, name: 'str') -> 'JavaClass': ...
    def get_exception(self) -> 'JavaObject': ...


class JavaObject(RefCounted):



    def get_java_class(self) -> 'JavaClass': ...


class JavaScriptBridge(Object):


    pwa_update_available: 'Signal[Callable[[], None]]'  # pwa_update_available()

    def eval(self, code: 'str', use_global_execution_context: 'bool' = False) -> 'Variant': ...
    def get_interface(self, interface: 'str') -> 'JavaScriptObject': ...
    def create_callback(self, callable: 'Callable') -> 'JavaScriptObject': ...
    def is_js_buffer(self, javascript_object: 'JavaScriptObject') -> 'bool': ...
    def js_buffer_to_packed_byte_array(self, javascript_buffer: 'JavaScriptObject') -> 'PackedByteArray': ...
    def create_object(self, object: 'str') -> 'Variant': ...
    def download_buffer(self, buffer: 'PackedByteArray', name: 'str', mime: 'str' = "application/octet-stream") -> None: ...
    def pwa_needs_update(self) -> 'bool': ...
    def pwa_update(self) -> 'Error': ...
    def force_fs_sync(self) -> None: ...


class JavaScriptObject(RefCounted): ...


class Joint2D(Node2D):


    node_a: 'NodePath'
    node_b: 'NodePath'
    bias: 'float'
    disable_collision: 'bool'

    def set_node_a(self, node: 'NodePath') -> None: ...
    def get_node_a(self) -> 'NodePath': ...
    def set_node_b(self, node: 'NodePath') -> None: ...
    def get_node_b(self) -> 'NodePath': ...
    def set_bias(self, bias: 'float') -> None: ...
    def get_bias(self) -> 'float': ...
    def set_exclude_nodes_from_collision(self, enable: 'bool') -> None: ...
    def get_exclude_nodes_from_collision(self) -> 'bool': ...
    def get_rid(self) -> 'RID': ...


class Joint3D(Node3D):


    node_a: 'NodePath'
    node_b: 'NodePath'
    solver_priority: 'int'
    exclude_nodes_from_collision: 'bool'

    def set_node_a(self, node: 'NodePath') -> None: ...
    def get_node_a(self) -> 'NodePath': ...
    def set_node_b(self, node: 'NodePath') -> None: ...
    def get_node_b(self) -> 'NodePath': ...
    def set_solver_priority(self, priority: 'int') -> None: ...
    def get_solver_priority(self) -> 'int': ...
    def set_exclude_nodes_from_collision(self, enable: 'bool') -> None: ...
    def get_exclude_nodes_from_collision(self) -> 'bool': ...
    def get_rid(self) -> 'RID': ...


class KinematicCollision2D(RefCounted):



    def get_position(self) -> 'Vector2': ...
    def get_normal(self) -> 'Vector2': ...
    def get_travel(self) -> 'Vector2': ...
    def get_remainder(self) -> 'Vector2': ...
    def get_angle(self, up_direction: 'Vector2' = default('''Vector2(0, -1)''')) -> 'float': ...
    def get_depth(self) -> 'float': ...
    def get_local_shape(self) -> 'Object': ...
    def get_collider(self) -> 'Object': ...
    def get_collider_id(self) -> 'int': ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider_shape(self) -> 'Object': ...
    def get_collider_shape_index(self) -> 'int': ...
    def get_collider_velocity(self) -> 'Vector2': ...


class KinematicCollision3D(RefCounted):



    def get_travel(self) -> 'Vector3': ...
    def get_remainder(self) -> 'Vector3': ...
    def get_depth(self) -> 'float': ...
    def get_collision_count(self) -> 'int': ...
    def get_position(self, collision_index: 'int' = 0) -> 'Vector3': ...
    def get_normal(self, collision_index: 'int' = 0) -> 'Vector3': ...
    def get_angle(self, collision_index: 'int' = 0, up_direction: 'Vector3' = default('''Vector3(0, 1, 0)''')) -> 'float': ...
    def get_local_shape(self, collision_index: 'int' = 0) -> 'Object': ...
    def get_collider(self, collision_index: 'int' = 0) -> 'Object': ...
    def get_collider_id(self, collision_index: 'int' = 0) -> 'int': ...
    def get_collider_rid(self, collision_index: 'int' = 0) -> 'RID': ...
    def get_collider_shape(self, collision_index: 'int' = 0) -> 'Object': ...
    def get_collider_shape_index(self, collision_index: 'int' = 0) -> 'int': ...
    def get_collider_velocity(self, collision_index: 'int' = 0) -> 'Vector3': ...


class Label(Control):


    text: 'str'
    label_settings: 'LabelSettings'
    horizontal_alignment: 'int'
    vertical_alignment: 'int'
    autowrap_mode: 'int'
    justification_flags: 'int'
    paragraph_separator: 'str'
    clip_text: 'bool'
    text_overrun_behavior: 'int'
    ellipsis_char: 'str'
    uppercase: 'bool'
    tab_stops: 'PackedFloat32Array'
    lines_skipped: 'int'
    max_lines_visible: 'int'
    visible_characters: 'int'
    visible_characters_behavior: 'int'
    visible_ratio: 'float'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'

    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def set_label_settings(self, settings: 'LabelSettings') -> None: ...
    def get_label_settings(self) -> 'LabelSettings': ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_paragraph_separator(self, paragraph_separator: 'str') -> None: ...
    def get_paragraph_separator(self) -> 'str': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer__AutowrapMode': ...
    def set_justification_flags(self, justification_flags: 'TextServer__JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer__JustificationFlag': ...
    def set_clip_text(self, enable: 'bool') -> None: ...
    def is_clipping_text(self) -> 'bool': ...
    def set_tab_stops(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def get_tab_stops(self) -> 'PackedFloat32Array': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer__OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer__OverrunBehavior': ...
    def set_ellipsis_char(self, char: 'str') -> None: ...
    def get_ellipsis_char(self) -> 'str': ...
    def set_uppercase(self, enable: 'bool') -> None: ...
    def is_uppercase(self) -> 'bool': ...
    def get_line_height(self, line: 'int' = -1) -> 'int': ...
    def get_line_count(self) -> 'int': ...
    def get_visible_line_count(self) -> 'int': ...
    def get_total_character_count(self) -> 'int': ...
    def set_visible_characters(self, amount: 'int') -> None: ...
    def get_visible_characters(self) -> 'int': ...
    def get_visible_characters_behavior(self) -> 'TextServer__VisibleCharactersBehavior': ...
    def set_visible_characters_behavior(self, behavior: 'TextServer__VisibleCharactersBehavior') -> None: ...
    def set_visible_ratio(self, ratio: 'float') -> None: ...
    def get_visible_ratio(self) -> 'float': ...
    def set_lines_skipped(self, lines_skipped: 'int') -> None: ...
    def get_lines_skipped(self) -> 'int': ...
    def set_max_lines_visible(self, lines_visible: 'int') -> None: ...
    def get_max_lines_visible(self) -> 'int': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def get_character_bounds(self, pos: 'int') -> 'Rect2': ...


class Label3D(GeometryInstance3D):


    pixel_size: 'float'
    offset: 'Vector2'
    billboard: 'int'
    shaded: 'bool'
    double_sided: 'bool'
    no_depth_test: 'bool'
    fixed_size: 'bool'
    alpha_cut: 'int'
    alpha_scissor_threshold: 'float'
    alpha_hash_scale: 'float'
    alpha_antialiasing_mode: 'int'
    alpha_antialiasing_edge: 'float'
    texture_filter: 'int'
    render_priority: 'int'
    outline_render_priority: 'int'
    modulate: 'Color'
    outline_modulate: 'Color'
    text: 'str'
    font: 'Font'
    font_size: 'int'
    outline_size: 'int'
    horizontal_alignment: 'int'
    vertical_alignment: 'int'
    uppercase: 'bool'
    line_spacing: 'float'
    autowrap_mode: 'int'
    justification_flags: 'int'
    width: 'float'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'

    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_outline_modulate(self, modulate: 'Color') -> None: ...
    def get_outline_modulate(self) -> 'Color': ...
    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def set_text_direction(self, direction: 'TextServer__Direction') -> None: ...
    def get_text_direction(self) -> 'TextServer__Direction': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_uppercase(self, enable: 'bool') -> None: ...
    def is_uppercase(self) -> 'bool': ...
    def set_render_priority(self, priority: 'int') -> None: ...
    def get_render_priority(self) -> 'int': ...
    def set_outline_render_priority(self, priority: 'int') -> None: ...
    def get_outline_render_priority(self) -> 'int': ...
    def set_font(self, font: 'Font') -> None: ...
    def get_font(self) -> 'Font': ...
    def set_font_size(self, size: 'int') -> None: ...
    def get_font_size(self) -> 'int': ...
    def set_outline_size(self, outline_size: 'int') -> None: ...
    def get_outline_size(self) -> 'int': ...
    def set_line_spacing(self, line_spacing: 'float') -> None: ...
    def get_line_spacing(self) -> 'float': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer__AutowrapMode': ...
    def set_justification_flags(self, justification_flags: 'TextServer__JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer__JustificationFlag': ...
    def set_width(self, width: 'float') -> None: ...
    def get_width(self) -> 'float': ...
    def set_pixel_size(self, pixel_size: 'float') -> None: ...
    def get_pixel_size(self) -> 'float': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_draw_flag(self, flag: 'Label3D__DrawFlags', enabled: 'bool') -> None: ...
    def get_draw_flag(self, flag: 'Label3D__DrawFlags') -> 'bool': ...
    def set_billboard_mode(self, mode: 'BaseMaterial3D__BillboardMode') -> None: ...
    def get_billboard_mode(self) -> 'BaseMaterial3D__BillboardMode': ...
    def set_alpha_cut_mode(self, mode: 'Label3D__AlphaCutMode') -> None: ...
    def get_alpha_cut_mode(self) -> 'Label3D__AlphaCutMode': ...
    def set_alpha_scissor_threshold(self, threshold: 'float') -> None: ...
    def get_alpha_scissor_threshold(self) -> 'float': ...
    def set_alpha_hash_scale(self, threshold: 'float') -> None: ...
    def get_alpha_hash_scale(self) -> 'float': ...
    def set_alpha_antialiasing(self, alpha_aa: 'BaseMaterial3D__AlphaAntiAliasing') -> None: ...
    def get_alpha_antialiasing(self) -> 'BaseMaterial3D__AlphaAntiAliasing': ...
    def set_alpha_antialiasing_edge(self, edge: 'float') -> None: ...
    def get_alpha_antialiasing_edge(self) -> 'float': ...
    def set_texture_filter(self, mode: 'BaseMaterial3D__TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'BaseMaterial3D__TextureFilter': ...
    def generate_triangle_mesh(self) -> 'TriangleMesh': ...


class LabelSettings(Resource):


    line_spacing: 'float'
    paragraph_spacing: 'float'
    font: 'Font'
    font_size: 'int'
    font_color: 'Color'
    outline_size: 'int'
    outline_color: 'Color'
    shadow_size: 'int'
    shadow_color: 'Color'
    shadow_offset: 'Vector2'

    def set_line_spacing(self, spacing: 'float') -> None: ...
    def get_line_spacing(self) -> 'float': ...
    def set_paragraph_spacing(self, spacing: 'float') -> None: ...
    def get_paragraph_spacing(self) -> 'float': ...
    def set_font(self, font: 'Font') -> None: ...
    def get_font(self) -> 'Font': ...
    def set_font_size(self, size: 'int') -> None: ...
    def get_font_size(self) -> 'int': ...
    def set_font_color(self, color: 'Color') -> None: ...
    def get_font_color(self) -> 'Color': ...
    def set_outline_size(self, size: 'int') -> None: ...
    def get_outline_size(self) -> 'int': ...
    def set_outline_color(self, color: 'Color') -> None: ...
    def get_outline_color(self) -> 'Color': ...
    def set_shadow_size(self, size: 'int') -> None: ...
    def get_shadow_size(self) -> 'int': ...
    def set_shadow_color(self, color: 'Color') -> None: ...
    def get_shadow_color(self) -> 'Color': ...
    def set_shadow_offset(self, offset: 'Vector2') -> None: ...
    def get_shadow_offset(self) -> 'Vector2': ...


class Light2D(Node2D):


    enabled: 'bool'
    editor_only: 'bool'
    color: 'Color'
    energy: 'float'
    blend_mode: 'int'
    range_z_min: 'int'
    range_z_max: 'int'
    range_layer_min: 'int'
    range_layer_max: 'int'
    range_item_cull_mask: 'int'
    shadow_enabled: 'bool'
    shadow_color: 'Color'
    shadow_filter: 'int'
    shadow_filter_smooth: 'float'
    shadow_item_cull_mask: 'int'

    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_editor_only(self, editor_only: 'bool') -> None: ...
    def is_editor_only(self) -> 'bool': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_energy(self, energy: 'float') -> None: ...
    def get_energy(self) -> 'float': ...
    def set_z_range_min(self, z: 'int') -> None: ...
    def get_z_range_min(self) -> 'int': ...
    def set_z_range_max(self, z: 'int') -> None: ...
    def get_z_range_max(self) -> 'int': ...
    def set_layer_range_min(self, layer: 'int') -> None: ...
    def get_layer_range_min(self) -> 'int': ...
    def set_layer_range_max(self, layer: 'int') -> None: ...
    def get_layer_range_max(self) -> 'int': ...
    def set_item_cull_mask(self, item_cull_mask: 'int') -> None: ...
    def get_item_cull_mask(self) -> 'int': ...
    def set_item_shadow_cull_mask(self, item_shadow_cull_mask: 'int') -> None: ...
    def get_item_shadow_cull_mask(self) -> 'int': ...
    def set_shadow_enabled(self, enabled: 'bool') -> None: ...
    def is_shadow_enabled(self) -> 'bool': ...
    def set_shadow_smooth(self, smooth: 'float') -> None: ...
    def get_shadow_smooth(self) -> 'float': ...
    def set_shadow_filter(self, filter: 'Light2D__ShadowFilter') -> None: ...
    def get_shadow_filter(self) -> 'Light2D__ShadowFilter': ...
    def set_shadow_color(self, shadow_color: 'Color') -> None: ...
    def get_shadow_color(self) -> 'Color': ...
    def set_blend_mode(self, mode: 'Light2D__BlendMode') -> None: ...
    def get_blend_mode(self) -> 'Light2D__BlendMode': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...


class Light3D(VisualInstance3D):


    light_intensity_lumens: 'float'
    light_intensity_lux: 'float'
    light_temperature: 'float'
    light_color: 'Color'
    light_energy: 'float'
    light_indirect_energy: 'float'
    light_volumetric_fog_energy: 'float'
    light_projector: 'Texture2D' | 'CompressedTexture2D' | 'CurveTexture' | 'CurveXYZTexture' | 'ExternalTexture' | 'GradientTexture1D' | 'GradientTexture2D' | 'ImageTexture' | 'NoiseTexture2D' | 'PlaceholderTexture2D' | 'PortableCompressedTexture2D'
    light_size: 'float'
    light_angular_distance: 'float'
    light_negative: 'bool'
    light_specular: 'float'
    light_bake_mode: 'int'
    light_cull_mask: 'int'
    shadow_enabled: 'bool'
    shadow_bias: 'float'
    shadow_normal_bias: 'float'
    shadow_reverse_cull_face: 'bool'
    shadow_transmittance_bias: 'float'
    shadow_opacity: 'float'
    shadow_blur: 'float'
    shadow_caster_mask: 'int'
    distance_fade_enabled: 'bool'
    distance_fade_begin: 'float'
    distance_fade_shadow: 'float'
    distance_fade_length: 'float'
    editor_only: 'bool'

    def set_editor_only(self, editor_only: 'bool') -> None: ...
    def is_editor_only(self) -> 'bool': ...
    def set_param(self, param: 'Light3D__Param', value: 'float') -> None: ...
    def get_param(self, param: 'Light3D__Param') -> 'float': ...
    def set_shadow(self, enabled: 'bool') -> None: ...
    def has_shadow(self) -> 'bool': ...
    def set_negative(self, enabled: 'bool') -> None: ...
    def is_negative(self) -> 'bool': ...
    def set_cull_mask(self, cull_mask: 'int') -> None: ...
    def get_cull_mask(self) -> 'int': ...
    def set_enable_distance_fade(self, enable: 'bool') -> None: ...
    def is_distance_fade_enabled(self) -> 'bool': ...
    def set_distance_fade_begin(self, distance: 'float') -> None: ...
    def get_distance_fade_begin(self) -> 'float': ...
    def set_distance_fade_shadow(self, distance: 'float') -> None: ...
    def get_distance_fade_shadow(self) -> 'float': ...
    def set_distance_fade_length(self, distance: 'float') -> None: ...
    def get_distance_fade_length(self) -> 'float': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_shadow_reverse_cull_face(self, enable: 'bool') -> None: ...
    def get_shadow_reverse_cull_face(self) -> 'bool': ...
    def set_shadow_caster_mask(self, caster_mask: 'int') -> None: ...
    def get_shadow_caster_mask(self) -> 'int': ...
    def set_bake_mode(self, bake_mode: 'Light3D__BakeMode') -> None: ...
    def get_bake_mode(self) -> 'Light3D__BakeMode': ...
    def set_projector(self, projector: 'Texture2D') -> None: ...
    def get_projector(self) -> 'Texture2D': ...
    def set_temperature(self, temperature: 'float') -> None: ...
    def get_temperature(self) -> 'float': ...
    def get_correlated_color(self) -> 'Color': ...


class LightOccluder2D(Node2D):


    occluder: 'OccluderPolygon2D'
    sdf_collision: 'bool'
    occluder_light_mask: 'int'

    def set_occluder_polygon(self, polygon: 'OccluderPolygon2D') -> None: ...
    def get_occluder_polygon(self) -> 'OccluderPolygon2D': ...
    def set_occluder_light_mask(self, mask: 'int') -> None: ...
    def get_occluder_light_mask(self) -> 'int': ...
    def set_as_sdf_collision(self, enable: 'bool') -> None: ...
    def is_set_as_sdf_collision(self) -> 'bool': ...


class LightmapGI(VisualInstance3D):


    quality: 'int'
    supersampling: 'bool'
    supersampling_factor: 'float'
    bounces: 'int'
    bounce_indirect_energy: 'float'
    directional: 'bool'
    shadowmask_mode: 'int'
    use_texture_for_bounces: 'bool'
    interior: 'bool'
    use_denoiser: 'bool'
    denoiser_strength: 'float'
    denoiser_range: 'int'
    bias: 'float'
    texel_scale: 'float'
    max_texture_size: 'int'
    environment_mode: 'int'
    environment_custom_sky: 'Sky'
    environment_custom_color: 'Color'
    environment_custom_energy: 'float'
    camera_attributes: 'CameraAttributesPractical' | 'CameraAttributesPhysical'
    generate_probes_subdiv: 'int'
    light_data: 'LightmapGIData'

    def set_light_data(self, data: 'LightmapGIData') -> None: ...
    def get_light_data(self) -> 'LightmapGIData': ...
    def set_bake_quality(self, bake_quality: 'LightmapGI__BakeQuality') -> None: ...
    def get_bake_quality(self) -> 'LightmapGI__BakeQuality': ...
    def set_bounces(self, bounces: 'int') -> None: ...
    def get_bounces(self) -> 'int': ...
    def set_bounce_indirect_energy(self, bounce_indirect_energy: 'float') -> None: ...
    def get_bounce_indirect_energy(self) -> 'float': ...
    def set_generate_probes(self, subdivision: 'LightmapGI__GenerateProbes') -> None: ...
    def get_generate_probes(self) -> 'LightmapGI__GenerateProbes': ...
    def set_bias(self, bias: 'float') -> None: ...
    def get_bias(self) -> 'float': ...
    def set_environment_mode(self, mode: 'LightmapGI__EnvironmentMode') -> None: ...
    def get_environment_mode(self) -> 'LightmapGI__EnvironmentMode': ...
    def set_environment_custom_sky(self, sky: 'Sky') -> None: ...
    def get_environment_custom_sky(self) -> 'Sky': ...
    def set_environment_custom_color(self, color: 'Color') -> None: ...
    def get_environment_custom_color(self) -> 'Color': ...
    def set_environment_custom_energy(self, energy: 'float') -> None: ...
    def get_environment_custom_energy(self) -> 'float': ...
    def set_texel_scale(self, texel_scale: 'float') -> None: ...
    def get_texel_scale(self) -> 'float': ...
    def set_max_texture_size(self, max_texture_size: 'int') -> None: ...
    def get_max_texture_size(self) -> 'int': ...
    def set_supersampling_enabled(self, enable: 'bool') -> None: ...
    def is_supersampling_enabled(self) -> 'bool': ...
    def set_supersampling_factor(self, factor: 'float') -> None: ...
    def get_supersampling_factor(self) -> 'float': ...
    def set_use_denoiser(self, use_denoiser: 'bool') -> None: ...
    def is_using_denoiser(self) -> 'bool': ...
    def set_denoiser_strength(self, denoiser_strength: 'float') -> None: ...
    def get_denoiser_strength(self) -> 'float': ...
    def set_denoiser_range(self, denoiser_range: 'int') -> None: ...
    def get_denoiser_range(self) -> 'int': ...
    def set_interior(self, enable: 'bool') -> None: ...
    def is_interior(self) -> 'bool': ...
    def set_directional(self, directional: 'bool') -> None: ...
    def is_directional(self) -> 'bool': ...
    def set_shadowmask_mode(self, mode: 'LightmapGIData__ShadowmaskMode') -> None: ...
    def get_shadowmask_mode(self) -> 'LightmapGIData__ShadowmaskMode': ...
    def set_use_texture_for_bounces(self, use_texture_for_bounces: 'bool') -> None: ...
    def is_using_texture_for_bounces(self) -> 'bool': ...
    def set_camera_attributes(self, camera_attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...


class LightmapGIData(Resource):


    lightmap_textures: 'Array'['TextureLayered']
    shadowmask_textures: 'Array'['TextureLayered']
    uses_spherical_harmonics: 'bool'
    user_data: 'Array'
    probe_data: 'Dictionary'
    light_texture: 'TextureLayered'
    light_textures: 'Array'

    def set_lightmap_textures(self, light_textures: 'Array'['TextureLayered']) -> None: ...
    def get_lightmap_textures(self) -> 'Array'['TextureLayered']: ...
    def set_shadowmask_textures(self, shadowmask_textures: 'Array'['TextureLayered']) -> None: ...
    def get_shadowmask_textures(self) -> 'Array'['TextureLayered']: ...
    def set_uses_spherical_harmonics(self, uses_spherical_harmonics: 'bool') -> None: ...
    def is_using_spherical_harmonics(self) -> 'bool': ...
    def add_user(self, path: 'NodePath', uv_scale: 'Rect2', slice_index: 'int', sub_instance: 'int') -> None: ...
    def get_user_count(self) -> 'int': ...
    def get_user_path(self, user_idx: 'int') -> 'NodePath': ...
    def clear_users(self) -> None: ...
    def set_light_texture(self, light_texture: 'TextureLayered') -> None: ...
    def get_light_texture(self) -> 'TextureLayered': ...


class LightmapProbe(Node3D): ...


class Lightmapper(RefCounted): ...


class LightmapperRD(Lightmapper): ...


class Line2D(Node2D):


    points: 'PackedVector2Array'
    closed: 'bool'
    width: 'float'
    width_curve: 'Curve'
    default_color: 'Color'
    gradient: 'Gradient'
    texture: 'Texture2D'
    texture_mode: 'int'
    joint_mode: 'int'
    begin_cap_mode: 'int'
    end_cap_mode: 'int'
    sharp_limit: 'float'
    round_precision: 'int'
    antialiased: 'bool'

    def set_points(self, points: 'PackedVector2Array') -> None: ...
    def get_points(self) -> 'PackedVector2Array': ...
    def set_point_position(self, index: 'int', position: 'Vector2') -> None: ...
    def get_point_position(self, index: 'int') -> 'Vector2': ...
    def get_point_count(self) -> 'int': ...
    def add_point(self, position: 'Vector2', index: 'int' = -1) -> None: ...
    def remove_point(self, index: 'int') -> None: ...
    def clear_points(self) -> None: ...
    def set_closed(self, closed: 'bool') -> None: ...
    def is_closed(self) -> 'bool': ...
    def set_width(self, width: 'float') -> None: ...
    def get_width(self) -> 'float': ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    def set_default_color(self, color: 'Color') -> None: ...
    def get_default_color(self) -> 'Color': ...
    def set_gradient(self, color: 'Gradient') -> None: ...
    def get_gradient(self) -> 'Gradient': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_mode(self, mode: 'Line2D__LineTextureMode') -> None: ...
    def get_texture_mode(self) -> 'Line2D__LineTextureMode': ...
    def set_joint_mode(self, mode: 'Line2D__LineJointMode') -> None: ...
    def get_joint_mode(self) -> 'Line2D__LineJointMode': ...
    def set_begin_cap_mode(self, mode: 'Line2D__LineCapMode') -> None: ...
    def get_begin_cap_mode(self) -> 'Line2D__LineCapMode': ...
    def set_end_cap_mode(self, mode: 'Line2D__LineCapMode') -> None: ...
    def get_end_cap_mode(self) -> 'Line2D__LineCapMode': ...
    def set_sharp_limit(self, limit: 'float') -> None: ...
    def get_sharp_limit(self) -> 'float': ...
    def set_round_precision(self, precision: 'int') -> None: ...
    def get_round_precision(self) -> 'int': ...
    def set_antialiased(self, antialiased: 'bool') -> None: ...
    def get_antialiased(self) -> 'bool': ...


class LineEdit(Control):


    text: 'str'
    placeholder_text: 'str'
    alignment: 'int'
    max_length: 'int'
    editable: 'bool'
    keep_editing_on_text_submit: 'bool'
    expand_to_text_length: 'bool'
    context_menu_enabled: 'bool'
    emoji_menu_enabled: 'bool'
    virtual_keyboard_enabled: 'bool'
    virtual_keyboard_type: 'int'
    clear_button_enabled: 'bool'
    shortcut_keys_enabled: 'bool'
    middle_mouse_paste_enabled: 'bool'
    selecting_enabled: 'bool'
    deselect_on_focus_loss_enabled: 'bool'
    drag_and_drop_selection_enabled: 'bool'
    right_icon: 'Texture2D'
    flat: 'bool'
    draw_control_chars: 'bool'
    select_all_on_focus: 'bool'
    caret_blink: 'bool'
    caret_blink_interval: 'float'
    caret_column: 'int'
    caret_force_displayed: 'bool'
    caret_mid_grapheme: 'bool'
    secret: 'bool'
    secret_character: 'str'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'
    text_changed: 'Signal[Callable[[str], None]]'  # text_changed(new_text: String)
    text_change_rejected: 'Signal[Callable[[str], None]]'  # text_change_rejected(rejected_substring: String)
    text_submitted: 'Signal[Callable[[str], None]]'  # text_submitted(new_text: String)
    editing_toggled: 'Signal[Callable[[bool], None]]'  # editing_toggled(toggled_on: bool)

    def has_ime_text(self) -> 'bool': ...
    def cancel_ime(self) -> None: ...
    def apply_ime(self) -> None: ...
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def edit(self) -> None: ...
    def unedit(self) -> None: ...
    def is_editing(self) -> 'bool': ...
    def set_keep_editing_on_text_submit(self, enable: 'bool') -> None: ...
    def is_editing_kept_on_text_submit(self) -> 'bool': ...
    def clear(self) -> None: ...
    def select(self, from_: 'int' = 0, to: 'int' = -1) -> None: ...
    def select_all(self) -> None: ...
    def deselect(self) -> None: ...
    def has_undo(self) -> 'bool': ...
    def has_redo(self) -> 'bool': ...
    def has_selection(self) -> 'bool': ...
    def get_selected_text(self) -> 'str': ...
    def get_selection_from_column(self) -> 'int': ...
    def get_selection_to_column(self) -> 'int': ...
    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def get_draw_control_chars(self) -> 'bool': ...
    def set_draw_control_chars(self, enable: 'bool') -> None: ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_placeholder(self, text: 'str') -> None: ...
    def get_placeholder(self) -> 'str': ...
    def set_caret_column(self, position: 'int') -> None: ...
    def get_caret_column(self) -> 'int': ...
    def get_scroll_offset(self) -> 'float': ...
    def set_expand_to_text_length_enabled(self, enabled: 'bool') -> None: ...
    def is_expand_to_text_length_enabled(self) -> 'bool': ...
    def set_caret_blink_enabled(self, enabled: 'bool') -> None: ...
    def is_caret_blink_enabled(self) -> 'bool': ...
    def set_caret_mid_grapheme_enabled(self, enabled: 'bool') -> None: ...
    def is_caret_mid_grapheme_enabled(self) -> 'bool': ...
    def set_caret_force_displayed(self, enabled: 'bool') -> None: ...
    def is_caret_force_displayed(self) -> 'bool': ...
    def set_caret_blink_interval(self, interval: 'float') -> None: ...
    def get_caret_blink_interval(self) -> 'float': ...
    def set_max_length(self, chars: 'int') -> None: ...
    def get_max_length(self) -> 'int': ...
    def insert_text_at_caret(self, text: 'str') -> None: ...
    def delete_char_at_caret(self) -> None: ...
    def delete_text(self, from_column: 'int', to_column: 'int') -> None: ...
    def set_editable(self, enabled: 'bool') -> None: ...
    def is_editable(self) -> 'bool': ...
    def set_secret(self, enabled: 'bool') -> None: ...
    def is_secret(self) -> 'bool': ...
    def set_secret_character(self, character: 'str') -> None: ...
    def get_secret_character(self) -> 'str': ...
    def menu_option(self, option: 'int') -> None: ...
    def get_menu(self) -> 'PopupMenu': ...
    def is_menu_visible(self) -> 'bool': ...
    def set_context_menu_enabled(self, enable: 'bool') -> None: ...
    def is_context_menu_enabled(self) -> 'bool': ...
    def set_emoji_menu_enabled(self, enable: 'bool') -> None: ...
    def is_emoji_menu_enabled(self) -> 'bool': ...
    def set_virtual_keyboard_enabled(self, enable: 'bool') -> None: ...
    def is_virtual_keyboard_enabled(self) -> 'bool': ...
    def set_virtual_keyboard_type(self, type: 'LineEdit__VirtualKeyboardType') -> None: ...
    def get_virtual_keyboard_type(self) -> 'LineEdit__VirtualKeyboardType': ...
    def set_clear_button_enabled(self, enable: 'bool') -> None: ...
    def is_clear_button_enabled(self) -> 'bool': ...
    def set_shortcut_keys_enabled(self, enable: 'bool') -> None: ...
    def is_shortcut_keys_enabled(self) -> 'bool': ...
    def set_middle_mouse_paste_enabled(self, enable: 'bool') -> None: ...
    def is_middle_mouse_paste_enabled(self) -> 'bool': ...
    def set_selecting_enabled(self, enable: 'bool') -> None: ...
    def is_selecting_enabled(self) -> 'bool': ...
    def set_deselect_on_focus_loss_enabled(self, enable: 'bool') -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> 'bool': ...
    def set_drag_and_drop_selection_enabled(self, enable: 'bool') -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> 'bool': ...
    def set_right_icon(self, icon: 'Texture2D') -> None: ...
    def get_right_icon(self) -> 'Texture2D': ...
    def set_flat(self, enabled: 'bool') -> None: ...
    def is_flat(self) -> 'bool': ...
    def set_select_all_on_focus(self, enabled: 'bool') -> None: ...
    def is_select_all_on_focus(self) -> 'bool': ...


class LinkButton(BaseButton):


    text: 'str'
    underline: 'int'
    uri: 'str'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'

    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_uri(self, uri: 'str') -> None: ...
    def get_uri(self) -> 'str': ...
    def set_underline_mode(self, underline_mode: 'LinkButton__UnderlineMode') -> None: ...
    def get_underline_mode(self) -> 'LinkButton__UnderlineMode': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...


class LookAtModifier3D(SkeletonModifier3D):


    target_node: 'NodePath'
    bone_name: 'str'
    bone: 'int'
    forward_axis: 'int'
    primary_rotation_axis: 'int'
    use_secondary_rotation: 'bool'
    origin_from: 'int'
    origin_bone_name: 'str'
    origin_bone: 'int'
    origin_external_node: 'NodePath'
    origin_offset: 'Vector3'
    origin_safe_margin: 'float'
    duration: 'float'
    transition_type: 'int'
    ease_type: 'int'
    use_angle_limitation: 'bool'
    symmetry_limitation: 'bool'
    primary_limit_angle: 'float'
    primary_damp_threshold: 'float'
    primary_positive_limit_angle: 'float'
    primary_positive_damp_threshold: 'float'
    primary_negative_limit_angle: 'float'
    primary_negative_damp_threshold: 'float'
    secondary_limit_angle: 'float'
    secondary_damp_threshold: 'float'
    secondary_positive_limit_angle: 'float'
    secondary_positive_damp_threshold: 'float'
    secondary_negative_limit_angle: 'float'
    secondary_negative_damp_threshold: 'float'

    def set_target_node(self, target_node: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_bone_name(self, bone_name: 'str') -> None: ...
    def get_bone_name(self) -> 'str': ...
    def set_bone(self, bone: 'int') -> None: ...
    def get_bone(self) -> 'int': ...
    def set_forward_axis(self, forward_axis: 'SkeletonModifier3D__BoneAxis') -> None: ...
    def get_forward_axis(self) -> 'SkeletonModifier3D__BoneAxis': ...
    def set_primary_rotation_axis(self, axis: 'Vector3__Axis') -> None: ...
    def get_primary_rotation_axis(self) -> 'Vector3__Axis': ...
    def set_use_secondary_rotation(self, enabled: 'bool') -> None: ...
    def is_using_secondary_rotation(self) -> 'bool': ...
    def set_origin_safe_margin(self, margin: 'float') -> None: ...
    def get_origin_safe_margin(self) -> 'float': ...
    def set_origin_from(self, origin_from: 'LookAtModifier3D__OriginFrom') -> None: ...
    def get_origin_from(self) -> 'LookAtModifier3D__OriginFrom': ...
    def set_origin_bone_name(self, bone_name: 'str') -> None: ...
    def get_origin_bone_name(self) -> 'str': ...
    def set_origin_bone(self, bone: 'int') -> None: ...
    def get_origin_bone(self) -> 'int': ...
    def set_origin_external_node(self, external_node: 'NodePath') -> None: ...
    def get_origin_external_node(self) -> 'NodePath': ...
    def set_origin_offset(self, offset: 'Vector3') -> None: ...
    def get_origin_offset(self) -> 'Vector3': ...
    def set_duration(self, duration: 'float') -> None: ...
    def get_duration(self) -> 'float': ...
    def set_transition_type(self, transition_type: 'Tween__TransitionType') -> None: ...
    def get_transition_type(self) -> 'Tween__TransitionType': ...
    def set_ease_type(self, ease_type: 'Tween__EaseType') -> None: ...
    def get_ease_type(self) -> 'Tween__EaseType': ...
    def set_use_angle_limitation(self, enabled: 'bool') -> None: ...
    def is_using_angle_limitation(self) -> 'bool': ...
    def set_symmetry_limitation(self, enabled: 'bool') -> None: ...
    def is_limitation_symmetry(self) -> 'bool': ...
    def set_primary_limit_angle(self, angle: 'float') -> None: ...
    def get_primary_limit_angle(self) -> 'float': ...
    def set_primary_damp_threshold(self, power: 'float') -> None: ...
    def get_primary_damp_threshold(self) -> 'float': ...
    def set_primary_positive_limit_angle(self, angle: 'float') -> None: ...
    def get_primary_positive_limit_angle(self) -> 'float': ...
    def set_primary_positive_damp_threshold(self, power: 'float') -> None: ...
    def get_primary_positive_damp_threshold(self) -> 'float': ...
    def set_primary_negative_limit_angle(self, angle: 'float') -> None: ...
    def get_primary_negative_limit_angle(self) -> 'float': ...
    def set_primary_negative_damp_threshold(self, power: 'float') -> None: ...
    def get_primary_negative_damp_threshold(self) -> 'float': ...
    def set_secondary_limit_angle(self, angle: 'float') -> None: ...
    def get_secondary_limit_angle(self) -> 'float': ...
    def set_secondary_damp_threshold(self, power: 'float') -> None: ...
    def get_secondary_damp_threshold(self) -> 'float': ...
    def set_secondary_positive_limit_angle(self, angle: 'float') -> None: ...
    def get_secondary_positive_limit_angle(self) -> 'float': ...
    def set_secondary_positive_damp_threshold(self, power: 'float') -> None: ...
    def get_secondary_positive_damp_threshold(self) -> 'float': ...
    def set_secondary_negative_limit_angle(self, angle: 'float') -> None: ...
    def get_secondary_negative_limit_angle(self) -> 'float': ...
    def set_secondary_negative_damp_threshold(self, power: 'float') -> None: ...
    def get_secondary_negative_damp_threshold(self) -> 'float': ...
    def get_interpolation_remaining(self) -> 'float': ...
    def is_interpolating(self) -> 'bool': ...
    def is_target_within_limitation(self) -> 'bool': ...


class MainLoop(Object):


    NOTIFICATION_OS_MEMORY_WARNING: 'int' = 2009
    NOTIFICATION_TRANSLATION_CHANGED: 'int' = 2010
    NOTIFICATION_WM_ABOUT: 'int' = 2011
    NOTIFICATION_CRASH: 'int' = 2012
    NOTIFICATION_OS_IME_UPDATE: 'int' = 2013
    NOTIFICATION_APPLICATION_RESUMED: 'int' = 2014
    NOTIFICATION_APPLICATION_PAUSED: 'int' = 2015
    NOTIFICATION_APPLICATION_FOCUS_IN: 'int' = 2016
    NOTIFICATION_APPLICATION_FOCUS_OUT: 'int' = 2017
    NOTIFICATION_TEXT_SERVER_CHANGED: 'int' = 2018
    on_request_permissions_result: 'Signal[Callable[[str, bool], None]]'  # on_request_permissions_result(permission: String, granted: bool)

    def _initialize(self) -> None: ...
    def _physics_process(self, delta: 'float') -> 'bool': ...
    def _process(self, delta: 'float') -> 'bool': ...
    def _finalize(self) -> None: ...


class MarginContainer(Container): ...


class Marker2D(Node2D):


    gizmo_extents: 'float'

    def set_gizmo_extents(self, extents: 'float') -> None: ...
    def get_gizmo_extents(self) -> 'float': ...


class Marker3D(Node3D):


    gizmo_extents: 'float'

    def set_gizmo_extents(self, extents: 'float') -> None: ...
    def get_gizmo_extents(self) -> 'float': ...


class Marshalls(Object):



    def variant_to_base64(self, variant: 'Variant', full_objects: 'bool' = False) -> 'str': ...
    def base64_to_variant(self, base64_str: 'str', allow_objects: 'bool' = False) -> 'Variant': ...
    def raw_to_base64(self, array: 'PackedByteArray') -> 'str': ...
    def base64_to_raw(self, base64_str: 'str') -> 'PackedByteArray': ...
    def utf8_to_base64(self, utf8_str: 'str') -> 'str': ...
    def base64_to_utf8(self, base64_str: 'str') -> 'str': ...


class Material(Resource):


    render_priority: 'int'
    next_pass: 'Material'
    RENDER_PRIORITY_MAX: 'int' = 127
    RENDER_PRIORITY_MIN: 'int' = -128

    def _get_shader_rid(self) -> 'RID': ...
    def _get_shader_mode(self) -> 'Shader__Mode': ...
    def _can_do_next_pass(self) -> 'bool': ...
    def _can_use_render_priority(self) -> 'bool': ...
    def set_next_pass(self, next_pass: 'Material') -> None: ...
    def get_next_pass(self) -> 'Material': ...
    def set_render_priority(self, priority: 'int') -> None: ...
    def get_render_priority(self) -> 'int': ...
    def inspect_native_shader_code(self) -> None: ...
    def create_placeholder(self) -> 'Resource': ...


class MenuBar(Control):


    flat: 'bool'
    start_index: 'int'
    switch_on_hover: 'bool'
    prefer_global_menu: 'bool'
    text_direction: 'int'
    language: 'str'

    def set_switch_on_hover(self, enable: 'bool') -> None: ...
    def is_switch_on_hover(self) -> 'bool': ...
    def set_disable_shortcuts(self, disabled: 'bool') -> None: ...
    def set_prefer_global_menu(self, enabled: 'bool') -> None: ...
    def is_prefer_global_menu(self) -> 'bool': ...
    def is_native_menu(self) -> 'bool': ...
    def get_menu_count(self) -> 'int': ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_flat(self, enabled: 'bool') -> None: ...
    def is_flat(self) -> 'bool': ...
    def set_start_index(self, enabled: 'int') -> None: ...
    def get_start_index(self) -> 'int': ...
    def set_menu_title(self, menu: 'int', title: 'str') -> None: ...
    def get_menu_title(self, menu: 'int') -> 'str': ...
    def set_menu_tooltip(self, menu: 'int', tooltip: 'str') -> None: ...
    def get_menu_tooltip(self, menu: 'int') -> 'str': ...
    def set_menu_disabled(self, menu: 'int', disabled: 'bool') -> None: ...
    def is_menu_disabled(self, menu: 'int') -> 'bool': ...
    def set_menu_hidden(self, menu: 'int', hidden: 'bool') -> None: ...
    def is_menu_hidden(self, menu: 'int') -> 'bool': ...
    def get_menu_popup(self, menu: 'int') -> 'PopupMenu': ...


class MenuButton(Button):


    switch_on_hover: 'bool'
    item_count: 'int'
    about_to_popup: 'Signal[Callable[[], None]]'  # about_to_popup()

    def get_popup(self) -> 'PopupMenu': ...
    def show_popup(self) -> None: ...
    def set_switch_on_hover(self, enable: 'bool') -> None: ...
    def is_switch_on_hover(self) -> 'bool': ...
    def set_disable_shortcuts(self, disabled: 'bool') -> None: ...
    def set_item_count(self, count: 'int') -> None: ...
    def get_item_count(self) -> 'int': ...


class Mesh(Resource):


    lightmap_size_hint: 'Vector2i'

    def _get_surface_count(self) -> 'int': ...
    def _surface_get_array_len(self, index: 'int') -> 'int': ...
    def _surface_get_array_index_len(self, index: 'int') -> 'int': ...
    def _surface_get_arrays(self, index: 'int') -> 'Array': ...
    def _surface_get_blend_shape_arrays(self, index: 'int') -> 'Array'['Array']: ...
    def _surface_get_lods(self, index: 'int') -> 'Dictionary': ...
    def _surface_get_format(self, index: 'int') -> 'int': ...
    def _surface_get_primitive_type(self, index: 'int') -> 'int': ...
    def _surface_set_material(self, index: 'int', material: 'Material') -> None: ...
    def _surface_get_material(self, index: 'int') -> 'Material': ...
    def _get_blend_shape_count(self) -> 'int': ...
    def _get_blend_shape_name(self, index: 'int') -> 'StringName': ...
    def _set_blend_shape_name(self, index: 'int', name: 'StringName') -> None: ...
    def _get_aabb(self) -> 'AABB': ...
    def set_lightmap_size_hint(self, size: 'Vector2i') -> None: ...
    def get_lightmap_size_hint(self) -> 'Vector2i': ...
    def get_aabb(self) -> 'AABB': ...
    def get_faces(self) -> 'PackedVector3Array': ...
    def get_surface_count(self) -> 'int': ...
    def surface_get_arrays(self, surf_idx: 'int') -> 'Array': ...
    def surface_get_blend_shape_arrays(self, surf_idx: 'int') -> 'Array'['Array']: ...
    def surface_set_material(self, surf_idx: 'int', material: 'Material') -> None: ...
    def surface_get_material(self, surf_idx: 'int') -> 'Material': ...
    def create_placeholder(self) -> 'Resource': ...
    def create_trimesh_shape(self) -> 'ConcavePolygonShape3D': ...
    def create_convex_shape(self, clean: 'bool' = True, simplify: 'bool' = False) -> 'ConvexPolygonShape3D': ...
    def create_outline(self, margin: 'float') -> 'Mesh': ...
    def generate_triangle_mesh(self) -> 'TriangleMesh': ...


class MeshConvexDecompositionSettings(RefCounted):


    max_concavity: 'float'
    symmetry_planes_clipping_bias: 'float'
    revolution_axes_clipping_bias: 'float'
    min_volume_per_convex_hull: 'float'
    resolution: 'int'
    max_num_vertices_per_convex_hull: 'int'
    plane_downsampling: 'int'
    convex_hull_downsampling: 'int'
    normalize_mesh: 'bool'
    mode: 'int'
    convex_hull_approximation: 'bool'
    max_convex_hulls: 'int'
    project_hull_vertices: 'bool'

    def set_max_concavity(self, max_concavity: 'float') -> None: ...
    def get_max_concavity(self) -> 'float': ...
    def set_symmetry_planes_clipping_bias(self, symmetry_planes_clipping_bias: 'float') -> None: ...
    def get_symmetry_planes_clipping_bias(self) -> 'float': ...
    def set_revolution_axes_clipping_bias(self, revolution_axes_clipping_bias: 'float') -> None: ...
    def get_revolution_axes_clipping_bias(self) -> 'float': ...
    def set_min_volume_per_convex_hull(self, min_volume_per_convex_hull: 'float') -> None: ...
    def get_min_volume_per_convex_hull(self) -> 'float': ...
    def set_resolution(self, min_volume_per_convex_hull: 'int') -> None: ...
    def get_resolution(self) -> 'int': ...
    def set_max_num_vertices_per_convex_hull(self, max_num_vertices_per_convex_hull: 'int') -> None: ...
    def get_max_num_vertices_per_convex_hull(self) -> 'int': ...
    def set_plane_downsampling(self, plane_downsampling: 'int') -> None: ...
    def get_plane_downsampling(self) -> 'int': ...
    def set_convex_hull_downsampling(self, convex_hull_downsampling: 'int') -> None: ...
    def get_convex_hull_downsampling(self) -> 'int': ...
    def set_normalize_mesh(self, normalize_mesh: 'bool') -> None: ...
    def get_normalize_mesh(self) -> 'bool': ...
    def set_mode(self, mode: 'MeshConvexDecompositionSettings__Mode') -> None: ...
    def get_mode(self) -> 'MeshConvexDecompositionSettings__Mode': ...
    def set_convex_hull_approximation(self, convex_hull_approximation: 'bool') -> None: ...
    def get_convex_hull_approximation(self) -> 'bool': ...
    def set_max_convex_hulls(self, max_convex_hulls: 'int') -> None: ...
    def get_max_convex_hulls(self) -> 'int': ...
    def set_project_hull_vertices(self, project_hull_vertices: 'bool') -> None: ...
    def get_project_hull_vertices(self) -> 'bool': ...


class MeshDataTool(RefCounted):



    def clear(self) -> None: ...
    def create_from_surface(self, mesh: 'ArrayMesh', surface: 'int') -> 'Error': ...
    def commit_to_surface(self, mesh: 'ArrayMesh', compression_flags: 'int' = 0) -> 'Error': ...
    def get_format(self) -> 'int': ...
    def get_vertex_count(self) -> 'int': ...
    def get_edge_count(self) -> 'int': ...
    def get_face_count(self) -> 'int': ...
    def set_vertex(self, idx: 'int', vertex: 'Vector3') -> None: ...
    def get_vertex(self, idx: 'int') -> 'Vector3': ...
    def set_vertex_normal(self, idx: 'int', normal: 'Vector3') -> None: ...
    def get_vertex_normal(self, idx: 'int') -> 'Vector3': ...
    def set_vertex_tangent(self, idx: 'int', tangent: 'Plane') -> None: ...
    def get_vertex_tangent(self, idx: 'int') -> 'Plane': ...
    def set_vertex_uv(self, idx: 'int', uv: 'Vector2') -> None: ...
    def get_vertex_uv(self, idx: 'int') -> 'Vector2': ...
    def set_vertex_uv2(self, idx: 'int', uv2: 'Vector2') -> None: ...
    def get_vertex_uv2(self, idx: 'int') -> 'Vector2': ...
    def set_vertex_color(self, idx: 'int', color: 'Color') -> None: ...
    def get_vertex_color(self, idx: 'int') -> 'Color': ...
    def set_vertex_bones(self, idx: 'int', bones: 'PackedInt32Array') -> None: ...
    def get_vertex_bones(self, idx: 'int') -> 'PackedInt32Array': ...
    def set_vertex_weights(self, idx: 'int', weights: 'PackedFloat32Array') -> None: ...
    def get_vertex_weights(self, idx: 'int') -> 'PackedFloat32Array': ...
    def set_vertex_meta(self, idx: 'int', meta: 'Variant') -> None: ...
    def get_vertex_meta(self, idx: 'int') -> 'Variant': ...
    def get_vertex_edges(self, idx: 'int') -> 'PackedInt32Array': ...
    def get_vertex_faces(self, idx: 'int') -> 'PackedInt32Array': ...
    def get_edge_vertex(self, idx: 'int', vertex: 'int') -> 'int': ...
    def get_edge_faces(self, idx: 'int') -> 'PackedInt32Array': ...
    def set_edge_meta(self, idx: 'int', meta: 'Variant') -> None: ...
    def get_edge_meta(self, idx: 'int') -> 'Variant': ...
    def get_face_vertex(self, idx: 'int', vertex: 'int') -> 'int': ...
    def get_face_edge(self, idx: 'int', edge: 'int') -> 'int': ...
    def set_face_meta(self, idx: 'int', meta: 'Variant') -> None: ...
    def get_face_meta(self, idx: 'int') -> 'Variant': ...
    def get_face_normal(self, idx: 'int') -> 'Vector3': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...


class MeshInstance2D(Node2D):


    mesh: 'Mesh'
    texture: 'Texture2D'
    texture_changed: 'Signal[Callable[[], None]]'  # texture_changed()

    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...


class MeshInstance3D(GeometryInstance3D):


    mesh: 'Mesh'
    skin: 'Skin'
    skeleton: 'NodePath'

    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_skeleton_path(self, skeleton_path: 'NodePath') -> None: ...
    def get_skeleton_path(self) -> 'NodePath': ...
    def set_skin(self, skin: 'Skin') -> None: ...
    def get_skin(self) -> 'Skin': ...
    def get_skin_reference(self) -> 'SkinReference': ...
    def get_surface_override_material_count(self) -> 'int': ...
    def set_surface_override_material(self, surface: 'int', material: 'Material') -> None: ...
    def get_surface_override_material(self, surface: 'int') -> 'Material': ...
    def get_active_material(self, surface: 'int') -> 'Material': ...
    def create_trimesh_collision(self) -> None: ...
    def create_convex_collision(self, clean: 'bool' = True, simplify: 'bool' = False) -> None: ...
    def create_multiple_convex_collisions(self, settings: 'MeshConvexDecompositionSettings' = default('''null''')) -> None: ...
    def get_blend_shape_count(self) -> 'int': ...
    def find_blend_shape_by_name(self, name: 'StringName') -> 'int': ...
    def get_blend_shape_value(self, blend_shape_idx: 'int') -> 'float': ...
    def set_blend_shape_value(self, blend_shape_idx: 'int', value: 'float') -> None: ...
    def create_debug_tangents(self) -> None: ...
    def bake_mesh_from_current_blend_shape_mix(self, existing: 'ArrayMesh' = default('''null''')) -> 'ArrayMesh': ...
    def bake_mesh_from_current_skeleton_pose(self, existing: 'ArrayMesh' = default('''null''')) -> 'ArrayMesh': ...


class MeshLibrary(Resource):



    def create_item(self, id: 'int') -> None: ...
    def set_item_name(self, id: 'int', name: 'str') -> None: ...
    def set_item_mesh(self, id: 'int', mesh: 'Mesh') -> None: ...
    def set_item_mesh_transform(self, id: 'int', mesh_transform: 'Transform3D') -> None: ...
    def set_item_mesh_cast_shadow(self, id: 'int', shadow_casting_setting: 'RenderingServer__ShadowCastingSetting') -> None: ...
    def set_item_navigation_mesh(self, id: 'int', navigation_mesh: 'NavigationMesh') -> None: ...
    def set_item_navigation_mesh_transform(self, id: 'int', navigation_mesh: 'Transform3D') -> None: ...
    def set_item_navigation_layers(self, id: 'int', navigation_layers: 'int') -> None: ...
    def set_item_shapes(self, id: 'int', shapes: 'Array') -> None: ...
    def set_item_preview(self, id: 'int', texture: 'Texture2D') -> None: ...
    def get_item_name(self, id: 'int') -> 'str': ...
    def get_item_mesh(self, id: 'int') -> 'Mesh': ...
    def get_item_mesh_transform(self, id: 'int') -> 'Transform3D': ...
    def get_item_mesh_cast_shadow(self, id: 'int') -> 'RenderingServer__ShadowCastingSetting': ...
    def get_item_navigation_mesh(self, id: 'int') -> 'NavigationMesh': ...
    def get_item_navigation_mesh_transform(self, id: 'int') -> 'Transform3D': ...
    def get_item_navigation_layers(self, id: 'int') -> 'int': ...
    def get_item_shapes(self, id: 'int') -> 'Array': ...
    def get_item_preview(self, id: 'int') -> 'Texture2D': ...
    def remove_item(self, id: 'int') -> None: ...
    def find_item_by_name(self, name: 'str') -> 'int': ...
    def clear(self) -> None: ...
    def get_item_list(self) -> 'PackedInt32Array': ...
    def get_last_unused_item_id(self) -> 'int': ...


class MeshTexture(Texture2D):


    mesh: 'Mesh'
    base_texture: 'Texture2D'
    image_size: 'Vector2'

    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_image_size(self, size: 'Vector2') -> None: ...
    def get_image_size(self) -> 'Vector2': ...
    def set_base_texture(self, texture: 'Texture2D') -> None: ...
    def get_base_texture(self) -> 'Texture2D': ...


class MethodTweener(Tweener):



    def set_delay(self, delay: 'float') -> 'MethodTweener': ...
    def set_trans(self, trans: 'Tween__TransitionType') -> 'MethodTweener': ...
    def set_ease(self, ease: 'Tween__EaseType') -> 'MethodTweener': ...


class MissingNode(Node):


    original_class: 'str'
    original_scene: 'str'
    recording_properties: 'bool'

    def set_original_class(self, name: 'str') -> None: ...
    def get_original_class(self) -> 'str': ...
    def set_original_scene(self, name: 'str') -> None: ...
    def get_original_scene(self) -> 'str': ...
    def set_recording_properties(self, enable: 'bool') -> None: ...
    def is_recording_properties(self) -> 'bool': ...


class MissingResource(Resource):


    original_class: 'str'
    recording_properties: 'bool'

    def set_original_class(self, name: 'str') -> None: ...
    def get_original_class(self) -> 'str': ...
    def set_recording_properties(self, enable: 'bool') -> None: ...
    def is_recording_properties(self) -> 'bool': ...


class MobileVRInterface(XRInterface):


    eye_height: 'float'
    iod: 'float'
    display_width: 'float'
    display_to_lens: 'float'
    offset_rect: 'Rect2'
    oversample: 'float'
    k1: 'float'
    k2: 'float'
    vrs_min_radius: 'float'
    vrs_strength: 'float'

    def set_eye_height(self, eye_height: 'float') -> None: ...
    def get_eye_height(self) -> 'float': ...
    def set_iod(self, iod: 'float') -> None: ...
    def get_iod(self) -> 'float': ...
    def set_display_width(self, display_width: 'float') -> None: ...
    def get_display_width(self) -> 'float': ...
    def set_display_to_lens(self, display_to_lens: 'float') -> None: ...
    def get_display_to_lens(self) -> 'float': ...
    def set_offset_rect(self, offset_rect: 'Rect2') -> None: ...
    def get_offset_rect(self) -> 'Rect2': ...
    def set_oversample(self, oversample: 'float') -> None: ...
    def get_oversample(self) -> 'float': ...
    def set_k1(self, k: 'float') -> None: ...
    def get_k1(self) -> 'float': ...
    def set_k2(self, k: 'float') -> None: ...
    def get_k2(self) -> 'float': ...
    def get_vrs_min_radius(self) -> 'float': ...
    def set_vrs_min_radius(self, radius: 'float') -> None: ...
    def get_vrs_strength(self) -> 'float': ...
    def set_vrs_strength(self, strength: 'float') -> None: ...


class MovieWriter(Object):



    def _get_audio_mix_rate(self) -> 'int': ...
    def _get_audio_speaker_mode(self) -> 'AudioServer__SpeakerMode': ...
    def _handles_file(self, path: 'str') -> 'bool': ...
    def _write_begin(self, movie_size: 'Vector2i', fps: 'int', base_path: 'str') -> 'Error': ...
    def _write_frame(self, frame_image: 'Image', audio_frame_block: 'intptr') -> 'Error': ...
    def _write_end(self) -> None: ...
    @staticmethod
    def add_writer(writer: 'MovieWriter') -> None: ...


class MultiMesh(Resource):


    transform_format: 'int'
    use_colors: 'bool'
    use_custom_data: 'bool'
    custom_aabb: 'AABB'
    instance_count: 'int'
    visible_instance_count: 'int'
    mesh: 'Mesh'
    buffer: 'PackedFloat32Array'
    transform_array: 'PackedVector3Array'
    transform_2d_array: 'PackedVector2Array'
    color_array: 'PackedColorArray'
    custom_data_array: 'PackedColorArray'
    physics_interpolation_quality: 'int'

    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_use_colors(self, enable: 'bool') -> None: ...
    def is_using_colors(self) -> 'bool': ...
    def set_use_custom_data(self, enable: 'bool') -> None: ...
    def is_using_custom_data(self) -> 'bool': ...
    def set_transform_format(self, format: 'MultiMesh__TransformFormat') -> None: ...
    def get_transform_format(self) -> 'MultiMesh__TransformFormat': ...
    def set_instance_count(self, count: 'int') -> None: ...
    def get_instance_count(self) -> 'int': ...
    def set_visible_instance_count(self, count: 'int') -> None: ...
    def get_visible_instance_count(self) -> 'int': ...
    def set_physics_interpolation_quality(self, quality: 'MultiMesh__PhysicsInterpolationQuality') -> None: ...
    def get_physics_interpolation_quality(self) -> 'MultiMesh__PhysicsInterpolationQuality': ...
    def set_instance_transform(self, instance: 'int', transform: 'Transform3D') -> None: ...
    def set_instance_transform_2d(self, instance: 'int', transform: 'Transform2D') -> None: ...
    def get_instance_transform(self, instance: 'int') -> 'Transform3D': ...
    def get_instance_transform_2d(self, instance: 'int') -> 'Transform2D': ...
    def set_instance_color(self, instance: 'int', color: 'Color') -> None: ...
    def get_instance_color(self, instance: 'int') -> 'Color': ...
    def set_instance_custom_data(self, instance: 'int', custom_data: 'Color') -> None: ...
    def get_instance_custom_data(self, instance: 'int') -> 'Color': ...
    def reset_instance_physics_interpolation(self, instance: 'int') -> None: ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    def get_aabb(self) -> 'AABB': ...
    def get_buffer(self) -> 'PackedFloat32Array': ...
    def set_buffer(self, buffer: 'PackedFloat32Array') -> None: ...
    def set_buffer_interpolated(self, buffer_curr: 'PackedFloat32Array', buffer_prev: 'PackedFloat32Array') -> None: ...


class MultiMeshInstance2D(Node2D):


    multimesh: 'MultiMesh'
    texture: 'Texture2D'
    texture_changed: 'Signal[Callable[[], None]]'  # texture_changed()

    def set_multimesh(self, multimesh: 'MultiMesh') -> None: ...
    def get_multimesh(self) -> 'MultiMesh': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...


class MultiMeshInstance3D(GeometryInstance3D):


    multimesh: 'MultiMesh'

    def set_multimesh(self, multimesh: 'MultiMesh') -> None: ...
    def get_multimesh(self) -> 'MultiMesh': ...


class MultiplayerAPI(RefCounted):


    multiplayer_peer: 'MultiplayerPeer'
    peer_connected: 'Signal[Callable[[int], None]]'  # peer_connected(id: int)
    peer_disconnected: 'Signal[Callable[[int], None]]'  # peer_disconnected(id: int)
    connected_to_server: 'Signal[Callable[[], None]]'  # connected_to_server()
    connection_failed: 'Signal[Callable[[], None]]'  # connection_failed()
    server_disconnected: 'Signal[Callable[[], None]]'  # server_disconnected()

    def has_multiplayer_peer(self) -> 'bool': ...
    def get_multiplayer_peer(self) -> 'MultiplayerPeer': ...
    def set_multiplayer_peer(self, peer: 'MultiplayerPeer') -> None: ...
    def get_unique_id(self) -> 'int': ...
    def is_server(self) -> 'bool': ...
    def get_remote_sender_id(self) -> 'int': ...
    def poll(self) -> 'Error': ...
    def rpc(self, peer: 'int', object: 'Object', method: 'StringName', arguments: 'Array' = default('''[]''')) -> 'Error': ...
    def object_configuration_add(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    def object_configuration_remove(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    def get_peers(self) -> 'PackedInt32Array': ...
    @staticmethod
    def set_default_interface(interface_name: 'StringName') -> None: ...
    @staticmethod
    def get_default_interface() -> 'StringName': ...
    @staticmethod
    def create_default_interface() -> 'MultiplayerAPI': ...


class MultiplayerAPIExtension(MultiplayerAPI):



    def _poll(self) -> 'Error': ...
    def _set_multiplayer_peer(self, multiplayer_peer: 'MultiplayerPeer') -> None: ...
    def _get_multiplayer_peer(self) -> 'MultiplayerPeer': ...
    def _get_unique_id(self) -> 'int': ...
    def _get_peer_ids(self) -> 'PackedInt32Array': ...
    def _rpc(self, peer: 'int', object: 'Object', method: 'StringName', args: 'Array') -> 'Error': ...
    def _get_remote_sender_id(self) -> 'int': ...
    def _object_configuration_add(self, object: 'Object', configuration: 'Variant') -> 'Error': ...
    def _object_configuration_remove(self, object: 'Object', configuration: 'Variant') -> 'Error': ...


class MultiplayerPeer(PacketPeer):


    refuse_new_connections: 'bool'
    transfer_mode: 'int'
    transfer_channel: 'int'
    TARGET_PEER_BROADCAST: 'int' = 0
    TARGET_PEER_SERVER: 'int' = 1
    peer_connected: 'Signal[Callable[[int], None]]'  # peer_connected(id: int)
    peer_disconnected: 'Signal[Callable[[int], None]]'  # peer_disconnected(id: int)

    def set_transfer_channel(self, channel: 'int') -> None: ...
    def get_transfer_channel(self) -> 'int': ...
    def set_transfer_mode(self, mode: 'MultiplayerPeer__TransferMode') -> None: ...
    def get_transfer_mode(self) -> 'MultiplayerPeer__TransferMode': ...
    def set_target_peer(self, id: 'int') -> None: ...
    def get_packet_peer(self) -> 'int': ...
    def get_packet_channel(self) -> 'int': ...
    def get_packet_mode(self) -> 'MultiplayerPeer__TransferMode': ...
    def poll(self) -> None: ...
    def close(self) -> None: ...
    def disconnect_peer(self, peer: 'int', force: 'bool' = False) -> None: ...
    def get_connection_status(self) -> 'MultiplayerPeer__ConnectionStatus': ...
    def get_unique_id(self) -> 'int': ...
    def generate_unique_id(self) -> 'int': ...
    def set_refuse_new_connections(self, enable: 'bool') -> None: ...
    def is_refusing_new_connections(self) -> 'bool': ...
    def is_server_relay_supported(self) -> 'bool': ...


class MultiplayerPeerExtension(MultiplayerPeer):



    def _get_packet(self, r_buffer: 'intptr', r_buffer_size: 'intptr') -> 'Error': ...
    def _put_packet(self, p_buffer: 'intptr', p_buffer_size: 'int') -> 'Error': ...
    def _get_available_packet_count(self) -> 'int': ...
    def _get_max_packet_size(self) -> 'int': ...
    def _get_packet_script(self) -> 'PackedByteArray': ...
    def _put_packet_script(self, p_buffer: 'PackedByteArray') -> 'Error': ...
    def _get_packet_channel(self) -> 'int': ...
    def _get_packet_mode(self) -> 'MultiplayerPeer__TransferMode': ...
    def _set_transfer_channel(self, p_channel: 'int') -> None: ...
    def _get_transfer_channel(self) -> 'int': ...
    def _set_transfer_mode(self, p_mode: 'MultiplayerPeer__TransferMode') -> None: ...
    def _get_transfer_mode(self) -> 'MultiplayerPeer__TransferMode': ...
    def _set_target_peer(self, p_peer: 'int') -> None: ...
    def _get_packet_peer(self) -> 'int': ...
    def _is_server(self) -> 'bool': ...
    def _poll(self) -> None: ...
    def _close(self) -> None: ...
    def _disconnect_peer(self, p_peer: 'int', p_force: 'bool') -> None: ...
    def _get_unique_id(self) -> 'int': ...
    def _set_refuse_new_connections(self, p_enable: 'bool') -> None: ...
    def _is_refusing_new_connections(self) -> 'bool': ...
    def _is_server_relay_supported(self) -> 'bool': ...
    def _get_connection_status(self) -> 'MultiplayerPeer__ConnectionStatus': ...


class MultiplayerSpawner(Node):


    spawn_path: 'NodePath'
    spawn_limit: 'int'
    spawn_function: 'Callable'
    despawned: 'Signal[Callable[[Node], None]]'  # despawned(node: Node)
    spawned: 'Signal[Callable[[Node], None]]'  # spawned(node: Node)

    def add_spawnable_scene(self, path: 'str') -> None: ...
    def get_spawnable_scene_count(self) -> 'int': ...
    def get_spawnable_scene(self, index: 'int') -> 'str': ...
    def clear_spawnable_scenes(self) -> None: ...
    def spawn(self, data: 'Variant' = default('''null''')) -> 'Node': ...
    def get_spawn_path(self) -> 'NodePath': ...
    def set_spawn_path(self, path: 'NodePath') -> None: ...
    def get_spawn_limit(self) -> 'int': ...
    def set_spawn_limit(self, limit: 'int') -> None: ...
    def get_spawn_function(self) -> 'Callable': ...
    def set_spawn_function(self, spawn_function: 'Callable') -> None: ...


class MultiplayerSynchronizer(Node):


    root_path: 'NodePath'
    replication_interval: 'float'
    delta_interval: 'float'
    replication_config: 'SceneReplicationConfig'
    visibility_update_mode: 'int'
    public_visibility: 'bool'
    synchronized: 'Signal[Callable[[], None]]'  # synchronized()
    delta_synchronized: 'Signal[Callable[[], None]]'  # delta_synchronized()
    visibility_changed: 'Signal[Callable[[int], None]]'  # visibility_changed(for_peer: int)

    def set_root_path(self, path: 'NodePath') -> None: ...
    def get_root_path(self) -> 'NodePath': ...
    def set_replication_interval(self, milliseconds: 'float') -> None: ...
    def get_replication_interval(self) -> 'float': ...
    def set_delta_interval(self, milliseconds: 'float') -> None: ...
    def get_delta_interval(self) -> 'float': ...
    def set_replication_config(self, config: 'SceneReplicationConfig') -> None: ...
    def get_replication_config(self) -> 'SceneReplicationConfig': ...
    def set_visibility_update_mode(self, mode: 'MultiplayerSynchronizer__VisibilityUpdateMode') -> None: ...
    def get_visibility_update_mode(self) -> 'MultiplayerSynchronizer__VisibilityUpdateMode': ...
    def update_visibility(self, for_peer: 'int' = 0) -> None: ...
    def set_visibility_public(self, visible: 'bool') -> None: ...
    def is_visibility_public(self) -> 'bool': ...
    def add_visibility_filter(self, filter: 'Callable') -> None: ...
    def remove_visibility_filter(self, filter: 'Callable') -> None: ...
    def set_visibility_for(self, peer: 'int', visible: 'bool') -> None: ...
    def get_visibility_for(self, peer: 'int') -> 'bool': ...


class Mutex(RefCounted):



    def lock(self) -> None: ...
    def try_lock(self) -> 'bool': ...
    def unlock(self) -> None: ...


class NativeMenu(Object):



    def has_feature(self, feature: 'NativeMenu__Feature') -> 'bool': ...
    def has_system_menu(self, menu_id: 'NativeMenu__SystemMenus') -> 'bool': ...
    def get_system_menu(self, menu_id: 'NativeMenu__SystemMenus') -> 'RID': ...
    def get_system_menu_name(self, menu_id: 'NativeMenu__SystemMenus') -> 'str': ...
    def create_menu(self) -> 'RID': ...
    def has_menu(self, rid: 'RID') -> 'bool': ...
    def free_menu(self, rid: 'RID') -> None: ...
    def get_size(self, rid: 'RID') -> 'Vector2': ...
    def popup(self, rid: 'RID', position: 'Vector2i') -> None: ...
    def set_interface_direction(self, rid: 'RID', is_rtl: 'bool') -> None: ...
    def set_popup_open_callback(self, rid: 'RID', callback: 'Callable') -> None: ...
    def get_popup_open_callback(self, rid: 'RID') -> 'Callable': ...
    def set_popup_close_callback(self, rid: 'RID', callback: 'Callable') -> None: ...
    def get_popup_close_callback(self, rid: 'RID') -> 'Callable': ...
    def set_minimum_width(self, rid: 'RID', width: 'float') -> None: ...
    def get_minimum_width(self, rid: 'RID') -> 'float': ...
    def is_opened(self, rid: 'RID') -> 'bool': ...
    def add_submenu_item(self, rid: 'RID', label: 'str', submenu_rid: 'RID', tag: 'Variant' = default('''null'''), index: 'int' = -1) -> 'int': ...
    def add_item(self, rid: 'RID', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_check_item(self, rid: 'RID', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_icon_item(self, rid: 'RID', icon: 'Texture2D', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_icon_check_item(self, rid: 'RID', icon: 'Texture2D', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_radio_check_item(self, rid: 'RID', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_icon_radio_check_item(self, rid: 'RID', icon: 'Texture2D', label: 'str', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_multistate_item(self, rid: 'RID', label: 'str', max_states: 'int', default_state: 'int', callback: 'Callable' = default('''Callable()'''), key_callback: 'Callable' = default('''Callable()'''), tag: 'Variant' = default('''null'''), accelerator: 'Key' = 0, index: 'int' = -1) -> 'int': ...
    def add_separator(self, rid: 'RID', index: 'int' = -1) -> 'int': ...
    def find_item_index_with_text(self, rid: 'RID', text: 'str') -> 'int': ...
    def find_item_index_with_tag(self, rid: 'RID', tag: 'Variant') -> 'int': ...
    def find_item_index_with_submenu(self, rid: 'RID', submenu_rid: 'RID') -> 'int': ...
    def is_item_checked(self, rid: 'RID', idx: 'int') -> 'bool': ...
    def is_item_checkable(self, rid: 'RID', idx: 'int') -> 'bool': ...
    def is_item_radio_checkable(self, rid: 'RID', idx: 'int') -> 'bool': ...
    def get_item_callback(self, rid: 'RID', idx: 'int') -> 'Callable': ...
    def get_item_key_callback(self, rid: 'RID', idx: 'int') -> 'Callable': ...
    def get_item_tag(self, rid: 'RID', idx: 'int') -> 'Variant': ...
    def get_item_text(self, rid: 'RID', idx: 'int') -> 'str': ...
    def get_item_submenu(self, rid: 'RID', idx: 'int') -> 'RID': ...
    def get_item_accelerator(self, rid: 'RID', idx: 'int') -> 'Key': ...
    def is_item_disabled(self, rid: 'RID', idx: 'int') -> 'bool': ...
    def is_item_hidden(self, rid: 'RID', idx: 'int') -> 'bool': ...
    def get_item_tooltip(self, rid: 'RID', idx: 'int') -> 'str': ...
    def get_item_state(self, rid: 'RID', idx: 'int') -> 'int': ...
    def get_item_max_states(self, rid: 'RID', idx: 'int') -> 'int': ...
    def get_item_icon(self, rid: 'RID', idx: 'int') -> 'Texture2D': ...
    def get_item_indentation_level(self, rid: 'RID', idx: 'int') -> 'int': ...
    def set_item_checked(self, rid: 'RID', idx: 'int', checked: 'bool') -> None: ...
    def set_item_checkable(self, rid: 'RID', idx: 'int', checkable: 'bool') -> None: ...
    def set_item_radio_checkable(self, rid: 'RID', idx: 'int', checkable: 'bool') -> None: ...
    def set_item_callback(self, rid: 'RID', idx: 'int', callback: 'Callable') -> None: ...
    def set_item_hover_callbacks(self, rid: 'RID', idx: 'int', callback: 'Callable') -> None: ...
    def set_item_key_callback(self, rid: 'RID', idx: 'int', key_callback: 'Callable') -> None: ...
    def set_item_tag(self, rid: 'RID', idx: 'int', tag: 'Variant') -> None: ...
    def set_item_text(self, rid: 'RID', idx: 'int', text: 'str') -> None: ...
    def set_item_submenu(self, rid: 'RID', idx: 'int', submenu_rid: 'RID') -> None: ...
    def set_item_accelerator(self, rid: 'RID', idx: 'int', keycode: 'Key') -> None: ...
    def set_item_disabled(self, rid: 'RID', idx: 'int', disabled: 'bool') -> None: ...
    def set_item_hidden(self, rid: 'RID', idx: 'int', hidden: 'bool') -> None: ...
    def set_item_tooltip(self, rid: 'RID', idx: 'int', tooltip: 'str') -> None: ...
    def set_item_state(self, rid: 'RID', idx: 'int', state: 'int') -> None: ...
    def set_item_max_states(self, rid: 'RID', idx: 'int', max_states: 'int') -> None: ...
    def set_item_icon(self, rid: 'RID', idx: 'int', icon: 'Texture2D') -> None: ...
    def set_item_indentation_level(self, rid: 'RID', idx: 'int', level: 'int') -> None: ...
    def get_item_count(self, rid: 'RID') -> 'int': ...
    def is_system_menu(self, rid: 'RID') -> 'bool': ...
    def remove_item(self, rid: 'RID', idx: 'int') -> None: ...
    def clear(self, rid: 'RID') -> None: ...


class NavigationAgent2D(Node):


    target_position: 'Vector2'
    path_desired_distance: 'float'
    target_desired_distance: 'float'
    path_max_distance: 'float'
    navigation_layers: 'int'
    pathfinding_algorithm: 'int'
    path_postprocessing: 'int'
    path_metadata_flags: 'int'
    simplify_path: 'bool'
    simplify_epsilon: 'float'
    avoidance_enabled: 'bool'
    velocity: 'Vector2'
    radius: 'float'
    neighbor_distance: 'float'
    max_neighbors: 'int'
    time_horizon_agents: 'float'
    time_horizon_obstacles: 'float'
    max_speed: 'float'
    avoidance_layers: 'int'
    avoidance_mask: 'int'
    avoidance_priority: 'float'
    debug_enabled: 'bool'
    debug_use_custom: 'bool'
    debug_path_custom_color: 'Color'
    debug_path_custom_point_size: 'float'
    debug_path_custom_line_width: 'float'
    path_changed: 'Signal[Callable[[], None]]'  # path_changed()
    target_reached: 'Signal[Callable[[], None]]'  # target_reached()
    waypoint_reached: 'Signal[Callable[[Dictionary], None]]'  # waypoint_reached(details: Dictionary)
    link_reached: 'Signal[Callable[[Dictionary], None]]'  # link_reached(details: Dictionary)
    navigation_finished: 'Signal[Callable[[], None]]'  # navigation_finished()
    velocity_computed: 'Signal[Callable[[Vector2], None]]'  # velocity_computed(safe_velocity: Vector2)

    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: 'bool') -> None: ...
    def get_avoidance_enabled(self) -> 'bool': ...
    def set_path_desired_distance(self, desired_distance: 'float') -> None: ...
    def get_path_desired_distance(self) -> 'float': ...
    def set_target_desired_distance(self, desired_distance: 'float') -> None: ...
    def get_target_desired_distance(self) -> 'float': ...
    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_neighbor_distance(self, neighbor_distance: 'float') -> None: ...
    def get_neighbor_distance(self) -> 'float': ...
    def set_max_neighbors(self, max_neighbors: 'int') -> None: ...
    def get_max_neighbors(self) -> 'int': ...
    def set_time_horizon_agents(self, time_horizon: 'float') -> None: ...
    def get_time_horizon_agents(self) -> 'float': ...
    def set_time_horizon_obstacles(self, time_horizon: 'float') -> None: ...
    def get_time_horizon_obstacles(self) -> 'float': ...
    def set_max_speed(self, max_speed: 'float') -> None: ...
    def get_max_speed(self) -> 'float': ...
    def set_path_max_distance(self, max_speed: 'float') -> None: ...
    def get_path_max_distance(self) -> 'float': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_navigation_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters2D__PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters2D__PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters2D__PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters2D__PathPostProcessing': ...
    def set_path_metadata_flags(self, flags: 'NavigationPathQueryParameters2D__PathMetadataFlags') -> None: ...
    def get_path_metadata_flags(self) -> 'NavigationPathQueryParameters2D__PathMetadataFlags': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_target_position(self, position: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def set_simplify_path(self, enabled: 'bool') -> None: ...
    def get_simplify_path(self) -> 'bool': ...
    def set_simplify_epsilon(self, epsilon: 'float') -> None: ...
    def get_simplify_epsilon(self) -> 'float': ...
    def get_next_path_position(self) -> 'Vector2': ...
    def set_velocity_forced(self, velocity: 'Vector2') -> None: ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def distance_to_target(self) -> 'float': ...
    def get_current_navigation_result(self) -> 'NavigationPathQueryResult2D': ...
    def get_current_navigation_path(self) -> 'PackedVector2Array': ...
    def get_current_navigation_path_index(self) -> 'int': ...
    def is_target_reached(self) -> 'bool': ...
    def is_target_reachable(self) -> 'bool': ...
    def is_navigation_finished(self) -> 'bool': ...
    def get_final_position(self) -> 'Vector2': ...
    def set_avoidance_layers(self, layers: 'int') -> None: ...
    def get_avoidance_layers(self) -> 'int': ...
    def set_avoidance_mask(self, mask: 'int') -> None: ...
    def get_avoidance_mask(self) -> 'int': ...
    def set_avoidance_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_avoidance_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_avoidance_mask_value(self, mask_number: 'int', value: 'bool') -> None: ...
    def get_avoidance_mask_value(self, mask_number: 'int') -> 'bool': ...
    def set_avoidance_priority(self, priority: 'float') -> None: ...
    def get_avoidance_priority(self) -> 'float': ...
    def set_debug_enabled(self, enabled: 'bool') -> None: ...
    def get_debug_enabled(self) -> 'bool': ...
    def set_debug_use_custom(self, enabled: 'bool') -> None: ...
    def get_debug_use_custom(self) -> 'bool': ...
    def set_debug_path_custom_color(self, color: 'Color') -> None: ...
    def get_debug_path_custom_color(self) -> 'Color': ...
    def set_debug_path_custom_point_size(self, point_size: 'float') -> None: ...
    def get_debug_path_custom_point_size(self) -> 'float': ...
    def set_debug_path_custom_line_width(self, line_width: 'float') -> None: ...
    def get_debug_path_custom_line_width(self) -> 'float': ...


class NavigationAgent3D(Node):


    target_position: 'Vector3'
    path_desired_distance: 'float'
    target_desired_distance: 'float'
    path_height_offset: 'float'
    path_max_distance: 'float'
    navigation_layers: 'int'
    pathfinding_algorithm: 'int'
    path_postprocessing: 'int'
    path_metadata_flags: 'int'
    simplify_path: 'bool'
    simplify_epsilon: 'float'
    avoidance_enabled: 'bool'
    velocity: 'Vector3'
    height: 'float'
    radius: 'float'
    neighbor_distance: 'float'
    max_neighbors: 'int'
    time_horizon_agents: 'float'
    time_horizon_obstacles: 'float'
    max_speed: 'float'
    use_3d_avoidance: 'bool'
    keep_y_velocity: 'bool'
    avoidance_layers: 'int'
    avoidance_mask: 'int'
    avoidance_priority: 'float'
    debug_enabled: 'bool'
    debug_use_custom: 'bool'
    debug_path_custom_color: 'Color'
    debug_path_custom_point_size: 'float'
    path_changed: 'Signal[Callable[[], None]]'  # path_changed()
    target_reached: 'Signal[Callable[[], None]]'  # target_reached()
    waypoint_reached: 'Signal[Callable[[Dictionary], None]]'  # waypoint_reached(details: Dictionary)
    link_reached: 'Signal[Callable[[Dictionary], None]]'  # link_reached(details: Dictionary)
    navigation_finished: 'Signal[Callable[[], None]]'  # navigation_finished()
    velocity_computed: 'Signal[Callable[[Vector3], None]]'  # velocity_computed(safe_velocity: Vector3)

    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: 'bool') -> None: ...
    def get_avoidance_enabled(self) -> 'bool': ...
    def set_path_desired_distance(self, desired_distance: 'float') -> None: ...
    def get_path_desired_distance(self) -> 'float': ...
    def set_target_desired_distance(self, desired_distance: 'float') -> None: ...
    def get_target_desired_distance(self) -> 'float': ...
    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_path_height_offset(self, path_height_offset: 'float') -> None: ...
    def get_path_height_offset(self) -> 'float': ...
    def set_use_3d_avoidance(self, enabled: 'bool') -> None: ...
    def get_use_3d_avoidance(self) -> 'bool': ...
    def set_keep_y_velocity(self, enabled: 'bool') -> None: ...
    def get_keep_y_velocity(self) -> 'bool': ...
    def set_neighbor_distance(self, neighbor_distance: 'float') -> None: ...
    def get_neighbor_distance(self) -> 'float': ...
    def set_max_neighbors(self, max_neighbors: 'int') -> None: ...
    def get_max_neighbors(self) -> 'int': ...
    def set_time_horizon_agents(self, time_horizon: 'float') -> None: ...
    def get_time_horizon_agents(self) -> 'float': ...
    def set_time_horizon_obstacles(self, time_horizon: 'float') -> None: ...
    def get_time_horizon_obstacles(self) -> 'float': ...
    def set_max_speed(self, max_speed: 'float') -> None: ...
    def get_max_speed(self) -> 'float': ...
    def set_path_max_distance(self, max_speed: 'float') -> None: ...
    def get_path_max_distance(self) -> 'float': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_navigation_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters3D__PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters3D__PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters3D__PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters3D__PathPostProcessing': ...
    def set_path_metadata_flags(self, flags: 'NavigationPathQueryParameters3D__PathMetadataFlags') -> None: ...
    def get_path_metadata_flags(self) -> 'NavigationPathQueryParameters3D__PathMetadataFlags': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_target_position(self, position: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def set_simplify_path(self, enabled: 'bool') -> None: ...
    def get_simplify_path(self) -> 'bool': ...
    def set_simplify_epsilon(self, epsilon: 'float') -> None: ...
    def get_simplify_epsilon(self) -> 'float': ...
    def get_next_path_position(self) -> 'Vector3': ...
    def set_velocity_forced(self, velocity: 'Vector3') -> None: ...
    def set_velocity(self, velocity: 'Vector3') -> None: ...
    def get_velocity(self) -> 'Vector3': ...
    def distance_to_target(self) -> 'float': ...
    def get_current_navigation_result(self) -> 'NavigationPathQueryResult3D': ...
    def get_current_navigation_path(self) -> 'PackedVector3Array': ...
    def get_current_navigation_path_index(self) -> 'int': ...
    def is_target_reached(self) -> 'bool': ...
    def is_target_reachable(self) -> 'bool': ...
    def is_navigation_finished(self) -> 'bool': ...
    def get_final_position(self) -> 'Vector3': ...
    def set_avoidance_layers(self, layers: 'int') -> None: ...
    def get_avoidance_layers(self) -> 'int': ...
    def set_avoidance_mask(self, mask: 'int') -> None: ...
    def get_avoidance_mask(self) -> 'int': ...
    def set_avoidance_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_avoidance_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_avoidance_mask_value(self, mask_number: 'int', value: 'bool') -> None: ...
    def get_avoidance_mask_value(self, mask_number: 'int') -> 'bool': ...
    def set_avoidance_priority(self, priority: 'float') -> None: ...
    def get_avoidance_priority(self) -> 'float': ...
    def set_debug_enabled(self, enabled: 'bool') -> None: ...
    def get_debug_enabled(self) -> 'bool': ...
    def set_debug_use_custom(self, enabled: 'bool') -> None: ...
    def get_debug_use_custom(self) -> 'bool': ...
    def set_debug_path_custom_color(self, color: 'Color') -> None: ...
    def get_debug_path_custom_color(self) -> 'Color': ...
    def set_debug_path_custom_point_size(self, point_size: 'float') -> None: ...
    def get_debug_path_custom_point_size(self) -> 'float': ...


class NavigationLink2D(Node2D):


    enabled: 'bool'
    bidirectional: 'bool'
    navigation_layers: 'int'
    start_position: 'Vector2'
    end_position: 'Vector2'
    enter_cost: 'float'
    travel_cost: 'float'

    def get_rid(self) -> 'RID': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_bidirectional(self, bidirectional: 'bool') -> None: ...
    def is_bidirectional(self) -> 'bool': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_navigation_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_start_position(self, position: 'Vector2') -> None: ...
    def get_start_position(self) -> 'Vector2': ...
    def set_end_position(self, position: 'Vector2') -> None: ...
    def get_end_position(self) -> 'Vector2': ...
    def set_global_start_position(self, position: 'Vector2') -> None: ...
    def get_global_start_position(self) -> 'Vector2': ...
    def set_global_end_position(self, position: 'Vector2') -> None: ...
    def get_global_end_position(self) -> 'Vector2': ...
    def set_enter_cost(self, enter_cost: 'float') -> None: ...
    def get_enter_cost(self) -> 'float': ...
    def set_travel_cost(self, travel_cost: 'float') -> None: ...
    def get_travel_cost(self) -> 'float': ...


class NavigationLink3D(Node3D):


    enabled: 'bool'
    bidirectional: 'bool'
    navigation_layers: 'int'
    start_position: 'Vector3'
    end_position: 'Vector3'
    enter_cost: 'float'
    travel_cost: 'float'

    def get_rid(self) -> 'RID': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_bidirectional(self, bidirectional: 'bool') -> None: ...
    def is_bidirectional(self) -> 'bool': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_navigation_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_start_position(self, position: 'Vector3') -> None: ...
    def get_start_position(self) -> 'Vector3': ...
    def set_end_position(self, position: 'Vector3') -> None: ...
    def get_end_position(self) -> 'Vector3': ...
    def set_global_start_position(self, position: 'Vector3') -> None: ...
    def get_global_start_position(self) -> 'Vector3': ...
    def set_global_end_position(self, position: 'Vector3') -> None: ...
    def get_global_end_position(self) -> 'Vector3': ...
    def set_enter_cost(self, enter_cost: 'float') -> None: ...
    def get_enter_cost(self) -> 'float': ...
    def set_travel_cost(self, travel_cost: 'float') -> None: ...
    def get_travel_cost(self) -> 'float': ...


class NavigationMesh(Resource):


    vertices: 'PackedVector3Array'
    polygons: 'Array'
    sample_partition_type: 'int'
    geometry_parsed_geometry_type: 'int'
    geometry_collision_mask: 'int'
    geometry_source_geometry_mode: 'int'
    geometry_source_group_name: 'str'
    cell_size: 'float'
    cell_height: 'float'
    border_size: 'float'
    agent_height: 'float'
    agent_radius: 'float'
    agent_max_climb: 'float'
    agent_max_slope: 'float'
    region_min_size: 'float'
    region_merge_size: 'float'
    edge_max_length: 'float'
    edge_max_error: 'float'
    vertices_per_polygon: 'float'
    detail_sample_distance: 'float'
    detail_sample_max_error: 'float'
    filter_low_hanging_obstacles: 'bool'
    filter_ledge_spans: 'bool'
    filter_walkable_low_height_spans: 'bool'
    filter_baking_aabb: 'AABB'
    filter_baking_aabb_offset: 'Vector3'

    def set_sample_partition_type(self, sample_partition_type: 'NavigationMesh__SamplePartitionType') -> None: ...
    def get_sample_partition_type(self) -> 'NavigationMesh__SamplePartitionType': ...
    def set_parsed_geometry_type(self, geometry_type: 'NavigationMesh__ParsedGeometryType') -> None: ...
    def get_parsed_geometry_type(self) -> 'NavigationMesh__ParsedGeometryType': ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_source_geometry_mode(self, mask: 'NavigationMesh__SourceGeometryMode') -> None: ...
    def get_source_geometry_mode(self) -> 'NavigationMesh__SourceGeometryMode': ...
    def set_source_group_name(self, mask: 'StringName') -> None: ...
    def get_source_group_name(self) -> 'StringName': ...
    def set_cell_size(self, cell_size: 'float') -> None: ...
    def get_cell_size(self) -> 'float': ...
    def set_cell_height(self, cell_height: 'float') -> None: ...
    def get_cell_height(self) -> 'float': ...
    def set_border_size(self, border_size: 'float') -> None: ...
    def get_border_size(self) -> 'float': ...
    def set_agent_height(self, agent_height: 'float') -> None: ...
    def get_agent_height(self) -> 'float': ...
    def set_agent_radius(self, agent_radius: 'float') -> None: ...
    def get_agent_radius(self) -> 'float': ...
    def set_agent_max_climb(self, agent_max_climb: 'float') -> None: ...
    def get_agent_max_climb(self) -> 'float': ...
    def set_agent_max_slope(self, agent_max_slope: 'float') -> None: ...
    def get_agent_max_slope(self) -> 'float': ...
    def set_region_min_size(self, region_min_size: 'float') -> None: ...
    def get_region_min_size(self) -> 'float': ...
    def set_region_merge_size(self, region_merge_size: 'float') -> None: ...
    def get_region_merge_size(self) -> 'float': ...
    def set_edge_max_length(self, edge_max_length: 'float') -> None: ...
    def get_edge_max_length(self) -> 'float': ...
    def set_edge_max_error(self, edge_max_error: 'float') -> None: ...
    def get_edge_max_error(self) -> 'float': ...
    def set_vertices_per_polygon(self, vertices_per_polygon: 'float') -> None: ...
    def get_vertices_per_polygon(self) -> 'float': ...
    def set_detail_sample_distance(self, detail_sample_dist: 'float') -> None: ...
    def get_detail_sample_distance(self) -> 'float': ...
    def set_detail_sample_max_error(self, detail_sample_max_error: 'float') -> None: ...
    def get_detail_sample_max_error(self) -> 'float': ...
    def set_filter_low_hanging_obstacles(self, filter_low_hanging_obstacles: 'bool') -> None: ...
    def get_filter_low_hanging_obstacles(self) -> 'bool': ...
    def set_filter_ledge_spans(self, filter_ledge_spans: 'bool') -> None: ...
    def get_filter_ledge_spans(self) -> 'bool': ...
    def set_filter_walkable_low_height_spans(self, filter_walkable_low_height_spans: 'bool') -> None: ...
    def get_filter_walkable_low_height_spans(self) -> 'bool': ...
    def set_filter_baking_aabb(self, baking_aabb: 'AABB') -> None: ...
    def get_filter_baking_aabb(self) -> 'AABB': ...
    def set_filter_baking_aabb_offset(self, baking_aabb_offset: 'Vector3') -> None: ...
    def get_filter_baking_aabb_offset(self) -> 'Vector3': ...
    def set_vertices(self, vertices: 'PackedVector3Array') -> None: ...
    def get_vertices(self) -> 'PackedVector3Array': ...
    def add_polygon(self, polygon: 'PackedInt32Array') -> None: ...
    def get_polygon_count(self) -> 'int': ...
    def get_polygon(self, idx: 'int') -> 'PackedInt32Array': ...
    def clear_polygons(self) -> None: ...
    def create_from_mesh(self, mesh: 'Mesh') -> None: ...
    def clear(self) -> None: ...


class NavigationMeshGenerator(Object):



    def bake(self, navigation_mesh: 'NavigationMesh', root_node: 'Node') -> None: ...
    def clear(self, navigation_mesh: 'NavigationMesh') -> None: ...
    def parse_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', root_node: 'Node', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', callback: 'Callable' = default('''Callable()''')) -> None: ...


class NavigationMeshSourceGeometryData2D(Resource):


    traversable_outlines: 'Array'
    obstruction_outlines: 'Array'
    projected_obstructions: 'Array'

    def clear(self) -> None: ...
    def has_data(self) -> 'bool': ...
    def set_traversable_outlines(self, traversable_outlines: 'Array'['PackedVector2Array']) -> None: ...
    def get_traversable_outlines(self) -> 'Array'['PackedVector2Array']: ...
    def set_obstruction_outlines(self, obstruction_outlines: 'Array'['PackedVector2Array']) -> None: ...
    def get_obstruction_outlines(self) -> 'Array'['PackedVector2Array']: ...
    def append_traversable_outlines(self, traversable_outlines: 'Array'['PackedVector2Array']) -> None: ...
    def append_obstruction_outlines(self, obstruction_outlines: 'Array'['PackedVector2Array']) -> None: ...
    def add_traversable_outline(self, shape_outline: 'PackedVector2Array') -> None: ...
    def add_obstruction_outline(self, shape_outline: 'PackedVector2Array') -> None: ...
    def merge(self, other_geometry: 'NavigationMeshSourceGeometryData2D') -> None: ...
    def add_projected_obstruction(self, vertices: 'PackedVector2Array', carve: 'bool') -> None: ...
    def clear_projected_obstructions(self) -> None: ...
    def set_projected_obstructions(self, projected_obstructions: 'Array') -> None: ...
    def get_projected_obstructions(self) -> 'Array': ...
    def get_bounds(self) -> 'Rect2': ...


class NavigationMeshSourceGeometryData3D(Resource):


    vertices: 'PackedVector3Array'
    indices: 'PackedInt32Array'
    projected_obstructions: 'Array'

    def set_vertices(self, vertices: 'PackedFloat32Array') -> None: ...
    def get_vertices(self) -> 'PackedFloat32Array': ...
    def set_indices(self, indices: 'PackedInt32Array') -> None: ...
    def get_indices(self) -> 'PackedInt32Array': ...
    def append_arrays(self, vertices: 'PackedFloat32Array', indices: 'PackedInt32Array') -> None: ...
    def clear(self) -> None: ...
    def has_data(self) -> 'bool': ...
    def add_mesh(self, mesh: 'Mesh', xform: 'Transform3D') -> None: ...
    def add_mesh_array(self, mesh_array: 'Array', xform: 'Transform3D') -> None: ...
    def add_faces(self, faces: 'PackedVector3Array', xform: 'Transform3D') -> None: ...
    def merge(self, other_geometry: 'NavigationMeshSourceGeometryData3D') -> None: ...
    def add_projected_obstruction(self, vertices: 'PackedVector3Array', elevation: 'float', height: 'float', carve: 'bool') -> None: ...
    def clear_projected_obstructions(self) -> None: ...
    def set_projected_obstructions(self, projected_obstructions: 'Array') -> None: ...
    def get_projected_obstructions(self) -> 'Array': ...
    def get_bounds(self) -> 'AABB': ...


class NavigationObstacle2D(Node2D):


    radius: 'float'
    vertices: 'PackedVector2Array'
    affect_navigation_mesh: 'bool'
    carve_navigation_mesh: 'bool'
    avoidance_enabled: 'bool'
    velocity: 'Vector2'
    avoidance_layers: 'int'

    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: 'bool') -> None: ...
    def get_avoidance_enabled(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_velocity(self, velocity: 'Vector2') -> None: ...
    def get_velocity(self) -> 'Vector2': ...
    def set_vertices(self, vertices: 'PackedVector2Array') -> None: ...
    def get_vertices(self) -> 'PackedVector2Array': ...
    def set_avoidance_layers(self, layers: 'int') -> None: ...
    def get_avoidance_layers(self) -> 'int': ...
    def set_avoidance_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_avoidance_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_affect_navigation_mesh(self, enabled: 'bool') -> None: ...
    def get_affect_navigation_mesh(self) -> 'bool': ...
    def set_carve_navigation_mesh(self, enabled: 'bool') -> None: ...
    def get_carve_navigation_mesh(self) -> 'bool': ...


class NavigationObstacle3D(Node3D):


    radius: 'float'
    height: 'float'
    vertices: 'PackedVector3Array'
    affect_navigation_mesh: 'bool'
    carve_navigation_mesh: 'bool'
    avoidance_enabled: 'bool'
    velocity: 'Vector3'
    avoidance_layers: 'int'
    use_3d_avoidance: 'bool'

    def get_rid(self) -> 'RID': ...
    def set_avoidance_enabled(self, enabled: 'bool') -> None: ...
    def get_avoidance_enabled(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_velocity(self, velocity: 'Vector3') -> None: ...
    def get_velocity(self) -> 'Vector3': ...
    def set_vertices(self, vertices: 'PackedVector3Array') -> None: ...
    def get_vertices(self) -> 'PackedVector3Array': ...
    def set_avoidance_layers(self, layers: 'int') -> None: ...
    def get_avoidance_layers(self) -> 'int': ...
    def set_avoidance_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_avoidance_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_use_3d_avoidance(self, enabled: 'bool') -> None: ...
    def get_use_3d_avoidance(self) -> 'bool': ...
    def set_affect_navigation_mesh(self, enabled: 'bool') -> None: ...
    def get_affect_navigation_mesh(self) -> 'bool': ...
    def set_carve_navigation_mesh(self, enabled: 'bool') -> None: ...
    def get_carve_navigation_mesh(self) -> 'bool': ...


class NavigationPathQueryParameters2D(RefCounted):


    map: 'RID'
    start_position: 'Vector2'
    target_position: 'Vector2'
    navigation_layers: 'int'
    pathfinding_algorithm: 'int'
    path_postprocessing: 'int'
    metadata_flags: 'int'
    simplify_path: 'bool'
    simplify_epsilon: 'float'

    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters2D__PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters2D__PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters2D__PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters2D__PathPostProcessing': ...
    def set_map(self, map: 'RID') -> None: ...
    def get_map(self) -> 'RID': ...
    def set_start_position(self, start_position: 'Vector2') -> None: ...
    def get_start_position(self) -> 'Vector2': ...
    def set_target_position(self, target_position: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_metadata_flags(self, flags: 'NavigationPathQueryParameters2D__PathMetadataFlags') -> None: ...
    def get_metadata_flags(self) -> 'NavigationPathQueryParameters2D__PathMetadataFlags': ...
    def set_simplify_path(self, enabled: 'bool') -> None: ...
    def get_simplify_path(self) -> 'bool': ...
    def set_simplify_epsilon(self, epsilon: 'float') -> None: ...
    def get_simplify_epsilon(self) -> 'float': ...


class NavigationPathQueryParameters3D(RefCounted):


    map: 'RID'
    start_position: 'Vector3'
    target_position: 'Vector3'
    navigation_layers: 'int'
    pathfinding_algorithm: 'int'
    path_postprocessing: 'int'
    metadata_flags: 'int'
    simplify_path: 'bool'
    simplify_epsilon: 'float'

    def set_pathfinding_algorithm(self, pathfinding_algorithm: 'NavigationPathQueryParameters3D__PathfindingAlgorithm') -> None: ...
    def get_pathfinding_algorithm(self) -> 'NavigationPathQueryParameters3D__PathfindingAlgorithm': ...
    def set_path_postprocessing(self, path_postprocessing: 'NavigationPathQueryParameters3D__PathPostProcessing') -> None: ...
    def get_path_postprocessing(self) -> 'NavigationPathQueryParameters3D__PathPostProcessing': ...
    def set_map(self, map: 'RID') -> None: ...
    def get_map(self) -> 'RID': ...
    def set_start_position(self, start_position: 'Vector3') -> None: ...
    def get_start_position(self) -> 'Vector3': ...
    def set_target_position(self, target_position: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_metadata_flags(self, flags: 'NavigationPathQueryParameters3D__PathMetadataFlags') -> None: ...
    def get_metadata_flags(self) -> 'NavigationPathQueryParameters3D__PathMetadataFlags': ...
    def set_simplify_path(self, enabled: 'bool') -> None: ...
    def get_simplify_path(self) -> 'bool': ...
    def set_simplify_epsilon(self, epsilon: 'float') -> None: ...
    def get_simplify_epsilon(self) -> 'float': ...


class NavigationPathQueryResult2D(RefCounted):


    path: 'PackedVector2Array'
    path_types: 'PackedInt32Array'
    path_rids: 'Array'['RID']
    path_owner_ids: 'PackedInt64Array'

    def set_path(self, path: 'PackedVector2Array') -> None: ...
    def get_path(self) -> 'PackedVector2Array': ...
    def set_path_types(self, path_types: 'PackedInt32Array') -> None: ...
    def get_path_types(self) -> 'PackedInt32Array': ...
    def set_path_rids(self, path_rids: 'Array'['RID']) -> None: ...
    def get_path_rids(self) -> 'Array'['RID']: ...
    def set_path_owner_ids(self, path_owner_ids: 'PackedInt64Array') -> None: ...
    def get_path_owner_ids(self) -> 'PackedInt64Array': ...
    def reset(self) -> None: ...


class NavigationPathQueryResult3D(RefCounted):


    path: 'PackedVector3Array'
    path_types: 'PackedInt32Array'
    path_rids: 'Array'['RID']
    path_owner_ids: 'PackedInt64Array'

    def set_path(self, path: 'PackedVector3Array') -> None: ...
    def get_path(self) -> 'PackedVector3Array': ...
    def set_path_types(self, path_types: 'PackedInt32Array') -> None: ...
    def get_path_types(self) -> 'PackedInt32Array': ...
    def set_path_rids(self, path_rids: 'Array'['RID']) -> None: ...
    def get_path_rids(self) -> 'Array'['RID']: ...
    def set_path_owner_ids(self, path_owner_ids: 'PackedInt64Array') -> None: ...
    def get_path_owner_ids(self) -> 'PackedInt64Array': ...
    def reset(self) -> None: ...


class NavigationPolygon(Resource):


    vertices: 'PackedVector2Array'
    polygons: 'Array'
    outlines: 'Array'
    sample_partition_type: 'int'
    parsed_geometry_type: 'int'
    parsed_collision_mask: 'int'
    source_geometry_mode: 'int'
    source_geometry_group_name: 'str'
    cell_size: 'float'
    border_size: 'float'
    agent_radius: 'float'
    baking_rect: 'Rect2'
    baking_rect_offset: 'Vector2'

    def set_vertices(self, vertices: 'PackedVector2Array') -> None: ...
    def get_vertices(self) -> 'PackedVector2Array': ...
    def add_polygon(self, polygon: 'PackedInt32Array') -> None: ...
    def get_polygon_count(self) -> 'int': ...
    def get_polygon(self, idx: 'int') -> 'PackedInt32Array': ...
    def clear_polygons(self) -> None: ...
    def get_navigation_mesh(self) -> 'NavigationMesh': ...
    def add_outline(self, outline: 'PackedVector2Array') -> None: ...
    def add_outline_at_index(self, outline: 'PackedVector2Array', index: 'int') -> None: ...
    def get_outline_count(self) -> 'int': ...
    def set_outline(self, idx: 'int', outline: 'PackedVector2Array') -> None: ...
    def get_outline(self, idx: 'int') -> 'PackedVector2Array': ...
    def remove_outline(self, idx: 'int') -> None: ...
    def clear_outlines(self) -> None: ...
    def make_polygons_from_outlines(self) -> None: ...
    def set_cell_size(self, cell_size: 'float') -> None: ...
    def get_cell_size(self) -> 'float': ...
    def set_border_size(self, border_size: 'float') -> None: ...
    def get_border_size(self) -> 'float': ...
    def set_sample_partition_type(self, sample_partition_type: 'NavigationPolygon__SamplePartitionType') -> None: ...
    def get_sample_partition_type(self) -> 'NavigationPolygon__SamplePartitionType': ...
    def set_parsed_geometry_type(self, geometry_type: 'NavigationPolygon__ParsedGeometryType') -> None: ...
    def get_parsed_geometry_type(self) -> 'NavigationPolygon__ParsedGeometryType': ...
    def set_parsed_collision_mask(self, mask: 'int') -> None: ...
    def get_parsed_collision_mask(self) -> 'int': ...
    def set_parsed_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_parsed_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_source_geometry_mode(self, geometry_mode: 'NavigationPolygon__SourceGeometryMode') -> None: ...
    def get_source_geometry_mode(self) -> 'NavigationPolygon__SourceGeometryMode': ...
    def set_source_geometry_group_name(self, group_name: 'StringName') -> None: ...
    def get_source_geometry_group_name(self) -> 'StringName': ...
    def set_agent_radius(self, agent_radius: 'float') -> None: ...
    def get_agent_radius(self) -> 'float': ...
    def set_baking_rect(self, rect: 'Rect2') -> None: ...
    def get_baking_rect(self) -> 'Rect2': ...
    def set_baking_rect_offset(self, rect_offset: 'Vector2') -> None: ...
    def get_baking_rect_offset(self) -> 'Vector2': ...
    def clear(self) -> None: ...


class NavigationRegion2D(Node2D):


    navigation_polygon: 'NavigationPolygon'
    enabled: 'bool'
    use_edge_connections: 'bool'
    navigation_layers: 'int'
    enter_cost: 'float'
    travel_cost: 'float'
    navigation_polygon_changed: 'Signal[Callable[[], None]]'  # navigation_polygon_changed()
    bake_finished: 'Signal[Callable[[], None]]'  # bake_finished()

    def get_rid(self) -> 'RID': ...
    def set_navigation_polygon(self, navigation_polygon: 'NavigationPolygon') -> None: ...
    def get_navigation_polygon(self) -> 'NavigationPolygon': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_use_edge_connections(self, enabled: 'bool') -> None: ...
    def get_use_edge_connections(self) -> 'bool': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_navigation_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_value(self, layer_number: 'int') -> 'bool': ...
    def get_region_rid(self) -> 'RID': ...
    def set_enter_cost(self, enter_cost: 'float') -> None: ...
    def get_enter_cost(self) -> 'float': ...
    def set_travel_cost(self, travel_cost: 'float') -> None: ...
    def get_travel_cost(self) -> 'float': ...
    def bake_navigation_polygon(self, on_thread: 'bool' = True) -> None: ...
    def is_baking(self) -> 'bool': ...
    def get_bounds(self) -> 'Rect2': ...


class NavigationRegion3D(Node3D):


    navigation_mesh: 'NavigationMesh'
    enabled: 'bool'
    use_edge_connections: 'bool'
    navigation_layers: 'int'
    enter_cost: 'float'
    travel_cost: 'float'
    navigation_mesh_changed: 'Signal[Callable[[], None]]'  # navigation_mesh_changed()
    bake_finished: 'Signal[Callable[[], None]]'  # bake_finished()

    def get_rid(self) -> 'RID': ...
    def set_navigation_mesh(self, navigation_mesh: 'NavigationMesh') -> None: ...
    def get_navigation_mesh(self) -> 'NavigationMesh': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_navigation_map(self, navigation_map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_use_edge_connections(self, enabled: 'bool') -> None: ...
    def get_use_edge_connections(self) -> 'bool': ...
    def set_navigation_layers(self, navigation_layers: 'int') -> None: ...
    def get_navigation_layers(self) -> 'int': ...
    def set_navigation_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_value(self, layer_number: 'int') -> 'bool': ...
    def get_region_rid(self) -> 'RID': ...
    def set_enter_cost(self, enter_cost: 'float') -> None: ...
    def get_enter_cost(self) -> 'float': ...
    def set_travel_cost(self, travel_cost: 'float') -> None: ...
    def get_travel_cost(self) -> 'float': ...
    def bake_navigation_mesh(self, on_thread: 'bool' = True) -> None: ...
    def is_baking(self) -> 'bool': ...
    def get_bounds(self) -> 'AABB': ...


class NavigationServer2D(Object):


    map_changed: 'Signal[Callable[[RID], None]]'  # map_changed(map: RID)
    navigation_debug_changed: 'Signal[Callable[[], None]]'  # navigation_debug_changed()

    def get_maps(self) -> 'Array'['RID']: ...
    def map_create(self) -> 'RID': ...
    def map_set_active(self, map: 'RID', active: 'bool') -> None: ...
    def map_is_active(self, map: 'RID') -> 'bool': ...
    def map_set_cell_size(self, map: 'RID', cell_size: 'float') -> None: ...
    def map_get_cell_size(self, map: 'RID') -> 'float': ...
    def map_set_use_edge_connections(self, map: 'RID', enabled: 'bool') -> None: ...
    def map_get_use_edge_connections(self, map: 'RID') -> 'bool': ...
    def map_set_edge_connection_margin(self, map: 'RID', margin: 'float') -> None: ...
    def map_get_edge_connection_margin(self, map: 'RID') -> 'float': ...
    def map_set_link_connection_radius(self, map: 'RID', radius: 'float') -> None: ...
    def map_get_link_connection_radius(self, map: 'RID') -> 'float': ...
    def map_get_path(self, map: 'RID', origin: 'Vector2', destination: 'Vector2', optimize: 'bool', navigation_layers: 'int' = 1) -> 'PackedVector2Array': ...
    def map_get_closest_point(self, map: 'RID', to_point: 'Vector2') -> 'Vector2': ...
    def map_get_closest_point_owner(self, map: 'RID', to_point: 'Vector2') -> 'RID': ...
    def map_get_links(self, map: 'RID') -> 'Array'['RID']: ...
    def map_get_regions(self, map: 'RID') -> 'Array'['RID']: ...
    def map_get_agents(self, map: 'RID') -> 'Array'['RID']: ...
    def map_get_obstacles(self, map: 'RID') -> 'Array'['RID']: ...
    def map_force_update(self, map: 'RID') -> None: ...
    def map_get_iteration_id(self, map: 'RID') -> 'int': ...
    def map_set_use_async_iterations(self, map: 'RID', enabled: 'bool') -> None: ...
    def map_get_use_async_iterations(self, map: 'RID') -> 'bool': ...
    def map_get_random_point(self, map: 'RID', navigation_layers: 'int', uniformly: 'bool') -> 'Vector2': ...
    def query_path(self, parameters: 'NavigationPathQueryParameters2D', result: 'NavigationPathQueryResult2D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def region_create(self) -> 'RID': ...
    def region_set_enabled(self, region: 'RID', enabled: 'bool') -> None: ...
    def region_get_enabled(self, region: 'RID') -> 'bool': ...
    def region_set_use_edge_connections(self, region: 'RID', enabled: 'bool') -> None: ...
    def region_get_use_edge_connections(self, region: 'RID') -> 'bool': ...
    def region_set_enter_cost(self, region: 'RID', enter_cost: 'float') -> None: ...
    def region_get_enter_cost(self, region: 'RID') -> 'float': ...
    def region_set_travel_cost(self, region: 'RID', travel_cost: 'float') -> None: ...
    def region_get_travel_cost(self, region: 'RID') -> 'float': ...
    def region_set_owner_id(self, region: 'RID', owner_id: 'int') -> None: ...
    def region_get_owner_id(self, region: 'RID') -> 'int': ...
    def region_owns_point(self, region: 'RID', point: 'Vector2') -> 'bool': ...
    def region_set_map(self, region: 'RID', map: 'RID') -> None: ...
    def region_get_map(self, region: 'RID') -> 'RID': ...
    def region_set_navigation_layers(self, region: 'RID', navigation_layers: 'int') -> None: ...
    def region_get_navigation_layers(self, region: 'RID') -> 'int': ...
    def region_set_transform(self, region: 'RID', transform: 'Transform2D') -> None: ...
    def region_get_transform(self, region: 'RID') -> 'Transform2D': ...
    def region_set_navigation_polygon(self, region: 'RID', navigation_polygon: 'NavigationPolygon') -> None: ...
    def region_get_connections_count(self, region: 'RID') -> 'int': ...
    def region_get_connection_pathway_start(self, region: 'RID', connection: 'int') -> 'Vector2': ...
    def region_get_connection_pathway_end(self, region: 'RID', connection: 'int') -> 'Vector2': ...
    def region_get_closest_point(self, region: 'RID', to_point: 'Vector2') -> 'Vector2': ...
    def region_get_random_point(self, region: 'RID', navigation_layers: 'int', uniformly: 'bool') -> 'Vector2': ...
    def region_get_bounds(self, region: 'RID') -> 'Rect2': ...
    def link_create(self) -> 'RID': ...
    def link_set_map(self, link: 'RID', map: 'RID') -> None: ...
    def link_get_map(self, link: 'RID') -> 'RID': ...
    def link_set_enabled(self, link: 'RID', enabled: 'bool') -> None: ...
    def link_get_enabled(self, link: 'RID') -> 'bool': ...
    def link_set_bidirectional(self, link: 'RID', bidirectional: 'bool') -> None: ...
    def link_is_bidirectional(self, link: 'RID') -> 'bool': ...
    def link_set_navigation_layers(self, link: 'RID', navigation_layers: 'int') -> None: ...
    def link_get_navigation_layers(self, link: 'RID') -> 'int': ...
    def link_set_start_position(self, link: 'RID', position: 'Vector2') -> None: ...
    def link_get_start_position(self, link: 'RID') -> 'Vector2': ...
    def link_set_end_position(self, link: 'RID', position: 'Vector2') -> None: ...
    def link_get_end_position(self, link: 'RID') -> 'Vector2': ...
    def link_set_enter_cost(self, link: 'RID', enter_cost: 'float') -> None: ...
    def link_get_enter_cost(self, link: 'RID') -> 'float': ...
    def link_set_travel_cost(self, link: 'RID', travel_cost: 'float') -> None: ...
    def link_get_travel_cost(self, link: 'RID') -> 'float': ...
    def link_set_owner_id(self, link: 'RID', owner_id: 'int') -> None: ...
    def link_get_owner_id(self, link: 'RID') -> 'int': ...
    def agent_create(self) -> 'RID': ...
    def agent_set_avoidance_enabled(self, agent: 'RID', enabled: 'bool') -> None: ...
    def agent_get_avoidance_enabled(self, agent: 'RID') -> 'bool': ...
    def agent_set_map(self, agent: 'RID', map: 'RID') -> None: ...
    def agent_get_map(self, agent: 'RID') -> 'RID': ...
    def agent_set_paused(self, agent: 'RID', paused: 'bool') -> None: ...
    def agent_get_paused(self, agent: 'RID') -> 'bool': ...
    def agent_set_neighbor_distance(self, agent: 'RID', distance: 'float') -> None: ...
    def agent_get_neighbor_distance(self, agent: 'RID') -> 'float': ...
    def agent_set_max_neighbors(self, agent: 'RID', count: 'int') -> None: ...
    def agent_get_max_neighbors(self, agent: 'RID') -> 'int': ...
    def agent_set_time_horizon_agents(self, agent: 'RID', time_horizon: 'float') -> None: ...
    def agent_get_time_horizon_agents(self, agent: 'RID') -> 'float': ...
    def agent_set_time_horizon_obstacles(self, agent: 'RID', time_horizon: 'float') -> None: ...
    def agent_get_time_horizon_obstacles(self, agent: 'RID') -> 'float': ...
    def agent_set_radius(self, agent: 'RID', radius: 'float') -> None: ...
    def agent_get_radius(self, agent: 'RID') -> 'float': ...
    def agent_set_max_speed(self, agent: 'RID', max_speed: 'float') -> None: ...
    def agent_get_max_speed(self, agent: 'RID') -> 'float': ...
    def agent_set_velocity_forced(self, agent: 'RID', velocity: 'Vector2') -> None: ...
    def agent_set_velocity(self, agent: 'RID', velocity: 'Vector2') -> None: ...
    def agent_get_velocity(self, agent: 'RID') -> 'Vector2': ...
    def agent_set_position(self, agent: 'RID', position: 'Vector2') -> None: ...
    def agent_get_position(self, agent: 'RID') -> 'Vector2': ...
    def agent_is_map_changed(self, agent: 'RID') -> 'bool': ...
    def agent_set_avoidance_callback(self, agent: 'RID', callback: 'Callable') -> None: ...
    def agent_has_avoidance_callback(self, agent: 'RID') -> 'bool': ...
    def agent_set_avoidance_layers(self, agent: 'RID', layers: 'int') -> None: ...
    def agent_get_avoidance_layers(self, agent: 'RID') -> 'int': ...
    def agent_set_avoidance_mask(self, agent: 'RID', mask: 'int') -> None: ...
    def agent_get_avoidance_mask(self, agent: 'RID') -> 'int': ...
    def agent_set_avoidance_priority(self, agent: 'RID', priority: 'float') -> None: ...
    def agent_get_avoidance_priority(self, agent: 'RID') -> 'float': ...
    def obstacle_create(self) -> 'RID': ...
    def obstacle_set_avoidance_enabled(self, obstacle: 'RID', enabled: 'bool') -> None: ...
    def obstacle_get_avoidance_enabled(self, obstacle: 'RID') -> 'bool': ...
    def obstacle_set_map(self, obstacle: 'RID', map: 'RID') -> None: ...
    def obstacle_get_map(self, obstacle: 'RID') -> 'RID': ...
    def obstacle_set_paused(self, obstacle: 'RID', paused: 'bool') -> None: ...
    def obstacle_get_paused(self, obstacle: 'RID') -> 'bool': ...
    def obstacle_set_radius(self, obstacle: 'RID', radius: 'float') -> None: ...
    def obstacle_get_radius(self, obstacle: 'RID') -> 'float': ...
    def obstacle_set_velocity(self, obstacle: 'RID', velocity: 'Vector2') -> None: ...
    def obstacle_get_velocity(self, obstacle: 'RID') -> 'Vector2': ...
    def obstacle_set_position(self, obstacle: 'RID', position: 'Vector2') -> None: ...
    def obstacle_get_position(self, obstacle: 'RID') -> 'Vector2': ...
    def obstacle_set_vertices(self, obstacle: 'RID', vertices: 'PackedVector2Array') -> None: ...
    def obstacle_get_vertices(self, obstacle: 'RID') -> 'PackedVector2Array': ...
    def obstacle_set_avoidance_layers(self, obstacle: 'RID', layers: 'int') -> None: ...
    def obstacle_get_avoidance_layers(self, obstacle: 'RID') -> 'int': ...
    def parse_source_geometry_data(self, navigation_polygon: 'NavigationPolygon', source_geometry_data: 'NavigationMeshSourceGeometryData2D', root_node: 'Node', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data(self, navigation_polygon: 'NavigationPolygon', source_geometry_data: 'NavigationMeshSourceGeometryData2D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data_async(self, navigation_polygon: 'NavigationPolygon', source_geometry_data: 'NavigationMeshSourceGeometryData2D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def is_baking_navigation_polygon(self, navigation_polygon: 'NavigationPolygon') -> 'bool': ...
    def source_geometry_parser_create(self) -> 'RID': ...
    def source_geometry_parser_set_callback(self, parser: 'RID', callback: 'Callable') -> None: ...
    def simplify_path(self, path: 'PackedVector2Array', epsilon: 'float') -> 'PackedVector2Array': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_debug_enabled(self, enabled: 'bool') -> None: ...
    def get_debug_enabled(self) -> 'bool': ...


class NavigationServer3D(Object):


    map_changed: 'Signal[Callable[[RID], None]]'  # map_changed(map: RID)
    navigation_debug_changed: 'Signal[Callable[[], None]]'  # navigation_debug_changed()
    avoidance_debug_changed: 'Signal[Callable[[], None]]'  # avoidance_debug_changed()

    def get_maps(self) -> 'Array'['RID']: ...
    def map_create(self) -> 'RID': ...
    def map_set_active(self, map: 'RID', active: 'bool') -> None: ...
    def map_is_active(self, map: 'RID') -> 'bool': ...
    def map_set_up(self, map: 'RID', up: 'Vector3') -> None: ...
    def map_get_up(self, map: 'RID') -> 'Vector3': ...
    def map_set_cell_size(self, map: 'RID', cell_size: 'float') -> None: ...
    def map_get_cell_size(self, map: 'RID') -> 'float': ...
    def map_set_cell_height(self, map: 'RID', cell_height: 'float') -> None: ...
    def map_get_cell_height(self, map: 'RID') -> 'float': ...
    def map_set_merge_rasterizer_cell_scale(self, map: 'RID', scale: 'float') -> None: ...
    def map_get_merge_rasterizer_cell_scale(self, map: 'RID') -> 'float': ...
    def map_set_use_edge_connections(self, map: 'RID', enabled: 'bool') -> None: ...
    def map_get_use_edge_connections(self, map: 'RID') -> 'bool': ...
    def map_set_edge_connection_margin(self, map: 'RID', margin: 'float') -> None: ...
    def map_get_edge_connection_margin(self, map: 'RID') -> 'float': ...
    def map_set_link_connection_radius(self, map: 'RID', radius: 'float') -> None: ...
    def map_get_link_connection_radius(self, map: 'RID') -> 'float': ...
    def map_get_path(self, map: 'RID', origin: 'Vector3', destination: 'Vector3', optimize: 'bool', navigation_layers: 'int' = 1) -> 'PackedVector3Array': ...
    def map_get_closest_point_to_segment(self, map: 'RID', start: 'Vector3', end: 'Vector3', use_collision: 'bool' = False) -> 'Vector3': ...
    def map_get_closest_point(self, map: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def map_get_closest_point_normal(self, map: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def map_get_closest_point_owner(self, map: 'RID', to_point: 'Vector3') -> 'RID': ...
    def map_get_links(self, map: 'RID') -> 'Array'['RID']: ...
    def map_get_regions(self, map: 'RID') -> 'Array'['RID']: ...
    def map_get_agents(self, map: 'RID') -> 'Array'['RID']: ...
    def map_get_obstacles(self, map: 'RID') -> 'Array'['RID']: ...
    def map_force_update(self, map: 'RID') -> None: ...
    def map_get_iteration_id(self, map: 'RID') -> 'int': ...
    def map_set_use_async_iterations(self, map: 'RID', enabled: 'bool') -> None: ...
    def map_get_use_async_iterations(self, map: 'RID') -> 'bool': ...
    def map_get_random_point(self, map: 'RID', navigation_layers: 'int', uniformly: 'bool') -> 'Vector3': ...
    def query_path(self, parameters: 'NavigationPathQueryParameters3D', result: 'NavigationPathQueryResult3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def region_create(self) -> 'RID': ...
    def region_set_enabled(self, region: 'RID', enabled: 'bool') -> None: ...
    def region_get_enabled(self, region: 'RID') -> 'bool': ...
    def region_set_use_edge_connections(self, region: 'RID', enabled: 'bool') -> None: ...
    def region_get_use_edge_connections(self, region: 'RID') -> 'bool': ...
    def region_set_enter_cost(self, region: 'RID', enter_cost: 'float') -> None: ...
    def region_get_enter_cost(self, region: 'RID') -> 'float': ...
    def region_set_travel_cost(self, region: 'RID', travel_cost: 'float') -> None: ...
    def region_get_travel_cost(self, region: 'RID') -> 'float': ...
    def region_set_owner_id(self, region: 'RID', owner_id: 'int') -> None: ...
    def region_get_owner_id(self, region: 'RID') -> 'int': ...
    def region_owns_point(self, region: 'RID', point: 'Vector3') -> 'bool': ...
    def region_set_map(self, region: 'RID', map: 'RID') -> None: ...
    def region_get_map(self, region: 'RID') -> 'RID': ...
    def region_set_navigation_layers(self, region: 'RID', navigation_layers: 'int') -> None: ...
    def region_get_navigation_layers(self, region: 'RID') -> 'int': ...
    def region_set_transform(self, region: 'RID', transform: 'Transform3D') -> None: ...
    def region_get_transform(self, region: 'RID') -> 'Transform3D': ...
    def region_set_navigation_mesh(self, region: 'RID', navigation_mesh: 'NavigationMesh') -> None: ...
    def region_bake_navigation_mesh(self, navigation_mesh: 'NavigationMesh', root_node: 'Node') -> None: ...
    def region_get_connections_count(self, region: 'RID') -> 'int': ...
    def region_get_connection_pathway_start(self, region: 'RID', connection: 'int') -> 'Vector3': ...
    def region_get_connection_pathway_end(self, region: 'RID', connection: 'int') -> 'Vector3': ...
    def region_get_closest_point_to_segment(self, region: 'RID', start: 'Vector3', end: 'Vector3', use_collision: 'bool' = False) -> 'Vector3': ...
    def region_get_closest_point(self, region: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def region_get_closest_point_normal(self, region: 'RID', to_point: 'Vector3') -> 'Vector3': ...
    def region_get_random_point(self, region: 'RID', navigation_layers: 'int', uniformly: 'bool') -> 'Vector3': ...
    def region_get_bounds(self, region: 'RID') -> 'AABB': ...
    def link_create(self) -> 'RID': ...
    def link_set_map(self, link: 'RID', map: 'RID') -> None: ...
    def link_get_map(self, link: 'RID') -> 'RID': ...
    def link_set_enabled(self, link: 'RID', enabled: 'bool') -> None: ...
    def link_get_enabled(self, link: 'RID') -> 'bool': ...
    def link_set_bidirectional(self, link: 'RID', bidirectional: 'bool') -> None: ...
    def link_is_bidirectional(self, link: 'RID') -> 'bool': ...
    def link_set_navigation_layers(self, link: 'RID', navigation_layers: 'int') -> None: ...
    def link_get_navigation_layers(self, link: 'RID') -> 'int': ...
    def link_set_start_position(self, link: 'RID', position: 'Vector3') -> None: ...
    def link_get_start_position(self, link: 'RID') -> 'Vector3': ...
    def link_set_end_position(self, link: 'RID', position: 'Vector3') -> None: ...
    def link_get_end_position(self, link: 'RID') -> 'Vector3': ...
    def link_set_enter_cost(self, link: 'RID', enter_cost: 'float') -> None: ...
    def link_get_enter_cost(self, link: 'RID') -> 'float': ...
    def link_set_travel_cost(self, link: 'RID', travel_cost: 'float') -> None: ...
    def link_get_travel_cost(self, link: 'RID') -> 'float': ...
    def link_set_owner_id(self, link: 'RID', owner_id: 'int') -> None: ...
    def link_get_owner_id(self, link: 'RID') -> 'int': ...
    def agent_create(self) -> 'RID': ...
    def agent_set_avoidance_enabled(self, agent: 'RID', enabled: 'bool') -> None: ...
    def agent_get_avoidance_enabled(self, agent: 'RID') -> 'bool': ...
    def agent_set_use_3d_avoidance(self, agent: 'RID', enabled: 'bool') -> None: ...
    def agent_get_use_3d_avoidance(self, agent: 'RID') -> 'bool': ...
    def agent_set_map(self, agent: 'RID', map: 'RID') -> None: ...
    def agent_get_map(self, agent: 'RID') -> 'RID': ...
    def agent_set_paused(self, agent: 'RID', paused: 'bool') -> None: ...
    def agent_get_paused(self, agent: 'RID') -> 'bool': ...
    def agent_set_neighbor_distance(self, agent: 'RID', distance: 'float') -> None: ...
    def agent_get_neighbor_distance(self, agent: 'RID') -> 'float': ...
    def agent_set_max_neighbors(self, agent: 'RID', count: 'int') -> None: ...
    def agent_get_max_neighbors(self, agent: 'RID') -> 'int': ...
    def agent_set_time_horizon_agents(self, agent: 'RID', time_horizon: 'float') -> None: ...
    def agent_get_time_horizon_agents(self, agent: 'RID') -> 'float': ...
    def agent_set_time_horizon_obstacles(self, agent: 'RID', time_horizon: 'float') -> None: ...
    def agent_get_time_horizon_obstacles(self, agent: 'RID') -> 'float': ...
    def agent_set_radius(self, agent: 'RID', radius: 'float') -> None: ...
    def agent_get_radius(self, agent: 'RID') -> 'float': ...
    def agent_set_height(self, agent: 'RID', height: 'float') -> None: ...
    def agent_get_height(self, agent: 'RID') -> 'float': ...
    def agent_set_max_speed(self, agent: 'RID', max_speed: 'float') -> None: ...
    def agent_get_max_speed(self, agent: 'RID') -> 'float': ...
    def agent_set_velocity_forced(self, agent: 'RID', velocity: 'Vector3') -> None: ...
    def agent_set_velocity(self, agent: 'RID', velocity: 'Vector3') -> None: ...
    def agent_get_velocity(self, agent: 'RID') -> 'Vector3': ...
    def agent_set_position(self, agent: 'RID', position: 'Vector3') -> None: ...
    def agent_get_position(self, agent: 'RID') -> 'Vector3': ...
    def agent_is_map_changed(self, agent: 'RID') -> 'bool': ...
    def agent_set_avoidance_callback(self, agent: 'RID', callback: 'Callable') -> None: ...
    def agent_has_avoidance_callback(self, agent: 'RID') -> 'bool': ...
    def agent_set_avoidance_layers(self, agent: 'RID', layers: 'int') -> None: ...
    def agent_get_avoidance_layers(self, agent: 'RID') -> 'int': ...
    def agent_set_avoidance_mask(self, agent: 'RID', mask: 'int') -> None: ...
    def agent_get_avoidance_mask(self, agent: 'RID') -> 'int': ...
    def agent_set_avoidance_priority(self, agent: 'RID', priority: 'float') -> None: ...
    def agent_get_avoidance_priority(self, agent: 'RID') -> 'float': ...
    def obstacle_create(self) -> 'RID': ...
    def obstacle_set_avoidance_enabled(self, obstacle: 'RID', enabled: 'bool') -> None: ...
    def obstacle_get_avoidance_enabled(self, obstacle: 'RID') -> 'bool': ...
    def obstacle_set_use_3d_avoidance(self, obstacle: 'RID', enabled: 'bool') -> None: ...
    def obstacle_get_use_3d_avoidance(self, obstacle: 'RID') -> 'bool': ...
    def obstacle_set_map(self, obstacle: 'RID', map: 'RID') -> None: ...
    def obstacle_get_map(self, obstacle: 'RID') -> 'RID': ...
    def obstacle_set_paused(self, obstacle: 'RID', paused: 'bool') -> None: ...
    def obstacle_get_paused(self, obstacle: 'RID') -> 'bool': ...
    def obstacle_set_radius(self, obstacle: 'RID', radius: 'float') -> None: ...
    def obstacle_get_radius(self, obstacle: 'RID') -> 'float': ...
    def obstacle_set_height(self, obstacle: 'RID', height: 'float') -> None: ...
    def obstacle_get_height(self, obstacle: 'RID') -> 'float': ...
    def obstacle_set_velocity(self, obstacle: 'RID', velocity: 'Vector3') -> None: ...
    def obstacle_get_velocity(self, obstacle: 'RID') -> 'Vector3': ...
    def obstacle_set_position(self, obstacle: 'RID', position: 'Vector3') -> None: ...
    def obstacle_get_position(self, obstacle: 'RID') -> 'Vector3': ...
    def obstacle_set_vertices(self, obstacle: 'RID', vertices: 'PackedVector3Array') -> None: ...
    def obstacle_get_vertices(self, obstacle: 'RID') -> 'PackedVector3Array': ...
    def obstacle_set_avoidance_layers(self, obstacle: 'RID', layers: 'int') -> None: ...
    def obstacle_get_avoidance_layers(self, obstacle: 'RID') -> 'int': ...
    def parse_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', root_node: 'Node', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def bake_from_source_geometry_data_async(self, navigation_mesh: 'NavigationMesh', source_geometry_data: 'NavigationMeshSourceGeometryData3D', callback: 'Callable' = default('''Callable()''')) -> None: ...
    def is_baking_navigation_mesh(self, navigation_mesh: 'NavigationMesh') -> 'bool': ...
    def source_geometry_parser_create(self) -> 'RID': ...
    def source_geometry_parser_set_callback(self, parser: 'RID', callback: 'Callable') -> None: ...
    def simplify_path(self, path: 'PackedVector3Array', epsilon: 'float') -> 'PackedVector3Array': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_active(self, active: 'bool') -> None: ...
    def set_debug_enabled(self, enabled: 'bool') -> None: ...
    def get_debug_enabled(self) -> 'bool': ...
    def get_process_info(self, process_info: 'NavigationServer3D__ProcessInfo') -> 'int': ...


class NinePatchRect(Control):


    texture: 'Texture2D'
    draw_center: 'bool'
    region_rect: 'Rect2'
    patch_margin_left: 'int'
    patch_margin_top: 'int'
    patch_margin_right: 'int'
    patch_margin_bottom: 'int'
    axis_stretch_horizontal: 'int'
    axis_stretch_vertical: 'int'
    texture_changed: 'Signal[Callable[[], None]]'  # texture_changed()

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_patch_margin(self, margin: 'Side', value: 'int') -> None: ...
    def get_patch_margin(self, margin: 'Side') -> 'int': ...
    def set_region_rect(self, rect: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_draw_center(self, draw_center: 'bool') -> None: ...
    def is_draw_center_enabled(self) -> 'bool': ...
    def set_h_axis_stretch_mode(self, mode: 'NinePatchRect__AxisStretchMode') -> None: ...
    def get_h_axis_stretch_mode(self) -> 'NinePatchRect__AxisStretchMode': ...
    def set_v_axis_stretch_mode(self, mode: 'NinePatchRect__AxisStretchMode') -> None: ...
    def get_v_axis_stretch_mode(self) -> 'NinePatchRect__AxisStretchMode': ...


class Node(Object):


    name: 'StringName'
    unique_name_in_owner: 'bool'
    scene_file_path: 'str'
    owner: 'Node'
    multiplayer: 'MultiplayerAPI'
    process_mode: 'int'
    process_priority: 'int'
    process_physics_priority: 'int'
    process_thread_group: 'int'
    process_thread_group_order: 'int'
    process_thread_messages: 'int'
    physics_interpolation_mode: 'int'
    auto_translate_mode: 'int'
    editor_description: 'str'
    NOTIFICATION_ENTER_TREE: 'int' = 10
    NOTIFICATION_EXIT_TREE: 'int' = 11
    NOTIFICATION_MOVED_IN_PARENT: 'int' = 12
    NOTIFICATION_READY: 'int' = 13
    NOTIFICATION_PAUSED: 'int' = 14
    NOTIFICATION_UNPAUSED: 'int' = 15
    NOTIFICATION_PHYSICS_PROCESS: 'int' = 16
    NOTIFICATION_PROCESS: 'int' = 17
    NOTIFICATION_PARENTED: 'int' = 18
    NOTIFICATION_UNPARENTED: 'int' = 19
    NOTIFICATION_SCENE_INSTANTIATED: 'int' = 20
    NOTIFICATION_DRAG_BEGIN: 'int' = 21
    NOTIFICATION_DRAG_END: 'int' = 22
    NOTIFICATION_PATH_RENAMED: 'int' = 23
    NOTIFICATION_CHILD_ORDER_CHANGED: 'int' = 24
    NOTIFICATION_INTERNAL_PROCESS: 'int' = 25
    NOTIFICATION_INTERNAL_PHYSICS_PROCESS: 'int' = 26
    NOTIFICATION_POST_ENTER_TREE: 'int' = 27
    NOTIFICATION_DISABLED: 'int' = 28
    NOTIFICATION_ENABLED: 'int' = 29
    NOTIFICATION_RESET_PHYSICS_INTERPOLATION: 'int' = 2001
    NOTIFICATION_EDITOR_PRE_SAVE: 'int' = 9001
    NOTIFICATION_EDITOR_POST_SAVE: 'int' = 9002
    NOTIFICATION_WM_MOUSE_ENTER: 'int' = 1002
    NOTIFICATION_WM_MOUSE_EXIT: 'int' = 1003
    NOTIFICATION_WM_WINDOW_FOCUS_IN: 'int' = 1004
    NOTIFICATION_WM_WINDOW_FOCUS_OUT: 'int' = 1005
    NOTIFICATION_WM_CLOSE_REQUEST: 'int' = 1006
    NOTIFICATION_WM_GO_BACK_REQUEST: 'int' = 1007
    NOTIFICATION_WM_SIZE_CHANGED: 'int' = 1008
    NOTIFICATION_WM_DPI_CHANGE: 'int' = 1009
    NOTIFICATION_VP_MOUSE_ENTER: 'int' = 1010
    NOTIFICATION_VP_MOUSE_EXIT: 'int' = 1011
    NOTIFICATION_OS_MEMORY_WARNING: 'int' = 2009
    NOTIFICATION_TRANSLATION_CHANGED: 'int' = 2010
    NOTIFICATION_WM_ABOUT: 'int' = 2011
    NOTIFICATION_CRASH: 'int' = 2012
    NOTIFICATION_OS_IME_UPDATE: 'int' = 2013
    NOTIFICATION_APPLICATION_RESUMED: 'int' = 2014
    NOTIFICATION_APPLICATION_PAUSED: 'int' = 2015
    NOTIFICATION_APPLICATION_FOCUS_IN: 'int' = 2016
    NOTIFICATION_APPLICATION_FOCUS_OUT: 'int' = 2017
    NOTIFICATION_TEXT_SERVER_CHANGED: 'int' = 2018
    ready: 'Signal[Callable[[], None]]'  # ready()
    renamed: 'Signal[Callable[[], None]]'  # renamed()
    tree_entered: 'Signal[Callable[[], None]]'  # tree_entered()
    tree_exiting: 'Signal[Callable[[], None]]'  # tree_exiting()
    tree_exited: 'Signal[Callable[[], None]]'  # tree_exited()
    child_entered_tree: 'Signal[Callable[[Node], None]]'  # child_entered_tree(node: Node)
    child_exiting_tree: 'Signal[Callable[[Node], None]]'  # child_exiting_tree(node: Node)
    child_order_changed: 'Signal[Callable[[], None]]'  # child_order_changed()
    replacing_by: 'Signal[Callable[[Node], None]]'  # replacing_by(node: Node)
    editor_description_changed: 'Signal[Callable[[Node], None]]'  # editor_description_changed(node: Node)
    editor_state_changed: 'Signal[Callable[[], None]]'  # editor_state_changed()

    def _process(self, delta: 'float') -> None: ...
    def _physics_process(self, delta: 'float') -> None: ...
    def _enter_tree(self) -> None: ...
    def _exit_tree(self) -> None: ...
    def _ready(self) -> None: ...
    def _get_configuration_warnings(self) -> 'PackedStringArray': ...
    def _input(self, event: 'InputEvent') -> None: ...
    def _shortcut_input(self, event: 'InputEvent') -> None: ...
    def _unhandled_input(self, event: 'InputEvent') -> None: ...
    def _unhandled_key_input(self, event: 'InputEvent') -> None: ...
    @staticmethod
    def print_orphan_nodes() -> None: ...
    def add_sibling(self, sibling: 'Node', force_readable_name: 'bool' = False) -> None: ...
    def set_name(self, name: 'str') -> None: ...
    def get_name(self) -> 'StringName': ...
    def add_child(self, node: 'Node', force_readable_name: 'bool' = False, internal: 'Node__InternalMode' = 0) -> None: ...
    def remove_child(self, node: 'Node') -> None: ...
    def reparent(self, new_parent: 'Node', keep_global_transform: 'bool' = True) -> None: ...
    def get_child_count(self, include_internal: 'bool' = False) -> 'int': ...
    def get_children(self, include_internal: 'bool' = False) -> 'Array'['Node']: ...
    def get_child(self, idx: 'int', include_internal: 'bool' = False) -> 'Node': ...
    def has_node(self, path: 'NodePath') -> 'bool': ...
    def get_node(self, path: 'NodePath') -> 'Node': ...
    def get_node_or_null(self, path: 'NodePath') -> 'Node': ...
    def get_parent(self) -> 'Node': ...
    def find_child(self, pattern: 'str', recursive: 'bool' = True, owned: 'bool' = True) -> 'Node': ...
    def find_children(self, pattern: 'str', type: 'str' = "", recursive: 'bool' = True, owned: 'bool' = True) -> 'Array'['Node']: ...
    def find_parent(self, pattern: 'str') -> 'Node': ...
    def has_node_and_resource(self, path: 'NodePath') -> 'bool': ...
    def get_node_and_resource(self, path: 'NodePath') -> 'Array': ...
    def is_inside_tree(self) -> 'bool': ...
    def is_part_of_edited_scene(self) -> 'bool': ...
    def is_ancestor_of(self, node: 'Node') -> 'bool': ...
    def is_greater_than(self, node: 'Node') -> 'bool': ...
    def get_path(self) -> 'NodePath': ...
    def get_path_to(self, node: 'Node', use_unique_path: 'bool' = False) -> 'NodePath': ...
    def add_to_group(self, group: 'StringName', persistent: 'bool' = False) -> None: ...
    def remove_from_group(self, group: 'StringName') -> None: ...
    def is_in_group(self, group: 'StringName') -> 'bool': ...
    def move_child(self, child_node: 'Node', to_index: 'int') -> None: ...
    def get_groups(self) -> 'Array'['StringName']: ...
    def set_owner(self, owner: 'Node') -> None: ...
    def get_owner(self) -> 'Node': ...
    def get_index(self, include_internal: 'bool' = False) -> 'int': ...
    def print_tree(self) -> None: ...
    def print_tree_pretty(self) -> None: ...
    def get_tree_string(self) -> 'str': ...
    def get_tree_string_pretty(self) -> 'str': ...
    def set_scene_file_path(self, scene_file_path: 'str') -> None: ...
    def get_scene_file_path(self) -> 'str': ...
    def propagate_notification(self, what: 'int') -> None: ...
    def propagate_call(self, method: 'StringName', args: 'Array' = default('''[]'''), parent_first: 'bool' = False) -> None: ...
    def set_physics_process(self, enable: 'bool') -> None: ...
    def get_physics_process_delta_time(self) -> 'float': ...
    def is_physics_processing(self) -> 'bool': ...
    def get_process_delta_time(self) -> 'float': ...
    def set_process(self, enable: 'bool') -> None: ...
    def set_process_priority(self, priority: 'int') -> None: ...
    def get_process_priority(self) -> 'int': ...
    def set_physics_process_priority(self, priority: 'int') -> None: ...
    def get_physics_process_priority(self) -> 'int': ...
    def is_processing(self) -> 'bool': ...
    def set_process_input(self, enable: 'bool') -> None: ...
    def is_processing_input(self) -> 'bool': ...
    def set_process_shortcut_input(self, enable: 'bool') -> None: ...
    def is_processing_shortcut_input(self) -> 'bool': ...
    def set_process_unhandled_input(self, enable: 'bool') -> None: ...
    def is_processing_unhandled_input(self) -> 'bool': ...
    def set_process_unhandled_key_input(self, enable: 'bool') -> None: ...
    def is_processing_unhandled_key_input(self) -> 'bool': ...
    def set_process_mode(self, mode: 'Node__ProcessMode') -> None: ...
    def get_process_mode(self) -> 'Node__ProcessMode': ...
    def can_process(self) -> 'bool': ...
    def set_process_thread_group(self, mode: 'Node__ProcessThreadGroup') -> None: ...
    def get_process_thread_group(self) -> 'Node__ProcessThreadGroup': ...
    def set_process_thread_messages(self, flags: 'Node__ProcessThreadMessages') -> None: ...
    def get_process_thread_messages(self) -> 'Node__ProcessThreadMessages': ...
    def set_process_thread_group_order(self, order: 'int') -> None: ...
    def get_process_thread_group_order(self) -> 'int': ...
    def set_display_folded(self, fold: 'bool') -> None: ...
    def is_displayed_folded(self) -> 'bool': ...
    def set_process_internal(self, enable: 'bool') -> None: ...
    def is_processing_internal(self) -> 'bool': ...
    def set_physics_process_internal(self, enable: 'bool') -> None: ...
    def is_physics_processing_internal(self) -> 'bool': ...
    def set_physics_interpolation_mode(self, mode: 'Node__PhysicsInterpolationMode') -> None: ...
    def get_physics_interpolation_mode(self) -> 'Node__PhysicsInterpolationMode': ...
    def is_physics_interpolated(self) -> 'bool': ...
    def is_physics_interpolated_and_enabled(self) -> 'bool': ...
    def reset_physics_interpolation(self) -> None: ...
    def set_auto_translate_mode(self, mode: 'Node__AutoTranslateMode') -> None: ...
    def get_auto_translate_mode(self) -> 'Node__AutoTranslateMode': ...
    def set_translation_domain_inherited(self) -> None: ...
    def get_window(self) -> 'Window': ...
    def get_last_exclusive_window(self) -> 'Window': ...
    def get_tree(self) -> 'SceneTree': ...
    def create_tween(self) -> 'Tween': ...
    def duplicate(self, flags: 'int' = 15) -> 'Node': ...
    def replace_by(self, node: 'Node', keep_groups: 'bool' = False) -> None: ...
    def set_scene_instance_load_placeholder(self, load_placeholder: 'bool') -> None: ...
    def get_scene_instance_load_placeholder(self) -> 'bool': ...
    def set_editable_instance(self, node: 'Node', is_editable: 'bool') -> None: ...
    def is_editable_instance(self, node: 'Node') -> 'bool': ...
    def get_viewport(self) -> 'Viewport': ...
    def queue_free(self) -> None: ...
    def request_ready(self) -> None: ...
    def is_node_ready(self) -> 'bool': ...
    def set_multiplayer_authority(self, id: 'int', recursive: 'bool' = True) -> None: ...
    def get_multiplayer_authority(self) -> 'int': ...
    def is_multiplayer_authority(self) -> 'bool': ...
    def get_multiplayer(self) -> 'MultiplayerAPI': ...
    def rpc_config(self, method: 'StringName', config: 'Variant') -> None: ...
    def get_rpc_config(self) -> 'Variant': ...
    def set_editor_description(self, editor_description: 'str') -> None: ...
    def get_editor_description(self) -> 'str': ...
    def set_unique_name_in_owner(self, enable: 'bool') -> None: ...
    def is_unique_name_in_owner(self) -> 'bool': ...
    def atr(self, message: 'str', context: 'StringName' = default('''""''')) -> 'str': ...
    def atr_n(self, message: 'str', plural_message: 'StringName', n: 'int', context: 'StringName' = default('''""''')) -> 'str': ...
    def rpc(self, method: 'StringName') -> 'Error': ...
    def rpc_id(self, peer_id: 'int', method: 'StringName') -> 'Error': ...
    def update_configuration_warnings(self) -> None: ...
    def call_deferred_thread_group(self, method: 'StringName') -> 'Variant': ...
    def set_deferred_thread_group(self, property: 'StringName', value: 'Variant') -> None: ...
    def notify_deferred_thread_group(self, what: 'int') -> None: ...
    def call_thread_safe(self, method: 'StringName') -> 'Variant': ...
    def set_thread_safe(self, property: 'StringName', value: 'Variant') -> None: ...
    def notify_thread_safe(self, what: 'int') -> None: ...


class Node2D(CanvasItem):


    position: 'Vector2'
    rotation: 'float'
    rotation_degrees: 'float'
    scale: 'Vector2'
    skew: 'float'
    transform: 'Transform2D'
    global_position: 'Vector2'
    global_rotation: 'float'
    global_rotation_degrees: 'float'
    global_scale: 'Vector2'
    global_skew: 'float'
    global_transform: 'Transform2D'

    def set_position(self, position: 'Vector2') -> None: ...
    def set_rotation(self, radians: 'float') -> None: ...
    def set_rotation_degrees(self, degrees: 'float') -> None: ...
    def set_skew(self, radians: 'float') -> None: ...
    def set_scale(self, scale: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def get_rotation(self) -> 'float': ...
    def get_rotation_degrees(self) -> 'float': ...
    def get_skew(self) -> 'float': ...
    def get_scale(self) -> 'Vector2': ...
    def rotate(self, radians: 'float') -> None: ...
    def move_local_x(self, delta: 'float', scaled: 'bool' = False) -> None: ...
    def move_local_y(self, delta: 'float', scaled: 'bool' = False) -> None: ...
    def translate(self, offset: 'Vector2') -> None: ...
    def global_translate(self, offset: 'Vector2') -> None: ...
    def apply_scale(self, ratio: 'Vector2') -> None: ...
    def set_global_position(self, position: 'Vector2') -> None: ...
    def get_global_position(self) -> 'Vector2': ...
    def set_global_rotation(self, radians: 'float') -> None: ...
    def set_global_rotation_degrees(self, degrees: 'float') -> None: ...
    def get_global_rotation(self) -> 'float': ...
    def get_global_rotation_degrees(self) -> 'float': ...
    def set_global_skew(self, radians: 'float') -> None: ...
    def get_global_skew(self) -> 'float': ...
    def set_global_scale(self, scale: 'Vector2') -> None: ...
    def get_global_scale(self) -> 'Vector2': ...
    def set_transform(self, xform: 'Transform2D') -> None: ...
    def set_global_transform(self, xform: 'Transform2D') -> None: ...
    def look_at(self, point: 'Vector2') -> None: ...
    def get_angle_to(self, point: 'Vector2') -> 'float': ...
    def to_local(self, global_point: 'Vector2') -> 'Vector2': ...
    def to_global(self, local_point: 'Vector2') -> 'Vector2': ...
    def get_relative_transform_to_parent(self, parent: 'Node') -> 'Transform2D': ...


class Node3D(Node):


    transform: 'Transform3D'
    global_transform: 'Transform3D'
    position: 'Vector3'
    rotation: 'Vector3'
    rotation_degrees: 'Vector3'
    quaternion: 'Quaternion'
    basis: 'Basis'
    scale: 'Vector3'
    rotation_edit_mode: 'int'
    rotation_order: 'int'
    top_level: 'bool'
    global_position: 'Vector3'
    global_basis: 'Basis'
    global_rotation: 'Vector3'
    global_rotation_degrees: 'Vector3'
    visible: 'bool'
    visibility_parent: 'NodePath'
    NOTIFICATION_TRANSFORM_CHANGED: 'int' = 2000
    NOTIFICATION_ENTER_WORLD: 'int' = 41
    NOTIFICATION_EXIT_WORLD: 'int' = 42
    NOTIFICATION_VISIBILITY_CHANGED: 'int' = 43
    NOTIFICATION_LOCAL_TRANSFORM_CHANGED: 'int' = 44
    visibility_changed: 'Signal[Callable[[], None]]'  # visibility_changed()

    def set_transform(self, local: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def set_position(self, position: 'Vector3') -> None: ...
    def get_position(self) -> 'Vector3': ...
    def set_rotation(self, euler_radians: 'Vector3') -> None: ...
    def get_rotation(self) -> 'Vector3': ...
    def set_rotation_degrees(self, euler_degrees: 'Vector3') -> None: ...
    def get_rotation_degrees(self) -> 'Vector3': ...
    def set_rotation_order(self, order: 'EulerOrder') -> None: ...
    def get_rotation_order(self) -> 'EulerOrder': ...
    def set_rotation_edit_mode(self, edit_mode: 'Node3D__RotationEditMode') -> None: ...
    def get_rotation_edit_mode(self) -> 'Node3D__RotationEditMode': ...
    def set_scale(self, scale: 'Vector3') -> None: ...
    def get_scale(self) -> 'Vector3': ...
    def set_quaternion(self, quaternion: 'Quaternion') -> None: ...
    def get_quaternion(self) -> 'Quaternion': ...
    def set_basis(self, basis: 'Basis') -> None: ...
    def get_basis(self) -> 'Basis': ...
    def set_global_transform(self, global_: 'Transform3D') -> None: ...
    def get_global_transform(self) -> 'Transform3D': ...
    def get_global_transform_interpolated(self) -> 'Transform3D': ...
    def set_global_position(self, position: 'Vector3') -> None: ...
    def get_global_position(self) -> 'Vector3': ...
    def set_global_basis(self, basis: 'Basis') -> None: ...
    def get_global_basis(self) -> 'Basis': ...
    def set_global_rotation(self, euler_radians: 'Vector3') -> None: ...
    def get_global_rotation(self) -> 'Vector3': ...
    def set_global_rotation_degrees(self, euler_degrees: 'Vector3') -> None: ...
    def get_global_rotation_degrees(self) -> 'Vector3': ...
    def get_parent_node_3d(self) -> 'Node3D': ...
    def set_ignore_transform_notification(self, enabled: 'bool') -> None: ...
    def set_as_top_level(self, enable: 'bool') -> None: ...
    def is_set_as_top_level(self) -> 'bool': ...
    def set_disable_scale(self, disable: 'bool') -> None: ...
    def is_scale_disabled(self) -> 'bool': ...
    def get_world_3d(self) -> 'World3D': ...
    def force_update_transform(self) -> None: ...
    def set_visibility_parent(self, path: 'NodePath') -> None: ...
    def get_visibility_parent(self) -> 'NodePath': ...
    def update_gizmos(self) -> None: ...
    def add_gizmo(self, gizmo: 'Node3DGizmo') -> None: ...
    def get_gizmos(self) -> 'Array'['Node3DGizmo']: ...
    def clear_gizmos(self) -> None: ...
    def set_subgizmo_selection(self, gizmo: 'Node3DGizmo', id: 'int', transform: 'Transform3D') -> None: ...
    def clear_subgizmo_selection(self) -> None: ...
    def set_visible(self, visible: 'bool') -> None: ...
    def is_visible(self) -> 'bool': ...
    def is_visible_in_tree(self) -> 'bool': ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def set_notify_local_transform(self, enable: 'bool') -> None: ...
    def is_local_transform_notification_enabled(self) -> 'bool': ...
    def set_notify_transform(self, enable: 'bool') -> None: ...
    def is_transform_notification_enabled(self) -> 'bool': ...
    def rotate(self, axis: 'Vector3', angle: 'float') -> None: ...
    def global_rotate(self, axis: 'Vector3', angle: 'float') -> None: ...
    def global_scale(self, scale: 'Vector3') -> None: ...
    def global_translate(self, offset: 'Vector3') -> None: ...
    def rotate_object_local(self, axis: 'Vector3', angle: 'float') -> None: ...
    def scale_object_local(self, scale: 'Vector3') -> None: ...
    def translate_object_local(self, offset: 'Vector3') -> None: ...
    def rotate_x(self, angle: 'float') -> None: ...
    def rotate_y(self, angle: 'float') -> None: ...
    def rotate_z(self, angle: 'float') -> None: ...
    def translate(self, offset: 'Vector3') -> None: ...
    def orthonormalize(self) -> None: ...
    def set_identity(self) -> None: ...
    def look_at(self, target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: 'bool' = False) -> None: ...
    def look_at_from_position(self, position: 'Vector3', target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: 'bool' = False) -> None: ...
    def to_local(self, global_point: 'Vector3') -> 'Vector3': ...
    def to_global(self, local_point: 'Vector3') -> 'Vector3': ...


class Node3DGizmo(RefCounted): ...


class Noise(Resource):



    def get_noise_1d(self, x: 'float') -> 'float': ...
    def get_noise_2d(self, x: 'float', y: 'float') -> 'float': ...
    def get_noise_2dv(self, v: 'Vector2') -> 'float': ...
    def get_noise_3d(self, x: 'float', y: 'float', z: 'float') -> 'float': ...
    def get_noise_3dv(self, v: 'Vector3') -> 'float': ...
    def get_image(self, width: 'int', height: 'int', invert: 'bool' = False, in_3d_space: 'bool' = False, normalize: 'bool' = True) -> 'Image': ...
    def get_seamless_image(self, width: 'int', height: 'int', invert: 'bool' = False, in_3d_space: 'bool' = False, skirt: 'float' = 0.1, normalize: 'bool' = True) -> 'Image': ...
    def get_image_3d(self, width: 'int', height: 'int', depth: 'int', invert: 'bool' = False, normalize: 'bool' = True) -> 'Array'['Image']: ...
    def get_seamless_image_3d(self, width: 'int', height: 'int', depth: 'int', invert: 'bool' = False, skirt: 'float' = 0.1, normalize: 'bool' = True) -> 'Array'['Image']: ...


class NoiseTexture2D(Texture2D):


    width: 'int'
    height: 'int'
    invert: 'bool'
    in_3d_space: 'bool'
    generate_mipmaps: 'bool'
    seamless: 'bool'
    seamless_blend_skirt: 'float'
    as_normal_map: 'bool'
    bump_strength: 'float'
    normalize: 'bool'
    color_ramp: 'Gradient'
    noise: 'Noise'

    def set_width(self, width: 'int') -> None: ...
    def set_height(self, height: 'int') -> None: ...
    def set_invert(self, invert: 'bool') -> None: ...
    def get_invert(self) -> 'bool': ...
    def set_in_3d_space(self, enable: 'bool') -> None: ...
    def is_in_3d_space(self) -> 'bool': ...
    def set_generate_mipmaps(self, invert: 'bool') -> None: ...
    def is_generating_mipmaps(self) -> 'bool': ...
    def set_seamless(self, seamless: 'bool') -> None: ...
    def get_seamless(self) -> 'bool': ...
    def set_seamless_blend_skirt(self, seamless_blend_skirt: 'float') -> None: ...
    def get_seamless_blend_skirt(self) -> 'float': ...
    def set_as_normal_map(self, as_normal_map: 'bool') -> None: ...
    def is_normal_map(self) -> 'bool': ...
    def set_bump_strength(self, bump_strength: 'float') -> None: ...
    def get_bump_strength(self) -> 'float': ...
    def set_normalize(self, normalize: 'bool') -> None: ...
    def is_normalized(self) -> 'bool': ...
    def set_color_ramp(self, gradient: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_noise(self, noise: 'Noise') -> None: ...
    def get_noise(self) -> 'Noise': ...


class NoiseTexture3D(Texture3D):


    width: 'int'
    height: 'int'
    depth: 'int'
    invert: 'bool'
    seamless: 'bool'
    seamless_blend_skirt: 'float'
    normalize: 'bool'
    color_ramp: 'Gradient'
    noise: 'Noise'

    def set_width(self, width: 'int') -> None: ...
    def set_height(self, height: 'int') -> None: ...
    def set_depth(self, depth: 'int') -> None: ...
    def set_invert(self, invert: 'bool') -> None: ...
    def get_invert(self) -> 'bool': ...
    def set_seamless(self, seamless: 'bool') -> None: ...
    def get_seamless(self) -> 'bool': ...
    def set_seamless_blend_skirt(self, seamless_blend_skirt: 'float') -> None: ...
    def get_seamless_blend_skirt(self) -> 'float': ...
    def set_normalize(self, normalize: 'bool') -> None: ...
    def is_normalized(self) -> 'bool': ...
    def set_color_ramp(self, gradient: 'Gradient') -> None: ...
    def get_color_ramp(self) -> 'Gradient': ...
    def set_noise(self, noise: 'Noise') -> None: ...
    def get_noise(self) -> 'Noise': ...


class ORMMaterial3D(BaseMaterial3D): ...


class OS(Object):


    low_processor_usage_mode: 'bool'
    low_processor_usage_mode_sleep_usec: 'int'
    delta_smoothing: 'bool'

    def get_entropy(self, size: 'int') -> 'PackedByteArray': ...
    def get_system_ca_certificates(self) -> 'str': ...
    def get_connected_midi_inputs(self) -> 'PackedStringArray': ...
    def open_midi_inputs(self) -> None: ...
    def close_midi_inputs(self) -> None: ...
    def alert(self, text: 'str', title: 'str' = "Alert!") -> None: ...
    def crash(self, message: 'str') -> None: ...
    def set_low_processor_usage_mode(self, enable: 'bool') -> None: ...
    def is_in_low_processor_usage_mode(self) -> 'bool': ...
    def set_low_processor_usage_mode_sleep_usec(self, usec: 'int') -> None: ...
    def get_low_processor_usage_mode_sleep_usec(self) -> 'int': ...
    def set_delta_smoothing(self, delta_smoothing_enabled: 'bool') -> None: ...
    def is_delta_smoothing_enabled(self) -> 'bool': ...
    def get_processor_count(self) -> 'int': ...
    def get_processor_name(self) -> 'str': ...
    def get_system_fonts(self) -> 'PackedStringArray': ...
    def get_system_font_path(self, font_name: 'str', weight: 'int' = 400, stretch: 'int' = 100, italic: 'bool' = False) -> 'str': ...
    def get_system_font_path_for_text(self, font_name: 'str', text: 'str', locale: 'str' = "", script: 'str' = "", weight: 'int' = 400, stretch: 'int' = 100, italic: 'bool' = False) -> 'PackedStringArray': ...
    def get_executable_path(self) -> 'str': ...
    def read_string_from_stdin(self, buffer_size: 'int') -> 'str': ...
    def read_buffer_from_stdin(self, buffer_size: 'int') -> 'PackedByteArray': ...
    def get_stdin_type(self) -> 'OS__StdHandleType': ...
    def get_stdout_type(self) -> 'OS__StdHandleType': ...
    def get_stderr_type(self) -> 'OS__StdHandleType': ...
    def execute(self, path: 'str', arguments: 'PackedStringArray', output: 'Array' = default('''[]'''), read_stderr: 'bool' = False, open_console: 'bool' = False) -> 'int': ...
    def execute_with_pipe(self, path: 'str', arguments: 'PackedStringArray', blocking: 'bool' = True) -> 'Dictionary': ...
    def create_process(self, path: 'str', arguments: 'PackedStringArray', open_console: 'bool' = False) -> 'int': ...
    def create_instance(self, arguments: 'PackedStringArray') -> 'int': ...
    def kill(self, pid: 'int') -> 'Error': ...
    def shell_open(self, uri: 'str') -> 'Error': ...
    def shell_show_in_file_manager(self, file_or_dir_path: 'str', open_folder: 'bool' = True) -> 'Error': ...
    def is_process_running(self, pid: 'int') -> 'bool': ...
    def get_process_exit_code(self, pid: 'int') -> 'int': ...
    def get_process_id(self) -> 'int': ...
    def has_environment(self, variable: 'str') -> 'bool': ...
    def get_environment(self, variable: 'str') -> 'str': ...
    def set_environment(self, variable: 'str', value: 'str') -> None: ...
    def unset_environment(self, variable: 'str') -> None: ...
    def get_name(self) -> 'str': ...
    def get_distribution_name(self) -> 'str': ...
    def get_version(self) -> 'str': ...
    def get_version_alias(self) -> 'str': ...
    def get_cmdline_args(self) -> 'PackedStringArray': ...
    def get_cmdline_user_args(self) -> 'PackedStringArray': ...
    def get_video_adapter_driver_info(self) -> 'PackedStringArray': ...
    def set_restart_on_exit(self, restart: 'bool', arguments: 'PackedStringArray' = default('''PackedStringArray()''')) -> None: ...
    def is_restart_on_exit_set(self) -> 'bool': ...
    def get_restart_on_exit_arguments(self) -> 'PackedStringArray': ...
    def delay_usec(self, usec: 'int') -> None: ...
    def delay_msec(self, msec: 'int') -> None: ...
    def get_locale(self) -> 'str': ...
    def get_locale_language(self) -> 'str': ...
    def get_model_name(self) -> 'str': ...
    def is_userfs_persistent(self) -> 'bool': ...
    def is_stdout_verbose(self) -> 'bool': ...
    def is_debug_build(self) -> 'bool': ...
    def get_static_memory_usage(self) -> 'int': ...
    def get_static_memory_peak_usage(self) -> 'int': ...
    def get_memory_info(self) -> 'Dictionary': ...
    def move_to_trash(self, path: 'str') -> 'Error': ...
    def get_user_data_dir(self) -> 'str': ...
    def get_system_dir(self, dir: 'OS__SystemDir', shared_storage: 'bool' = True) -> 'str': ...
    def get_config_dir(self) -> 'str': ...
    def get_data_dir(self) -> 'str': ...
    def get_cache_dir(self) -> 'str': ...
    def get_temp_dir(self) -> 'str': ...
    def get_unique_id(self) -> 'str': ...
    def get_keycode_string(self, code: 'Key') -> 'str': ...
    def is_keycode_unicode(self, code: 'int') -> 'bool': ...
    def find_keycode_from_string(self, string: 'str') -> 'Key': ...
    def set_use_file_access_save_and_swap(self, enabled: 'bool') -> None: ...
    def set_thread_name(self, name: 'str') -> 'Error': ...
    def get_thread_caller_id(self) -> 'int': ...
    def get_main_thread_id(self) -> 'int': ...
    def has_feature(self, tag_name: 'str') -> 'bool': ...
    def is_sandboxed(self) -> 'bool': ...
    def request_permission(self, name: 'str') -> 'bool': ...
    def request_permissions(self) -> 'bool': ...
    def get_granted_permissions(self) -> 'PackedStringArray': ...
    def revoke_granted_permissions(self) -> None: ...


class Object:


    NOTIFICATION_POSTINITIALIZE: 'int' = 0
    NOTIFICATION_PREDELETE: 'int' = 1
    NOTIFICATION_EXTENSION_RELOADED: 'int' = 2
    script_changed: 'Signal[Callable[[], None]]'  # script_changed()
    property_list_changed: 'Signal[Callable[[], None]]'  # property_list_changed()

    def get_class(self) -> 'str': ...
    def is_class(self, class_: 'str') -> 'bool': ...
    def set(self, property: 'StringName', value: 'Variant') -> None: ...
    def get(self, property: 'StringName') -> 'Variant': ...
    def set_indexed(self, property_path: 'NodePath', value: 'Variant') -> None: ...
    def get_indexed(self, property_path: 'NodePath') -> 'Variant': ...
    def get_property_list(self) -> 'Array'['Dictionary']: ...
    def get_method_list(self) -> 'Array'['Dictionary']: ...
    def property_can_revert(self, property: 'StringName') -> 'bool': ...
    def property_get_revert(self, property: 'StringName') -> 'Variant': ...
    def notification(self, what: 'int', reversed: 'bool' = False) -> None: ...
    def to_string(self) -> 'str': ...
    def get_instance_id(self) -> 'int': ...
    def set_script(self, script: 'Variant') -> None: ...
    def get_script(self) -> 'Variant': ...
    def set_meta(self, name: 'StringName', value: 'Variant') -> None: ...
    def remove_meta(self, name: 'StringName') -> None: ...
    def get_meta(self, name: 'StringName', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def has_meta(self, name: 'StringName') -> 'bool': ...
    def get_meta_list(self) -> 'Array'['StringName']: ...
    def add_user_signal(self, signal: 'str', arguments: 'Array' = default('''[]''')) -> None: ...
    def has_user_signal(self, signal: 'StringName') -> 'bool': ...
    def remove_user_signal(self, signal: 'StringName') -> None: ...
    def emit_signal(self, signal: 'StringName') -> 'Error': ...
    def call(self, method: 'StringName') -> 'Variant': ...
    def call_deferred(self, method: 'StringName') -> 'Variant': ...
    def set_deferred(self, property: 'StringName', value: 'Variant') -> None: ...
    def callv(self, method: 'StringName', arg_array: 'Array') -> 'Variant': ...
    def has_method(self, method: 'StringName') -> 'bool': ...
    def get_method_argument_count(self, method: 'StringName') -> 'int': ...
    def has_signal(self, signal: 'StringName') -> 'bool': ...
    def get_signal_list(self) -> 'Array'['Dictionary']: ...
    def get_signal_connection_list(self, signal: 'StringName') -> 'Array'['Dictionary']: ...
    def get_incoming_connections(self) -> 'Array'['Dictionary']: ...
    def connect(self, signal: 'StringName', callable: 'Callable', flags: 'int' = 0) -> 'Error': ...
    def disconnect(self, signal: 'StringName', callable: 'Callable') -> None: ...
    def is_connected(self, signal: 'StringName', callable: 'Callable') -> 'bool': ...
    def has_connections(self, signal: 'StringName') -> 'bool': ...
    def set_block_signals(self, enable: 'bool') -> None: ...
    def is_blocking_signals(self) -> 'bool': ...
    def notify_property_list_changed(self) -> None: ...
    def set_message_translation(self, enable: 'bool') -> None: ...
    def can_translate_messages(self) -> 'bool': ...
    def tr(self, message: 'StringName', context: 'StringName' = default('''&""''')) -> 'str': ...
    def tr_n(self, message: 'StringName', plural_message: 'StringName', n: 'int', context: 'StringName' = default('''&""''')) -> 'str': ...
    def get_translation_domain(self) -> 'StringName': ...
    def set_translation_domain(self, domain: 'StringName') -> None: ...
    def is_queued_for_deletion(self) -> 'bool': ...
    def cancel_free(self) -> None: ...


class Occluder3D(Resource):



    def get_vertices(self) -> 'PackedVector3Array': ...
    def get_indices(self) -> 'PackedInt32Array': ...


class OccluderInstance3D(VisualInstance3D):


    occluder: 'Occluder3D'
    bake_mask: 'int'
    bake_simplification_distance: 'float'

    def set_bake_mask(self, mask: 'int') -> None: ...
    def get_bake_mask(self) -> 'int': ...
    def set_bake_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_bake_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_bake_simplification_distance(self, simplification_distance: 'float') -> None: ...
    def get_bake_simplification_distance(self) -> 'float': ...
    def set_occluder(self, occluder: 'Occluder3D') -> None: ...
    def get_occluder(self) -> 'Occluder3D': ...


class OccluderPolygon2D(Resource):


    closed: 'bool'
    cull_mode: 'int'
    polygon: 'PackedVector2Array'

    def set_closed(self, closed: 'bool') -> None: ...
    def is_closed(self) -> 'bool': ...
    def set_cull_mode(self, cull_mode: 'OccluderPolygon2D__CullMode') -> None: ...
    def get_cull_mode(self) -> 'OccluderPolygon2D__CullMode': ...
    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...


class OfflineMultiplayerPeer(MultiplayerPeer): ...


class OggPacketSequence(Resource):


    packet_data: 'Array'['PackedByteArray']
    granule_positions: 'PackedInt64Array'
    sampling_rate: 'float'

    def set_packet_data(self, packet_data: 'Array'['Array']) -> None: ...
    def get_packet_data(self) -> 'Array'['Array']: ...
    def set_packet_granule_positions(self, granule_positions: 'PackedInt64Array') -> None: ...
    def get_packet_granule_positions(self) -> 'PackedInt64Array': ...
    def set_sampling_rate(self, sampling_rate: 'float') -> None: ...
    def get_sampling_rate(self) -> 'float': ...
    def get_length(self) -> 'float': ...


class OggPacketSequencePlayback(RefCounted): ...


class OmniLight3D(Light3D):


    omni_range: 'float'
    omni_attenuation: 'float'
    omni_shadow_mode: 'int'

    def set_shadow_mode(self, mode: 'OmniLight3D__ShadowMode') -> None: ...
    def get_shadow_mode(self) -> 'OmniLight3D__ShadowMode': ...


class OpenXRAPIExtension(RefCounted):



    def get_instance(self) -> 'int': ...
    def get_system_id(self) -> 'int': ...
    def get_session(self) -> 'int': ...
    def transform_from_pose(self, pose: 'intptr') -> 'Transform3D': ...
    def xr_result(self, result: 'int', format: 'str', args: 'Array') -> 'bool': ...
    @staticmethod
    def openxr_is_enabled(check_run_in_editor: 'bool') -> 'bool': ...
    def get_instance_proc_addr(self, name: 'str') -> 'int': ...
    def get_error_string(self, result: 'int') -> 'str': ...
    def get_swapchain_format_name(self, swapchain_format: 'int') -> 'str': ...
    def set_object_name(self, object_type: 'int', object_handle: 'int', object_name: 'str') -> None: ...
    def begin_debug_label_region(self, label_name: 'str') -> None: ...
    def end_debug_label_region(self) -> None: ...
    def insert_debug_label(self, label_name: 'str') -> None: ...
    def is_initialized(self) -> 'bool': ...
    def is_running(self) -> 'bool': ...
    def get_play_space(self) -> 'int': ...
    def get_predicted_display_time(self) -> 'int': ...
    def get_next_frame_time(self) -> 'int': ...
    def can_render(self) -> 'bool': ...
    def find_action(self, name: 'str', action_set: 'RID') -> 'RID': ...
    def action_get_handle(self, action: 'RID') -> 'int': ...
    def get_hand_tracker(self, hand_index: 'int') -> 'int': ...
    def register_composition_layer_provider(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def unregister_composition_layer_provider(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def register_projection_views_extension(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def unregister_projection_views_extension(self, extension: 'OpenXRExtensionWrapperExtension') -> None: ...
    def get_render_state_z_near(self) -> 'float': ...
    def get_render_state_z_far(self) -> 'float': ...
    def set_velocity_texture(self, render_target: 'RID') -> None: ...
    def set_velocity_depth_texture(self, render_target: 'RID') -> None: ...
    def set_velocity_target_size(self, target_size: 'Vector2i') -> None: ...
    def get_supported_swapchain_formats(self) -> 'PackedInt64Array': ...
    def openxr_swapchain_create(self, create_flags: 'int', usage_flags: 'int', swapchain_format: 'int', width: 'int', height: 'int', sample_count: 'int', array_size: 'int') -> 'int': ...
    def openxr_swapchain_free(self, swapchain: 'int') -> None: ...
    def openxr_swapchain_get_swapchain(self, swapchain: 'int') -> 'int': ...
    def openxr_swapchain_acquire(self, swapchain: 'int') -> None: ...
    def openxr_swapchain_get_image(self, swapchain: 'int') -> 'RID': ...
    def openxr_swapchain_release(self, swapchain: 'int') -> None: ...
    def get_projection_layer(self) -> 'int': ...
    def set_render_region(self, render_region: 'Rect2i') -> None: ...
    def set_emulate_environment_blend_mode_alpha_blend(self, enabled: 'bool') -> None: ...
    def is_environment_blend_mode_alpha_supported(self) -> 'OpenXRAPIExtension__OpenXRAlphaBlendModeSupport': ...


class OpenXRAction(Resource):


    localized_name: 'str'
    action_type: 'int'
    toplevel_paths: 'PackedStringArray'

    def set_localized_name(self, localized_name: 'str') -> None: ...
    def get_localized_name(self) -> 'str': ...
    def set_action_type(self, action_type: 'OpenXRAction__ActionType') -> None: ...
    def get_action_type(self) -> 'OpenXRAction__ActionType': ...
    def set_toplevel_paths(self, toplevel_paths: 'PackedStringArray') -> None: ...
    def get_toplevel_paths(self) -> 'PackedStringArray': ...


class OpenXRActionBindingModifier(OpenXRBindingModifier): ...


class OpenXRActionMap(Resource):


    action_sets: 'OpenXRActionSet'
    interaction_profiles: 'OpenXRInteractionProfile'

    def set_action_sets(self, action_sets: 'Array') -> None: ...
    def get_action_sets(self) -> 'Array': ...
    def get_action_set_count(self) -> 'int': ...
    def find_action_set(self, name: 'str') -> 'OpenXRActionSet': ...
    def get_action_set(self, idx: 'int') -> 'OpenXRActionSet': ...
    def add_action_set(self, action_set: 'OpenXRActionSet') -> None: ...
    def remove_action_set(self, action_set: 'OpenXRActionSet') -> None: ...
    def set_interaction_profiles(self, interaction_profiles: 'Array') -> None: ...
    def get_interaction_profiles(self) -> 'Array': ...
    def get_interaction_profile_count(self) -> 'int': ...
    def find_interaction_profile(self, name: 'str') -> 'OpenXRInteractionProfile': ...
    def get_interaction_profile(self, idx: 'int') -> 'OpenXRInteractionProfile': ...
    def add_interaction_profile(self, interaction_profile: 'OpenXRInteractionProfile') -> None: ...
    def remove_interaction_profile(self, interaction_profile: 'OpenXRInteractionProfile') -> None: ...
    def create_default_action_sets(self) -> None: ...


class OpenXRActionSet(Resource):


    localized_name: 'str'
    priority: 'int'
    actions: 'OpenXRAction'

    def set_localized_name(self, localized_name: 'str') -> None: ...
    def get_localized_name(self) -> 'str': ...
    def set_priority(self, priority: 'int') -> None: ...
    def get_priority(self) -> 'int': ...
    def get_action_count(self) -> 'int': ...
    def set_actions(self, actions: 'Array') -> None: ...
    def get_actions(self) -> 'Array': ...
    def add_action(self, action: 'OpenXRAction') -> None: ...
    def remove_action(self, action: 'OpenXRAction') -> None: ...


class OpenXRAnalogThresholdModifier(OpenXRActionBindingModifier):


    on_threshold: 'float'
    off_threshold: 'float'
    on_haptic: 'OpenXRHapticBase'
    off_haptic: 'OpenXRHapticBase'

    def set_on_threshold(self, on_threshold: 'float') -> None: ...
    def get_on_threshold(self) -> 'float': ...
    def set_off_threshold(self, off_threshold: 'float') -> None: ...
    def get_off_threshold(self) -> 'float': ...
    def set_on_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_on_haptic(self) -> 'OpenXRHapticBase': ...
    def set_off_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_off_haptic(self) -> 'OpenXRHapticBase': ...


class OpenXRBindingModifier(Resource):



    def _get_description(self) -> 'str': ...
    def _get_ip_modification(self) -> 'PackedByteArray': ...


class OpenXRBindingModifierEditor(PanelContainer):


    binding_modifier_removed: 'Signal[Callable[[Object], None]]'  # binding_modifier_removed(binding_modifier_editor: Object)

    def get_binding_modifier(self) -> 'OpenXRBindingModifier': ...
    def setup(self, action_map: 'OpenXRActionMap', binding_modifier: 'OpenXRBindingModifier') -> None: ...


class OpenXRCompositionLayer(Node3D):


    layer_viewport: 'Object'
    use_android_surface: 'bool'
    android_surface_size: 'Vector2i'
    sort_order: 'int'
    alpha_blend: 'bool'
    enable_hole_punch: 'bool'

    def set_layer_viewport(self, viewport: 'SubViewport') -> None: ...
    def get_layer_viewport(self) -> 'SubViewport': ...
    def set_use_android_surface(self, enable: 'bool') -> None: ...
    def get_use_android_surface(self) -> 'bool': ...
    def set_android_surface_size(self, size: 'Vector2i') -> None: ...
    def get_android_surface_size(self) -> 'Vector2i': ...
    def set_enable_hole_punch(self, enable: 'bool') -> None: ...
    def get_enable_hole_punch(self) -> 'bool': ...
    def set_sort_order(self, order: 'int') -> None: ...
    def get_sort_order(self) -> 'int': ...
    def set_alpha_blend(self, enabled: 'bool') -> None: ...
    def get_alpha_blend(self) -> 'bool': ...
    def get_android_surface(self) -> 'JavaObject': ...
    def is_natively_supported(self) -> 'bool': ...
    def intersects_ray(self, origin: 'Vector3', direction: 'Vector3') -> 'Vector2': ...


class OpenXRCompositionLayerCylinder(OpenXRCompositionLayer):


    radius: 'float'
    aspect_ratio: 'float'
    central_angle: 'float'
    fallback_segments: 'int'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_aspect_ratio(self, aspect_ratio: 'float') -> None: ...
    def get_aspect_ratio(self) -> 'float': ...
    def set_central_angle(self, angle: 'float') -> None: ...
    def get_central_angle(self) -> 'float': ...
    def set_fallback_segments(self, segments: 'int') -> None: ...
    def get_fallback_segments(self) -> 'int': ...


class OpenXRCompositionLayerEquirect(OpenXRCompositionLayer):


    radius: 'float'
    central_horizontal_angle: 'float'
    upper_vertical_angle: 'float'
    lower_vertical_angle: 'float'
    fallback_segments: 'int'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_central_horizontal_angle(self, angle: 'float') -> None: ...
    def get_central_horizontal_angle(self) -> 'float': ...
    def set_upper_vertical_angle(self, angle: 'float') -> None: ...
    def get_upper_vertical_angle(self) -> 'float': ...
    def set_lower_vertical_angle(self, angle: 'float') -> None: ...
    def get_lower_vertical_angle(self) -> 'float': ...
    def set_fallback_segments(self, segments: 'int') -> None: ...
    def get_fallback_segments(self) -> 'int': ...


class OpenXRCompositionLayerQuad(OpenXRCompositionLayer):


    quad_size: 'Vector2'

    def set_quad_size(self, size: 'Vector2') -> None: ...
    def get_quad_size(self) -> 'Vector2': ...


class OpenXRDpadBindingModifier(OpenXRIPBindingModifier):


    action_set: 'OpenXRActionSet'
    input_path: 'str'
    threshold: 'float'
    threshold_released: 'float'
    center_region: 'float'
    wedge_angle: 'float'
    is_sticky: 'bool'
    on_haptic: 'OpenXRHapticBase'
    off_haptic: 'OpenXRHapticBase'

    def set_action_set(self, action_set: 'OpenXRActionSet') -> None: ...
    def get_action_set(self) -> 'OpenXRActionSet': ...
    def set_input_path(self, input_path: 'str') -> None: ...
    def get_input_path(self) -> 'str': ...
    def set_threshold(self, threshold: 'float') -> None: ...
    def get_threshold(self) -> 'float': ...
    def set_threshold_released(self, threshold_released: 'float') -> None: ...
    def get_threshold_released(self) -> 'float': ...
    def set_center_region(self, center_region: 'float') -> None: ...
    def get_center_region(self) -> 'float': ...
    def set_wedge_angle(self, wedge_angle: 'float') -> None: ...
    def get_wedge_angle(self) -> 'float': ...
    def set_is_sticky(self, is_sticky: 'bool') -> None: ...
    def get_is_sticky(self) -> 'bool': ...
    def set_on_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_on_haptic(self) -> 'OpenXRHapticBase': ...
    def set_off_haptic(self, haptic: 'OpenXRHapticBase') -> None: ...
    def get_off_haptic(self) -> 'OpenXRHapticBase': ...


class OpenXRExtensionWrapperExtension(Object):



    def _get_requested_extensions(self) -> 'Dictionary': ...
    def _set_system_properties_and_get_next_pointer(self, next_pointer: 'intptr') -> 'int': ...
    def _set_instance_create_info_and_get_next_pointer(self, next_pointer: 'intptr') -> 'int': ...
    def _set_session_create_and_get_next_pointer(self, next_pointer: 'intptr') -> 'int': ...
    def _set_swapchain_create_info_and_get_next_pointer(self, next_pointer: 'intptr') -> 'int': ...
    def _set_hand_joint_locations_and_get_next_pointer(self, hand_index: 'int', next_pointer: 'intptr') -> 'int': ...
    def _set_projection_views_and_get_next_pointer(self, view_index: 'int', next_pointer: 'intptr') -> 'int': ...
    def _get_composition_layer_count(self) -> 'int': ...
    def _get_composition_layer(self, index: 'int') -> 'int': ...
    def _get_composition_layer_order(self, index: 'int') -> 'int': ...
    def _get_suggested_tracker_names(self) -> 'PackedStringArray': ...
    def _on_register_metadata(self) -> None: ...
    def _on_before_instance_created(self) -> None: ...
    def _on_instance_created(self, instance: 'int') -> None: ...
    def _on_instance_destroyed(self) -> None: ...
    def _on_session_created(self, session: 'int') -> None: ...
    def _on_process(self) -> None: ...
    def _on_pre_render(self) -> None: ...
    def _on_main_swapchains_created(self) -> None: ...
    def _on_pre_draw_viewport(self, viewport: 'RID') -> None: ...
    def _on_post_draw_viewport(self, viewport: 'RID') -> None: ...
    def _on_session_destroyed(self) -> None: ...
    def _on_state_idle(self) -> None: ...
    def _on_state_ready(self) -> None: ...
    def _on_state_synchronized(self) -> None: ...
    def _on_state_visible(self) -> None: ...
    def _on_state_focused(self) -> None: ...
    def _on_state_stopping(self) -> None: ...
    def _on_state_loss_pending(self) -> None: ...
    def _on_state_exiting(self) -> None: ...
    def _on_event_polled(self, event: 'intptr') -> 'bool': ...
    def _set_viewport_composition_layer_and_get_next_pointer(self, layer: 'intptr', property_values: 'Dictionary', next_pointer: 'intptr') -> 'int': ...
    def _get_viewport_composition_layer_extension_properties(self) -> 'Array'['Dictionary']: ...
    def _get_viewport_composition_layer_extension_property_defaults(self) -> 'Dictionary': ...
    def _on_viewport_composition_layer_destroyed(self, layer: 'intptr') -> None: ...
    def _set_android_surface_swapchain_create_info_and_get_next_pointer(self, property_values: 'Dictionary', next_pointer: 'intptr') -> 'int': ...
    def get_openxr_api(self) -> 'OpenXRAPIExtension': ...
    def register_extension_wrapper(self) -> None: ...


class OpenXRHand(Node3D):


    hand: 'int'
    motion_range: 'int'
    hand_skeleton: 'NodePath'
    skeleton_rig: 'int'
    bone_update: 'int'

    def set_hand(self, hand: 'OpenXRHand__Hands') -> None: ...
    def get_hand(self) -> 'OpenXRHand__Hands': ...
    def set_hand_skeleton(self, hand_skeleton: 'NodePath') -> None: ...
    def get_hand_skeleton(self) -> 'NodePath': ...
    def set_motion_range(self, motion_range: 'OpenXRHand__MotionRange') -> None: ...
    def get_motion_range(self) -> 'OpenXRHand__MotionRange': ...
    def set_skeleton_rig(self, skeleton_rig: 'OpenXRHand__SkeletonRig') -> None: ...
    def get_skeleton_rig(self) -> 'OpenXRHand__SkeletonRig': ...
    def set_bone_update(self, bone_update: 'OpenXRHand__BoneUpdate') -> None: ...
    def get_bone_update(self) -> 'OpenXRHand__BoneUpdate': ...


class OpenXRHapticBase(Resource): ...


class OpenXRHapticVibration(OpenXRHapticBase):


    duration: 'int'
    frequency: 'float'
    amplitude: 'float'

    def set_duration(self, duration: 'int') -> None: ...
    def get_duration(self) -> 'int': ...
    def set_frequency(self, frequency: 'float') -> None: ...
    def get_frequency(self) -> 'float': ...
    def set_amplitude(self, amplitude: 'float') -> None: ...
    def get_amplitude(self) -> 'float': ...


class OpenXRIPBinding(Resource):


    action: 'OpenXRAction'
    binding_path: 'str'
    binding_modifiers: 'OpenXRActionBindingModifier'
    paths: 'PackedStringArray'

    def set_action(self, action: 'OpenXRAction') -> None: ...
    def get_action(self) -> 'OpenXRAction': ...
    def set_binding_path(self, binding_path: 'str') -> None: ...
    def get_binding_path(self) -> 'str': ...
    def get_binding_modifier_count(self) -> 'int': ...
    def get_binding_modifier(self, index: 'int') -> 'OpenXRActionBindingModifier': ...
    def set_binding_modifiers(self, binding_modifiers: 'Array') -> None: ...
    def get_binding_modifiers(self) -> 'Array': ...
    def set_paths(self, paths: 'PackedStringArray') -> None: ...
    def get_paths(self) -> 'PackedStringArray': ...
    def get_path_count(self) -> 'int': ...
    def has_path(self, path: 'str') -> 'bool': ...
    def add_path(self, path: 'str') -> None: ...
    def remove_path(self, path: 'str') -> None: ...


class OpenXRIPBindingModifier(OpenXRBindingModifier): ...


class OpenXRInteractionProfile(Resource):


    interaction_profile_path: 'str'
    bindings: 'OpenXRIPBinding'
    binding_modifiers: 'OpenXRIPBindingModifier'

    def set_interaction_profile_path(self, interaction_profile_path: 'str') -> None: ...
    def get_interaction_profile_path(self) -> 'str': ...
    def get_binding_count(self) -> 'int': ...
    def get_binding(self, index: 'int') -> 'OpenXRIPBinding': ...
    def set_bindings(self, bindings: 'Array') -> None: ...
    def get_bindings(self) -> 'Array': ...
    def get_binding_modifier_count(self) -> 'int': ...
    def get_binding_modifier(self, index: 'int') -> 'OpenXRIPBindingModifier': ...
    def set_binding_modifiers(self, binding_modifiers: 'Array') -> None: ...
    def get_binding_modifiers(self) -> 'Array': ...


class OpenXRInteractionProfileEditor(OpenXRInteractionProfileEditorBase): ...


class OpenXRInteractionProfileEditorBase(HBoxContainer):



    def setup(self, action_map: 'OpenXRActionMap', interaction_profile: 'OpenXRInteractionProfile') -> None: ...


class OpenXRInteractionProfileMetadata(Object):



    def register_profile_rename(self, old_name: 'str', new_name: 'str') -> None: ...
    def register_top_level_path(self, display_name: 'str', openxr_path: 'str', openxr_extension_name: 'str') -> None: ...
    def register_interaction_profile(self, display_name: 'str', openxr_path: 'str', openxr_extension_name: 'str') -> None: ...
    def register_io_path(self, interaction_profile: 'str', display_name: 'str', toplevel_path: 'str', openxr_path: 'str', openxr_extension_name: 'str', action_type: 'OpenXRAction__ActionType') -> None: ...


class OpenXRInterface(XRInterface):


    display_refresh_rate: 'float'
    render_target_size_multiplier: 'float'
    foveation_level: 'int'
    foveation_dynamic: 'bool'
    vrs_min_radius: 'float'
    vrs_strength: 'float'
    session_begun: 'Signal[Callable[[], None]]'  # session_begun()
    session_stopping: 'Signal[Callable[[], None]]'  # session_stopping()
    session_focussed: 'Signal[Callable[[], None]]'  # session_focussed()
    session_visible: 'Signal[Callable[[], None]]'  # session_visible()
    session_loss_pending: 'Signal[Callable[[], None]]'  # session_loss_pending()
    instance_exiting: 'Signal[Callable[[], None]]'  # instance_exiting()
    pose_recentered: 'Signal[Callable[[], None]]'  # pose_recentered()
    refresh_rate_changed: 'Signal[Callable[[float], None]]'  # refresh_rate_changed(refresh_rate: float)

    def get_display_refresh_rate(self) -> 'float': ...
    def set_display_refresh_rate(self, refresh_rate: 'float') -> None: ...
    def get_render_target_size_multiplier(self) -> 'float': ...
    def set_render_target_size_multiplier(self, multiplier: 'float') -> None: ...
    def is_foveation_supported(self) -> 'bool': ...
    def get_foveation_level(self) -> 'int': ...
    def set_foveation_level(self, foveation_level: 'int') -> None: ...
    def get_foveation_dynamic(self) -> 'bool': ...
    def set_foveation_dynamic(self, foveation_dynamic: 'bool') -> None: ...
    def is_action_set_active(self, name: 'str') -> 'bool': ...
    def set_action_set_active(self, name: 'str', active: 'bool') -> None: ...
    def get_action_sets(self) -> 'Array': ...
    def get_available_display_refresh_rates(self) -> 'Array': ...
    def set_motion_range(self, hand: 'OpenXRInterface__Hand', motion_range: 'OpenXRInterface__HandMotionRange') -> None: ...
    def get_motion_range(self, hand: 'OpenXRInterface__Hand') -> 'OpenXRInterface__HandMotionRange': ...
    def get_hand_tracking_source(self, hand: 'OpenXRInterface__Hand') -> 'OpenXRInterface__HandTrackedSource': ...
    def get_hand_joint_flags(self, hand: 'OpenXRInterface__Hand', joint: 'OpenXRInterface__HandJoints') -> 'OpenXRInterface__HandJointFlags': ...
    def get_hand_joint_rotation(self, hand: 'OpenXRInterface__Hand', joint: 'OpenXRInterface__HandJoints') -> 'Quaternion': ...
    def get_hand_joint_position(self, hand: 'OpenXRInterface__Hand', joint: 'OpenXRInterface__HandJoints') -> 'Vector3': ...
    def get_hand_joint_radius(self, hand: 'OpenXRInterface__Hand', joint: 'OpenXRInterface__HandJoints') -> 'float': ...
    def get_hand_joint_linear_velocity(self, hand: 'OpenXRInterface__Hand', joint: 'OpenXRInterface__HandJoints') -> 'Vector3': ...
    def get_hand_joint_angular_velocity(self, hand: 'OpenXRInterface__Hand', joint: 'OpenXRInterface__HandJoints') -> 'Vector3': ...
    def is_hand_tracking_supported(self) -> 'bool': ...
    def is_hand_interaction_supported(self) -> 'bool': ...
    def is_eye_gaze_interaction_supported(self) -> 'bool': ...
    def get_vrs_min_radius(self) -> 'float': ...
    def set_vrs_min_radius(self, radius: 'float') -> None: ...
    def get_vrs_strength(self) -> 'float': ...
    def set_vrs_strength(self, strength: 'float') -> None: ...


class OpenXRVisibilityMask(VisualInstance3D): ...


class OptimizedTranslation(Translation):



    def generate(self, from_: 'Translation') -> None: ...


class OptionButton(Button):


    selected: 'int'
    fit_to_longest_item: 'bool'
    allow_reselect: 'bool'
    item_count: 'int'
    item_selected: 'Signal[Callable[[int], None]]'  # item_selected(index: int)
    item_focused: 'Signal[Callable[[int], None]]'  # item_focused(index: int)

    def add_item(self, label: 'str', id: 'int' = -1) -> None: ...
    def add_icon_item(self, texture: 'Texture2D', label: 'str', id: 'int' = -1) -> None: ...
    def set_item_text(self, idx: 'int', text: 'str') -> None: ...
    def set_item_icon(self, idx: 'int', texture: 'Texture2D') -> None: ...
    def set_item_disabled(self, idx: 'int', disabled: 'bool') -> None: ...
    def set_item_id(self, idx: 'int', id: 'int') -> None: ...
    def set_item_metadata(self, idx: 'int', metadata: 'Variant') -> None: ...
    def set_item_tooltip(self, idx: 'int', tooltip: 'str') -> None: ...
    def get_item_text(self, idx: 'int') -> 'str': ...
    def get_item_icon(self, idx: 'int') -> 'Texture2D': ...
    def get_item_id(self, idx: 'int') -> 'int': ...
    def get_item_index(self, id: 'int') -> 'int': ...
    def get_item_metadata(self, idx: 'int') -> 'Variant': ...
    def get_item_tooltip(self, idx: 'int') -> 'str': ...
    def is_item_disabled(self, idx: 'int') -> 'bool': ...
    def is_item_separator(self, idx: 'int') -> 'bool': ...
    def add_separator(self, text: 'str' = "") -> None: ...
    def clear(self) -> None: ...
    def select(self, idx: 'int') -> None: ...
    def get_selected(self) -> 'int': ...
    def get_selected_id(self) -> 'int': ...
    def get_selected_metadata(self) -> 'Variant': ...
    def remove_item(self, idx: 'int') -> None: ...
    def get_popup(self) -> 'PopupMenu': ...
    def show_popup(self) -> None: ...
    def set_item_count(self, count: 'int') -> None: ...
    def get_item_count(self) -> 'int': ...
    def has_selectable_items(self) -> 'bool': ...
    def get_selectable_item(self, from_last: 'bool' = False) -> 'int': ...
    def set_fit_to_longest_item(self, fit: 'bool') -> None: ...
    def is_fit_to_longest_item(self) -> 'bool': ...
    def set_allow_reselect(self, allow: 'bool') -> None: ...
    def get_allow_reselect(self) -> 'bool': ...
    def set_disable_shortcuts(self, disabled: 'bool') -> None: ...


class PCKPacker(RefCounted):



    def pck_start(self, pck_path: 'str', alignment: 'int' = 32, key: 'str' = "0000000000000000000000000000000000000000000000000000000000000000", encrypt_directory: 'bool' = False) -> 'Error': ...
    def add_file(self, target_path: 'str', source_path: 'str', encrypt: 'bool' = False) -> 'Error': ...
    def add_file_removal(self, target_path: 'str') -> 'Error': ...
    def flush(self, verbose: 'bool' = False) -> 'Error': ...


class PackedDataContainer(Resource):



    def pack(self, value: 'Variant') -> 'Error': ...
    def size(self) -> 'int': ...


class PackedDataContainerRef(RefCounted):



    def size(self) -> 'int': ...


class PackedScene(Resource):



    def pack(self, path: 'Node') -> 'Error': ...
    def instantiate(self, edit_state: 'PackedScene__GenEditState' = 0) -> 'Node': ...
    def can_instantiate(self) -> 'bool': ...
    def get_state(self) -> 'SceneState': ...


class PacketPeer(RefCounted):


    encode_buffer_max_size: 'int'

    def get_var(self, allow_objects: 'bool' = False) -> 'Variant': ...
    def put_var(self, var: 'Variant', full_objects: 'bool' = False) -> 'Error': ...
    def get_packet(self) -> 'PackedByteArray': ...
    def put_packet(self, buffer: 'PackedByteArray') -> 'Error': ...
    def get_packet_error(self) -> 'Error': ...
    def get_available_packet_count(self) -> 'int': ...
    def get_encode_buffer_max_size(self) -> 'int': ...
    def set_encode_buffer_max_size(self, max_size: 'int') -> None: ...


class PacketPeerDTLS(PacketPeer):



    def poll(self) -> None: ...
    def connect_to_peer(self, packet_peer: 'PacketPeerUDP', hostname: 'str', client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def get_status(self) -> 'PacketPeerDTLS__Status': ...
    def disconnect_from_peer(self) -> None: ...


class PacketPeerExtension(PacketPeer):



    def _get_packet(self, r_buffer: 'intptr', r_buffer_size: 'intptr') -> 'Error': ...
    def _put_packet(self, p_buffer: 'intptr', p_buffer_size: 'int') -> 'Error': ...
    def _get_available_packet_count(self) -> 'int': ...
    def _get_max_packet_size(self) -> 'int': ...


class PacketPeerStream(PacketPeer):


    input_buffer_max_size: 'int'
    output_buffer_max_size: 'int'
    stream_peer: 'StreamPeer'

    def set_stream_peer(self, peer: 'StreamPeer') -> None: ...
    def get_stream_peer(self) -> 'StreamPeer': ...
    def set_input_buffer_max_size(self, max_size_bytes: 'int') -> None: ...
    def set_output_buffer_max_size(self, max_size_bytes: 'int') -> None: ...
    def get_input_buffer_max_size(self) -> 'int': ...
    def get_output_buffer_max_size(self) -> 'int': ...


class PacketPeerUDP(PacketPeer):



    def bind(self, port: 'int', bind_address: 'str' = "*", recv_buf_size: 'int' = 65536) -> 'Error': ...
    def close(self) -> None: ...
    def wait(self) -> 'Error': ...
    def is_bound(self) -> 'bool': ...
    def connect_to_host(self, host: 'str', port: 'int') -> 'Error': ...
    def is_socket_connected(self) -> 'bool': ...
    def get_packet_ip(self) -> 'str': ...
    def get_packet_port(self) -> 'int': ...
    def get_local_port(self) -> 'int': ...
    def set_dest_address(self, host: 'str', port: 'int') -> 'Error': ...
    def set_broadcast_enabled(self, enabled: 'bool') -> None: ...
    def join_multicast_group(self, multicast_address: 'str', interface_name: 'str') -> 'Error': ...
    def leave_multicast_group(self, multicast_address: 'str', interface_name: 'str') -> 'Error': ...


class Panel(Control): ...


class PanelContainer(Container): ...


class PanoramaSkyMaterial(Material):


    panorama: 'Texture2D'
    filter: 'bool'
    energy_multiplier: 'float'

    def set_panorama(self, texture: 'Texture2D') -> None: ...
    def get_panorama(self) -> 'Texture2D': ...
    def set_filtering_enabled(self, enabled: 'bool') -> None: ...
    def is_filtering_enabled(self) -> 'bool': ...
    def set_energy_multiplier(self, multiplier: 'float') -> None: ...
    def get_energy_multiplier(self) -> 'float': ...


class Parallax2D(Node2D):


    scroll_scale: 'Vector2'
    scroll_offset: 'Vector2'
    repeat_size: 'Vector2'
    autoscroll: 'Vector2'
    repeat_times: 'int'
    limit_begin: 'Vector2'
    limit_end: 'Vector2'
    follow_viewport: 'bool'
    ignore_camera_scroll: 'bool'
    screen_offset: 'Vector2'

    def set_scroll_scale(self, scale: 'Vector2') -> None: ...
    def get_scroll_scale(self) -> 'Vector2': ...
    def set_repeat_size(self, repeat_size: 'Vector2') -> None: ...
    def get_repeat_size(self) -> 'Vector2': ...
    def set_repeat_times(self, repeat_times: 'int') -> None: ...
    def get_repeat_times(self) -> 'int': ...
    def set_autoscroll(self, autoscroll: 'Vector2') -> None: ...
    def get_autoscroll(self) -> 'Vector2': ...
    def set_scroll_offset(self, offset: 'Vector2') -> None: ...
    def get_scroll_offset(self) -> 'Vector2': ...
    def set_screen_offset(self, offset: 'Vector2') -> None: ...
    def get_screen_offset(self) -> 'Vector2': ...
    def set_limit_begin(self, offset: 'Vector2') -> None: ...
    def get_limit_begin(self) -> 'Vector2': ...
    def set_limit_end(self, offset: 'Vector2') -> None: ...
    def get_limit_end(self) -> 'Vector2': ...
    def set_follow_viewport(self, follow: 'bool') -> None: ...
    def get_follow_viewport(self) -> 'bool': ...
    def set_ignore_camera_scroll(self, ignore: 'bool') -> None: ...
    def is_ignore_camera_scroll(self) -> 'bool': ...


class ParallaxBackground(CanvasLayer):


    scroll_offset: 'Vector2'
    scroll_base_offset: 'Vector2'
    scroll_base_scale: 'Vector2'
    scroll_limit_begin: 'Vector2'
    scroll_limit_end: 'Vector2'
    scroll_ignore_camera_zoom: 'bool'

    def set_scroll_offset(self, offset: 'Vector2') -> None: ...
    def get_scroll_offset(self) -> 'Vector2': ...
    def set_scroll_base_offset(self, offset: 'Vector2') -> None: ...
    def get_scroll_base_offset(self) -> 'Vector2': ...
    def set_scroll_base_scale(self, scale: 'Vector2') -> None: ...
    def get_scroll_base_scale(self) -> 'Vector2': ...
    def set_limit_begin(self, offset: 'Vector2') -> None: ...
    def get_limit_begin(self) -> 'Vector2': ...
    def set_limit_end(self, offset: 'Vector2') -> None: ...
    def get_limit_end(self) -> 'Vector2': ...
    def set_ignore_camera_zoom(self, ignore: 'bool') -> None: ...
    def is_ignore_camera_zoom(self) -> 'bool': ...


class ParallaxLayer(Node2D):


    motion_scale: 'Vector2'
    motion_offset: 'Vector2'
    motion_mirroring: 'Vector2'

    def set_motion_scale(self, scale: 'Vector2') -> None: ...
    def get_motion_scale(self) -> 'Vector2': ...
    def set_motion_offset(self, offset: 'Vector2') -> None: ...
    def get_motion_offset(self) -> 'Vector2': ...
    def set_mirroring(self, mirror: 'Vector2') -> None: ...
    def get_mirroring(self) -> 'Vector2': ...


class ParticleProcessMaterial(Material):


    lifetime_randomness: 'float'
    particle_flag_align_y: 'bool'
    particle_flag_rotate_y: 'bool'
    particle_flag_disable_z: 'bool'
    particle_flag_damping_as_friction: 'bool'
    emission_shape_offset: 'Vector3'
    emission_shape_scale: 'Vector3'
    emission_shape: 'int'
    emission_sphere_radius: 'float'
    emission_box_extents: 'Vector3'
    emission_point_texture: 'Texture2D'
    emission_normal_texture: 'Texture2D'
    emission_color_texture: 'Texture2D'
    emission_point_count: 'int'
    emission_ring_axis: 'Vector3'
    emission_ring_height: 'float'
    emission_ring_radius: 'float'
    emission_ring_inner_radius: 'float'
    emission_ring_cone_angle: 'float'
    angle: 'Vector2'
    angle_min: 'float'
    angle_max: 'float'
    angle_curve: 'CurveTexture'
    inherit_velocity_ratio: 'float'
    velocity_pivot: 'Vector3'
    direction: 'Vector3'
    spread: 'float'
    flatness: 'float'
    initial_velocity: 'Vector2'
    initial_velocity_min: 'float'
    initial_velocity_max: 'float'
    angular_velocity: 'Vector2'
    angular_velocity_min: 'float'
    angular_velocity_max: 'float'
    angular_velocity_curve: 'CurveTexture'
    directional_velocity: 'Vector2'
    directional_velocity_min: 'float'
    directional_velocity_max: 'float'
    directional_velocity_curve: 'CurveXYZTexture'
    orbit_velocity: 'Vector2'
    orbit_velocity_min: 'float'
    orbit_velocity_max: 'float'
    orbit_velocity_curve: 'CurveTexture' | 'CurveXYZTexture'
    radial_velocity: 'Vector2'
    radial_velocity_min: 'float'
    radial_velocity_max: 'float'
    radial_velocity_curve: 'CurveTexture'
    velocity_limit_curve: 'CurveTexture'
    gravity: 'Vector3'
    linear_accel: 'Vector2'
    linear_accel_min: 'float'
    linear_accel_max: 'float'
    linear_accel_curve: 'CurveTexture'
    radial_accel: 'Vector2'
    radial_accel_min: 'float'
    radial_accel_max: 'float'
    radial_accel_curve: 'CurveTexture'
    tangential_accel: 'Vector2'
    tangential_accel_min: 'float'
    tangential_accel_max: 'float'
    tangential_accel_curve: 'CurveTexture'
    damping: 'Vector2'
    damping_min: 'float'
    damping_max: 'float'
    damping_curve: 'CurveTexture'
    attractor_interaction_enabled: 'bool'
    scale: 'Vector2'
    scale_min: 'float'
    scale_max: 'float'
    scale_curve: 'CurveTexture' | 'CurveXYZTexture'
    scale_over_velocity: 'Vector2'
    scale_over_velocity_min: 'float'
    scale_over_velocity_max: 'float'
    scale_over_velocity_curve: 'CurveTexture' | 'CurveXYZTexture'
    color: 'Color'
    color_ramp: 'GradientTexture1D'
    color_initial_ramp: 'GradientTexture1D'
    alpha_curve: 'CurveTexture'
    emission_curve: 'CurveTexture'
    hue_variation: 'Vector2'
    hue_variation_min: 'float'
    hue_variation_max: 'float'
    hue_variation_curve: 'CurveTexture'
    anim_speed: 'Vector2'
    anim_speed_min: 'float'
    anim_speed_max: 'float'
    anim_speed_curve: 'CurveTexture'
    anim_offset: 'Vector2'
    anim_offset_min: 'float'
    anim_offset_max: 'float'
    anim_offset_curve: 'CurveTexture'
    turbulence_enabled: 'bool'
    turbulence_noise_strength: 'float'
    turbulence_noise_scale: 'float'
    turbulence_noise_speed: 'Vector3'
    turbulence_noise_speed_random: 'float'
    turbulence_influence: 'Vector2'
    turbulence_influence_min: 'float'
    turbulence_influence_max: 'float'
    turbulence_initial_displacement: 'Vector2'
    turbulence_initial_displacement_min: 'float'
    turbulence_initial_displacement_max: 'float'
    turbulence_influence_over_life: 'CurveTexture'
    collision_mode: 'int'
    collision_friction: 'float'
    collision_bounce: 'float'
    collision_use_scale: 'bool'
    sub_emitter_mode: 'int'
    sub_emitter_frequency: 'float'
    sub_emitter_amount_at_end: 'int'
    sub_emitter_amount_at_collision: 'int'
    sub_emitter_amount_at_start: 'int'
    sub_emitter_keep_velocity: 'bool'
    emission_shape_changed: 'Signal[Callable[[], None]]'  # emission_shape_changed()

    def set_direction(self, degrees: 'Vector3') -> None: ...
    def get_direction(self) -> 'Vector3': ...
    def set_inherit_velocity_ratio(self, ratio: 'float') -> None: ...
    def get_inherit_velocity_ratio(self) -> 'float': ...
    def set_spread(self, degrees: 'float') -> None: ...
    def get_spread(self) -> 'float': ...
    def set_flatness(self, amount: 'float') -> None: ...
    def get_flatness(self) -> 'float': ...
    def set_param(self, param: 'ParticleProcessMaterial__Parameter', value: 'Vector2') -> None: ...
    def get_param(self, param: 'ParticleProcessMaterial__Parameter') -> 'Vector2': ...
    def set_param_min(self, param: 'ParticleProcessMaterial__Parameter', value: 'float') -> None: ...
    def get_param_min(self, param: 'ParticleProcessMaterial__Parameter') -> 'float': ...
    def set_param_max(self, param: 'ParticleProcessMaterial__Parameter', value: 'float') -> None: ...
    def get_param_max(self, param: 'ParticleProcessMaterial__Parameter') -> 'float': ...
    def set_param_texture(self, param: 'ParticleProcessMaterial__Parameter', texture: 'Texture2D') -> None: ...
    def get_param_texture(self, param: 'ParticleProcessMaterial__Parameter') -> 'Texture2D': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_color_ramp(self, ramp: 'Texture2D') -> None: ...
    def get_color_ramp(self) -> 'Texture2D': ...
    def set_alpha_curve(self, curve: 'Texture2D') -> None: ...
    def get_alpha_curve(self) -> 'Texture2D': ...
    def set_emission_curve(self, curve: 'Texture2D') -> None: ...
    def get_emission_curve(self) -> 'Texture2D': ...
    def set_color_initial_ramp(self, ramp: 'Texture2D') -> None: ...
    def get_color_initial_ramp(self) -> 'Texture2D': ...
    def set_velocity_limit_curve(self, curve: 'Texture2D') -> None: ...
    def get_velocity_limit_curve(self) -> 'Texture2D': ...
    def set_particle_flag(self, particle_flag: 'ParticleProcessMaterial__ParticleFlags', enable: 'bool') -> None: ...
    def get_particle_flag(self, particle_flag: 'ParticleProcessMaterial__ParticleFlags') -> 'bool': ...
    def set_velocity_pivot(self, pivot: 'Vector3') -> None: ...
    def get_velocity_pivot(self) -> 'Vector3': ...
    def set_emission_shape(self, shape: 'ParticleProcessMaterial__EmissionShape') -> None: ...
    def get_emission_shape(self) -> 'ParticleProcessMaterial__EmissionShape': ...
    def set_emission_sphere_radius(self, radius: 'float') -> None: ...
    def get_emission_sphere_radius(self) -> 'float': ...
    def set_emission_box_extents(self, extents: 'Vector3') -> None: ...
    def get_emission_box_extents(self) -> 'Vector3': ...
    def set_emission_point_texture(self, texture: 'Texture2D') -> None: ...
    def get_emission_point_texture(self) -> 'Texture2D': ...
    def set_emission_normal_texture(self, texture: 'Texture2D') -> None: ...
    def get_emission_normal_texture(self) -> 'Texture2D': ...
    def set_emission_color_texture(self, texture: 'Texture2D') -> None: ...
    def get_emission_color_texture(self) -> 'Texture2D': ...
    def set_emission_point_count(self, point_count: 'int') -> None: ...
    def get_emission_point_count(self) -> 'int': ...
    def set_emission_ring_axis(self, axis: 'Vector3') -> None: ...
    def get_emission_ring_axis(self) -> 'Vector3': ...
    def set_emission_ring_height(self, height: 'float') -> None: ...
    def get_emission_ring_height(self) -> 'float': ...
    def set_emission_ring_radius(self, radius: 'float') -> None: ...
    def get_emission_ring_radius(self) -> 'float': ...
    def set_emission_ring_inner_radius(self, inner_radius: 'float') -> None: ...
    def get_emission_ring_inner_radius(self) -> 'float': ...
    def set_emission_ring_cone_angle(self, cone_angle: 'float') -> None: ...
    def get_emission_ring_cone_angle(self) -> 'float': ...
    def set_emission_shape_offset(self, emission_shape_offset: 'Vector3') -> None: ...
    def get_emission_shape_offset(self) -> 'Vector3': ...
    def set_emission_shape_scale(self, emission_shape_scale: 'Vector3') -> None: ...
    def get_emission_shape_scale(self) -> 'Vector3': ...
    def get_turbulence_enabled(self) -> 'bool': ...
    def set_turbulence_enabled(self, turbulence_enabled: 'bool') -> None: ...
    def get_turbulence_noise_strength(self) -> 'float': ...
    def set_turbulence_noise_strength(self, turbulence_noise_strength: 'float') -> None: ...
    def get_turbulence_noise_scale(self) -> 'float': ...
    def set_turbulence_noise_scale(self, turbulence_noise_scale: 'float') -> None: ...
    def get_turbulence_noise_speed_random(self) -> 'float': ...
    def set_turbulence_noise_speed_random(self, turbulence_noise_speed_random: 'float') -> None: ...
    def get_turbulence_noise_speed(self) -> 'Vector3': ...
    def set_turbulence_noise_speed(self, turbulence_noise_speed: 'Vector3') -> None: ...
    def get_gravity(self) -> 'Vector3': ...
    def set_gravity(self, accel_vec: 'Vector3') -> None: ...
    def set_lifetime_randomness(self, randomness: 'float') -> None: ...
    def get_lifetime_randomness(self) -> 'float': ...
    def get_sub_emitter_mode(self) -> 'ParticleProcessMaterial__SubEmitterMode': ...
    def set_sub_emitter_mode(self, mode: 'ParticleProcessMaterial__SubEmitterMode') -> None: ...
    def get_sub_emitter_frequency(self) -> 'float': ...
    def set_sub_emitter_frequency(self, hz: 'float') -> None: ...
    def get_sub_emitter_amount_at_end(self) -> 'int': ...
    def set_sub_emitter_amount_at_end(self, amount: 'int') -> None: ...
    def get_sub_emitter_amount_at_collision(self) -> 'int': ...
    def set_sub_emitter_amount_at_collision(self, amount: 'int') -> None: ...
    def get_sub_emitter_amount_at_start(self) -> 'int': ...
    def set_sub_emitter_amount_at_start(self, amount: 'int') -> None: ...
    def get_sub_emitter_keep_velocity(self) -> 'bool': ...
    def set_sub_emitter_keep_velocity(self, enable: 'bool') -> None: ...
    def set_attractor_interaction_enabled(self, enabled: 'bool') -> None: ...
    def is_attractor_interaction_enabled(self) -> 'bool': ...
    def set_collision_mode(self, mode: 'ParticleProcessMaterial__CollisionMode') -> None: ...
    def get_collision_mode(self) -> 'ParticleProcessMaterial__CollisionMode': ...
    def set_collision_use_scale(self, radius: 'bool') -> None: ...
    def is_collision_using_scale(self) -> 'bool': ...
    def set_collision_friction(self, friction: 'float') -> None: ...
    def get_collision_friction(self) -> 'float': ...
    def set_collision_bounce(self, bounce: 'float') -> None: ...
    def get_collision_bounce(self) -> 'float': ...


class Path2D(Node2D):


    curve: 'Curve2D'

    def set_curve(self, curve: 'Curve2D') -> None: ...
    def get_curve(self) -> 'Curve2D': ...


class Path3D(Node3D):


    curve: 'Curve3D'
    curve_changed: 'Signal[Callable[[], None]]'  # curve_changed()

    def set_curve(self, curve: 'Curve3D') -> None: ...
    def get_curve(self) -> 'Curve3D': ...


class PathFollow2D(Node2D):


    progress: 'float'
    progress_ratio: 'float'
    h_offset: 'float'
    v_offset: 'float'
    rotates: 'bool'
    cubic_interp: 'bool'
    loop: 'bool'

    def set_progress(self, progress: 'float') -> None: ...
    def get_progress(self) -> 'float': ...
    def set_h_offset(self, h_offset: 'float') -> None: ...
    def get_h_offset(self) -> 'float': ...
    def set_v_offset(self, v_offset: 'float') -> None: ...
    def get_v_offset(self) -> 'float': ...
    def set_progress_ratio(self, ratio: 'float') -> None: ...
    def get_progress_ratio(self) -> 'float': ...
    def set_rotates(self, enabled: 'bool') -> None: ...
    def is_rotating(self) -> 'bool': ...
    def set_cubic_interpolation(self, enabled: 'bool') -> None: ...
    def get_cubic_interpolation(self) -> 'bool': ...
    def set_loop(self, loop: 'bool') -> None: ...
    def has_loop(self) -> 'bool': ...


class PathFollow3D(Node3D):


    progress: 'float'
    progress_ratio: 'float'
    h_offset: 'float'
    v_offset: 'float'
    rotation_mode: 'int'
    use_model_front: 'bool'
    cubic_interp: 'bool'
    loop: 'bool'
    tilt_enabled: 'bool'

    def set_progress(self, progress: 'float') -> None: ...
    def get_progress(self) -> 'float': ...
    def set_h_offset(self, h_offset: 'float') -> None: ...
    def get_h_offset(self) -> 'float': ...
    def set_v_offset(self, v_offset: 'float') -> None: ...
    def get_v_offset(self) -> 'float': ...
    def set_progress_ratio(self, ratio: 'float') -> None: ...
    def get_progress_ratio(self) -> 'float': ...
    def set_rotation_mode(self, rotation_mode: 'PathFollow3D__RotationMode') -> None: ...
    def get_rotation_mode(self) -> 'PathFollow3D__RotationMode': ...
    def set_cubic_interpolation(self, enabled: 'bool') -> None: ...
    def get_cubic_interpolation(self) -> 'bool': ...
    def set_use_model_front(self, enabled: 'bool') -> None: ...
    def is_using_model_front(self) -> 'bool': ...
    def set_loop(self, loop: 'bool') -> None: ...
    def has_loop(self) -> 'bool': ...
    def set_tilt_enabled(self, enabled: 'bool') -> None: ...
    def is_tilt_enabled(self) -> 'bool': ...
    @staticmethod
    def correct_posture(transform: 'Transform3D', rotation_mode: 'PathFollow3D__RotationMode') -> 'Transform3D': ...


class Performance(Object):



    def get_monitor(self, monitor: 'Performance__Monitor') -> 'float': ...
    def add_custom_monitor(self, id: 'StringName', callable: 'Callable', arguments: 'Array' = default('''[]''')) -> None: ...
    def remove_custom_monitor(self, id: 'StringName') -> None: ...
    def has_custom_monitor(self, id: 'StringName') -> 'bool': ...
    def get_custom_monitor(self, id: 'StringName') -> 'Variant': ...
    def get_monitor_modification_time(self) -> 'int': ...
    def get_custom_monitor_names(self) -> 'Array'['StringName']: ...


class PhysicalBone2D(RigidBody2D):


    bone2d_nodepath: 'NodePath'
    bone2d_index: 'int'
    auto_configure_joint: 'bool'
    simulate_physics: 'bool'
    follow_bone_when_simulating: 'bool'

    def get_joint(self) -> 'Joint2D': ...
    def get_auto_configure_joint(self) -> 'bool': ...
    def set_auto_configure_joint(self, auto_configure_joint: 'bool') -> None: ...
    def set_simulate_physics(self, simulate_physics: 'bool') -> None: ...
    def get_simulate_physics(self) -> 'bool': ...
    def is_simulating_physics(self) -> 'bool': ...
    def set_bone2d_nodepath(self, nodepath: 'NodePath') -> None: ...
    def get_bone2d_nodepath(self) -> 'NodePath': ...
    def set_bone2d_index(self, bone_index: 'int') -> None: ...
    def get_bone2d_index(self) -> 'int': ...
    def set_follow_bone_when_simulating(self, follow_bone: 'bool') -> None: ...
    def get_follow_bone_when_simulating(self) -> 'bool': ...


class PhysicalBone3D(PhysicsBody3D):


    joint_type: 'int'
    joint_offset: 'Transform3D'
    joint_rotation: 'Vector3'
    body_offset: 'Transform3D'
    mass: 'float'
    friction: 'float'
    bounce: 'float'
    gravity_scale: 'float'
    custom_integrator: 'bool'
    linear_damp_mode: 'int'
    linear_damp: 'float'
    angular_damp_mode: 'int'
    angular_damp: 'float'
    linear_velocity: 'Vector3'
    angular_velocity: 'Vector3'
    can_sleep: 'bool'

    def _integrate_forces(self, state: 'PhysicsDirectBodyState3D') -> None: ...
    def apply_central_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_impulse(self, impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def set_joint_type(self, joint_type: 'PhysicalBone3D__JointType') -> None: ...
    def get_joint_type(self) -> 'PhysicalBone3D__JointType': ...
    def set_joint_offset(self, offset: 'Transform3D') -> None: ...
    def get_joint_offset(self) -> 'Transform3D': ...
    def set_joint_rotation(self, euler: 'Vector3') -> None: ...
    def get_joint_rotation(self) -> 'Vector3': ...
    def set_body_offset(self, offset: 'Transform3D') -> None: ...
    def get_body_offset(self) -> 'Transform3D': ...
    def get_simulate_physics(self) -> 'bool': ...
    def is_simulating_physics(self) -> 'bool': ...
    def get_bone_id(self) -> 'int': ...
    def set_mass(self, mass: 'float') -> None: ...
    def get_mass(self) -> 'float': ...
    def set_friction(self, friction: 'float') -> None: ...
    def get_friction(self) -> 'float': ...
    def set_bounce(self, bounce: 'float') -> None: ...
    def get_bounce(self) -> 'float': ...
    def set_gravity_scale(self, gravity_scale: 'float') -> None: ...
    def get_gravity_scale(self) -> 'float': ...
    def set_linear_damp_mode(self, linear_damp_mode: 'PhysicalBone3D__DampMode') -> None: ...
    def get_linear_damp_mode(self) -> 'PhysicalBone3D__DampMode': ...
    def set_angular_damp_mode(self, angular_damp_mode: 'PhysicalBone3D__DampMode') -> None: ...
    def get_angular_damp_mode(self) -> 'PhysicalBone3D__DampMode': ...
    def set_linear_damp(self, linear_damp: 'float') -> None: ...
    def get_linear_damp(self) -> 'float': ...
    def set_angular_damp(self, angular_damp: 'float') -> None: ...
    def get_angular_damp(self) -> 'float': ...
    def set_linear_velocity(self, linear_velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, angular_velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_use_custom_integrator(self, enable: 'bool') -> None: ...
    def is_using_custom_integrator(self) -> 'bool': ...
    def set_can_sleep(self, able_to_sleep: 'bool') -> None: ...
    def is_able_to_sleep(self) -> 'bool': ...


class PhysicalBoneSimulator3D(SkeletonModifier3D):



    def is_simulating_physics(self) -> 'bool': ...
    def physical_bones_stop_simulation(self) -> None: ...
    def physical_bones_start_simulation(self, bones: 'Array'['StringName'] = default('''[]''')) -> None: ...
    def physical_bones_add_collision_exception(self, exception: 'RID') -> None: ...
    def physical_bones_remove_collision_exception(self, exception: 'RID') -> None: ...


class PhysicalSkyMaterial(Material):


    rayleigh_coefficient: 'float'
    rayleigh_color: 'Color'
    mie_coefficient: 'float'
    mie_eccentricity: 'float'
    mie_color: 'Color'
    turbidity: 'float'
    sun_disk_scale: 'float'
    ground_color: 'Color'
    energy_multiplier: 'float'
    use_debanding: 'bool'
    night_sky: 'Texture2D'

    def set_rayleigh_coefficient(self, rayleigh: 'float') -> None: ...
    def get_rayleigh_coefficient(self) -> 'float': ...
    def set_rayleigh_color(self, color: 'Color') -> None: ...
    def get_rayleigh_color(self) -> 'Color': ...
    def set_mie_coefficient(self, mie: 'float') -> None: ...
    def get_mie_coefficient(self) -> 'float': ...
    def set_mie_eccentricity(self, eccentricity: 'float') -> None: ...
    def get_mie_eccentricity(self) -> 'float': ...
    def set_mie_color(self, color: 'Color') -> None: ...
    def get_mie_color(self) -> 'Color': ...
    def set_turbidity(self, turbidity: 'float') -> None: ...
    def get_turbidity(self) -> 'float': ...
    def set_sun_disk_scale(self, scale: 'float') -> None: ...
    def get_sun_disk_scale(self) -> 'float': ...
    def set_ground_color(self, color: 'Color') -> None: ...
    def get_ground_color(self) -> 'Color': ...
    def set_energy_multiplier(self, multiplier: 'float') -> None: ...
    def get_energy_multiplier(self) -> 'float': ...
    def set_use_debanding(self, use_debanding: 'bool') -> None: ...
    def get_use_debanding(self) -> 'bool': ...
    def set_night_sky(self, night_sky: 'Texture2D') -> None: ...
    def get_night_sky(self) -> 'Texture2D': ...


class PhysicsBody2D(CollisionObject2D):



    def move_and_collide(self, motion: 'Vector2', test_only: 'bool' = False, safe_margin: 'float' = 0.08, recovery_as_collision: 'bool' = False) -> 'KinematicCollision2D': ...
    def test_move(self, from_: 'Transform2D', motion: 'Vector2', collision: 'KinematicCollision2D' = default('''null'''), safe_margin: 'float' = 0.08, recovery_as_collision: 'bool' = False) -> 'bool': ...
    def get_gravity(self) -> 'Vector2': ...
    def get_collision_exceptions(self) -> 'Array'['PhysicsBody2D']: ...
    def add_collision_exception_with(self, body: 'Node') -> None: ...
    def remove_collision_exception_with(self, body: 'Node') -> None: ...


class PhysicsBody3D(CollisionObject3D):


    axis_lock_linear_x: 'bool'
    axis_lock_linear_y: 'bool'
    axis_lock_linear_z: 'bool'
    axis_lock_angular_x: 'bool'
    axis_lock_angular_y: 'bool'
    axis_lock_angular_z: 'bool'

    def move_and_collide(self, motion: 'Vector3', test_only: 'bool' = False, safe_margin: 'float' = 0.001, recovery_as_collision: 'bool' = False, max_collisions: 'int' = 1) -> 'KinematicCollision3D': ...
    def test_move(self, from_: 'Transform3D', motion: 'Vector3', collision: 'KinematicCollision3D' = default('''null'''), safe_margin: 'float' = 0.001, recovery_as_collision: 'bool' = False, max_collisions: 'int' = 1) -> 'bool': ...
    def get_gravity(self) -> 'Vector3': ...
    def set_axis_lock(self, axis: 'PhysicsServer3D__BodyAxis', lock: 'bool') -> None: ...
    def get_axis_lock(self, axis: 'PhysicsServer3D__BodyAxis') -> 'bool': ...
    def get_collision_exceptions(self) -> 'Array'['PhysicsBody3D']: ...
    def add_collision_exception_with(self, body: 'Node') -> None: ...
    def remove_collision_exception_with(self, body: 'Node') -> None: ...


class PhysicsDirectBodyState2D(Object):


    step: 'float'
    inverse_mass: 'float'
    inverse_inertia: 'float'
    total_angular_damp: 'float'
    total_linear_damp: 'float'
    total_gravity: 'Vector2'
    center_of_mass: 'Vector2'
    center_of_mass_local: 'Vector2'
    angular_velocity: 'float'
    linear_velocity: 'Vector2'
    sleeping: 'bool'
    transform: 'Transform2D'

    def get_total_gravity(self) -> 'Vector2': ...
    def get_total_linear_damp(self) -> 'float': ...
    def get_total_angular_damp(self) -> 'float': ...
    def get_center_of_mass(self) -> 'Vector2': ...
    def get_center_of_mass_local(self) -> 'Vector2': ...
    def get_inverse_mass(self) -> 'float': ...
    def get_inverse_inertia(self) -> 'float': ...
    def set_linear_velocity(self, velocity: 'Vector2') -> None: ...
    def get_linear_velocity(self) -> 'Vector2': ...
    def set_angular_velocity(self, velocity: 'float') -> None: ...
    def get_angular_velocity(self) -> 'float': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def get_velocity_at_local_position(self, local_position: 'Vector2') -> 'Vector2': ...
    def apply_central_impulse(self, impulse: 'Vector2') -> None: ...
    def apply_torque_impulse(self, impulse: 'float') -> None: ...
    def apply_impulse(self, impulse: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_central_force(self, force: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_torque(self, torque: 'float') -> None: ...
    def add_constant_central_force(self, force: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def add_constant_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: 'float') -> None: ...
    def set_constant_force(self, force: 'Vector2') -> None: ...
    def get_constant_force(self) -> 'Vector2': ...
    def set_constant_torque(self, torque: 'float') -> None: ...
    def get_constant_torque(self) -> 'float': ...
    def set_sleep_state(self, enabled: 'bool') -> None: ...
    def is_sleeping(self) -> 'bool': ...
    def get_contact_count(self) -> 'int': ...
    def get_contact_local_position(self, contact_idx: 'int') -> 'Vector2': ...
    def get_contact_local_normal(self, contact_idx: 'int') -> 'Vector2': ...
    def get_contact_local_shape(self, contact_idx: 'int') -> 'int': ...
    def get_contact_local_velocity_at_position(self, contact_idx: 'int') -> 'Vector2': ...
    def get_contact_collider(self, contact_idx: 'int') -> 'RID': ...
    def get_contact_collider_position(self, contact_idx: 'int') -> 'Vector2': ...
    def get_contact_collider_id(self, contact_idx: 'int') -> 'int': ...
    def get_contact_collider_object(self, contact_idx: 'int') -> 'Object': ...
    def get_contact_collider_shape(self, contact_idx: 'int') -> 'int': ...
    def get_contact_collider_velocity_at_position(self, contact_idx: 'int') -> 'Vector2': ...
    def get_contact_impulse(self, contact_idx: 'int') -> 'Vector2': ...
    def get_step(self) -> 'float': ...
    def integrate_forces(self) -> None: ...
    def get_space_state(self) -> 'PhysicsDirectSpaceState2D': ...


class PhysicsDirectBodyState2DExtension(PhysicsDirectBodyState2D):



    def _get_total_gravity(self) -> 'Vector2': ...
    def _get_total_linear_damp(self) -> 'float': ...
    def _get_total_angular_damp(self) -> 'float': ...
    def _get_center_of_mass(self) -> 'Vector2': ...
    def _get_center_of_mass_local(self) -> 'Vector2': ...
    def _get_inverse_mass(self) -> 'float': ...
    def _get_inverse_inertia(self) -> 'float': ...
    def _set_linear_velocity(self, velocity: 'Vector2') -> None: ...
    def _get_linear_velocity(self) -> 'Vector2': ...
    def _set_angular_velocity(self, velocity: 'float') -> None: ...
    def _get_angular_velocity(self) -> 'float': ...
    def _set_transform(self, transform: 'Transform2D') -> None: ...
    def _get_transform(self) -> 'Transform2D': ...
    def _get_velocity_at_local_position(self, local_position: 'Vector2') -> 'Vector2': ...
    def _apply_central_impulse(self, impulse: 'Vector2') -> None: ...
    def _apply_impulse(self, impulse: 'Vector2', position: 'Vector2') -> None: ...
    def _apply_torque_impulse(self, impulse: 'float') -> None: ...
    def _apply_central_force(self, force: 'Vector2') -> None: ...
    def _apply_force(self, force: 'Vector2', position: 'Vector2') -> None: ...
    def _apply_torque(self, torque: 'float') -> None: ...
    def _add_constant_central_force(self, force: 'Vector2') -> None: ...
    def _add_constant_force(self, force: 'Vector2', position: 'Vector2') -> None: ...
    def _add_constant_torque(self, torque: 'float') -> None: ...
    def _set_constant_force(self, force: 'Vector2') -> None: ...
    def _get_constant_force(self) -> 'Vector2': ...
    def _set_constant_torque(self, torque: 'float') -> None: ...
    def _get_constant_torque(self) -> 'float': ...
    def _set_sleep_state(self, enabled: 'bool') -> None: ...
    def _is_sleeping(self) -> 'bool': ...
    def _get_contact_count(self) -> 'int': ...
    def _get_contact_local_position(self, contact_idx: 'int') -> 'Vector2': ...
    def _get_contact_local_normal(self, contact_idx: 'int') -> 'Vector2': ...
    def _get_contact_local_shape(self, contact_idx: 'int') -> 'int': ...
    def _get_contact_local_velocity_at_position(self, contact_idx: 'int') -> 'Vector2': ...
    def _get_contact_collider(self, contact_idx: 'int') -> 'RID': ...
    def _get_contact_collider_position(self, contact_idx: 'int') -> 'Vector2': ...
    def _get_contact_collider_id(self, contact_idx: 'int') -> 'int': ...
    def _get_contact_collider_object(self, contact_idx: 'int') -> 'Object': ...
    def _get_contact_collider_shape(self, contact_idx: 'int') -> 'int': ...
    def _get_contact_collider_velocity_at_position(self, contact_idx: 'int') -> 'Vector2': ...
    def _get_contact_impulse(self, contact_idx: 'int') -> 'Vector2': ...
    def _get_step(self) -> 'float': ...
    def _integrate_forces(self) -> None: ...
    def _get_space_state(self) -> 'PhysicsDirectSpaceState2D': ...


class PhysicsDirectBodyState3D(Object):


    step: 'float'
    inverse_mass: 'float'
    total_angular_damp: 'float'
    total_linear_damp: 'float'
    inverse_inertia: 'Vector3'
    inverse_inertia_tensor: 'Basis'
    total_gravity: 'Vector3'
    center_of_mass: 'Vector3'
    center_of_mass_local: 'Vector3'
    principal_inertia_axes: 'Basis'
    angular_velocity: 'Vector3'
    linear_velocity: 'Vector3'
    sleeping: 'bool'
    transform: 'Transform3D'

    def get_total_gravity(self) -> 'Vector3': ...
    def get_total_linear_damp(self) -> 'float': ...
    def get_total_angular_damp(self) -> 'float': ...
    def get_center_of_mass(self) -> 'Vector3': ...
    def get_center_of_mass_local(self) -> 'Vector3': ...
    def get_principal_inertia_axes(self) -> 'Basis': ...
    def get_inverse_mass(self) -> 'float': ...
    def get_inverse_inertia(self) -> 'Vector3': ...
    def get_inverse_inertia_tensor(self) -> 'Basis': ...
    def set_linear_velocity(self, velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_transform(self, transform: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def get_velocity_at_local_position(self, local_position: 'Vector3') -> 'Vector3': ...
    def apply_central_impulse(self, impulse: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_impulse(self, impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_central_force(self, force: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque(self, torque: 'Vector3') -> None: ...
    def add_constant_central_force(self, force: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def add_constant_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: 'Vector3') -> None: ...
    def set_constant_force(self, force: 'Vector3') -> None: ...
    def get_constant_force(self) -> 'Vector3': ...
    def set_constant_torque(self, torque: 'Vector3') -> None: ...
    def get_constant_torque(self) -> 'Vector3': ...
    def set_sleep_state(self, enabled: 'bool') -> None: ...
    def is_sleeping(self) -> 'bool': ...
    def get_contact_count(self) -> 'int': ...
    def get_contact_local_position(self, contact_idx: 'int') -> 'Vector3': ...
    def get_contact_local_normal(self, contact_idx: 'int') -> 'Vector3': ...
    def get_contact_impulse(self, contact_idx: 'int') -> 'Vector3': ...
    def get_contact_local_shape(self, contact_idx: 'int') -> 'int': ...
    def get_contact_local_velocity_at_position(self, contact_idx: 'int') -> 'Vector3': ...
    def get_contact_collider(self, contact_idx: 'int') -> 'RID': ...
    def get_contact_collider_position(self, contact_idx: 'int') -> 'Vector3': ...
    def get_contact_collider_id(self, contact_idx: 'int') -> 'int': ...
    def get_contact_collider_object(self, contact_idx: 'int') -> 'Object': ...
    def get_contact_collider_shape(self, contact_idx: 'int') -> 'int': ...
    def get_contact_collider_velocity_at_position(self, contact_idx: 'int') -> 'Vector3': ...
    def get_step(self) -> 'float': ...
    def integrate_forces(self) -> None: ...
    def get_space_state(self) -> 'PhysicsDirectSpaceState3D': ...


class PhysicsDirectBodyState3DExtension(PhysicsDirectBodyState3D):



    def _get_total_gravity(self) -> 'Vector3': ...
    def _get_total_linear_damp(self) -> 'float': ...
    def _get_total_angular_damp(self) -> 'float': ...
    def _get_center_of_mass(self) -> 'Vector3': ...
    def _get_center_of_mass_local(self) -> 'Vector3': ...
    def _get_principal_inertia_axes(self) -> 'Basis': ...
    def _get_inverse_mass(self) -> 'float': ...
    def _get_inverse_inertia(self) -> 'Vector3': ...
    def _get_inverse_inertia_tensor(self) -> 'Basis': ...
    def _set_linear_velocity(self, velocity: 'Vector3') -> None: ...
    def _get_linear_velocity(self) -> 'Vector3': ...
    def _set_angular_velocity(self, velocity: 'Vector3') -> None: ...
    def _get_angular_velocity(self) -> 'Vector3': ...
    def _set_transform(self, transform: 'Transform3D') -> None: ...
    def _get_transform(self) -> 'Transform3D': ...
    def _get_velocity_at_local_position(self, local_position: 'Vector3') -> 'Vector3': ...
    def _apply_central_impulse(self, impulse: 'Vector3') -> None: ...
    def _apply_impulse(self, impulse: 'Vector3', position: 'Vector3') -> None: ...
    def _apply_torque_impulse(self, impulse: 'Vector3') -> None: ...
    def _apply_central_force(self, force: 'Vector3') -> None: ...
    def _apply_force(self, force: 'Vector3', position: 'Vector3') -> None: ...
    def _apply_torque(self, torque: 'Vector3') -> None: ...
    def _add_constant_central_force(self, force: 'Vector3') -> None: ...
    def _add_constant_force(self, force: 'Vector3', position: 'Vector3') -> None: ...
    def _add_constant_torque(self, torque: 'Vector3') -> None: ...
    def _set_constant_force(self, force: 'Vector3') -> None: ...
    def _get_constant_force(self) -> 'Vector3': ...
    def _set_constant_torque(self, torque: 'Vector3') -> None: ...
    def _get_constant_torque(self) -> 'Vector3': ...
    def _set_sleep_state(self, enabled: 'bool') -> None: ...
    def _is_sleeping(self) -> 'bool': ...
    def _get_contact_count(self) -> 'int': ...
    def _get_contact_local_position(self, contact_idx: 'int') -> 'Vector3': ...
    def _get_contact_local_normal(self, contact_idx: 'int') -> 'Vector3': ...
    def _get_contact_impulse(self, contact_idx: 'int') -> 'Vector3': ...
    def _get_contact_local_shape(self, contact_idx: 'int') -> 'int': ...
    def _get_contact_local_velocity_at_position(self, contact_idx: 'int') -> 'Vector3': ...
    def _get_contact_collider(self, contact_idx: 'int') -> 'RID': ...
    def _get_contact_collider_position(self, contact_idx: 'int') -> 'Vector3': ...
    def _get_contact_collider_id(self, contact_idx: 'int') -> 'int': ...
    def _get_contact_collider_object(self, contact_idx: 'int') -> 'Object': ...
    def _get_contact_collider_shape(self, contact_idx: 'int') -> 'int': ...
    def _get_contact_collider_velocity_at_position(self, contact_idx: 'int') -> 'Vector3': ...
    def _get_step(self) -> 'float': ...
    def _integrate_forces(self) -> None: ...
    def _get_space_state(self) -> 'PhysicsDirectSpaceState3D': ...


class PhysicsDirectSpaceState2D(Object):



    def intersect_point(self, parameters: 'PhysicsPointQueryParameters2D', max_results: 'int' = 32) -> 'Array'['Dictionary']: ...
    def intersect_ray(self, parameters: 'PhysicsRayQueryParameters2D') -> 'Dictionary': ...
    def intersect_shape(self, parameters: 'PhysicsShapeQueryParameters2D', max_results: 'int' = 32) -> 'Array'['Dictionary']: ...
    def cast_motion(self, parameters: 'PhysicsShapeQueryParameters2D') -> 'PackedFloat32Array': ...
    def collide_shape(self, parameters: 'PhysicsShapeQueryParameters2D', max_results: 'int' = 32) -> 'Array'['Vector2']: ...
    def get_rest_info(self, parameters: 'PhysicsShapeQueryParameters2D') -> 'Dictionary': ...


class PhysicsDirectSpaceState2DExtension(PhysicsDirectSpaceState2D):



    def _intersect_ray(self, from_: 'Vector2', to: 'Vector2', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', hit_from_inside: 'bool', result: 'intptr') -> 'bool': ...
    def _intersect_point(self, position: 'Vector2', canvas_instance_id: 'int', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', results: 'intptr', max_results: 'int') -> 'int': ...
    def _intersect_shape(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', result: 'intptr', max_results: 'int') -> 'int': ...
    def _cast_motion(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', closest_safe: 'intptr', closest_unsafe: 'intptr') -> 'bool': ...
    def _collide_shape(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', results: 'intptr', max_results: 'int', result_count: 'intptr') -> 'bool': ...
    def _rest_info(self, shape_rid: 'RID', transform: 'Transform2D', motion: 'Vector2', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', rest_info: 'intptr') -> 'bool': ...
    def is_body_excluded_from_query(self, body: 'RID') -> 'bool': ...


class PhysicsDirectSpaceState3D(Object):



    def intersect_point(self, parameters: 'PhysicsPointQueryParameters3D', max_results: 'int' = 32) -> 'Array'['Dictionary']: ...
    def intersect_ray(self, parameters: 'PhysicsRayQueryParameters3D') -> 'Dictionary': ...
    def intersect_shape(self, parameters: 'PhysicsShapeQueryParameters3D', max_results: 'int' = 32) -> 'Array'['Dictionary']: ...
    def cast_motion(self, parameters: 'PhysicsShapeQueryParameters3D') -> 'PackedFloat32Array': ...
    def collide_shape(self, parameters: 'PhysicsShapeQueryParameters3D', max_results: 'int' = 32) -> 'Array'['Vector3']: ...
    def get_rest_info(self, parameters: 'PhysicsShapeQueryParameters3D') -> 'Dictionary': ...


class PhysicsDirectSpaceState3DExtension(PhysicsDirectSpaceState3D):



    def _intersect_ray(self, from_: 'Vector3', to: 'Vector3', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', hit_from_inside: 'bool', hit_back_faces: 'bool', pick_ray: 'bool', result: 'intptr') -> 'bool': ...
    def _intersect_point(self, position: 'Vector3', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', results: 'intptr', max_results: 'int') -> 'int': ...
    def _intersect_shape(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', result_count: 'intptr', max_results: 'int') -> 'int': ...
    def _cast_motion(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', closest_safe: 'intptr', closest_unsafe: 'intptr', info: 'intptr') -> 'bool': ...
    def _collide_shape(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', results: 'intptr', max_results: 'int', result_count: 'intptr') -> 'bool': ...
    def _rest_info(self, shape_rid: 'RID', transform: 'Transform3D', motion: 'Vector3', margin: 'float', collision_mask: 'int', collide_with_bodies: 'bool', collide_with_areas: 'bool', rest_info: 'intptr') -> 'bool': ...
    def _get_closest_point_to_object_volume(self, object: 'RID', point: 'Vector3') -> 'Vector3': ...
    def is_body_excluded_from_query(self, body: 'RID') -> 'bool': ...


class PhysicsMaterial(Resource):


    friction: 'float'
    rough: 'bool'
    bounce: 'float'
    absorbent: 'bool'

    def set_friction(self, friction: 'float') -> None: ...
    def get_friction(self) -> 'float': ...
    def set_rough(self, rough: 'bool') -> None: ...
    def is_rough(self) -> 'bool': ...
    def set_bounce(self, bounce: 'float') -> None: ...
    def get_bounce(self) -> 'float': ...
    def set_absorbent(self, absorbent: 'bool') -> None: ...
    def is_absorbent(self) -> 'bool': ...


class PhysicsPointQueryParameters2D(RefCounted):


    position: 'Vector2'
    canvas_instance_id: 'int'
    collision_mask: 'int'
    exclude: 'Array'['RID']
    collide_with_bodies: 'bool'
    collide_with_areas: 'bool'

    def set_position(self, position: 'Vector2') -> None: ...
    def get_position(self) -> 'Vector2': ...
    def set_canvas_instance_id(self, canvas_instance_id: 'int') -> None: ...
    def get_canvas_instance_id(self) -> 'int': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_exclude(self, exclude: 'Array'['RID']) -> None: ...
    def get_exclude(self) -> 'Array'['RID']: ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...


class PhysicsPointQueryParameters3D(RefCounted):


    position: 'Vector3'
    collision_mask: 'int'
    exclude: 'Array'['RID']
    collide_with_bodies: 'bool'
    collide_with_areas: 'bool'

    def set_position(self, position: 'Vector3') -> None: ...
    def get_position(self) -> 'Vector3': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_exclude(self, exclude: 'Array'['RID']) -> None: ...
    def get_exclude(self) -> 'Array'['RID']: ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...


class PhysicsRayQueryParameters2D(RefCounted):


    from_: 'Vector2'
    to: 'Vector2'
    collision_mask: 'int'
    exclude: 'Array'['RID']
    collide_with_bodies: 'bool'
    collide_with_areas: 'bool'
    hit_from_inside: 'bool'

    @staticmethod
    def create(from_: 'Vector2', to: 'Vector2', collision_mask: 'int' = 4294967295, exclude: 'Array'['RID'] = default('''Array[RID]([])''')) -> 'PhysicsRayQueryParameters2D': ...
    def set_from(self, from_: 'Vector2') -> None: ...
    def get_from(self) -> 'Vector2': ...
    def set_to(self, to: 'Vector2') -> None: ...
    def get_to(self) -> 'Vector2': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_exclude(self, exclude: 'Array'['RID']) -> None: ...
    def get_exclude(self) -> 'Array'['RID']: ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...
    def set_hit_from_inside(self, enable: 'bool') -> None: ...
    def is_hit_from_inside_enabled(self) -> 'bool': ...


class PhysicsRayQueryParameters3D(RefCounted):


    from_: 'Vector3'
    to: 'Vector3'
    collision_mask: 'int'
    exclude: 'Array'['RID']
    collide_with_bodies: 'bool'
    collide_with_areas: 'bool'
    hit_from_inside: 'bool'
    hit_back_faces: 'bool'

    @staticmethod
    def create(from_: 'Vector3', to: 'Vector3', collision_mask: 'int' = 4294967295, exclude: 'Array'['RID'] = default('''Array[RID]([])''')) -> 'PhysicsRayQueryParameters3D': ...
    def set_from(self, from_: 'Vector3') -> None: ...
    def get_from(self) -> 'Vector3': ...
    def set_to(self, to: 'Vector3') -> None: ...
    def get_to(self) -> 'Vector3': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_exclude(self, exclude: 'Array'['RID']) -> None: ...
    def get_exclude(self) -> 'Array'['RID']: ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...
    def set_hit_from_inside(self, enable: 'bool') -> None: ...
    def is_hit_from_inside_enabled(self) -> 'bool': ...
    def set_hit_back_faces(self, enable: 'bool') -> None: ...
    def is_hit_back_faces_enabled(self) -> 'bool': ...


class PhysicsServer2D(Object):



    def world_boundary_shape_create(self) -> 'RID': ...
    def separation_ray_shape_create(self) -> 'RID': ...
    def segment_shape_create(self) -> 'RID': ...
    def circle_shape_create(self) -> 'RID': ...
    def rectangle_shape_create(self) -> 'RID': ...
    def capsule_shape_create(self) -> 'RID': ...
    def convex_polygon_shape_create(self) -> 'RID': ...
    def concave_polygon_shape_create(self) -> 'RID': ...
    def shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def shape_get_type(self, shape: 'RID') -> 'PhysicsServer2D__ShapeType': ...
    def shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def space_create(self) -> 'RID': ...
    def space_set_active(self, space: 'RID', active: 'bool') -> None: ...
    def space_is_active(self, space: 'RID') -> 'bool': ...
    def space_set_param(self, space: 'RID', param: 'PhysicsServer2D__SpaceParameter', value: 'float') -> None: ...
    def space_get_param(self, space: 'RID', param: 'PhysicsServer2D__SpaceParameter') -> 'float': ...
    def space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState2D': ...
    def area_create(self) -> 'RID': ...
    def area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def area_get_space(self, area: 'RID') -> 'RID': ...
    def area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), disabled: 'bool' = False) -> None: ...
    def area_set_shape(self, area: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def area_set_shape_transform(self, area: 'RID', shape_idx: 'int', transform: 'Transform2D') -> None: ...
    def area_set_shape_disabled(self, area: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def area_get_shape_count(self, area: 'RID') -> 'int': ...
    def area_get_shape(self, area: 'RID', shape_idx: 'int') -> 'RID': ...
    def area_get_shape_transform(self, area: 'RID', shape_idx: 'int') -> 'Transform2D': ...
    def area_remove_shape(self, area: 'RID', shape_idx: 'int') -> None: ...
    def area_clear_shapes(self, area: 'RID') -> None: ...
    def area_set_collision_layer(self, area: 'RID', layer: 'int') -> None: ...
    def area_get_collision_layer(self, area: 'RID') -> 'int': ...
    def area_set_collision_mask(self, area: 'RID', mask: 'int') -> None: ...
    def area_get_collision_mask(self, area: 'RID') -> 'int': ...
    def area_set_param(self, area: 'RID', param: 'PhysicsServer2D__AreaParameter', value: 'Variant') -> None: ...
    def area_set_transform(self, area: 'RID', transform: 'Transform2D') -> None: ...
    def area_get_param(self, area: 'RID', param: 'PhysicsServer2D__AreaParameter') -> 'Variant': ...
    def area_get_transform(self, area: 'RID') -> 'Transform2D': ...
    def area_attach_object_instance_id(self, area: 'RID', id: 'int') -> None: ...
    def area_get_object_instance_id(self, area: 'RID') -> 'int': ...
    def area_attach_canvas_instance_id(self, area: 'RID', id: 'int') -> None: ...
    def area_get_canvas_instance_id(self, area: 'RID') -> 'int': ...
    def area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_monitorable(self, area: 'RID', monitorable: 'bool') -> None: ...
    def body_create(self) -> 'RID': ...
    def body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def body_get_space(self, body: 'RID') -> 'RID': ...
    def body_set_mode(self, body: 'RID', mode: 'PhysicsServer2D__BodyMode') -> None: ...
    def body_get_mode(self, body: 'RID') -> 'PhysicsServer2D__BodyMode': ...
    def body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), disabled: 'bool' = False) -> None: ...
    def body_set_shape(self, body: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def body_set_shape_transform(self, body: 'RID', shape_idx: 'int', transform: 'Transform2D') -> None: ...
    def body_get_shape_count(self, body: 'RID') -> 'int': ...
    def body_get_shape(self, body: 'RID', shape_idx: 'int') -> 'RID': ...
    def body_get_shape_transform(self, body: 'RID', shape_idx: 'int') -> 'Transform2D': ...
    def body_remove_shape(self, body: 'RID', shape_idx: 'int') -> None: ...
    def body_clear_shapes(self, body: 'RID') -> None: ...
    def body_set_shape_disabled(self, body: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def body_set_shape_as_one_way_collision(self, body: 'RID', shape_idx: 'int', enable: 'bool', margin: 'float') -> None: ...
    def body_attach_object_instance_id(self, body: 'RID', id: 'int') -> None: ...
    def body_get_object_instance_id(self, body: 'RID') -> 'int': ...
    def body_attach_canvas_instance_id(self, body: 'RID', id: 'int') -> None: ...
    def body_get_canvas_instance_id(self, body: 'RID') -> 'int': ...
    def body_set_continuous_collision_detection_mode(self, body: 'RID', mode: 'PhysicsServer2D__CCDMode') -> None: ...
    def body_get_continuous_collision_detection_mode(self, body: 'RID') -> 'PhysicsServer2D__CCDMode': ...
    def body_set_collision_layer(self, body: 'RID', layer: 'int') -> None: ...
    def body_get_collision_layer(self, body: 'RID') -> 'int': ...
    def body_set_collision_mask(self, body: 'RID', mask: 'int') -> None: ...
    def body_get_collision_mask(self, body: 'RID') -> 'int': ...
    def body_set_collision_priority(self, body: 'RID', priority: 'float') -> None: ...
    def body_get_collision_priority(self, body: 'RID') -> 'float': ...
    def body_set_param(self, body: 'RID', param: 'PhysicsServer2D__BodyParameter', value: 'Variant') -> None: ...
    def body_get_param(self, body: 'RID', param: 'PhysicsServer2D__BodyParameter') -> 'Variant': ...
    def body_reset_mass_properties(self, body: 'RID') -> None: ...
    def body_set_state(self, body: 'RID', state: 'PhysicsServer2D__BodyState', value: 'Variant') -> None: ...
    def body_get_state(self, body: 'RID', state: 'PhysicsServer2D__BodyState') -> 'Variant': ...
    def body_apply_central_impulse(self, body: 'RID', impulse: 'Vector2') -> None: ...
    def body_apply_torque_impulse(self, body: 'RID', impulse: 'float') -> None: ...
    def body_apply_impulse(self, body: 'RID', impulse: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def body_apply_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def body_apply_force(self, body: 'RID', force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def body_apply_torque(self, body: 'RID', torque: 'float') -> None: ...
    def body_add_constant_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def body_add_constant_force(self, body: 'RID', force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def body_add_constant_torque(self, body: 'RID', torque: 'float') -> None: ...
    def body_set_constant_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def body_get_constant_force(self, body: 'RID') -> 'Vector2': ...
    def body_set_constant_torque(self, body: 'RID', torque: 'float') -> None: ...
    def body_get_constant_torque(self, body: 'RID') -> 'float': ...
    def body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector2') -> None: ...
    def body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_set_max_contacts_reported(self, body: 'RID', amount: 'int') -> None: ...
    def body_get_max_contacts_reported(self, body: 'RID') -> 'int': ...
    def body_set_omit_force_integration(self, body: 'RID', enable: 'bool') -> None: ...
    def body_is_omitting_force_integration(self, body: 'RID') -> 'bool': ...
    def body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant' = default('''null''')) -> None: ...
    def body_test_motion(self, body: 'RID', parameters: 'PhysicsTestMotionParameters2D', result: 'PhysicsTestMotionResult2D' = default('''null''')) -> 'bool': ...
    def body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState2D': ...
    def joint_create(self) -> 'RID': ...
    def joint_clear(self, joint: 'RID') -> None: ...
    def joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D__JointParam', value: 'float') -> None: ...
    def joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D__JointParam') -> 'float': ...
    def joint_disable_collisions_between_bodies(self, joint: 'RID', disable: 'bool') -> None: ...
    def joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> 'bool': ...
    def joint_make_pin(self, joint: 'RID', anchor: 'Vector2', body_a: 'RID', body_b: 'RID' = default('''RID()''')) -> None: ...
    def joint_make_groove(self, joint: 'RID', groove1_a: 'Vector2', groove2_a: 'Vector2', anchor_b: 'Vector2', body_a: 'RID' = default('''RID()'''), body_b: 'RID' = default('''RID()''')) -> None: ...
    def joint_make_damped_spring(self, joint: 'RID', anchor_a: 'Vector2', anchor_b: 'Vector2', body_a: 'RID', body_b: 'RID' = default('''RID()''')) -> None: ...
    def pin_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer2D__PinJointFlag', enabled: 'bool') -> None: ...
    def pin_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer2D__PinJointFlag') -> 'bool': ...
    def pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D__PinJointParam', value: 'float') -> None: ...
    def pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D__PinJointParam') -> 'float': ...
    def damped_spring_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D__DampedSpringParam', value: 'float') -> None: ...
    def damped_spring_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D__DampedSpringParam') -> 'float': ...
    def joint_get_type(self, joint: 'RID') -> 'PhysicsServer2D__JointType': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_active(self, active: 'bool') -> None: ...
    def get_process_info(self, process_info: 'PhysicsServer2D__ProcessInfo') -> 'int': ...


class PhysicsServer2DExtension(PhysicsServer2D):



    def _world_boundary_shape_create(self) -> 'RID': ...
    def _separation_ray_shape_create(self) -> 'RID': ...
    def _segment_shape_create(self) -> 'RID': ...
    def _circle_shape_create(self) -> 'RID': ...
    def _rectangle_shape_create(self) -> 'RID': ...
    def _capsule_shape_create(self) -> 'RID': ...
    def _convex_polygon_shape_create(self) -> 'RID': ...
    def _concave_polygon_shape_create(self) -> 'RID': ...
    def _shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def _shape_set_custom_solver_bias(self, shape: 'RID', bias: 'float') -> None: ...
    def _shape_get_type(self, shape: 'RID') -> 'PhysicsServer2D__ShapeType': ...
    def _shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def _shape_get_custom_solver_bias(self, shape: 'RID') -> 'float': ...
    def _shape_collide(self, shape_A: 'RID', xform_A: 'Transform2D', motion_A: 'Vector2', shape_B: 'RID', xform_B: 'Transform2D', motion_B: 'Vector2', results: 'intptr', result_max: 'int', result_count: 'intptr') -> 'bool': ...
    def _space_create(self) -> 'RID': ...
    def _space_set_active(self, space: 'RID', active: 'bool') -> None: ...
    def _space_is_active(self, space: 'RID') -> 'bool': ...
    def _space_set_param(self, space: 'RID', param: 'PhysicsServer2D__SpaceParameter', value: 'float') -> None: ...
    def _space_get_param(self, space: 'RID', param: 'PhysicsServer2D__SpaceParameter') -> 'float': ...
    def _space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState2D': ...
    def _space_set_debug_contacts(self, space: 'RID', max_contacts: 'int') -> None: ...
    def _space_get_contacts(self, space: 'RID') -> 'PackedVector2Array': ...
    def _space_get_contact_count(self, space: 'RID') -> 'int': ...
    def _area_create(self) -> 'RID': ...
    def _area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def _area_get_space(self, area: 'RID') -> 'RID': ...
    def _area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform2D', disabled: 'bool') -> None: ...
    def _area_set_shape(self, area: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def _area_set_shape_transform(self, area: 'RID', shape_idx: 'int', transform: 'Transform2D') -> None: ...
    def _area_set_shape_disabled(self, area: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def _area_get_shape_count(self, area: 'RID') -> 'int': ...
    def _area_get_shape(self, area: 'RID', shape_idx: 'int') -> 'RID': ...
    def _area_get_shape_transform(self, area: 'RID', shape_idx: 'int') -> 'Transform2D': ...
    def _area_remove_shape(self, area: 'RID', shape_idx: 'int') -> None: ...
    def _area_clear_shapes(self, area: 'RID') -> None: ...
    def _area_attach_object_instance_id(self, area: 'RID', id: 'int') -> None: ...
    def _area_get_object_instance_id(self, area: 'RID') -> 'int': ...
    def _area_attach_canvas_instance_id(self, area: 'RID', id: 'int') -> None: ...
    def _area_get_canvas_instance_id(self, area: 'RID') -> 'int': ...
    def _area_set_param(self, area: 'RID', param: 'PhysicsServer2D__AreaParameter', value: 'Variant') -> None: ...
    def _area_set_transform(self, area: 'RID', transform: 'Transform2D') -> None: ...
    def _area_get_param(self, area: 'RID', param: 'PhysicsServer2D__AreaParameter') -> 'Variant': ...
    def _area_get_transform(self, area: 'RID') -> 'Transform2D': ...
    def _area_set_collision_layer(self, area: 'RID', layer: 'int') -> None: ...
    def _area_get_collision_layer(self, area: 'RID') -> 'int': ...
    def _area_set_collision_mask(self, area: 'RID', mask: 'int') -> None: ...
    def _area_get_collision_mask(self, area: 'RID') -> 'int': ...
    def _area_set_monitorable(self, area: 'RID', monitorable: 'bool') -> None: ...
    def _area_set_pickable(self, area: 'RID', pickable: 'bool') -> None: ...
    def _area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _body_create(self) -> 'RID': ...
    def _body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def _body_get_space(self, body: 'RID') -> 'RID': ...
    def _body_set_mode(self, body: 'RID', mode: 'PhysicsServer2D__BodyMode') -> None: ...
    def _body_get_mode(self, body: 'RID') -> 'PhysicsServer2D__BodyMode': ...
    def _body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform2D', disabled: 'bool') -> None: ...
    def _body_set_shape(self, body: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def _body_set_shape_transform(self, body: 'RID', shape_idx: 'int', transform: 'Transform2D') -> None: ...
    def _body_get_shape_count(self, body: 'RID') -> 'int': ...
    def _body_get_shape(self, body: 'RID', shape_idx: 'int') -> 'RID': ...
    def _body_get_shape_transform(self, body: 'RID', shape_idx: 'int') -> 'Transform2D': ...
    def _body_set_shape_disabled(self, body: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def _body_set_shape_as_one_way_collision(self, body: 'RID', shape_idx: 'int', enable: 'bool', margin: 'float') -> None: ...
    def _body_remove_shape(self, body: 'RID', shape_idx: 'int') -> None: ...
    def _body_clear_shapes(self, body: 'RID') -> None: ...
    def _body_attach_object_instance_id(self, body: 'RID', id: 'int') -> None: ...
    def _body_get_object_instance_id(self, body: 'RID') -> 'int': ...
    def _body_attach_canvas_instance_id(self, body: 'RID', id: 'int') -> None: ...
    def _body_get_canvas_instance_id(self, body: 'RID') -> 'int': ...
    def _body_set_continuous_collision_detection_mode(self, body: 'RID', mode: 'PhysicsServer2D__CCDMode') -> None: ...
    def _body_get_continuous_collision_detection_mode(self, body: 'RID') -> 'PhysicsServer2D__CCDMode': ...
    def _body_set_collision_layer(self, body: 'RID', layer: 'int') -> None: ...
    def _body_get_collision_layer(self, body: 'RID') -> 'int': ...
    def _body_set_collision_mask(self, body: 'RID', mask: 'int') -> None: ...
    def _body_get_collision_mask(self, body: 'RID') -> 'int': ...
    def _body_set_collision_priority(self, body: 'RID', priority: 'float') -> None: ...
    def _body_get_collision_priority(self, body: 'RID') -> 'float': ...
    def _body_set_param(self, body: 'RID', param: 'PhysicsServer2D__BodyParameter', value: 'Variant') -> None: ...
    def _body_get_param(self, body: 'RID', param: 'PhysicsServer2D__BodyParameter') -> 'Variant': ...
    def _body_reset_mass_properties(self, body: 'RID') -> None: ...
    def _body_set_state(self, body: 'RID', state: 'PhysicsServer2D__BodyState', value: 'Variant') -> None: ...
    def _body_get_state(self, body: 'RID', state: 'PhysicsServer2D__BodyState') -> 'Variant': ...
    def _body_apply_central_impulse(self, body: 'RID', impulse: 'Vector2') -> None: ...
    def _body_apply_torque_impulse(self, body: 'RID', impulse: 'float') -> None: ...
    def _body_apply_impulse(self, body: 'RID', impulse: 'Vector2', position: 'Vector2') -> None: ...
    def _body_apply_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def _body_apply_force(self, body: 'RID', force: 'Vector2', position: 'Vector2') -> None: ...
    def _body_apply_torque(self, body: 'RID', torque: 'float') -> None: ...
    def _body_add_constant_central_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def _body_add_constant_force(self, body: 'RID', force: 'Vector2', position: 'Vector2') -> None: ...
    def _body_add_constant_torque(self, body: 'RID', torque: 'float') -> None: ...
    def _body_set_constant_force(self, body: 'RID', force: 'Vector2') -> None: ...
    def _body_get_constant_force(self, body: 'RID') -> 'Vector2': ...
    def _body_set_constant_torque(self, body: 'RID', torque: 'float') -> None: ...
    def _body_get_constant_torque(self, body: 'RID') -> 'float': ...
    def _body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector2') -> None: ...
    def _body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_get_collision_exceptions(self, body: 'RID') -> 'Array'['RID']: ...
    def _body_set_max_contacts_reported(self, body: 'RID', amount: 'int') -> None: ...
    def _body_get_max_contacts_reported(self, body: 'RID') -> 'int': ...
    def _body_set_contacts_reported_depth_threshold(self, body: 'RID', threshold: 'float') -> None: ...
    def _body_get_contacts_reported_depth_threshold(self, body: 'RID') -> 'float': ...
    def _body_set_omit_force_integration(self, body: 'RID', enable: 'bool') -> None: ...
    def _body_is_omitting_force_integration(self, body: 'RID') -> 'bool': ...
    def _body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def _body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant') -> None: ...
    def _body_collide_shape(self, body: 'RID', body_shape: 'int', shape: 'RID', shape_xform: 'Transform2D', motion: 'Vector2', results: 'intptr', result_max: 'int', result_count: 'intptr') -> 'bool': ...
    def _body_set_pickable(self, body: 'RID', pickable: 'bool') -> None: ...
    def _body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState2D': ...
    def _body_test_motion(self, body: 'RID', from_: 'Transform2D', motion: 'Vector2', margin: 'float', collide_separation_ray: 'bool', recovery_as_collision: 'bool', result: 'intptr') -> 'bool': ...
    def _joint_create(self) -> 'RID': ...
    def _joint_clear(self, joint: 'RID') -> None: ...
    def _joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D__JointParam', value: 'float') -> None: ...
    def _joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D__JointParam') -> 'float': ...
    def _joint_disable_collisions_between_bodies(self, joint: 'RID', disable: 'bool') -> None: ...
    def _joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> 'bool': ...
    def _joint_make_pin(self, joint: 'RID', anchor: 'Vector2', body_a: 'RID', body_b: 'RID') -> None: ...
    def _joint_make_groove(self, joint: 'RID', a_groove1: 'Vector2', a_groove2: 'Vector2', b_anchor: 'Vector2', body_a: 'RID', body_b: 'RID') -> None: ...
    def _joint_make_damped_spring(self, joint: 'RID', anchor_a: 'Vector2', anchor_b: 'Vector2', body_a: 'RID', body_b: 'RID') -> None: ...
    def _pin_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer2D__PinJointFlag', enabled: 'bool') -> None: ...
    def _pin_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer2D__PinJointFlag') -> 'bool': ...
    def _pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D__PinJointParam', value: 'float') -> None: ...
    def _pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D__PinJointParam') -> 'float': ...
    def _damped_spring_joint_set_param(self, joint: 'RID', param: 'PhysicsServer2D__DampedSpringParam', value: 'float') -> None: ...
    def _damped_spring_joint_get_param(self, joint: 'RID', param: 'PhysicsServer2D__DampedSpringParam') -> 'float': ...
    def _joint_get_type(self, joint: 'RID') -> 'PhysicsServer2D__JointType': ...
    def _free_rid(self, rid: 'RID') -> None: ...
    def _set_active(self, active: 'bool') -> None: ...
    def _init(self) -> None: ...
    def _step(self, step: 'float') -> None: ...
    def _sync(self) -> None: ...
    def _flush_queries(self) -> None: ...
    def _end_sync(self) -> None: ...
    def _finish(self) -> None: ...
    def _is_flushing_queries(self) -> 'bool': ...
    def _get_process_info(self, process_info: 'PhysicsServer2D__ProcessInfo') -> 'int': ...
    def body_test_motion_is_excluding_body(self, body: 'RID') -> 'bool': ...
    def body_test_motion_is_excluding_object(self, object: 'int') -> 'bool': ...


class PhysicsServer2DManager(Object):



    def register_server(self, name: 'str', create_callback: 'Callable') -> None: ...
    def set_default_server(self, name: 'str', priority: 'int') -> None: ...


class PhysicsServer3D(Object):



    def world_boundary_shape_create(self) -> 'RID': ...
    def separation_ray_shape_create(self) -> 'RID': ...
    def sphere_shape_create(self) -> 'RID': ...
    def box_shape_create(self) -> 'RID': ...
    def capsule_shape_create(self) -> 'RID': ...
    def cylinder_shape_create(self) -> 'RID': ...
    def convex_polygon_shape_create(self) -> 'RID': ...
    def concave_polygon_shape_create(self) -> 'RID': ...
    def heightmap_shape_create(self) -> 'RID': ...
    def custom_shape_create(self) -> 'RID': ...
    def shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def shape_set_margin(self, shape: 'RID', margin: 'float') -> None: ...
    def shape_get_type(self, shape: 'RID') -> 'PhysicsServer3D__ShapeType': ...
    def shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def shape_get_margin(self, shape: 'RID') -> 'float': ...
    def space_create(self) -> 'RID': ...
    def space_set_active(self, space: 'RID', active: 'bool') -> None: ...
    def space_is_active(self, space: 'RID') -> 'bool': ...
    def space_set_param(self, space: 'RID', param: 'PhysicsServer3D__SpaceParameter', value: 'float') -> None: ...
    def space_get_param(self, space: 'RID', param: 'PhysicsServer3D__SpaceParameter') -> 'float': ...
    def space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState3D': ...
    def area_create(self) -> 'RID': ...
    def area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def area_get_space(self, area: 'RID') -> 'RID': ...
    def area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)'''), disabled: 'bool' = False) -> None: ...
    def area_set_shape(self, area: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def area_set_shape_transform(self, area: 'RID', shape_idx: 'int', transform: 'Transform3D') -> None: ...
    def area_set_shape_disabled(self, area: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def area_get_shape_count(self, area: 'RID') -> 'int': ...
    def area_get_shape(self, area: 'RID', shape_idx: 'int') -> 'RID': ...
    def area_get_shape_transform(self, area: 'RID', shape_idx: 'int') -> 'Transform3D': ...
    def area_remove_shape(self, area: 'RID', shape_idx: 'int') -> None: ...
    def area_clear_shapes(self, area: 'RID') -> None: ...
    def area_set_collision_layer(self, area: 'RID', layer: 'int') -> None: ...
    def area_get_collision_layer(self, area: 'RID') -> 'int': ...
    def area_set_collision_mask(self, area: 'RID', mask: 'int') -> None: ...
    def area_get_collision_mask(self, area: 'RID') -> 'int': ...
    def area_set_param(self, area: 'RID', param: 'PhysicsServer3D__AreaParameter', value: 'Variant') -> None: ...
    def area_set_transform(self, area: 'RID', transform: 'Transform3D') -> None: ...
    def area_get_param(self, area: 'RID', param: 'PhysicsServer3D__AreaParameter') -> 'Variant': ...
    def area_get_transform(self, area: 'RID') -> 'Transform3D': ...
    def area_attach_object_instance_id(self, area: 'RID', id: 'int') -> None: ...
    def area_get_object_instance_id(self, area: 'RID') -> 'int': ...
    def area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def area_set_monitorable(self, area: 'RID', monitorable: 'bool') -> None: ...
    def area_set_ray_pickable(self, area: 'RID', enable: 'bool') -> None: ...
    def body_create(self) -> 'RID': ...
    def body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def body_get_space(self, body: 'RID') -> 'RID': ...
    def body_set_mode(self, body: 'RID', mode: 'PhysicsServer3D__BodyMode') -> None: ...
    def body_get_mode(self, body: 'RID') -> 'PhysicsServer3D__BodyMode': ...
    def body_set_collision_layer(self, body: 'RID', layer: 'int') -> None: ...
    def body_get_collision_layer(self, body: 'RID') -> 'int': ...
    def body_set_collision_mask(self, body: 'RID', mask: 'int') -> None: ...
    def body_get_collision_mask(self, body: 'RID') -> 'int': ...
    def body_set_collision_priority(self, body: 'RID', priority: 'float') -> None: ...
    def body_get_collision_priority(self, body: 'RID') -> 'float': ...
    def body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)'''), disabled: 'bool' = False) -> None: ...
    def body_set_shape(self, body: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def body_set_shape_transform(self, body: 'RID', shape_idx: 'int', transform: 'Transform3D') -> None: ...
    def body_set_shape_disabled(self, body: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def body_get_shape_count(self, body: 'RID') -> 'int': ...
    def body_get_shape(self, body: 'RID', shape_idx: 'int') -> 'RID': ...
    def body_get_shape_transform(self, body: 'RID', shape_idx: 'int') -> 'Transform3D': ...
    def body_remove_shape(self, body: 'RID', shape_idx: 'int') -> None: ...
    def body_clear_shapes(self, body: 'RID') -> None: ...
    def body_attach_object_instance_id(self, body: 'RID', id: 'int') -> None: ...
    def body_get_object_instance_id(self, body: 'RID') -> 'int': ...
    def body_set_enable_continuous_collision_detection(self, body: 'RID', enable: 'bool') -> None: ...
    def body_is_continuous_collision_detection_enabled(self, body: 'RID') -> 'bool': ...
    def body_set_param(self, body: 'RID', param: 'PhysicsServer3D__BodyParameter', value: 'Variant') -> None: ...
    def body_get_param(self, body: 'RID', param: 'PhysicsServer3D__BodyParameter') -> 'Variant': ...
    def body_reset_mass_properties(self, body: 'RID') -> None: ...
    def body_set_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState', value: 'Variant') -> None: ...
    def body_get_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState') -> 'Variant': ...
    def body_apply_central_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def body_apply_impulse(self, body: 'RID', impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def body_apply_torque_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def body_apply_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def body_apply_force(self, body: 'RID', force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def body_apply_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def body_add_constant_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def body_add_constant_force(self, body: 'RID', force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def body_add_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def body_set_constant_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def body_get_constant_force(self, body: 'RID') -> 'Vector3': ...
    def body_set_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def body_get_constant_torque(self, body: 'RID') -> 'Vector3': ...
    def body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector3') -> None: ...
    def body_set_axis_lock(self, body: 'RID', axis: 'PhysicsServer3D__BodyAxis', lock: 'bool') -> None: ...
    def body_is_axis_locked(self, body: 'RID', axis: 'PhysicsServer3D__BodyAxis') -> 'bool': ...
    def body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def body_set_max_contacts_reported(self, body: 'RID', amount: 'int') -> None: ...
    def body_get_max_contacts_reported(self, body: 'RID') -> 'int': ...
    def body_set_omit_force_integration(self, body: 'RID', enable: 'bool') -> None: ...
    def body_is_omitting_force_integration(self, body: 'RID') -> 'bool': ...
    def body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant' = default('''null''')) -> None: ...
    def body_set_ray_pickable(self, body: 'RID', enable: 'bool') -> None: ...
    def body_test_motion(self, body: 'RID', parameters: 'PhysicsTestMotionParameters3D', result: 'PhysicsTestMotionResult3D' = default('''null''')) -> 'bool': ...
    def body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState3D': ...
    def soft_body_create(self) -> 'RID': ...
    def soft_body_update_rendering_server(self, body: 'RID', rendering_server_handler: 'PhysicsServer3DRenderingServerHandler') -> None: ...
    def soft_body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def soft_body_get_space(self, body: 'RID') -> 'RID': ...
    def soft_body_set_mesh(self, body: 'RID', mesh: 'RID') -> None: ...
    def soft_body_get_bounds(self, body: 'RID') -> 'AABB': ...
    def soft_body_set_collision_layer(self, body: 'RID', layer: 'int') -> None: ...
    def soft_body_get_collision_layer(self, body: 'RID') -> 'int': ...
    def soft_body_set_collision_mask(self, body: 'RID', mask: 'int') -> None: ...
    def soft_body_get_collision_mask(self, body: 'RID') -> 'int': ...
    def soft_body_add_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def soft_body_remove_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def soft_body_set_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState', variant: 'Variant') -> None: ...
    def soft_body_get_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState') -> 'Variant': ...
    def soft_body_set_transform(self, body: 'RID', transform: 'Transform3D') -> None: ...
    def soft_body_set_ray_pickable(self, body: 'RID', enable: 'bool') -> None: ...
    def soft_body_set_simulation_precision(self, body: 'RID', simulation_precision: 'int') -> None: ...
    def soft_body_get_simulation_precision(self, body: 'RID') -> 'int': ...
    def soft_body_set_total_mass(self, body: 'RID', total_mass: 'float') -> None: ...
    def soft_body_get_total_mass(self, body: 'RID') -> 'float': ...
    def soft_body_set_linear_stiffness(self, body: 'RID', stiffness: 'float') -> None: ...
    def soft_body_get_linear_stiffness(self, body: 'RID') -> 'float': ...
    def soft_body_set_pressure_coefficient(self, body: 'RID', pressure_coefficient: 'float') -> None: ...
    def soft_body_get_pressure_coefficient(self, body: 'RID') -> 'float': ...
    def soft_body_set_damping_coefficient(self, body: 'RID', damping_coefficient: 'float') -> None: ...
    def soft_body_get_damping_coefficient(self, body: 'RID') -> 'float': ...
    def soft_body_set_drag_coefficient(self, body: 'RID', drag_coefficient: 'float') -> None: ...
    def soft_body_get_drag_coefficient(self, body: 'RID') -> 'float': ...
    def soft_body_move_point(self, body: 'RID', point_index: 'int', global_position: 'Vector3') -> None: ...
    def soft_body_get_point_global_position(self, body: 'RID', point_index: 'int') -> 'Vector3': ...
    def soft_body_remove_all_pinned_points(self, body: 'RID') -> None: ...
    def soft_body_pin_point(self, body: 'RID', point_index: 'int', pin: 'bool') -> None: ...
    def soft_body_is_point_pinned(self, body: 'RID', point_index: 'int') -> 'bool': ...
    def joint_create(self) -> 'RID': ...
    def joint_clear(self, joint: 'RID') -> None: ...
    def joint_make_pin(self, joint: 'RID', body_A: 'RID', local_A: 'Vector3', body_B: 'RID', local_B: 'Vector3') -> None: ...
    def pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__PinJointParam', value: 'float') -> None: ...
    def pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__PinJointParam') -> 'float': ...
    def pin_joint_set_local_a(self, joint: 'RID', local_A: 'Vector3') -> None: ...
    def pin_joint_get_local_a(self, joint: 'RID') -> 'Vector3': ...
    def pin_joint_set_local_b(self, joint: 'RID', local_B: 'Vector3') -> None: ...
    def pin_joint_get_local_b(self, joint: 'RID') -> 'Vector3': ...
    def joint_make_hinge(self, joint: 'RID', body_A: 'RID', hinge_A: 'Transform3D', body_B: 'RID', hinge_B: 'Transform3D') -> None: ...
    def hinge_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__HingeJointParam', value: 'float') -> None: ...
    def hinge_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__HingeJointParam') -> 'float': ...
    def hinge_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer3D__HingeJointFlag', enabled: 'bool') -> None: ...
    def hinge_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer3D__HingeJointFlag') -> 'bool': ...
    def joint_make_slider(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def slider_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__SliderJointParam', value: 'float') -> None: ...
    def slider_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__SliderJointParam') -> 'float': ...
    def joint_make_cone_twist(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def cone_twist_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__ConeTwistJointParam', value: 'float') -> None: ...
    def cone_twist_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__ConeTwistJointParam') -> 'float': ...
    def joint_get_type(self, joint: 'RID') -> 'PhysicsServer3D__JointType': ...
    def joint_set_solver_priority(self, joint: 'RID', priority: 'int') -> None: ...
    def joint_get_solver_priority(self, joint: 'RID') -> 'int': ...
    def joint_disable_collisions_between_bodies(self, joint: 'RID', disable: 'bool') -> None: ...
    def joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> 'bool': ...
    def joint_make_generic_6dof(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def generic_6dof_joint_set_param(self, joint: 'RID', axis: 'Vector3__Axis', param: 'PhysicsServer3D__G6DOFJointAxisParam', value: 'float') -> None: ...
    def generic_6dof_joint_get_param(self, joint: 'RID', axis: 'Vector3__Axis', param: 'PhysicsServer3D__G6DOFJointAxisParam') -> 'float': ...
    def generic_6dof_joint_set_flag(self, joint: 'RID', axis: 'Vector3__Axis', flag: 'PhysicsServer3D__G6DOFJointAxisFlag', enable: 'bool') -> None: ...
    def generic_6dof_joint_get_flag(self, joint: 'RID', axis: 'Vector3__Axis', flag: 'PhysicsServer3D__G6DOFJointAxisFlag') -> 'bool': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def set_active(self, active: 'bool') -> None: ...
    def get_process_info(self, process_info: 'PhysicsServer3D__ProcessInfo') -> 'int': ...


class PhysicsServer3DExtension(PhysicsServer3D):



    def _world_boundary_shape_create(self) -> 'RID': ...
    def _separation_ray_shape_create(self) -> 'RID': ...
    def _sphere_shape_create(self) -> 'RID': ...
    def _box_shape_create(self) -> 'RID': ...
    def _capsule_shape_create(self) -> 'RID': ...
    def _cylinder_shape_create(self) -> 'RID': ...
    def _convex_polygon_shape_create(self) -> 'RID': ...
    def _concave_polygon_shape_create(self) -> 'RID': ...
    def _heightmap_shape_create(self) -> 'RID': ...
    def _custom_shape_create(self) -> 'RID': ...
    def _shape_set_data(self, shape: 'RID', data: 'Variant') -> None: ...
    def _shape_set_custom_solver_bias(self, shape: 'RID', bias: 'float') -> None: ...
    def _shape_set_margin(self, shape: 'RID', margin: 'float') -> None: ...
    def _shape_get_margin(self, shape: 'RID') -> 'float': ...
    def _shape_get_type(self, shape: 'RID') -> 'PhysicsServer3D__ShapeType': ...
    def _shape_get_data(self, shape: 'RID') -> 'Variant': ...
    def _shape_get_custom_solver_bias(self, shape: 'RID') -> 'float': ...
    def _space_create(self) -> 'RID': ...
    def _space_set_active(self, space: 'RID', active: 'bool') -> None: ...
    def _space_is_active(self, space: 'RID') -> 'bool': ...
    def _space_set_param(self, space: 'RID', param: 'PhysicsServer3D__SpaceParameter', value: 'float') -> None: ...
    def _space_get_param(self, space: 'RID', param: 'PhysicsServer3D__SpaceParameter') -> 'float': ...
    def _space_get_direct_state(self, space: 'RID') -> 'PhysicsDirectSpaceState3D': ...
    def _space_set_debug_contacts(self, space: 'RID', max_contacts: 'int') -> None: ...
    def _space_get_contacts(self, space: 'RID') -> 'PackedVector3Array': ...
    def _space_get_contact_count(self, space: 'RID') -> 'int': ...
    def _area_create(self) -> 'RID': ...
    def _area_set_space(self, area: 'RID', space: 'RID') -> None: ...
    def _area_get_space(self, area: 'RID') -> 'RID': ...
    def _area_add_shape(self, area: 'RID', shape: 'RID', transform: 'Transform3D', disabled: 'bool') -> None: ...
    def _area_set_shape(self, area: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def _area_set_shape_transform(self, area: 'RID', shape_idx: 'int', transform: 'Transform3D') -> None: ...
    def _area_set_shape_disabled(self, area: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def _area_get_shape_count(self, area: 'RID') -> 'int': ...
    def _area_get_shape(self, area: 'RID', shape_idx: 'int') -> 'RID': ...
    def _area_get_shape_transform(self, area: 'RID', shape_idx: 'int') -> 'Transform3D': ...
    def _area_remove_shape(self, area: 'RID', shape_idx: 'int') -> None: ...
    def _area_clear_shapes(self, area: 'RID') -> None: ...
    def _area_attach_object_instance_id(self, area: 'RID', id: 'int') -> None: ...
    def _area_get_object_instance_id(self, area: 'RID') -> 'int': ...
    def _area_set_param(self, area: 'RID', param: 'PhysicsServer3D__AreaParameter', value: 'Variant') -> None: ...
    def _area_set_transform(self, area: 'RID', transform: 'Transform3D') -> None: ...
    def _area_get_param(self, area: 'RID', param: 'PhysicsServer3D__AreaParameter') -> 'Variant': ...
    def _area_get_transform(self, area: 'RID') -> 'Transform3D': ...
    def _area_set_collision_layer(self, area: 'RID', layer: 'int') -> None: ...
    def _area_get_collision_layer(self, area: 'RID') -> 'int': ...
    def _area_set_collision_mask(self, area: 'RID', mask: 'int') -> None: ...
    def _area_get_collision_mask(self, area: 'RID') -> 'int': ...
    def _area_set_monitorable(self, area: 'RID', monitorable: 'bool') -> None: ...
    def _area_set_ray_pickable(self, area: 'RID', enable: 'bool') -> None: ...
    def _area_set_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _area_set_area_monitor_callback(self, area: 'RID', callback: 'Callable') -> None: ...
    def _body_create(self) -> 'RID': ...
    def _body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def _body_get_space(self, body: 'RID') -> 'RID': ...
    def _body_set_mode(self, body: 'RID', mode: 'PhysicsServer3D__BodyMode') -> None: ...
    def _body_get_mode(self, body: 'RID') -> 'PhysicsServer3D__BodyMode': ...
    def _body_add_shape(self, body: 'RID', shape: 'RID', transform: 'Transform3D', disabled: 'bool') -> None: ...
    def _body_set_shape(self, body: 'RID', shape_idx: 'int', shape: 'RID') -> None: ...
    def _body_set_shape_transform(self, body: 'RID', shape_idx: 'int', transform: 'Transform3D') -> None: ...
    def _body_set_shape_disabled(self, body: 'RID', shape_idx: 'int', disabled: 'bool') -> None: ...
    def _body_get_shape_count(self, body: 'RID') -> 'int': ...
    def _body_get_shape(self, body: 'RID', shape_idx: 'int') -> 'RID': ...
    def _body_get_shape_transform(self, body: 'RID', shape_idx: 'int') -> 'Transform3D': ...
    def _body_remove_shape(self, body: 'RID', shape_idx: 'int') -> None: ...
    def _body_clear_shapes(self, body: 'RID') -> None: ...
    def _body_attach_object_instance_id(self, body: 'RID', id: 'int') -> None: ...
    def _body_get_object_instance_id(self, body: 'RID') -> 'int': ...
    def _body_set_enable_continuous_collision_detection(self, body: 'RID', enable: 'bool') -> None: ...
    def _body_is_continuous_collision_detection_enabled(self, body: 'RID') -> 'bool': ...
    def _body_set_collision_layer(self, body: 'RID', layer: 'int') -> None: ...
    def _body_get_collision_layer(self, body: 'RID') -> 'int': ...
    def _body_set_collision_mask(self, body: 'RID', mask: 'int') -> None: ...
    def _body_get_collision_mask(self, body: 'RID') -> 'int': ...
    def _body_set_collision_priority(self, body: 'RID', priority: 'float') -> None: ...
    def _body_get_collision_priority(self, body: 'RID') -> 'float': ...
    def _body_set_user_flags(self, body: 'RID', flags: 'int') -> None: ...
    def _body_get_user_flags(self, body: 'RID') -> 'int': ...
    def _body_set_param(self, body: 'RID', param: 'PhysicsServer3D__BodyParameter', value: 'Variant') -> None: ...
    def _body_get_param(self, body: 'RID', param: 'PhysicsServer3D__BodyParameter') -> 'Variant': ...
    def _body_reset_mass_properties(self, body: 'RID') -> None: ...
    def _body_set_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState', value: 'Variant') -> None: ...
    def _body_get_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState') -> 'Variant': ...
    def _body_apply_central_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def _body_apply_impulse(self, body: 'RID', impulse: 'Vector3', position: 'Vector3') -> None: ...
    def _body_apply_torque_impulse(self, body: 'RID', impulse: 'Vector3') -> None: ...
    def _body_apply_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def _body_apply_force(self, body: 'RID', force: 'Vector3', position: 'Vector3') -> None: ...
    def _body_apply_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def _body_add_constant_central_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def _body_add_constant_force(self, body: 'RID', force: 'Vector3', position: 'Vector3') -> None: ...
    def _body_add_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def _body_set_constant_force(self, body: 'RID', force: 'Vector3') -> None: ...
    def _body_get_constant_force(self, body: 'RID') -> 'Vector3': ...
    def _body_set_constant_torque(self, body: 'RID', torque: 'Vector3') -> None: ...
    def _body_get_constant_torque(self, body: 'RID') -> 'Vector3': ...
    def _body_set_axis_velocity(self, body: 'RID', axis_velocity: 'Vector3') -> None: ...
    def _body_set_axis_lock(self, body: 'RID', axis: 'PhysicsServer3D__BodyAxis', lock: 'bool') -> None: ...
    def _body_is_axis_locked(self, body: 'RID', axis: 'PhysicsServer3D__BodyAxis') -> 'bool': ...
    def _body_add_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_remove_collision_exception(self, body: 'RID', excepted_body: 'RID') -> None: ...
    def _body_get_collision_exceptions(self, body: 'RID') -> 'Array'['RID']: ...
    def _body_set_max_contacts_reported(self, body: 'RID', amount: 'int') -> None: ...
    def _body_get_max_contacts_reported(self, body: 'RID') -> 'int': ...
    def _body_set_contacts_reported_depth_threshold(self, body: 'RID', threshold: 'float') -> None: ...
    def _body_get_contacts_reported_depth_threshold(self, body: 'RID') -> 'float': ...
    def _body_set_omit_force_integration(self, body: 'RID', enable: 'bool') -> None: ...
    def _body_is_omitting_force_integration(self, body: 'RID') -> 'bool': ...
    def _body_set_state_sync_callback(self, body: 'RID', callable: 'Callable') -> None: ...
    def _body_set_force_integration_callback(self, body: 'RID', callable: 'Callable', userdata: 'Variant') -> None: ...
    def _body_set_ray_pickable(self, body: 'RID', enable: 'bool') -> None: ...
    def _body_test_motion(self, body: 'RID', from_: 'Transform3D', motion: 'Vector3', margin: 'float', max_collisions: 'int', collide_separation_ray: 'bool', recovery_as_collision: 'bool', result: 'intptr') -> 'bool': ...
    def _body_get_direct_state(self, body: 'RID') -> 'PhysicsDirectBodyState3D': ...
    def _soft_body_create(self) -> 'RID': ...
    def _soft_body_update_rendering_server(self, body: 'RID', rendering_server_handler: 'PhysicsServer3DRenderingServerHandler') -> None: ...
    def _soft_body_set_space(self, body: 'RID', space: 'RID') -> None: ...
    def _soft_body_get_space(self, body: 'RID') -> 'RID': ...
    def _soft_body_set_ray_pickable(self, body: 'RID', enable: 'bool') -> None: ...
    def _soft_body_set_collision_layer(self, body: 'RID', layer: 'int') -> None: ...
    def _soft_body_get_collision_layer(self, body: 'RID') -> 'int': ...
    def _soft_body_set_collision_mask(self, body: 'RID', mask: 'int') -> None: ...
    def _soft_body_get_collision_mask(self, body: 'RID') -> 'int': ...
    def _soft_body_add_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def _soft_body_remove_collision_exception(self, body: 'RID', body_b: 'RID') -> None: ...
    def _soft_body_get_collision_exceptions(self, body: 'RID') -> 'Array'['RID']: ...
    def _soft_body_set_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState', variant: 'Variant') -> None: ...
    def _soft_body_get_state(self, body: 'RID', state: 'PhysicsServer3D__BodyState') -> 'Variant': ...
    def _soft_body_set_transform(self, body: 'RID', transform: 'Transform3D') -> None: ...
    def _soft_body_set_simulation_precision(self, body: 'RID', simulation_precision: 'int') -> None: ...
    def _soft_body_get_simulation_precision(self, body: 'RID') -> 'int': ...
    def _soft_body_set_total_mass(self, body: 'RID', total_mass: 'float') -> None: ...
    def _soft_body_get_total_mass(self, body: 'RID') -> 'float': ...
    def _soft_body_set_linear_stiffness(self, body: 'RID', linear_stiffness: 'float') -> None: ...
    def _soft_body_get_linear_stiffness(self, body: 'RID') -> 'float': ...
    def _soft_body_set_pressure_coefficient(self, body: 'RID', pressure_coefficient: 'float') -> None: ...
    def _soft_body_get_pressure_coefficient(self, body: 'RID') -> 'float': ...
    def _soft_body_set_damping_coefficient(self, body: 'RID', damping_coefficient: 'float') -> None: ...
    def _soft_body_get_damping_coefficient(self, body: 'RID') -> 'float': ...
    def _soft_body_set_drag_coefficient(self, body: 'RID', drag_coefficient: 'float') -> None: ...
    def _soft_body_get_drag_coefficient(self, body: 'RID') -> 'float': ...
    def _soft_body_set_mesh(self, body: 'RID', mesh: 'RID') -> None: ...
    def _soft_body_get_bounds(self, body: 'RID') -> 'AABB': ...
    def _soft_body_move_point(self, body: 'RID', point_index: 'int', global_position: 'Vector3') -> None: ...
    def _soft_body_get_point_global_position(self, body: 'RID', point_index: 'int') -> 'Vector3': ...
    def _soft_body_remove_all_pinned_points(self, body: 'RID') -> None: ...
    def _soft_body_pin_point(self, body: 'RID', point_index: 'int', pin: 'bool') -> None: ...
    def _soft_body_is_point_pinned(self, body: 'RID', point_index: 'int') -> 'bool': ...
    def _joint_create(self) -> 'RID': ...
    def _joint_clear(self, joint: 'RID') -> None: ...
    def _joint_make_pin(self, joint: 'RID', body_A: 'RID', local_A: 'Vector3', body_B: 'RID', local_B: 'Vector3') -> None: ...
    def _pin_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__PinJointParam', value: 'float') -> None: ...
    def _pin_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__PinJointParam') -> 'float': ...
    def _pin_joint_set_local_a(self, joint: 'RID', local_A: 'Vector3') -> None: ...
    def _pin_joint_get_local_a(self, joint: 'RID') -> 'Vector3': ...
    def _pin_joint_set_local_b(self, joint: 'RID', local_B: 'Vector3') -> None: ...
    def _pin_joint_get_local_b(self, joint: 'RID') -> 'Vector3': ...
    def _joint_make_hinge(self, joint: 'RID', body_A: 'RID', hinge_A: 'Transform3D', body_B: 'RID', hinge_B: 'Transform3D') -> None: ...
    def _joint_make_hinge_simple(self, joint: 'RID', body_A: 'RID', pivot_A: 'Vector3', axis_A: 'Vector3', body_B: 'RID', pivot_B: 'Vector3', axis_B: 'Vector3') -> None: ...
    def _hinge_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__HingeJointParam', value: 'float') -> None: ...
    def _hinge_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__HingeJointParam') -> 'float': ...
    def _hinge_joint_set_flag(self, joint: 'RID', flag: 'PhysicsServer3D__HingeJointFlag', enabled: 'bool') -> None: ...
    def _hinge_joint_get_flag(self, joint: 'RID', flag: 'PhysicsServer3D__HingeJointFlag') -> 'bool': ...
    def _joint_make_slider(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def _slider_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__SliderJointParam', value: 'float') -> None: ...
    def _slider_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__SliderJointParam') -> 'float': ...
    def _joint_make_cone_twist(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def _cone_twist_joint_set_param(self, joint: 'RID', param: 'PhysicsServer3D__ConeTwistJointParam', value: 'float') -> None: ...
    def _cone_twist_joint_get_param(self, joint: 'RID', param: 'PhysicsServer3D__ConeTwistJointParam') -> 'float': ...
    def _joint_make_generic_6dof(self, joint: 'RID', body_A: 'RID', local_ref_A: 'Transform3D', body_B: 'RID', local_ref_B: 'Transform3D') -> None: ...
    def _generic_6dof_joint_set_param(self, joint: 'RID', axis: 'Vector3__Axis', param: 'PhysicsServer3D__G6DOFJointAxisParam', value: 'float') -> None: ...
    def _generic_6dof_joint_get_param(self, joint: 'RID', axis: 'Vector3__Axis', param: 'PhysicsServer3D__G6DOFJointAxisParam') -> 'float': ...
    def _generic_6dof_joint_set_flag(self, joint: 'RID', axis: 'Vector3__Axis', flag: 'PhysicsServer3D__G6DOFJointAxisFlag', enable: 'bool') -> None: ...
    def _generic_6dof_joint_get_flag(self, joint: 'RID', axis: 'Vector3__Axis', flag: 'PhysicsServer3D__G6DOFJointAxisFlag') -> 'bool': ...
    def _joint_get_type(self, joint: 'RID') -> 'PhysicsServer3D__JointType': ...
    def _joint_set_solver_priority(self, joint: 'RID', priority: 'int') -> None: ...
    def _joint_get_solver_priority(self, joint: 'RID') -> 'int': ...
    def _joint_disable_collisions_between_bodies(self, joint: 'RID', disable: 'bool') -> None: ...
    def _joint_is_disabled_collisions_between_bodies(self, joint: 'RID') -> 'bool': ...
    def _free_rid(self, rid: 'RID') -> None: ...
    def _set_active(self, active: 'bool') -> None: ...
    def _init(self) -> None: ...
    def _step(self, step: 'float') -> None: ...
    def _sync(self) -> None: ...
    def _flush_queries(self) -> None: ...
    def _end_sync(self) -> None: ...
    def _finish(self) -> None: ...
    def _is_flushing_queries(self) -> 'bool': ...
    def _get_process_info(self, process_info: 'PhysicsServer3D__ProcessInfo') -> 'int': ...
    def body_test_motion_is_excluding_body(self, body: 'RID') -> 'bool': ...
    def body_test_motion_is_excluding_object(self, object: 'int') -> 'bool': ...


class PhysicsServer3DManager(Object):



    def register_server(self, name: 'str', create_callback: 'Callable') -> None: ...
    def set_default_server(self, name: 'str', priority: 'int') -> None: ...


class PhysicsServer3DRenderingServerHandler(Object):



    def _set_vertex(self, vertex_id: 'int', vertex: 'Vector3') -> None: ...
    def _set_normal(self, vertex_id: 'int', normal: 'Vector3') -> None: ...
    def _set_aabb(self, aabb: 'AABB') -> None: ...
    def set_vertex(self, vertex_id: 'int', vertex: 'Vector3') -> None: ...
    def set_normal(self, vertex_id: 'int', normal: 'Vector3') -> None: ...
    def set_aabb(self, aabb: 'AABB') -> None: ...


class PhysicsShapeQueryParameters2D(RefCounted):


    collision_mask: 'int'
    exclude: 'Array'['RID']
    margin: 'float'
    motion: 'Vector2'
    shape: 'Shape2D'
    shape_rid: 'RID'
    transform: 'Transform2D'
    collide_with_bodies: 'bool'
    collide_with_areas: 'bool'

    def set_shape(self, shape: 'Resource') -> None: ...
    def get_shape(self) -> 'Resource': ...
    def set_shape_rid(self, shape: 'RID') -> None: ...
    def get_shape_rid(self) -> 'RID': ...
    def set_transform(self, transform: 'Transform2D') -> None: ...
    def get_transform(self) -> 'Transform2D': ...
    def set_motion(self, motion: 'Vector2') -> None: ...
    def get_motion(self) -> 'Vector2': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_exclude(self, exclude: 'Array'['RID']) -> None: ...
    def get_exclude(self) -> 'Array'['RID']: ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...


class PhysicsShapeQueryParameters3D(RefCounted):


    collision_mask: 'int'
    exclude: 'Array'['RID']
    margin: 'float'
    motion: 'Vector3'
    shape: 'Shape3D'
    shape_rid: 'RID'
    transform: 'Transform3D'
    collide_with_bodies: 'bool'
    collide_with_areas: 'bool'

    def set_shape(self, shape: 'Resource') -> None: ...
    def get_shape(self) -> 'Resource': ...
    def set_shape_rid(self, shape: 'RID') -> None: ...
    def get_shape_rid(self) -> 'RID': ...
    def set_transform(self, transform: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def set_motion(self, motion: 'Vector3') -> None: ...
    def get_motion(self) -> 'Vector3': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_exclude(self, exclude: 'Array'['RID']) -> None: ...
    def get_exclude(self) -> 'Array'['RID']: ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...


class PhysicsTestMotionParameters2D(RefCounted):


    from_: 'Transform2D'
    motion: 'Vector2'
    margin: 'float'
    collide_separation_ray: 'bool'
    exclude_bodies: 'Array'['RID']
    exclude_objects: 'Array'
    recovery_as_collision: 'bool'

    def get_from(self) -> 'Transform2D': ...
    def set_from(self, from_: 'Transform2D') -> None: ...
    def get_motion(self) -> 'Vector2': ...
    def set_motion(self, motion: 'Vector2') -> None: ...
    def get_margin(self) -> 'float': ...
    def set_margin(self, margin: 'float') -> None: ...
    def is_collide_separation_ray_enabled(self) -> 'bool': ...
    def set_collide_separation_ray_enabled(self, enabled: 'bool') -> None: ...
    def get_exclude_bodies(self) -> 'Array'['RID']: ...
    def set_exclude_bodies(self, exclude_list: 'Array'['RID']) -> None: ...
    def get_exclude_objects(self) -> 'Array'['int']: ...
    def set_exclude_objects(self, exclude_list: 'Array'['int']) -> None: ...
    def is_recovery_as_collision_enabled(self) -> 'bool': ...
    def set_recovery_as_collision_enabled(self, enabled: 'bool') -> None: ...


class PhysicsTestMotionParameters3D(RefCounted):


    from_: 'Transform3D'
    motion: 'Vector3'
    margin: 'float'
    max_collisions: 'int'
    collide_separation_ray: 'bool'
    exclude_bodies: 'Array'['RID']
    exclude_objects: 'Array'
    recovery_as_collision: 'bool'

    def get_from(self) -> 'Transform3D': ...
    def set_from(self, from_: 'Transform3D') -> None: ...
    def get_motion(self) -> 'Vector3': ...
    def set_motion(self, motion: 'Vector3') -> None: ...
    def get_margin(self) -> 'float': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_max_collisions(self) -> 'int': ...
    def set_max_collisions(self, max_collisions: 'int') -> None: ...
    def is_collide_separation_ray_enabled(self) -> 'bool': ...
    def set_collide_separation_ray_enabled(self, enabled: 'bool') -> None: ...
    def get_exclude_bodies(self) -> 'Array'['RID']: ...
    def set_exclude_bodies(self, exclude_list: 'Array'['RID']) -> None: ...
    def get_exclude_objects(self) -> 'Array'['int']: ...
    def set_exclude_objects(self, exclude_list: 'Array'['int']) -> None: ...
    def is_recovery_as_collision_enabled(self) -> 'bool': ...
    def set_recovery_as_collision_enabled(self, enabled: 'bool') -> None: ...


class PhysicsTestMotionResult2D(RefCounted):



    def get_travel(self) -> 'Vector2': ...
    def get_remainder(self) -> 'Vector2': ...
    def get_collision_point(self) -> 'Vector2': ...
    def get_collision_normal(self) -> 'Vector2': ...
    def get_collider_velocity(self) -> 'Vector2': ...
    def get_collider_id(self) -> 'int': ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider(self) -> 'Object': ...
    def get_collider_shape(self) -> 'int': ...
    def get_collision_local_shape(self) -> 'int': ...
    def get_collision_depth(self) -> 'float': ...
    def get_collision_safe_fraction(self) -> 'float': ...
    def get_collision_unsafe_fraction(self) -> 'float': ...


class PhysicsTestMotionResult3D(RefCounted):



    def get_travel(self) -> 'Vector3': ...
    def get_remainder(self) -> 'Vector3': ...
    def get_collision_safe_fraction(self) -> 'float': ...
    def get_collision_unsafe_fraction(self) -> 'float': ...
    def get_collision_count(self) -> 'int': ...
    def get_collision_point(self, collision_index: 'int' = 0) -> 'Vector3': ...
    def get_collision_normal(self, collision_index: 'int' = 0) -> 'Vector3': ...
    def get_collider_velocity(self, collision_index: 'int' = 0) -> 'Vector3': ...
    def get_collider_id(self, collision_index: 'int' = 0) -> 'int': ...
    def get_collider_rid(self, collision_index: 'int' = 0) -> 'RID': ...
    def get_collider(self, collision_index: 'int' = 0) -> 'Object': ...
    def get_collider_shape(self, collision_index: 'int' = 0) -> 'int': ...
    def get_collision_local_shape(self, collision_index: 'int' = 0) -> 'int': ...
    def get_collision_depth(self, collision_index: 'int' = 0) -> 'float': ...


class PinJoint2D(Joint2D):


    softness: 'float'
    angular_limit_enabled: 'bool'
    angular_limit_lower: 'float'
    angular_limit_upper: 'float'
    motor_enabled: 'bool'
    motor_target_velocity: 'float'

    def set_softness(self, softness: 'float') -> None: ...
    def get_softness(self) -> 'float': ...
    def set_angular_limit_lower(self, angular_limit_lower: 'float') -> None: ...
    def get_angular_limit_lower(self) -> 'float': ...
    def set_angular_limit_upper(self, angular_limit_upper: 'float') -> None: ...
    def get_angular_limit_upper(self) -> 'float': ...
    def set_motor_target_velocity(self, motor_target_velocity: 'float') -> None: ...
    def get_motor_target_velocity(self) -> 'float': ...
    def set_motor_enabled(self, enabled: 'bool') -> None: ...
    def is_motor_enabled(self) -> 'bool': ...
    def set_angular_limit_enabled(self, enabled: 'bool') -> None: ...
    def is_angular_limit_enabled(self) -> 'bool': ...


class PinJoint3D(Joint3D):



    def set_param(self, param: 'PinJoint3D__Param', value: 'float') -> None: ...
    def get_param(self, param: 'PinJoint3D__Param') -> 'float': ...


class PlaceholderCubemap(PlaceholderTextureLayered): ...


class PlaceholderCubemapArray(PlaceholderTextureLayered): ...


class PlaceholderMaterial(Material): ...


class PlaceholderMesh(Mesh):


    aabb: 'AABB'

    def set_aabb(self, aabb: 'AABB') -> None: ...


class PlaceholderTexture2D(Texture2D):


    size: 'Vector2'

    def set_size(self, size: 'Vector2') -> None: ...


class PlaceholderTexture2DArray(PlaceholderTextureLayered): ...


class PlaceholderTexture3D(Texture3D):


    size: 'Vector3i'

    def set_size(self, size: 'Vector3i') -> None: ...
    def get_size(self) -> 'Vector3i': ...


class PlaceholderTextureLayered(TextureLayered):


    size: 'Vector2i'
    layers: 'int'

    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def set_layers(self, layers: 'int') -> None: ...


class PlaneMesh(PrimitiveMesh):


    size: 'Vector2'
    subdivide_width: 'int'
    subdivide_depth: 'int'
    center_offset: 'Vector3'
    orientation: 'int'

    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...
    def set_subdivide_width(self, subdivide: 'int') -> None: ...
    def get_subdivide_width(self) -> 'int': ...
    def set_subdivide_depth(self, subdivide: 'int') -> None: ...
    def get_subdivide_depth(self) -> 'int': ...
    def set_center_offset(self, offset: 'Vector3') -> None: ...
    def get_center_offset(self) -> 'Vector3': ...
    def set_orientation(self, orientation: 'PlaneMesh__Orientation') -> None: ...
    def get_orientation(self) -> 'PlaneMesh__Orientation': ...


class PointLight2D(Light2D):


    texture: 'Texture2D' | 'CompressedTexture2D' | 'CurveTexture' | 'CurveXYZTexture' | 'ExternalTexture' | 'GradientTexture1D' | 'GradientTexture2D' | 'ImageTexture' | 'NoiseTexture2D' | 'PlaceholderTexture2D' | 'PortableCompressedTexture2D'
    offset: 'Vector2'
    texture_scale: 'float'
    height: 'float'

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_offset(self, texture_offset: 'Vector2') -> None: ...
    def get_texture_offset(self) -> 'Vector2': ...
    def set_texture_scale(self, texture_scale: 'float') -> None: ...
    def get_texture_scale(self) -> 'float': ...


class PointMesh(PrimitiveMesh): ...


class Polygon2D(Node2D):


    color: 'Color'
    offset: 'Vector2'
    antialiased: 'bool'
    texture: 'Texture2D'
    texture_offset: 'Vector2'
    texture_scale: 'Vector2'
    texture_rotation: 'float'
    skeleton: 'NodePath'
    invert_enabled: 'bool'
    invert_border: 'float'
    polygon: 'PackedVector2Array'
    uv: 'PackedVector2Array'
    vertex_colors: 'PackedColorArray'
    polygons: 'Array'
    bones: 'Array'
    internal_vertex_count: 'int'

    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...
    def set_uv(self, uv: 'PackedVector2Array') -> None: ...
    def get_uv(self) -> 'PackedVector2Array': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_polygons(self, polygons: 'Array') -> None: ...
    def get_polygons(self) -> 'Array': ...
    def set_vertex_colors(self, vertex_colors: 'PackedColorArray') -> None: ...
    def get_vertex_colors(self) -> 'PackedColorArray': ...
    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_offset(self, texture_offset: 'Vector2') -> None: ...
    def get_texture_offset(self) -> 'Vector2': ...
    def set_texture_rotation(self, texture_rotation: 'float') -> None: ...
    def get_texture_rotation(self) -> 'float': ...
    def set_texture_scale(self, texture_scale: 'Vector2') -> None: ...
    def get_texture_scale(self) -> 'Vector2': ...
    def set_invert_enabled(self, invert: 'bool') -> None: ...
    def get_invert_enabled(self) -> 'bool': ...
    def set_antialiased(self, antialiased: 'bool') -> None: ...
    def get_antialiased(self) -> 'bool': ...
    def set_invert_border(self, invert_border: 'float') -> None: ...
    def get_invert_border(self) -> 'float': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def add_bone(self, path: 'NodePath', weights: 'PackedFloat32Array') -> None: ...
    def get_bone_count(self) -> 'int': ...
    def get_bone_path(self, index: 'int') -> 'NodePath': ...
    def get_bone_weights(self, index: 'int') -> 'PackedFloat32Array': ...
    def erase_bone(self, index: 'int') -> None: ...
    def clear_bones(self) -> None: ...
    def set_bone_path(self, index: 'int', path: 'NodePath') -> None: ...
    def set_bone_weights(self, index: 'int', weights: 'PackedFloat32Array') -> None: ...
    def set_skeleton(self, skeleton: 'NodePath') -> None: ...
    def get_skeleton(self) -> 'NodePath': ...
    def set_internal_vertex_count(self, internal_vertex_count: 'int') -> None: ...
    def get_internal_vertex_count(self) -> 'int': ...


class PolygonOccluder3D(Occluder3D):


    polygon: 'PackedVector2Array'

    def set_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_polygon(self) -> 'PackedVector2Array': ...


class PolygonPathFinder(Resource):


    data: 'Dictionary'

    def setup(self, points: 'PackedVector2Array', connections: 'PackedInt32Array') -> None: ...
    def find_path(self, from_: 'Vector2', to: 'Vector2') -> 'PackedVector2Array': ...
    def get_intersections(self, from_: 'Vector2', to: 'Vector2') -> 'PackedVector2Array': ...
    def get_closest_point(self, point: 'Vector2') -> 'Vector2': ...
    def is_point_inside(self, point: 'Vector2') -> 'bool': ...
    def set_point_penalty(self, idx: 'int', penalty: 'float') -> None: ...
    def get_point_penalty(self, idx: 'int') -> 'float': ...
    def get_bounds(self) -> 'Rect2': ...


class Popup(Window):


    popup_hide: 'Signal[Callable[[], None]]'  # popup_hide()



class PopupMenu(Popup):


    hide_on_item_selection: 'bool'
    hide_on_checkable_item_selection: 'bool'
    hide_on_state_item_selection: 'bool'
    submenu_popup_delay: 'float'
    allow_search: 'bool'
    system_menu_id: 'int'
    prefer_native_menu: 'bool'
    item_count: 'int'
    id_pressed: 'Signal[Callable[[int], None]]'  # id_pressed(id: int)
    id_focused: 'Signal[Callable[[int], None]]'  # id_focused(id: int)
    index_pressed: 'Signal[Callable[[int], None]]'  # index_pressed(index: int)
    menu_changed: 'Signal[Callable[[], None]]'  # menu_changed()

    def activate_item_by_event(self, event: 'InputEvent', for_global_only: 'bool' = False) -> 'bool': ...
    def set_prefer_native_menu(self, enabled: 'bool') -> None: ...
    def is_prefer_native_menu(self) -> 'bool': ...
    def is_native_menu(self) -> 'bool': ...
    def add_item(self, label: 'str', id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_icon_item(self, texture: 'Texture2D', label: 'str', id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_check_item(self, label: 'str', id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_icon_check_item(self, texture: 'Texture2D', label: 'str', id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_radio_check_item(self, label: 'str', id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_icon_radio_check_item(self, texture: 'Texture2D', label: 'str', id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_multistate_item(self, label: 'str', max_states: 'int', default_state: 'int' = 0, id: 'int' = -1, accel: 'Key' = 0) -> None: ...
    def add_shortcut(self, shortcut: 'Shortcut', id: 'int' = -1, global_: 'bool' = False, allow_echo: 'bool' = False) -> None: ...
    def add_icon_shortcut(self, texture: 'Texture2D', shortcut: 'Shortcut', id: 'int' = -1, global_: 'bool' = False, allow_echo: 'bool' = False) -> None: ...
    def add_check_shortcut(self, shortcut: 'Shortcut', id: 'int' = -1, global_: 'bool' = False) -> None: ...
    def add_icon_check_shortcut(self, texture: 'Texture2D', shortcut: 'Shortcut', id: 'int' = -1, global_: 'bool' = False) -> None: ...
    def add_radio_check_shortcut(self, shortcut: 'Shortcut', id: 'int' = -1, global_: 'bool' = False) -> None: ...
    def add_icon_radio_check_shortcut(self, texture: 'Texture2D', shortcut: 'Shortcut', id: 'int' = -1, global_: 'bool' = False) -> None: ...
    def add_submenu_item(self, label: 'str', submenu: 'str', id: 'int' = -1) -> None: ...
    def add_submenu_node_item(self, label: 'str', submenu: 'PopupMenu', id: 'int' = -1) -> None: ...
    def set_item_text(self, index: 'int', text: 'str') -> None: ...
    def set_item_text_direction(self, index: 'int', direction: 'Control__TextDirection') -> None: ...
    def set_item_language(self, index: 'int', language: 'str') -> None: ...
    def set_item_icon(self, index: 'int', icon: 'Texture2D') -> None: ...
    def set_item_icon_max_width(self, index: 'int', width: 'int') -> None: ...
    def set_item_icon_modulate(self, index: 'int', modulate: 'Color') -> None: ...
    def set_item_checked(self, index: 'int', checked: 'bool') -> None: ...
    def set_item_id(self, index: 'int', id: 'int') -> None: ...
    def set_item_accelerator(self, index: 'int', accel: 'Key') -> None: ...
    def set_item_metadata(self, index: 'int', metadata: 'Variant') -> None: ...
    def set_item_disabled(self, index: 'int', disabled: 'bool') -> None: ...
    def set_item_submenu(self, index: 'int', submenu: 'str') -> None: ...
    def set_item_submenu_node(self, index: 'int', submenu: 'PopupMenu') -> None: ...
    def set_item_as_separator(self, index: 'int', enable: 'bool') -> None: ...
    def set_item_as_checkable(self, index: 'int', enable: 'bool') -> None: ...
    def set_item_as_radio_checkable(self, index: 'int', enable: 'bool') -> None: ...
    def set_item_tooltip(self, index: 'int', tooltip: 'str') -> None: ...
    def set_item_shortcut(self, index: 'int', shortcut: 'Shortcut', global_: 'bool' = False) -> None: ...
    def set_item_indent(self, index: 'int', indent: 'int') -> None: ...
    def set_item_multistate(self, index: 'int', state: 'int') -> None: ...
    def set_item_multistate_max(self, index: 'int', max_states: 'int') -> None: ...
    def set_item_shortcut_disabled(self, index: 'int', disabled: 'bool') -> None: ...
    def toggle_item_checked(self, index: 'int') -> None: ...
    def toggle_item_multistate(self, index: 'int') -> None: ...
    def get_item_text(self, index: 'int') -> 'str': ...
    def get_item_text_direction(self, index: 'int') -> 'Control__TextDirection': ...
    def get_item_language(self, index: 'int') -> 'str': ...
    def get_item_icon(self, index: 'int') -> 'Texture2D': ...
    def get_item_icon_max_width(self, index: 'int') -> 'int': ...
    def get_item_icon_modulate(self, index: 'int') -> 'Color': ...
    def is_item_checked(self, index: 'int') -> 'bool': ...
    def get_item_id(self, index: 'int') -> 'int': ...
    def get_item_index(self, id: 'int') -> 'int': ...
    def get_item_accelerator(self, index: 'int') -> 'Key': ...
    def get_item_metadata(self, index: 'int') -> 'Variant': ...
    def is_item_disabled(self, index: 'int') -> 'bool': ...
    def get_item_submenu(self, index: 'int') -> 'str': ...
    def get_item_submenu_node(self, index: 'int') -> 'PopupMenu': ...
    def is_item_separator(self, index: 'int') -> 'bool': ...
    def is_item_checkable(self, index: 'int') -> 'bool': ...
    def is_item_radio_checkable(self, index: 'int') -> 'bool': ...
    def is_item_shortcut_disabled(self, index: 'int') -> 'bool': ...
    def get_item_tooltip(self, index: 'int') -> 'str': ...
    def get_item_shortcut(self, index: 'int') -> 'Shortcut': ...
    def get_item_indent(self, index: 'int') -> 'int': ...
    def get_item_multistate_max(self, index: 'int') -> 'int': ...
    def get_item_multistate(self, index: 'int') -> 'int': ...
    def set_focused_item(self, index: 'int') -> None: ...
    def get_focused_item(self) -> 'int': ...
    def set_item_count(self, count: 'int') -> None: ...
    def get_item_count(self) -> 'int': ...
    def scroll_to_item(self, index: 'int') -> None: ...
    def remove_item(self, index: 'int') -> None: ...
    def add_separator(self, label: 'str' = "", id: 'int' = -1) -> None: ...
    def clear(self, free_submenus: 'bool' = False) -> None: ...
    def set_hide_on_item_selection(self, enable: 'bool') -> None: ...
    def is_hide_on_item_selection(self) -> 'bool': ...
    def set_hide_on_checkable_item_selection(self, enable: 'bool') -> None: ...
    def is_hide_on_checkable_item_selection(self) -> 'bool': ...
    def set_hide_on_state_item_selection(self, enable: 'bool') -> None: ...
    def is_hide_on_state_item_selection(self) -> 'bool': ...
    def set_submenu_popup_delay(self, seconds: 'float') -> None: ...
    def get_submenu_popup_delay(self) -> 'float': ...
    def set_allow_search(self, allow: 'bool') -> None: ...
    def get_allow_search(self) -> 'bool': ...
    def is_system_menu(self) -> 'bool': ...
    def set_system_menu(self, system_menu_id: 'NativeMenu__SystemMenus') -> None: ...
    def get_system_menu(self) -> 'NativeMenu__SystemMenus': ...


class PopupPanel(Popup): ...


class PortableCompressedTexture2D(Texture2D):


    size_override: 'Vector2'
    keep_compressed_buffer: 'bool'

    def create_from_image(self, image: 'Image', compression_mode: 'PortableCompressedTexture2D__CompressionMode', normal_map: 'bool' = False, lossy_quality: 'float' = 0.8) -> None: ...
    def get_format(self) -> 'Image__Format': ...
    def get_compression_mode(self) -> 'PortableCompressedTexture2D__CompressionMode': ...
    def set_size_override(self, size: 'Vector2') -> None: ...
    def get_size_override(self) -> 'Vector2': ...
    def set_keep_compressed_buffer(self, keep: 'bool') -> None: ...
    def is_keeping_compressed_buffer(self) -> 'bool': ...
    @staticmethod
    def set_keep_all_compressed_buffers(keep: 'bool') -> None: ...
    @staticmethod
    def is_keeping_all_compressed_buffers() -> 'bool': ...


class PrimitiveMesh(Mesh):


    material: 'BaseMaterial3D' | 'ShaderMaterial'
    custom_aabb: 'AABB'
    flip_faces: 'bool'
    add_uv2: 'bool'
    uv2_padding: 'float'

    def _create_mesh_array(self) -> 'Array': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def get_mesh_arrays(self) -> 'Array': ...
    def set_custom_aabb(self, aabb: 'AABB') -> None: ...
    def get_custom_aabb(self) -> 'AABB': ...
    def set_flip_faces(self, flip_faces: 'bool') -> None: ...
    def get_flip_faces(self) -> 'bool': ...
    def set_add_uv2(self, add_uv2: 'bool') -> None: ...
    def get_add_uv2(self) -> 'bool': ...
    def set_uv2_padding(self, uv2_padding: 'float') -> None: ...
    def get_uv2_padding(self) -> 'float': ...
    def request_update(self) -> None: ...


class PrismMesh(PrimitiveMesh):


    left_to_right: 'float'
    size: 'Vector3'
    subdivide_width: 'int'
    subdivide_height: 'int'
    subdivide_depth: 'int'

    def set_left_to_right(self, left_to_right: 'float') -> None: ...
    def get_left_to_right(self) -> 'float': ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_subdivide_width(self, segments: 'int') -> None: ...
    def get_subdivide_width(self) -> 'int': ...
    def set_subdivide_height(self, segments: 'int') -> None: ...
    def get_subdivide_height(self) -> 'int': ...
    def set_subdivide_depth(self, segments: 'int') -> None: ...
    def get_subdivide_depth(self) -> 'int': ...


class ProceduralSkyMaterial(Material):


    sky_top_color: 'Color'
    sky_horizon_color: 'Color'
    sky_curve: 'float'
    sky_energy_multiplier: 'float'
    sky_cover: 'Texture2D'
    sky_cover_modulate: 'Color'
    ground_bottom_color: 'Color'
    ground_horizon_color: 'Color'
    ground_curve: 'float'
    ground_energy_multiplier: 'float'
    sun_angle_max: 'float'
    sun_curve: 'float'
    use_debanding: 'bool'
    energy_multiplier: 'float'

    def set_sky_top_color(self, color: 'Color') -> None: ...
    def get_sky_top_color(self) -> 'Color': ...
    def set_sky_horizon_color(self, color: 'Color') -> None: ...
    def get_sky_horizon_color(self) -> 'Color': ...
    def set_sky_curve(self, curve: 'float') -> None: ...
    def get_sky_curve(self) -> 'float': ...
    def set_sky_energy_multiplier(self, multiplier: 'float') -> None: ...
    def get_sky_energy_multiplier(self) -> 'float': ...
    def set_sky_cover(self, sky_cover: 'Texture2D') -> None: ...
    def get_sky_cover(self) -> 'Texture2D': ...
    def set_sky_cover_modulate(self, color: 'Color') -> None: ...
    def get_sky_cover_modulate(self) -> 'Color': ...
    def set_ground_bottom_color(self, color: 'Color') -> None: ...
    def get_ground_bottom_color(self) -> 'Color': ...
    def set_ground_horizon_color(self, color: 'Color') -> None: ...
    def get_ground_horizon_color(self) -> 'Color': ...
    def set_ground_curve(self, curve: 'float') -> None: ...
    def get_ground_curve(self) -> 'float': ...
    def set_ground_energy_multiplier(self, energy: 'float') -> None: ...
    def get_ground_energy_multiplier(self) -> 'float': ...
    def set_sun_angle_max(self, degrees: 'float') -> None: ...
    def get_sun_angle_max(self) -> 'float': ...
    def set_sun_curve(self, curve: 'float') -> None: ...
    def get_sun_curve(self) -> 'float': ...
    def set_use_debanding(self, use_debanding: 'bool') -> None: ...
    def get_use_debanding(self) -> 'bool': ...
    def set_energy_multiplier(self, multiplier: 'float') -> None: ...
    def get_energy_multiplier(self) -> 'float': ...


class ProgressBar(Range):


    fill_mode: 'int'
    show_percentage: 'bool'
    indeterminate: 'bool'
    editor_preview_indeterminate: 'bool'

    def set_fill_mode(self, mode: 'int') -> None: ...
    def get_fill_mode(self) -> 'int': ...
    def set_show_percentage(self, visible: 'bool') -> None: ...
    def is_percentage_shown(self) -> 'bool': ...
    def set_indeterminate(self, indeterminate: 'bool') -> None: ...
    def is_indeterminate(self) -> 'bool': ...
    def set_editor_preview_indeterminate(self, preview_indeterminate: 'bool') -> None: ...
    def is_editor_preview_indeterminate_enabled(self) -> 'bool': ...


class ProjectSettings(Object):


    settings_changed: 'Signal[Callable[[], None]]'  # settings_changed()

    def has_setting(self, name: 'str') -> 'bool': ...
    def set_setting(self, name: 'str', value: 'Variant') -> None: ...
    def get_setting(self, name: 'str', default_value: 'Variant' = default('''null''')) -> 'Variant': ...
    def get_setting_with_override(self, name: 'StringName') -> 'Variant': ...
    def get_global_class_list(self) -> 'Array'['Dictionary']: ...
    def set_order(self, name: 'str', position: 'int') -> None: ...
    def get_order(self, name: 'str') -> 'int': ...
    def set_initial_value(self, name: 'str', value: 'Variant') -> None: ...
    def set_as_basic(self, name: 'str', basic: 'bool') -> None: ...
    def set_as_internal(self, name: 'str', internal: 'bool') -> None: ...
    def add_property_info(self, hint: 'Dictionary') -> None: ...
    def set_restart_if_changed(self, name: 'str', restart: 'bool') -> None: ...
    def clear(self, name: 'str') -> None: ...
    def localize_path(self, path: 'str') -> 'str': ...
    def globalize_path(self, path: 'str') -> 'str': ...
    def save(self) -> 'Error': ...
    def load_resource_pack(self, pack: 'str', replace_files: 'bool' = True, offset: 'int' = 0) -> 'bool': ...
    def save_custom(self, file: 'str') -> 'Error': ...


class PropertyTweener(Tweener):



    def from_(self, value: 'Variant') -> 'PropertyTweener': ...
    def from_current(self) -> 'PropertyTweener': ...
    def as_relative(self) -> 'PropertyTweener': ...
    def set_trans(self, trans: 'Tween__TransitionType') -> 'PropertyTweener': ...
    def set_ease(self, ease: 'Tween__EaseType') -> 'PropertyTweener': ...
    def set_custom_interpolator(self, interpolator_method: 'Callable') -> 'PropertyTweener': ...
    def set_delay(self, delay: 'float') -> 'PropertyTweener': ...


class QuadMesh(PlaneMesh): ...


class QuadOccluder3D(Occluder3D):


    size: 'Vector2'

    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...


class RDAttachmentFormat(RefCounted):


    format: 'int'
    samples: 'int'
    usage_flags: 'int'

    def set_format(self, p_member: 'RenderingDevice__DataFormat') -> None: ...
    def get_format(self) -> 'RenderingDevice__DataFormat': ...
    def set_samples(self, p_member: 'RenderingDevice__TextureSamples') -> None: ...
    def get_samples(self) -> 'RenderingDevice__TextureSamples': ...
    def set_usage_flags(self, p_member: 'int') -> None: ...
    def get_usage_flags(self) -> 'int': ...


class RDFramebufferPass(RefCounted):


    color_attachments: 'PackedInt32Array'
    input_attachments: 'PackedInt32Array'
    resolve_attachments: 'PackedInt32Array'
    preserve_attachments: 'PackedInt32Array'
    depth_attachment: 'int'
    ATTACHMENT_UNUSED: 'int' = -1

    def set_color_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_color_attachments(self) -> 'PackedInt32Array': ...
    def set_input_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_input_attachments(self) -> 'PackedInt32Array': ...
    def set_resolve_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_resolve_attachments(self) -> 'PackedInt32Array': ...
    def set_preserve_attachments(self, p_member: 'PackedInt32Array') -> None: ...
    def get_preserve_attachments(self) -> 'PackedInt32Array': ...
    def set_depth_attachment(self, p_member: 'int') -> None: ...
    def get_depth_attachment(self) -> 'int': ...


class RDPipelineColorBlendState(RefCounted):


    enable_logic_op: 'bool'
    logic_op: 'int'
    blend_constant: 'Color'
    attachments: 'Array'['RDPipelineColorBlendStateAttachment']

    def set_enable_logic_op(self, p_member: 'bool') -> None: ...
    def get_enable_logic_op(self) -> 'bool': ...
    def set_logic_op(self, p_member: 'RenderingDevice__LogicOperation') -> None: ...
    def get_logic_op(self) -> 'RenderingDevice__LogicOperation': ...
    def set_blend_constant(self, p_member: 'Color') -> None: ...
    def get_blend_constant(self) -> 'Color': ...
    def set_attachments(self, attachments: 'Array'['RDPipelineColorBlendStateAttachment']) -> None: ...
    def get_attachments(self) -> 'Array'['RDPipelineColorBlendStateAttachment']: ...


class RDPipelineColorBlendStateAttachment(RefCounted):


    enable_blend: 'bool'
    src_color_blend_factor: 'int'
    dst_color_blend_factor: 'int'
    color_blend_op: 'int'
    src_alpha_blend_factor: 'int'
    dst_alpha_blend_factor: 'int'
    alpha_blend_op: 'int'
    write_r: 'bool'
    write_g: 'bool'
    write_b: 'bool'
    write_a: 'bool'

    def set_as_mix(self) -> None: ...
    def set_enable_blend(self, p_member: 'bool') -> None: ...
    def get_enable_blend(self) -> 'bool': ...
    def set_src_color_blend_factor(self, p_member: 'RenderingDevice__BlendFactor') -> None: ...
    def get_src_color_blend_factor(self) -> 'RenderingDevice__BlendFactor': ...
    def set_dst_color_blend_factor(self, p_member: 'RenderingDevice__BlendFactor') -> None: ...
    def get_dst_color_blend_factor(self) -> 'RenderingDevice__BlendFactor': ...
    def set_color_blend_op(self, p_member: 'RenderingDevice__BlendOperation') -> None: ...
    def get_color_blend_op(self) -> 'RenderingDevice__BlendOperation': ...
    def set_src_alpha_blend_factor(self, p_member: 'RenderingDevice__BlendFactor') -> None: ...
    def get_src_alpha_blend_factor(self) -> 'RenderingDevice__BlendFactor': ...
    def set_dst_alpha_blend_factor(self, p_member: 'RenderingDevice__BlendFactor') -> None: ...
    def get_dst_alpha_blend_factor(self) -> 'RenderingDevice__BlendFactor': ...
    def set_alpha_blend_op(self, p_member: 'RenderingDevice__BlendOperation') -> None: ...
    def get_alpha_blend_op(self) -> 'RenderingDevice__BlendOperation': ...
    def set_write_r(self, p_member: 'bool') -> None: ...
    def get_write_r(self) -> 'bool': ...
    def set_write_g(self, p_member: 'bool') -> None: ...
    def get_write_g(self) -> 'bool': ...
    def set_write_b(self, p_member: 'bool') -> None: ...
    def get_write_b(self) -> 'bool': ...
    def set_write_a(self, p_member: 'bool') -> None: ...
    def get_write_a(self) -> 'bool': ...


class RDPipelineDepthStencilState(RefCounted):


    enable_depth_test: 'bool'
    enable_depth_write: 'bool'
    depth_compare_operator: 'int'
    enable_depth_range: 'bool'
    depth_range_min: 'float'
    depth_range_max: 'float'
    enable_stencil: 'bool'
    front_op_fail: 'int'
    front_op_pass: 'int'
    front_op_depth_fail: 'int'
    front_op_compare: 'int'
    front_op_compare_mask: 'int'
    front_op_write_mask: 'int'
    front_op_reference: 'int'
    back_op_fail: 'int'
    back_op_pass: 'int'
    back_op_depth_fail: 'int'
    back_op_compare: 'int'
    back_op_compare_mask: 'int'
    back_op_write_mask: 'int'
    back_op_reference: 'int'

    def set_enable_depth_test(self, p_member: 'bool') -> None: ...
    def get_enable_depth_test(self) -> 'bool': ...
    def set_enable_depth_write(self, p_member: 'bool') -> None: ...
    def get_enable_depth_write(self) -> 'bool': ...
    def set_depth_compare_operator(self, p_member: 'RenderingDevice__CompareOperator') -> None: ...
    def get_depth_compare_operator(self) -> 'RenderingDevice__CompareOperator': ...
    def set_enable_depth_range(self, p_member: 'bool') -> None: ...
    def get_enable_depth_range(self) -> 'bool': ...
    def set_depth_range_min(self, p_member: 'float') -> None: ...
    def get_depth_range_min(self) -> 'float': ...
    def set_depth_range_max(self, p_member: 'float') -> None: ...
    def get_depth_range_max(self) -> 'float': ...
    def set_enable_stencil(self, p_member: 'bool') -> None: ...
    def get_enable_stencil(self) -> 'bool': ...
    def set_front_op_fail(self, p_member: 'RenderingDevice__StencilOperation') -> None: ...
    def get_front_op_fail(self) -> 'RenderingDevice__StencilOperation': ...
    def set_front_op_pass(self, p_member: 'RenderingDevice__StencilOperation') -> None: ...
    def get_front_op_pass(self) -> 'RenderingDevice__StencilOperation': ...
    def set_front_op_depth_fail(self, p_member: 'RenderingDevice__StencilOperation') -> None: ...
    def get_front_op_depth_fail(self) -> 'RenderingDevice__StencilOperation': ...
    def set_front_op_compare(self, p_member: 'RenderingDevice__CompareOperator') -> None: ...
    def get_front_op_compare(self) -> 'RenderingDevice__CompareOperator': ...
    def set_front_op_compare_mask(self, p_member: 'int') -> None: ...
    def get_front_op_compare_mask(self) -> 'int': ...
    def set_front_op_write_mask(self, p_member: 'int') -> None: ...
    def get_front_op_write_mask(self) -> 'int': ...
    def set_front_op_reference(self, p_member: 'int') -> None: ...
    def get_front_op_reference(self) -> 'int': ...
    def set_back_op_fail(self, p_member: 'RenderingDevice__StencilOperation') -> None: ...
    def get_back_op_fail(self) -> 'RenderingDevice__StencilOperation': ...
    def set_back_op_pass(self, p_member: 'RenderingDevice__StencilOperation') -> None: ...
    def get_back_op_pass(self) -> 'RenderingDevice__StencilOperation': ...
    def set_back_op_depth_fail(self, p_member: 'RenderingDevice__StencilOperation') -> None: ...
    def get_back_op_depth_fail(self) -> 'RenderingDevice__StencilOperation': ...
    def set_back_op_compare(self, p_member: 'RenderingDevice__CompareOperator') -> None: ...
    def get_back_op_compare(self) -> 'RenderingDevice__CompareOperator': ...
    def set_back_op_compare_mask(self, p_member: 'int') -> None: ...
    def get_back_op_compare_mask(self) -> 'int': ...
    def set_back_op_write_mask(self, p_member: 'int') -> None: ...
    def get_back_op_write_mask(self) -> 'int': ...
    def set_back_op_reference(self, p_member: 'int') -> None: ...
    def get_back_op_reference(self) -> 'int': ...


class RDPipelineMultisampleState(RefCounted):


    sample_count: 'int'
    enable_sample_shading: 'bool'
    min_sample_shading: 'float'
    enable_alpha_to_coverage: 'bool'
    enable_alpha_to_one: 'bool'
    sample_masks: 'Array'['int']

    def set_sample_count(self, p_member: 'RenderingDevice__TextureSamples') -> None: ...
    def get_sample_count(self) -> 'RenderingDevice__TextureSamples': ...
    def set_enable_sample_shading(self, p_member: 'bool') -> None: ...
    def get_enable_sample_shading(self) -> 'bool': ...
    def set_min_sample_shading(self, p_member: 'float') -> None: ...
    def get_min_sample_shading(self) -> 'float': ...
    def set_enable_alpha_to_coverage(self, p_member: 'bool') -> None: ...
    def get_enable_alpha_to_coverage(self) -> 'bool': ...
    def set_enable_alpha_to_one(self, p_member: 'bool') -> None: ...
    def get_enable_alpha_to_one(self) -> 'bool': ...
    def set_sample_masks(self, masks: 'Array'['int']) -> None: ...
    def get_sample_masks(self) -> 'Array'['int']: ...


class RDPipelineRasterizationState(RefCounted):


    enable_depth_clamp: 'bool'
    discard_primitives: 'bool'
    wireframe: 'bool'
    cull_mode: 'int'
    front_face: 'int'
    depth_bias_enabled: 'bool'
    depth_bias_constant_factor: 'float'
    depth_bias_clamp: 'float'
    depth_bias_slope_factor: 'float'
    line_width: 'float'
    patch_control_points: 'int'

    def set_enable_depth_clamp(self, p_member: 'bool') -> None: ...
    def get_enable_depth_clamp(self) -> 'bool': ...
    def set_discard_primitives(self, p_member: 'bool') -> None: ...
    def get_discard_primitives(self) -> 'bool': ...
    def set_wireframe(self, p_member: 'bool') -> None: ...
    def get_wireframe(self) -> 'bool': ...
    def set_cull_mode(self, p_member: 'RenderingDevice__PolygonCullMode') -> None: ...
    def get_cull_mode(self) -> 'RenderingDevice__PolygonCullMode': ...
    def set_front_face(self, p_member: 'RenderingDevice__PolygonFrontFace') -> None: ...
    def get_front_face(self) -> 'RenderingDevice__PolygonFrontFace': ...
    def set_depth_bias_enabled(self, p_member: 'bool') -> None: ...
    def get_depth_bias_enabled(self) -> 'bool': ...
    def set_depth_bias_constant_factor(self, p_member: 'float') -> None: ...
    def get_depth_bias_constant_factor(self) -> 'float': ...
    def set_depth_bias_clamp(self, p_member: 'float') -> None: ...
    def get_depth_bias_clamp(self) -> 'float': ...
    def set_depth_bias_slope_factor(self, p_member: 'float') -> None: ...
    def get_depth_bias_slope_factor(self) -> 'float': ...
    def set_line_width(self, p_member: 'float') -> None: ...
    def get_line_width(self) -> 'float': ...
    def set_patch_control_points(self, p_member: 'int') -> None: ...
    def get_patch_control_points(self) -> 'int': ...


class RDPipelineSpecializationConstant(RefCounted):


    value: 'Variant'
    constant_id: 'int'

    def set_value(self, value: 'Variant') -> None: ...
    def get_value(self) -> 'Variant': ...
    def set_constant_id(self, constant_id: 'int') -> None: ...
    def get_constant_id(self) -> 'int': ...


class RDSamplerState(RefCounted):


    mag_filter: 'int'
    min_filter: 'int'
    mip_filter: 'int'
    repeat_u: 'int'
    repeat_v: 'int'
    repeat_w: 'int'
    lod_bias: 'float'
    use_anisotropy: 'bool'
    anisotropy_max: 'float'
    enable_compare: 'bool'
    compare_op: 'int'
    min_lod: 'float'
    max_lod: 'float'
    border_color: 'int'
    unnormalized_uvw: 'bool'

    def set_mag_filter(self, p_member: 'RenderingDevice__SamplerFilter') -> None: ...
    def get_mag_filter(self) -> 'RenderingDevice__SamplerFilter': ...
    def set_min_filter(self, p_member: 'RenderingDevice__SamplerFilter') -> None: ...
    def get_min_filter(self) -> 'RenderingDevice__SamplerFilter': ...
    def set_mip_filter(self, p_member: 'RenderingDevice__SamplerFilter') -> None: ...
    def get_mip_filter(self) -> 'RenderingDevice__SamplerFilter': ...
    def set_repeat_u(self, p_member: 'RenderingDevice__SamplerRepeatMode') -> None: ...
    def get_repeat_u(self) -> 'RenderingDevice__SamplerRepeatMode': ...
    def set_repeat_v(self, p_member: 'RenderingDevice__SamplerRepeatMode') -> None: ...
    def get_repeat_v(self) -> 'RenderingDevice__SamplerRepeatMode': ...
    def set_repeat_w(self, p_member: 'RenderingDevice__SamplerRepeatMode') -> None: ...
    def get_repeat_w(self) -> 'RenderingDevice__SamplerRepeatMode': ...
    def set_lod_bias(self, p_member: 'float') -> None: ...
    def get_lod_bias(self) -> 'float': ...
    def set_use_anisotropy(self, p_member: 'bool') -> None: ...
    def get_use_anisotropy(self) -> 'bool': ...
    def set_anisotropy_max(self, p_member: 'float') -> None: ...
    def get_anisotropy_max(self) -> 'float': ...
    def set_enable_compare(self, p_member: 'bool') -> None: ...
    def get_enable_compare(self) -> 'bool': ...
    def set_compare_op(self, p_member: 'RenderingDevice__CompareOperator') -> None: ...
    def get_compare_op(self) -> 'RenderingDevice__CompareOperator': ...
    def set_min_lod(self, p_member: 'float') -> None: ...
    def get_min_lod(self) -> 'float': ...
    def set_max_lod(self, p_member: 'float') -> None: ...
    def get_max_lod(self) -> 'float': ...
    def set_border_color(self, p_member: 'RenderingDevice__SamplerBorderColor') -> None: ...
    def get_border_color(self) -> 'RenderingDevice__SamplerBorderColor': ...
    def set_unnormalized_uvw(self, p_member: 'bool') -> None: ...
    def get_unnormalized_uvw(self) -> 'bool': ...


class RDShaderFile(Resource):


    base_error: 'str'

    def set_bytecode(self, bytecode: 'RDShaderSPIRV', version: 'StringName' = default('''&""''')) -> None: ...
    def get_spirv(self, version: 'StringName' = default('''&""''')) -> 'RDShaderSPIRV': ...
    def get_version_list(self) -> 'Array'['StringName']: ...
    def set_base_error(self, error: 'str') -> None: ...
    def get_base_error(self) -> 'str': ...


class RDShaderSPIRV(Resource):


    bytecode_vertex: 'PackedByteArray'
    bytecode_fragment: 'PackedByteArray'
    bytecode_tesselation_control: 'PackedByteArray'
    bytecode_tesselation_evaluation: 'PackedByteArray'
    bytecode_compute: 'PackedByteArray'
    compile_error_vertex: 'str'
    compile_error_fragment: 'str'
    compile_error_tesselation_control: 'str'
    compile_error_tesselation_evaluation: 'str'
    compile_error_compute: 'str'

    def set_stage_bytecode(self, stage: 'RenderingDevice__ShaderStage', bytecode: 'PackedByteArray') -> None: ...
    def get_stage_bytecode(self, stage: 'RenderingDevice__ShaderStage') -> 'PackedByteArray': ...
    def set_stage_compile_error(self, stage: 'RenderingDevice__ShaderStage', compile_error: 'str') -> None: ...
    def get_stage_compile_error(self, stage: 'RenderingDevice__ShaderStage') -> 'str': ...


class RDShaderSource(RefCounted):


    source_vertex: 'str'
    source_fragment: 'str'
    source_tesselation_control: 'str'
    source_tesselation_evaluation: 'str'
    source_compute: 'str'
    language: 'int'

    def set_stage_source(self, stage: 'RenderingDevice__ShaderStage', source: 'str') -> None: ...
    def get_stage_source(self, stage: 'RenderingDevice__ShaderStage') -> 'str': ...
    def set_language(self, language: 'RenderingDevice__ShaderLanguage') -> None: ...
    def get_language(self) -> 'RenderingDevice__ShaderLanguage': ...


class RDTextureFormat(RefCounted):


    format: 'int'
    width: 'int'
    height: 'int'
    depth: 'int'
    array_layers: 'int'
    mipmaps: 'int'
    texture_type: 'int'
    samples: 'int'
    usage_bits: 'int'
    is_resolve_buffer: 'bool'
    is_discardable: 'bool'

    def set_format(self, p_member: 'RenderingDevice__DataFormat') -> None: ...
    def get_format(self) -> 'RenderingDevice__DataFormat': ...
    def set_width(self, p_member: 'int') -> None: ...
    def get_width(self) -> 'int': ...
    def set_height(self, p_member: 'int') -> None: ...
    def get_height(self) -> 'int': ...
    def set_depth(self, p_member: 'int') -> None: ...
    def get_depth(self) -> 'int': ...
    def set_array_layers(self, p_member: 'int') -> None: ...
    def get_array_layers(self) -> 'int': ...
    def set_mipmaps(self, p_member: 'int') -> None: ...
    def get_mipmaps(self) -> 'int': ...
    def set_texture_type(self, p_member: 'RenderingDevice__TextureType') -> None: ...
    def get_texture_type(self) -> 'RenderingDevice__TextureType': ...
    def set_samples(self, p_member: 'RenderingDevice__TextureSamples') -> None: ...
    def get_samples(self) -> 'RenderingDevice__TextureSamples': ...
    def set_usage_bits(self, p_member: 'RenderingDevice__TextureUsageBits') -> None: ...
    def get_usage_bits(self) -> 'RenderingDevice__TextureUsageBits': ...
    def set_is_resolve_buffer(self, p_member: 'bool') -> None: ...
    def get_is_resolve_buffer(self) -> 'bool': ...
    def set_is_discardable(self, p_member: 'bool') -> None: ...
    def get_is_discardable(self) -> 'bool': ...
    def add_shareable_format(self, format: 'RenderingDevice__DataFormat') -> None: ...
    def remove_shareable_format(self, format: 'RenderingDevice__DataFormat') -> None: ...


class RDTextureView(RefCounted):


    format_override: 'int'
    swizzle_r: 'int'
    swizzle_g: 'int'
    swizzle_b: 'int'
    swizzle_a: 'int'

    def set_format_override(self, p_member: 'RenderingDevice__DataFormat') -> None: ...
    def get_format_override(self) -> 'RenderingDevice__DataFormat': ...
    def set_swizzle_r(self, p_member: 'RenderingDevice__TextureSwizzle') -> None: ...
    def get_swizzle_r(self) -> 'RenderingDevice__TextureSwizzle': ...
    def set_swizzle_g(self, p_member: 'RenderingDevice__TextureSwizzle') -> None: ...
    def get_swizzle_g(self) -> 'RenderingDevice__TextureSwizzle': ...
    def set_swizzle_b(self, p_member: 'RenderingDevice__TextureSwizzle') -> None: ...
    def get_swizzle_b(self) -> 'RenderingDevice__TextureSwizzle': ...
    def set_swizzle_a(self, p_member: 'RenderingDevice__TextureSwizzle') -> None: ...
    def get_swizzle_a(self) -> 'RenderingDevice__TextureSwizzle': ...


class RDUniform(RefCounted):


    uniform_type: 'int'
    binding: 'int'

    def set_uniform_type(self, p_member: 'RenderingDevice__UniformType') -> None: ...
    def get_uniform_type(self) -> 'RenderingDevice__UniformType': ...
    def set_binding(self, p_member: 'int') -> None: ...
    def get_binding(self) -> 'int': ...
    def add_id(self, id: 'RID') -> None: ...
    def clear_ids(self) -> None: ...
    def get_ids(self) -> 'Array'['RID']: ...


class RDVertexAttribute(RefCounted):


    location: 'int'
    offset: 'int'
    format: 'int'
    stride: 'int'
    frequency: 'int'

    def set_location(self, p_member: 'int') -> None: ...
    def get_location(self) -> 'int': ...
    def set_offset(self, p_member: 'int') -> None: ...
    def get_offset(self) -> 'int': ...
    def set_format(self, p_member: 'RenderingDevice__DataFormat') -> None: ...
    def get_format(self) -> 'RenderingDevice__DataFormat': ...
    def set_stride(self, p_member: 'int') -> None: ...
    def get_stride(self) -> 'int': ...
    def set_frequency(self, p_member: 'RenderingDevice__VertexFrequency') -> None: ...
    def get_frequency(self) -> 'RenderingDevice__VertexFrequency': ...


class RandomNumberGenerator(RefCounted):


    seed: 'int'
    state: 'int'

    def set_seed(self, seed: 'int') -> None: ...
    def get_seed(self) -> 'int': ...
    def set_state(self, state: 'int') -> None: ...
    def get_state(self) -> 'int': ...
    def randi(self) -> 'int': ...
    def randf(self) -> 'float': ...
    def randfn(self, mean: 'float' = 0.0, deviation: 'float' = 1.0) -> 'float': ...
    def randf_range(self, from_: 'float', to: 'float') -> 'float': ...
    def randi_range(self, from_: 'int', to: 'int') -> 'int': ...
    def rand_weighted(self, weights: 'PackedFloat32Array') -> 'int': ...
    def randomize(self) -> None: ...


class Range(Control):


    min_value: 'float'
    max_value: 'float'
    step: 'float'
    page: 'float'
    value: 'float'
    ratio: 'float'
    exp_edit: 'bool'
    rounded: 'bool'
    allow_greater: 'bool'
    allow_lesser: 'bool'
    value_changed: 'Signal[Callable[[float], None]]'  # value_changed(value: float)
    changed: 'Signal[Callable[[], None]]'  # changed()

    def _value_changed(self, new_value: 'float') -> None: ...
    def get_value(self) -> 'float': ...
    def get_min(self) -> 'float': ...
    def get_max(self) -> 'float': ...
    def get_step(self) -> 'float': ...
    def get_page(self) -> 'float': ...
    def get_as_ratio(self) -> 'float': ...
    def set_value(self, value: 'float') -> None: ...
    def set_value_no_signal(self, value: 'float') -> None: ...
    def set_min(self, minimum: 'float') -> None: ...
    def set_max(self, maximum: 'float') -> None: ...
    def set_step(self, step: 'float') -> None: ...
    def set_page(self, pagesize: 'float') -> None: ...
    def set_as_ratio(self, value: 'float') -> None: ...
    def set_use_rounded_values(self, enabled: 'bool') -> None: ...
    def is_using_rounded_values(self) -> 'bool': ...
    def set_exp_ratio(self, enabled: 'bool') -> None: ...
    def is_ratio_exp(self) -> 'bool': ...
    def set_allow_greater(self, allow: 'bool') -> None: ...
    def is_greater_allowed(self) -> 'bool': ...
    def set_allow_lesser(self, allow: 'bool') -> None: ...
    def is_lesser_allowed(self) -> 'bool': ...
    def share(self, with_: 'Node') -> None: ...
    def unshare(self) -> None: ...


class RayCast2D(Node2D):


    enabled: 'bool'
    exclude_parent: 'bool'
    target_position: 'Vector2'
    collision_mask: 'int'
    hit_from_inside: 'bool'
    collide_with_areas: 'bool'
    collide_with_bodies: 'bool'

    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_target_position(self, local_point: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def is_colliding(self) -> 'bool': ...
    def force_raycast_update(self) -> None: ...
    def get_collider(self) -> 'Object': ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider_shape(self) -> 'int': ...
    def get_collision_point(self) -> 'Vector2': ...
    def get_collision_normal(self) -> 'Vector2': ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject2D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject2D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_exclude_parent_body(self, mask: 'bool') -> None: ...
    def get_exclude_parent_body(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_hit_from_inside(self, enable: 'bool') -> None: ...
    def is_hit_from_inside_enabled(self) -> 'bool': ...


class RayCast3D(Node3D):


    enabled: 'bool'
    exclude_parent: 'bool'
    target_position: 'Vector3'
    collision_mask: 'int'
    hit_from_inside: 'bool'
    hit_back_faces: 'bool'
    collide_with_areas: 'bool'
    collide_with_bodies: 'bool'
    debug_shape_custom_color: 'Color'
    debug_shape_thickness: 'int'

    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_target_position(self, local_point: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def is_colliding(self) -> 'bool': ...
    def force_raycast_update(self) -> None: ...
    def get_collider(self) -> 'Object': ...
    def get_collider_rid(self) -> 'RID': ...
    def get_collider_shape(self) -> 'int': ...
    def get_collision_point(self) -> 'Vector3': ...
    def get_collision_normal(self) -> 'Vector3': ...
    def get_collision_face_index(self) -> 'int': ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject3D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject3D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_exclude_parent_body(self, mask: 'bool') -> None: ...
    def get_exclude_parent_body(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def set_hit_from_inside(self, enable: 'bool') -> None: ...
    def is_hit_from_inside_enabled(self) -> 'bool': ...
    def set_hit_back_faces(self, enable: 'bool') -> None: ...
    def is_hit_back_faces_enabled(self) -> 'bool': ...
    def set_debug_shape_custom_color(self, debug_shape_custom_color: 'Color') -> None: ...
    def get_debug_shape_custom_color(self) -> 'Color': ...
    def set_debug_shape_thickness(self, debug_shape_thickness: 'int') -> None: ...
    def get_debug_shape_thickness(self) -> 'int': ...


class RectangleShape2D(Shape2D):


    size: 'Vector2'

    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...


class RefCounted(Object):



    def init_ref(self) -> 'bool': ...
    def reference(self) -> 'bool': ...
    def unreference(self) -> 'bool': ...
    def get_reference_count(self) -> 'int': ...


class ReferenceRect(Control):


    border_color: 'Color'
    border_width: 'float'
    editor_only: 'bool'

    def get_border_color(self) -> 'Color': ...
    def set_border_color(self, color: 'Color') -> None: ...
    def get_border_width(self) -> 'float': ...
    def set_border_width(self, width: 'float') -> None: ...
    def get_editor_only(self) -> 'bool': ...
    def set_editor_only(self, enabled: 'bool') -> None: ...


class ReflectionProbe(VisualInstance3D):


    update_mode: 'int'
    intensity: 'float'
    blend_distance: 'float'
    max_distance: 'float'
    size: 'Vector3'
    origin_offset: 'Vector3'
    box_projection: 'bool'
    interior: 'bool'
    enable_shadows: 'bool'
    cull_mask: 'int'
    reflection_mask: 'int'
    mesh_lod_threshold: 'float'
    ambient_mode: 'int'
    ambient_color: 'Color'
    ambient_color_energy: 'float'

    def set_intensity(self, intensity: 'float') -> None: ...
    def get_intensity(self) -> 'float': ...
    def set_blend_distance(self, blend_distance: 'float') -> None: ...
    def get_blend_distance(self) -> 'float': ...
    def set_ambient_mode(self, ambient: 'ReflectionProbe__AmbientMode') -> None: ...
    def get_ambient_mode(self) -> 'ReflectionProbe__AmbientMode': ...
    def set_ambient_color(self, ambient: 'Color') -> None: ...
    def get_ambient_color(self) -> 'Color': ...
    def set_ambient_color_energy(self, ambient_energy: 'float') -> None: ...
    def get_ambient_color_energy(self) -> 'float': ...
    def set_max_distance(self, max_distance: 'float') -> None: ...
    def get_max_distance(self) -> 'float': ...
    def set_mesh_lod_threshold(self, ratio: 'float') -> None: ...
    def get_mesh_lod_threshold(self) -> 'float': ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_origin_offset(self, origin_offset: 'Vector3') -> None: ...
    def get_origin_offset(self) -> 'Vector3': ...
    def set_as_interior(self, enable: 'bool') -> None: ...
    def is_set_as_interior(self) -> 'bool': ...
    def set_enable_box_projection(self, enable: 'bool') -> None: ...
    def is_box_projection_enabled(self) -> 'bool': ...
    def set_enable_shadows(self, enable: 'bool') -> None: ...
    def are_shadows_enabled(self) -> 'bool': ...
    def set_cull_mask(self, layers: 'int') -> None: ...
    def get_cull_mask(self) -> 'int': ...
    def set_reflection_mask(self, layers: 'int') -> None: ...
    def get_reflection_mask(self) -> 'int': ...
    def set_update_mode(self, mode: 'ReflectionProbe__UpdateMode') -> None: ...
    def get_update_mode(self) -> 'ReflectionProbe__UpdateMode': ...


class RegEx(RefCounted):



    @staticmethod
    def create_from_string(pattern: 'str', show_error: 'bool' = True) -> 'RegEx': ...
    def clear(self) -> None: ...
    def compile(self, pattern: 'str', show_error: 'bool' = True) -> 'Error': ...
    def search(self, subject: 'str', offset: 'int' = 0, end: 'int' = -1) -> 'RegExMatch': ...
    def search_all(self, subject: 'str', offset: 'int' = 0, end: 'int' = -1) -> 'Array'['RegExMatch']: ...
    def sub(self, subject: 'str', replacement: 'str', all: 'bool' = False, offset: 'int' = 0, end: 'int' = -1) -> 'str': ...
    def is_valid(self) -> 'bool': ...
    def get_pattern(self) -> 'str': ...
    def get_group_count(self) -> 'int': ...
    def get_names(self) -> 'PackedStringArray': ...


class RegExMatch(RefCounted):


    subject: 'str'
    names: 'Dictionary'
    strings: 'Array'

    def get_subject(self) -> 'str': ...
    def get_group_count(self) -> 'int': ...
    def get_names(self) -> 'Dictionary': ...
    def get_strings(self) -> 'PackedStringArray': ...
    def get_string(self, name: 'Variant' = default('''0''')) -> 'str': ...
    def get_start(self, name: 'Variant' = default('''0''')) -> 'int': ...
    def get_end(self, name: 'Variant' = default('''0''')) -> 'int': ...


class RemoteTransform2D(Node2D):


    remote_path: 'NodePath'
    use_global_coordinates: 'bool'
    update_position: 'bool'
    update_rotation: 'bool'
    update_scale: 'bool'

    def set_remote_node(self, path: 'NodePath') -> None: ...
    def get_remote_node(self) -> 'NodePath': ...
    def force_update_cache(self) -> None: ...
    def set_use_global_coordinates(self, use_global_coordinates: 'bool') -> None: ...
    def get_use_global_coordinates(self) -> 'bool': ...
    def set_update_position(self, update_remote_position: 'bool') -> None: ...
    def get_update_position(self) -> 'bool': ...
    def set_update_rotation(self, update_remote_rotation: 'bool') -> None: ...
    def get_update_rotation(self) -> 'bool': ...
    def set_update_scale(self, update_remote_scale: 'bool') -> None: ...
    def get_update_scale(self) -> 'bool': ...


class RemoteTransform3D(Node3D):


    remote_path: 'NodePath'
    use_global_coordinates: 'bool'
    update_position: 'bool'
    update_rotation: 'bool'
    update_scale: 'bool'

    def set_remote_node(self, path: 'NodePath') -> None: ...
    def get_remote_node(self) -> 'NodePath': ...
    def force_update_cache(self) -> None: ...
    def set_use_global_coordinates(self, use_global_coordinates: 'bool') -> None: ...
    def get_use_global_coordinates(self) -> 'bool': ...
    def set_update_position(self, update_remote_position: 'bool') -> None: ...
    def get_update_position(self) -> 'bool': ...
    def set_update_rotation(self, update_remote_rotation: 'bool') -> None: ...
    def get_update_rotation(self) -> 'bool': ...
    def set_update_scale(self, update_remote_scale: 'bool') -> None: ...
    def get_update_scale(self) -> 'bool': ...


class RenderData(Object):



    def get_render_scene_buffers(self) -> 'RenderSceneBuffers': ...
    def get_render_scene_data(self) -> 'RenderSceneData': ...
    def get_environment(self) -> 'RID': ...
    def get_camera_attributes(self) -> 'RID': ...


class RenderDataExtension(RenderData):



    def _get_render_scene_buffers(self) -> 'RenderSceneBuffers': ...
    def _get_render_scene_data(self) -> 'RenderSceneData': ...
    def _get_environment(self) -> 'RID': ...
    def _get_camera_attributes(self) -> 'RID': ...


class RenderDataRD(RenderData): ...


class RenderSceneBuffers(RefCounted):



    def configure(self, config: 'RenderSceneBuffersConfiguration') -> None: ...


class RenderSceneBuffersConfiguration(RefCounted):


    render_target: 'RID'
    internal_size: 'Vector2i'
    target_size: 'Vector2i'
    view_count: 'int'
    scaling_3d_mode: 'int'
    msaa_3d: 'int'
    screen_space_aa: 'int'
    fsr_sharpness: 'bool'
    texture_mipmap_bias: 'bool'
    anisotropic_filtering_level: 'int'

    def get_render_target(self) -> 'RID': ...
    def set_render_target(self, render_target: 'RID') -> None: ...
    def get_internal_size(self) -> 'Vector2i': ...
    def set_internal_size(self, internal_size: 'Vector2i') -> None: ...
    def get_target_size(self) -> 'Vector2i': ...
    def set_target_size(self, target_size: 'Vector2i') -> None: ...
    def get_view_count(self) -> 'int': ...
    def set_view_count(self, view_count: 'int') -> None: ...
    def get_scaling_3d_mode(self) -> 'RenderingServer__ViewportScaling3DMode': ...
    def set_scaling_3d_mode(self, scaling_3d_mode: 'RenderingServer__ViewportScaling3DMode') -> None: ...
    def get_msaa_3d(self) -> 'RenderingServer__ViewportMSAA': ...
    def set_msaa_3d(self, msaa_3d: 'RenderingServer__ViewportMSAA') -> None: ...
    def get_screen_space_aa(self) -> 'RenderingServer__ViewportScreenSpaceAA': ...
    def set_screen_space_aa(self, screen_space_aa: 'RenderingServer__ViewportScreenSpaceAA') -> None: ...
    def get_fsr_sharpness(self) -> 'float': ...
    def set_fsr_sharpness(self, fsr_sharpness: 'float') -> None: ...
    def get_texture_mipmap_bias(self) -> 'float': ...
    def set_texture_mipmap_bias(self, texture_mipmap_bias: 'float') -> None: ...
    def get_anisotropic_filtering_level(self) -> 'RenderingServer__ViewportAnisotropicFiltering': ...
    def set_anisotropic_filtering_level(self, anisotropic_filtering_level: 'RenderingServer__ViewportAnisotropicFiltering') -> None: ...


class RenderSceneBuffersExtension(RenderSceneBuffers):



    def _configure(self, config: 'RenderSceneBuffersConfiguration') -> None: ...
    def _set_fsr_sharpness(self, fsr_sharpness: 'float') -> None: ...
    def _set_texture_mipmap_bias(self, texture_mipmap_bias: 'float') -> None: ...
    def _set_anisotropic_filtering_level(self, anisotropic_filtering_level: 'int') -> None: ...
    def _set_use_debanding(self, use_debanding: 'bool') -> None: ...


class RenderSceneBuffersRD(RenderSceneBuffers):



    def has_texture(self, context: 'StringName', name: 'StringName') -> 'bool': ...
    def create_texture(self, context: 'StringName', name: 'StringName', data_format: 'RenderingDevice__DataFormat', usage_bits: 'int', texture_samples: 'RenderingDevice__TextureSamples', size: 'Vector2i', layers: 'int', mipmaps: 'int', unique: 'bool', discardable: 'bool') -> 'RID': ...
    def create_texture_from_format(self, context: 'StringName', name: 'StringName', format: 'RDTextureFormat', view: 'RDTextureView', unique: 'bool') -> 'RID': ...
    def create_texture_view(self, context: 'StringName', name: 'StringName', view_name: 'StringName', view: 'RDTextureView') -> 'RID': ...
    def get_texture(self, context: 'StringName', name: 'StringName') -> 'RID': ...
    def get_texture_format(self, context: 'StringName', name: 'StringName') -> 'RDTextureFormat': ...
    def get_texture_slice(self, context: 'StringName', name: 'StringName', layer: 'int', mipmap: 'int', layers: 'int', mipmaps: 'int') -> 'RID': ...
    def get_texture_slice_view(self, context: 'StringName', name: 'StringName', layer: 'int', mipmap: 'int', layers: 'int', mipmaps: 'int', view: 'RDTextureView') -> 'RID': ...
    def get_texture_slice_size(self, context: 'StringName', name: 'StringName', mipmap: 'int') -> 'Vector2i': ...
    def clear_context(self, context: 'StringName') -> None: ...
    def get_color_texture(self, msaa: 'bool' = False) -> 'RID': ...
    def get_color_layer(self, layer: 'int', msaa: 'bool' = False) -> 'RID': ...
    def get_depth_texture(self, msaa: 'bool' = False) -> 'RID': ...
    def get_depth_layer(self, layer: 'int', msaa: 'bool' = False) -> 'RID': ...
    def get_velocity_texture(self, msaa: 'bool' = False) -> 'RID': ...
    def get_velocity_layer(self, layer: 'int', msaa: 'bool' = False) -> 'RID': ...
    def get_render_target(self) -> 'RID': ...
    def get_view_count(self) -> 'int': ...
    def get_internal_size(self) -> 'Vector2i': ...
    def get_target_size(self) -> 'Vector2i': ...
    def get_scaling_3d_mode(self) -> 'RenderingServer__ViewportScaling3DMode': ...
    def get_fsr_sharpness(self) -> 'float': ...
    def get_msaa_3d(self) -> 'RenderingServer__ViewportMSAA': ...
    def get_texture_samples(self) -> 'RenderingDevice__TextureSamples': ...
    def get_screen_space_aa(self) -> 'RenderingServer__ViewportScreenSpaceAA': ...
    def get_use_taa(self) -> 'bool': ...
    def get_use_debanding(self) -> 'bool': ...


class RenderSceneData(Object):



    def get_cam_transform(self) -> 'Transform3D': ...
    def get_cam_projection(self) -> 'Projection': ...
    def get_view_count(self) -> 'int': ...
    def get_view_eye_offset(self, view: 'int') -> 'Vector3': ...
    def get_view_projection(self, view: 'int') -> 'Projection': ...
    def get_uniform_buffer(self) -> 'RID': ...


class RenderSceneDataExtension(RenderSceneData):



    def _get_cam_transform(self) -> 'Transform3D': ...
    def _get_cam_projection(self) -> 'Projection': ...
    def _get_view_count(self) -> 'int': ...
    def _get_view_eye_offset(self, view: 'int') -> 'Vector3': ...
    def _get_view_projection(self, view: 'int') -> 'Projection': ...
    def _get_uniform_buffer(self) -> 'RID': ...


class RenderSceneDataRD(RenderSceneData): ...


class RenderingDevice(Object):


    INVALID_ID: 'int' = -1
    INVALID_FORMAT_ID: 'int' = -1

    def texture_create(self, format: 'RDTextureFormat', view: 'RDTextureView', data: 'Array'['PackedByteArray'] = default('''[]''')) -> 'RID': ...
    def texture_create_shared(self, view: 'RDTextureView', with_texture: 'RID') -> 'RID': ...
    def texture_create_shared_from_slice(self, view: 'RDTextureView', with_texture: 'RID', layer: 'int', mipmap: 'int', mipmaps: 'int' = 1, slice_type: 'RenderingDevice__TextureSliceType' = 0) -> 'RID': ...
    def texture_create_from_extension(self, type: 'RenderingDevice__TextureType', format: 'RenderingDevice__DataFormat', samples: 'RenderingDevice__TextureSamples', usage_flags: 'RenderingDevice__TextureUsageBits', image: 'int', width: 'int', height: 'int', depth: 'int', layers: 'int') -> 'RID': ...
    def texture_update(self, texture: 'RID', layer: 'int', data: 'PackedByteArray') -> 'Error': ...
    def texture_get_data(self, texture: 'RID', layer: 'int') -> 'PackedByteArray': ...
    def texture_get_data_async(self, texture: 'RID', layer: 'int', callback: 'Callable') -> 'Error': ...
    def texture_is_format_supported_for_usage(self, format: 'RenderingDevice__DataFormat', usage_flags: 'RenderingDevice__TextureUsageBits') -> 'bool': ...
    def texture_is_shared(self, texture: 'RID') -> 'bool': ...
    def texture_is_valid(self, texture: 'RID') -> 'bool': ...
    def texture_set_discardable(self, texture: 'RID', discardable: 'bool') -> None: ...
    def texture_is_discardable(self, texture: 'RID') -> 'bool': ...
    def texture_copy(self, from_texture: 'RID', to_texture: 'RID', from_pos: 'Vector3', to_pos: 'Vector3', size: 'Vector3', src_mipmap: 'int', dst_mipmap: 'int', src_layer: 'int', dst_layer: 'int') -> 'Error': ...
    def texture_clear(self, texture: 'RID', color: 'Color', base_mipmap: 'int', mipmap_count: 'int', base_layer: 'int', layer_count: 'int') -> 'Error': ...
    def texture_resolve_multisample(self, from_texture: 'RID', to_texture: 'RID') -> 'Error': ...
    def texture_get_format(self, texture: 'RID') -> 'RDTextureFormat': ...
    def texture_get_native_handle(self, texture: 'RID') -> 'int': ...
    def framebuffer_format_create(self, attachments: 'Array'['RDAttachmentFormat'], view_count: 'int' = 1) -> 'int': ...
    def framebuffer_format_create_multipass(self, attachments: 'Array'['RDAttachmentFormat'], passes: 'Array'['RDFramebufferPass'], view_count: 'int' = 1) -> 'int': ...
    def framebuffer_format_create_empty(self, samples: 'RenderingDevice__TextureSamples' = 0) -> 'int': ...
    def framebuffer_format_get_texture_samples(self, format: 'int', render_pass: 'int' = 0) -> 'RenderingDevice__TextureSamples': ...
    def framebuffer_create(self, textures: 'Array'['RID'], validate_with_format: 'int' = -1, view_count: 'int' = 1) -> 'RID': ...
    def framebuffer_create_multipass(self, textures: 'Array'['RID'], passes: 'Array'['RDFramebufferPass'], validate_with_format: 'int' = -1, view_count: 'int' = 1) -> 'RID': ...
    def framebuffer_create_empty(self, size: 'Vector2i', samples: 'RenderingDevice__TextureSamples' = 0, validate_with_format: 'int' = -1) -> 'RID': ...
    def framebuffer_get_format(self, framebuffer: 'RID') -> 'int': ...
    def framebuffer_is_valid(self, framebuffer: 'RID') -> 'bool': ...
    def sampler_create(self, state: 'RDSamplerState') -> 'RID': ...
    def sampler_is_format_supported_for_filter(self, format: 'RenderingDevice__DataFormat', sampler_filter: 'RenderingDevice__SamplerFilter') -> 'bool': ...
    def vertex_buffer_create(self, size_bytes: 'int', data: 'PackedByteArray' = default('''PackedByteArray()'''), creation_bits: 'RenderingDevice__BufferCreationBits' = 0) -> 'RID': ...
    def vertex_format_create(self, vertex_descriptions: 'Array'['RDVertexAttribute']) -> 'int': ...
    def vertex_array_create(self, vertex_count: 'int', vertex_format: 'int', src_buffers: 'Array'['RID'], offsets: 'PackedInt64Array' = default('''PackedInt64Array()''')) -> 'RID': ...
    def index_buffer_create(self, size_indices: 'int', format: 'RenderingDevice__IndexBufferFormat', data: 'PackedByteArray' = default('''PackedByteArray()'''), use_restart_indices: 'bool' = False, creation_bits: 'RenderingDevice__BufferCreationBits' = 0) -> 'RID': ...
    def index_array_create(self, index_buffer: 'RID', index_offset: 'int', index_count: 'int') -> 'RID': ...
    def shader_compile_spirv_from_source(self, shader_source: 'RDShaderSource', allow_cache: 'bool' = True) -> 'RDShaderSPIRV': ...
    def shader_compile_binary_from_spirv(self, spirv_data: 'RDShaderSPIRV', name: 'str' = "") -> 'PackedByteArray': ...
    def shader_create_from_spirv(self, spirv_data: 'RDShaderSPIRV', name: 'str' = "") -> 'RID': ...
    def shader_create_from_bytecode(self, binary_data: 'PackedByteArray', placeholder_rid: 'RID' = default('''RID()''')) -> 'RID': ...
    def shader_create_placeholder(self) -> 'RID': ...
    def shader_get_vertex_input_attribute_mask(self, shader: 'RID') -> 'int': ...
    def uniform_buffer_create(self, size_bytes: 'int', data: 'PackedByteArray' = default('''PackedByteArray()'''), creation_bits: 'RenderingDevice__BufferCreationBits' = 0) -> 'RID': ...
    def storage_buffer_create(self, size_bytes: 'int', data: 'PackedByteArray' = default('''PackedByteArray()'''), usage: 'RenderingDevice__StorageBufferUsage' = 0, creation_bits: 'RenderingDevice__BufferCreationBits' = 0) -> 'RID': ...
    def texture_buffer_create(self, size_bytes: 'int', format: 'RenderingDevice__DataFormat', data: 'PackedByteArray' = default('''PackedByteArray()''')) -> 'RID': ...
    def uniform_set_create(self, uniforms: 'Array'['RDUniform'], shader: 'RID', shader_set: 'int') -> 'RID': ...
    def uniform_set_is_valid(self, uniform_set: 'RID') -> 'bool': ...
    def buffer_copy(self, src_buffer: 'RID', dst_buffer: 'RID', src_offset: 'int', dst_offset: 'int', size: 'int') -> 'Error': ...
    def buffer_update(self, buffer: 'RID', offset: 'int', size_bytes: 'int', data: 'PackedByteArray') -> 'Error': ...
    def buffer_clear(self, buffer: 'RID', offset: 'int', size_bytes: 'int') -> 'Error': ...
    def buffer_get_data(self, buffer: 'RID', offset_bytes: 'int' = 0, size_bytes: 'int' = 0) -> 'PackedByteArray': ...
    def buffer_get_data_async(self, buffer: 'RID', callback: 'Callable', offset_bytes: 'int' = 0, size_bytes: 'int' = 0) -> 'Error': ...
    def buffer_get_device_address(self, buffer: 'RID') -> 'int': ...
    def render_pipeline_create(self, shader: 'RID', framebuffer_format: 'int', vertex_format: 'int', primitive: 'RenderingDevice__RenderPrimitive', rasterization_state: 'RDPipelineRasterizationState', multisample_state: 'RDPipelineMultisampleState', stencil_state: 'RDPipelineDepthStencilState', color_blend_state: 'RDPipelineColorBlendState', dynamic_state_flags: 'RenderingDevice__PipelineDynamicStateFlags' = 0, for_render_pass: 'int' = 0, specialization_constants: 'Array'['RDPipelineSpecializationConstant'] = default('''Array[RDPipelineSpecializationConstant]([])''')) -> 'RID': ...
    def render_pipeline_is_valid(self, render_pipeline: 'RID') -> 'bool': ...
    def compute_pipeline_create(self, shader: 'RID', specialization_constants: 'Array'['RDPipelineSpecializationConstant'] = default('''Array[RDPipelineSpecializationConstant]([])''')) -> 'RID': ...
    def compute_pipeline_is_valid(self, compute_pipeline: 'RID') -> 'bool': ...
    def screen_get_width(self, screen: 'int' = 0) -> 'int': ...
    def screen_get_height(self, screen: 'int' = 0) -> 'int': ...
    def screen_get_framebuffer_format(self, screen: 'int' = 0) -> 'int': ...
    def draw_list_begin_for_screen(self, screen: 'int' = 0, clear_color: 'Color' = default('''Color(0, 0, 0, 1)''')) -> 'int': ...
    def draw_list_begin(self, framebuffer: 'RID', draw_flags: 'RenderingDevice__DrawFlags' = 0, clear_color_values: 'PackedColorArray' = default('''PackedColorArray()'''), clear_depth_value: 'float' = 1.0, clear_stencil_value: 'int' = 0, region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), breadcrumb: 'int' = 0) -> 'int': ...
    def draw_list_begin_split(self, framebuffer: 'RID', splits: 'int', initial_color_action: 'RenderingDevice__InitialAction', final_color_action: 'RenderingDevice__FinalAction', initial_depth_action: 'RenderingDevice__InitialAction', final_depth_action: 'RenderingDevice__FinalAction', clear_color_values: 'PackedColorArray' = default('''PackedColorArray()'''), clear_depth: 'float' = 1.0, clear_stencil: 'int' = 0, region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), storage_textures: 'Array'['RID'] = default('''Array[RID]([])''')) -> 'PackedInt64Array': ...
    def draw_list_set_blend_constants(self, draw_list: 'int', color: 'Color') -> None: ...
    def draw_list_bind_render_pipeline(self, draw_list: 'int', render_pipeline: 'RID') -> None: ...
    def draw_list_bind_uniform_set(self, draw_list: 'int', uniform_set: 'RID', set_index: 'int') -> None: ...
    def draw_list_bind_vertex_array(self, draw_list: 'int', vertex_array: 'RID') -> None: ...
    def draw_list_bind_index_array(self, draw_list: 'int', index_array: 'RID') -> None: ...
    def draw_list_set_push_constant(self, draw_list: 'int', buffer: 'PackedByteArray', size_bytes: 'int') -> None: ...
    def draw_list_draw(self, draw_list: 'int', use_indices: 'bool', instances: 'int', procedural_vertex_count: 'int' = 0) -> None: ...
    def draw_list_draw_indirect(self, draw_list: 'int', use_indices: 'bool', buffer: 'RID', offset: 'int' = 0, draw_count: 'int' = 1, stride: 'int' = 0) -> None: ...
    def draw_list_enable_scissor(self, draw_list: 'int', rect: 'Rect2' = default('''Rect2(0, 0, 0, 0)''')) -> None: ...
    def draw_list_disable_scissor(self, draw_list: 'int') -> None: ...
    def draw_list_switch_to_next_pass(self) -> 'int': ...
    def draw_list_switch_to_next_pass_split(self, splits: 'int') -> 'PackedInt64Array': ...
    def draw_list_end(self) -> None: ...
    def compute_list_begin(self) -> 'int': ...
    def compute_list_bind_compute_pipeline(self, compute_list: 'int', compute_pipeline: 'RID') -> None: ...
    def compute_list_set_push_constant(self, compute_list: 'int', buffer: 'PackedByteArray', size_bytes: 'int') -> None: ...
    def compute_list_bind_uniform_set(self, compute_list: 'int', uniform_set: 'RID', set_index: 'int') -> None: ...
    def compute_list_dispatch(self, compute_list: 'int', x_groups: 'int', y_groups: 'int', z_groups: 'int') -> None: ...
    def compute_list_dispatch_indirect(self, compute_list: 'int', buffer: 'RID', offset: 'int') -> None: ...
    def compute_list_add_barrier(self, compute_list: 'int') -> None: ...
    def compute_list_end(self) -> None: ...
    def free_rid(self, rid: 'RID') -> None: ...
    def capture_timestamp(self, name: 'str') -> None: ...
    def get_captured_timestamps_count(self) -> 'int': ...
    def get_captured_timestamps_frame(self) -> 'int': ...
    def get_captured_timestamp_gpu_time(self, index: 'int') -> 'int': ...
    def get_captured_timestamp_cpu_time(self, index: 'int') -> 'int': ...
    def get_captured_timestamp_name(self, index: 'int') -> 'str': ...
    def has_feature(self, feature: 'RenderingDevice__Features') -> 'bool': ...
    def limit_get(self, limit: 'RenderingDevice__Limit') -> 'int': ...
    def get_frame_delay(self) -> 'int': ...
    def submit(self) -> None: ...
    def sync(self) -> None: ...
    def barrier(self, from_: 'RenderingDevice__BarrierMask' = 32767, to: 'RenderingDevice__BarrierMask' = 32767) -> None: ...
    def full_barrier(self) -> None: ...
    def create_local_device(self) -> 'RenderingDevice': ...
    def set_resource_name(self, id: 'RID', name: 'str') -> None: ...
    def draw_command_begin_label(self, name: 'str', color: 'Color') -> None: ...
    def draw_command_insert_label(self, name: 'str', color: 'Color') -> None: ...
    def draw_command_end_label(self) -> None: ...
    def get_device_vendor_name(self) -> 'str': ...
    def get_device_name(self) -> 'str': ...
    def get_device_pipeline_cache_uuid(self) -> 'str': ...
    def get_memory_usage(self, type: 'RenderingDevice__MemoryType') -> 'int': ...
    def get_driver_resource(self, resource: 'RenderingDevice__DriverResource', rid: 'RID', index: 'int') -> 'int': ...
    def get_perf_report(self) -> 'str': ...
    def get_driver_and_device_memory_report(self) -> 'str': ...
    def get_tracked_object_name(self, type_index: 'int') -> 'str': ...
    def get_tracked_object_type_count(self) -> 'int': ...
    def get_driver_total_memory(self) -> 'int': ...
    def get_driver_allocation_count(self) -> 'int': ...
    def get_driver_memory_by_object_type(self, type: 'int') -> 'int': ...
    def get_driver_allocs_by_object_type(self, type: 'int') -> 'int': ...
    def get_device_total_memory(self) -> 'int': ...
    def get_device_allocation_count(self) -> 'int': ...
    def get_device_memory_by_object_type(self, type: 'int') -> 'int': ...
    def get_device_allocs_by_object_type(self, type: 'int') -> 'int': ...


class RenderingServer(Object):


    render_loop_enabled: 'bool'
    NO_INDEX_ARRAY: 'int' = -1
    ARRAY_WEIGHTS_SIZE: 'int' = 4
    CANVAS_ITEM_Z_MIN: 'int' = -4096
    CANVAS_ITEM_Z_MAX: 'int' = 4096
    MAX_GLOW_LEVELS: 'int' = 7
    MAX_CURSORS: 'int' = 8
    MAX_2D_DIRECTIONAL_LIGHTS: 'int' = 8
    MAX_MESH_SURFACES: 'int' = 256
    MATERIAL_RENDER_PRIORITY_MIN: 'int' = -128
    MATERIAL_RENDER_PRIORITY_MAX: 'int' = 127
    ARRAY_CUSTOM_COUNT: 'int' = 4
    PARTICLES_EMIT_FLAG_POSITION: 'int' = 1
    PARTICLES_EMIT_FLAG_ROTATION_SCALE: 'int' = 2
    PARTICLES_EMIT_FLAG_VELOCITY: 'int' = 4
    PARTICLES_EMIT_FLAG_COLOR: 'int' = 8
    PARTICLES_EMIT_FLAG_CUSTOM: 'int' = 16
    frame_pre_draw: 'Signal[Callable[[], None]]'  # frame_pre_draw()
    frame_post_draw: 'Signal[Callable[[], None]]'  # frame_post_draw()

    def texture_2d_create(self, image: 'Image') -> 'RID': ...
    def texture_2d_layered_create(self, layers: 'Array'['Image'], layered_type: 'RenderingServer__TextureLayeredType') -> 'RID': ...
    def texture_3d_create(self, format: 'Image__Format', width: 'int', height: 'int', depth: 'int', mipmaps: 'bool', data: 'Array'['Image']) -> 'RID': ...
    def texture_proxy_create(self, base: 'RID') -> 'RID': ...
    def texture_create_from_native_handle(self, type: 'RenderingServer__TextureType', format: 'Image__Format', native_handle: 'int', width: 'int', height: 'int', depth: 'int', layers: 'int' = 1, layered_type: 'RenderingServer__TextureLayeredType' = 0) -> 'RID': ...
    def texture_2d_update(self, texture: 'RID', image: 'Image', layer: 'int') -> None: ...
    def texture_3d_update(self, texture: 'RID', data: 'Array'['Image']) -> None: ...
    def texture_proxy_update(self, texture: 'RID', proxy_to: 'RID') -> None: ...
    def texture_2d_placeholder_create(self) -> 'RID': ...
    def texture_2d_layered_placeholder_create(self, layered_type: 'RenderingServer__TextureLayeredType') -> 'RID': ...
    def texture_3d_placeholder_create(self) -> 'RID': ...
    def texture_2d_get(self, texture: 'RID') -> 'Image': ...
    def texture_2d_layer_get(self, texture: 'RID', layer: 'int') -> 'Image': ...
    def texture_3d_get(self, texture: 'RID') -> 'Array'['Image']: ...
    def texture_replace(self, texture: 'RID', by_texture: 'RID') -> None: ...
    def texture_set_size_override(self, texture: 'RID', width: 'int', height: 'int') -> None: ...
    def texture_set_path(self, texture: 'RID', path: 'str') -> None: ...
    def texture_get_path(self, texture: 'RID') -> 'str': ...
    def texture_get_format(self, texture: 'RID') -> 'Image__Format': ...
    def texture_set_force_redraw_if_visible(self, texture: 'RID', enable: 'bool') -> None: ...
    def texture_rd_create(self, rd_texture: 'RID', layer_type: 'RenderingServer__TextureLayeredType' = 0) -> 'RID': ...
    def texture_get_rd_texture(self, texture: 'RID', srgb: 'bool' = False) -> 'RID': ...
    def texture_get_native_handle(self, texture: 'RID', srgb: 'bool' = False) -> 'int': ...
    def shader_create(self) -> 'RID': ...
    def shader_set_code(self, shader: 'RID', code: 'str') -> None: ...
    def shader_set_path_hint(self, shader: 'RID', path: 'str') -> None: ...
    def shader_get_code(self, shader: 'RID') -> 'str': ...
    def get_shader_parameter_list(self, shader: 'RID') -> 'Array'['Dictionary']: ...
    def shader_get_parameter_default(self, shader: 'RID', name: 'StringName') -> 'Variant': ...
    def shader_set_default_texture_parameter(self, shader: 'RID', name: 'StringName', texture: 'RID', index: 'int' = 0) -> None: ...
    def shader_get_default_texture_parameter(self, shader: 'RID', name: 'StringName', index: 'int' = 0) -> 'RID': ...
    def material_create(self) -> 'RID': ...
    def material_set_shader(self, shader_material: 'RID', shader: 'RID') -> None: ...
    def material_set_param(self, material: 'RID', parameter: 'StringName', value: 'Variant') -> None: ...
    def material_get_param(self, material: 'RID', parameter: 'StringName') -> 'Variant': ...
    def material_set_render_priority(self, material: 'RID', priority: 'int') -> None: ...
    def material_set_next_pass(self, material: 'RID', next_material: 'RID') -> None: ...
    def mesh_create_from_surfaces(self, surfaces: 'Array'['Dictionary'], blend_shape_count: 'int' = 0) -> 'RID': ...
    def mesh_create(self) -> 'RID': ...
    def mesh_surface_get_format_offset(self, format: 'RenderingServer__ArrayFormat', vertex_count: 'int', array_index: 'int') -> 'int': ...
    def mesh_surface_get_format_vertex_stride(self, format: 'RenderingServer__ArrayFormat', vertex_count: 'int') -> 'int': ...
    def mesh_surface_get_format_normal_tangent_stride(self, format: 'RenderingServer__ArrayFormat', vertex_count: 'int') -> 'int': ...
    def mesh_surface_get_format_attribute_stride(self, format: 'RenderingServer__ArrayFormat', vertex_count: 'int') -> 'int': ...
    def mesh_surface_get_format_skin_stride(self, format: 'RenderingServer__ArrayFormat', vertex_count: 'int') -> 'int': ...
    def mesh_add_surface(self, mesh: 'RID', surface: 'Dictionary') -> None: ...
    def mesh_add_surface_from_arrays(self, mesh: 'RID', primitive: 'RenderingServer__PrimitiveType', arrays: 'Array', blend_shapes: 'Array' = default('''[]'''), lods: 'Dictionary' = default('''{}'''), compress_format: 'RenderingServer__ArrayFormat' = 0) -> None: ...
    def mesh_get_blend_shape_count(self, mesh: 'RID') -> 'int': ...
    def mesh_set_blend_shape_mode(self, mesh: 'RID', mode: 'RenderingServer__BlendShapeMode') -> None: ...
    def mesh_get_blend_shape_mode(self, mesh: 'RID') -> 'RenderingServer__BlendShapeMode': ...
    def mesh_surface_set_material(self, mesh: 'RID', surface: 'int', material: 'RID') -> None: ...
    def mesh_surface_get_material(self, mesh: 'RID', surface: 'int') -> 'RID': ...
    def mesh_get_surface(self, mesh: 'RID', surface: 'int') -> 'Dictionary': ...
    def mesh_surface_get_arrays(self, mesh: 'RID', surface: 'int') -> 'Array': ...
    def mesh_surface_get_blend_shape_arrays(self, mesh: 'RID', surface: 'int') -> 'Array'['Array']: ...
    def mesh_get_surface_count(self, mesh: 'RID') -> 'int': ...
    def mesh_set_custom_aabb(self, mesh: 'RID', aabb: 'AABB') -> None: ...
    def mesh_get_custom_aabb(self, mesh: 'RID') -> 'AABB': ...
    def mesh_surface_remove(self, mesh: 'RID', surface: 'int') -> None: ...
    def mesh_clear(self, mesh: 'RID') -> None: ...
    def mesh_surface_update_vertex_region(self, mesh: 'RID', surface: 'int', offset: 'int', data: 'PackedByteArray') -> None: ...
    def mesh_surface_update_attribute_region(self, mesh: 'RID', surface: 'int', offset: 'int', data: 'PackedByteArray') -> None: ...
    def mesh_surface_update_skin_region(self, mesh: 'RID', surface: 'int', offset: 'int', data: 'PackedByteArray') -> None: ...
    def mesh_set_shadow_mesh(self, mesh: 'RID', shadow_mesh: 'RID') -> None: ...
    def multimesh_create(self) -> 'RID': ...
    def multimesh_allocate_data(self, multimesh: 'RID', instances: 'int', transform_format: 'RenderingServer__MultimeshTransformFormat', color_format: 'bool' = False, custom_data_format: 'bool' = False, use_indirect: 'bool' = False) -> None: ...
    def multimesh_get_instance_count(self, multimesh: 'RID') -> 'int': ...
    def multimesh_set_mesh(self, multimesh: 'RID', mesh: 'RID') -> None: ...
    def multimesh_instance_set_transform(self, multimesh: 'RID', index: 'int', transform: 'Transform3D') -> None: ...
    def multimesh_instance_set_transform_2d(self, multimesh: 'RID', index: 'int', transform: 'Transform2D') -> None: ...
    def multimesh_instance_set_color(self, multimesh: 'RID', index: 'int', color: 'Color') -> None: ...
    def multimesh_instance_set_custom_data(self, multimesh: 'RID', index: 'int', custom_data: 'Color') -> None: ...
    def multimesh_get_mesh(self, multimesh: 'RID') -> 'RID': ...
    def multimesh_get_aabb(self, multimesh: 'RID') -> 'AABB': ...
    def multimesh_set_custom_aabb(self, multimesh: 'RID', aabb: 'AABB') -> None: ...
    def multimesh_get_custom_aabb(self, multimesh: 'RID') -> 'AABB': ...
    def multimesh_instance_get_transform(self, multimesh: 'RID', index: 'int') -> 'Transform3D': ...
    def multimesh_instance_get_transform_2d(self, multimesh: 'RID', index: 'int') -> 'Transform2D': ...
    def multimesh_instance_get_color(self, multimesh: 'RID', index: 'int') -> 'Color': ...
    def multimesh_instance_get_custom_data(self, multimesh: 'RID', index: 'int') -> 'Color': ...
    def multimesh_set_visible_instances(self, multimesh: 'RID', visible: 'int') -> None: ...
    def multimesh_get_visible_instances(self, multimesh: 'RID') -> 'int': ...
    def multimesh_set_buffer(self, multimesh: 'RID', buffer: 'PackedFloat32Array') -> None: ...
    def multimesh_get_command_buffer_rd_rid(self, multimesh: 'RID') -> 'RID': ...
    def multimesh_get_buffer_rd_rid(self, multimesh: 'RID') -> 'RID': ...
    def multimesh_get_buffer(self, multimesh: 'RID') -> 'PackedFloat32Array': ...
    def multimesh_set_buffer_interpolated(self, multimesh: 'RID', buffer: 'PackedFloat32Array', buffer_previous: 'PackedFloat32Array') -> None: ...
    def multimesh_set_physics_interpolated(self, multimesh: 'RID', interpolated: 'bool') -> None: ...
    def multimesh_set_physics_interpolation_quality(self, multimesh: 'RID', quality: 'RenderingServer__MultimeshPhysicsInterpolationQuality') -> None: ...
    def multimesh_instance_reset_physics_interpolation(self, multimesh: 'RID', index: 'int') -> None: ...
    def skeleton_create(self) -> 'RID': ...
    def skeleton_allocate_data(self, skeleton: 'RID', bones: 'int', is_2d_skeleton: 'bool' = False) -> None: ...
    def skeleton_get_bone_count(self, skeleton: 'RID') -> 'int': ...
    def skeleton_bone_set_transform(self, skeleton: 'RID', bone: 'int', transform: 'Transform3D') -> None: ...
    def skeleton_bone_get_transform(self, skeleton: 'RID', bone: 'int') -> 'Transform3D': ...
    def skeleton_bone_set_transform_2d(self, skeleton: 'RID', bone: 'int', transform: 'Transform2D') -> None: ...
    def skeleton_bone_get_transform_2d(self, skeleton: 'RID', bone: 'int') -> 'Transform2D': ...
    def skeleton_set_base_transform_2d(self, skeleton: 'RID', base_transform: 'Transform2D') -> None: ...
    def directional_light_create(self) -> 'RID': ...
    def omni_light_create(self) -> 'RID': ...
    def spot_light_create(self) -> 'RID': ...
    def light_set_color(self, light: 'RID', color: 'Color') -> None: ...
    def light_set_param(self, light: 'RID', param: 'RenderingServer__LightParam', value: 'float') -> None: ...
    def light_set_shadow(self, light: 'RID', enabled: 'bool') -> None: ...
    def light_set_projector(self, light: 'RID', texture: 'RID') -> None: ...
    def light_set_negative(self, light: 'RID', enable: 'bool') -> None: ...
    def light_set_cull_mask(self, light: 'RID', mask: 'int') -> None: ...
    def light_set_distance_fade(self, decal: 'RID', enabled: 'bool', begin: 'float', shadow: 'float', length: 'float') -> None: ...
    def light_set_reverse_cull_face_mode(self, light: 'RID', enabled: 'bool') -> None: ...
    def light_set_shadow_caster_mask(self, light: 'RID', mask: 'int') -> None: ...
    def light_set_bake_mode(self, light: 'RID', bake_mode: 'RenderingServer__LightBakeMode') -> None: ...
    def light_set_max_sdfgi_cascade(self, light: 'RID', cascade: 'int') -> None: ...
    def light_omni_set_shadow_mode(self, light: 'RID', mode: 'RenderingServer__LightOmniShadowMode') -> None: ...
    def light_directional_set_shadow_mode(self, light: 'RID', mode: 'RenderingServer__LightDirectionalShadowMode') -> None: ...
    def light_directional_set_blend_splits(self, light: 'RID', enable: 'bool') -> None: ...
    def light_directional_set_sky_mode(self, light: 'RID', mode: 'RenderingServer__LightDirectionalSkyMode') -> None: ...
    def light_projectors_set_filter(self, filter: 'RenderingServer__LightProjectorFilter') -> None: ...
    def lightmaps_set_bicubic_filter(self, enable: 'bool') -> None: ...
    def positional_soft_shadow_filter_set_quality(self, quality: 'RenderingServer__ShadowQuality') -> None: ...
    def directional_soft_shadow_filter_set_quality(self, quality: 'RenderingServer__ShadowQuality') -> None: ...
    def directional_shadow_atlas_set_size(self, size: 'int', is_16bits: 'bool') -> None: ...
    def reflection_probe_create(self) -> 'RID': ...
    def reflection_probe_set_update_mode(self, probe: 'RID', mode: 'RenderingServer__ReflectionProbeUpdateMode') -> None: ...
    def reflection_probe_set_intensity(self, probe: 'RID', intensity: 'float') -> None: ...
    def reflection_probe_set_blend_distance(self, probe: 'RID', blend_distance: 'float') -> None: ...
    def reflection_probe_set_ambient_mode(self, probe: 'RID', mode: 'RenderingServer__ReflectionProbeAmbientMode') -> None: ...
    def reflection_probe_set_ambient_color(self, probe: 'RID', color: 'Color') -> None: ...
    def reflection_probe_set_ambient_energy(self, probe: 'RID', energy: 'float') -> None: ...
    def reflection_probe_set_max_distance(self, probe: 'RID', distance: 'float') -> None: ...
    def reflection_probe_set_size(self, probe: 'RID', size: 'Vector3') -> None: ...
    def reflection_probe_set_origin_offset(self, probe: 'RID', offset: 'Vector3') -> None: ...
    def reflection_probe_set_as_interior(self, probe: 'RID', enable: 'bool') -> None: ...
    def reflection_probe_set_enable_box_projection(self, probe: 'RID', enable: 'bool') -> None: ...
    def reflection_probe_set_enable_shadows(self, probe: 'RID', enable: 'bool') -> None: ...
    def reflection_probe_set_cull_mask(self, probe: 'RID', layers: 'int') -> None: ...
    def reflection_probe_set_reflection_mask(self, probe: 'RID', layers: 'int') -> None: ...
    def reflection_probe_set_resolution(self, probe: 'RID', resolution: 'int') -> None: ...
    def reflection_probe_set_mesh_lod_threshold(self, probe: 'RID', pixels: 'float') -> None: ...
    def decal_create(self) -> 'RID': ...
    def decal_set_size(self, decal: 'RID', size: 'Vector3') -> None: ...
    def decal_set_texture(self, decal: 'RID', type: 'RenderingServer__DecalTexture', texture: 'RID') -> None: ...
    def decal_set_emission_energy(self, decal: 'RID', energy: 'float') -> None: ...
    def decal_set_albedo_mix(self, decal: 'RID', albedo_mix: 'float') -> None: ...
    def decal_set_modulate(self, decal: 'RID', color: 'Color') -> None: ...
    def decal_set_cull_mask(self, decal: 'RID', mask: 'int') -> None: ...
    def decal_set_distance_fade(self, decal: 'RID', enabled: 'bool', begin: 'float', length: 'float') -> None: ...
    def decal_set_fade(self, decal: 'RID', above: 'float', below: 'float') -> None: ...
    def decal_set_normal_fade(self, decal: 'RID', fade: 'float') -> None: ...
    def decals_set_filter(self, filter: 'RenderingServer__DecalFilter') -> None: ...
    def gi_set_use_half_resolution(self, half_resolution: 'bool') -> None: ...
    def voxel_gi_create(self) -> 'RID': ...
    def voxel_gi_allocate_data(self, voxel_gi: 'RID', to_cell_xform: 'Transform3D', aabb: 'AABB', octree_size: 'Vector3i', octree_cells: 'PackedByteArray', data_cells: 'PackedByteArray', distance_field: 'PackedByteArray', level_counts: 'PackedInt32Array') -> None: ...
    def voxel_gi_get_octree_size(self, voxel_gi: 'RID') -> 'Vector3i': ...
    def voxel_gi_get_octree_cells(self, voxel_gi: 'RID') -> 'PackedByteArray': ...
    def voxel_gi_get_data_cells(self, voxel_gi: 'RID') -> 'PackedByteArray': ...
    def voxel_gi_get_distance_field(self, voxel_gi: 'RID') -> 'PackedByteArray': ...
    def voxel_gi_get_level_counts(self, voxel_gi: 'RID') -> 'PackedInt32Array': ...
    def voxel_gi_get_to_cell_xform(self, voxel_gi: 'RID') -> 'Transform3D': ...
    def voxel_gi_set_dynamic_range(self, voxel_gi: 'RID', range: 'float') -> None: ...
    def voxel_gi_set_propagation(self, voxel_gi: 'RID', amount: 'float') -> None: ...
    def voxel_gi_set_energy(self, voxel_gi: 'RID', energy: 'float') -> None: ...
    def voxel_gi_set_baked_exposure_normalization(self, voxel_gi: 'RID', baked_exposure: 'float') -> None: ...
    def voxel_gi_set_bias(self, voxel_gi: 'RID', bias: 'float') -> None: ...
    def voxel_gi_set_normal_bias(self, voxel_gi: 'RID', bias: 'float') -> None: ...
    def voxel_gi_set_interior(self, voxel_gi: 'RID', enable: 'bool') -> None: ...
    def voxel_gi_set_use_two_bounces(self, voxel_gi: 'RID', enable: 'bool') -> None: ...
    def voxel_gi_set_quality(self, quality: 'RenderingServer__VoxelGIQuality') -> None: ...
    def lightmap_create(self) -> 'RID': ...
    def lightmap_set_textures(self, lightmap: 'RID', light: 'RID', uses_sh: 'bool') -> None: ...
    def lightmap_set_probe_bounds(self, lightmap: 'RID', bounds: 'AABB') -> None: ...
    def lightmap_set_probe_interior(self, lightmap: 'RID', interior: 'bool') -> None: ...
    def lightmap_set_probe_capture_data(self, lightmap: 'RID', points: 'PackedVector3Array', point_sh: 'PackedColorArray', tetrahedra: 'PackedInt32Array', bsp_tree: 'PackedInt32Array') -> None: ...
    def lightmap_get_probe_capture_points(self, lightmap: 'RID') -> 'PackedVector3Array': ...
    def lightmap_get_probe_capture_sh(self, lightmap: 'RID') -> 'PackedColorArray': ...
    def lightmap_get_probe_capture_tetrahedra(self, lightmap: 'RID') -> 'PackedInt32Array': ...
    def lightmap_get_probe_capture_bsp_tree(self, lightmap: 'RID') -> 'PackedInt32Array': ...
    def lightmap_set_baked_exposure_normalization(self, lightmap: 'RID', baked_exposure: 'float') -> None: ...
    def lightmap_set_probe_capture_update_speed(self, speed: 'float') -> None: ...
    def particles_create(self) -> 'RID': ...
    def particles_set_mode(self, particles: 'RID', mode: 'RenderingServer__ParticlesMode') -> None: ...
    def particles_set_emitting(self, particles: 'RID', emitting: 'bool') -> None: ...
    def particles_get_emitting(self, particles: 'RID') -> 'bool': ...
    def particles_set_amount(self, particles: 'RID', amount: 'int') -> None: ...
    def particles_set_amount_ratio(self, particles: 'RID', ratio: 'float') -> None: ...
    def particles_set_lifetime(self, particles: 'RID', lifetime: 'float') -> None: ...
    def particles_set_one_shot(self, particles: 'RID', one_shot: 'bool') -> None: ...
    def particles_set_pre_process_time(self, particles: 'RID', time: 'float') -> None: ...
    def particles_request_process_time(self, particles: 'RID', time: 'float') -> None: ...
    def particles_set_explosiveness_ratio(self, particles: 'RID', ratio: 'float') -> None: ...
    def particles_set_randomness_ratio(self, particles: 'RID', ratio: 'float') -> None: ...
    def particles_set_interp_to_end(self, particles: 'RID', factor: 'float') -> None: ...
    def particles_set_emitter_velocity(self, particles: 'RID', velocity: 'Vector3') -> None: ...
    def particles_set_custom_aabb(self, particles: 'RID', aabb: 'AABB') -> None: ...
    def particles_set_speed_scale(self, particles: 'RID', scale: 'float') -> None: ...
    def particles_set_use_local_coordinates(self, particles: 'RID', enable: 'bool') -> None: ...
    def particles_set_process_material(self, particles: 'RID', material: 'RID') -> None: ...
    def particles_set_fixed_fps(self, particles: 'RID', fps: 'int') -> None: ...
    def particles_set_interpolate(self, particles: 'RID', enable: 'bool') -> None: ...
    def particles_set_fractional_delta(self, particles: 'RID', enable: 'bool') -> None: ...
    def particles_set_collision_base_size(self, particles: 'RID', size: 'float') -> None: ...
    def particles_set_transform_align(self, particles: 'RID', align: 'RenderingServer__ParticlesTransformAlign') -> None: ...
    def particles_set_trails(self, particles: 'RID', enable: 'bool', length_sec: 'float') -> None: ...
    def particles_set_trail_bind_poses(self, particles: 'RID', bind_poses: 'Array'['Transform3D']) -> None: ...
    def particles_is_inactive(self, particles: 'RID') -> 'bool': ...
    def particles_request_process(self, particles: 'RID') -> None: ...
    def particles_restart(self, particles: 'RID') -> None: ...
    def particles_set_subemitter(self, particles: 'RID', subemitter_particles: 'RID') -> None: ...
    def particles_emit(self, particles: 'RID', transform: 'Transform3D', velocity: 'Vector3', color: 'Color', custom: 'Color', emit_flags: 'int') -> None: ...
    def particles_set_draw_order(self, particles: 'RID', order: 'RenderingServer__ParticlesDrawOrder') -> None: ...
    def particles_set_draw_passes(self, particles: 'RID', count: 'int') -> None: ...
    def particles_set_draw_pass_mesh(self, particles: 'RID', pass_: 'int', mesh: 'RID') -> None: ...
    def particles_get_current_aabb(self, particles: 'RID') -> 'AABB': ...
    def particles_set_emission_transform(self, particles: 'RID', transform: 'Transform3D') -> None: ...
    def particles_collision_create(self) -> 'RID': ...
    def particles_collision_set_collision_type(self, particles_collision: 'RID', type: 'RenderingServer__ParticlesCollisionType') -> None: ...
    def particles_collision_set_cull_mask(self, particles_collision: 'RID', mask: 'int') -> None: ...
    def particles_collision_set_sphere_radius(self, particles_collision: 'RID', radius: 'float') -> None: ...
    def particles_collision_set_box_extents(self, particles_collision: 'RID', extents: 'Vector3') -> None: ...
    def particles_collision_set_attractor_strength(self, particles_collision: 'RID', strength: 'float') -> None: ...
    def particles_collision_set_attractor_directionality(self, particles_collision: 'RID', amount: 'float') -> None: ...
    def particles_collision_set_attractor_attenuation(self, particles_collision: 'RID', curve: 'float') -> None: ...
    def particles_collision_set_field_texture(self, particles_collision: 'RID', texture: 'RID') -> None: ...
    def particles_collision_height_field_update(self, particles_collision: 'RID') -> None: ...
    def particles_collision_set_height_field_resolution(self, particles_collision: 'RID', resolution: 'RenderingServer__ParticlesCollisionHeightfieldResolution') -> None: ...
    def particles_collision_set_height_field_mask(self, particles_collision: 'RID', mask: 'int') -> None: ...
    def fog_volume_create(self) -> 'RID': ...
    def fog_volume_set_shape(self, fog_volume: 'RID', shape: 'RenderingServer__FogVolumeShape') -> None: ...
    def fog_volume_set_size(self, fog_volume: 'RID', size: 'Vector3') -> None: ...
    def fog_volume_set_material(self, fog_volume: 'RID', material: 'RID') -> None: ...
    def visibility_notifier_create(self) -> 'RID': ...
    def visibility_notifier_set_aabb(self, notifier: 'RID', aabb: 'AABB') -> None: ...
    def visibility_notifier_set_callbacks(self, notifier: 'RID', enter_callable: 'Callable', exit_callable: 'Callable') -> None: ...
    def occluder_create(self) -> 'RID': ...
    def occluder_set_mesh(self, occluder: 'RID', vertices: 'PackedVector3Array', indices: 'PackedInt32Array') -> None: ...
    def camera_create(self) -> 'RID': ...
    def camera_set_perspective(self, camera: 'RID', fovy_degrees: 'float', z_near: 'float', z_far: 'float') -> None: ...
    def camera_set_orthogonal(self, camera: 'RID', size: 'float', z_near: 'float', z_far: 'float') -> None: ...
    def camera_set_frustum(self, camera: 'RID', size: 'float', offset: 'Vector2', z_near: 'float', z_far: 'float') -> None: ...
    def camera_set_transform(self, camera: 'RID', transform: 'Transform3D') -> None: ...
    def camera_set_cull_mask(self, camera: 'RID', layers: 'int') -> None: ...
    def camera_set_environment(self, camera: 'RID', env: 'RID') -> None: ...
    def camera_set_camera_attributes(self, camera: 'RID', effects: 'RID') -> None: ...
    def camera_set_compositor(self, camera: 'RID', compositor: 'RID') -> None: ...
    def camera_set_use_vertical_aspect(self, camera: 'RID', enable: 'bool') -> None: ...
    def viewport_create(self) -> 'RID': ...
    def viewport_set_use_xr(self, viewport: 'RID', use_xr: 'bool') -> None: ...
    def viewport_set_size(self, viewport: 'RID', width: 'int', height: 'int') -> None: ...
    def viewport_set_active(self, viewport: 'RID', active: 'bool') -> None: ...
    def viewport_set_parent_viewport(self, viewport: 'RID', parent_viewport: 'RID') -> None: ...
    def viewport_attach_to_screen(self, viewport: 'RID', rect: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), screen: 'int' = 0) -> None: ...
    def viewport_set_render_direct_to_screen(self, viewport: 'RID', enabled: 'bool') -> None: ...
    def viewport_set_canvas_cull_mask(self, viewport: 'RID', canvas_cull_mask: 'int') -> None: ...
    def viewport_set_scaling_3d_mode(self, viewport: 'RID', scaling_3d_mode: 'RenderingServer__ViewportScaling3DMode') -> None: ...
    def viewport_set_scaling_3d_scale(self, viewport: 'RID', scale: 'float') -> None: ...
    def viewport_set_fsr_sharpness(self, viewport: 'RID', sharpness: 'float') -> None: ...
    def viewport_set_texture_mipmap_bias(self, viewport: 'RID', mipmap_bias: 'float') -> None: ...
    def viewport_set_anisotropic_filtering_level(self, viewport: 'RID', anisotropic_filtering_level: 'RenderingServer__ViewportAnisotropicFiltering') -> None: ...
    def viewport_set_update_mode(self, viewport: 'RID', update_mode: 'RenderingServer__ViewportUpdateMode') -> None: ...
    def viewport_get_update_mode(self, viewport: 'RID') -> 'RenderingServer__ViewportUpdateMode': ...
    def viewport_set_clear_mode(self, viewport: 'RID', clear_mode: 'RenderingServer__ViewportClearMode') -> None: ...
    def viewport_get_render_target(self, viewport: 'RID') -> 'RID': ...
    def viewport_get_texture(self, viewport: 'RID') -> 'RID': ...
    def viewport_set_disable_3d(self, viewport: 'RID', disable: 'bool') -> None: ...
    def viewport_set_disable_2d(self, viewport: 'RID', disable: 'bool') -> None: ...
    def viewport_set_environment_mode(self, viewport: 'RID', mode: 'RenderingServer__ViewportEnvironmentMode') -> None: ...
    def viewport_attach_camera(self, viewport: 'RID', camera: 'RID') -> None: ...
    def viewport_set_scenario(self, viewport: 'RID', scenario: 'RID') -> None: ...
    def viewport_attach_canvas(self, viewport: 'RID', canvas: 'RID') -> None: ...
    def viewport_remove_canvas(self, viewport: 'RID', canvas: 'RID') -> None: ...
    def viewport_set_snap_2d_transforms_to_pixel(self, viewport: 'RID', enabled: 'bool') -> None: ...
    def viewport_set_snap_2d_vertices_to_pixel(self, viewport: 'RID', enabled: 'bool') -> None: ...
    def viewport_set_default_canvas_item_texture_filter(self, viewport: 'RID', filter: 'RenderingServer__CanvasItemTextureFilter') -> None: ...
    def viewport_set_default_canvas_item_texture_repeat(self, viewport: 'RID', repeat: 'RenderingServer__CanvasItemTextureRepeat') -> None: ...
    def viewport_set_canvas_transform(self, viewport: 'RID', canvas: 'RID', offset: 'Transform2D') -> None: ...
    def viewport_set_canvas_stacking(self, viewport: 'RID', canvas: 'RID', layer: 'int', sublayer: 'int') -> None: ...
    def viewport_set_transparent_background(self, viewport: 'RID', enabled: 'bool') -> None: ...
    def viewport_set_global_canvas_transform(self, viewport: 'RID', transform: 'Transform2D') -> None: ...
    def viewport_set_sdf_oversize_and_scale(self, viewport: 'RID', oversize: 'RenderingServer__ViewportSDFOversize', scale: 'RenderingServer__ViewportSDFScale') -> None: ...
    def viewport_set_positional_shadow_atlas_size(self, viewport: 'RID', size: 'int', use_16_bits: 'bool' = False) -> None: ...
    def viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport: 'RID', quadrant: 'int', subdivision: 'int') -> None: ...
    def viewport_set_msaa_3d(self, viewport: 'RID', msaa: 'RenderingServer__ViewportMSAA') -> None: ...
    def viewport_set_msaa_2d(self, viewport: 'RID', msaa: 'RenderingServer__ViewportMSAA') -> None: ...
    def viewport_set_use_hdr_2d(self, viewport: 'RID', enabled: 'bool') -> None: ...
    def viewport_set_screen_space_aa(self, viewport: 'RID', mode: 'RenderingServer__ViewportScreenSpaceAA') -> None: ...
    def viewport_set_use_taa(self, viewport: 'RID', enable: 'bool') -> None: ...
    def viewport_set_use_debanding(self, viewport: 'RID', enable: 'bool') -> None: ...
    def viewport_set_use_occlusion_culling(self, viewport: 'RID', enable: 'bool') -> None: ...
    def viewport_set_occlusion_rays_per_thread(self, rays_per_thread: 'int') -> None: ...
    def viewport_set_occlusion_culling_build_quality(self, quality: 'RenderingServer__ViewportOcclusionCullingBuildQuality') -> None: ...
    def viewport_get_render_info(self, viewport: 'RID', type: 'RenderingServer__ViewportRenderInfoType', info: 'RenderingServer__ViewportRenderInfo') -> 'int': ...
    def viewport_set_debug_draw(self, viewport: 'RID', draw: 'RenderingServer__ViewportDebugDraw') -> None: ...
    def viewport_set_measure_render_time(self, viewport: 'RID', enable: 'bool') -> None: ...
    def viewport_get_measured_render_time_cpu(self, viewport: 'RID') -> 'float': ...
    def viewport_get_measured_render_time_gpu(self, viewport: 'RID') -> 'float': ...
    def viewport_set_vrs_mode(self, viewport: 'RID', mode: 'RenderingServer__ViewportVRSMode') -> None: ...
    def viewport_set_vrs_update_mode(self, viewport: 'RID', mode: 'RenderingServer__ViewportVRSUpdateMode') -> None: ...
    def viewport_set_vrs_texture(self, viewport: 'RID', texture: 'RID') -> None: ...
    def sky_create(self) -> 'RID': ...
    def sky_set_radiance_size(self, sky: 'RID', radiance_size: 'int') -> None: ...
    def sky_set_mode(self, sky: 'RID', mode: 'RenderingServer__SkyMode') -> None: ...
    def sky_set_material(self, sky: 'RID', material: 'RID') -> None: ...
    def sky_bake_panorama(self, sky: 'RID', energy: 'float', bake_irradiance: 'bool', size: 'Vector2i') -> 'Image': ...
    def compositor_effect_create(self) -> 'RID': ...
    def compositor_effect_set_enabled(self, effect: 'RID', enabled: 'bool') -> None: ...
    def compositor_effect_set_callback(self, effect: 'RID', callback_type: 'RenderingServer__CompositorEffectCallbackType', callback: 'Callable') -> None: ...
    def compositor_effect_set_flag(self, effect: 'RID', flag: 'RenderingServer__CompositorEffectFlags', set: 'bool') -> None: ...
    def compositor_create(self) -> 'RID': ...
    def compositor_set_compositor_effects(self, compositor: 'RID', effects: 'Array'['RID']) -> None: ...
    def environment_create(self) -> 'RID': ...
    def environment_set_background(self, env: 'RID', bg: 'RenderingServer__EnvironmentBG') -> None: ...
    def environment_set_camera_id(self, env: 'RID', id: 'int') -> None: ...
    def environment_set_sky(self, env: 'RID', sky: 'RID') -> None: ...
    def environment_set_sky_custom_fov(self, env: 'RID', scale: 'float') -> None: ...
    def environment_set_sky_orientation(self, env: 'RID', orientation: 'Basis') -> None: ...
    def environment_set_bg_color(self, env: 'RID', color: 'Color') -> None: ...
    def environment_set_bg_energy(self, env: 'RID', multiplier: 'float', exposure_value: 'float') -> None: ...
    def environment_set_canvas_max_layer(self, env: 'RID', max_layer: 'int') -> None: ...
    def environment_set_ambient_light(self, env: 'RID', color: 'Color', ambient: 'RenderingServer__EnvironmentAmbientSource' = 0, energy: 'float' = 1.0, sky_contribution: 'float' = 0.0, reflection_source: 'RenderingServer__EnvironmentReflectionSource' = 0) -> None: ...
    def environment_set_glow(self, env: 'RID', enable: 'bool', levels: 'PackedFloat32Array', intensity: 'float', strength: 'float', mix: 'float', bloom_threshold: 'float', blend_mode: 'RenderingServer__EnvironmentGlowBlendMode', hdr_bleed_threshold: 'float', hdr_bleed_scale: 'float', hdr_luminance_cap: 'float', glow_map_strength: 'float', glow_map: 'RID') -> None: ...
    def environment_set_tonemap(self, env: 'RID', tone_mapper: 'RenderingServer__EnvironmentToneMapper', exposure: 'float', white: 'float') -> None: ...
    def environment_set_adjustment(self, env: 'RID', enable: 'bool', brightness: 'float', contrast: 'float', saturation: 'float', use_1d_color_correction: 'bool', color_correction: 'RID') -> None: ...
    def environment_set_ssr(self, env: 'RID', enable: 'bool', max_steps: 'int', fade_in: 'float', fade_out: 'float', depth_tolerance: 'float') -> None: ...
    def environment_set_ssao(self, env: 'RID', enable: 'bool', radius: 'float', intensity: 'float', power: 'float', detail: 'float', horizon: 'float', sharpness: 'float', light_affect: 'float', ao_channel_affect: 'float') -> None: ...
    def environment_set_fog(self, env: 'RID', enable: 'bool', light_color: 'Color', light_energy: 'float', sun_scatter: 'float', density: 'float', height: 'float', height_density: 'float', aerial_perspective: 'float', sky_affect: 'float', fog_mode: 'RenderingServer__EnvironmentFogMode' = 0) -> None: ...
    def environment_set_sdfgi(self, env: 'RID', enable: 'bool', cascades: 'int', min_cell_size: 'float', y_scale: 'RenderingServer__EnvironmentSDFGIYScale', use_occlusion: 'bool', bounce_feedback: 'float', read_sky: 'bool', energy: 'float', normal_bias: 'float', probe_bias: 'float') -> None: ...
    def environment_set_volumetric_fog(self, env: 'RID', enable: 'bool', density: 'float', albedo: 'Color', emission: 'Color', emission_energy: 'float', anisotropy: 'float', length: 'float', p_detail_spread: 'float', gi_inject: 'float', temporal_reprojection: 'bool', temporal_reprojection_amount: 'float', ambient_inject: 'float', sky_affect: 'float') -> None: ...
    def environment_glow_set_use_bicubic_upscale(self, enable: 'bool') -> None: ...
    def environment_set_ssr_roughness_quality(self, quality: 'RenderingServer__EnvironmentSSRRoughnessQuality') -> None: ...
    def environment_set_ssao_quality(self, quality: 'RenderingServer__EnvironmentSSAOQuality', half_size: 'bool', adaptive_target: 'float', blur_passes: 'int', fadeout_from: 'float', fadeout_to: 'float') -> None: ...
    def environment_set_ssil_quality(self, quality: 'RenderingServer__EnvironmentSSILQuality', half_size: 'bool', adaptive_target: 'float', blur_passes: 'int', fadeout_from: 'float', fadeout_to: 'float') -> None: ...
    def environment_set_sdfgi_ray_count(self, ray_count: 'RenderingServer__EnvironmentSDFGIRayCount') -> None: ...
    def environment_set_sdfgi_frames_to_converge(self, frames: 'RenderingServer__EnvironmentSDFGIFramesToConverge') -> None: ...
    def environment_set_sdfgi_frames_to_update_light(self, frames: 'RenderingServer__EnvironmentSDFGIFramesToUpdateLight') -> None: ...
    def environment_set_volumetric_fog_volume_size(self, size: 'int', depth: 'int') -> None: ...
    def environment_set_volumetric_fog_filter_active(self, active: 'bool') -> None: ...
    def environment_bake_panorama(self, environment: 'RID', bake_irradiance: 'bool', size: 'Vector2i') -> 'Image': ...
    def screen_space_roughness_limiter_set_active(self, enable: 'bool', amount: 'float', limit: 'float') -> None: ...
    def sub_surface_scattering_set_quality(self, quality: 'RenderingServer__SubSurfaceScatteringQuality') -> None: ...
    def sub_surface_scattering_set_scale(self, scale: 'float', depth_scale: 'float') -> None: ...
    def camera_attributes_create(self) -> 'RID': ...
    def camera_attributes_set_dof_blur_quality(self, quality: 'RenderingServer__DOFBlurQuality', use_jitter: 'bool') -> None: ...
    def camera_attributes_set_dof_blur_bokeh_shape(self, shape: 'RenderingServer__DOFBokehShape') -> None: ...
    def camera_attributes_set_dof_blur(self, camera_attributes: 'RID', far_enable: 'bool', far_distance: 'float', far_transition: 'float', near_enable: 'bool', near_distance: 'float', near_transition: 'float', amount: 'float') -> None: ...
    def camera_attributes_set_exposure(self, camera_attributes: 'RID', multiplier: 'float', normalization: 'float') -> None: ...
    def camera_attributes_set_auto_exposure(self, camera_attributes: 'RID', enable: 'bool', min_sensitivity: 'float', max_sensitivity: 'float', speed: 'float', scale: 'float') -> None: ...
    def scenario_create(self) -> 'RID': ...
    def scenario_set_environment(self, scenario: 'RID', environment: 'RID') -> None: ...
    def scenario_set_fallback_environment(self, scenario: 'RID', environment: 'RID') -> None: ...
    def scenario_set_camera_attributes(self, scenario: 'RID', effects: 'RID') -> None: ...
    def scenario_set_compositor(self, scenario: 'RID', compositor: 'RID') -> None: ...
    def instance_create2(self, base: 'RID', scenario: 'RID') -> 'RID': ...
    def instance_create(self) -> 'RID': ...
    def instance_set_base(self, instance: 'RID', base: 'RID') -> None: ...
    def instance_set_scenario(self, instance: 'RID', scenario: 'RID') -> None: ...
    def instance_set_layer_mask(self, instance: 'RID', mask: 'int') -> None: ...
    def instance_set_pivot_data(self, instance: 'RID', sorting_offset: 'float', use_aabb_center: 'bool') -> None: ...
    def instance_set_transform(self, instance: 'RID', transform: 'Transform3D') -> None: ...
    def instance_set_interpolated(self, instance: 'RID', interpolated: 'bool') -> None: ...
    def instance_reset_physics_interpolation(self, instance: 'RID') -> None: ...
    def instance_attach_object_instance_id(self, instance: 'RID', id: 'int') -> None: ...
    def instance_set_blend_shape_weight(self, instance: 'RID', shape: 'int', weight: 'float') -> None: ...
    def instance_set_surface_override_material(self, instance: 'RID', surface: 'int', material: 'RID') -> None: ...
    def instance_set_visible(self, instance: 'RID', visible: 'bool') -> None: ...
    def instance_geometry_set_transparency(self, instance: 'RID', transparency: 'float') -> None: ...
    def instance_set_custom_aabb(self, instance: 'RID', aabb: 'AABB') -> None: ...
    def instance_attach_skeleton(self, instance: 'RID', skeleton: 'RID') -> None: ...
    def instance_set_extra_visibility_margin(self, instance: 'RID', margin: 'float') -> None: ...
    def instance_set_visibility_parent(self, instance: 'RID', parent: 'RID') -> None: ...
    def instance_set_ignore_culling(self, instance: 'RID', enabled: 'bool') -> None: ...
    def instance_geometry_set_flag(self, instance: 'RID', flag: 'RenderingServer__InstanceFlags', enabled: 'bool') -> None: ...
    def instance_geometry_set_cast_shadows_setting(self, instance: 'RID', shadow_casting_setting: 'RenderingServer__ShadowCastingSetting') -> None: ...
    def instance_geometry_set_material_override(self, instance: 'RID', material: 'RID') -> None: ...
    def instance_geometry_set_material_overlay(self, instance: 'RID', material: 'RID') -> None: ...
    def instance_geometry_set_visibility_range(self, instance: 'RID', min: 'float', max: 'float', min_margin: 'float', max_margin: 'float', fade_mode: 'RenderingServer__VisibilityRangeFadeMode') -> None: ...
    def instance_geometry_set_lightmap(self, instance: 'RID', lightmap: 'RID', lightmap_uv_scale: 'Rect2', lightmap_slice: 'int') -> None: ...
    def instance_geometry_set_lod_bias(self, instance: 'RID', lod_bias: 'float') -> None: ...
    def instance_geometry_set_shader_parameter(self, instance: 'RID', parameter: 'StringName', value: 'Variant') -> None: ...
    def instance_geometry_get_shader_parameter(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def instance_geometry_get_shader_parameter_default_value(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def instance_geometry_get_shader_parameter_list(self, instance: 'RID') -> 'Array'['Dictionary']: ...
    def instances_cull_aabb(self, aabb: 'AABB', scenario: 'RID' = default('''RID()''')) -> 'PackedInt64Array': ...
    def instances_cull_ray(self, from_: 'Vector3', to: 'Vector3', scenario: 'RID' = default('''RID()''')) -> 'PackedInt64Array': ...
    def instances_cull_convex(self, convex: 'Array'['Plane'], scenario: 'RID' = default('''RID()''')) -> 'PackedInt64Array': ...
    def bake_render_uv2(self, base: 'RID', material_overrides: 'Array'['RID'], image_size: 'Vector2i') -> 'Array'['Image']: ...
    def canvas_create(self) -> 'RID': ...
    def canvas_set_item_mirroring(self, canvas: 'RID', item: 'RID', mirroring: 'Vector2') -> None: ...
    def canvas_set_item_repeat(self, item: 'RID', repeat_size: 'Vector2', repeat_times: 'int') -> None: ...
    def canvas_set_modulate(self, canvas: 'RID', color: 'Color') -> None: ...
    def canvas_set_disable_scale(self, disable: 'bool') -> None: ...
    def canvas_texture_create(self) -> 'RID': ...
    def canvas_texture_set_channel(self, canvas_texture: 'RID', channel: 'RenderingServer__CanvasTextureChannel', texture: 'RID') -> None: ...
    def canvas_texture_set_shading_parameters(self, canvas_texture: 'RID', base_color: 'Color', shininess: 'float') -> None: ...
    def canvas_texture_set_texture_filter(self, canvas_texture: 'RID', filter: 'RenderingServer__CanvasItemTextureFilter') -> None: ...
    def canvas_texture_set_texture_repeat(self, canvas_texture: 'RID', repeat: 'RenderingServer__CanvasItemTextureRepeat') -> None: ...
    def canvas_item_create(self) -> 'RID': ...
    def canvas_item_set_parent(self, item: 'RID', parent: 'RID') -> None: ...
    def canvas_item_set_default_texture_filter(self, item: 'RID', filter: 'RenderingServer__CanvasItemTextureFilter') -> None: ...
    def canvas_item_set_default_texture_repeat(self, item: 'RID', repeat: 'RenderingServer__CanvasItemTextureRepeat') -> None: ...
    def canvas_item_set_visible(self, item: 'RID', visible: 'bool') -> None: ...
    def canvas_item_set_light_mask(self, item: 'RID', mask: 'int') -> None: ...
    def canvas_item_set_visibility_layer(self, item: 'RID', visibility_layer: 'int') -> None: ...
    def canvas_item_set_transform(self, item: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_item_set_clip(self, item: 'RID', clip: 'bool') -> None: ...
    def canvas_item_set_distance_field_mode(self, item: 'RID', enabled: 'bool') -> None: ...
    def canvas_item_set_custom_rect(self, item: 'RID', use_custom_rect: 'bool', rect: 'Rect2' = default('''Rect2(0, 0, 0, 0)''')) -> None: ...
    def canvas_item_set_modulate(self, item: 'RID', color: 'Color') -> None: ...
    def canvas_item_set_self_modulate(self, item: 'RID', color: 'Color') -> None: ...
    def canvas_item_set_draw_behind_parent(self, item: 'RID', enabled: 'bool') -> None: ...
    def canvas_item_set_interpolated(self, item: 'RID', interpolated: 'bool') -> None: ...
    def canvas_item_reset_physics_interpolation(self, item: 'RID') -> None: ...
    def canvas_item_transform_physics_interpolation(self, item: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_item_add_line(self, item: 'RID', from_: 'Vector2', to: 'Vector2', color: 'Color', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def canvas_item_add_polyline(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def canvas_item_add_multiline(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', width: 'float' = -1.0, antialiased: 'bool' = False) -> None: ...
    def canvas_item_add_rect(self, item: 'RID', rect: 'Rect2', color: 'Color', antialiased: 'bool' = False) -> None: ...
    def canvas_item_add_circle(self, item: 'RID', pos: 'Vector2', radius: 'float', color: 'Color', antialiased: 'bool' = False) -> None: ...
    def canvas_item_add_texture_rect(self, item: 'RID', rect: 'Rect2', texture: 'RID', tile: 'bool' = False, modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False) -> None: ...
    def canvas_item_add_msdf_texture_rect_region(self, item: 'RID', rect: 'Rect2', texture: 'RID', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), outline_size: 'int' = 0, px_range: 'float' = 1.0, scale: 'float' = 1.0) -> None: ...
    def canvas_item_add_lcd_texture_rect_region(self, item: 'RID', rect: 'Rect2', texture: 'RID', src_rect: 'Rect2', modulate: 'Color') -> None: ...
    def canvas_item_add_texture_rect_region(self, item: 'RID', rect: 'Rect2', texture: 'RID', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False, clip_uv: 'bool' = True) -> None: ...
    def canvas_item_add_nine_patch(self, item: 'RID', rect: 'Rect2', source: 'Rect2', texture: 'RID', topleft: 'Vector2', bottomright: 'Vector2', x_axis_mode: 'RenderingServer__NinePatchAxisMode' = 0, y_axis_mode: 'RenderingServer__NinePatchAxisMode' = 0, draw_center: 'bool' = True, modulate: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def canvas_item_add_primitive(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array', texture: 'RID') -> None: ...
    def canvas_item_add_polygon(self, item: 'RID', points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), texture: 'RID' = default('''RID()''')) -> None: ...
    def canvas_item_add_triangle_array(self, item: 'RID', indices: 'PackedInt32Array', points: 'PackedVector2Array', colors: 'PackedColorArray', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), bones: 'PackedInt32Array' = default('''PackedInt32Array()'''), weights: 'PackedFloat32Array' = default('''PackedFloat32Array()'''), texture: 'RID' = default('''RID()'''), count: 'int' = -1) -> None: ...
    def canvas_item_add_mesh(self, item: 'RID', mesh: 'RID', transform: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)'''), modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), texture: 'RID' = default('''RID()''')) -> None: ...
    def canvas_item_add_multimesh(self, item: 'RID', mesh: 'RID', texture: 'RID' = default('''RID()''')) -> None: ...
    def canvas_item_add_particles(self, item: 'RID', particles: 'RID', texture: 'RID') -> None: ...
    def canvas_item_add_set_transform(self, item: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_item_add_clip_ignore(self, item: 'RID', ignore: 'bool') -> None: ...
    def canvas_item_add_animation_slice(self, item: 'RID', animation_length: 'float', slice_begin: 'float', slice_end: 'float', offset: 'float' = 0.0) -> None: ...
    def canvas_item_set_sort_children_by_y(self, item: 'RID', enabled: 'bool') -> None: ...
    def canvas_item_set_z_index(self, item: 'RID', z_index: 'int') -> None: ...
    def canvas_item_set_z_as_relative_to_parent(self, item: 'RID', enabled: 'bool') -> None: ...
    def canvas_item_set_copy_to_backbuffer(self, item: 'RID', enabled: 'bool', rect: 'Rect2') -> None: ...
    def canvas_item_attach_skeleton(self, item: 'RID', skeleton: 'RID') -> None: ...
    def canvas_item_clear(self, item: 'RID') -> None: ...
    def canvas_item_set_draw_index(self, item: 'RID', index: 'int') -> None: ...
    def canvas_item_set_material(self, item: 'RID', material: 'RID') -> None: ...
    def canvas_item_set_use_parent_material(self, item: 'RID', enabled: 'bool') -> None: ...
    def canvas_item_set_instance_shader_parameter(self, instance: 'RID', parameter: 'StringName', value: 'Variant') -> None: ...
    def canvas_item_get_instance_shader_parameter(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def canvas_item_get_instance_shader_parameter_default_value(self, instance: 'RID', parameter: 'StringName') -> 'Variant': ...
    def canvas_item_get_instance_shader_parameter_list(self, instance: 'RID') -> 'Array'['Dictionary']: ...
    def canvas_item_set_visibility_notifier(self, item: 'RID', enable: 'bool', area: 'Rect2', enter_callable: 'Callable', exit_callable: 'Callable') -> None: ...
    def canvas_item_set_canvas_group_mode(self, item: 'RID', mode: 'RenderingServer__CanvasGroupMode', clear_margin: 'float' = 5.0, fit_empty: 'bool' = False, fit_margin: 'float' = 0.0, blur_mipmaps: 'bool' = False) -> None: ...
    def debug_canvas_item_get_rect(self, item: 'RID') -> 'Rect2': ...
    def canvas_light_create(self) -> 'RID': ...
    def canvas_light_attach_to_canvas(self, light: 'RID', canvas: 'RID') -> None: ...
    def canvas_light_set_enabled(self, light: 'RID', enabled: 'bool') -> None: ...
    def canvas_light_set_texture_scale(self, light: 'RID', scale: 'float') -> None: ...
    def canvas_light_set_transform(self, light: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_light_set_texture(self, light: 'RID', texture: 'RID') -> None: ...
    def canvas_light_set_texture_offset(self, light: 'RID', offset: 'Vector2') -> None: ...
    def canvas_light_set_color(self, light: 'RID', color: 'Color') -> None: ...
    def canvas_light_set_height(self, light: 'RID', height: 'float') -> None: ...
    def canvas_light_set_energy(self, light: 'RID', energy: 'float') -> None: ...
    def canvas_light_set_z_range(self, light: 'RID', min_z: 'int', max_z: 'int') -> None: ...
    def canvas_light_set_layer_range(self, light: 'RID', min_layer: 'int', max_layer: 'int') -> None: ...
    def canvas_light_set_item_cull_mask(self, light: 'RID', mask: 'int') -> None: ...
    def canvas_light_set_item_shadow_cull_mask(self, light: 'RID', mask: 'int') -> None: ...
    def canvas_light_set_mode(self, light: 'RID', mode: 'RenderingServer__CanvasLightMode') -> None: ...
    def canvas_light_set_shadow_enabled(self, light: 'RID', enabled: 'bool') -> None: ...
    def canvas_light_set_shadow_filter(self, light: 'RID', filter: 'RenderingServer__CanvasLightShadowFilter') -> None: ...
    def canvas_light_set_shadow_color(self, light: 'RID', color: 'Color') -> None: ...
    def canvas_light_set_shadow_smooth(self, light: 'RID', smooth: 'float') -> None: ...
    def canvas_light_set_blend_mode(self, light: 'RID', mode: 'RenderingServer__CanvasLightBlendMode') -> None: ...
    def canvas_light_set_interpolated(self, light: 'RID', interpolated: 'bool') -> None: ...
    def canvas_light_reset_physics_interpolation(self, light: 'RID') -> None: ...
    def canvas_light_transform_physics_interpolation(self, light: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_light_occluder_create(self) -> 'RID': ...
    def canvas_light_occluder_attach_to_canvas(self, occluder: 'RID', canvas: 'RID') -> None: ...
    def canvas_light_occluder_set_enabled(self, occluder: 'RID', enabled: 'bool') -> None: ...
    def canvas_light_occluder_set_polygon(self, occluder: 'RID', polygon: 'RID') -> None: ...
    def canvas_light_occluder_set_as_sdf_collision(self, occluder: 'RID', enable: 'bool') -> None: ...
    def canvas_light_occluder_set_transform(self, occluder: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_light_occluder_set_light_mask(self, occluder: 'RID', mask: 'int') -> None: ...
    def canvas_light_occluder_set_interpolated(self, occluder: 'RID', interpolated: 'bool') -> None: ...
    def canvas_light_occluder_reset_physics_interpolation(self, occluder: 'RID') -> None: ...
    def canvas_light_occluder_transform_physics_interpolation(self, occluder: 'RID', transform: 'Transform2D') -> None: ...
    def canvas_occluder_polygon_create(self) -> 'RID': ...
    def canvas_occluder_polygon_set_shape(self, occluder_polygon: 'RID', shape: 'PackedVector2Array', closed: 'bool') -> None: ...
    def canvas_occluder_polygon_set_cull_mode(self, occluder_polygon: 'RID', mode: 'RenderingServer__CanvasOccluderPolygonCullMode') -> None: ...
    def canvas_set_shadow_texture_size(self, size: 'int') -> None: ...
    def global_shader_parameter_add(self, name: 'StringName', type: 'RenderingServer__GlobalShaderParameterType', default_value: 'Variant') -> None: ...
    def global_shader_parameter_remove(self, name: 'StringName') -> None: ...
    def global_shader_parameter_get_list(self) -> 'Array'['StringName']: ...
    def global_shader_parameter_set(self, name: 'StringName', value: 'Variant') -> None: ...
    def global_shader_parameter_set_override(self, name: 'StringName', value: 'Variant') -> None: ...
    def global_shader_parameter_get(self, name: 'StringName') -> 'Variant': ...
    def global_shader_parameter_get_type(self, name: 'StringName') -> 'RenderingServer__GlobalShaderParameterType': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def request_frame_drawn_callback(self, callable: 'Callable') -> None: ...
    def has_changed(self) -> 'bool': ...
    def get_rendering_info(self, info: 'RenderingServer__RenderingInfo') -> 'int': ...
    def get_video_adapter_name(self) -> 'str': ...
    def get_video_adapter_vendor(self) -> 'str': ...
    def get_video_adapter_type(self) -> 'RenderingDevice__DeviceType': ...
    def get_video_adapter_api_version(self) -> 'str': ...
    def get_current_rendering_driver_name(self) -> 'str': ...
    def get_current_rendering_method(self) -> 'str': ...
    def make_sphere_mesh(self, latitudes: 'int', longitudes: 'int', radius: 'float') -> 'RID': ...
    def get_test_cube(self) -> 'RID': ...
    def get_test_texture(self) -> 'RID': ...
    def get_white_texture(self) -> 'RID': ...
    def set_boot_image(self, image: 'Image', color: 'Color', scale: 'bool', use_filter: 'bool' = True) -> None: ...
    def get_default_clear_color(self) -> 'Color': ...
    def set_default_clear_color(self, color: 'Color') -> None: ...
    def has_os_feature(self, feature: 'str') -> 'bool': ...
    def set_debug_generate_wireframes(self, generate: 'bool') -> None: ...
    def is_render_loop_enabled(self) -> 'bool': ...
    def set_render_loop_enabled(self, enabled: 'bool') -> None: ...
    def get_frame_setup_time_cpu(self) -> 'float': ...
    def force_sync(self) -> None: ...
    def force_draw(self, swap_buffers: 'bool' = True, frame_step: 'float' = 0.0) -> None: ...
    def get_rendering_device(self) -> 'RenderingDevice': ...
    def create_local_rendering_device(self) -> 'RenderingDevice': ...
    def is_on_render_thread(self) -> 'bool': ...
    def call_on_render_thread(self, callable: 'Callable') -> None: ...
    def has_feature(self, feature: 'RenderingServer__Features') -> 'bool': ...


class Resource(RefCounted):


    resource_local_to_scene: 'bool'
    resource_path: 'str'
    resource_name: 'str'
    resource_scene_unique_id: 'str'
    changed: 'Signal[Callable[[], None]]'  # changed()
    setup_local_to_scene_requested: 'Signal[Callable[[], None]]'  # setup_local_to_scene_requested()

    def _setup_local_to_scene(self) -> None: ...
    def _get_rid(self) -> 'RID': ...
    def _reset_state(self) -> None: ...
    def _set_path_cache(self, path: 'str') -> None: ...
    def set_path(self, path: 'str') -> None: ...
    def take_over_path(self, path: 'str') -> None: ...
    def get_path(self) -> 'str': ...
    def set_path_cache(self, path: 'str') -> None: ...
    def set_name(self, name: 'str') -> None: ...
    def get_name(self) -> 'str': ...
    def get_rid(self) -> 'RID': ...
    def set_local_to_scene(self, enable: 'bool') -> None: ...
    def is_local_to_scene(self) -> 'bool': ...
    def get_local_scene(self) -> 'Node': ...
    def setup_local_to_scene(self) -> None: ...
    def reset_state(self) -> None: ...
    def set_id_for_path(self, path: 'str', id: 'str') -> None: ...
    def get_id_for_path(self, path: 'str') -> 'str': ...
    def is_built_in(self) -> 'bool': ...
    @staticmethod
    def generate_scene_unique_id() -> 'str': ...
    def set_scene_unique_id(self, id: 'str') -> None: ...
    def get_scene_unique_id(self) -> 'str': ...
    def emit_changed(self) -> None: ...
    def duplicate(self, subresources: 'bool' = False) -> 'Resource': ...


class ResourceFormatLoader(RefCounted):



    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _recognize_path(self, path: 'str', type: 'StringName') -> 'bool': ...
    def _handles_type(self, type: 'StringName') -> 'bool': ...
    def _get_resource_type(self, path: 'str') -> 'str': ...
    def _get_resource_script_class(self, path: 'str') -> 'str': ...
    def _get_resource_uid(self, path: 'str') -> 'int': ...
    def _get_dependencies(self, path: 'str', add_types: 'bool') -> 'PackedStringArray': ...
    def _rename_dependencies(self, path: 'str', renames: 'Dictionary') -> 'Error': ...
    def _exists(self, path: 'str') -> 'bool': ...
    def _get_classes_used(self, path: 'str') -> 'PackedStringArray': ...
    def _load(self, path: 'str', original_path: 'str', use_sub_threads: 'bool', cache_mode: 'int') -> 'Variant': ...


class ResourceFormatSaver(RefCounted):



    def _save(self, resource: 'Resource', path: 'str', flags: 'int') -> 'Error': ...
    def _set_uid(self, path: 'str', uid: 'int') -> 'Error': ...
    def _recognize(self, resource: 'Resource') -> 'bool': ...
    def _get_recognized_extensions(self, resource: 'Resource') -> 'PackedStringArray': ...
    def _recognize_path(self, resource: 'Resource', path: 'str') -> 'bool': ...


class ResourceImporter(RefCounted): ...


class ResourceImporterBMFont(ResourceImporter): ...


class ResourceImporterBitMap(ResourceImporter): ...


class ResourceImporterCSVTranslation(ResourceImporter): ...


class ResourceImporterDynamicFont(ResourceImporter): ...


class ResourceImporterImage(ResourceImporter): ...


class ResourceImporterImageFont(ResourceImporter): ...


class ResourceImporterLayeredTexture(ResourceImporter): ...


class ResourceImporterMP3(ResourceImporter): ...


class ResourceImporterOBJ(ResourceImporter): ...


class ResourceImporterOggVorbis(ResourceImporter):



    @staticmethod
    def load_from_buffer(stream_data: 'PackedByteArray') -> 'AudioStreamOggVorbis': ...
    @staticmethod
    def load_from_file(path: 'str') -> 'AudioStreamOggVorbis': ...


class ResourceImporterScene(ResourceImporter): ...


class ResourceImporterShaderFile(ResourceImporter): ...


class ResourceImporterTexture(ResourceImporter): ...


class ResourceImporterTextureAtlas(ResourceImporter): ...


class ResourceImporterWAV(ResourceImporter): ...


class ResourceLoader(Object):



    def load_threaded_request(self, path: 'str', type_hint: 'str' = "", use_sub_threads: 'bool' = False, cache_mode: 'ResourceLoader__CacheMode' = 1) -> 'Error': ...
    def load_threaded_get_status(self, path: 'str', progress: 'Array' = default('''[]''')) -> 'ResourceLoader__ThreadLoadStatus': ...
    def load_threaded_get(self, path: 'str') -> 'Resource': ...
    def load(self, path: 'str', type_hint: 'str' = "", cache_mode: 'ResourceLoader__CacheMode' = 1) -> 'Resource': ...
    def get_recognized_extensions_for_type(self, type: 'str') -> 'PackedStringArray': ...
    def add_resource_format_loader(self, format_loader: 'ResourceFormatLoader', at_front: 'bool' = False) -> None: ...
    def remove_resource_format_loader(self, format_loader: 'ResourceFormatLoader') -> None: ...
    def set_abort_on_missing_resources(self, abort: 'bool') -> None: ...
    def get_dependencies(self, path: 'str') -> 'PackedStringArray': ...
    def has_cached(self, path: 'str') -> 'bool': ...
    def get_cached_ref(self, path: 'str') -> 'Resource': ...
    def exists(self, path: 'str', type_hint: 'str' = "") -> 'bool': ...
    def get_resource_uid(self, path: 'str') -> 'int': ...
    def list_directory(self, directory_path: 'str') -> 'PackedStringArray': ...


class ResourcePreloader(Node):


    resources: 'Array'

    def add_resource(self, name: 'StringName', resource: 'Resource') -> None: ...
    def remove_resource(self, name: 'StringName') -> None: ...
    def rename_resource(self, name: 'StringName', newname: 'StringName') -> None: ...
    def has_resource(self, name: 'StringName') -> 'bool': ...
    def get_resource(self, name: 'StringName') -> 'Resource': ...
    def get_resource_list(self) -> 'PackedStringArray': ...


class ResourceSaver(Object):



    def save(self, resource: 'Resource', path: 'str' = "", flags: 'ResourceSaver__SaverFlags' = 0) -> 'Error': ...
    def get_recognized_extensions(self, type: 'Resource') -> 'PackedStringArray': ...
    def add_resource_format_saver(self, format_saver: 'ResourceFormatSaver', at_front: 'bool' = False) -> None: ...
    def remove_resource_format_saver(self, format_saver: 'ResourceFormatSaver') -> None: ...
    def get_resource_id_for_path(self, path: 'str', generate: 'bool' = False) -> 'int': ...


class ResourceUID(Object):


    INVALID_ID: 'int' = -1

    def id_to_text(self, id: 'int') -> 'str': ...
    def text_to_id(self, text_id: 'str') -> 'int': ...
    def create_id(self) -> 'int': ...
    def has_id(self, id: 'int') -> 'bool': ...
    def add_id(self, id: 'int', path: 'str') -> None: ...
    def set_id(self, id: 'int', path: 'str') -> None: ...
    def get_id_path(self, id: 'int') -> 'str': ...
    def remove_id(self, id: 'int') -> None: ...


class RetargetModifier3D(SkeletonModifier3D):


    profile: 'SkeletonProfile'
    use_global_pose: 'bool'
    enable: 'int'

    def set_profile(self, profile: 'SkeletonProfile') -> None: ...
    def get_profile(self) -> 'SkeletonProfile': ...
    def set_use_global_pose(self, use_global_pose: 'bool') -> None: ...
    def is_using_global_pose(self) -> 'bool': ...
    def set_enable_flags(self, enable_flags: 'RetargetModifier3D__TransformFlag') -> None: ...
    def get_enable_flags(self) -> 'RetargetModifier3D__TransformFlag': ...
    def set_position_enabled(self, enabled: 'bool') -> None: ...
    def is_position_enabled(self) -> 'bool': ...
    def set_rotation_enabled(self, enabled: 'bool') -> None: ...
    def is_rotation_enabled(self) -> 'bool': ...
    def set_scale_enabled(self, enabled: 'bool') -> None: ...
    def is_scale_enabled(self) -> 'bool': ...


class RibbonTrailMesh(PrimitiveMesh):


    shape: 'int'
    size: 'float'
    sections: 'int'
    section_length: 'float'
    section_segments: 'int'
    curve: 'Curve'

    def set_size(self, size: 'float') -> None: ...
    def get_size(self) -> 'float': ...
    def set_sections(self, sections: 'int') -> None: ...
    def get_sections(self) -> 'int': ...
    def set_section_length(self, section_length: 'float') -> None: ...
    def get_section_length(self) -> 'float': ...
    def set_section_segments(self, section_segments: 'int') -> None: ...
    def get_section_segments(self) -> 'int': ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...
    def set_shape(self, shape: 'RibbonTrailMesh__Shape') -> None: ...
    def get_shape(self) -> 'RibbonTrailMesh__Shape': ...


class RichTextEffect(Resource):



    def _process_custom_fx(self, char_fx: 'CharFXTransform') -> 'bool': ...


class RichTextLabel(Control):


    bbcode_enabled: 'bool'
    text: 'str'
    fit_content: 'bool'
    scroll_active: 'bool'
    scroll_following: 'bool'
    autowrap_mode: 'int'
    tab_size: 'int'
    context_menu_enabled: 'bool'
    shortcut_keys_enabled: 'bool'
    horizontal_alignment: 'int'
    vertical_alignment: 'int'
    justification_flags: 'int'
    tab_stops: 'PackedFloat32Array'
    custom_effects: 'Array'['RichTextEffect']
    meta_underlined: 'bool'
    hint_underlined: 'bool'
    threaded: 'bool'
    progress_bar_delay: 'int'
    selection_enabled: 'bool'
    deselect_on_focus_loss_enabled: 'bool'
    drag_and_drop_selection_enabled: 'bool'
    visible_characters: 'int'
    visible_characters_behavior: 'int'
    visible_ratio: 'float'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'
    meta_clicked: 'Signal[Callable[[Variant], None]]'  # meta_clicked(meta: Variant)
    meta_hover_started: 'Signal[Callable[[Variant], None]]'  # meta_hover_started(meta: Variant)
    meta_hover_ended: 'Signal[Callable[[Variant], None]]'  # meta_hover_ended(meta: Variant)
    finished: 'Signal[Callable[[], None]]'  # finished()

    def get_parsed_text(self) -> 'str': ...
    def add_text(self, text: 'str') -> None: ...
    def set_text(self, text: 'str') -> None: ...
    def add_image(self, image: 'Texture2D', width: 'int' = 0, height: 'int' = 0, color: 'Color' = default('''Color(1, 1, 1, 1)'''), inline_align: 'InlineAlignment' = 5, region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), key: 'Variant' = default('''null'''), pad: 'bool' = False, tooltip: 'str' = "", size_in_percent: 'bool' = False) -> None: ...
    def update_image(self, key: 'Variant', mask: 'RichTextLabel__ImageUpdateMask', image: 'Texture2D', width: 'int' = 0, height: 'int' = 0, color: 'Color' = default('''Color(1, 1, 1, 1)'''), inline_align: 'InlineAlignment' = 5, region: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), pad: 'bool' = False, tooltip: 'str' = "", size_in_percent: 'bool' = False) -> None: ...
    def newline(self) -> None: ...
    def remove_paragraph(self, paragraph: 'int', no_invalidate: 'bool' = False) -> 'bool': ...
    def invalidate_paragraph(self, paragraph: 'int') -> 'bool': ...
    def push_font(self, font: 'Font', font_size: 'int' = 0) -> None: ...
    def push_font_size(self, font_size: 'int') -> None: ...
    def push_normal(self) -> None: ...
    def push_bold(self) -> None: ...
    def push_bold_italics(self) -> None: ...
    def push_italics(self) -> None: ...
    def push_mono(self) -> None: ...
    def push_color(self, color: 'Color') -> None: ...
    def push_outline_size(self, outline_size: 'int') -> None: ...
    def push_outline_color(self, color: 'Color') -> None: ...
    def push_paragraph(self, alignment: 'HorizontalAlignment', base_direction: 'Control__TextDirection' = 0, language: 'str' = "", st_parser: 'TextServer__StructuredTextParser' = 0, justification_flags: 'TextServer__JustificationFlag' = 163, tab_stops: 'PackedFloat32Array' = default('''PackedFloat32Array()''')) -> None: ...
    def push_indent(self, level: 'int') -> None: ...
    def push_list(self, level: 'int', type: 'RichTextLabel__ListType', capitalize: 'bool', bullet: 'str' = "•") -> None: ...
    def push_meta(self, data: 'Variant', underline_mode: 'RichTextLabel__MetaUnderline' = 1, tooltip: 'str' = "") -> None: ...
    def push_hint(self, description: 'str') -> None: ...
    def push_language(self, language: 'str') -> None: ...
    def push_underline(self) -> None: ...
    def push_strikethrough(self) -> None: ...
    def push_table(self, columns: 'int', inline_align: 'InlineAlignment' = 0, align_to_row: 'int' = -1) -> None: ...
    def push_dropcap(self, string: 'str', font: 'Font', size: 'int', dropcap_margins: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), color: 'Color' = default('''Color(1, 1, 1, 1)'''), outline_size: 'int' = 0, outline_color: 'Color' = default('''Color(0, 0, 0, 0)''')) -> None: ...
    def set_table_column_expand(self, column: 'int', expand: 'bool', ratio: 'int' = 1, shrink: 'bool' = True) -> None: ...
    def set_cell_row_background_color(self, odd_row_bg: 'Color', even_row_bg: 'Color') -> None: ...
    def set_cell_border_color(self, color: 'Color') -> None: ...
    def set_cell_size_override(self, min_size: 'Vector2', max_size: 'Vector2') -> None: ...
    def set_cell_padding(self, padding: 'Rect2') -> None: ...
    def push_cell(self) -> None: ...
    def push_fgcolor(self, fgcolor: 'Color') -> None: ...
    def push_bgcolor(self, bgcolor: 'Color') -> None: ...
    def push_customfx(self, effect: 'RichTextEffect', env: 'Dictionary') -> None: ...
    def push_context(self) -> None: ...
    def pop_context(self) -> None: ...
    def pop(self) -> None: ...
    def pop_all(self) -> None: ...
    def clear(self) -> None: ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_justification_flags(self, justification_flags: 'TextServer__JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer__JustificationFlag': ...
    def set_tab_stops(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def get_tab_stops(self) -> 'PackedFloat32Array': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer__AutowrapMode': ...
    def set_meta_underline(self, enable: 'bool') -> None: ...
    def is_meta_underlined(self) -> 'bool': ...
    def set_hint_underline(self, enable: 'bool') -> None: ...
    def is_hint_underlined(self) -> 'bool': ...
    def set_scroll_active(self, active: 'bool') -> None: ...
    def is_scroll_active(self) -> 'bool': ...
    def set_scroll_follow(self, follow: 'bool') -> None: ...
    def is_scroll_following(self) -> 'bool': ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def scroll_to_line(self, line: 'int') -> None: ...
    def scroll_to_paragraph(self, paragraph: 'int') -> None: ...
    def scroll_to_selection(self) -> None: ...
    def set_tab_size(self, spaces: 'int') -> None: ...
    def get_tab_size(self) -> 'int': ...
    def set_fit_content(self, enabled: 'bool') -> None: ...
    def is_fit_content_enabled(self) -> 'bool': ...
    def set_selection_enabled(self, enabled: 'bool') -> None: ...
    def is_selection_enabled(self) -> 'bool': ...
    def set_context_menu_enabled(self, enabled: 'bool') -> None: ...
    def is_context_menu_enabled(self) -> 'bool': ...
    def set_shortcut_keys_enabled(self, enabled: 'bool') -> None: ...
    def is_shortcut_keys_enabled(self) -> 'bool': ...
    def set_deselect_on_focus_loss_enabled(self, enable: 'bool') -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> 'bool': ...
    def set_drag_and_drop_selection_enabled(self, enable: 'bool') -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> 'bool': ...
    def get_selection_from(self) -> 'int': ...
    def get_selection_to(self) -> 'int': ...
    def get_selection_line_offset(self) -> 'float': ...
    def select_all(self) -> None: ...
    def get_selected_text(self) -> 'str': ...
    def deselect(self) -> None: ...
    def parse_bbcode(self, bbcode: 'str') -> None: ...
    def append_text(self, bbcode: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def is_ready(self) -> 'bool': ...
    def is_finished(self) -> 'bool': ...
    def set_threaded(self, threaded: 'bool') -> None: ...
    def is_threaded(self) -> 'bool': ...
    def set_progress_bar_delay(self, delay_ms: 'int') -> None: ...
    def get_progress_bar_delay(self) -> 'int': ...
    def set_visible_characters(self, amount: 'int') -> None: ...
    def get_visible_characters(self) -> 'int': ...
    def get_visible_characters_behavior(self) -> 'TextServer__VisibleCharactersBehavior': ...
    def set_visible_characters_behavior(self, behavior: 'TextServer__VisibleCharactersBehavior') -> None: ...
    def set_visible_ratio(self, ratio: 'float') -> None: ...
    def get_visible_ratio(self) -> 'float': ...
    def get_character_line(self, character: 'int') -> 'int': ...
    def get_character_paragraph(self, character: 'int') -> 'int': ...
    def get_total_character_count(self) -> 'int': ...
    def set_use_bbcode(self, enable: 'bool') -> None: ...
    def is_using_bbcode(self) -> 'bool': ...
    def get_line_count(self) -> 'int': ...
    def get_line_range(self, line: 'int') -> 'Vector2i': ...
    def get_visible_line_count(self) -> 'int': ...
    def get_paragraph_count(self) -> 'int': ...
    def get_visible_paragraph_count(self) -> 'int': ...
    def get_content_height(self) -> 'int': ...
    def get_content_width(self) -> 'int': ...
    def get_line_offset(self, line: 'int') -> 'float': ...
    def get_paragraph_offset(self, paragraph: 'int') -> 'float': ...
    def parse_expressions_for_values(self, expressions: 'PackedStringArray') -> 'Dictionary': ...
    def set_effects(self, effects: 'Array') -> None: ...
    def get_effects(self) -> 'Array': ...
    def install_effect(self, effect: 'Variant') -> None: ...
    def get_menu(self) -> 'PopupMenu': ...
    def is_menu_visible(self) -> 'bool': ...
    def menu_option(self, option: 'int') -> None: ...


class RigidBody2D(PhysicsBody2D):


    mass: 'float'
    physics_material_override: 'PhysicsMaterial'
    gravity_scale: 'float'
    center_of_mass_mode: 'int'
    center_of_mass: 'Vector2'
    inertia: 'float'
    sleeping: 'bool'
    can_sleep: 'bool'
    lock_rotation: 'bool'
    freeze: 'bool'
    freeze_mode: 'int'
    custom_integrator: 'bool'
    continuous_cd: 'int'
    contact_monitor: 'bool'
    max_contacts_reported: 'int'
    linear_velocity: 'Vector2'
    linear_damp_mode: 'int'
    linear_damp: 'float'
    angular_velocity: 'float'
    angular_damp_mode: 'int'
    angular_damp: 'float'
    constant_force: 'Vector2'
    constant_torque: 'float'
    body_shape_entered: 'Signal[Callable[[RID, Node, int, int], None]]'  # body_shape_entered(body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int)
    body_shape_exited: 'Signal[Callable[[RID, Node, int, int], None]]'  # body_shape_exited(body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int)
    body_entered: 'Signal[Callable[[Node], None]]'  # body_entered(body: Node)
    body_exited: 'Signal[Callable[[Node], None]]'  # body_exited(body: Node)
    sleeping_state_changed: 'Signal[Callable[[], None]]'  # sleeping_state_changed()

    def _integrate_forces(self, state: 'PhysicsDirectBodyState2D') -> None: ...
    def set_mass(self, mass: 'float') -> None: ...
    def get_mass(self) -> 'float': ...
    def get_inertia(self) -> 'float': ...
    def set_inertia(self, inertia: 'float') -> None: ...
    def set_center_of_mass_mode(self, mode: 'RigidBody2D__CenterOfMassMode') -> None: ...
    def get_center_of_mass_mode(self) -> 'RigidBody2D__CenterOfMassMode': ...
    def set_center_of_mass(self, center_of_mass: 'Vector2') -> None: ...
    def get_center_of_mass(self) -> 'Vector2': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...
    def set_gravity_scale(self, gravity_scale: 'float') -> None: ...
    def get_gravity_scale(self) -> 'float': ...
    def set_linear_damp_mode(self, linear_damp_mode: 'RigidBody2D__DampMode') -> None: ...
    def get_linear_damp_mode(self) -> 'RigidBody2D__DampMode': ...
    def set_angular_damp_mode(self, angular_damp_mode: 'RigidBody2D__DampMode') -> None: ...
    def get_angular_damp_mode(self) -> 'RigidBody2D__DampMode': ...
    def set_linear_damp(self, linear_damp: 'float') -> None: ...
    def get_linear_damp(self) -> 'float': ...
    def set_angular_damp(self, angular_damp: 'float') -> None: ...
    def get_angular_damp(self) -> 'float': ...
    def set_linear_velocity(self, linear_velocity: 'Vector2') -> None: ...
    def get_linear_velocity(self) -> 'Vector2': ...
    def set_angular_velocity(self, angular_velocity: 'float') -> None: ...
    def get_angular_velocity(self) -> 'float': ...
    def set_max_contacts_reported(self, amount: 'int') -> None: ...
    def get_max_contacts_reported(self) -> 'int': ...
    def get_contact_count(self) -> 'int': ...
    def set_use_custom_integrator(self, enable: 'bool') -> None: ...
    def is_using_custom_integrator(self) -> 'bool': ...
    def set_contact_monitor(self, enabled: 'bool') -> None: ...
    def is_contact_monitor_enabled(self) -> 'bool': ...
    def set_continuous_collision_detection_mode(self, mode: 'RigidBody2D__CCDMode') -> None: ...
    def get_continuous_collision_detection_mode(self) -> 'RigidBody2D__CCDMode': ...
    def set_axis_velocity(self, axis_velocity: 'Vector2') -> None: ...
    def apply_central_impulse(self, impulse: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_impulse(self, impulse: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_torque_impulse(self, torque: 'float') -> None: ...
    def apply_central_force(self, force: 'Vector2') -> None: ...
    def apply_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def apply_torque(self, torque: 'float') -> None: ...
    def add_constant_central_force(self, force: 'Vector2') -> None: ...
    def add_constant_force(self, force: 'Vector2', position: 'Vector2' = default('''Vector2(0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: 'float') -> None: ...
    def set_constant_force(self, force: 'Vector2') -> None: ...
    def get_constant_force(self) -> 'Vector2': ...
    def set_constant_torque(self, torque: 'float') -> None: ...
    def get_constant_torque(self) -> 'float': ...
    def set_sleeping(self, sleeping: 'bool') -> None: ...
    def is_sleeping(self) -> 'bool': ...
    def set_can_sleep(self, able_to_sleep: 'bool') -> None: ...
    def is_able_to_sleep(self) -> 'bool': ...
    def set_lock_rotation_enabled(self, lock_rotation: 'bool') -> None: ...
    def is_lock_rotation_enabled(self) -> 'bool': ...
    def set_freeze_enabled(self, freeze_mode: 'bool') -> None: ...
    def is_freeze_enabled(self) -> 'bool': ...
    def set_freeze_mode(self, freeze_mode: 'RigidBody2D__FreezeMode') -> None: ...
    def get_freeze_mode(self) -> 'RigidBody2D__FreezeMode': ...
    def get_colliding_bodies(self) -> 'Array'['Node2D']: ...


class RigidBody3D(PhysicsBody3D):


    mass: 'float'
    physics_material_override: 'PhysicsMaterial'
    gravity_scale: 'float'
    center_of_mass_mode: 'int'
    center_of_mass: 'Vector3'
    inertia: 'Vector3'
    sleeping: 'bool'
    can_sleep: 'bool'
    lock_rotation: 'bool'
    freeze: 'bool'
    freeze_mode: 'int'
    custom_integrator: 'bool'
    continuous_cd: 'bool'
    contact_monitor: 'bool'
    max_contacts_reported: 'int'
    linear_velocity: 'Vector3'
    linear_damp_mode: 'int'
    linear_damp: 'float'
    angular_velocity: 'Vector3'
    angular_damp_mode: 'int'
    angular_damp: 'float'
    constant_force: 'Vector3'
    constant_torque: 'Vector3'
    body_shape_entered: 'Signal[Callable[[RID, Node, int, int], None]]'  # body_shape_entered(body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int)
    body_shape_exited: 'Signal[Callable[[RID, Node, int, int], None]]'  # body_shape_exited(body_rid: RID, body: Node, body_shape_index: int, local_shape_index: int)
    body_entered: 'Signal[Callable[[Node], None]]'  # body_entered(body: Node)
    body_exited: 'Signal[Callable[[Node], None]]'  # body_exited(body: Node)
    sleeping_state_changed: 'Signal[Callable[[], None]]'  # sleeping_state_changed()

    def _integrate_forces(self, state: 'PhysicsDirectBodyState3D') -> None: ...
    def set_mass(self, mass: 'float') -> None: ...
    def get_mass(self) -> 'float': ...
    def set_inertia(self, inertia: 'Vector3') -> None: ...
    def get_inertia(self) -> 'Vector3': ...
    def set_center_of_mass_mode(self, mode: 'RigidBody3D__CenterOfMassMode') -> None: ...
    def get_center_of_mass_mode(self) -> 'RigidBody3D__CenterOfMassMode': ...
    def set_center_of_mass(self, center_of_mass: 'Vector3') -> None: ...
    def get_center_of_mass(self) -> 'Vector3': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...
    def set_linear_velocity(self, linear_velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, angular_velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def get_inverse_inertia_tensor(self) -> 'Basis': ...
    def set_gravity_scale(self, gravity_scale: 'float') -> None: ...
    def get_gravity_scale(self) -> 'float': ...
    def set_linear_damp_mode(self, linear_damp_mode: 'RigidBody3D__DampMode') -> None: ...
    def get_linear_damp_mode(self) -> 'RigidBody3D__DampMode': ...
    def set_angular_damp_mode(self, angular_damp_mode: 'RigidBody3D__DampMode') -> None: ...
    def get_angular_damp_mode(self) -> 'RigidBody3D__DampMode': ...
    def set_linear_damp(self, linear_damp: 'float') -> None: ...
    def get_linear_damp(self) -> 'float': ...
    def set_angular_damp(self, angular_damp: 'float') -> None: ...
    def get_angular_damp(self) -> 'float': ...
    def set_max_contacts_reported(self, amount: 'int') -> None: ...
    def get_max_contacts_reported(self) -> 'int': ...
    def get_contact_count(self) -> 'int': ...
    def set_use_custom_integrator(self, enable: 'bool') -> None: ...
    def is_using_custom_integrator(self) -> 'bool': ...
    def set_contact_monitor(self, enabled: 'bool') -> None: ...
    def is_contact_monitor_enabled(self) -> 'bool': ...
    def set_use_continuous_collision_detection(self, enable: 'bool') -> None: ...
    def is_using_continuous_collision_detection(self) -> 'bool': ...
    def set_axis_velocity(self, axis_velocity: 'Vector3') -> None: ...
    def apply_central_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_impulse(self, impulse: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque_impulse(self, impulse: 'Vector3') -> None: ...
    def apply_central_force(self, force: 'Vector3') -> None: ...
    def apply_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def apply_torque(self, torque: 'Vector3') -> None: ...
    def add_constant_central_force(self, force: 'Vector3') -> None: ...
    def add_constant_force(self, force: 'Vector3', position: 'Vector3' = default('''Vector3(0, 0, 0)''')) -> None: ...
    def add_constant_torque(self, torque: 'Vector3') -> None: ...
    def set_constant_force(self, force: 'Vector3') -> None: ...
    def get_constant_force(self) -> 'Vector3': ...
    def set_constant_torque(self, torque: 'Vector3') -> None: ...
    def get_constant_torque(self) -> 'Vector3': ...
    def set_sleeping(self, sleeping: 'bool') -> None: ...
    def is_sleeping(self) -> 'bool': ...
    def set_can_sleep(self, able_to_sleep: 'bool') -> None: ...
    def is_able_to_sleep(self) -> 'bool': ...
    def set_lock_rotation_enabled(self, lock_rotation: 'bool') -> None: ...
    def is_lock_rotation_enabled(self) -> 'bool': ...
    def set_freeze_enabled(self, freeze_mode: 'bool') -> None: ...
    def is_freeze_enabled(self) -> 'bool': ...
    def set_freeze_mode(self, freeze_mode: 'RigidBody3D__FreezeMode') -> None: ...
    def get_freeze_mode(self) -> 'RigidBody3D__FreezeMode': ...
    def get_colliding_bodies(self) -> 'Array'['Node3D']: ...


class RootMotionView(VisualInstance3D):


    animation_path: 'NodePath'
    color: 'Color'
    cell_size: 'float'
    radius: 'float'
    zero_y: 'bool'

    def set_animation_path(self, path: 'NodePath') -> None: ...
    def get_animation_path(self) -> 'NodePath': ...
    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_cell_size(self, size: 'float') -> None: ...
    def get_cell_size(self) -> 'float': ...
    def set_radius(self, size: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_zero_y(self, enable: 'bool') -> None: ...
    def get_zero_y(self) -> 'bool': ...


class SceneMultiplayer(MultiplayerAPI):


    root_path: 'NodePath'
    auth_callback: 'Callable'
    auth_timeout: 'float'
    allow_object_decoding: 'bool'
    refuse_new_connections: 'bool'
    server_relay: 'bool'
    max_sync_packet_size: 'int'
    max_delta_packet_size: 'int'
    peer_authenticating: 'Signal[Callable[[int], None]]'  # peer_authenticating(id: int)
    peer_authentication_failed: 'Signal[Callable[[int], None]]'  # peer_authentication_failed(id: int)
    peer_packet: 'Signal[Callable[[int, PackedByteArray], None]]'  # peer_packet(id: int, packet: PackedByteArray)

    def set_root_path(self, path: 'NodePath') -> None: ...
    def get_root_path(self) -> 'NodePath': ...
    def clear(self) -> None: ...
    def disconnect_peer(self, id: 'int') -> None: ...
    def get_authenticating_peers(self) -> 'PackedInt32Array': ...
    def send_auth(self, id: 'int', data: 'PackedByteArray') -> 'Error': ...
    def complete_auth(self, id: 'int') -> 'Error': ...
    def set_auth_callback(self, callback: 'Callable') -> None: ...
    def get_auth_callback(self) -> 'Callable': ...
    def set_auth_timeout(self, timeout: 'float') -> None: ...
    def get_auth_timeout(self) -> 'float': ...
    def set_refuse_new_connections(self, refuse: 'bool') -> None: ...
    def is_refusing_new_connections(self) -> 'bool': ...
    def set_allow_object_decoding(self, enable: 'bool') -> None: ...
    def is_object_decoding_allowed(self) -> 'bool': ...
    def set_server_relay_enabled(self, enabled: 'bool') -> None: ...
    def is_server_relay_enabled(self) -> 'bool': ...
    def send_bytes(self, bytes: 'PackedByteArray', id: 'int' = 0, mode: 'MultiplayerPeer__TransferMode' = 2, channel: 'int' = 0) -> 'Error': ...
    def get_max_sync_packet_size(self) -> 'int': ...
    def set_max_sync_packet_size(self, size: 'int') -> None: ...
    def get_max_delta_packet_size(self) -> 'int': ...
    def set_max_delta_packet_size(self, size: 'int') -> None: ...


class SceneReplicationConfig(Resource):



    def get_properties(self) -> 'Array'['NodePath']: ...
    def add_property(self, path: 'NodePath', index: 'int' = -1) -> None: ...
    def has_property(self, path: 'NodePath') -> 'bool': ...
    def remove_property(self, path: 'NodePath') -> None: ...
    def property_get_index(self, path: 'NodePath') -> 'int': ...
    def property_get_spawn(self, path: 'NodePath') -> 'bool': ...
    def property_set_spawn(self, path: 'NodePath', enabled: 'bool') -> None: ...
    def property_get_replication_mode(self, path: 'NodePath') -> 'SceneReplicationConfig__ReplicationMode': ...
    def property_set_replication_mode(self, path: 'NodePath', mode: 'SceneReplicationConfig__ReplicationMode') -> None: ...
    def property_get_sync(self, path: 'NodePath') -> 'bool': ...
    def property_set_sync(self, path: 'NodePath', enabled: 'bool') -> None: ...
    def property_get_watch(self, path: 'NodePath') -> 'bool': ...
    def property_set_watch(self, path: 'NodePath', enabled: 'bool') -> None: ...


class SceneState(RefCounted):



    def get_node_count(self) -> 'int': ...
    def get_node_type(self, idx: 'int') -> 'StringName': ...
    def get_node_name(self, idx: 'int') -> 'StringName': ...
    def get_node_path(self, idx: 'int', for_parent: 'bool' = False) -> 'NodePath': ...
    def get_node_owner_path(self, idx: 'int') -> 'NodePath': ...
    def is_node_instance_placeholder(self, idx: 'int') -> 'bool': ...
    def get_node_instance_placeholder(self, idx: 'int') -> 'str': ...
    def get_node_instance(self, idx: 'int') -> 'PackedScene': ...
    def get_node_groups(self, idx: 'int') -> 'PackedStringArray': ...
    def get_node_index(self, idx: 'int') -> 'int': ...
    def get_node_property_count(self, idx: 'int') -> 'int': ...
    def get_node_property_name(self, idx: 'int', prop_idx: 'int') -> 'StringName': ...
    def get_node_property_value(self, idx: 'int', prop_idx: 'int') -> 'Variant': ...
    def get_connection_count(self) -> 'int': ...
    def get_connection_source(self, idx: 'int') -> 'NodePath': ...
    def get_connection_signal(self, idx: 'int') -> 'StringName': ...
    def get_connection_target(self, idx: 'int') -> 'NodePath': ...
    def get_connection_method(self, idx: 'int') -> 'StringName': ...
    def get_connection_flags(self, idx: 'int') -> 'int': ...
    def get_connection_binds(self, idx: 'int') -> 'Array': ...
    def get_connection_unbinds(self, idx: 'int') -> 'int': ...


class SceneTree(MainLoop):


    auto_accept_quit: 'bool'
    quit_on_go_back: 'bool'
    debug_collisions_hint: 'bool'
    debug_paths_hint: 'bool'
    debug_navigation_hint: 'bool'
    paused: 'bool'
    edited_scene_root: 'Node'
    current_scene: 'Node'
    root: 'Node'
    multiplayer_poll: 'bool'
    physics_interpolation: 'bool'
    tree_changed: 'Signal[Callable[[], None]]'  # tree_changed()
    tree_process_mode_changed: 'Signal[Callable[[], None]]'  # tree_process_mode_changed()
    node_added: 'Signal[Callable[[Node], None]]'  # node_added(node: Node)
    node_removed: 'Signal[Callable[[Node], None]]'  # node_removed(node: Node)
    node_renamed: 'Signal[Callable[[Node], None]]'  # node_renamed(node: Node)
    node_configuration_warning_changed: 'Signal[Callable[[Node], None]]'  # node_configuration_warning_changed(node: Node)
    process_frame: 'Signal[Callable[[], None]]'  # process_frame()
    physics_frame: 'Signal[Callable[[], None]]'  # physics_frame()

    def get_root(self) -> 'Window': ...
    def has_group(self, name: 'StringName') -> 'bool': ...
    def is_auto_accept_quit(self) -> 'bool': ...
    def set_auto_accept_quit(self, enabled: 'bool') -> None: ...
    def is_quit_on_go_back(self) -> 'bool': ...
    def set_quit_on_go_back(self, enabled: 'bool') -> None: ...
    def set_debug_collisions_hint(self, enable: 'bool') -> None: ...
    def is_debugging_collisions_hint(self) -> 'bool': ...
    def set_debug_paths_hint(self, enable: 'bool') -> None: ...
    def is_debugging_paths_hint(self) -> 'bool': ...
    def set_debug_navigation_hint(self, enable: 'bool') -> None: ...
    def is_debugging_navigation_hint(self) -> 'bool': ...
    def set_edited_scene_root(self, scene: 'Node') -> None: ...
    def get_edited_scene_root(self) -> 'Node': ...
    def set_pause(self, enable: 'bool') -> None: ...
    def is_paused(self) -> 'bool': ...
    def create_timer(self, time_sec: 'float', process_always: 'bool' = True, process_in_physics: 'bool' = False, ignore_time_scale: 'bool' = False) -> 'SceneTreeTimer': ...
    def create_tween(self) -> 'Tween': ...
    def get_processed_tweens(self) -> 'Array'['Tween']: ...
    def get_node_count(self) -> 'int': ...
    def get_frame(self) -> 'int': ...
    def quit(self, exit_code: 'int' = 0) -> None: ...
    def set_physics_interpolation_enabled(self, enabled: 'bool') -> None: ...
    def is_physics_interpolation_enabled(self) -> 'bool': ...
    def queue_delete(self, obj: 'Object') -> None: ...
    def call_group_flags(self, flags: 'int', group: 'StringName', method: 'StringName') -> None: ...
    def notify_group_flags(self, call_flags: 'int', group: 'StringName', notification: 'int') -> None: ...
    def set_group_flags(self, call_flags: 'int', group: 'StringName', property: 'str', value: 'Variant') -> None: ...
    def call_group(self, group: 'StringName', method: 'StringName') -> None: ...
    def notify_group(self, group: 'StringName', notification: 'int') -> None: ...
    def set_group(self, group: 'StringName', property: 'str', value: 'Variant') -> None: ...
    def get_nodes_in_group(self, group: 'StringName') -> 'Array'['Node']: ...
    def get_first_node_in_group(self, group: 'StringName') -> 'Node': ...
    def get_node_count_in_group(self, group: 'StringName') -> 'int': ...
    def set_current_scene(self, child_node: 'Node') -> None: ...
    def get_current_scene(self) -> 'Node': ...
    def change_scene_to_file(self, path: 'str') -> 'Error': ...
    def change_scene_to_packed(self, packed_scene: 'PackedScene') -> 'Error': ...
    def reload_current_scene(self) -> 'Error': ...
    def unload_current_scene(self) -> None: ...
    def set_multiplayer(self, multiplayer: 'MultiplayerAPI', root_path: 'NodePath' = default('''NodePath("")''')) -> None: ...
    def get_multiplayer(self, for_path: 'NodePath' = default('''NodePath("")''')) -> 'MultiplayerAPI': ...
    def set_multiplayer_poll_enabled(self, enabled: 'bool') -> None: ...
    def is_multiplayer_poll_enabled(self) -> 'bool': ...


class SceneTreeTimer(RefCounted):


    time_left: 'float'
    timeout: 'Signal[Callable[[], None]]'  # timeout()

    def set_time_left(self, time: 'float') -> None: ...
    def get_time_left(self) -> 'float': ...


class Script(Resource):


    source_code: 'str'

    def can_instantiate(self) -> 'bool': ...
    def instance_has(self, base_object: 'Object') -> 'bool': ...
    def has_source_code(self) -> 'bool': ...
    def get_source_code(self) -> 'str': ...
    def set_source_code(self, source: 'str') -> None: ...
    def reload(self, keep_state: 'bool' = False) -> 'Error': ...
    def get_base_script(self) -> 'Script': ...
    def get_instance_base_type(self) -> 'StringName': ...
    def get_global_name(self) -> 'StringName': ...
    def has_script_signal(self, signal_name: 'StringName') -> 'bool': ...
    def get_script_property_list(self) -> 'Array'['Dictionary']: ...
    def get_script_method_list(self) -> 'Array'['Dictionary']: ...
    def get_script_signal_list(self) -> 'Array'['Dictionary']: ...
    def get_script_constant_map(self) -> 'Dictionary': ...
    def get_property_default_value(self, property: 'StringName') -> 'Variant': ...
    def is_tool(self) -> 'bool': ...
    def is_abstract(self) -> 'bool': ...
    def get_rpc_config(self) -> 'Variant': ...


class ScriptCreateDialog(ConfirmationDialog):


    script_created: 'Signal[Callable[[Script], None]]'  # script_created(script: Script)

    def config(self, inherits: 'str', path: 'str', built_in_enabled: 'bool' = True, load_enabled: 'bool' = True) -> None: ...


class ScriptEditor(PanelContainer):


    editor_script_changed: 'Signal[Callable[[Script], None]]'  # editor_script_changed(script: Script)
    script_close: 'Signal[Callable[[Script], None]]'  # script_close(script: Script)

    def get_current_editor(self) -> 'ScriptEditorBase': ...
    def get_open_script_editors(self) -> 'Array'['ScriptEditorBase']: ...
    def get_breakpoints(self) -> 'PackedStringArray': ...
    def register_syntax_highlighter(self, syntax_highlighter: 'EditorSyntaxHighlighter') -> None: ...
    def unregister_syntax_highlighter(self, syntax_highlighter: 'EditorSyntaxHighlighter') -> None: ...
    def goto_line(self, line_number: 'int') -> None: ...
    def get_current_script(self) -> 'Script': ...
    def get_open_scripts(self) -> 'Array'['Script']: ...
    def open_script_create_dialog(self, base_name: 'str', base_path: 'str') -> None: ...
    def goto_help(self, topic: 'str') -> None: ...
    def update_docs_from_script(self, script: 'Script') -> None: ...


class ScriptEditorBase(VBoxContainer):


    name_changed: 'Signal[Callable[[], None]]'  # name_changed()
    edited_script_changed: 'Signal[Callable[[], None]]'  # edited_script_changed()
    request_help: 'Signal[Callable[[str], None]]'  # request_help(topic: String)
    request_open_script_at_line: 'Signal[Callable[[Object, int], None]]'  # request_open_script_at_line(script: Object, line: int)
    request_save_history: 'Signal[Callable[[], None]]'  # request_save_history()
    request_save_previous_state: 'Signal[Callable[[Dictionary], None]]'  # request_save_previous_state(state: Dictionary)
    go_to_help: 'Signal[Callable[[str], None]]'  # go_to_help(what: String)
    search_in_files_requested: 'Signal[Callable[[str], None]]'  # search_in_files_requested(text: String)
    replace_in_files_requested: 'Signal[Callable[[str], None]]'  # replace_in_files_requested(text: String)
    go_to_method: 'Signal[Callable[[Object, str], None]]'  # go_to_method(script: Object, method: String)

    def get_base_editor(self) -> 'Control': ...
    def add_syntax_highlighter(self, highlighter: 'EditorSyntaxHighlighter') -> None: ...


class ScriptExtension(Script):



    def _editor_can_reload_from_file(self) -> 'bool': ...
    def _placeholder_erased(self, placeholder: 'intptr') -> None: ...
    def _can_instantiate(self) -> 'bool': ...
    def _get_base_script(self) -> 'Script': ...
    def _get_global_name(self) -> 'StringName': ...
    def _inherits_script(self, script: 'Script') -> 'bool': ...
    def _get_instance_base_type(self) -> 'StringName': ...
    def _instance_create(self, for_object: 'Object') -> 'intptr': ...
    def _placeholder_instance_create(self, for_object: 'Object') -> 'intptr': ...
    def _instance_has(self, object: 'Object') -> 'bool': ...
    def _has_source_code(self) -> 'bool': ...
    def _get_source_code(self) -> 'str': ...
    def _set_source_code(self, code: 'str') -> None: ...
    def _reload(self, keep_state: 'bool') -> 'Error': ...
    def _get_doc_class_name(self) -> 'StringName': ...
    def _get_documentation(self) -> 'Array'['Dictionary']: ...
    def _get_class_icon_path(self) -> 'str': ...
    def _has_method(self, method: 'StringName') -> 'bool': ...
    def _has_static_method(self, method: 'StringName') -> 'bool': ...
    def _get_script_method_argument_count(self, method: 'StringName') -> 'Variant': ...
    def _get_method_info(self, method: 'StringName') -> 'Dictionary': ...
    def _is_tool(self) -> 'bool': ...
    def _is_valid(self) -> 'bool': ...
    def _is_abstract(self) -> 'bool': ...
    def _get_language(self) -> 'ScriptLanguage': ...
    def _has_script_signal(self, signal: 'StringName') -> 'bool': ...
    def _get_script_signal_list(self) -> 'Array'['Dictionary']: ...
    def _has_property_default_value(self, property: 'StringName') -> 'bool': ...
    def _get_property_default_value(self, property: 'StringName') -> 'Variant': ...
    def _update_exports(self) -> None: ...
    def _get_script_method_list(self) -> 'Array'['Dictionary']: ...
    def _get_script_property_list(self) -> 'Array'['Dictionary']: ...
    def _get_member_line(self, member: 'StringName') -> 'int': ...
    def _get_constants(self) -> 'Dictionary': ...
    def _get_members(self) -> 'Array'['StringName']: ...
    def _is_placeholder_fallback_enabled(self) -> 'bool': ...
    def _get_rpc_config(self) -> 'Variant': ...


class ScriptLanguage(Object): ...


class ScriptLanguageExtension(ScriptLanguage):



    def _get_name(self) -> 'str': ...
    def _init(self) -> None: ...
    def _get_type(self) -> 'str': ...
    def _get_extension(self) -> 'str': ...
    def _finish(self) -> None: ...
    def _get_reserved_words(self) -> 'PackedStringArray': ...
    def _is_control_flow_keyword(self, keyword: 'str') -> 'bool': ...
    def _get_comment_delimiters(self) -> 'PackedStringArray': ...
    def _get_doc_comment_delimiters(self) -> 'PackedStringArray': ...
    def _get_string_delimiters(self) -> 'PackedStringArray': ...
    def _make_template(self, template: 'str', class_name: 'str', base_class_name: 'str') -> 'Script': ...
    def _get_built_in_templates(self, object: 'StringName') -> 'Array'['Dictionary']: ...
    def _is_using_templates(self) -> 'bool': ...
    def _validate(self, script: 'str', path: 'str', validate_functions: 'bool', validate_errors: 'bool', validate_warnings: 'bool', validate_safe_lines: 'bool') -> 'Dictionary': ...
    def _validate_path(self, path: 'str') -> 'str': ...
    def _create_script(self) -> 'Object': ...
    def _has_named_classes(self) -> 'bool': ...
    def _supports_builtin_mode(self) -> 'bool': ...
    def _supports_documentation(self) -> 'bool': ...
    def _can_inherit_from_file(self) -> 'bool': ...
    def _find_function(self, function: 'str', code: 'str') -> 'int': ...
    def _make_function(self, class_name: 'str', function_name: 'str', function_args: 'PackedStringArray') -> 'str': ...
    def _can_make_function(self) -> 'bool': ...
    def _open_in_external_editor(self, script: 'Script', line: 'int', column: 'int') -> 'Error': ...
    def _overrides_external_editor(self) -> 'bool': ...
    def _preferred_file_name_casing(self) -> 'ScriptLanguage__ScriptNameCasing': ...
    def _complete_code(self, code: 'str', path: 'str', owner: 'Object') -> 'Dictionary': ...
    def _lookup_code(self, code: 'str', symbol: 'str', path: 'str', owner: 'Object') -> 'Dictionary': ...
    def _auto_indent_code(self, code: 'str', from_line: 'int', to_line: 'int') -> 'str': ...
    def _add_global_constant(self, name: 'StringName', value: 'Variant') -> None: ...
    def _add_named_global_constant(self, name: 'StringName', value: 'Variant') -> None: ...
    def _remove_named_global_constant(self, name: 'StringName') -> None: ...
    def _thread_enter(self) -> None: ...
    def _thread_exit(self) -> None: ...
    def _debug_get_error(self) -> 'str': ...
    def _debug_get_stack_level_count(self) -> 'int': ...
    def _debug_get_stack_level_line(self, level: 'int') -> 'int': ...
    def _debug_get_stack_level_function(self, level: 'int') -> 'str': ...
    def _debug_get_stack_level_source(self, level: 'int') -> 'str': ...
    def _debug_get_stack_level_locals(self, level: 'int', max_subitems: 'int', max_depth: 'int') -> 'Dictionary': ...
    def _debug_get_stack_level_members(self, level: 'int', max_subitems: 'int', max_depth: 'int') -> 'Dictionary': ...
    def _debug_get_stack_level_instance(self, level: 'int') -> 'intptr': ...
    def _debug_get_globals(self, max_subitems: 'int', max_depth: 'int') -> 'Dictionary': ...
    def _debug_parse_stack_level_expression(self, level: 'int', expression: 'str', max_subitems: 'int', max_depth: 'int') -> 'str': ...
    def _debug_get_current_stack_info(self) -> 'Array'['Dictionary']: ...
    def _reload_all_scripts(self) -> None: ...
    def _reload_scripts(self, scripts: 'Array', soft_reload: 'bool') -> None: ...
    def _reload_tool_script(self, script: 'Script', soft_reload: 'bool') -> None: ...
    def _get_recognized_extensions(self) -> 'PackedStringArray': ...
    def _get_public_functions(self) -> 'Array'['Dictionary']: ...
    def _get_public_constants(self) -> 'Dictionary': ...
    def _get_public_annotations(self) -> 'Array'['Dictionary']: ...
    def _profiling_start(self) -> None: ...
    def _profiling_stop(self) -> None: ...
    def _profiling_set_save_native_calls(self, enable: 'bool') -> None: ...
    def _profiling_get_accumulated_data(self, info_array: 'intptr', info_max: 'int') -> 'int': ...
    def _profiling_get_frame_data(self, info_array: 'intptr', info_max: 'int') -> 'int': ...
    def _frame(self) -> None: ...
    def _handles_global_class_type(self, type: 'str') -> 'bool': ...
    def _get_global_class_name(self, path: 'str') -> 'Dictionary': ...


class ScrollBar(Range):


    custom_step: 'float'
    scrolling: 'Signal[Callable[[], None]]'  # scrolling()

    def set_custom_step(self, step: 'float') -> None: ...
    def get_custom_step(self) -> 'float': ...


class ScrollContainer(Container):


    follow_focus: 'bool'
    draw_focus_border: 'bool'
    scroll_horizontal: 'int'
    scroll_vertical: 'int'
    scroll_horizontal_custom_step: 'float'
    scroll_vertical_custom_step: 'float'
    horizontal_scroll_mode: 'int'
    vertical_scroll_mode: 'int'
    scroll_deadzone: 'int'
    scroll_started: 'Signal[Callable[[], None]]'  # scroll_started()
    scroll_ended: 'Signal[Callable[[], None]]'  # scroll_ended()

    def set_h_scroll(self, value: 'int') -> None: ...
    def get_h_scroll(self) -> 'int': ...
    def set_v_scroll(self, value: 'int') -> None: ...
    def get_v_scroll(self) -> 'int': ...
    def set_horizontal_custom_step(self, value: 'float') -> None: ...
    def get_horizontal_custom_step(self) -> 'float': ...
    def set_vertical_custom_step(self, value: 'float') -> None: ...
    def get_vertical_custom_step(self) -> 'float': ...
    def set_horizontal_scroll_mode(self, enable: 'ScrollContainer__ScrollMode') -> None: ...
    def get_horizontal_scroll_mode(self) -> 'ScrollContainer__ScrollMode': ...
    def set_vertical_scroll_mode(self, enable: 'ScrollContainer__ScrollMode') -> None: ...
    def get_vertical_scroll_mode(self) -> 'ScrollContainer__ScrollMode': ...
    def set_deadzone(self, deadzone: 'int') -> None: ...
    def get_deadzone(self) -> 'int': ...
    def set_follow_focus(self, enabled: 'bool') -> None: ...
    def is_following_focus(self) -> 'bool': ...
    def get_h_scroll_bar(self) -> 'HScrollBar': ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def ensure_control_visible(self, control: 'Control') -> None: ...
    def set_draw_focus_border(self, draw: 'bool') -> None: ...
    def get_draw_focus_border(self) -> 'bool': ...


class SegmentShape2D(Shape2D):


    a: 'Vector2'
    b: 'Vector2'

    def set_a(self, a: 'Vector2') -> None: ...
    def get_a(self) -> 'Vector2': ...
    def set_b(self, b: 'Vector2') -> None: ...
    def get_b(self) -> 'Vector2': ...


class Semaphore(RefCounted):



    def wait(self) -> None: ...
    def try_wait(self) -> 'bool': ...
    def post(self, count: 'int' = 1) -> None: ...


class SeparationRayShape2D(Shape2D):


    length: 'float'
    slide_on_slope: 'bool'

    def set_length(self, length: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_slide_on_slope(self, active: 'bool') -> None: ...
    def get_slide_on_slope(self) -> 'bool': ...


class SeparationRayShape3D(Shape3D):


    length: 'float'
    slide_on_slope: 'bool'

    def set_length(self, length: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_slide_on_slope(self, active: 'bool') -> None: ...
    def get_slide_on_slope(self) -> 'bool': ...


class Separator(Control): ...


class Shader(Resource):


    code: 'str'

    def get_mode(self) -> 'Shader__Mode': ...
    def set_code(self, code: 'str') -> None: ...
    def get_code(self) -> 'str': ...
    def set_default_texture_parameter(self, name: 'StringName', texture: 'Texture', index: 'int' = 0) -> None: ...
    def get_default_texture_parameter(self, name: 'StringName', index: 'int' = 0) -> 'Texture': ...
    def get_shader_uniform_list(self, get_groups: 'bool' = False) -> 'Array': ...
    def inspect_native_shader_code(self) -> None: ...


class ShaderGlobalsOverride(Node): ...


class ShaderInclude(Resource):


    code: 'str'

    def set_code(self, code: 'str') -> None: ...
    def get_code(self) -> 'str': ...


class ShaderIncludeDB(Object):



    @staticmethod
    def list_built_in_include_files() -> 'PackedStringArray': ...
    @staticmethod
    def has_built_in_include_file(filename: 'str') -> 'bool': ...
    @staticmethod
    def get_built_in_include_file(filename: 'str') -> 'str': ...


class ShaderMaterial(Material):


    shader: 'Shader'

    def set_shader(self, shader: 'Shader') -> None: ...
    def get_shader(self) -> 'Shader': ...
    def set_shader_parameter(self, param: 'StringName', value: 'Variant') -> None: ...
    def get_shader_parameter(self, param: 'StringName') -> 'Variant': ...


class Shape2D(Resource):


    custom_solver_bias: 'float'

    def set_custom_solver_bias(self, bias: 'float') -> None: ...
    def get_custom_solver_bias(self) -> 'float': ...
    def collide(self, local_xform: 'Transform2D', with_shape: 'Shape2D', shape_xform: 'Transform2D') -> 'bool': ...
    def collide_with_motion(self, local_xform: 'Transform2D', local_motion: 'Vector2', with_shape: 'Shape2D', shape_xform: 'Transform2D', shape_motion: 'Vector2') -> 'bool': ...
    def collide_and_get_contacts(self, local_xform: 'Transform2D', with_shape: 'Shape2D', shape_xform: 'Transform2D') -> 'PackedVector2Array': ...
    def collide_with_motion_and_get_contacts(self, local_xform: 'Transform2D', local_motion: 'Vector2', with_shape: 'Shape2D', shape_xform: 'Transform2D', shape_motion: 'Vector2') -> 'PackedVector2Array': ...
    def draw(self, canvas_item: 'RID', color: 'Color') -> None: ...
    def get_rect(self) -> 'Rect2': ...


class Shape3D(Resource):


    custom_solver_bias: 'float'
    margin: 'float'

    def set_custom_solver_bias(self, bias: 'float') -> None: ...
    def get_custom_solver_bias(self) -> 'float': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...
    def get_debug_mesh(self) -> 'ArrayMesh': ...


class ShapeCast2D(Node2D):


    enabled: 'bool'
    shape: 'Shape2D'
    exclude_parent: 'bool'
    target_position: 'Vector2'
    margin: 'float'
    max_results: 'int'
    collision_mask: 'int'
    collision_result: 'Array'
    collide_with_areas: 'bool'
    collide_with_bodies: 'bool'

    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_shape(self, shape: 'Shape2D') -> None: ...
    def get_shape(self) -> 'Shape2D': ...
    def set_target_position(self, local_point: 'Vector2') -> None: ...
    def get_target_position(self) -> 'Vector2': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...
    def set_max_results(self, max_results: 'int') -> None: ...
    def get_max_results(self) -> 'int': ...
    def is_colliding(self) -> 'bool': ...
    def get_collision_count(self) -> 'int': ...
    def force_shapecast_update(self) -> None: ...
    def get_collider(self, index: 'int') -> 'Object': ...
    def get_collider_rid(self, index: 'int') -> 'RID': ...
    def get_collider_shape(self, index: 'int') -> 'int': ...
    def get_collision_point(self, index: 'int') -> 'Vector2': ...
    def get_collision_normal(self, index: 'int') -> 'Vector2': ...
    def get_closest_collision_safe_fraction(self) -> 'float': ...
    def get_closest_collision_unsafe_fraction(self) -> 'float': ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject2D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject2D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_exclude_parent_body(self, mask: 'bool') -> None: ...
    def get_exclude_parent_body(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def get_collision_result(self) -> 'Array': ...


class ShapeCast3D(Node3D):


    enabled: 'bool'
    shape: 'Shape3D'
    exclude_parent: 'bool'
    target_position: 'Vector3'
    margin: 'float'
    max_results: 'int'
    collision_mask: 'int'
    collision_result: 'Array'
    collide_with_areas: 'bool'
    collide_with_bodies: 'bool'
    debug_shape_custom_color: 'Color'

    def resource_changed(self, resource: 'Resource') -> None: ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_shape(self, shape: 'Shape3D') -> None: ...
    def get_shape(self) -> 'Shape3D': ...
    def set_target_position(self, local_point: 'Vector3') -> None: ...
    def get_target_position(self) -> 'Vector3': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...
    def set_max_results(self, max_results: 'int') -> None: ...
    def get_max_results(self) -> 'int': ...
    def is_colliding(self) -> 'bool': ...
    def get_collision_count(self) -> 'int': ...
    def force_shapecast_update(self) -> None: ...
    def get_collider(self, index: 'int') -> 'Object': ...
    def get_collider_rid(self, index: 'int') -> 'RID': ...
    def get_collider_shape(self, index: 'int') -> 'int': ...
    def get_collision_point(self, index: 'int') -> 'Vector3': ...
    def get_collision_normal(self, index: 'int') -> 'Vector3': ...
    def get_closest_collision_safe_fraction(self) -> 'float': ...
    def get_closest_collision_unsafe_fraction(self) -> 'float': ...
    def add_exception_rid(self, rid: 'RID') -> None: ...
    def add_exception(self, node: 'CollisionObject3D') -> None: ...
    def remove_exception_rid(self, rid: 'RID') -> None: ...
    def remove_exception(self, node: 'CollisionObject3D') -> None: ...
    def clear_exceptions(self) -> None: ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_exclude_parent_body(self, mask: 'bool') -> None: ...
    def get_exclude_parent_body(self) -> 'bool': ...
    def set_collide_with_areas(self, enable: 'bool') -> None: ...
    def is_collide_with_areas_enabled(self) -> 'bool': ...
    def set_collide_with_bodies(self, enable: 'bool') -> None: ...
    def is_collide_with_bodies_enabled(self) -> 'bool': ...
    def get_collision_result(self) -> 'Array': ...
    def set_debug_shape_custom_color(self, debug_shape_custom_color: 'Color') -> None: ...
    def get_debug_shape_custom_color(self) -> 'Color': ...


class Shortcut(Resource):


    events: 'Array'['InputEvent']

    def set_events(self, events: 'Array') -> None: ...
    def get_events(self) -> 'Array': ...
    def has_valid_event(self) -> 'bool': ...
    def matches_event(self, event: 'InputEvent') -> 'bool': ...
    def get_as_text(self) -> 'str': ...


class Skeleton2D(Node2D):


    bone_setup_changed: 'Signal[Callable[[], None]]'  # bone_setup_changed()

    def get_bone_count(self) -> 'int': ...
    def get_bone(self, idx: 'int') -> 'Bone2D': ...
    def get_skeleton(self) -> 'RID': ...
    def set_modification_stack(self, modification_stack: 'SkeletonModificationStack2D') -> None: ...
    def get_modification_stack(self) -> 'SkeletonModificationStack2D': ...
    def execute_modifications(self, delta: 'float', execution_mode: 'int') -> None: ...
    def set_bone_local_pose_override(self, bone_idx: 'int', override_pose: 'Transform2D', strength: 'float', persistent: 'bool') -> None: ...
    def get_bone_local_pose_override(self, bone_idx: 'int') -> 'Transform2D': ...


class Skeleton3D(Node3D):


    motion_scale: 'float'
    show_rest_only: 'bool'
    modifier_callback_mode_process: 'int'
    animate_physical_bones: 'bool'
    NOTIFICATION_UPDATE_SKELETON: 'int' = 50
    rest_updated: 'Signal[Callable[[], None]]'  # rest_updated()
    pose_updated: 'Signal[Callable[[], None]]'  # pose_updated()
    skeleton_updated: 'Signal[Callable[[], None]]'  # skeleton_updated()
    bone_enabled_changed: 'Signal[Callable[[int], None]]'  # bone_enabled_changed(bone_idx: int)
    bone_list_changed: 'Signal[Callable[[], None]]'  # bone_list_changed()
    show_rest_only_changed: 'Signal[Callable[[], None]]'  # show_rest_only_changed()

    def add_bone(self, name: 'str') -> 'int': ...
    def find_bone(self, name: 'str') -> 'int': ...
    def get_bone_name(self, bone_idx: 'int') -> 'str': ...
    def set_bone_name(self, bone_idx: 'int', name: 'str') -> None: ...
    def get_bone_meta(self, bone_idx: 'int', key: 'StringName') -> 'Variant': ...
    def get_bone_meta_list(self, bone_idx: 'int') -> 'Array'['StringName']: ...
    def has_bone_meta(self, bone_idx: 'int', key: 'StringName') -> 'bool': ...
    def set_bone_meta(self, bone_idx: 'int', key: 'StringName', value: 'Variant') -> None: ...
    def get_concatenated_bone_names(self) -> 'StringName': ...
    def get_bone_parent(self, bone_idx: 'int') -> 'int': ...
    def set_bone_parent(self, bone_idx: 'int', parent_idx: 'int') -> None: ...
    def get_bone_count(self) -> 'int': ...
    def get_version(self) -> 'int': ...
    def unparent_bone_and_rest(self, bone_idx: 'int') -> None: ...
    def get_bone_children(self, bone_idx: 'int') -> 'PackedInt32Array': ...
    def get_parentless_bones(self) -> 'PackedInt32Array': ...
    def get_bone_rest(self, bone_idx: 'int') -> 'Transform3D': ...
    def set_bone_rest(self, bone_idx: 'int', rest: 'Transform3D') -> None: ...
    def get_bone_global_rest(self, bone_idx: 'int') -> 'Transform3D': ...
    def create_skin_from_rest_transforms(self) -> 'Skin': ...
    def register_skin(self, skin: 'Skin') -> 'SkinReference': ...
    def localize_rests(self) -> None: ...
    def clear_bones(self) -> None: ...
    def get_bone_pose(self, bone_idx: 'int') -> 'Transform3D': ...
    def set_bone_pose(self, bone_idx: 'int', pose: 'Transform3D') -> None: ...
    def set_bone_pose_position(self, bone_idx: 'int', position: 'Vector3') -> None: ...
    def set_bone_pose_rotation(self, bone_idx: 'int', rotation: 'Quaternion') -> None: ...
    def set_bone_pose_scale(self, bone_idx: 'int', scale: 'Vector3') -> None: ...
    def get_bone_pose_position(self, bone_idx: 'int') -> 'Vector3': ...
    def get_bone_pose_rotation(self, bone_idx: 'int') -> 'Quaternion': ...
    def get_bone_pose_scale(self, bone_idx: 'int') -> 'Vector3': ...
    def reset_bone_pose(self, bone_idx: 'int') -> None: ...
    def reset_bone_poses(self) -> None: ...
    def is_bone_enabled(self, bone_idx: 'int') -> 'bool': ...
    def set_bone_enabled(self, bone_idx: 'int', enabled: 'bool' = True) -> None: ...
    def get_bone_global_pose(self, bone_idx: 'int') -> 'Transform3D': ...
    def set_bone_global_pose(self, bone_idx: 'int', pose: 'Transform3D') -> None: ...
    def force_update_all_bone_transforms(self) -> None: ...
    def force_update_bone_child_transform(self, bone_idx: 'int') -> None: ...
    def set_motion_scale(self, motion_scale: 'float') -> None: ...
    def get_motion_scale(self) -> 'float': ...
    def set_show_rest_only(self, enabled: 'bool') -> None: ...
    def is_show_rest_only(self) -> 'bool': ...
    def set_modifier_callback_mode_process(self, mode: 'Skeleton3D__ModifierCallbackModeProcess') -> None: ...
    def get_modifier_callback_mode_process(self) -> 'Skeleton3D__ModifierCallbackModeProcess': ...
    def clear_bones_global_pose_override(self) -> None: ...
    def set_bone_global_pose_override(self, bone_idx: 'int', pose: 'Transform3D', amount: 'float', persistent: 'bool' = False) -> None: ...
    def get_bone_global_pose_override(self, bone_idx: 'int') -> 'Transform3D': ...
    def get_bone_global_pose_no_override(self, bone_idx: 'int') -> 'Transform3D': ...
    def set_animate_physical_bones(self, enabled: 'bool') -> None: ...
    def get_animate_physical_bones(self) -> 'bool': ...
    def physical_bones_stop_simulation(self) -> None: ...
    def physical_bones_start_simulation(self, bones: 'Array'['StringName'] = default('''[]''')) -> None: ...
    def physical_bones_add_collision_exception(self, exception: 'RID') -> None: ...
    def physical_bones_remove_collision_exception(self, exception: 'RID') -> None: ...


class SkeletonIK3D(SkeletonModifier3D):


    root_bone: 'StringName'
    tip_bone: 'StringName'
    target: 'Transform3D'
    override_tip_basis: 'bool'
    use_magnet: 'bool'
    magnet: 'Vector3'
    target_node: 'NodePath'
    min_distance: 'float'
    max_iterations: 'int'
    interpolation: 'float'

    def set_root_bone(self, root_bone: 'StringName') -> None: ...
    def get_root_bone(self) -> 'StringName': ...
    def set_tip_bone(self, tip_bone: 'StringName') -> None: ...
    def get_tip_bone(self) -> 'StringName': ...
    def set_target_transform(self, target: 'Transform3D') -> None: ...
    def get_target_transform(self) -> 'Transform3D': ...
    def set_target_node(self, node: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_override_tip_basis(self, override: 'bool') -> None: ...
    def is_override_tip_basis(self) -> 'bool': ...
    def set_use_magnet(self, use: 'bool') -> None: ...
    def is_using_magnet(self) -> 'bool': ...
    def set_magnet_position(self, local_position: 'Vector3') -> None: ...
    def get_magnet_position(self) -> 'Vector3': ...
    def get_parent_skeleton(self) -> 'Skeleton3D': ...
    def is_running(self) -> 'bool': ...
    def set_min_distance(self, min_distance: 'float') -> None: ...
    def get_min_distance(self) -> 'float': ...
    def set_max_iterations(self, iterations: 'int') -> None: ...
    def get_max_iterations(self) -> 'int': ...
    def start(self, one_time: 'bool' = False) -> None: ...
    def stop(self) -> None: ...
    def set_interpolation(self, interpolation: 'float') -> None: ...
    def get_interpolation(self) -> 'float': ...


class SkeletonModification2D(Resource):


    enabled: 'bool'
    execution_mode: 'int'

    def _execute(self, delta: 'float') -> None: ...
    def _setup_modification(self, modification_stack: 'SkeletonModificationStack2D') -> None: ...
    def _draw_editor_gizmo(self) -> None: ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def get_enabled(self) -> 'bool': ...
    def get_modification_stack(self) -> 'SkeletonModificationStack2D': ...
    def set_is_setup(self, is_setup: 'bool') -> None: ...
    def get_is_setup(self) -> 'bool': ...
    def set_execution_mode(self, execution_mode: 'int') -> None: ...
    def get_execution_mode(self) -> 'int': ...
    def clamp_angle(self, angle: 'float', min: 'float', max: 'float', invert: 'bool') -> 'float': ...
    def set_editor_draw_gizmo(self, draw_gizmo: 'bool') -> None: ...
    def get_editor_draw_gizmo(self) -> 'bool': ...


class SkeletonModification2DCCDIK(SkeletonModification2D):


    target_nodepath: 'NodePath'
    tip_nodepath: 'NodePath'
    ccdik_data_chain_length: 'int'

    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_tip_node(self, tip_nodepath: 'NodePath') -> None: ...
    def get_tip_node(self) -> 'NodePath': ...
    def set_ccdik_data_chain_length(self, length: 'int') -> None: ...
    def get_ccdik_data_chain_length(self) -> 'int': ...
    def set_ccdik_joint_bone2d_node(self, joint_idx: 'int', bone2d_nodepath: 'NodePath') -> None: ...
    def get_ccdik_joint_bone2d_node(self, joint_idx: 'int') -> 'NodePath': ...
    def set_ccdik_joint_bone_index(self, joint_idx: 'int', bone_idx: 'int') -> None: ...
    def get_ccdik_joint_bone_index(self, joint_idx: 'int') -> 'int': ...
    def set_ccdik_joint_rotate_from_joint(self, joint_idx: 'int', rotate_from_joint: 'bool') -> None: ...
    def get_ccdik_joint_rotate_from_joint(self, joint_idx: 'int') -> 'bool': ...
    def set_ccdik_joint_enable_constraint(self, joint_idx: 'int', enable_constraint: 'bool') -> None: ...
    def get_ccdik_joint_enable_constraint(self, joint_idx: 'int') -> 'bool': ...
    def set_ccdik_joint_constraint_angle_min(self, joint_idx: 'int', angle_min: 'float') -> None: ...
    def get_ccdik_joint_constraint_angle_min(self, joint_idx: 'int') -> 'float': ...
    def set_ccdik_joint_constraint_angle_max(self, joint_idx: 'int', angle_max: 'float') -> None: ...
    def get_ccdik_joint_constraint_angle_max(self, joint_idx: 'int') -> 'float': ...
    def set_ccdik_joint_constraint_angle_invert(self, joint_idx: 'int', invert: 'bool') -> None: ...
    def get_ccdik_joint_constraint_angle_invert(self, joint_idx: 'int') -> 'bool': ...


class SkeletonModification2DFABRIK(SkeletonModification2D):


    target_nodepath: 'NodePath'
    fabrik_data_chain_length: 'int'

    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_fabrik_data_chain_length(self, length: 'int') -> None: ...
    def get_fabrik_data_chain_length(self) -> 'int': ...
    def set_fabrik_joint_bone2d_node(self, joint_idx: 'int', bone2d_nodepath: 'NodePath') -> None: ...
    def get_fabrik_joint_bone2d_node(self, joint_idx: 'int') -> 'NodePath': ...
    def set_fabrik_joint_bone_index(self, joint_idx: 'int', bone_idx: 'int') -> None: ...
    def get_fabrik_joint_bone_index(self, joint_idx: 'int') -> 'int': ...
    def set_fabrik_joint_magnet_position(self, joint_idx: 'int', magnet_position: 'Vector2') -> None: ...
    def get_fabrik_joint_magnet_position(self, joint_idx: 'int') -> 'Vector2': ...
    def set_fabrik_joint_use_target_rotation(self, joint_idx: 'int', use_target_rotation: 'bool') -> None: ...
    def get_fabrik_joint_use_target_rotation(self, joint_idx: 'int') -> 'bool': ...


class SkeletonModification2DJiggle(SkeletonModification2D):


    target_nodepath: 'NodePath'
    jiggle_data_chain_length: 'int'
    stiffness: 'float'
    mass: 'float'
    damping: 'float'
    use_gravity: 'bool'
    gravity: 'Vector2'

    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_jiggle_data_chain_length(self, length: 'int') -> None: ...
    def get_jiggle_data_chain_length(self) -> 'int': ...
    def set_stiffness(self, stiffness: 'float') -> None: ...
    def get_stiffness(self) -> 'float': ...
    def set_mass(self, mass: 'float') -> None: ...
    def get_mass(self) -> 'float': ...
    def set_damping(self, damping: 'float') -> None: ...
    def get_damping(self) -> 'float': ...
    def set_use_gravity(self, use_gravity: 'bool') -> None: ...
    def get_use_gravity(self) -> 'bool': ...
    def set_gravity(self, gravity: 'Vector2') -> None: ...
    def get_gravity(self) -> 'Vector2': ...
    def set_use_colliders(self, use_colliders: 'bool') -> None: ...
    def get_use_colliders(self) -> 'bool': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_jiggle_joint_bone2d_node(self, joint_idx: 'int', bone2d_node: 'NodePath') -> None: ...
    def get_jiggle_joint_bone2d_node(self, joint_idx: 'int') -> 'NodePath': ...
    def set_jiggle_joint_bone_index(self, joint_idx: 'int', bone_idx: 'int') -> None: ...
    def get_jiggle_joint_bone_index(self, joint_idx: 'int') -> 'int': ...
    def set_jiggle_joint_override(self, joint_idx: 'int', override: 'bool') -> None: ...
    def get_jiggle_joint_override(self, joint_idx: 'int') -> 'bool': ...
    def set_jiggle_joint_stiffness(self, joint_idx: 'int', stiffness: 'float') -> None: ...
    def get_jiggle_joint_stiffness(self, joint_idx: 'int') -> 'float': ...
    def set_jiggle_joint_mass(self, joint_idx: 'int', mass: 'float') -> None: ...
    def get_jiggle_joint_mass(self, joint_idx: 'int') -> 'float': ...
    def set_jiggle_joint_damping(self, joint_idx: 'int', damping: 'float') -> None: ...
    def get_jiggle_joint_damping(self, joint_idx: 'int') -> 'float': ...
    def set_jiggle_joint_use_gravity(self, joint_idx: 'int', use_gravity: 'bool') -> None: ...
    def get_jiggle_joint_use_gravity(self, joint_idx: 'int') -> 'bool': ...
    def set_jiggle_joint_gravity(self, joint_idx: 'int', gravity: 'Vector2') -> None: ...
    def get_jiggle_joint_gravity(self, joint_idx: 'int') -> 'Vector2': ...


class SkeletonModification2DLookAt(SkeletonModification2D):


    bone_index: 'int'
    bone2d_node: 'NodePath'
    target_nodepath: 'NodePath'

    def set_bone2d_node(self, bone2d_nodepath: 'NodePath') -> None: ...
    def get_bone2d_node(self) -> 'NodePath': ...
    def set_bone_index(self, bone_idx: 'int') -> None: ...
    def get_bone_index(self) -> 'int': ...
    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_additional_rotation(self, rotation: 'float') -> None: ...
    def get_additional_rotation(self) -> 'float': ...
    def set_enable_constraint(self, enable_constraint: 'bool') -> None: ...
    def get_enable_constraint(self) -> 'bool': ...
    def set_constraint_angle_min(self, angle_min: 'float') -> None: ...
    def get_constraint_angle_min(self) -> 'float': ...
    def set_constraint_angle_max(self, angle_max: 'float') -> None: ...
    def get_constraint_angle_max(self) -> 'float': ...
    def set_constraint_angle_invert(self, invert: 'bool') -> None: ...
    def get_constraint_angle_invert(self) -> 'bool': ...


class SkeletonModification2DPhysicalBones(SkeletonModification2D):


    physical_bone_chain_length: 'int'

    def set_physical_bone_chain_length(self, length: 'int') -> None: ...
    def get_physical_bone_chain_length(self) -> 'int': ...
    def set_physical_bone_node(self, joint_idx: 'int', physicalbone2d_node: 'NodePath') -> None: ...
    def get_physical_bone_node(self, joint_idx: 'int') -> 'NodePath': ...
    def fetch_physical_bones(self) -> None: ...
    def start_simulation(self, bones: 'Array'['StringName'] = default('''[]''')) -> None: ...
    def stop_simulation(self, bones: 'Array'['StringName'] = default('''[]''')) -> None: ...


class SkeletonModification2DStackHolder(SkeletonModification2D):



    def set_held_modification_stack(self, held_modification_stack: 'SkeletonModificationStack2D') -> None: ...
    def get_held_modification_stack(self) -> 'SkeletonModificationStack2D': ...


class SkeletonModification2DTwoBoneIK(SkeletonModification2D):


    target_nodepath: 'NodePath'
    target_minimum_distance: 'float'
    target_maximum_distance: 'float'
    flip_bend_direction: 'bool'

    def set_target_node(self, target_nodepath: 'NodePath') -> None: ...
    def get_target_node(self) -> 'NodePath': ...
    def set_target_minimum_distance(self, minimum_distance: 'float') -> None: ...
    def get_target_minimum_distance(self) -> 'float': ...
    def set_target_maximum_distance(self, maximum_distance: 'float') -> None: ...
    def get_target_maximum_distance(self) -> 'float': ...
    def set_flip_bend_direction(self, flip_direction: 'bool') -> None: ...
    def get_flip_bend_direction(self) -> 'bool': ...
    def set_joint_one_bone2d_node(self, bone2d_node: 'NodePath') -> None: ...
    def get_joint_one_bone2d_node(self) -> 'NodePath': ...
    def set_joint_one_bone_idx(self, bone_idx: 'int') -> None: ...
    def get_joint_one_bone_idx(self) -> 'int': ...
    def set_joint_two_bone2d_node(self, bone2d_node: 'NodePath') -> None: ...
    def get_joint_two_bone2d_node(self) -> 'NodePath': ...
    def set_joint_two_bone_idx(self, bone_idx: 'int') -> None: ...
    def get_joint_two_bone_idx(self) -> 'int': ...


class SkeletonModificationStack2D(Resource):


    enabled: 'bool'
    strength: 'float'
    modification_count: 'int'

    def setup(self) -> None: ...
    def execute(self, delta: 'float', execution_mode: 'int') -> None: ...
    def enable_all_modifications(self, enabled: 'bool') -> None: ...
    def get_modification(self, mod_idx: 'int') -> 'SkeletonModification2D': ...
    def add_modification(self, modification: 'SkeletonModification2D') -> None: ...
    def delete_modification(self, mod_idx: 'int') -> None: ...
    def set_modification(self, mod_idx: 'int', modification: 'SkeletonModification2D') -> None: ...
    def set_modification_count(self, count: 'int') -> None: ...
    def get_modification_count(self) -> 'int': ...
    def get_is_setup(self) -> 'bool': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def get_enabled(self) -> 'bool': ...
    def set_strength(self, strength: 'float') -> None: ...
    def get_strength(self) -> 'float': ...
    def get_skeleton(self) -> 'Skeleton2D': ...


class SkeletonModifier3D(Node3D):


    active: 'bool'
    influence: 'float'
    modification_processed: 'Signal[Callable[[], None]]'  # modification_processed()

    def _process_modification(self) -> None: ...
    def get_skeleton(self) -> 'Skeleton3D': ...
    def set_active(self, active: 'bool') -> None: ...
    def is_active(self) -> 'bool': ...
    def set_influence(self, influence: 'float') -> None: ...
    def get_influence(self) -> 'float': ...


class SkeletonProfile(Resource):


    root_bone: 'StringName'
    scale_base_bone: 'StringName'
    group_size: 'int'
    bone_size: 'int'
    profile_updated: 'Signal[Callable[[], None]]'  # profile_updated()

    def set_root_bone(self, bone_name: 'StringName') -> None: ...
    def get_root_bone(self) -> 'StringName': ...
    def set_scale_base_bone(self, bone_name: 'StringName') -> None: ...
    def get_scale_base_bone(self) -> 'StringName': ...
    def set_group_size(self, size: 'int') -> None: ...
    def get_group_size(self) -> 'int': ...
    def get_group_name(self, group_idx: 'int') -> 'StringName': ...
    def set_group_name(self, group_idx: 'int', group_name: 'StringName') -> None: ...
    def get_texture(self, group_idx: 'int') -> 'Texture2D': ...
    def set_texture(self, group_idx: 'int', texture: 'Texture2D') -> None: ...
    def set_bone_size(self, size: 'int') -> None: ...
    def get_bone_size(self) -> 'int': ...
    def find_bone(self, bone_name: 'StringName') -> 'int': ...
    def get_bone_name(self, bone_idx: 'int') -> 'StringName': ...
    def set_bone_name(self, bone_idx: 'int', bone_name: 'StringName') -> None: ...
    def get_bone_parent(self, bone_idx: 'int') -> 'StringName': ...
    def set_bone_parent(self, bone_idx: 'int', bone_parent: 'StringName') -> None: ...
    def get_tail_direction(self, bone_idx: 'int') -> 'SkeletonProfile__TailDirection': ...
    def set_tail_direction(self, bone_idx: 'int', tail_direction: 'SkeletonProfile__TailDirection') -> None: ...
    def get_bone_tail(self, bone_idx: 'int') -> 'StringName': ...
    def set_bone_tail(self, bone_idx: 'int', bone_tail: 'StringName') -> None: ...
    def get_reference_pose(self, bone_idx: 'int') -> 'Transform3D': ...
    def set_reference_pose(self, bone_idx: 'int', bone_name: 'Transform3D') -> None: ...
    def get_handle_offset(self, bone_idx: 'int') -> 'Vector2': ...
    def set_handle_offset(self, bone_idx: 'int', handle_offset: 'Vector2') -> None: ...
    def get_group(self, bone_idx: 'int') -> 'StringName': ...
    def set_group(self, bone_idx: 'int', group: 'StringName') -> None: ...
    def is_required(self, bone_idx: 'int') -> 'bool': ...
    def set_required(self, bone_idx: 'int', required: 'bool') -> None: ...


class SkeletonProfileHumanoid(SkeletonProfile): ...


class Skin(Resource):



    def set_bind_count(self, bind_count: 'int') -> None: ...
    def get_bind_count(self) -> 'int': ...
    def add_bind(self, bone: 'int', pose: 'Transform3D') -> None: ...
    def add_named_bind(self, name: 'str', pose: 'Transform3D') -> None: ...
    def set_bind_pose(self, bind_index: 'int', pose: 'Transform3D') -> None: ...
    def get_bind_pose(self, bind_index: 'int') -> 'Transform3D': ...
    def set_bind_name(self, bind_index: 'int', name: 'StringName') -> None: ...
    def get_bind_name(self, bind_index: 'int') -> 'StringName': ...
    def set_bind_bone(self, bind_index: 'int', bone: 'int') -> None: ...
    def get_bind_bone(self, bind_index: 'int') -> 'int': ...
    def clear_binds(self) -> None: ...


class SkinReference(RefCounted):



    def get_skeleton(self) -> 'RID': ...
    def get_skin(self) -> 'Skin': ...


class Sky(Resource):


    sky_material: 'PanoramaSkyMaterial' | 'ProceduralSkyMaterial' | 'PhysicalSkyMaterial' | 'ShaderMaterial'
    process_mode: 'int'
    radiance_size: 'int'

    def set_radiance_size(self, size: 'Sky__RadianceSize') -> None: ...
    def get_radiance_size(self) -> 'Sky__RadianceSize': ...
    def set_process_mode(self, mode: 'Sky__ProcessMode') -> None: ...
    def get_process_mode(self) -> 'Sky__ProcessMode': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...


class Slider(Range):


    editable: 'bool'
    scrollable: 'bool'
    tick_count: 'int'
    ticks_on_borders: 'bool'
    drag_started: 'Signal[Callable[[], None]]'  # drag_started()
    drag_ended: 'Signal[Callable[[bool], None]]'  # drag_ended(value_changed: bool)

    def set_ticks(self, count: 'int') -> None: ...
    def get_ticks(self) -> 'int': ...
    def get_ticks_on_borders(self) -> 'bool': ...
    def set_ticks_on_borders(self, ticks_on_border: 'bool') -> None: ...
    def set_editable(self, editable: 'bool') -> None: ...
    def is_editable(self) -> 'bool': ...
    def set_scrollable(self, scrollable: 'bool') -> None: ...
    def is_scrollable(self) -> 'bool': ...


class SliderJoint3D(Joint3D):



    def set_param(self, param: 'SliderJoint3D__Param', value: 'float') -> None: ...
    def get_param(self, param: 'SliderJoint3D__Param') -> 'float': ...


class SoftBody3D(MeshInstance3D):


    collision_layer: 'int'
    collision_mask: 'int'
    parent_collision_ignore: 'NodePath'
    simulation_precision: 'int'
    total_mass: 'float'
    linear_stiffness: 'float'
    pressure_coefficient: 'float'
    damping_coefficient: 'float'
    drag_coefficient: 'float'
    ray_pickable: 'bool'
    disable_mode: 'int'

    def get_physics_rid(self) -> 'RID': ...
    def set_collision_mask(self, collision_mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_collision_layer(self, collision_layer: 'int') -> None: ...
    def get_collision_layer(self) -> 'int': ...
    def set_collision_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_collision_layer_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_collision_layer_value(self, layer_number: 'int') -> 'bool': ...
    def set_parent_collision_ignore(self, parent_collision_ignore: 'NodePath') -> None: ...
    def get_parent_collision_ignore(self) -> 'NodePath': ...
    def set_disable_mode(self, mode: 'SoftBody3D__DisableMode') -> None: ...
    def get_disable_mode(self) -> 'SoftBody3D__DisableMode': ...
    def get_collision_exceptions(self) -> 'Array'['PhysicsBody3D']: ...
    def add_collision_exception_with(self, body: 'Node') -> None: ...
    def remove_collision_exception_with(self, body: 'Node') -> None: ...
    def set_simulation_precision(self, simulation_precision: 'int') -> None: ...
    def get_simulation_precision(self) -> 'int': ...
    def set_total_mass(self, mass: 'float') -> None: ...
    def get_total_mass(self) -> 'float': ...
    def set_linear_stiffness(self, linear_stiffness: 'float') -> None: ...
    def get_linear_stiffness(self) -> 'float': ...
    def set_pressure_coefficient(self, pressure_coefficient: 'float') -> None: ...
    def get_pressure_coefficient(self) -> 'float': ...
    def set_damping_coefficient(self, damping_coefficient: 'float') -> None: ...
    def get_damping_coefficient(self) -> 'float': ...
    def set_drag_coefficient(self, drag_coefficient: 'float') -> None: ...
    def get_drag_coefficient(self) -> 'float': ...
    def get_point_transform(self, point_index: 'int') -> 'Vector3': ...
    def set_point_pinned(self, point_index: 'int', pinned: 'bool', attachment_path: 'NodePath' = default('''NodePath("")'''), insert_at: 'int' = -1) -> None: ...
    def is_point_pinned(self, point_index: 'int') -> 'bool': ...
    def set_ray_pickable(self, ray_pickable: 'bool') -> None: ...
    def is_ray_pickable(self) -> 'bool': ...


class SphereMesh(PrimitiveMesh):


    radius: 'float'
    height: 'float'
    radial_segments: 'int'
    rings: 'int'
    is_hemisphere: 'bool'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_radial_segments(self, radial_segments: 'int') -> None: ...
    def get_radial_segments(self) -> 'int': ...
    def set_rings(self, rings: 'int') -> None: ...
    def get_rings(self) -> 'int': ...
    def set_is_hemisphere(self, is_hemisphere: 'bool') -> None: ...
    def get_is_hemisphere(self) -> 'bool': ...


class SphereOccluder3D(Occluder3D):


    radius: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...


class SphereShape3D(Shape3D):


    radius: 'float'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...


class SpinBox(Range):


    alignment: 'int'
    editable: 'bool'
    update_on_text_changed: 'bool'
    prefix: 'str'
    suffix: 'str'
    custom_arrow_step: 'float'
    select_all_on_focus: 'bool'

    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_suffix(self, suffix: 'str') -> None: ...
    def get_suffix(self) -> 'str': ...
    def set_prefix(self, prefix: 'str') -> None: ...
    def get_prefix(self) -> 'str': ...
    def set_editable(self, enabled: 'bool') -> None: ...
    def set_custom_arrow_step(self, arrow_step: 'float') -> None: ...
    def get_custom_arrow_step(self) -> 'float': ...
    def is_editable(self) -> 'bool': ...
    def set_update_on_text_changed(self, enabled: 'bool') -> None: ...
    def get_update_on_text_changed(self) -> 'bool': ...
    def set_select_all_on_focus(self, enabled: 'bool') -> None: ...
    def is_select_all_on_focus(self) -> 'bool': ...
    def apply(self) -> None: ...
    def get_line_edit(self) -> 'LineEdit': ...


class SplitContainer(Container):


    split_offset: 'int'
    collapsed: 'bool'
    dragging_enabled: 'bool'
    dragger_visibility: 'int'
    vertical: 'bool'
    drag_area_margin_begin: 'int'
    drag_area_margin_end: 'int'
    drag_area_offset: 'int'
    drag_area_highlight_in_editor: 'bool'
    dragged: 'Signal[Callable[[int], None]]'  # dragged(offset: int)
    drag_started: 'Signal[Callable[[], None]]'  # drag_started()
    drag_ended: 'Signal[Callable[[], None]]'  # drag_ended()

    def set_split_offset(self, offset: 'int') -> None: ...
    def get_split_offset(self) -> 'int': ...
    def clamp_split_offset(self) -> None: ...
    def set_collapsed(self, collapsed: 'bool') -> None: ...
    def is_collapsed(self) -> 'bool': ...
    def set_dragger_visibility(self, mode: 'SplitContainer__DraggerVisibility') -> None: ...
    def get_dragger_visibility(self) -> 'SplitContainer__DraggerVisibility': ...
    def set_vertical(self, vertical: 'bool') -> None: ...
    def is_vertical(self) -> 'bool': ...
    def set_dragging_enabled(self, dragging_enabled: 'bool') -> None: ...
    def is_dragging_enabled(self) -> 'bool': ...
    def set_drag_area_margin_begin(self, margin: 'int') -> None: ...
    def get_drag_area_margin_begin(self) -> 'int': ...
    def set_drag_area_margin_end(self, margin: 'int') -> None: ...
    def get_drag_area_margin_end(self) -> 'int': ...
    def set_drag_area_offset(self, offset: 'int') -> None: ...
    def get_drag_area_offset(self) -> 'int': ...
    def set_drag_area_highlight_in_editor(self, drag_area_highlight_in_editor: 'bool') -> None: ...
    def is_drag_area_highlight_in_editor_enabled(self) -> 'bool': ...
    def get_drag_area_control(self) -> 'Control': ...


class SpotLight3D(Light3D):


    spot_range: 'float'
    spot_attenuation: 'float'
    spot_angle: 'float'
    spot_angle_attenuation: 'float'



class SpringArm3D(Node3D):


    collision_mask: 'int'
    shape: 'Shape3D'
    spring_length: 'float'
    margin: 'float'

    def get_hit_length(self) -> 'float': ...
    def set_length(self, length: 'float') -> None: ...
    def get_length(self) -> 'float': ...
    def set_shape(self, shape: 'Shape3D') -> None: ...
    def get_shape(self) -> 'Shape3D': ...
    def add_excluded_object(self, RID: 'RID') -> None: ...
    def remove_excluded_object(self, RID: 'RID') -> 'bool': ...
    def clear_excluded_objects(self) -> None: ...
    def set_collision_mask(self, mask: 'int') -> None: ...
    def get_collision_mask(self) -> 'int': ...
    def set_margin(self, margin: 'float') -> None: ...
    def get_margin(self) -> 'float': ...


class SpringBoneCollision3D(Node3D):


    bone_name: 'StringName'
    bone: 'int'
    position_offset: 'Vector3'
    rotation_offset: 'Quaternion'

    def get_skeleton(self) -> 'Skeleton3D': ...
    def set_bone_name(self, bone_name: 'str') -> None: ...
    def get_bone_name(self) -> 'str': ...
    def set_bone(self, bone: 'int') -> None: ...
    def get_bone(self) -> 'int': ...
    def set_position_offset(self, offset: 'Vector3') -> None: ...
    def get_position_offset(self) -> 'Vector3': ...
    def set_rotation_offset(self, offset: 'Quaternion') -> None: ...
    def get_rotation_offset(self) -> 'Quaternion': ...


class SpringBoneCollisionCapsule3D(SpringBoneCollision3D):


    radius: 'float'
    height: 'float'
    inside: 'bool'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_height(self, height: 'float') -> None: ...
    def get_height(self) -> 'float': ...
    def set_inside(self, enabled: 'bool') -> None: ...
    def is_inside(self) -> 'bool': ...


class SpringBoneCollisionPlane3D(SpringBoneCollision3D): ...


class SpringBoneCollisionSphere3D(SpringBoneCollision3D):


    radius: 'float'
    inside: 'bool'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_inside(self, enabled: 'bool') -> None: ...
    def is_inside(self) -> 'bool': ...


class SpringBoneSimulator3D(SkeletonModifier3D):


    setting_count: 'int'

    def set_root_bone_name(self, index: 'int', bone_name: 'str') -> None: ...
    def get_root_bone_name(self, index: 'int') -> 'str': ...
    def set_root_bone(self, index: 'int', bone: 'int') -> None: ...
    def get_root_bone(self, index: 'int') -> 'int': ...
    def set_end_bone_name(self, index: 'int', bone_name: 'str') -> None: ...
    def get_end_bone_name(self, index: 'int') -> 'str': ...
    def set_end_bone(self, index: 'int', bone: 'int') -> None: ...
    def get_end_bone(self, index: 'int') -> 'int': ...
    def set_extend_end_bone(self, index: 'int', enabled: 'bool') -> None: ...
    def is_end_bone_extended(self, index: 'int') -> 'bool': ...
    def set_end_bone_direction(self, index: 'int', bone_direction: 'SpringBoneSimulator3D__BoneDirection') -> None: ...
    def get_end_bone_direction(self, index: 'int') -> 'SpringBoneSimulator3D__BoneDirection': ...
    def set_end_bone_length(self, index: 'int', length: 'float') -> None: ...
    def get_end_bone_length(self, index: 'int') -> 'float': ...
    def set_center_from(self, index: 'int', center_from: 'SpringBoneSimulator3D__CenterFrom') -> None: ...
    def get_center_from(self, index: 'int') -> 'SpringBoneSimulator3D__CenterFrom': ...
    def set_center_node(self, index: 'int', node_path: 'NodePath') -> None: ...
    def get_center_node(self, index: 'int') -> 'NodePath': ...
    def set_center_bone_name(self, index: 'int', bone_name: 'str') -> None: ...
    def get_center_bone_name(self, index: 'int') -> 'str': ...
    def set_center_bone(self, index: 'int', bone: 'int') -> None: ...
    def get_center_bone(self, index: 'int') -> 'int': ...
    def set_radius(self, index: 'int', radius: 'float') -> None: ...
    def get_radius(self, index: 'int') -> 'float': ...
    def set_rotation_axis(self, index: 'int', axis: 'SpringBoneSimulator3D__RotationAxis') -> None: ...
    def get_rotation_axis(self, index: 'int') -> 'SpringBoneSimulator3D__RotationAxis': ...
    def set_radius_damping_curve(self, index: 'int', curve: 'Curve') -> None: ...
    def get_radius_damping_curve(self, index: 'int') -> 'Curve': ...
    def set_stiffness(self, index: 'int', stiffness: 'float') -> None: ...
    def get_stiffness(self, index: 'int') -> 'float': ...
    def set_stiffness_damping_curve(self, index: 'int', curve: 'Curve') -> None: ...
    def get_stiffness_damping_curve(self, index: 'int') -> 'Curve': ...
    def set_drag(self, index: 'int', drag: 'float') -> None: ...
    def get_drag(self, index: 'int') -> 'float': ...
    def set_drag_damping_curve(self, index: 'int', curve: 'Curve') -> None: ...
    def get_drag_damping_curve(self, index: 'int') -> 'Curve': ...
    def set_gravity(self, index: 'int', gravity: 'float') -> None: ...
    def get_gravity(self, index: 'int') -> 'float': ...
    def set_gravity_damping_curve(self, index: 'int', curve: 'Curve') -> None: ...
    def get_gravity_damping_curve(self, index: 'int') -> 'Curve': ...
    def set_gravity_direction(self, index: 'int', gravity_direction: 'Vector3') -> None: ...
    def get_gravity_direction(self, index: 'int') -> 'Vector3': ...
    def set_setting_count(self, count: 'int') -> None: ...
    def get_setting_count(self) -> 'int': ...
    def clear_settings(self) -> None: ...
    def set_individual_config(self, index: 'int', enabled: 'bool') -> None: ...
    def is_config_individual(self, index: 'int') -> 'bool': ...
    def get_joint_bone_name(self, index: 'int', joint: 'int') -> 'str': ...
    def get_joint_bone(self, index: 'int', joint: 'int') -> 'int': ...
    def set_joint_rotation_axis(self, index: 'int', joint: 'int', axis: 'SpringBoneSimulator3D__RotationAxis') -> None: ...
    def get_joint_rotation_axis(self, index: 'int', joint: 'int') -> 'SpringBoneSimulator3D__RotationAxis': ...
    def set_joint_radius(self, index: 'int', joint: 'int', radius: 'float') -> None: ...
    def get_joint_radius(self, index: 'int', joint: 'int') -> 'float': ...
    def set_joint_stiffness(self, index: 'int', joint: 'int', stiffness: 'float') -> None: ...
    def get_joint_stiffness(self, index: 'int', joint: 'int') -> 'float': ...
    def set_joint_drag(self, index: 'int', joint: 'int', drag: 'float') -> None: ...
    def get_joint_drag(self, index: 'int', joint: 'int') -> 'float': ...
    def set_joint_gravity(self, index: 'int', joint: 'int', gravity: 'float') -> None: ...
    def get_joint_gravity(self, index: 'int', joint: 'int') -> 'float': ...
    def set_joint_gravity_direction(self, index: 'int', joint: 'int', gravity_direction: 'Vector3') -> None: ...
    def get_joint_gravity_direction(self, index: 'int', joint: 'int') -> 'Vector3': ...
    def get_joint_count(self, index: 'int') -> 'int': ...
    def set_enable_all_child_collisions(self, index: 'int', enabled: 'bool') -> None: ...
    def are_all_child_collisions_enabled(self, index: 'int') -> 'bool': ...
    def set_exclude_collision_path(self, index: 'int', collision: 'int', node_path: 'NodePath') -> None: ...
    def get_exclude_collision_path(self, index: 'int', collision: 'int') -> 'NodePath': ...
    def set_exclude_collision_count(self, index: 'int', count: 'int') -> None: ...
    def get_exclude_collision_count(self, index: 'int') -> 'int': ...
    def clear_exclude_collisions(self, index: 'int') -> None: ...
    def set_collision_path(self, index: 'int', collision: 'int', node_path: 'NodePath') -> None: ...
    def get_collision_path(self, index: 'int', collision: 'int') -> 'NodePath': ...
    def set_collision_count(self, index: 'int', count: 'int') -> None: ...
    def get_collision_count(self, index: 'int') -> 'int': ...
    def clear_collisions(self, index: 'int') -> None: ...
    def reset(self) -> None: ...


class Sprite2D(Node2D):


    texture: 'Texture2D'
    centered: 'bool'
    offset: 'Vector2'
    flip_h: 'bool'
    flip_v: 'bool'
    hframes: 'int'
    vframes: 'int'
    frame: 'int'
    frame_coords: 'Vector2i'
    region_enabled: 'bool'
    region_rect: 'Rect2'
    region_filter_clip_enabled: 'bool'
    frame_changed: 'Signal[Callable[[], None]]'  # frame_changed()
    texture_changed: 'Signal[Callable[[], None]]'  # texture_changed()

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_centered(self, centered: 'bool') -> None: ...
    def is_centered(self) -> 'bool': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_flip_h(self, flip_h: 'bool') -> None: ...
    def is_flipped_h(self) -> 'bool': ...
    def set_flip_v(self, flip_v: 'bool') -> None: ...
    def is_flipped_v(self) -> 'bool': ...
    def set_region_enabled(self, enabled: 'bool') -> None: ...
    def is_region_enabled(self) -> 'bool': ...
    def is_pixel_opaque(self, pos: 'Vector2') -> 'bool': ...
    def set_region_rect(self, rect: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_region_filter_clip_enabled(self, enabled: 'bool') -> None: ...
    def is_region_filter_clip_enabled(self) -> 'bool': ...
    def set_frame(self, frame: 'int') -> None: ...
    def get_frame(self) -> 'int': ...
    def set_frame_coords(self, coords: 'Vector2i') -> None: ...
    def get_frame_coords(self) -> 'Vector2i': ...
    def set_vframes(self, vframes: 'int') -> None: ...
    def get_vframes(self) -> 'int': ...
    def set_hframes(self, hframes: 'int') -> None: ...
    def get_hframes(self) -> 'int': ...
    def get_rect(self) -> 'Rect2': ...


class Sprite3D(SpriteBase3D):


    texture: 'Texture2D'
    hframes: 'int'
    vframes: 'int'
    frame: 'int'
    frame_coords: 'Vector2i'
    region_enabled: 'bool'
    region_rect: 'Rect2'
    frame_changed: 'Signal[Callable[[], None]]'  # frame_changed()
    texture_changed: 'Signal[Callable[[], None]]'  # texture_changed()

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_region_enabled(self, enabled: 'bool') -> None: ...
    def is_region_enabled(self) -> 'bool': ...
    def set_region_rect(self, rect: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_frame(self, frame: 'int') -> None: ...
    def get_frame(self) -> 'int': ...
    def set_frame_coords(self, coords: 'Vector2i') -> None: ...
    def get_frame_coords(self) -> 'Vector2i': ...
    def set_vframes(self, vframes: 'int') -> None: ...
    def get_vframes(self) -> 'int': ...
    def set_hframes(self, hframes: 'int') -> None: ...
    def get_hframes(self) -> 'int': ...


class SpriteBase3D(GeometryInstance3D):


    centered: 'bool'
    offset: 'Vector2'
    flip_h: 'bool'
    flip_v: 'bool'
    modulate: 'Color'
    pixel_size: 'float'
    axis: 'int'
    billboard: 'int'
    transparent: 'bool'
    shaded: 'bool'
    double_sided: 'bool'
    no_depth_test: 'bool'
    fixed_size: 'bool'
    alpha_cut: 'int'
    alpha_scissor_threshold: 'float'
    alpha_hash_scale: 'float'
    alpha_antialiasing_mode: 'int'
    alpha_antialiasing_edge: 'float'
    texture_filter: 'int'
    render_priority: 'int'

    def set_centered(self, centered: 'bool') -> None: ...
    def is_centered(self) -> 'bool': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_flip_h(self, flip_h: 'bool') -> None: ...
    def is_flipped_h(self) -> 'bool': ...
    def set_flip_v(self, flip_v: 'bool') -> None: ...
    def is_flipped_v(self) -> 'bool': ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_render_priority(self, priority: 'int') -> None: ...
    def get_render_priority(self) -> 'int': ...
    def set_pixel_size(self, pixel_size: 'float') -> None: ...
    def get_pixel_size(self) -> 'float': ...
    def set_axis(self, axis: 'Vector3__Axis') -> None: ...
    def get_axis(self) -> 'Vector3__Axis': ...
    def set_draw_flag(self, flag: 'SpriteBase3D__DrawFlags', enabled: 'bool') -> None: ...
    def get_draw_flag(self, flag: 'SpriteBase3D__DrawFlags') -> 'bool': ...
    def set_alpha_cut_mode(self, mode: 'SpriteBase3D__AlphaCutMode') -> None: ...
    def get_alpha_cut_mode(self) -> 'SpriteBase3D__AlphaCutMode': ...
    def set_alpha_scissor_threshold(self, threshold: 'float') -> None: ...
    def get_alpha_scissor_threshold(self) -> 'float': ...
    def set_alpha_hash_scale(self, threshold: 'float') -> None: ...
    def get_alpha_hash_scale(self) -> 'float': ...
    def set_alpha_antialiasing(self, alpha_aa: 'BaseMaterial3D__AlphaAntiAliasing') -> None: ...
    def get_alpha_antialiasing(self) -> 'BaseMaterial3D__AlphaAntiAliasing': ...
    def set_alpha_antialiasing_edge(self, edge: 'float') -> None: ...
    def get_alpha_antialiasing_edge(self) -> 'float': ...
    def set_billboard_mode(self, mode: 'BaseMaterial3D__BillboardMode') -> None: ...
    def get_billboard_mode(self) -> 'BaseMaterial3D__BillboardMode': ...
    def set_texture_filter(self, mode: 'BaseMaterial3D__TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'BaseMaterial3D__TextureFilter': ...
    def get_item_rect(self) -> 'Rect2': ...
    def generate_triangle_mesh(self) -> 'TriangleMesh': ...


class SpriteFrames(Resource):


    animations: 'Array'

    def add_animation(self, anim: 'StringName') -> None: ...
    def has_animation(self, anim: 'StringName') -> 'bool': ...
    def duplicate_animation(self, anim_from: 'StringName', anim_to: 'StringName') -> None: ...
    def remove_animation(self, anim: 'StringName') -> None: ...
    def rename_animation(self, anim: 'StringName', newname: 'StringName') -> None: ...
    def get_animation_names(self) -> 'PackedStringArray': ...
    def set_animation_speed(self, anim: 'StringName', fps: 'float') -> None: ...
    def get_animation_speed(self, anim: 'StringName') -> 'float': ...
    def set_animation_loop(self, anim: 'StringName', loop: 'bool') -> None: ...
    def get_animation_loop(self, anim: 'StringName') -> 'bool': ...
    def add_frame(self, anim: 'StringName', texture: 'Texture2D', duration: 'float' = 1.0, at_position: 'int' = -1) -> None: ...
    def set_frame(self, anim: 'StringName', idx: 'int', texture: 'Texture2D', duration: 'float' = 1.0) -> None: ...
    def remove_frame(self, anim: 'StringName', idx: 'int') -> None: ...
    def get_frame_count(self, anim: 'StringName') -> 'int': ...
    def get_frame_texture(self, anim: 'StringName', idx: 'int') -> 'Texture2D': ...
    def get_frame_duration(self, anim: 'StringName', idx: 'int') -> 'float': ...
    def clear(self, anim: 'StringName') -> None: ...
    def clear_all(self) -> None: ...


class StandardMaterial3D(BaseMaterial3D): ...


class StaticBody2D(PhysicsBody2D):


    physics_material_override: 'PhysicsMaterial'
    constant_linear_velocity: 'Vector2'
    constant_angular_velocity: 'float'

    def set_constant_linear_velocity(self, vel: 'Vector2') -> None: ...
    def set_constant_angular_velocity(self, vel: 'float') -> None: ...
    def get_constant_linear_velocity(self) -> 'Vector2': ...
    def get_constant_angular_velocity(self) -> 'float': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...


class StaticBody3D(PhysicsBody3D):


    physics_material_override: 'PhysicsMaterial'
    constant_linear_velocity: 'Vector3'
    constant_angular_velocity: 'Vector3'

    def set_constant_linear_velocity(self, vel: 'Vector3') -> None: ...
    def set_constant_angular_velocity(self, vel: 'Vector3') -> None: ...
    def get_constant_linear_velocity(self) -> 'Vector3': ...
    def get_constant_angular_velocity(self) -> 'Vector3': ...
    def set_physics_material_override(self, physics_material_override: 'PhysicsMaterial') -> None: ...
    def get_physics_material_override(self) -> 'PhysicsMaterial': ...


class StatusIndicator(Node):


    tooltip: 'str'
    icon: 'Texture2D'
    menu: 'NodePath'
    visible: 'bool'
    pressed: 'Signal[Callable[[int, Vector2i], None]]'  # pressed(mouse_button: int, mouse_position: Vector2i)

    def set_tooltip(self, tooltip: 'str') -> None: ...
    def get_tooltip(self) -> 'str': ...
    def set_icon(self, texture: 'Texture2D') -> None: ...
    def get_icon(self) -> 'Texture2D': ...
    def set_visible(self, visible: 'bool') -> None: ...
    def is_visible(self) -> 'bool': ...
    def set_menu(self, menu: 'NodePath') -> None: ...
    def get_menu(self) -> 'NodePath': ...
    def get_rect(self) -> 'Rect2': ...


class StreamPeer(RefCounted):


    big_endian: 'bool'

    def put_data(self, data: 'PackedByteArray') -> 'Error': ...
    def put_partial_data(self, data: 'PackedByteArray') -> 'Array': ...
    def get_data(self, bytes: 'int') -> 'Array': ...
    def get_partial_data(self, bytes: 'int') -> 'Array': ...
    def get_available_bytes(self) -> 'int': ...
    def set_big_endian(self, enable: 'bool') -> None: ...
    def is_big_endian_enabled(self) -> 'bool': ...
    def put_8(self, value: 'int') -> None: ...
    def put_u8(self, value: 'int') -> None: ...
    def put_16(self, value: 'int') -> None: ...
    def put_u16(self, value: 'int') -> None: ...
    def put_32(self, value: 'int') -> None: ...
    def put_u32(self, value: 'int') -> None: ...
    def put_64(self, value: 'int') -> None: ...
    def put_u64(self, value: 'int') -> None: ...
    def put_half(self, value: 'float') -> None: ...
    def put_float(self, value: 'float') -> None: ...
    def put_double(self, value: 'float') -> None: ...
    def put_string(self, value: 'str') -> None: ...
    def put_utf8_string(self, value: 'str') -> None: ...
    def put_var(self, value: 'Variant', full_objects: 'bool' = False) -> None: ...
    def get_8(self) -> 'int': ...
    def get_u8(self) -> 'int': ...
    def get_16(self) -> 'int': ...
    def get_u16(self) -> 'int': ...
    def get_32(self) -> 'int': ...
    def get_u32(self) -> 'int': ...
    def get_64(self) -> 'int': ...
    def get_u64(self) -> 'int': ...
    def get_half(self) -> 'float': ...
    def get_float(self) -> 'float': ...
    def get_double(self) -> 'float': ...
    def get_string(self, bytes: 'int' = -1) -> 'str': ...
    def get_utf8_string(self, bytes: 'int' = -1) -> 'str': ...
    def get_var(self, allow_objects: 'bool' = False) -> 'Variant': ...


class StreamPeerBuffer(StreamPeer):


    data_array: 'PackedByteArray'

    def seek(self, position: 'int') -> None: ...
    def get_size(self) -> 'int': ...
    def get_position(self) -> 'int': ...
    def resize(self, size: 'int') -> None: ...
    def set_data_array(self, data: 'PackedByteArray') -> None: ...
    def get_data_array(self) -> 'PackedByteArray': ...
    def clear(self) -> None: ...
    def duplicate(self) -> 'StreamPeerBuffer': ...


class StreamPeerExtension(StreamPeer):



    def _get_data(self, r_buffer: 'intptr', r_bytes: 'int', r_received: 'intptr') -> 'Error': ...
    def _get_partial_data(self, r_buffer: 'intptr', r_bytes: 'int', r_received: 'intptr') -> 'Error': ...
    def _put_data(self, p_data: 'intptr', p_bytes: 'int', r_sent: 'intptr') -> 'Error': ...
    def _put_partial_data(self, p_data: 'intptr', p_bytes: 'int', r_sent: 'intptr') -> 'Error': ...
    def _get_available_bytes(self) -> 'int': ...


class StreamPeerGZIP(StreamPeer):



    def start_compression(self, use_deflate: 'bool' = False, buffer_size: 'int' = 65535) -> 'Error': ...
    def start_decompression(self, use_deflate: 'bool' = False, buffer_size: 'int' = 65535) -> 'Error': ...
    def finish(self) -> 'Error': ...
    def clear(self) -> None: ...


class StreamPeerTCP(StreamPeer):



    def bind(self, port: 'int', host: 'str' = "*") -> 'Error': ...
    def connect_to_host(self, host: 'str', port: 'int') -> 'Error': ...
    def poll(self) -> 'Error': ...
    def get_status(self) -> 'StreamPeerTCP__Status': ...
    def get_connected_host(self) -> 'str': ...
    def get_connected_port(self) -> 'int': ...
    def get_local_port(self) -> 'int': ...
    def disconnect_from_host(self) -> None: ...
    def set_no_delay(self, enabled: 'bool') -> None: ...


class StreamPeerTLS(StreamPeer):



    def poll(self) -> None: ...
    def accept_stream(self, stream: 'StreamPeer', server_options: 'TLSOptions') -> 'Error': ...
    def connect_to_stream(self, stream: 'StreamPeer', common_name: 'str', client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def get_status(self) -> 'StreamPeerTLS__Status': ...
    def get_stream(self) -> 'StreamPeer': ...
    def disconnect_from_stream(self) -> None: ...


class StyleBox(Resource):


    content_margin_left: 'float'
    content_margin_top: 'float'
    content_margin_right: 'float'
    content_margin_bottom: 'float'

    def _draw(self, to_canvas_item: 'RID', rect: 'Rect2') -> None: ...
    def _get_draw_rect(self, rect: 'Rect2') -> 'Rect2': ...
    def _get_minimum_size(self) -> 'Vector2': ...
    def _test_mask(self, point: 'Vector2', rect: 'Rect2') -> 'bool': ...
    def get_minimum_size(self) -> 'Vector2': ...
    def set_content_margin(self, margin: 'Side', offset: 'float') -> None: ...
    def set_content_margin_all(self, offset: 'float') -> None: ...
    def get_content_margin(self, margin: 'Side') -> 'float': ...
    def get_margin(self, margin: 'Side') -> 'float': ...
    def get_offset(self) -> 'Vector2': ...
    def draw(self, canvas_item: 'RID', rect: 'Rect2') -> None: ...
    def get_current_item_drawn(self) -> 'CanvasItem': ...
    def test_mask(self, point: 'Vector2', rect: 'Rect2') -> 'bool': ...


class StyleBoxEmpty(StyleBox): ...


class StyleBoxFlat(StyleBox):


    bg_color: 'Color'
    draw_center: 'bool'
    skew: 'Vector2'
    border_width_left: 'int'
    border_width_top: 'int'
    border_width_right: 'int'
    border_width_bottom: 'int'
    border_color: 'Color'
    border_blend: 'bool'
    corner_radius_top_left: 'int'
    corner_radius_top_right: 'int'
    corner_radius_bottom_right: 'int'
    corner_radius_bottom_left: 'int'
    corner_detail: 'int'
    expand_margin_left: 'float'
    expand_margin_top: 'float'
    expand_margin_right: 'float'
    expand_margin_bottom: 'float'
    shadow_color: 'Color'
    shadow_size: 'int'
    shadow_offset: 'Vector2'
    anti_aliasing: 'bool'
    anti_aliasing_size: 'float'

    def set_bg_color(self, color: 'Color') -> None: ...
    def get_bg_color(self) -> 'Color': ...
    def set_border_color(self, color: 'Color') -> None: ...
    def get_border_color(self) -> 'Color': ...
    def set_border_width_all(self, width: 'int') -> None: ...
    def get_border_width_min(self) -> 'int': ...
    def set_border_width(self, margin: 'Side', width: 'int') -> None: ...
    def get_border_width(self, margin: 'Side') -> 'int': ...
    def set_border_blend(self, blend: 'bool') -> None: ...
    def get_border_blend(self) -> 'bool': ...
    def set_corner_radius_all(self, radius: 'int') -> None: ...
    def set_corner_radius(self, corner: 'Corner', radius: 'int') -> None: ...
    def get_corner_radius(self, corner: 'Corner') -> 'int': ...
    def set_expand_margin(self, margin: 'Side', size: 'float') -> None: ...
    def set_expand_margin_all(self, size: 'float') -> None: ...
    def get_expand_margin(self, margin: 'Side') -> 'float': ...
    def set_draw_center(self, draw_center: 'bool') -> None: ...
    def is_draw_center_enabled(self) -> 'bool': ...
    def set_skew(self, skew: 'Vector2') -> None: ...
    def get_skew(self) -> 'Vector2': ...
    def set_shadow_color(self, color: 'Color') -> None: ...
    def get_shadow_color(self) -> 'Color': ...
    def set_shadow_size(self, size: 'int') -> None: ...
    def get_shadow_size(self) -> 'int': ...
    def set_shadow_offset(self, offset: 'Vector2') -> None: ...
    def get_shadow_offset(self) -> 'Vector2': ...
    def set_anti_aliased(self, anti_aliased: 'bool') -> None: ...
    def is_anti_aliased(self) -> 'bool': ...
    def set_aa_size(self, size: 'float') -> None: ...
    def get_aa_size(self) -> 'float': ...
    def set_corner_detail(self, detail: 'int') -> None: ...
    def get_corner_detail(self) -> 'int': ...


class StyleBoxLine(StyleBox):


    color: 'Color'
    grow_begin: 'float'
    grow_end: 'float'
    thickness: 'int'
    vertical: 'bool'

    def set_color(self, color: 'Color') -> None: ...
    def get_color(self) -> 'Color': ...
    def set_thickness(self, thickness: 'int') -> None: ...
    def get_thickness(self) -> 'int': ...
    def set_grow_begin(self, offset: 'float') -> None: ...
    def get_grow_begin(self) -> 'float': ...
    def set_grow_end(self, offset: 'float') -> None: ...
    def get_grow_end(self) -> 'float': ...
    def set_vertical(self, vertical: 'bool') -> None: ...
    def is_vertical(self) -> 'bool': ...


class StyleBoxTexture(StyleBox):


    texture: 'Texture2D'
    texture_margin_left: 'float'
    texture_margin_top: 'float'
    texture_margin_right: 'float'
    texture_margin_bottom: 'float'
    expand_margin_left: 'float'
    expand_margin_top: 'float'
    expand_margin_right: 'float'
    expand_margin_bottom: 'float'
    axis_stretch_horizontal: 'int'
    axis_stretch_vertical: 'int'
    region_rect: 'Rect2'
    modulate_color: 'Color'
    draw_center: 'bool'

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_margin(self, margin: 'Side', size: 'float') -> None: ...
    def set_texture_margin_all(self, size: 'float') -> None: ...
    def get_texture_margin(self, margin: 'Side') -> 'float': ...
    def set_expand_margin(self, margin: 'Side', size: 'float') -> None: ...
    def set_expand_margin_all(self, size: 'float') -> None: ...
    def get_expand_margin(self, margin: 'Side') -> 'float': ...
    def set_region_rect(self, region: 'Rect2') -> None: ...
    def get_region_rect(self) -> 'Rect2': ...
    def set_draw_center(self, enable: 'bool') -> None: ...
    def is_draw_center_enabled(self) -> 'bool': ...
    def set_modulate(self, color: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_h_axis_stretch_mode(self, mode: 'StyleBoxTexture__AxisStretchMode') -> None: ...
    def get_h_axis_stretch_mode(self) -> 'StyleBoxTexture__AxisStretchMode': ...
    def set_v_axis_stretch_mode(self, mode: 'StyleBoxTexture__AxisStretchMode') -> None: ...
    def get_v_axis_stretch_mode(self) -> 'StyleBoxTexture__AxisStretchMode': ...


class SubViewport(Viewport):


    size: 'Vector2i'
    size_2d_override: 'Vector2i'
    size_2d_override_stretch: 'bool'
    render_target_clear_mode: 'int'
    render_target_update_mode: 'int'

    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def set_size_2d_override(self, size: 'Vector2i') -> None: ...
    def get_size_2d_override(self) -> 'Vector2i': ...
    def set_size_2d_override_stretch(self, enable: 'bool') -> None: ...
    def is_size_2d_override_stretch_enabled(self) -> 'bool': ...
    def set_update_mode(self, mode: 'SubViewport__UpdateMode') -> None: ...
    def get_update_mode(self) -> 'SubViewport__UpdateMode': ...
    def set_clear_mode(self, mode: 'SubViewport__ClearMode') -> None: ...
    def get_clear_mode(self) -> 'SubViewport__ClearMode': ...


class SubViewportContainer(Container):


    stretch: 'bool'
    stretch_shrink: 'int'
    mouse_target: 'bool'

    def _propagate_input_event(self, event: 'InputEvent') -> 'bool': ...
    def set_stretch(self, enable: 'bool') -> None: ...
    def is_stretch_enabled(self) -> 'bool': ...
    def set_stretch_shrink(self, amount: 'int') -> None: ...
    def get_stretch_shrink(self) -> 'int': ...
    def set_mouse_target(self, amount: 'bool') -> None: ...
    def is_mouse_target_enabled(self) -> 'bool': ...


class SubtweenTweener(Tweener):



    def set_delay(self, delay: 'float') -> 'SubtweenTweener': ...


class SurfaceTool(RefCounted):



    def set_skin_weight_count(self, count: 'SurfaceTool__SkinWeightCount') -> None: ...
    def get_skin_weight_count(self) -> 'SurfaceTool__SkinWeightCount': ...
    def set_custom_format(self, channel_index: 'int', format: 'SurfaceTool__CustomFormat') -> None: ...
    def get_custom_format(self, channel_index: 'int') -> 'SurfaceTool__CustomFormat': ...
    def begin(self, primitive: 'Mesh__PrimitiveType') -> None: ...
    def add_vertex(self, vertex: 'Vector3') -> None: ...
    def set_color(self, color: 'Color') -> None: ...
    def set_normal(self, normal: 'Vector3') -> None: ...
    def set_tangent(self, tangent: 'Plane') -> None: ...
    def set_uv(self, uv: 'Vector2') -> None: ...
    def set_uv2(self, uv2: 'Vector2') -> None: ...
    def set_bones(self, bones: 'PackedInt32Array') -> None: ...
    def set_weights(self, weights: 'PackedFloat32Array') -> None: ...
    def set_custom(self, channel_index: 'int', custom_color: 'Color') -> None: ...
    def set_smooth_group(self, index: 'int') -> None: ...
    def add_triangle_fan(self, vertices: 'PackedVector3Array', uvs: 'PackedVector2Array' = default('''PackedVector2Array()'''), colors: 'PackedColorArray' = default('''PackedColorArray()'''), uv2s: 'PackedVector2Array' = default('''PackedVector2Array()'''), normals: 'PackedVector3Array' = default('''PackedVector3Array()'''), tangents: 'Array'['Plane'] = default('''Array[Plane]([])''')) -> None: ...
    def add_index(self, index: 'int') -> None: ...
    def index(self) -> None: ...
    def deindex(self) -> None: ...
    def generate_normals(self, flip: 'bool' = False) -> None: ...
    def generate_tangents(self) -> None: ...
    def optimize_indices_for_cache(self) -> None: ...
    def get_aabb(self) -> 'AABB': ...
    def generate_lod(self, nd_threshold: 'float', target_index_count: 'int' = 3) -> 'PackedInt32Array': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_primitive_type(self) -> 'Mesh__PrimitiveType': ...
    def clear(self) -> None: ...
    def create_from(self, existing: 'Mesh', surface: 'int') -> None: ...
    def create_from_arrays(self, arrays: 'Array', primitive_type: 'Mesh__PrimitiveType' = 3) -> None: ...
    def create_from_blend_shape(self, existing: 'Mesh', surface: 'int', blend_shape: 'str') -> None: ...
    def append_from(self, existing: 'Mesh', surface: 'int', transform: 'Transform3D') -> None: ...
    def commit(self, existing: 'ArrayMesh' = default('''null'''), flags: 'int' = 0) -> 'ArrayMesh': ...
    def commit_to_arrays(self) -> 'Array': ...


class SyntaxHighlighter(Resource):



    def _get_line_syntax_highlighting(self, line: 'int') -> 'Dictionary': ...
    def _clear_highlighting_cache(self) -> None: ...
    def _update_cache(self) -> None: ...
    def get_line_syntax_highlighting(self, line: 'int') -> 'Dictionary': ...
    def update_cache(self) -> None: ...
    def clear_highlighting_cache(self) -> None: ...
    def get_text_edit(self) -> 'TextEdit': ...


class SystemFont(Font):


    font_names: 'PackedStringArray'
    font_italic: 'bool'
    font_weight: 'int'
    font_stretch: 'int'
    antialiasing: 'int'
    generate_mipmaps: 'bool'
    disable_embedded_bitmaps: 'bool'
    allow_system_fallback: 'bool'
    force_autohinter: 'bool'
    hinting: 'int'
    subpixel_positioning: 'int'
    keep_rounding_remainders: 'bool'
    multichannel_signed_distance_field: 'bool'
    msdf_pixel_range: 'int'
    msdf_size: 'int'
    oversampling: 'float'

    def set_antialiasing(self, antialiasing: 'TextServer__FontAntialiasing') -> None: ...
    def get_antialiasing(self) -> 'TextServer__FontAntialiasing': ...
    def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps: 'bool') -> None: ...
    def get_disable_embedded_bitmaps(self) -> 'bool': ...
    def set_generate_mipmaps(self, generate_mipmaps: 'bool') -> None: ...
    def get_generate_mipmaps(self) -> 'bool': ...
    def set_allow_system_fallback(self, allow_system_fallback: 'bool') -> None: ...
    def is_allow_system_fallback(self) -> 'bool': ...
    def set_force_autohinter(self, force_autohinter: 'bool') -> None: ...
    def is_force_autohinter(self) -> 'bool': ...
    def set_hinting(self, hinting: 'TextServer__Hinting') -> None: ...
    def get_hinting(self) -> 'TextServer__Hinting': ...
    def set_subpixel_positioning(self, subpixel_positioning: 'TextServer__SubpixelPositioning') -> None: ...
    def get_subpixel_positioning(self) -> 'TextServer__SubpixelPositioning': ...
    def set_keep_rounding_remainders(self, keep_rounding_remainders: 'bool') -> None: ...
    def get_keep_rounding_remainders(self) -> 'bool': ...
    def set_multichannel_signed_distance_field(self, msdf: 'bool') -> None: ...
    def is_multichannel_signed_distance_field(self) -> 'bool': ...
    def set_msdf_pixel_range(self, msdf_pixel_range: 'int') -> None: ...
    def get_msdf_pixel_range(self) -> 'int': ...
    def set_msdf_size(self, msdf_size: 'int') -> None: ...
    def get_msdf_size(self) -> 'int': ...
    def set_oversampling(self, oversampling: 'float') -> None: ...
    def get_oversampling(self) -> 'float': ...
    def get_font_names(self) -> 'PackedStringArray': ...
    def set_font_names(self, names: 'PackedStringArray') -> None: ...
    def get_font_italic(self) -> 'bool': ...
    def set_font_italic(self, italic: 'bool') -> None: ...
    def set_font_weight(self, weight: 'int') -> None: ...
    def set_font_stretch(self, stretch: 'int') -> None: ...


class TCPServer(RefCounted):



    def listen(self, port: 'int', bind_address: 'str' = "*") -> 'Error': ...
    def is_connection_available(self) -> 'bool': ...
    def is_listening(self) -> 'bool': ...
    def get_local_port(self) -> 'int': ...
    def take_connection(self) -> 'StreamPeerTCP': ...
    def stop(self) -> None: ...


class TLSOptions(RefCounted):



    @staticmethod
    def client(trusted_chain: 'X509Certificate' = default('''null'''), common_name_override: 'str' = "") -> 'TLSOptions': ...
    @staticmethod
    def client_unsafe(trusted_chain: 'X509Certificate' = default('''null''')) -> 'TLSOptions': ...
    @staticmethod
    def server(key: 'CryptoKey', certificate: 'X509Certificate') -> 'TLSOptions': ...
    def is_server(self) -> 'bool': ...
    def is_unsafe_client(self) -> 'bool': ...
    def get_common_name_override(self) -> 'str': ...
    def get_trusted_ca_chain(self) -> 'X509Certificate': ...
    def get_private_key(self) -> 'CryptoKey': ...
    def get_own_certificate(self) -> 'X509Certificate': ...


class TabBar(Control):


    current_tab: 'int'
    tab_alignment: 'int'
    clip_tabs: 'bool'
    tab_close_display_policy: 'int'
    max_tab_width: 'int'
    scrolling_enabled: 'bool'
    drag_to_rearrange_enabled: 'bool'
    tabs_rearrange_group: 'int'
    scroll_to_selected: 'bool'
    select_with_rmb: 'bool'
    deselect_enabled: 'bool'
    tab_count: 'int'
    tab_selected: 'Signal[Callable[[int], None]]'  # tab_selected(tab: int)
    tab_changed: 'Signal[Callable[[int], None]]'  # tab_changed(tab: int)
    tab_clicked: 'Signal[Callable[[int], None]]'  # tab_clicked(tab: int)
    tab_rmb_clicked: 'Signal[Callable[[int], None]]'  # tab_rmb_clicked(tab: int)
    tab_close_pressed: 'Signal[Callable[[int], None]]'  # tab_close_pressed(tab: int)
    tab_button_pressed: 'Signal[Callable[[int], None]]'  # tab_button_pressed(tab: int)
    tab_hovered: 'Signal[Callable[[int], None]]'  # tab_hovered(tab: int)
    active_tab_rearranged: 'Signal[Callable[[int], None]]'  # active_tab_rearranged(idx_to: int)

    def set_tab_count(self, count: 'int') -> None: ...
    def get_tab_count(self) -> 'int': ...
    def set_current_tab(self, tab_idx: 'int') -> None: ...
    def get_current_tab(self) -> 'int': ...
    def get_previous_tab(self) -> 'int': ...
    def select_previous_available(self) -> 'bool': ...
    def select_next_available(self) -> 'bool': ...
    def set_tab_title(self, tab_idx: 'int', title: 'str') -> None: ...
    def get_tab_title(self, tab_idx: 'int') -> 'str': ...
    def set_tab_tooltip(self, tab_idx: 'int', tooltip: 'str') -> None: ...
    def get_tab_tooltip(self, tab_idx: 'int') -> 'str': ...
    def set_tab_text_direction(self, tab_idx: 'int', direction: 'Control__TextDirection') -> None: ...
    def get_tab_text_direction(self, tab_idx: 'int') -> 'Control__TextDirection': ...
    def set_tab_language(self, tab_idx: 'int', language: 'str') -> None: ...
    def get_tab_language(self, tab_idx: 'int') -> 'str': ...
    def set_tab_icon(self, tab_idx: 'int', icon: 'Texture2D') -> None: ...
    def get_tab_icon(self, tab_idx: 'int') -> 'Texture2D': ...
    def set_tab_icon_max_width(self, tab_idx: 'int', width: 'int') -> None: ...
    def get_tab_icon_max_width(self, tab_idx: 'int') -> 'int': ...
    def set_tab_button_icon(self, tab_idx: 'int', icon: 'Texture2D') -> None: ...
    def get_tab_button_icon(self, tab_idx: 'int') -> 'Texture2D': ...
    def set_tab_disabled(self, tab_idx: 'int', disabled: 'bool') -> None: ...
    def is_tab_disabled(self, tab_idx: 'int') -> 'bool': ...
    def set_tab_hidden(self, tab_idx: 'int', hidden: 'bool') -> None: ...
    def is_tab_hidden(self, tab_idx: 'int') -> 'bool': ...
    def set_tab_metadata(self, tab_idx: 'int', metadata: 'Variant') -> None: ...
    def get_tab_metadata(self, tab_idx: 'int') -> 'Variant': ...
    def remove_tab(self, tab_idx: 'int') -> None: ...
    def add_tab(self, title: 'str' = "", icon: 'Texture2D' = default('''null''')) -> None: ...
    def get_tab_idx_at_point(self, point: 'Vector2') -> 'int': ...
    def set_tab_alignment(self, alignment: 'TabBar__AlignmentMode') -> None: ...
    def get_tab_alignment(self) -> 'TabBar__AlignmentMode': ...
    def set_clip_tabs(self, clip_tabs: 'bool') -> None: ...
    def get_clip_tabs(self) -> 'bool': ...
    def get_tab_offset(self) -> 'int': ...
    def get_offset_buttons_visible(self) -> 'bool': ...
    def ensure_tab_visible(self, idx: 'int') -> None: ...
    def get_tab_rect(self, tab_idx: 'int') -> 'Rect2': ...
    def move_tab(self, from_: 'int', to: 'int') -> None: ...
    def set_tab_close_display_policy(self, policy: 'TabBar__CloseButtonDisplayPolicy') -> None: ...
    def get_tab_close_display_policy(self) -> 'TabBar__CloseButtonDisplayPolicy': ...
    def set_max_tab_width(self, width: 'int') -> None: ...
    def get_max_tab_width(self) -> 'int': ...
    def set_scrolling_enabled(self, enabled: 'bool') -> None: ...
    def get_scrolling_enabled(self) -> 'bool': ...
    def set_drag_to_rearrange_enabled(self, enabled: 'bool') -> None: ...
    def get_drag_to_rearrange_enabled(self) -> 'bool': ...
    def set_tabs_rearrange_group(self, group_id: 'int') -> None: ...
    def get_tabs_rearrange_group(self) -> 'int': ...
    def set_scroll_to_selected(self, enabled: 'bool') -> None: ...
    def get_scroll_to_selected(self) -> 'bool': ...
    def set_select_with_rmb(self, enabled: 'bool') -> None: ...
    def get_select_with_rmb(self) -> 'bool': ...
    def set_deselect_enabled(self, enabled: 'bool') -> None: ...
    def get_deselect_enabled(self) -> 'bool': ...
    def clear_tabs(self) -> None: ...


class TabContainer(Container):


    tab_alignment: 'int'
    current_tab: 'int'
    tabs_position: 'int'
    clip_tabs: 'bool'
    tabs_visible: 'bool'
    all_tabs_in_front: 'bool'
    drag_to_rearrange_enabled: 'bool'
    tabs_rearrange_group: 'int'
    use_hidden_tabs_for_min_size: 'bool'
    tab_focus_mode: 'int'
    deselect_enabled: 'bool'
    active_tab_rearranged: 'Signal[Callable[[int], None]]'  # active_tab_rearranged(idx_to: int)
    tab_changed: 'Signal[Callable[[int], None]]'  # tab_changed(tab: int)
    tab_clicked: 'Signal[Callable[[int], None]]'  # tab_clicked(tab: int)
    tab_hovered: 'Signal[Callable[[int], None]]'  # tab_hovered(tab: int)
    tab_selected: 'Signal[Callable[[int], None]]'  # tab_selected(tab: int)
    tab_button_pressed: 'Signal[Callable[[int], None]]'  # tab_button_pressed(tab: int)
    pre_popup_pressed: 'Signal[Callable[[], None]]'  # pre_popup_pressed()

    def get_tab_count(self) -> 'int': ...
    def set_current_tab(self, tab_idx: 'int') -> None: ...
    def get_current_tab(self) -> 'int': ...
    def get_previous_tab(self) -> 'int': ...
    def select_previous_available(self) -> 'bool': ...
    def select_next_available(self) -> 'bool': ...
    def get_current_tab_control(self) -> 'Control': ...
    def get_tab_bar(self) -> 'TabBar': ...
    def get_tab_control(self, tab_idx: 'int') -> 'Control': ...
    def set_tab_alignment(self, alignment: 'TabBar__AlignmentMode') -> None: ...
    def get_tab_alignment(self) -> 'TabBar__AlignmentMode': ...
    def set_tabs_position(self, tabs_position: 'TabContainer__TabPosition') -> None: ...
    def get_tabs_position(self) -> 'TabContainer__TabPosition': ...
    def set_clip_tabs(self, clip_tabs: 'bool') -> None: ...
    def get_clip_tabs(self) -> 'bool': ...
    def set_tabs_visible(self, visible: 'bool') -> None: ...
    def are_tabs_visible(self) -> 'bool': ...
    def set_all_tabs_in_front(self, is_front: 'bool') -> None: ...
    def is_all_tabs_in_front(self) -> 'bool': ...
    def set_tab_title(self, tab_idx: 'int', title: 'str') -> None: ...
    def get_tab_title(self, tab_idx: 'int') -> 'str': ...
    def set_tab_tooltip(self, tab_idx: 'int', tooltip: 'str') -> None: ...
    def get_tab_tooltip(self, tab_idx: 'int') -> 'str': ...
    def set_tab_icon(self, tab_idx: 'int', icon: 'Texture2D') -> None: ...
    def get_tab_icon(self, tab_idx: 'int') -> 'Texture2D': ...
    def set_tab_icon_max_width(self, tab_idx: 'int', width: 'int') -> None: ...
    def get_tab_icon_max_width(self, tab_idx: 'int') -> 'int': ...
    def set_tab_disabled(self, tab_idx: 'int', disabled: 'bool') -> None: ...
    def is_tab_disabled(self, tab_idx: 'int') -> 'bool': ...
    def set_tab_hidden(self, tab_idx: 'int', hidden: 'bool') -> None: ...
    def is_tab_hidden(self, tab_idx: 'int') -> 'bool': ...
    def set_tab_metadata(self, tab_idx: 'int', metadata: 'Variant') -> None: ...
    def get_tab_metadata(self, tab_idx: 'int') -> 'Variant': ...
    def set_tab_button_icon(self, tab_idx: 'int', icon: 'Texture2D') -> None: ...
    def get_tab_button_icon(self, tab_idx: 'int') -> 'Texture2D': ...
    def get_tab_idx_at_point(self, point: 'Vector2') -> 'int': ...
    def get_tab_idx_from_control(self, control: 'Control') -> 'int': ...
    def set_popup(self, popup: 'Node') -> None: ...
    def get_popup(self) -> 'Popup': ...
    def set_drag_to_rearrange_enabled(self, enabled: 'bool') -> None: ...
    def get_drag_to_rearrange_enabled(self) -> 'bool': ...
    def set_tabs_rearrange_group(self, group_id: 'int') -> None: ...
    def get_tabs_rearrange_group(self) -> 'int': ...
    def set_use_hidden_tabs_for_min_size(self, enabled: 'bool') -> None: ...
    def get_use_hidden_tabs_for_min_size(self) -> 'bool': ...
    def set_tab_focus_mode(self, focus_mode: 'Control__FocusMode') -> None: ...
    def get_tab_focus_mode(self) -> 'Control__FocusMode': ...
    def set_deselect_enabled(self, enabled: 'bool') -> None: ...
    def get_deselect_enabled(self) -> 'bool': ...


class TextEdit(Control):


    text: 'str'
    placeholder_text: 'str'
    editable: 'bool'
    context_menu_enabled: 'bool'
    emoji_menu_enabled: 'bool'
    shortcut_keys_enabled: 'bool'
    selecting_enabled: 'bool'
    deselect_on_focus_loss_enabled: 'bool'
    drag_and_drop_selection_enabled: 'bool'
    virtual_keyboard_enabled: 'bool'
    middle_mouse_paste_enabled: 'bool'
    empty_selection_clipboard_enabled: 'bool'
    wrap_mode: 'int'
    autowrap_mode: 'int'
    indent_wrapped_lines: 'bool'
    scroll_smooth: 'bool'
    scroll_v_scroll_speed: 'float'
    scroll_past_end_of_file: 'bool'
    scroll_vertical: 'float'
    scroll_horizontal: 'int'
    scroll_fit_content_height: 'bool'
    scroll_fit_content_width: 'bool'
    minimap_draw: 'bool'
    minimap_width: 'int'
    caret_type: 'int'
    caret_blink: 'bool'
    caret_blink_interval: 'float'
    caret_draw_when_editable_disabled: 'bool'
    caret_move_on_right_click: 'bool'
    caret_mid_grapheme: 'bool'
    caret_multiple: 'bool'
    use_default_word_separators: 'bool'
    use_custom_word_separators: 'bool'
    custom_word_separators: 'str'
    syntax_highlighter: 'SyntaxHighlighter'
    highlight_all_occurrences: 'bool'
    highlight_current_line: 'bool'
    draw_control_chars: 'bool'
    draw_tabs: 'bool'
    draw_spaces: 'bool'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'
    text_set: 'Signal[Callable[[], None]]'  # text_set()
    text_changed: 'Signal[Callable[[], None]]'  # text_changed()
    lines_edited_from: 'Signal[Callable[[int, int], None]]'  # lines_edited_from(from_line: int, to_line: int)
    caret_changed: 'Signal[Callable[[], None]]'  # caret_changed()
    gutter_clicked: 'Signal[Callable[[int, int], None]]'  # gutter_clicked(line: int, gutter: int)
    gutter_added: 'Signal[Callable[[], None]]'  # gutter_added()
    gutter_removed: 'Signal[Callable[[], None]]'  # gutter_removed()

    def _handle_unicode_input(self, unicode_char: 'int', caret_index: 'int') -> None: ...
    def _backspace(self, caret_index: 'int') -> None: ...
    def _cut(self, caret_index: 'int') -> None: ...
    def _copy(self, caret_index: 'int') -> None: ...
    def _paste(self, caret_index: 'int') -> None: ...
    def _paste_primary_clipboard(self, caret_index: 'int') -> None: ...
    def has_ime_text(self) -> 'bool': ...
    def cancel_ime(self) -> None: ...
    def apply_ime(self) -> None: ...
    def set_editable(self, enabled: 'bool') -> None: ...
    def is_editable(self) -> 'bool': ...
    def set_text_direction(self, direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self) -> 'Control__TextDirection': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_tab_size(self, size: 'int') -> None: ...
    def get_tab_size(self) -> 'int': ...
    def set_indent_wrapped_lines(self, enabled: 'bool') -> None: ...
    def is_indent_wrapped_lines(self) -> 'bool': ...
    def set_overtype_mode_enabled(self, enabled: 'bool') -> None: ...
    def is_overtype_mode_enabled(self) -> 'bool': ...
    def set_context_menu_enabled(self, enabled: 'bool') -> None: ...
    def is_context_menu_enabled(self) -> 'bool': ...
    def set_emoji_menu_enabled(self, enable: 'bool') -> None: ...
    def is_emoji_menu_enabled(self) -> 'bool': ...
    def set_shortcut_keys_enabled(self, enabled: 'bool') -> None: ...
    def is_shortcut_keys_enabled(self) -> 'bool': ...
    def set_virtual_keyboard_enabled(self, enabled: 'bool') -> None: ...
    def is_virtual_keyboard_enabled(self) -> 'bool': ...
    def set_middle_mouse_paste_enabled(self, enabled: 'bool') -> None: ...
    def is_middle_mouse_paste_enabled(self) -> 'bool': ...
    def set_empty_selection_clipboard_enabled(self, enabled: 'bool') -> None: ...
    def is_empty_selection_clipboard_enabled(self) -> 'bool': ...
    def clear(self) -> None: ...
    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def get_line_count(self) -> 'int': ...
    def set_placeholder(self, text: 'str') -> None: ...
    def get_placeholder(self) -> 'str': ...
    def set_line(self, line: 'int', new_text: 'str') -> None: ...
    def get_line(self, line: 'int') -> 'str': ...
    def get_line_with_ime(self, line: 'int') -> 'str': ...
    def get_line_width(self, line: 'int', wrap_index: 'int' = -1) -> 'int': ...
    def get_line_height(self) -> 'int': ...
    def get_indent_level(self, line: 'int') -> 'int': ...
    def get_first_non_whitespace_column(self, line: 'int') -> 'int': ...
    def swap_lines(self, from_line: 'int', to_line: 'int') -> None: ...
    def insert_line_at(self, line: 'int', text: 'str') -> None: ...
    def remove_line_at(self, line: 'int', move_carets_down: 'bool' = True) -> None: ...
    def insert_text_at_caret(self, text: 'str', caret_index: 'int' = -1) -> None: ...
    def insert_text(self, text: 'str', line: 'int', column: 'int', before_selection_begin: 'bool' = True, before_selection_end: 'bool' = False) -> None: ...
    def remove_text(self, from_line: 'int', from_column: 'int', to_line: 'int', to_column: 'int') -> None: ...
    def get_last_unhidden_line(self) -> 'int': ...
    def get_next_visible_line_offset_from(self, line: 'int', visible_amount: 'int') -> 'int': ...
    def get_next_visible_line_index_offset_from(self, line: 'int', wrap_index: 'int', visible_amount: 'int') -> 'Vector2i': ...
    def backspace(self, caret_index: 'int' = -1) -> None: ...
    def cut(self, caret_index: 'int' = -1) -> None: ...
    def copy(self, caret_index: 'int' = -1) -> None: ...
    def paste(self, caret_index: 'int' = -1) -> None: ...
    def paste_primary_clipboard(self, caret_index: 'int' = -1) -> None: ...
    def start_action(self, action: 'TextEdit__EditAction') -> None: ...
    def end_action(self) -> None: ...
    def begin_complex_operation(self) -> None: ...
    def end_complex_operation(self) -> None: ...
    def has_undo(self) -> 'bool': ...
    def has_redo(self) -> 'bool': ...
    def undo(self) -> None: ...
    def redo(self) -> None: ...
    def clear_undo_history(self) -> None: ...
    def tag_saved_version(self) -> None: ...
    def get_version(self) -> 'int': ...
    def get_saved_version(self) -> 'int': ...
    def set_search_text(self, search_text: 'str') -> None: ...
    def set_search_flags(self, flags: 'int') -> None: ...
    def search(self, text: 'str', flags: 'int', from_line: 'int', from_column: 'int') -> 'Vector2i': ...
    def set_tooltip_request_func(self, callback: 'Callable') -> None: ...
    def get_local_mouse_pos(self) -> 'Vector2': ...
    def get_word_at_pos(self, position: 'Vector2') -> 'str': ...
    def get_line_column_at_pos(self, position: 'Vector2i', clamp_line: 'bool' = True, clamp_column: 'bool' = True) -> 'Vector2i': ...
    def get_pos_at_line_column(self, line: 'int', column: 'int') -> 'Vector2i': ...
    def get_rect_at_line_column(self, line: 'int', column: 'int') -> 'Rect2i': ...
    def get_minimap_line_at_pos(self, position: 'Vector2i') -> 'int': ...
    def is_dragging_cursor(self) -> 'bool': ...
    def is_mouse_over_selection(self, edges: 'bool', caret_index: 'int' = -1) -> 'bool': ...
    def set_caret_type(self, type: 'TextEdit__CaretType') -> None: ...
    def get_caret_type(self) -> 'TextEdit__CaretType': ...
    def set_caret_blink_enabled(self, enable: 'bool') -> None: ...
    def is_caret_blink_enabled(self) -> 'bool': ...
    def set_caret_blink_interval(self, interval: 'float') -> None: ...
    def get_caret_blink_interval(self) -> 'float': ...
    def set_draw_caret_when_editable_disabled(self, enable: 'bool') -> None: ...
    def is_drawing_caret_when_editable_disabled(self) -> 'bool': ...
    def set_move_caret_on_right_click_enabled(self, enable: 'bool') -> None: ...
    def is_move_caret_on_right_click_enabled(self) -> 'bool': ...
    def set_caret_mid_grapheme_enabled(self, enabled: 'bool') -> None: ...
    def is_caret_mid_grapheme_enabled(self) -> 'bool': ...
    def set_multiple_carets_enabled(self, enabled: 'bool') -> None: ...
    def is_multiple_carets_enabled(self) -> 'bool': ...
    def add_caret(self, line: 'int', column: 'int') -> 'int': ...
    def remove_caret(self, caret: 'int') -> None: ...
    def remove_secondary_carets(self) -> None: ...
    def get_caret_count(self) -> 'int': ...
    def add_caret_at_carets(self, below: 'bool') -> None: ...
    def get_sorted_carets(self, include_ignored_carets: 'bool' = False) -> 'PackedInt32Array': ...
    def collapse_carets(self, from_line: 'int', from_column: 'int', to_line: 'int', to_column: 'int', inclusive: 'bool' = False) -> None: ...
    def merge_overlapping_carets(self) -> None: ...
    def begin_multicaret_edit(self) -> None: ...
    def end_multicaret_edit(self) -> None: ...
    def is_in_mulitcaret_edit(self) -> 'bool': ...
    def multicaret_edit_ignore_caret(self, caret_index: 'int') -> 'bool': ...
    def is_caret_visible(self, caret_index: 'int' = 0) -> 'bool': ...
    def get_caret_draw_pos(self, caret_index: 'int' = 0) -> 'Vector2': ...
    def set_caret_line(self, line: 'int', adjust_viewport: 'bool' = True, can_be_hidden: 'bool' = True, wrap_index: 'int' = 0, caret_index: 'int' = 0) -> None: ...
    def get_caret_line(self, caret_index: 'int' = 0) -> 'int': ...
    def set_caret_column(self, column: 'int', adjust_viewport: 'bool' = True, caret_index: 'int' = 0) -> None: ...
    def get_caret_column(self, caret_index: 'int' = 0) -> 'int': ...
    def get_caret_wrap_index(self, caret_index: 'int' = 0) -> 'int': ...
    def get_word_under_caret(self, caret_index: 'int' = -1) -> 'str': ...
    def set_use_default_word_separators(self, enabled: 'bool') -> None: ...
    def is_default_word_separators_enabled(self) -> 'bool': ...
    def set_use_custom_word_separators(self, enabled: 'bool') -> None: ...
    def is_custom_word_separators_enabled(self) -> 'bool': ...
    def set_custom_word_separators(self, custom_word_separators: 'str') -> None: ...
    def get_custom_word_separators(self) -> 'str': ...
    def set_selecting_enabled(self, enable: 'bool') -> None: ...
    def is_selecting_enabled(self) -> 'bool': ...
    def set_deselect_on_focus_loss_enabled(self, enable: 'bool') -> None: ...
    def is_deselect_on_focus_loss_enabled(self) -> 'bool': ...
    def set_drag_and_drop_selection_enabled(self, enable: 'bool') -> None: ...
    def is_drag_and_drop_selection_enabled(self) -> 'bool': ...
    def set_selection_mode(self, mode: 'TextEdit__SelectionMode') -> None: ...
    def get_selection_mode(self) -> 'TextEdit__SelectionMode': ...
    def select_all(self) -> None: ...
    def select_word_under_caret(self, caret_index: 'int' = -1) -> None: ...
    def add_selection_for_next_occurrence(self) -> None: ...
    def skip_selection_for_next_occurrence(self) -> None: ...
    def select(self, origin_line: 'int', origin_column: 'int', caret_line: 'int', caret_column: 'int', caret_index: 'int' = 0) -> None: ...
    def has_selection(self, caret_index: 'int' = -1) -> 'bool': ...
    def get_selected_text(self, caret_index: 'int' = -1) -> 'str': ...
    def get_selection_at_line_column(self, line: 'int', column: 'int', include_edges: 'bool' = True, only_selections: 'bool' = True) -> 'int': ...
    def get_line_ranges_from_carets(self, only_selections: 'bool' = False, merge_adjacent: 'bool' = True) -> 'Array'['Vector2i']: ...
    def get_selection_origin_line(self, caret_index: 'int' = 0) -> 'int': ...
    def get_selection_origin_column(self, caret_index: 'int' = 0) -> 'int': ...
    def set_selection_origin_line(self, line: 'int', can_be_hidden: 'bool' = True, wrap_index: 'int' = -1, caret_index: 'int' = 0) -> None: ...
    def set_selection_origin_column(self, column: 'int', caret_index: 'int' = 0) -> None: ...
    def get_selection_from_line(self, caret_index: 'int' = 0) -> 'int': ...
    def get_selection_from_column(self, caret_index: 'int' = 0) -> 'int': ...
    def get_selection_to_line(self, caret_index: 'int' = 0) -> 'int': ...
    def get_selection_to_column(self, caret_index: 'int' = 0) -> 'int': ...
    def is_caret_after_selection_origin(self, caret_index: 'int' = 0) -> 'bool': ...
    def deselect(self, caret_index: 'int' = -1) -> None: ...
    def delete_selection(self, caret_index: 'int' = -1) -> None: ...
    def set_line_wrapping_mode(self, mode: 'TextEdit__LineWrappingMode') -> None: ...
    def get_line_wrapping_mode(self) -> 'TextEdit__LineWrappingMode': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer__AutowrapMode': ...
    def is_line_wrapped(self, line: 'int') -> 'bool': ...
    def get_line_wrap_count(self, line: 'int') -> 'int': ...
    def get_line_wrap_index_at_column(self, line: 'int', column: 'int') -> 'int': ...
    def get_line_wrapped_text(self, line: 'int') -> 'PackedStringArray': ...
    def set_smooth_scroll_enabled(self, enable: 'bool') -> None: ...
    def is_smooth_scroll_enabled(self) -> 'bool': ...
    def get_v_scroll_bar(self) -> 'VScrollBar': ...
    def get_h_scroll_bar(self) -> 'HScrollBar': ...
    def set_v_scroll(self, value: 'float') -> None: ...
    def get_v_scroll(self) -> 'float': ...
    def set_h_scroll(self, value: 'int') -> None: ...
    def get_h_scroll(self) -> 'int': ...
    def set_scroll_past_end_of_file_enabled(self, enable: 'bool') -> None: ...
    def is_scroll_past_end_of_file_enabled(self) -> 'bool': ...
    def set_v_scroll_speed(self, speed: 'float') -> None: ...
    def get_v_scroll_speed(self) -> 'float': ...
    def set_fit_content_height_enabled(self, enabled: 'bool') -> None: ...
    def is_fit_content_height_enabled(self) -> 'bool': ...
    def set_fit_content_width_enabled(self, enabled: 'bool') -> None: ...
    def is_fit_content_width_enabled(self) -> 'bool': ...
    def get_scroll_pos_for_line(self, line: 'int', wrap_index: 'int' = 0) -> 'float': ...
    def set_line_as_first_visible(self, line: 'int', wrap_index: 'int' = 0) -> None: ...
    def get_first_visible_line(self) -> 'int': ...
    def set_line_as_center_visible(self, line: 'int', wrap_index: 'int' = 0) -> None: ...
    def set_line_as_last_visible(self, line: 'int', wrap_index: 'int' = 0) -> None: ...
    def get_last_full_visible_line(self) -> 'int': ...
    def get_last_full_visible_line_wrap_index(self) -> 'int': ...
    def get_visible_line_count(self) -> 'int': ...
    def get_visible_line_count_in_range(self, from_line: 'int', to_line: 'int') -> 'int': ...
    def get_total_visible_line_count(self) -> 'int': ...
    def adjust_viewport_to_caret(self, caret_index: 'int' = 0) -> None: ...
    def center_viewport_to_caret(self, caret_index: 'int' = 0) -> None: ...
    def set_draw_minimap(self, enabled: 'bool') -> None: ...
    def is_drawing_minimap(self) -> 'bool': ...
    def set_minimap_width(self, width: 'int') -> None: ...
    def get_minimap_width(self) -> 'int': ...
    def get_minimap_visible_lines(self) -> 'int': ...
    def add_gutter(self, at: 'int' = -1) -> None: ...
    def remove_gutter(self, gutter: 'int') -> None: ...
    def get_gutter_count(self) -> 'int': ...
    def set_gutter_name(self, gutter: 'int', name: 'str') -> None: ...
    def get_gutter_name(self, gutter: 'int') -> 'str': ...
    def set_gutter_type(self, gutter: 'int', type: 'TextEdit__GutterType') -> None: ...
    def get_gutter_type(self, gutter: 'int') -> 'TextEdit__GutterType': ...
    def set_gutter_width(self, gutter: 'int', width: 'int') -> None: ...
    def get_gutter_width(self, gutter: 'int') -> 'int': ...
    def set_gutter_draw(self, gutter: 'int', draw: 'bool') -> None: ...
    def is_gutter_drawn(self, gutter: 'int') -> 'bool': ...
    def set_gutter_clickable(self, gutter: 'int', clickable: 'bool') -> None: ...
    def is_gutter_clickable(self, gutter: 'int') -> 'bool': ...
    def set_gutter_overwritable(self, gutter: 'int', overwritable: 'bool') -> None: ...
    def is_gutter_overwritable(self, gutter: 'int') -> 'bool': ...
    def merge_gutters(self, from_line: 'int', to_line: 'int') -> None: ...
    def set_gutter_custom_draw(self, column: 'int', draw_callback: 'Callable') -> None: ...
    def get_total_gutter_width(self) -> 'int': ...
    def set_line_gutter_metadata(self, line: 'int', gutter: 'int', metadata: 'Variant') -> None: ...
    def get_line_gutter_metadata(self, line: 'int', gutter: 'int') -> 'Variant': ...
    def set_line_gutter_text(self, line: 'int', gutter: 'int', text: 'str') -> None: ...
    def get_line_gutter_text(self, line: 'int', gutter: 'int') -> 'str': ...
    def set_line_gutter_icon(self, line: 'int', gutter: 'int', icon: 'Texture2D') -> None: ...
    def get_line_gutter_icon(self, line: 'int', gutter: 'int') -> 'Texture2D': ...
    def set_line_gutter_item_color(self, line: 'int', gutter: 'int', color: 'Color') -> None: ...
    def get_line_gutter_item_color(self, line: 'int', gutter: 'int') -> 'Color': ...
    def set_line_gutter_clickable(self, line: 'int', gutter: 'int', clickable: 'bool') -> None: ...
    def is_line_gutter_clickable(self, line: 'int', gutter: 'int') -> 'bool': ...
    def set_line_background_color(self, line: 'int', color: 'Color') -> None: ...
    def get_line_background_color(self, line: 'int') -> 'Color': ...
    def set_syntax_highlighter(self, syntax_highlighter: 'SyntaxHighlighter') -> None: ...
    def get_syntax_highlighter(self) -> 'SyntaxHighlighter': ...
    def set_highlight_current_line(self, enabled: 'bool') -> None: ...
    def is_highlight_current_line_enabled(self) -> 'bool': ...
    def set_highlight_all_occurrences(self, enabled: 'bool') -> None: ...
    def is_highlight_all_occurrences_enabled(self) -> 'bool': ...
    def get_draw_control_chars(self) -> 'bool': ...
    def set_draw_control_chars(self, enabled: 'bool') -> None: ...
    def set_draw_tabs(self, enabled: 'bool') -> None: ...
    def is_drawing_tabs(self) -> 'bool': ...
    def set_draw_spaces(self, enabled: 'bool') -> None: ...
    def is_drawing_spaces(self) -> 'bool': ...
    def get_menu(self) -> 'PopupMenu': ...
    def is_menu_visible(self) -> 'bool': ...
    def menu_option(self, option: 'int') -> None: ...
    def adjust_carets_after_edit(self, caret: 'int', from_line: 'int', from_col: 'int', to_line: 'int', to_col: 'int') -> None: ...
    def get_caret_index_edit_order(self) -> 'PackedInt32Array': ...
    def get_selection_line(self, caret_index: 'int' = 0) -> 'int': ...
    def get_selection_column(self, caret_index: 'int' = 0) -> 'int': ...


class TextLine(RefCounted):


    direction: 'int'
    orientation: 'int'
    preserve_invalid: 'bool'
    preserve_control: 'bool'
    width: 'float'
    alignment: 'int'
    flags: 'int'
    text_overrun_behavior: 'int'
    ellipsis_char: 'str'

    def clear(self) -> None: ...
    def set_direction(self, direction: 'TextServer__Direction') -> None: ...
    def get_direction(self) -> 'TextServer__Direction': ...
    def set_orientation(self, orientation: 'TextServer__Orientation') -> None: ...
    def get_orientation(self) -> 'TextServer__Orientation': ...
    def set_preserve_invalid(self, enabled: 'bool') -> None: ...
    def get_preserve_invalid(self) -> 'bool': ...
    def set_preserve_control(self, enabled: 'bool') -> None: ...
    def get_preserve_control(self) -> 'bool': ...
    def set_bidi_override(self, override: 'Array') -> None: ...
    def add_string(self, text: 'str', font: 'Font', font_size: 'int', language: 'str' = "", meta: 'Variant' = default('''null''')) -> 'bool': ...
    def add_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = 5, length: 'int' = 1, baseline: 'float' = 0.0) -> 'bool': ...
    def resize_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = 5, baseline: 'float' = 0.0) -> 'bool': ...
    def set_width(self, width: 'float') -> None: ...
    def get_width(self) -> 'float': ...
    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def tab_align(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def set_flags(self, flags: 'TextServer__JustificationFlag') -> None: ...
    def get_flags(self) -> 'TextServer__JustificationFlag': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer__OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer__OverrunBehavior': ...
    def set_ellipsis_char(self, char: 'str') -> None: ...
    def get_ellipsis_char(self) -> 'str': ...
    def get_objects(self) -> 'Array': ...
    def get_object_rect(self, key: 'Variant') -> 'Rect2': ...
    def get_size(self) -> 'Vector2': ...
    def get_rid(self) -> 'RID': ...
    def get_line_ascent(self) -> 'float': ...
    def get_line_descent(self) -> 'float': ...
    def get_line_width(self) -> 'float': ...
    def get_line_underline_position(self) -> 'float': ...
    def get_line_underline_thickness(self) -> 'float': ...
    def draw(self, canvas: 'RID', pos: 'Vector2', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_outline(self, canvas: 'RID', pos: 'Vector2', outline_size: 'int' = 1, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def hit_test(self, coords: 'float') -> 'int': ...


class TextMesh(PrimitiveMesh):


    text: 'str'
    font: 'Font'
    font_size: 'int'
    horizontal_alignment: 'int'
    vertical_alignment: 'int'
    uppercase: 'bool'
    line_spacing: 'float'
    autowrap_mode: 'int'
    justification_flags: 'int'
    pixel_size: 'float'
    curve_step: 'float'
    depth: 'float'
    width: 'float'
    offset: 'Vector2'
    text_direction: 'int'
    language: 'str'
    structured_text_bidi_override: 'int'
    structured_text_bidi_override_options: 'Array'

    def set_horizontal_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_horizontal_alignment(self) -> 'HorizontalAlignment': ...
    def set_vertical_alignment(self, alignment: 'VerticalAlignment') -> None: ...
    def get_vertical_alignment(self) -> 'VerticalAlignment': ...
    def set_text(self, text: 'str') -> None: ...
    def get_text(self) -> 'str': ...
    def set_font(self, font: 'Font') -> None: ...
    def get_font(self) -> 'Font': ...
    def set_font_size(self, font_size: 'int') -> None: ...
    def get_font_size(self) -> 'int': ...
    def set_line_spacing(self, line_spacing: 'float') -> None: ...
    def get_line_spacing(self) -> 'float': ...
    def set_autowrap_mode(self, autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self) -> 'TextServer__AutowrapMode': ...
    def set_justification_flags(self, justification_flags: 'TextServer__JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer__JustificationFlag': ...
    def set_depth(self, depth: 'float') -> None: ...
    def get_depth(self) -> 'float': ...
    def set_width(self, width: 'float') -> None: ...
    def get_width(self) -> 'float': ...
    def set_pixel_size(self, pixel_size: 'float') -> None: ...
    def get_pixel_size(self) -> 'float': ...
    def set_offset(self, offset: 'Vector2') -> None: ...
    def get_offset(self) -> 'Vector2': ...
    def set_curve_step(self, curve_step: 'float') -> None: ...
    def get_curve_step(self) -> 'float': ...
    def set_text_direction(self, direction: 'TextServer__Direction') -> None: ...
    def get_text_direction(self) -> 'TextServer__Direction': ...
    def set_language(self, language: 'str') -> None: ...
    def get_language(self) -> 'str': ...
    def set_structured_text_bidi_override(self, parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self) -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self) -> 'Array': ...
    def set_uppercase(self, enable: 'bool') -> None: ...
    def is_uppercase(self) -> 'bool': ...


class TextParagraph(RefCounted):


    direction: 'int'
    custom_punctuation: 'str'
    orientation: 'int'
    preserve_invalid: 'bool'
    preserve_control: 'bool'
    alignment: 'int'
    break_flags: 'int'
    justification_flags: 'int'
    text_overrun_behavior: 'int'
    ellipsis_char: 'str'
    width: 'float'
    max_lines_visible: 'int'
    line_spacing: 'float'

    def clear(self) -> None: ...
    def set_direction(self, direction: 'TextServer__Direction') -> None: ...
    def get_direction(self) -> 'TextServer__Direction': ...
    def set_custom_punctuation(self, custom_punctuation: 'str') -> None: ...
    def get_custom_punctuation(self) -> 'str': ...
    def set_orientation(self, orientation: 'TextServer__Orientation') -> None: ...
    def get_orientation(self) -> 'TextServer__Orientation': ...
    def set_preserve_invalid(self, enabled: 'bool') -> None: ...
    def get_preserve_invalid(self) -> 'bool': ...
    def set_preserve_control(self, enabled: 'bool') -> None: ...
    def get_preserve_control(self) -> 'bool': ...
    def set_bidi_override(self, override: 'Array') -> None: ...
    def set_dropcap(self, text: 'str', font: 'Font', font_size: 'int', dropcap_margins: 'Rect2' = default('''Rect2(0, 0, 0, 0)'''), language: 'str' = "") -> 'bool': ...
    def clear_dropcap(self) -> None: ...
    def add_string(self, text: 'str', font: 'Font', font_size: 'int', language: 'str' = "", meta: 'Variant' = default('''null''')) -> 'bool': ...
    def add_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = 5, length: 'int' = 1, baseline: 'float' = 0.0) -> 'bool': ...
    def resize_object(self, key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = 5, baseline: 'float' = 0.0) -> 'bool': ...
    def set_alignment(self, alignment: 'HorizontalAlignment') -> None: ...
    def get_alignment(self) -> 'HorizontalAlignment': ...
    def tab_align(self, tab_stops: 'PackedFloat32Array') -> None: ...
    def set_break_flags(self, flags: 'TextServer__LineBreakFlag') -> None: ...
    def get_break_flags(self) -> 'TextServer__LineBreakFlag': ...
    def set_justification_flags(self, flags: 'TextServer__JustificationFlag') -> None: ...
    def get_justification_flags(self) -> 'TextServer__JustificationFlag': ...
    def set_text_overrun_behavior(self, overrun_behavior: 'TextServer__OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self) -> 'TextServer__OverrunBehavior': ...
    def set_ellipsis_char(self, char: 'str') -> None: ...
    def get_ellipsis_char(self) -> 'str': ...
    def set_width(self, width: 'float') -> None: ...
    def get_width(self) -> 'float': ...
    def get_non_wrapped_size(self) -> 'Vector2': ...
    def get_size(self) -> 'Vector2': ...
    def get_rid(self) -> 'RID': ...
    def get_line_rid(self, line: 'int') -> 'RID': ...
    def get_dropcap_rid(self) -> 'RID': ...
    def get_line_count(self) -> 'int': ...
    def set_max_lines_visible(self, max_lines_visible: 'int') -> None: ...
    def get_max_lines_visible(self) -> 'int': ...
    def set_line_spacing(self, line_spacing: 'float') -> None: ...
    def get_line_spacing(self) -> 'float': ...
    def get_line_objects(self, line: 'int') -> 'Array': ...
    def get_line_object_rect(self, line: 'int', key: 'Variant') -> 'Rect2': ...
    def get_line_size(self, line: 'int') -> 'Vector2': ...
    def get_line_range(self, line: 'int') -> 'Vector2i': ...
    def get_line_ascent(self, line: 'int') -> 'float': ...
    def get_line_descent(self, line: 'int') -> 'float': ...
    def get_line_width(self, line: 'int') -> 'float': ...
    def get_line_underline_position(self, line: 'int') -> 'float': ...
    def get_line_underline_thickness(self, line: 'int') -> 'float': ...
    def get_dropcap_size(self) -> 'Vector2': ...
    def get_dropcap_lines(self) -> 'int': ...
    def draw(self, canvas: 'RID', pos: 'Vector2', color: 'Color' = default('''Color(1, 1, 1, 1)'''), dc_color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_outline(self, canvas: 'RID', pos: 'Vector2', outline_size: 'int' = 1, color: 'Color' = default('''Color(1, 1, 1, 1)'''), dc_color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_line(self, canvas: 'RID', pos: 'Vector2', line: 'int', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_line_outline(self, canvas: 'RID', pos: 'Vector2', line: 'int', outline_size: 'int' = 1, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_dropcap(self, canvas: 'RID', pos: 'Vector2', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def draw_dropcap_outline(self, canvas: 'RID', pos: 'Vector2', outline_size: 'int' = 1, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def hit_test(self, coords: 'Vector2') -> 'int': ...


class TextServer(RefCounted):



    def has_feature(self, feature: 'TextServer__Feature') -> 'bool': ...
    def get_name(self) -> 'str': ...
    def get_features(self) -> 'int': ...
    def load_support_data(self, filename: 'str') -> 'bool': ...
    def get_support_data_filename(self) -> 'str': ...
    def get_support_data_info(self) -> 'str': ...
    def save_support_data(self, filename: 'str') -> 'bool': ...
    def get_support_data(self) -> 'PackedByteArray': ...
    def is_locale_right_to_left(self, locale: 'str') -> 'bool': ...
    def name_to_tag(self, name: 'str') -> 'int': ...
    def tag_to_name(self, tag: 'int') -> 'str': ...
    def has(self, rid: 'RID') -> 'bool': ...
    def free_rid(self, rid: 'RID') -> None: ...
    def create_font(self) -> 'RID': ...
    def create_font_linked_variation(self, font_rid: 'RID') -> 'RID': ...
    def font_set_data(self, font_rid: 'RID', data: 'PackedByteArray') -> None: ...
    def font_set_face_index(self, font_rid: 'RID', face_index: 'int') -> None: ...
    def font_get_face_index(self, font_rid: 'RID') -> 'int': ...
    def font_get_face_count(self, font_rid: 'RID') -> 'int': ...
    def font_set_style(self, font_rid: 'RID', style: 'TextServer__FontStyle') -> None: ...
    def font_get_style(self, font_rid: 'RID') -> 'TextServer__FontStyle': ...
    def font_set_name(self, font_rid: 'RID', name: 'str') -> None: ...
    def font_get_name(self, font_rid: 'RID') -> 'str': ...
    def font_get_ot_name_strings(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_set_style_name(self, font_rid: 'RID', name: 'str') -> None: ...
    def font_get_style_name(self, font_rid: 'RID') -> 'str': ...
    def font_set_weight(self, font_rid: 'RID', weight: 'int') -> None: ...
    def font_get_weight(self, font_rid: 'RID') -> 'int': ...
    def font_set_stretch(self, font_rid: 'RID', weight: 'int') -> None: ...
    def font_get_stretch(self, font_rid: 'RID') -> 'int': ...
    def font_set_antialiasing(self, font_rid: 'RID', antialiasing: 'TextServer__FontAntialiasing') -> None: ...
    def font_get_antialiasing(self, font_rid: 'RID') -> 'TextServer__FontAntialiasing': ...
    def font_set_disable_embedded_bitmaps(self, font_rid: 'RID', disable_embedded_bitmaps: 'bool') -> None: ...
    def font_get_disable_embedded_bitmaps(self, font_rid: 'RID') -> 'bool': ...
    def font_set_generate_mipmaps(self, font_rid: 'RID', generate_mipmaps: 'bool') -> None: ...
    def font_get_generate_mipmaps(self, font_rid: 'RID') -> 'bool': ...
    def font_set_multichannel_signed_distance_field(self, font_rid: 'RID', msdf: 'bool') -> None: ...
    def font_is_multichannel_signed_distance_field(self, font_rid: 'RID') -> 'bool': ...
    def font_set_msdf_pixel_range(self, font_rid: 'RID', msdf_pixel_range: 'int') -> None: ...
    def font_get_msdf_pixel_range(self, font_rid: 'RID') -> 'int': ...
    def font_set_msdf_size(self, font_rid: 'RID', msdf_size: 'int') -> None: ...
    def font_get_msdf_size(self, font_rid: 'RID') -> 'int': ...
    def font_set_fixed_size(self, font_rid: 'RID', fixed_size: 'int') -> None: ...
    def font_get_fixed_size(self, font_rid: 'RID') -> 'int': ...
    def font_set_fixed_size_scale_mode(self, font_rid: 'RID', fixed_size_scale_mode: 'TextServer__FixedSizeScaleMode') -> None: ...
    def font_get_fixed_size_scale_mode(self, font_rid: 'RID') -> 'TextServer__FixedSizeScaleMode': ...
    def font_set_allow_system_fallback(self, font_rid: 'RID', allow_system_fallback: 'bool') -> None: ...
    def font_is_allow_system_fallback(self, font_rid: 'RID') -> 'bool': ...
    def font_set_force_autohinter(self, font_rid: 'RID', force_autohinter: 'bool') -> None: ...
    def font_is_force_autohinter(self, font_rid: 'RID') -> 'bool': ...
    def font_set_hinting(self, font_rid: 'RID', hinting: 'TextServer__Hinting') -> None: ...
    def font_get_hinting(self, font_rid: 'RID') -> 'TextServer__Hinting': ...
    def font_set_subpixel_positioning(self, font_rid: 'RID', subpixel_positioning: 'TextServer__SubpixelPositioning') -> None: ...
    def font_get_subpixel_positioning(self, font_rid: 'RID') -> 'TextServer__SubpixelPositioning': ...
    def font_set_keep_rounding_remainders(self, font_rid: 'RID', keep_rounding_remainders: 'bool') -> None: ...
    def font_get_keep_rounding_remainders(self, font_rid: 'RID') -> 'bool': ...
    def font_set_embolden(self, font_rid: 'RID', strength: 'float') -> None: ...
    def font_get_embolden(self, font_rid: 'RID') -> 'float': ...
    def font_set_spacing(self, font_rid: 'RID', spacing: 'TextServer__SpacingType', value: 'int') -> None: ...
    def font_get_spacing(self, font_rid: 'RID', spacing: 'TextServer__SpacingType') -> 'int': ...
    def font_set_baseline_offset(self, font_rid: 'RID', baseline_offset: 'float') -> None: ...
    def font_get_baseline_offset(self, font_rid: 'RID') -> 'float': ...
    def font_set_transform(self, font_rid: 'RID', transform: 'Transform2D') -> None: ...
    def font_get_transform(self, font_rid: 'RID') -> 'Transform2D': ...
    def font_set_variation_coordinates(self, font_rid: 'RID', variation_coordinates: 'Dictionary') -> None: ...
    def font_get_variation_coordinates(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_set_oversampling(self, font_rid: 'RID', oversampling: 'float') -> None: ...
    def font_get_oversampling(self, font_rid: 'RID') -> 'float': ...
    def font_get_size_cache_list(self, font_rid: 'RID') -> 'Array'['Vector2i']: ...
    def font_clear_size_cache(self, font_rid: 'RID') -> None: ...
    def font_remove_size_cache(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def font_set_ascent(self, font_rid: 'RID', size: 'int', ascent: 'float') -> None: ...
    def font_get_ascent(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def font_set_descent(self, font_rid: 'RID', size: 'int', descent: 'float') -> None: ...
    def font_get_descent(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def font_set_underline_position(self, font_rid: 'RID', size: 'int', underline_position: 'float') -> None: ...
    def font_get_underline_position(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def font_set_underline_thickness(self, font_rid: 'RID', size: 'int', underline_thickness: 'float') -> None: ...
    def font_get_underline_thickness(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def font_set_scale(self, font_rid: 'RID', size: 'int', scale: 'float') -> None: ...
    def font_get_scale(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def font_get_texture_count(self, font_rid: 'RID', size: 'Vector2i') -> 'int': ...
    def font_clear_textures(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def font_remove_texture(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int') -> None: ...
    def font_set_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int', image: 'Image') -> None: ...
    def font_get_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int') -> 'Image': ...
    def font_set_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int', offset: 'PackedInt32Array') -> None: ...
    def font_get_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int') -> 'PackedInt32Array': ...
    def font_get_glyph_list(self, font_rid: 'RID', size: 'Vector2i') -> 'PackedInt32Array': ...
    def font_clear_glyphs(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def font_remove_glyph(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> None: ...
    def font_get_glyph_advance(self, font_rid: 'RID', size: 'int', glyph: 'int') -> 'Vector2': ...
    def font_set_glyph_advance(self, font_rid: 'RID', size: 'int', glyph: 'int', advance: 'Vector2') -> None: ...
    def font_get_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def font_set_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', offset: 'Vector2') -> None: ...
    def font_get_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def font_set_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', gl_size: 'Vector2') -> None: ...
    def font_get_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Rect2': ...
    def font_set_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', uv_rect: 'Rect2') -> None: ...
    def font_get_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'int': ...
    def font_set_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', texture_idx: 'int') -> None: ...
    def font_get_glyph_texture_rid(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'RID': ...
    def font_get_glyph_texture_size(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def font_get_glyph_contours(self, font: 'RID', size: 'int', index: 'int') -> 'Dictionary': ...
    def font_get_kerning_list(self, font_rid: 'RID', size: 'int') -> 'Array'['Vector2i']: ...
    def font_clear_kerning_map(self, font_rid: 'RID', size: 'int') -> None: ...
    def font_remove_kerning(self, font_rid: 'RID', size: 'int', glyph_pair: 'Vector2i') -> None: ...
    def font_set_kerning(self, font_rid: 'RID', size: 'int', glyph_pair: 'Vector2i', kerning: 'Vector2') -> None: ...
    def font_get_kerning(self, font_rid: 'RID', size: 'int', glyph_pair: 'Vector2i') -> 'Vector2': ...
    def font_get_glyph_index(self, font_rid: 'RID', size: 'int', char: 'int', variation_selector: 'int') -> 'int': ...
    def font_get_char_from_glyph_index(self, font_rid: 'RID', size: 'int', glyph_index: 'int') -> 'int': ...
    def font_has_char(self, font_rid: 'RID', char: 'int') -> 'bool': ...
    def font_get_supported_chars(self, font_rid: 'RID') -> 'str': ...
    def font_get_supported_glyphs(self, font_rid: 'RID') -> 'PackedInt32Array': ...
    def font_render_range(self, font_rid: 'RID', size: 'Vector2i', start: 'int', end: 'int') -> None: ...
    def font_render_glyph(self, font_rid: 'RID', size: 'Vector2i', index: 'int') -> None: ...
    def font_draw_glyph(self, font_rid: 'RID', canvas: 'RID', size: 'int', pos: 'Vector2', index: 'int', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def font_draw_glyph_outline(self, font_rid: 'RID', canvas: 'RID', size: 'int', outline_size: 'int', pos: 'Vector2', index: 'int', color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def font_is_language_supported(self, font_rid: 'RID', language: 'str') -> 'bool': ...
    def font_set_language_support_override(self, font_rid: 'RID', language: 'str', supported: 'bool') -> None: ...
    def font_get_language_support_override(self, font_rid: 'RID', language: 'str') -> 'bool': ...
    def font_remove_language_support_override(self, font_rid: 'RID', language: 'str') -> None: ...
    def font_get_language_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def font_is_script_supported(self, font_rid: 'RID', script: 'str') -> 'bool': ...
    def font_set_script_support_override(self, font_rid: 'RID', script: 'str', supported: 'bool') -> None: ...
    def font_get_script_support_override(self, font_rid: 'RID', script: 'str') -> 'bool': ...
    def font_remove_script_support_override(self, font_rid: 'RID', script: 'str') -> None: ...
    def font_get_script_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def font_set_opentype_feature_overrides(self, font_rid: 'RID', overrides: 'Dictionary') -> None: ...
    def font_get_opentype_feature_overrides(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_supported_feature_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_supported_variation_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def font_get_global_oversampling(self) -> 'float': ...
    def font_set_global_oversampling(self, oversampling: 'float') -> None: ...
    def get_hex_code_box_size(self, size: 'int', index: 'int') -> 'Vector2': ...
    def draw_hex_code_box(self, canvas: 'RID', size: 'int', pos: 'Vector2', index: 'int', color: 'Color') -> None: ...
    def create_shaped_text(self, direction: 'TextServer__Direction' = 0, orientation: 'TextServer__Orientation' = 0) -> 'RID': ...
    def shaped_text_clear(self, rid: 'RID') -> None: ...
    def shaped_text_set_direction(self, shaped: 'RID', direction: 'TextServer__Direction' = 0) -> None: ...
    def shaped_text_get_direction(self, shaped: 'RID') -> 'TextServer__Direction': ...
    def shaped_text_get_inferred_direction(self, shaped: 'RID') -> 'TextServer__Direction': ...
    def shaped_text_set_bidi_override(self, shaped: 'RID', override: 'Array') -> None: ...
    def shaped_text_set_custom_punctuation(self, shaped: 'RID', punct: 'str') -> None: ...
    def shaped_text_get_custom_punctuation(self, shaped: 'RID') -> 'str': ...
    def shaped_text_set_custom_ellipsis(self, shaped: 'RID', char: 'int') -> None: ...
    def shaped_text_get_custom_ellipsis(self, shaped: 'RID') -> 'int': ...
    def shaped_text_set_orientation(self, shaped: 'RID', orientation: 'TextServer__Orientation' = 0) -> None: ...
    def shaped_text_get_orientation(self, shaped: 'RID') -> 'TextServer__Orientation': ...
    def shaped_text_set_preserve_invalid(self, shaped: 'RID', enabled: 'bool') -> None: ...
    def shaped_text_get_preserve_invalid(self, shaped: 'RID') -> 'bool': ...
    def shaped_text_set_preserve_control(self, shaped: 'RID', enabled: 'bool') -> None: ...
    def shaped_text_get_preserve_control(self, shaped: 'RID') -> 'bool': ...
    def shaped_text_set_spacing(self, shaped: 'RID', spacing: 'TextServer__SpacingType', value: 'int') -> None: ...
    def shaped_text_get_spacing(self, shaped: 'RID', spacing: 'TextServer__SpacingType') -> 'int': ...
    def shaped_text_add_string(self, shaped: 'RID', text: 'str', fonts: 'Array'['RID'], size: 'int', opentype_features: 'Dictionary' = default('''{}'''), language: 'str' = "", meta: 'Variant' = default('''null''')) -> 'bool': ...
    def shaped_text_add_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = 5, length: 'int' = 1, baseline: 'float' = 0.0) -> 'bool': ...
    def shaped_text_resize_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment' = 5, baseline: 'float' = 0.0) -> 'bool': ...
    def shaped_get_span_count(self, shaped: 'RID') -> 'int': ...
    def shaped_get_span_meta(self, shaped: 'RID', index: 'int') -> 'Variant': ...
    def shaped_get_span_embedded_object(self, shaped: 'RID', index: 'int') -> 'Variant': ...
    def shaped_set_span_update_font(self, shaped: 'RID', index: 'int', fonts: 'Array'['RID'], size: 'int', opentype_features: 'Dictionary' = default('''{}''')) -> None: ...
    def shaped_text_substr(self, shaped: 'RID', start: 'int', length: 'int') -> 'RID': ...
    def shaped_text_get_parent(self, shaped: 'RID') -> 'RID': ...
    def shaped_text_fit_to_width(self, shaped: 'RID', width: 'float', justification_flags: 'TextServer__JustificationFlag' = 3) -> 'float': ...
    def shaped_text_tab_align(self, shaped: 'RID', tab_stops: 'PackedFloat32Array') -> 'float': ...
    def shaped_text_shape(self, shaped: 'RID') -> 'bool': ...
    def shaped_text_is_ready(self, shaped: 'RID') -> 'bool': ...
    def shaped_text_has_visible_chars(self, shaped: 'RID') -> 'bool': ...
    def shaped_text_get_glyphs(self, shaped: 'RID') -> 'Array'['Dictionary']: ...
    def shaped_text_sort_logical(self, shaped: 'RID') -> 'Array'['Dictionary']: ...
    def shaped_text_get_glyph_count(self, shaped: 'RID') -> 'int': ...
    def shaped_text_get_range(self, shaped: 'RID') -> 'Vector2i': ...
    def shaped_text_get_line_breaks_adv(self, shaped: 'RID', width: 'PackedFloat32Array', start: 'int' = 0, once: 'bool' = True, break_flags: 'TextServer__LineBreakFlag' = 3) -> 'PackedInt32Array': ...
    def shaped_text_get_line_breaks(self, shaped: 'RID', width: 'float', start: 'int' = 0, break_flags: 'TextServer__LineBreakFlag' = 3) -> 'PackedInt32Array': ...
    def shaped_text_get_word_breaks(self, shaped: 'RID', grapheme_flags: 'TextServer__GraphemeFlag' = 264, skip_grapheme_flags: 'TextServer__GraphemeFlag' = 4) -> 'PackedInt32Array': ...
    def shaped_text_get_trim_pos(self, shaped: 'RID') -> 'int': ...
    def shaped_text_get_ellipsis_pos(self, shaped: 'RID') -> 'int': ...
    def shaped_text_get_ellipsis_glyphs(self, shaped: 'RID') -> 'Array'['Dictionary']: ...
    def shaped_text_get_ellipsis_glyph_count(self, shaped: 'RID') -> 'int': ...
    def shaped_text_overrun_trim_to_width(self, shaped: 'RID', width: 'float' = 0, overrun_trim_flags: 'TextServer__TextOverrunFlag' = 0) -> None: ...
    def shaped_text_get_objects(self, shaped: 'RID') -> 'Array': ...
    def shaped_text_get_object_rect(self, shaped: 'RID', key: 'Variant') -> 'Rect2': ...
    def shaped_text_get_object_range(self, shaped: 'RID', key: 'Variant') -> 'Vector2i': ...
    def shaped_text_get_object_glyph(self, shaped: 'RID', key: 'Variant') -> 'int': ...
    def shaped_text_get_size(self, shaped: 'RID') -> 'Vector2': ...
    def shaped_text_get_ascent(self, shaped: 'RID') -> 'float': ...
    def shaped_text_get_descent(self, shaped: 'RID') -> 'float': ...
    def shaped_text_get_width(self, shaped: 'RID') -> 'float': ...
    def shaped_text_get_underline_position(self, shaped: 'RID') -> 'float': ...
    def shaped_text_get_underline_thickness(self, shaped: 'RID') -> 'float': ...
    def shaped_text_get_carets(self, shaped: 'RID', position: 'int') -> 'Dictionary': ...
    def shaped_text_get_selection(self, shaped: 'RID', start: 'int', end: 'int') -> 'PackedVector2Array': ...
    def shaped_text_hit_test_grapheme(self, shaped: 'RID', coords: 'float') -> 'int': ...
    def shaped_text_hit_test_position(self, shaped: 'RID', coords: 'float') -> 'int': ...
    def shaped_text_get_grapheme_bounds(self, shaped: 'RID', pos: 'int') -> 'Vector2': ...
    def shaped_text_next_grapheme_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def shaped_text_prev_grapheme_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def shaped_text_get_character_breaks(self, shaped: 'RID') -> 'PackedInt32Array': ...
    def shaped_text_next_character_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def shaped_text_prev_character_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def shaped_text_closest_character_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def shaped_text_draw(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: 'float' = -1, clip_r: 'float' = -1, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def shaped_text_draw_outline(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: 'float' = -1, clip_r: 'float' = -1, outline_size: 'int' = 1, color: 'Color' = default('''Color(1, 1, 1, 1)''')) -> None: ...
    def shaped_text_get_dominant_direction_in_range(self, shaped: 'RID', start: 'int', end: 'int') -> 'TextServer__Direction': ...
    def format_number(self, number: 'str', language: 'str' = "") -> 'str': ...
    def parse_number(self, number: 'str', language: 'str' = "") -> 'str': ...
    def percent_sign(self, language: 'str' = "") -> 'str': ...
    def string_get_word_breaks(self, string: 'str', language: 'str' = "", chars_per_line: 'int' = 0) -> 'PackedInt32Array': ...
    def string_get_character_breaks(self, string: 'str', language: 'str' = "") -> 'PackedInt32Array': ...
    def is_confusable(self, string: 'str', dict: 'PackedStringArray') -> 'int': ...
    def spoof_check(self, string: 'str') -> 'bool': ...
    def strip_diacritics(self, string: 'str') -> 'str': ...
    def is_valid_identifier(self, string: 'str') -> 'bool': ...
    def is_valid_letter(self, unicode: 'int') -> 'bool': ...
    def string_to_upper(self, string: 'str', language: 'str' = "") -> 'str': ...
    def string_to_lower(self, string: 'str', language: 'str' = "") -> 'str': ...
    def string_to_title(self, string: 'str', language: 'str' = "") -> 'str': ...
    def parse_structured_text(self, parser_type: 'TextServer__StructuredTextParser', args: 'Array', text: 'str') -> 'Array'['Vector3i']: ...


class TextServerAdvanced(TextServerExtension): ...


class TextServerDummy(TextServerExtension): ...


class TextServerExtension(TextServer):



    def _has_feature(self, feature: 'TextServer__Feature') -> 'bool': ...
    def _get_name(self) -> 'str': ...
    def _get_features(self) -> 'int': ...
    def _free_rid(self, rid: 'RID') -> None: ...
    def _has(self, rid: 'RID') -> 'bool': ...
    def _load_support_data(self, filename: 'str') -> 'bool': ...
    def _get_support_data_filename(self) -> 'str': ...
    def _get_support_data_info(self) -> 'str': ...
    def _save_support_data(self, filename: 'str') -> 'bool': ...
    def _get_support_data(self) -> 'PackedByteArray': ...
    def _is_locale_right_to_left(self, locale: 'str') -> 'bool': ...
    def _name_to_tag(self, name: 'str') -> 'int': ...
    def _tag_to_name(self, tag: 'int') -> 'str': ...
    def _create_font(self) -> 'RID': ...
    def _create_font_linked_variation(self, font_rid: 'RID') -> 'RID': ...
    def _font_set_data(self, font_rid: 'RID', data: 'PackedByteArray') -> None: ...
    def _font_set_data_ptr(self, font_rid: 'RID', data_ptr: 'intptr', data_size: 'int') -> None: ...
    def _font_set_face_index(self, font_rid: 'RID', face_index: 'int') -> None: ...
    def _font_get_face_index(self, font_rid: 'RID') -> 'int': ...
    def _font_get_face_count(self, font_rid: 'RID') -> 'int': ...
    def _font_set_style(self, font_rid: 'RID', style: 'TextServer__FontStyle') -> None: ...
    def _font_get_style(self, font_rid: 'RID') -> 'TextServer__FontStyle': ...
    def _font_set_name(self, font_rid: 'RID', name: 'str') -> None: ...
    def _font_get_name(self, font_rid: 'RID') -> 'str': ...
    def _font_get_ot_name_strings(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_set_style_name(self, font_rid: 'RID', name_style: 'str') -> None: ...
    def _font_get_style_name(self, font_rid: 'RID') -> 'str': ...
    def _font_set_weight(self, font_rid: 'RID', weight: 'int') -> None: ...
    def _font_get_weight(self, font_rid: 'RID') -> 'int': ...
    def _font_set_stretch(self, font_rid: 'RID', stretch: 'int') -> None: ...
    def _font_get_stretch(self, font_rid: 'RID') -> 'int': ...
    def _font_set_antialiasing(self, font_rid: 'RID', antialiasing: 'TextServer__FontAntialiasing') -> None: ...
    def _font_get_antialiasing(self, font_rid: 'RID') -> 'TextServer__FontAntialiasing': ...
    def _font_set_disable_embedded_bitmaps(self, font_rid: 'RID', disable_embedded_bitmaps: 'bool') -> None: ...
    def _font_get_disable_embedded_bitmaps(self, font_rid: 'RID') -> 'bool': ...
    def _font_set_generate_mipmaps(self, font_rid: 'RID', generate_mipmaps: 'bool') -> None: ...
    def _font_get_generate_mipmaps(self, font_rid: 'RID') -> 'bool': ...
    def _font_set_multichannel_signed_distance_field(self, font_rid: 'RID', msdf: 'bool') -> None: ...
    def _font_is_multichannel_signed_distance_field(self, font_rid: 'RID') -> 'bool': ...
    def _font_set_msdf_pixel_range(self, font_rid: 'RID', msdf_pixel_range: 'int') -> None: ...
    def _font_get_msdf_pixel_range(self, font_rid: 'RID') -> 'int': ...
    def _font_set_msdf_size(self, font_rid: 'RID', msdf_size: 'int') -> None: ...
    def _font_get_msdf_size(self, font_rid: 'RID') -> 'int': ...
    def _font_set_fixed_size(self, font_rid: 'RID', fixed_size: 'int') -> None: ...
    def _font_get_fixed_size(self, font_rid: 'RID') -> 'int': ...
    def _font_set_fixed_size_scale_mode(self, font_rid: 'RID', fixed_size_scale_mode: 'TextServer__FixedSizeScaleMode') -> None: ...
    def _font_get_fixed_size_scale_mode(self, font_rid: 'RID') -> 'TextServer__FixedSizeScaleMode': ...
    def _font_set_allow_system_fallback(self, font_rid: 'RID', allow_system_fallback: 'bool') -> None: ...
    def _font_is_allow_system_fallback(self, font_rid: 'RID') -> 'bool': ...
    def _font_set_force_autohinter(self, font_rid: 'RID', force_autohinter: 'bool') -> None: ...
    def _font_is_force_autohinter(self, font_rid: 'RID') -> 'bool': ...
    def _font_set_hinting(self, font_rid: 'RID', hinting: 'TextServer__Hinting') -> None: ...
    def _font_get_hinting(self, font_rid: 'RID') -> 'TextServer__Hinting': ...
    def _font_set_subpixel_positioning(self, font_rid: 'RID', subpixel_positioning: 'TextServer__SubpixelPositioning') -> None: ...
    def _font_get_subpixel_positioning(self, font_rid: 'RID') -> 'TextServer__SubpixelPositioning': ...
    def _font_set_keep_rounding_remainders(self, font_rid: 'RID', keep_rounding_remainders: 'bool') -> None: ...
    def _font_get_keep_rounding_remainders(self, font_rid: 'RID') -> 'bool': ...
    def _font_set_embolden(self, font_rid: 'RID', strength: 'float') -> None: ...
    def _font_get_embolden(self, font_rid: 'RID') -> 'float': ...
    def _font_set_spacing(self, font_rid: 'RID', spacing: 'TextServer__SpacingType', value: 'int') -> None: ...
    def _font_get_spacing(self, font_rid: 'RID', spacing: 'TextServer__SpacingType') -> 'int': ...
    def _font_set_baseline_offset(self, font_rid: 'RID', baseline_offset: 'float') -> None: ...
    def _font_get_baseline_offset(self, font_rid: 'RID') -> 'float': ...
    def _font_set_transform(self, font_rid: 'RID', transform: 'Transform2D') -> None: ...
    def _font_get_transform(self, font_rid: 'RID') -> 'Transform2D': ...
    def _font_set_variation_coordinates(self, font_rid: 'RID', variation_coordinates: 'Dictionary') -> None: ...
    def _font_get_variation_coordinates(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_set_oversampling(self, font_rid: 'RID', oversampling: 'float') -> None: ...
    def _font_get_oversampling(self, font_rid: 'RID') -> 'float': ...
    def _font_get_size_cache_list(self, font_rid: 'RID') -> 'Array'['Vector2i']: ...
    def _font_clear_size_cache(self, font_rid: 'RID') -> None: ...
    def _font_remove_size_cache(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def _font_set_ascent(self, font_rid: 'RID', size: 'int', ascent: 'float') -> None: ...
    def _font_get_ascent(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def _font_set_descent(self, font_rid: 'RID', size: 'int', descent: 'float') -> None: ...
    def _font_get_descent(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def _font_set_underline_position(self, font_rid: 'RID', size: 'int', underline_position: 'float') -> None: ...
    def _font_get_underline_position(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def _font_set_underline_thickness(self, font_rid: 'RID', size: 'int', underline_thickness: 'float') -> None: ...
    def _font_get_underline_thickness(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def _font_set_scale(self, font_rid: 'RID', size: 'int', scale: 'float') -> None: ...
    def _font_get_scale(self, font_rid: 'RID', size: 'int') -> 'float': ...
    def _font_get_texture_count(self, font_rid: 'RID', size: 'Vector2i') -> 'int': ...
    def _font_clear_textures(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def _font_remove_texture(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int') -> None: ...
    def _font_set_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int', image: 'Image') -> None: ...
    def _font_get_texture_image(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int') -> 'Image': ...
    def _font_set_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int', offset: 'PackedInt32Array') -> None: ...
    def _font_get_texture_offsets(self, font_rid: 'RID', size: 'Vector2i', texture_index: 'int') -> 'PackedInt32Array': ...
    def _font_get_glyph_list(self, font_rid: 'RID', size: 'Vector2i') -> 'PackedInt32Array': ...
    def _font_clear_glyphs(self, font_rid: 'RID', size: 'Vector2i') -> None: ...
    def _font_remove_glyph(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> None: ...
    def _font_get_glyph_advance(self, font_rid: 'RID', size: 'int', glyph: 'int') -> 'Vector2': ...
    def _font_set_glyph_advance(self, font_rid: 'RID', size: 'int', glyph: 'int', advance: 'Vector2') -> None: ...
    def _font_get_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def _font_set_glyph_offset(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', offset: 'Vector2') -> None: ...
    def _font_get_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def _font_set_glyph_size(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', gl_size: 'Vector2') -> None: ...
    def _font_get_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Rect2': ...
    def _font_set_glyph_uv_rect(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', uv_rect: 'Rect2') -> None: ...
    def _font_get_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'int': ...
    def _font_set_glyph_texture_idx(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int', texture_idx: 'int') -> None: ...
    def _font_get_glyph_texture_rid(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'RID': ...
    def _font_get_glyph_texture_size(self, font_rid: 'RID', size: 'Vector2i', glyph: 'int') -> 'Vector2': ...
    def _font_get_glyph_contours(self, font_rid: 'RID', size: 'int', index: 'int') -> 'Dictionary': ...
    def _font_get_kerning_list(self, font_rid: 'RID', size: 'int') -> 'Array'['Vector2i']: ...
    def _font_clear_kerning_map(self, font_rid: 'RID', size: 'int') -> None: ...
    def _font_remove_kerning(self, font_rid: 'RID', size: 'int', glyph_pair: 'Vector2i') -> None: ...
    def _font_set_kerning(self, font_rid: 'RID', size: 'int', glyph_pair: 'Vector2i', kerning: 'Vector2') -> None: ...
    def _font_get_kerning(self, font_rid: 'RID', size: 'int', glyph_pair: 'Vector2i') -> 'Vector2': ...
    def _font_get_glyph_index(self, font_rid: 'RID', size: 'int', char: 'int', variation_selector: 'int') -> 'int': ...
    def _font_get_char_from_glyph_index(self, font_rid: 'RID', size: 'int', glyph_index: 'int') -> 'int': ...
    def _font_has_char(self, font_rid: 'RID', char: 'int') -> 'bool': ...
    def _font_get_supported_chars(self, font_rid: 'RID') -> 'str': ...
    def _font_get_supported_glyphs(self, font_rid: 'RID') -> 'PackedInt32Array': ...
    def _font_render_range(self, font_rid: 'RID', size: 'Vector2i', start: 'int', end: 'int') -> None: ...
    def _font_render_glyph(self, font_rid: 'RID', size: 'Vector2i', index: 'int') -> None: ...
    def _font_draw_glyph(self, font_rid: 'RID', canvas: 'RID', size: 'int', pos: 'Vector2', index: 'int', color: 'Color') -> None: ...
    def _font_draw_glyph_outline(self, font_rid: 'RID', canvas: 'RID', size: 'int', outline_size: 'int', pos: 'Vector2', index: 'int', color: 'Color') -> None: ...
    def _font_is_language_supported(self, font_rid: 'RID', language: 'str') -> 'bool': ...
    def _font_set_language_support_override(self, font_rid: 'RID', language: 'str', supported: 'bool') -> None: ...
    def _font_get_language_support_override(self, font_rid: 'RID', language: 'str') -> 'bool': ...
    def _font_remove_language_support_override(self, font_rid: 'RID', language: 'str') -> None: ...
    def _font_get_language_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def _font_is_script_supported(self, font_rid: 'RID', script: 'str') -> 'bool': ...
    def _font_set_script_support_override(self, font_rid: 'RID', script: 'str', supported: 'bool') -> None: ...
    def _font_get_script_support_override(self, font_rid: 'RID', script: 'str') -> 'bool': ...
    def _font_remove_script_support_override(self, font_rid: 'RID', script: 'str') -> None: ...
    def _font_get_script_support_overrides(self, font_rid: 'RID') -> 'PackedStringArray': ...
    def _font_set_opentype_feature_overrides(self, font_rid: 'RID', overrides: 'Dictionary') -> None: ...
    def _font_get_opentype_feature_overrides(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_supported_feature_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_supported_variation_list(self, font_rid: 'RID') -> 'Dictionary': ...
    def _font_get_global_oversampling(self) -> 'float': ...
    def _font_set_global_oversampling(self, oversampling: 'float') -> None: ...
    def _get_hex_code_box_size(self, size: 'int', index: 'int') -> 'Vector2': ...
    def _draw_hex_code_box(self, canvas: 'RID', size: 'int', pos: 'Vector2', index: 'int', color: 'Color') -> None: ...
    def _create_shaped_text(self, direction: 'TextServer__Direction', orientation: 'TextServer__Orientation') -> 'RID': ...
    def _shaped_text_clear(self, shaped: 'RID') -> None: ...
    def _shaped_text_set_direction(self, shaped: 'RID', direction: 'TextServer__Direction') -> None: ...
    def _shaped_text_get_direction(self, shaped: 'RID') -> 'TextServer__Direction': ...
    def _shaped_text_get_inferred_direction(self, shaped: 'RID') -> 'TextServer__Direction': ...
    def _shaped_text_set_bidi_override(self, shaped: 'RID', override: 'Array') -> None: ...
    def _shaped_text_set_custom_punctuation(self, shaped: 'RID', punct: 'str') -> None: ...
    def _shaped_text_get_custom_punctuation(self, shaped: 'RID') -> 'str': ...
    def _shaped_text_set_custom_ellipsis(self, shaped: 'RID', char: 'int') -> None: ...
    def _shaped_text_get_custom_ellipsis(self, shaped: 'RID') -> 'int': ...
    def _shaped_text_set_orientation(self, shaped: 'RID', orientation: 'TextServer__Orientation') -> None: ...
    def _shaped_text_get_orientation(self, shaped: 'RID') -> 'TextServer__Orientation': ...
    def _shaped_text_set_preserve_invalid(self, shaped: 'RID', enabled: 'bool') -> None: ...
    def _shaped_text_get_preserve_invalid(self, shaped: 'RID') -> 'bool': ...
    def _shaped_text_set_preserve_control(self, shaped: 'RID', enabled: 'bool') -> None: ...
    def _shaped_text_get_preserve_control(self, shaped: 'RID') -> 'bool': ...
    def _shaped_text_set_spacing(self, shaped: 'RID', spacing: 'TextServer__SpacingType', value: 'int') -> None: ...
    def _shaped_text_get_spacing(self, shaped: 'RID', spacing: 'TextServer__SpacingType') -> 'int': ...
    def _shaped_text_add_string(self, shaped: 'RID', text: 'str', fonts: 'Array'['RID'], size: 'int', opentype_features: 'Dictionary', language: 'str', meta: 'Variant') -> 'bool': ...
    def _shaped_text_add_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment', length: 'int', baseline: 'float') -> 'bool': ...
    def _shaped_text_resize_object(self, shaped: 'RID', key: 'Variant', size: 'Vector2', inline_align: 'InlineAlignment', baseline: 'float') -> 'bool': ...
    def _shaped_get_span_count(self, shaped: 'RID') -> 'int': ...
    def _shaped_get_span_meta(self, shaped: 'RID', index: 'int') -> 'Variant': ...
    def _shaped_get_span_embedded_object(self, shaped: 'RID', index: 'int') -> 'Variant': ...
    def _shaped_set_span_update_font(self, shaped: 'RID', index: 'int', fonts: 'Array'['RID'], size: 'int', opentype_features: 'Dictionary') -> None: ...
    def _shaped_text_substr(self, shaped: 'RID', start: 'int', length: 'int') -> 'RID': ...
    def _shaped_text_get_parent(self, shaped: 'RID') -> 'RID': ...
    def _shaped_text_fit_to_width(self, shaped: 'RID', width: 'float', justification_flags: 'TextServer__JustificationFlag') -> 'float': ...
    def _shaped_text_tab_align(self, shaped: 'RID', tab_stops: 'PackedFloat32Array') -> 'float': ...
    def _shaped_text_shape(self, shaped: 'RID') -> 'bool': ...
    def _shaped_text_update_breaks(self, shaped: 'RID') -> 'bool': ...
    def _shaped_text_update_justification_ops(self, shaped: 'RID') -> 'bool': ...
    def _shaped_text_is_ready(self, shaped: 'RID') -> 'bool': ...
    def _shaped_text_get_glyphs(self, shaped: 'RID') -> 'intptr': ...
    def _shaped_text_sort_logical(self, shaped: 'RID') -> 'intptr': ...
    def _shaped_text_get_glyph_count(self, shaped: 'RID') -> 'int': ...
    def _shaped_text_get_range(self, shaped: 'RID') -> 'Vector2i': ...
    def _shaped_text_get_line_breaks_adv(self, shaped: 'RID', width: 'PackedFloat32Array', start: 'int', once: 'bool', break_flags: 'TextServer__LineBreakFlag') -> 'PackedInt32Array': ...
    def _shaped_text_get_line_breaks(self, shaped: 'RID', width: 'float', start: 'int', break_flags: 'TextServer__LineBreakFlag') -> 'PackedInt32Array': ...
    def _shaped_text_get_word_breaks(self, shaped: 'RID', grapheme_flags: 'TextServer__GraphemeFlag', skip_grapheme_flags: 'TextServer__GraphemeFlag') -> 'PackedInt32Array': ...
    def _shaped_text_get_trim_pos(self, shaped: 'RID') -> 'int': ...
    def _shaped_text_get_ellipsis_pos(self, shaped: 'RID') -> 'int': ...
    def _shaped_text_get_ellipsis_glyph_count(self, shaped: 'RID') -> 'int': ...
    def _shaped_text_get_ellipsis_glyphs(self, shaped: 'RID') -> 'intptr': ...
    def _shaped_text_overrun_trim_to_width(self, shaped: 'RID', width: 'float', trim_flags: 'TextServer__TextOverrunFlag') -> None: ...
    def _shaped_text_get_objects(self, shaped: 'RID') -> 'Array': ...
    def _shaped_text_get_object_rect(self, shaped: 'RID', key: 'Variant') -> 'Rect2': ...
    def _shaped_text_get_object_range(self, shaped: 'RID', key: 'Variant') -> 'Vector2i': ...
    def _shaped_text_get_object_glyph(self, shaped: 'RID', key: 'Variant') -> 'int': ...
    def _shaped_text_get_size(self, shaped: 'RID') -> 'Vector2': ...
    def _shaped_text_get_ascent(self, shaped: 'RID') -> 'float': ...
    def _shaped_text_get_descent(self, shaped: 'RID') -> 'float': ...
    def _shaped_text_get_width(self, shaped: 'RID') -> 'float': ...
    def _shaped_text_get_underline_position(self, shaped: 'RID') -> 'float': ...
    def _shaped_text_get_underline_thickness(self, shaped: 'RID') -> 'float': ...
    def _shaped_text_get_dominant_direction_in_range(self, shaped: 'RID', start: 'int', end: 'int') -> 'int': ...
    def _shaped_text_get_carets(self, shaped: 'RID', position: 'int', caret: 'intptr') -> None: ...
    def _shaped_text_get_selection(self, shaped: 'RID', start: 'int', end: 'int') -> 'PackedVector2Array': ...
    def _shaped_text_hit_test_grapheme(self, shaped: 'RID', coord: 'float') -> 'int': ...
    def _shaped_text_hit_test_position(self, shaped: 'RID', coord: 'float') -> 'int': ...
    def _shaped_text_draw(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: 'float', clip_r: 'float', color: 'Color') -> None: ...
    def _shaped_text_draw_outline(self, shaped: 'RID', canvas: 'RID', pos: 'Vector2', clip_l: 'float', clip_r: 'float', outline_size: 'int', color: 'Color') -> None: ...
    def _shaped_text_get_grapheme_bounds(self, shaped: 'RID', pos: 'int') -> 'Vector2': ...
    def _shaped_text_next_grapheme_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def _shaped_text_prev_grapheme_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def _shaped_text_get_character_breaks(self, shaped: 'RID') -> 'PackedInt32Array': ...
    def _shaped_text_next_character_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def _shaped_text_prev_character_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def _shaped_text_closest_character_pos(self, shaped: 'RID', pos: 'int') -> 'int': ...
    def _format_number(self, number: 'str', language: 'str') -> 'str': ...
    def _parse_number(self, number: 'str', language: 'str') -> 'str': ...
    def _percent_sign(self, language: 'str') -> 'str': ...
    def _strip_diacritics(self, string: 'str') -> 'str': ...
    def _is_valid_identifier(self, string: 'str') -> 'bool': ...
    def _is_valid_letter(self, unicode: 'int') -> 'bool': ...
    def _string_get_word_breaks(self, string: 'str', language: 'str', chars_per_line: 'int') -> 'PackedInt32Array': ...
    def _string_get_character_breaks(self, string: 'str', language: 'str') -> 'PackedInt32Array': ...
    def _is_confusable(self, string: 'str', dict: 'PackedStringArray') -> 'int': ...
    def _spoof_check(self, string: 'str') -> 'bool': ...
    def _string_to_upper(self, string: 'str', language: 'str') -> 'str': ...
    def _string_to_lower(self, string: 'str', language: 'str') -> 'str': ...
    def _string_to_title(self, string: 'str', language: 'str') -> 'str': ...
    def _parse_structured_text(self, parser_type: 'TextServer__StructuredTextParser', args: 'Array', text: 'str') -> 'Array'['Vector3i']: ...
    def _cleanup(self) -> None: ...


class TextServerManager(Object):


    interface_added: 'Signal[Callable[[StringName], None]]'  # interface_added(interface_name: StringName)
    interface_removed: 'Signal[Callable[[StringName], None]]'  # interface_removed(interface_name: StringName)

    def add_interface(self, interface: 'TextServer') -> None: ...
    def get_interface_count(self) -> 'int': ...
    def remove_interface(self, interface: 'TextServer') -> None: ...
    def get_interface(self, idx: 'int') -> 'TextServer': ...
    def get_interfaces(self) -> 'Array'['Dictionary']: ...
    def find_interface(self, name: 'str') -> 'TextServer': ...
    def set_primary_interface(self, index: 'TextServer') -> None: ...
    def get_primary_interface(self) -> 'TextServer': ...


class Texture(Resource): ...


class Texture2D(Texture):



    def _get_width(self) -> 'int': ...
    def _get_height(self) -> 'int': ...
    def _is_pixel_opaque(self, x: 'int', y: 'int') -> 'bool': ...
    def _has_alpha(self) -> 'bool': ...
    def _draw(self, to_canvas_item: 'RID', pos: 'Vector2', modulate: 'Color', transpose: 'bool') -> None: ...
    def _draw_rect(self, to_canvas_item: 'RID', rect: 'Rect2', tile: 'bool', modulate: 'Color', transpose: 'bool') -> None: ...
    def _draw_rect_region(self, to_canvas_item: 'RID', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color', transpose: 'bool', clip_uv: 'bool') -> None: ...
    def get_width(self) -> 'int': ...
    def get_height(self) -> 'int': ...
    def get_size(self) -> 'Vector2': ...
    def has_alpha(self) -> 'bool': ...
    def draw(self, canvas_item: 'RID', position: 'Vector2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False) -> None: ...
    def draw_rect(self, canvas_item: 'RID', rect: 'Rect2', tile: 'bool', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False) -> None: ...
    def draw_rect_region(self, canvas_item: 'RID', rect: 'Rect2', src_rect: 'Rect2', modulate: 'Color' = default('''Color(1, 1, 1, 1)'''), transpose: 'bool' = False, clip_uv: 'bool' = True) -> None: ...
    def get_image(self) -> 'Image': ...
    def create_placeholder(self) -> 'Resource': ...


class Texture2DArray(ImageTextureLayered):



    def create_placeholder(self) -> 'Resource': ...


class Texture2DArrayRD(TextureLayeredRD): ...


class Texture2DRD(Texture2D):


    texture_rd_rid: 'RID'

    def set_texture_rd_rid(self, texture_rd_rid: 'RID') -> None: ...
    def get_texture_rd_rid(self) -> 'RID': ...


class Texture3D(Texture):



    def _get_format(self) -> 'Image__Format': ...
    def _get_width(self) -> 'int': ...
    def _get_height(self) -> 'int': ...
    def _get_depth(self) -> 'int': ...
    def _has_mipmaps(self) -> 'bool': ...
    def _get_data(self) -> 'Array'['Image']: ...
    def get_format(self) -> 'Image__Format': ...
    def get_width(self) -> 'int': ...
    def get_height(self) -> 'int': ...
    def get_depth(self) -> 'int': ...
    def has_mipmaps(self) -> 'bool': ...
    def get_data(self) -> 'Array'['Image']: ...
    def create_placeholder(self) -> 'Resource': ...


class Texture3DRD(Texture3D):


    texture_rd_rid: 'RID'

    def set_texture_rd_rid(self, texture_rd_rid: 'RID') -> None: ...
    def get_texture_rd_rid(self) -> 'RID': ...


class TextureButton(BaseButton):


    texture_normal: 'Texture2D'
    texture_pressed: 'Texture2D'
    texture_hover: 'Texture2D'
    texture_disabled: 'Texture2D'
    texture_focused: 'Texture2D'
    texture_click_mask: 'BitMap'
    ignore_texture_size: 'bool'
    stretch_mode: 'int'
    flip_h: 'bool'
    flip_v: 'bool'

    def set_texture_normal(self, texture: 'Texture2D') -> None: ...
    def set_texture_pressed(self, texture: 'Texture2D') -> None: ...
    def set_texture_hover(self, texture: 'Texture2D') -> None: ...
    def set_texture_disabled(self, texture: 'Texture2D') -> None: ...
    def set_texture_focused(self, texture: 'Texture2D') -> None: ...
    def set_click_mask(self, mask: 'BitMap') -> None: ...
    def set_ignore_texture_size(self, ignore: 'bool') -> None: ...
    def set_stretch_mode(self, mode: 'TextureButton__StretchMode') -> None: ...
    def set_flip_h(self, enable: 'bool') -> None: ...
    def is_flipped_h(self) -> 'bool': ...
    def set_flip_v(self, enable: 'bool') -> None: ...
    def is_flipped_v(self) -> 'bool': ...
    def get_texture_normal(self) -> 'Texture2D': ...
    def get_texture_pressed(self) -> 'Texture2D': ...
    def get_texture_hover(self) -> 'Texture2D': ...
    def get_texture_disabled(self) -> 'Texture2D': ...
    def get_texture_focused(self) -> 'Texture2D': ...
    def get_click_mask(self) -> 'BitMap': ...
    def get_ignore_texture_size(self) -> 'bool': ...
    def get_stretch_mode(self) -> 'TextureButton__StretchMode': ...


class TextureCubemapArrayRD(TextureLayeredRD): ...


class TextureCubemapRD(TextureLayeredRD): ...


class TextureLayered(Texture):



    def _get_format(self) -> 'Image__Format': ...
    def _get_layered_type(self) -> 'int': ...
    def _get_width(self) -> 'int': ...
    def _get_height(self) -> 'int': ...
    def _get_layers(self) -> 'int': ...
    def _has_mipmaps(self) -> 'bool': ...
    def _get_layer_data(self, layer_index: 'int') -> 'Image': ...
    def get_format(self) -> 'Image__Format': ...
    def get_layered_type(self) -> 'TextureLayered__LayeredType': ...
    def get_width(self) -> 'int': ...
    def get_height(self) -> 'int': ...
    def get_layers(self) -> 'int': ...
    def has_mipmaps(self) -> 'bool': ...
    def get_layer_data(self, layer: 'int') -> 'Image': ...


class TextureLayeredRD(TextureLayered):


    texture_rd_rid: 'RID'

    def set_texture_rd_rid(self, texture_rd_rid: 'RID') -> None: ...
    def get_texture_rd_rid(self) -> 'RID': ...


class TextureProgressBar(Range):


    fill_mode: 'int'
    radial_initial_angle: 'float'
    radial_fill_degrees: 'float'
    radial_center_offset: 'Vector2'
    nine_patch_stretch: 'bool'
    stretch_margin_left: 'int'
    stretch_margin_top: 'int'
    stretch_margin_right: 'int'
    stretch_margin_bottom: 'int'
    texture_under: 'Texture2D'
    texture_over: 'Texture2D'
    texture_progress: 'Texture2D'
    texture_progress_offset: 'Vector2'
    tint_under: 'Color'
    tint_over: 'Color'
    tint_progress: 'Color'

    def set_under_texture(self, tex: 'Texture2D') -> None: ...
    def get_under_texture(self) -> 'Texture2D': ...
    def set_progress_texture(self, tex: 'Texture2D') -> None: ...
    def get_progress_texture(self) -> 'Texture2D': ...
    def set_over_texture(self, tex: 'Texture2D') -> None: ...
    def get_over_texture(self) -> 'Texture2D': ...
    def set_fill_mode(self, mode: 'int') -> None: ...
    def get_fill_mode(self) -> 'int': ...
    def set_tint_under(self, tint: 'Color') -> None: ...
    def get_tint_under(self) -> 'Color': ...
    def set_tint_progress(self, tint: 'Color') -> None: ...
    def get_tint_progress(self) -> 'Color': ...
    def set_tint_over(self, tint: 'Color') -> None: ...
    def get_tint_over(self) -> 'Color': ...
    def set_texture_progress_offset(self, offset: 'Vector2') -> None: ...
    def get_texture_progress_offset(self) -> 'Vector2': ...
    def set_radial_initial_angle(self, mode: 'float') -> None: ...
    def get_radial_initial_angle(self) -> 'float': ...
    def set_radial_center_offset(self, mode: 'Vector2') -> None: ...
    def get_radial_center_offset(self) -> 'Vector2': ...
    def set_fill_degrees(self, mode: 'float') -> None: ...
    def get_fill_degrees(self) -> 'float': ...
    def set_stretch_margin(self, margin: 'Side', value: 'int') -> None: ...
    def get_stretch_margin(self, margin: 'Side') -> 'int': ...
    def set_nine_patch_stretch(self, stretch: 'bool') -> None: ...
    def get_nine_patch_stretch(self) -> 'bool': ...


class TextureRect(Control):


    texture: 'Texture2D'
    expand_mode: 'int'
    stretch_mode: 'int'
    flip_h: 'bool'
    flip_v: 'bool'

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_expand_mode(self, expand_mode: 'TextureRect__ExpandMode') -> None: ...
    def get_expand_mode(self) -> 'TextureRect__ExpandMode': ...
    def set_flip_h(self, enable: 'bool') -> None: ...
    def is_flipped_h(self) -> 'bool': ...
    def set_flip_v(self, enable: 'bool') -> None: ...
    def is_flipped_v(self) -> 'bool': ...
    def set_stretch_mode(self, stretch_mode: 'TextureRect__StretchMode') -> None: ...
    def get_stretch_mode(self) -> 'TextureRect__StretchMode': ...


class Theme(Resource):


    default_base_scale: 'float'
    default_font: 'Font'
    default_font_size: 'int'

    def set_icon(self, name: 'StringName', theme_type: 'StringName', texture: 'Texture2D') -> None: ...
    def get_icon(self, name: 'StringName', theme_type: 'StringName') -> 'Texture2D': ...
    def has_icon(self, name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_icon(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_icon(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_icon_list(self, theme_type: 'str') -> 'PackedStringArray': ...
    def get_icon_type_list(self) -> 'PackedStringArray': ...
    def set_stylebox(self, name: 'StringName', theme_type: 'StringName', texture: 'StyleBox') -> None: ...
    def get_stylebox(self, name: 'StringName', theme_type: 'StringName') -> 'StyleBox': ...
    def has_stylebox(self, name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_stylebox(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_stylebox(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_stylebox_list(self, theme_type: 'str') -> 'PackedStringArray': ...
    def get_stylebox_type_list(self) -> 'PackedStringArray': ...
    def set_font(self, name: 'StringName', theme_type: 'StringName', font: 'Font') -> None: ...
    def get_font(self, name: 'StringName', theme_type: 'StringName') -> 'Font': ...
    def has_font(self, name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_font(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_font(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_font_list(self, theme_type: 'str') -> 'PackedStringArray': ...
    def get_font_type_list(self) -> 'PackedStringArray': ...
    def set_font_size(self, name: 'StringName', theme_type: 'StringName', font_size: 'int') -> None: ...
    def get_font_size(self, name: 'StringName', theme_type: 'StringName') -> 'int': ...
    def has_font_size(self, name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_font_size(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_font_size(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_font_size_list(self, theme_type: 'str') -> 'PackedStringArray': ...
    def get_font_size_type_list(self) -> 'PackedStringArray': ...
    def set_color(self, name: 'StringName', theme_type: 'StringName', color: 'Color') -> None: ...
    def get_color(self, name: 'StringName', theme_type: 'StringName') -> 'Color': ...
    def has_color(self, name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_color(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_color(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_color_list(self, theme_type: 'str') -> 'PackedStringArray': ...
    def get_color_type_list(self) -> 'PackedStringArray': ...
    def set_constant(self, name: 'StringName', theme_type: 'StringName', constant: 'int') -> None: ...
    def get_constant(self, name: 'StringName', theme_type: 'StringName') -> 'int': ...
    def has_constant(self, name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_constant(self, old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_constant(self, name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_constant_list(self, theme_type: 'str') -> 'PackedStringArray': ...
    def get_constant_type_list(self) -> 'PackedStringArray': ...
    def set_default_base_scale(self, base_scale: 'float') -> None: ...
    def get_default_base_scale(self) -> 'float': ...
    def has_default_base_scale(self) -> 'bool': ...
    def set_default_font(self, font: 'Font') -> None: ...
    def get_default_font(self) -> 'Font': ...
    def has_default_font(self) -> 'bool': ...
    def set_default_font_size(self, font_size: 'int') -> None: ...
    def get_default_font_size(self) -> 'int': ...
    def has_default_font_size(self) -> 'bool': ...
    def set_theme_item(self, data_type: 'Theme__DataType', name: 'StringName', theme_type: 'StringName', value: 'Variant') -> None: ...
    def get_theme_item(self, data_type: 'Theme__DataType', name: 'StringName', theme_type: 'StringName') -> 'Variant': ...
    def has_theme_item(self, data_type: 'Theme__DataType', name: 'StringName', theme_type: 'StringName') -> 'bool': ...
    def rename_theme_item(self, data_type: 'Theme__DataType', old_name: 'StringName', name: 'StringName', theme_type: 'StringName') -> None: ...
    def clear_theme_item(self, data_type: 'Theme__DataType', name: 'StringName', theme_type: 'StringName') -> None: ...
    def get_theme_item_list(self, data_type: 'Theme__DataType', theme_type: 'str') -> 'PackedStringArray': ...
    def get_theme_item_type_list(self, data_type: 'Theme__DataType') -> 'PackedStringArray': ...
    def set_type_variation(self, theme_type: 'StringName', base_type: 'StringName') -> None: ...
    def is_type_variation(self, theme_type: 'StringName', base_type: 'StringName') -> 'bool': ...
    def clear_type_variation(self, theme_type: 'StringName') -> None: ...
    def get_type_variation_base(self, theme_type: 'StringName') -> 'StringName': ...
    def get_type_variation_list(self, base_type: 'StringName') -> 'PackedStringArray': ...
    def add_type(self, theme_type: 'StringName') -> None: ...
    def remove_type(self, theme_type: 'StringName') -> None: ...
    def get_type_list(self) -> 'PackedStringArray': ...
    def merge_with(self, other: 'Theme') -> None: ...
    def clear(self) -> None: ...


class ThemeDB(Object):


    fallback_base_scale: 'float'
    fallback_font: 'Font'
    fallback_font_size: 'int'
    fallback_icon: 'Texture2D'
    fallback_stylebox: 'StyleBox'
    fallback_changed: 'Signal[Callable[[], None]]'  # fallback_changed()

    def get_default_theme(self) -> 'Theme': ...
    def get_project_theme(self) -> 'Theme': ...
    def set_fallback_base_scale(self, base_scale: 'float') -> None: ...
    def get_fallback_base_scale(self) -> 'float': ...
    def set_fallback_font(self, font: 'Font') -> None: ...
    def get_fallback_font(self) -> 'Font': ...
    def set_fallback_font_size(self, font_size: 'int') -> None: ...
    def get_fallback_font_size(self) -> 'int': ...
    def set_fallback_icon(self, icon: 'Texture2D') -> None: ...
    def get_fallback_icon(self) -> 'Texture2D': ...
    def set_fallback_stylebox(self, stylebox: 'StyleBox') -> None: ...
    def get_fallback_stylebox(self) -> 'StyleBox': ...


class Thread(RefCounted):



    def start(self, callable: 'Callable', priority: 'Thread__Priority' = 1) -> 'Error': ...
    def get_id(self) -> 'str': ...
    def is_started(self) -> 'bool': ...
    def is_alive(self) -> 'bool': ...
    def wait_to_finish(self) -> 'Variant': ...
    @staticmethod
    def set_thread_safety_checks_enabled(enabled: 'bool') -> None: ...


class TileData(Object):


    flip_h: 'bool'
    flip_v: 'bool'
    transpose: 'bool'
    texture_origin: 'Vector2i'
    modulate: 'Color'
    material: 'CanvasItemMaterial' | 'ShaderMaterial'
    z_index: 'int'
    y_sort_origin: 'int'
    terrain_set: 'int'
    terrain: 'int'
    probability: 'float'
    changed: 'Signal[Callable[[], None]]'  # changed()

    def set_flip_h(self, flip_h: 'bool') -> None: ...
    def get_flip_h(self) -> 'bool': ...
    def set_flip_v(self, flip_v: 'bool') -> None: ...
    def get_flip_v(self) -> 'bool': ...
    def set_transpose(self, transpose: 'bool') -> None: ...
    def get_transpose(self) -> 'bool': ...
    def set_material(self, material: 'Material') -> None: ...
    def get_material(self) -> 'Material': ...
    def set_texture_origin(self, texture_origin: 'Vector2i') -> None: ...
    def get_texture_origin(self) -> 'Vector2i': ...
    def set_modulate(self, modulate: 'Color') -> None: ...
    def get_modulate(self) -> 'Color': ...
    def set_z_index(self, z_index: 'int') -> None: ...
    def get_z_index(self) -> 'int': ...
    def set_y_sort_origin(self, y_sort_origin: 'int') -> None: ...
    def get_y_sort_origin(self) -> 'int': ...
    def set_occluder_polygons_count(self, layer_id: 'int', polygons_count: 'int') -> None: ...
    def get_occluder_polygons_count(self, layer_id: 'int') -> 'int': ...
    def add_occluder_polygon(self, layer_id: 'int') -> None: ...
    def remove_occluder_polygon(self, layer_id: 'int', polygon_index: 'int') -> None: ...
    def set_occluder_polygon(self, layer_id: 'int', polygon_index: 'int', polygon: 'OccluderPolygon2D') -> None: ...
    def get_occluder_polygon(self, layer_id: 'int', polygon_index: 'int', flip_h: 'bool' = False, flip_v: 'bool' = False, transpose: 'bool' = False) -> 'OccluderPolygon2D': ...
    def set_occluder(self, layer_id: 'int', occluder_polygon: 'OccluderPolygon2D') -> None: ...
    def get_occluder(self, layer_id: 'int', flip_h: 'bool' = False, flip_v: 'bool' = False, transpose: 'bool' = False) -> 'OccluderPolygon2D': ...
    def set_constant_linear_velocity(self, layer_id: 'int', velocity: 'Vector2') -> None: ...
    def get_constant_linear_velocity(self, layer_id: 'int') -> 'Vector2': ...
    def set_constant_angular_velocity(self, layer_id: 'int', velocity: 'float') -> None: ...
    def get_constant_angular_velocity(self, layer_id: 'int') -> 'float': ...
    def set_collision_polygons_count(self, layer_id: 'int', polygons_count: 'int') -> None: ...
    def get_collision_polygons_count(self, layer_id: 'int') -> 'int': ...
    def add_collision_polygon(self, layer_id: 'int') -> None: ...
    def remove_collision_polygon(self, layer_id: 'int', polygon_index: 'int') -> None: ...
    def set_collision_polygon_points(self, layer_id: 'int', polygon_index: 'int', polygon: 'PackedVector2Array') -> None: ...
    def get_collision_polygon_points(self, layer_id: 'int', polygon_index: 'int') -> 'PackedVector2Array': ...
    def set_collision_polygon_one_way(self, layer_id: 'int', polygon_index: 'int', one_way: 'bool') -> None: ...
    def is_collision_polygon_one_way(self, layer_id: 'int', polygon_index: 'int') -> 'bool': ...
    def set_collision_polygon_one_way_margin(self, layer_id: 'int', polygon_index: 'int', one_way_margin: 'float') -> None: ...
    def get_collision_polygon_one_way_margin(self, layer_id: 'int', polygon_index: 'int') -> 'float': ...
    def set_terrain_set(self, terrain_set: 'int') -> None: ...
    def get_terrain_set(self) -> 'int': ...
    def set_terrain(self, terrain: 'int') -> None: ...
    def get_terrain(self) -> 'int': ...
    def set_terrain_peering_bit(self, peering_bit: 'TileSet__CellNeighbor', terrain: 'int') -> None: ...
    def get_terrain_peering_bit(self, peering_bit: 'TileSet__CellNeighbor') -> 'int': ...
    def is_valid_terrain_peering_bit(self, peering_bit: 'TileSet__CellNeighbor') -> 'bool': ...
    def set_navigation_polygon(self, layer_id: 'int', navigation_polygon: 'NavigationPolygon') -> None: ...
    def get_navigation_polygon(self, layer_id: 'int', flip_h: 'bool' = False, flip_v: 'bool' = False, transpose: 'bool' = False) -> 'NavigationPolygon': ...
    def set_probability(self, probability: 'float') -> None: ...
    def get_probability(self) -> 'float': ...
    def set_custom_data(self, layer_name: 'str', value: 'Variant') -> None: ...
    def get_custom_data(self, layer_name: 'str') -> 'Variant': ...
    def has_custom_data(self, layer_name: 'str') -> 'bool': ...
    def set_custom_data_by_layer_id(self, layer_id: 'int', value: 'Variant') -> None: ...
    def get_custom_data_by_layer_id(self, layer_id: 'int') -> 'Variant': ...


class TileMap(Node2D):


    tile_set: 'TileSet'
    rendering_quadrant_size: 'int'
    collision_animatable: 'bool'
    collision_visibility_mode: 'int'
    navigation_visibility_mode: 'int'
    changed: 'Signal[Callable[[], None]]'  # changed()

    def _use_tile_data_runtime_update(self, layer: 'int', coords: 'Vector2i') -> 'bool': ...
    def _tile_data_runtime_update(self, layer: 'int', coords: 'Vector2i', tile_data: 'TileData') -> None: ...
    def set_navigation_map(self, layer: 'int', map: 'RID') -> None: ...
    def get_navigation_map(self, layer: 'int') -> 'RID': ...
    def force_update(self, layer: 'int' = -1) -> None: ...
    def set_tileset(self, tileset: 'TileSet') -> None: ...
    def get_tileset(self) -> 'TileSet': ...
    def set_rendering_quadrant_size(self, size: 'int') -> None: ...
    def get_rendering_quadrant_size(self) -> 'int': ...
    def get_layers_count(self) -> 'int': ...
    def add_layer(self, to_position: 'int') -> None: ...
    def move_layer(self, layer: 'int', to_position: 'int') -> None: ...
    def remove_layer(self, layer: 'int') -> None: ...
    def set_layer_name(self, layer: 'int', name: 'str') -> None: ...
    def get_layer_name(self, layer: 'int') -> 'str': ...
    def set_layer_enabled(self, layer: 'int', enabled: 'bool') -> None: ...
    def is_layer_enabled(self, layer: 'int') -> 'bool': ...
    def set_layer_modulate(self, layer: 'int', modulate: 'Color') -> None: ...
    def get_layer_modulate(self, layer: 'int') -> 'Color': ...
    def set_layer_y_sort_enabled(self, layer: 'int', y_sort_enabled: 'bool') -> None: ...
    def is_layer_y_sort_enabled(self, layer: 'int') -> 'bool': ...
    def set_layer_y_sort_origin(self, layer: 'int', y_sort_origin: 'int') -> None: ...
    def get_layer_y_sort_origin(self, layer: 'int') -> 'int': ...
    def set_layer_z_index(self, layer: 'int', z_index: 'int') -> None: ...
    def get_layer_z_index(self, layer: 'int') -> 'int': ...
    def set_layer_navigation_enabled(self, layer: 'int', enabled: 'bool') -> None: ...
    def is_layer_navigation_enabled(self, layer: 'int') -> 'bool': ...
    def set_layer_navigation_map(self, layer: 'int', map: 'RID') -> None: ...
    def get_layer_navigation_map(self, layer: 'int') -> 'RID': ...
    def set_collision_animatable(self, enabled: 'bool') -> None: ...
    def is_collision_animatable(self) -> 'bool': ...
    def set_collision_visibility_mode(self, collision_visibility_mode: 'TileMap__VisibilityMode') -> None: ...
    def get_collision_visibility_mode(self) -> 'TileMap__VisibilityMode': ...
    def set_navigation_visibility_mode(self, navigation_visibility_mode: 'TileMap__VisibilityMode') -> None: ...
    def get_navigation_visibility_mode(self) -> 'TileMap__VisibilityMode': ...
    def set_cell(self, layer: 'int', coords: 'Vector2i', source_id: 'int' = -1, atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: 'int' = 0) -> None: ...
    def erase_cell(self, layer: 'int', coords: 'Vector2i') -> None: ...
    def get_cell_source_id(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'int': ...
    def get_cell_atlas_coords(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'Vector2i': ...
    def get_cell_alternative_tile(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'int': ...
    def get_cell_tile_data(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'TileData': ...
    def is_cell_flipped_h(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'bool': ...
    def is_cell_flipped_v(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'bool': ...
    def is_cell_transposed(self, layer: 'int', coords: 'Vector2i', use_proxies: 'bool' = False) -> 'bool': ...
    def get_coords_for_body_rid(self, body: 'RID') -> 'Vector2i': ...
    def get_layer_for_body_rid(self, body: 'RID') -> 'int': ...
    def get_pattern(self, layer: 'int', coords_array: 'Array'['Vector2i']) -> 'TileMapPattern': ...
    def map_pattern(self, position_in_tilemap: 'Vector2i', coords_in_pattern: 'Vector2i', pattern: 'TileMapPattern') -> 'Vector2i': ...
    def set_pattern(self, layer: 'int', position: 'Vector2i', pattern: 'TileMapPattern') -> None: ...
    def set_cells_terrain_connect(self, layer: 'int', cells: 'Array'['Vector2i'], terrain_set: 'int', terrain: 'int', ignore_empty_terrains: 'bool' = True) -> None: ...
    def set_cells_terrain_path(self, layer: 'int', path: 'Array'['Vector2i'], terrain_set: 'int', terrain: 'int', ignore_empty_terrains: 'bool' = True) -> None: ...
    def fix_invalid_tiles(self) -> None: ...
    def clear_layer(self, layer: 'int') -> None: ...
    def clear(self) -> None: ...
    def update_internals(self) -> None: ...
    def notify_runtime_tile_data_update(self, layer: 'int' = -1) -> None: ...
    def get_surrounding_cells(self, coords: 'Vector2i') -> 'Array'['Vector2i']: ...
    def get_used_cells(self, layer: 'int') -> 'Array'['Vector2i']: ...
    def get_used_cells_by_id(self, layer: 'int', source_id: 'int' = -1, atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: 'int' = -1) -> 'Array'['Vector2i']: ...
    def get_used_rect(self) -> 'Rect2i': ...
    def map_to_local(self, map_position: 'Vector2i') -> 'Vector2': ...
    def local_to_map(self, local_position: 'Vector2') -> 'Vector2i': ...
    def get_neighbor_cell(self, coords: 'Vector2i', neighbor: 'TileSet__CellNeighbor') -> 'Vector2i': ...


class TileMapLayer(Node2D):


    tile_map_data: 'PackedByteArray'
    enabled: 'bool'
    tile_set: 'TileSet'
    occlusion_enabled: 'bool'
    y_sort_origin: 'int'
    x_draw_order_reversed: 'bool'
    rendering_quadrant_size: 'int'
    collision_enabled: 'bool'
    use_kinematic_bodies: 'bool'
    collision_visibility_mode: 'int'
    navigation_enabled: 'bool'
    navigation_visibility_mode: 'int'
    changed: 'Signal[Callable[[], None]]'  # changed()

    def _use_tile_data_runtime_update(self, coords: 'Vector2i') -> 'bool': ...
    def _tile_data_runtime_update(self, coords: 'Vector2i', tile_data: 'TileData') -> None: ...
    def _update_cells(self, coords: 'Array'['Vector2i'], forced_cleanup: 'bool') -> None: ...
    def set_cell(self, coords: 'Vector2i', source_id: 'int' = -1, atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: 'int' = 0) -> None: ...
    def erase_cell(self, coords: 'Vector2i') -> None: ...
    def fix_invalid_tiles(self) -> None: ...
    def clear(self) -> None: ...
    def get_cell_source_id(self, coords: 'Vector2i') -> 'int': ...
    def get_cell_atlas_coords(self, coords: 'Vector2i') -> 'Vector2i': ...
    def get_cell_alternative_tile(self, coords: 'Vector2i') -> 'int': ...
    def get_cell_tile_data(self, coords: 'Vector2i') -> 'TileData': ...
    def is_cell_flipped_h(self, coords: 'Vector2i') -> 'bool': ...
    def is_cell_flipped_v(self, coords: 'Vector2i') -> 'bool': ...
    def is_cell_transposed(self, coords: 'Vector2i') -> 'bool': ...
    def get_used_cells(self) -> 'Array'['Vector2i']: ...
    def get_used_cells_by_id(self, source_id: 'int' = -1, atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: 'int' = -1) -> 'Array'['Vector2i']: ...
    def get_used_rect(self) -> 'Rect2i': ...
    def get_pattern(self, coords_array: 'Array'['Vector2i']) -> 'TileMapPattern': ...
    def set_pattern(self, position: 'Vector2i', pattern: 'TileMapPattern') -> None: ...
    def set_cells_terrain_connect(self, cells: 'Array'['Vector2i'], terrain_set: 'int', terrain: 'int', ignore_empty_terrains: 'bool' = True) -> None: ...
    def set_cells_terrain_path(self, path: 'Array'['Vector2i'], terrain_set: 'int', terrain: 'int', ignore_empty_terrains: 'bool' = True) -> None: ...
    def has_body_rid(self, body: 'RID') -> 'bool': ...
    def get_coords_for_body_rid(self, body: 'RID') -> 'Vector2i': ...
    def update_internals(self) -> None: ...
    def notify_runtime_tile_data_update(self) -> None: ...
    def map_pattern(self, position_in_tilemap: 'Vector2i', coords_in_pattern: 'Vector2i', pattern: 'TileMapPattern') -> 'Vector2i': ...
    def get_surrounding_cells(self, coords: 'Vector2i') -> 'Array'['Vector2i']: ...
    def get_neighbor_cell(self, coords: 'Vector2i', neighbor: 'TileSet__CellNeighbor') -> 'Vector2i': ...
    def map_to_local(self, map_position: 'Vector2i') -> 'Vector2': ...
    def local_to_map(self, local_position: 'Vector2') -> 'Vector2i': ...
    def set_tile_map_data_from_array(self, tile_map_layer_data: 'PackedByteArray') -> None: ...
    def get_tile_map_data_as_array(self) -> 'PackedByteArray': ...
    def set_enabled(self, enabled: 'bool') -> None: ...
    def is_enabled(self) -> 'bool': ...
    def set_tile_set(self, tile_set: 'TileSet') -> None: ...
    def get_tile_set(self) -> 'TileSet': ...
    def set_y_sort_origin(self, y_sort_origin: 'int') -> None: ...
    def get_y_sort_origin(self) -> 'int': ...
    def set_x_draw_order_reversed(self, x_draw_order_reversed: 'bool') -> None: ...
    def is_x_draw_order_reversed(self) -> 'bool': ...
    def set_rendering_quadrant_size(self, size: 'int') -> None: ...
    def get_rendering_quadrant_size(self) -> 'int': ...
    def set_collision_enabled(self, enabled: 'bool') -> None: ...
    def is_collision_enabled(self) -> 'bool': ...
    def set_use_kinematic_bodies(self, use_kinematic_bodies: 'bool') -> None: ...
    def is_using_kinematic_bodies(self) -> 'bool': ...
    def set_collision_visibility_mode(self, visibility_mode: 'TileMapLayer__DebugVisibilityMode') -> None: ...
    def get_collision_visibility_mode(self) -> 'TileMapLayer__DebugVisibilityMode': ...
    def set_occlusion_enabled(self, enabled: 'bool') -> None: ...
    def is_occlusion_enabled(self) -> 'bool': ...
    def set_navigation_enabled(self, enabled: 'bool') -> None: ...
    def is_navigation_enabled(self) -> 'bool': ...
    def set_navigation_map(self, map: 'RID') -> None: ...
    def get_navigation_map(self) -> 'RID': ...
    def set_navigation_visibility_mode(self, show_navigation: 'TileMapLayer__DebugVisibilityMode') -> None: ...
    def get_navigation_visibility_mode(self) -> 'TileMapLayer__DebugVisibilityMode': ...


class TileMapPattern(Resource):



    def set_cell(self, coords: 'Vector2i', source_id: 'int' = -1, atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), alternative_tile: 'int' = -1) -> None: ...
    def has_cell(self, coords: 'Vector2i') -> 'bool': ...
    def remove_cell(self, coords: 'Vector2i', update_size: 'bool') -> None: ...
    def get_cell_source_id(self, coords: 'Vector2i') -> 'int': ...
    def get_cell_atlas_coords(self, coords: 'Vector2i') -> 'Vector2i': ...
    def get_cell_alternative_tile(self, coords: 'Vector2i') -> 'int': ...
    def get_used_cells(self) -> 'Array'['Vector2i']: ...
    def get_size(self) -> 'Vector2i': ...
    def set_size(self, size: 'Vector2i') -> None: ...
    def is_empty(self) -> 'bool': ...


class TileSet(Resource):


    tile_shape: 'int'
    tile_layout: 'int'
    tile_offset_axis: 'int'
    tile_size: 'Vector2i'
    uv_clipping: 'bool'

    def get_next_source_id(self) -> 'int': ...
    def add_source(self, source: 'TileSetSource', atlas_source_id_override: 'int' = -1) -> 'int': ...
    def remove_source(self, source_id: 'int') -> None: ...
    def set_source_id(self, source_id: 'int', new_source_id: 'int') -> None: ...
    def get_source_count(self) -> 'int': ...
    def get_source_id(self, index: 'int') -> 'int': ...
    def has_source(self, source_id: 'int') -> 'bool': ...
    def get_source(self, source_id: 'int') -> 'TileSetSource': ...
    def set_tile_shape(self, shape: 'TileSet__TileShape') -> None: ...
    def get_tile_shape(self) -> 'TileSet__TileShape': ...
    def set_tile_layout(self, layout: 'TileSet__TileLayout') -> None: ...
    def get_tile_layout(self) -> 'TileSet__TileLayout': ...
    def set_tile_offset_axis(self, alignment: 'TileSet__TileOffsetAxis') -> None: ...
    def get_tile_offset_axis(self) -> 'TileSet__TileOffsetAxis': ...
    def set_tile_size(self, size: 'Vector2i') -> None: ...
    def get_tile_size(self) -> 'Vector2i': ...
    def set_uv_clipping(self, uv_clipping: 'bool') -> None: ...
    def is_uv_clipping(self) -> 'bool': ...
    def get_occlusion_layers_count(self) -> 'int': ...
    def add_occlusion_layer(self, to_position: 'int' = -1) -> None: ...
    def move_occlusion_layer(self, layer_index: 'int', to_position: 'int') -> None: ...
    def remove_occlusion_layer(self, layer_index: 'int') -> None: ...
    def set_occlusion_layer_light_mask(self, layer_index: 'int', light_mask: 'int') -> None: ...
    def get_occlusion_layer_light_mask(self, layer_index: 'int') -> 'int': ...
    def set_occlusion_layer_sdf_collision(self, layer_index: 'int', sdf_collision: 'bool') -> None: ...
    def get_occlusion_layer_sdf_collision(self, layer_index: 'int') -> 'bool': ...
    def get_physics_layers_count(self) -> 'int': ...
    def add_physics_layer(self, to_position: 'int' = -1) -> None: ...
    def move_physics_layer(self, layer_index: 'int', to_position: 'int') -> None: ...
    def remove_physics_layer(self, layer_index: 'int') -> None: ...
    def set_physics_layer_collision_layer(self, layer_index: 'int', layer: 'int') -> None: ...
    def get_physics_layer_collision_layer(self, layer_index: 'int') -> 'int': ...
    def set_physics_layer_collision_mask(self, layer_index: 'int', mask: 'int') -> None: ...
    def get_physics_layer_collision_mask(self, layer_index: 'int') -> 'int': ...
    def set_physics_layer_collision_priority(self, layer_index: 'int', priority: 'float') -> None: ...
    def get_physics_layer_collision_priority(self, layer_index: 'int') -> 'float': ...
    def set_physics_layer_physics_material(self, layer_index: 'int', physics_material: 'PhysicsMaterial') -> None: ...
    def get_physics_layer_physics_material(self, layer_index: 'int') -> 'PhysicsMaterial': ...
    def get_terrain_sets_count(self) -> 'int': ...
    def add_terrain_set(self, to_position: 'int' = -1) -> None: ...
    def move_terrain_set(self, terrain_set: 'int', to_position: 'int') -> None: ...
    def remove_terrain_set(self, terrain_set: 'int') -> None: ...
    def set_terrain_set_mode(self, terrain_set: 'int', mode: 'TileSet__TerrainMode') -> None: ...
    def get_terrain_set_mode(self, terrain_set: 'int') -> 'TileSet__TerrainMode': ...
    def get_terrains_count(self, terrain_set: 'int') -> 'int': ...
    def add_terrain(self, terrain_set: 'int', to_position: 'int' = -1) -> None: ...
    def move_terrain(self, terrain_set: 'int', terrain_index: 'int', to_position: 'int') -> None: ...
    def remove_terrain(self, terrain_set: 'int', terrain_index: 'int') -> None: ...
    def set_terrain_name(self, terrain_set: 'int', terrain_index: 'int', name: 'str') -> None: ...
    def get_terrain_name(self, terrain_set: 'int', terrain_index: 'int') -> 'str': ...
    def set_terrain_color(self, terrain_set: 'int', terrain_index: 'int', color: 'Color') -> None: ...
    def get_terrain_color(self, terrain_set: 'int', terrain_index: 'int') -> 'Color': ...
    def get_navigation_layers_count(self) -> 'int': ...
    def add_navigation_layer(self, to_position: 'int' = -1) -> None: ...
    def move_navigation_layer(self, layer_index: 'int', to_position: 'int') -> None: ...
    def remove_navigation_layer(self, layer_index: 'int') -> None: ...
    def set_navigation_layer_layers(self, layer_index: 'int', layers: 'int') -> None: ...
    def get_navigation_layer_layers(self, layer_index: 'int') -> 'int': ...
    def set_navigation_layer_layer_value(self, layer_index: 'int', layer_number: 'int', value: 'bool') -> None: ...
    def get_navigation_layer_layer_value(self, layer_index: 'int', layer_number: 'int') -> 'bool': ...
    def get_custom_data_layers_count(self) -> 'int': ...
    def add_custom_data_layer(self, to_position: 'int' = -1) -> None: ...
    def move_custom_data_layer(self, layer_index: 'int', to_position: 'int') -> None: ...
    def remove_custom_data_layer(self, layer_index: 'int') -> None: ...
    def get_custom_data_layer_by_name(self, layer_name: 'str') -> 'int': ...
    def set_custom_data_layer_name(self, layer_index: 'int', layer_name: 'str') -> None: ...
    def has_custom_data_layer_by_name(self, layer_name: 'str') -> 'bool': ...
    def get_custom_data_layer_name(self, layer_index: 'int') -> 'str': ...
    def set_custom_data_layer_type(self, layer_index: 'int', layer_type: 'Variant__Type') -> None: ...
    def get_custom_data_layer_type(self, layer_index: 'int') -> 'Variant__Type': ...
    def set_source_level_tile_proxy(self, source_from: 'int', source_to: 'int') -> None: ...
    def get_source_level_tile_proxy(self, source_from: 'int') -> 'int': ...
    def has_source_level_tile_proxy(self, source_from: 'int') -> 'bool': ...
    def remove_source_level_tile_proxy(self, source_from: 'int') -> None: ...
    def set_coords_level_tile_proxy(self, p_source_from: 'int', coords_from: 'Vector2i', source_to: 'int', coords_to: 'Vector2i') -> None: ...
    def get_coords_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i') -> 'Array': ...
    def has_coords_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i') -> 'bool': ...
    def remove_coords_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i') -> None: ...
    def set_alternative_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i', alternative_from: 'int', source_to: 'int', coords_to: 'Vector2i', alternative_to: 'int') -> None: ...
    def get_alternative_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i', alternative_from: 'int') -> 'Array': ...
    def has_alternative_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i', alternative_from: 'int') -> 'bool': ...
    def remove_alternative_level_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i', alternative_from: 'int') -> None: ...
    def map_tile_proxy(self, source_from: 'int', coords_from: 'Vector2i', alternative_from: 'int') -> 'Array': ...
    def cleanup_invalid_tile_proxies(self) -> None: ...
    def clear_tile_proxies(self) -> None: ...
    def add_pattern(self, pattern: 'TileMapPattern', index: 'int' = -1) -> 'int': ...
    def get_pattern(self, index: 'int' = -1) -> 'TileMapPattern': ...
    def remove_pattern(self, index: 'int') -> None: ...
    def get_patterns_count(self) -> 'int': ...


class TileSetAtlasSource(TileSetSource):


    texture: 'Texture2D'
    margins: 'Vector2i'
    separation: 'Vector2i'
    texture_region_size: 'Vector2i'
    use_texture_padding: 'bool'
    TRANSFORM_FLIP_H: 'int' = 4096
    TRANSFORM_FLIP_V: 'int' = 8192
    TRANSFORM_TRANSPOSE: 'int' = 16384

    def set_texture(self, texture: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_margins(self, margins: 'Vector2i') -> None: ...
    def get_margins(self) -> 'Vector2i': ...
    def set_separation(self, separation: 'Vector2i') -> None: ...
    def get_separation(self) -> 'Vector2i': ...
    def set_texture_region_size(self, texture_region_size: 'Vector2i') -> None: ...
    def get_texture_region_size(self) -> 'Vector2i': ...
    def set_use_texture_padding(self, use_texture_padding: 'bool') -> None: ...
    def get_use_texture_padding(self) -> 'bool': ...
    def create_tile(self, atlas_coords: 'Vector2i', size: 'Vector2i' = default('''Vector2i(1, 1)''')) -> None: ...
    def remove_tile(self, atlas_coords: 'Vector2i') -> None: ...
    def move_tile_in_atlas(self, atlas_coords: 'Vector2i', new_atlas_coords: 'Vector2i' = default('''Vector2i(-1, -1)'''), new_size: 'Vector2i' = default('''Vector2i(-1, -1)''')) -> None: ...
    def get_tile_size_in_atlas(self, atlas_coords: 'Vector2i') -> 'Vector2i': ...
    def has_room_for_tile(self, atlas_coords: 'Vector2i', size: 'Vector2i', animation_columns: 'int', animation_separation: 'Vector2i', frames_count: 'int', ignored_tile: 'Vector2i' = default('''Vector2i(-1, -1)''')) -> 'bool': ...
    def get_tiles_to_be_removed_on_change(self, texture: 'Texture2D', margins: 'Vector2i', separation: 'Vector2i', texture_region_size: 'Vector2i') -> 'PackedVector2Array': ...
    def get_tile_at_coords(self, atlas_coords: 'Vector2i') -> 'Vector2i': ...
    def has_tiles_outside_texture(self) -> 'bool': ...
    def clear_tiles_outside_texture(self) -> None: ...
    def set_tile_animation_columns(self, atlas_coords: 'Vector2i', frame_columns: 'int') -> None: ...
    def get_tile_animation_columns(self, atlas_coords: 'Vector2i') -> 'int': ...
    def set_tile_animation_separation(self, atlas_coords: 'Vector2i', separation: 'Vector2i') -> None: ...
    def get_tile_animation_separation(self, atlas_coords: 'Vector2i') -> 'Vector2i': ...
    def set_tile_animation_speed(self, atlas_coords: 'Vector2i', speed: 'float') -> None: ...
    def get_tile_animation_speed(self, atlas_coords: 'Vector2i') -> 'float': ...
    def set_tile_animation_mode(self, atlas_coords: 'Vector2i', mode: 'TileSetAtlasSource__TileAnimationMode') -> None: ...
    def get_tile_animation_mode(self, atlas_coords: 'Vector2i') -> 'TileSetAtlasSource__TileAnimationMode': ...
    def set_tile_animation_frames_count(self, atlas_coords: 'Vector2i', frames_count: 'int') -> None: ...
    def get_tile_animation_frames_count(self, atlas_coords: 'Vector2i') -> 'int': ...
    def set_tile_animation_frame_duration(self, atlas_coords: 'Vector2i', frame_index: 'int', duration: 'float') -> None: ...
    def get_tile_animation_frame_duration(self, atlas_coords: 'Vector2i', frame_index: 'int') -> 'float': ...
    def get_tile_animation_total_duration(self, atlas_coords: 'Vector2i') -> 'float': ...
    def create_alternative_tile(self, atlas_coords: 'Vector2i', alternative_id_override: 'int' = -1) -> 'int': ...
    def remove_alternative_tile(self, atlas_coords: 'Vector2i', alternative_tile: 'int') -> None: ...
    def set_alternative_tile_id(self, atlas_coords: 'Vector2i', alternative_tile: 'int', new_id: 'int') -> None: ...
    def get_next_alternative_tile_id(self, atlas_coords: 'Vector2i') -> 'int': ...
    def get_tile_data(self, atlas_coords: 'Vector2i', alternative_tile: 'int') -> 'TileData': ...
    def get_atlas_grid_size(self) -> 'Vector2i': ...
    def get_tile_texture_region(self, atlas_coords: 'Vector2i', frame: 'int' = 0) -> 'Rect2i': ...
    def get_runtime_texture(self) -> 'Texture2D': ...
    def get_runtime_tile_texture_region(self, atlas_coords: 'Vector2i', frame: 'int') -> 'Rect2i': ...


class TileSetScenesCollectionSource(TileSetSource):



    def get_scene_tiles_count(self) -> 'int': ...
    def get_scene_tile_id(self, index: 'int') -> 'int': ...
    def has_scene_tile_id(self, id: 'int') -> 'bool': ...
    def create_scene_tile(self, packed_scene: 'PackedScene', id_override: 'int' = -1) -> 'int': ...
    def set_scene_tile_id(self, id: 'int', new_id: 'int') -> None: ...
    def set_scene_tile_scene(self, id: 'int', packed_scene: 'PackedScene') -> None: ...
    def get_scene_tile_scene(self, id: 'int') -> 'PackedScene': ...
    def set_scene_tile_display_placeholder(self, id: 'int', display_placeholder: 'bool') -> None: ...
    def get_scene_tile_display_placeholder(self, id: 'int') -> 'bool': ...
    def remove_scene_tile(self, id: 'int') -> None: ...
    def get_next_scene_tile_id(self) -> 'int': ...


class TileSetSource(Resource):



    def get_tiles_count(self) -> 'int': ...
    def get_tile_id(self, index: 'int') -> 'Vector2i': ...
    def has_tile(self, atlas_coords: 'Vector2i') -> 'bool': ...
    def get_alternative_tiles_count(self, atlas_coords: 'Vector2i') -> 'int': ...
    def get_alternative_tile_id(self, atlas_coords: 'Vector2i', index: 'int') -> 'int': ...
    def has_alternative_tile(self, atlas_coords: 'Vector2i', alternative_tile: 'int') -> 'bool': ...


class Time(Object):



    def get_datetime_dict_from_unix_time(self, unix_time_val: 'int') -> 'Dictionary': ...
    def get_date_dict_from_unix_time(self, unix_time_val: 'int') -> 'Dictionary': ...
    def get_time_dict_from_unix_time(self, unix_time_val: 'int') -> 'Dictionary': ...
    def get_datetime_string_from_unix_time(self, unix_time_val: 'int', use_space: 'bool' = False) -> 'str': ...
    def get_date_string_from_unix_time(self, unix_time_val: 'int') -> 'str': ...
    def get_time_string_from_unix_time(self, unix_time_val: 'int') -> 'str': ...
    def get_datetime_dict_from_datetime_string(self, datetime: 'str', weekday: 'bool') -> 'Dictionary': ...
    def get_datetime_string_from_datetime_dict(self, datetime: 'Dictionary', use_space: 'bool') -> 'str': ...
    def get_unix_time_from_datetime_dict(self, datetime: 'Dictionary') -> 'int': ...
    def get_unix_time_from_datetime_string(self, datetime: 'str') -> 'int': ...
    def get_offset_string_from_offset_minutes(self, offset_minutes: 'int') -> 'str': ...
    def get_datetime_dict_from_system(self, utc: 'bool' = False) -> 'Dictionary': ...
    def get_date_dict_from_system(self, utc: 'bool' = False) -> 'Dictionary': ...
    def get_time_dict_from_system(self, utc: 'bool' = False) -> 'Dictionary': ...
    def get_datetime_string_from_system(self, utc: 'bool' = False, use_space: 'bool' = False) -> 'str': ...
    def get_date_string_from_system(self, utc: 'bool' = False) -> 'str': ...
    def get_time_string_from_system(self, utc: 'bool' = False) -> 'str': ...
    def get_time_zone_from_system(self) -> 'Dictionary': ...
    def get_unix_time_from_system(self) -> 'float': ...
    def get_ticks_msec(self) -> 'int': ...
    def get_ticks_usec(self) -> 'int': ...


class Timer(Node):


    process_callback: 'int'
    wait_time: 'float'
    one_shot: 'bool'
    autostart: 'bool'
    paused: 'bool'
    ignore_time_scale: 'bool'
    time_left: 'float'
    timeout: 'Signal[Callable[[], None]]'  # timeout()

    def set_wait_time(self, time_sec: 'float') -> None: ...
    def get_wait_time(self) -> 'float': ...
    def set_one_shot(self, enable: 'bool') -> None: ...
    def is_one_shot(self) -> 'bool': ...
    def set_autostart(self, enable: 'bool') -> None: ...
    def has_autostart(self) -> 'bool': ...
    def start(self, time_sec: 'float' = -1) -> None: ...
    def stop(self) -> None: ...
    def set_paused(self, paused: 'bool') -> None: ...
    def is_paused(self) -> 'bool': ...
    def set_ignore_time_scale(self, ignore: 'bool') -> None: ...
    def is_ignoring_time_scale(self) -> 'bool': ...
    def is_stopped(self) -> 'bool': ...
    def get_time_left(self) -> 'float': ...
    def set_timer_process_callback(self, callback: 'Timer__TimerProcessCallback') -> None: ...
    def get_timer_process_callback(self) -> 'Timer__TimerProcessCallback': ...


class TorusMesh(PrimitiveMesh):


    inner_radius: 'float'
    outer_radius: 'float'
    rings: 'int'
    ring_segments: 'int'

    def set_inner_radius(self, radius: 'float') -> None: ...
    def get_inner_radius(self) -> 'float': ...
    def set_outer_radius(self, radius: 'float') -> None: ...
    def get_outer_radius(self) -> 'float': ...
    def set_rings(self, rings: 'int') -> None: ...
    def get_rings(self) -> 'int': ...
    def set_ring_segments(self, rings: 'int') -> None: ...
    def get_ring_segments(self) -> 'int': ...


class TouchScreenButton(Node2D):


    texture_normal: 'Texture2D'
    texture_pressed: 'Texture2D'
    bitmask: 'BitMap'
    shape: 'Shape2D'
    shape_centered: 'bool'
    shape_visible: 'bool'
    passby_press: 'bool'
    action: 'StringName'
    visibility_mode: 'int'
    pressed: 'Signal[Callable[[], None]]'  # pressed()
    released: 'Signal[Callable[[], None]]'  # released()

    def set_texture_normal(self, texture: 'Texture2D') -> None: ...
    def get_texture_normal(self) -> 'Texture2D': ...
    def set_texture_pressed(self, texture: 'Texture2D') -> None: ...
    def get_texture_pressed(self) -> 'Texture2D': ...
    def set_bitmask(self, bitmask: 'BitMap') -> None: ...
    def get_bitmask(self) -> 'BitMap': ...
    def set_shape(self, shape: 'Shape2D') -> None: ...
    def get_shape(self) -> 'Shape2D': ...
    def set_shape_centered(self, bool: 'bool') -> None: ...
    def is_shape_centered(self) -> 'bool': ...
    def set_shape_visible(self, bool: 'bool') -> None: ...
    def is_shape_visible(self) -> 'bool': ...
    def set_action(self, action: 'str') -> None: ...
    def get_action(self) -> 'str': ...
    def set_visibility_mode(self, mode: 'TouchScreenButton__VisibilityMode') -> None: ...
    def get_visibility_mode(self) -> 'TouchScreenButton__VisibilityMode': ...
    def set_passby_press(self, enabled: 'bool') -> None: ...
    def is_passby_press_enabled(self) -> 'bool': ...
    def is_pressed(self) -> 'bool': ...


class Translation(Resource):


    messages: 'Dictionary'
    locale: 'str'

    def _get_plural_message(self, src_message: 'StringName', src_plural_message: 'StringName', n: 'int', context: 'StringName') -> 'StringName': ...
    def _get_message(self, src_message: 'StringName', context: 'StringName') -> 'StringName': ...
    def set_locale(self, locale: 'str') -> None: ...
    def get_locale(self) -> 'str': ...
    def add_message(self, src_message: 'StringName', xlated_message: 'StringName', context: 'StringName' = default('''&""''')) -> None: ...
    def add_plural_message(self, src_message: 'StringName', xlated_messages: 'PackedStringArray', context: 'StringName' = default('''&""''')) -> None: ...
    def get_message(self, src_message: 'StringName', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def get_plural_message(self, src_message: 'StringName', src_plural_message: 'StringName', n: 'int', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def erase_message(self, src_message: 'StringName', context: 'StringName' = default('''&""''')) -> None: ...
    def get_message_list(self) -> 'PackedStringArray': ...
    def get_translated_message_list(self) -> 'PackedStringArray': ...
    def get_message_count(self) -> 'int': ...


class TranslationDomain(RefCounted):


    pseudolocalization_enabled: 'bool'
    pseudolocalization_accents_enabled: 'bool'
    pseudolocalization_double_vowels_enabled: 'bool'
    pseudolocalization_fake_bidi_enabled: 'bool'
    pseudolocalization_override_enabled: 'bool'
    pseudolocalization_skip_placeholders_enabled: 'bool'
    pseudolocalization_expansion_ratio: 'float'
    pseudolocalization_prefix: 'str'
    pseudolocalization_suffix: 'str'

    def get_translation_object(self, locale: 'str') -> 'Translation': ...
    def add_translation(self, translation: 'Translation') -> None: ...
    def remove_translation(self, translation: 'Translation') -> None: ...
    def clear(self) -> None: ...
    def translate(self, message: 'StringName', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def translate_plural(self, message: 'StringName', message_plural: 'StringName', n: 'int', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def is_pseudolocalization_enabled(self) -> 'bool': ...
    def set_pseudolocalization_enabled(self, enabled: 'bool') -> None: ...
    def is_pseudolocalization_accents_enabled(self) -> 'bool': ...
    def set_pseudolocalization_accents_enabled(self, enabled: 'bool') -> None: ...
    def is_pseudolocalization_double_vowels_enabled(self) -> 'bool': ...
    def set_pseudolocalization_double_vowels_enabled(self, enabled: 'bool') -> None: ...
    def is_pseudolocalization_fake_bidi_enabled(self) -> 'bool': ...
    def set_pseudolocalization_fake_bidi_enabled(self, enabled: 'bool') -> None: ...
    def is_pseudolocalization_override_enabled(self) -> 'bool': ...
    def set_pseudolocalization_override_enabled(self, enabled: 'bool') -> None: ...
    def is_pseudolocalization_skip_placeholders_enabled(self) -> 'bool': ...
    def set_pseudolocalization_skip_placeholders_enabled(self, enabled: 'bool') -> None: ...
    def get_pseudolocalization_expansion_ratio(self) -> 'float': ...
    def set_pseudolocalization_expansion_ratio(self, ratio: 'float') -> None: ...
    def get_pseudolocalization_prefix(self) -> 'str': ...
    def set_pseudolocalization_prefix(self, prefix: 'str') -> None: ...
    def get_pseudolocalization_suffix(self) -> 'str': ...
    def set_pseudolocalization_suffix(self, suffix: 'str') -> None: ...
    def pseudolocalize(self, message: 'StringName') -> 'StringName': ...


class TranslationServer(Object):


    pseudolocalization_enabled: 'bool'

    def set_locale(self, locale: 'str') -> None: ...
    def get_locale(self) -> 'str': ...
    def get_tool_locale(self) -> 'str': ...
    def compare_locales(self, locale_a: 'str', locale_b: 'str') -> 'int': ...
    def standardize_locale(self, locale: 'str', add_defaults: 'bool' = False) -> 'str': ...
    def get_all_languages(self) -> 'PackedStringArray': ...
    def get_language_name(self, language: 'str') -> 'str': ...
    def get_all_scripts(self) -> 'PackedStringArray': ...
    def get_script_name(self, script: 'str') -> 'str': ...
    def get_all_countries(self) -> 'PackedStringArray': ...
    def get_country_name(self, country: 'str') -> 'str': ...
    def get_locale_name(self, locale: 'str') -> 'str': ...
    def translate(self, message: 'StringName', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def translate_plural(self, message: 'StringName', plural_message: 'StringName', n: 'int', context: 'StringName' = default('''&""''')) -> 'StringName': ...
    def add_translation(self, translation: 'Translation') -> None: ...
    def remove_translation(self, translation: 'Translation') -> None: ...
    def get_translation_object(self, locale: 'str') -> 'Translation': ...
    def has_domain(self, domain: 'StringName') -> 'bool': ...
    def get_or_add_domain(self, domain: 'StringName') -> 'TranslationDomain': ...
    def remove_domain(self, domain: 'StringName') -> None: ...
    def clear(self) -> None: ...
    def get_loaded_locales(self) -> 'PackedStringArray': ...
    def is_pseudolocalization_enabled(self) -> 'bool': ...
    def set_pseudolocalization_enabled(self, enabled: 'bool') -> None: ...
    def reload_pseudolocalization(self) -> None: ...
    def pseudolocalize(self, message: 'StringName') -> 'StringName': ...


class Tree(Control):


    columns: 'int'
    column_titles_visible: 'bool'
    allow_reselect: 'bool'
    allow_rmb_select: 'bool'
    allow_search: 'bool'
    hide_folding: 'bool'
    enable_recursive_folding: 'bool'
    hide_root: 'bool'
    drop_mode_flags: 'int'
    select_mode: 'int'
    scroll_horizontal_enabled: 'bool'
    scroll_vertical_enabled: 'bool'
    auto_tooltip: 'bool'
    item_selected: 'Signal[Callable[[], None]]'  # item_selected()
    cell_selected: 'Signal[Callable[[], None]]'  # cell_selected()
    multi_selected: 'Signal[Callable[[TreeItem, int, bool], None]]'  # multi_selected(item: TreeItem, column: int, selected: bool)
    item_mouse_selected: 'Signal[Callable[[Vector2, int], None]]'  # item_mouse_selected(mouse_position: Vector2, mouse_button_index: int)
    empty_clicked: 'Signal[Callable[[Vector2, int], None]]'  # empty_clicked(click_position: Vector2, mouse_button_index: int)
    item_edited: 'Signal[Callable[[], None]]'  # item_edited()
    custom_item_clicked: 'Signal[Callable[[int], None]]'  # custom_item_clicked(mouse_button_index: int)
    item_icon_double_clicked: 'Signal[Callable[[], None]]'  # item_icon_double_clicked()
    item_collapsed: 'Signal[Callable[[TreeItem], None]]'  # item_collapsed(item: TreeItem)
    check_propagated_to_item: 'Signal[Callable[[TreeItem, int], None]]'  # check_propagated_to_item(item: TreeItem, column: int)
    button_clicked: 'Signal[Callable[[TreeItem, int, int, int], None]]'  # button_clicked(item: TreeItem, column: int, id: int, mouse_button_index: int)
    custom_popup_edited: 'Signal[Callable[[bool], None]]'  # custom_popup_edited(arrow_clicked: bool)
    item_activated: 'Signal[Callable[[], None]]'  # item_activated()
    column_title_clicked: 'Signal[Callable[[int, int], None]]'  # column_title_clicked(column: int, mouse_button_index: int)
    nothing_selected: 'Signal[Callable[[], None]]'  # nothing_selected()

    def clear(self) -> None: ...
    def create_item(self, parent: 'TreeItem' = default('''null'''), index: 'int' = -1) -> 'TreeItem': ...
    def get_root(self) -> 'TreeItem': ...
    def set_column_custom_minimum_width(self, column: 'int', min_width: 'int') -> None: ...
    def set_column_expand(self, column: 'int', expand: 'bool') -> None: ...
    def set_column_expand_ratio(self, column: 'int', ratio: 'int') -> None: ...
    def set_column_clip_content(self, column: 'int', enable: 'bool') -> None: ...
    def is_column_expanding(self, column: 'int') -> 'bool': ...
    def is_column_clipping_content(self, column: 'int') -> 'bool': ...
    def get_column_expand_ratio(self, column: 'int') -> 'int': ...
    def get_column_width(self, column: 'int') -> 'int': ...
    def set_hide_root(self, enable: 'bool') -> None: ...
    def is_root_hidden(self) -> 'bool': ...
    def get_next_selected(self, from_: 'TreeItem') -> 'TreeItem': ...
    def get_selected(self) -> 'TreeItem': ...
    def set_selected(self, item: 'TreeItem', column: 'int') -> None: ...
    def get_selected_column(self) -> 'int': ...
    def get_pressed_button(self) -> 'int': ...
    def set_select_mode(self, mode: 'Tree__SelectMode') -> None: ...
    def get_select_mode(self) -> 'Tree__SelectMode': ...
    def deselect_all(self) -> None: ...
    def set_columns(self, amount: 'int') -> None: ...
    def get_columns(self) -> 'int': ...
    def get_edited(self) -> 'TreeItem': ...
    def get_edited_column(self) -> 'int': ...
    def edit_selected(self, force_edit: 'bool' = False) -> 'bool': ...
    def get_custom_popup_rect(self) -> 'Rect2': ...
    def get_item_area_rect(self, item: 'TreeItem', column: 'int' = -1, button_index: 'int' = -1) -> 'Rect2': ...
    def get_item_at_position(self, position: 'Vector2') -> 'TreeItem': ...
    def get_column_at_position(self, position: 'Vector2') -> 'int': ...
    def get_drop_section_at_position(self, position: 'Vector2') -> 'int': ...
    def get_button_id_at_position(self, position: 'Vector2') -> 'int': ...
    def ensure_cursor_is_visible(self) -> None: ...
    def set_column_titles_visible(self, visible: 'bool') -> None: ...
    def are_column_titles_visible(self) -> 'bool': ...
    def set_column_title(self, column: 'int', title: 'str') -> None: ...
    def get_column_title(self, column: 'int') -> 'str': ...
    def set_column_title_alignment(self, column: 'int', title_alignment: 'HorizontalAlignment') -> None: ...
    def get_column_title_alignment(self, column: 'int') -> 'HorizontalAlignment': ...
    def set_column_title_direction(self, column: 'int', direction: 'Control__TextDirection') -> None: ...
    def get_column_title_direction(self, column: 'int') -> 'Control__TextDirection': ...
    def set_column_title_language(self, column: 'int', language: 'str') -> None: ...
    def get_column_title_language(self, column: 'int') -> 'str': ...
    def get_scroll(self) -> 'Vector2': ...
    def scroll_to_item(self, item: 'TreeItem', center_on_item: 'bool' = False) -> None: ...
    def set_h_scroll_enabled(self, h_scroll: 'bool') -> None: ...
    def is_h_scroll_enabled(self) -> 'bool': ...
    def set_v_scroll_enabled(self, h_scroll: 'bool') -> None: ...
    def is_v_scroll_enabled(self) -> 'bool': ...
    def set_hide_folding(self, hide: 'bool') -> None: ...
    def is_folding_hidden(self) -> 'bool': ...
    def set_enable_recursive_folding(self, enable: 'bool') -> None: ...
    def is_recursive_folding_enabled(self) -> 'bool': ...
    def set_drop_mode_flags(self, flags: 'int') -> None: ...
    def get_drop_mode_flags(self) -> 'int': ...
    def set_allow_rmb_select(self, allow: 'bool') -> None: ...
    def get_allow_rmb_select(self) -> 'bool': ...
    def set_allow_reselect(self, allow: 'bool') -> None: ...
    def get_allow_reselect(self) -> 'bool': ...
    def set_allow_search(self, allow: 'bool') -> None: ...
    def get_allow_search(self) -> 'bool': ...
    def set_auto_tooltip(self, enable: 'bool') -> None: ...
    def is_auto_tooltip_enabled(self) -> 'bool': ...


class TreeItem(Object):


    collapsed: 'bool'
    visible: 'bool'
    disable_folding: 'bool'
    custom_minimum_height: 'int'

    def set_cell_mode(self, column: 'int', mode: 'TreeItem__TreeCellMode') -> None: ...
    def get_cell_mode(self, column: 'int') -> 'TreeItem__TreeCellMode': ...
    def set_auto_translate_mode(self, column: 'int', mode: 'Node__AutoTranslateMode') -> None: ...
    def get_auto_translate_mode(self, column: 'int') -> 'Node__AutoTranslateMode': ...
    def set_edit_multiline(self, column: 'int', multiline: 'bool') -> None: ...
    def is_edit_multiline(self, column: 'int') -> 'bool': ...
    def set_checked(self, column: 'int', checked: 'bool') -> None: ...
    def set_indeterminate(self, column: 'int', indeterminate: 'bool') -> None: ...
    def is_checked(self, column: 'int') -> 'bool': ...
    def is_indeterminate(self, column: 'int') -> 'bool': ...
    def propagate_check(self, column: 'int', emit_signal: 'bool' = True) -> None: ...
    def set_text(self, column: 'int', text: 'str') -> None: ...
    def get_text(self, column: 'int') -> 'str': ...
    def set_text_direction(self, column: 'int', direction: 'Control__TextDirection') -> None: ...
    def get_text_direction(self, column: 'int') -> 'Control__TextDirection': ...
    def set_autowrap_mode(self, column: 'int', autowrap_mode: 'TextServer__AutowrapMode') -> None: ...
    def get_autowrap_mode(self, column: 'int') -> 'TextServer__AutowrapMode': ...
    def set_text_overrun_behavior(self, column: 'int', overrun_behavior: 'TextServer__OverrunBehavior') -> None: ...
    def get_text_overrun_behavior(self, column: 'int') -> 'TextServer__OverrunBehavior': ...
    def set_structured_text_bidi_override(self, column: 'int', parser: 'TextServer__StructuredTextParser') -> None: ...
    def get_structured_text_bidi_override(self, column: 'int') -> 'TextServer__StructuredTextParser': ...
    def set_structured_text_bidi_override_options(self, column: 'int', args: 'Array') -> None: ...
    def get_structured_text_bidi_override_options(self, column: 'int') -> 'Array': ...
    def set_language(self, column: 'int', language: 'str') -> None: ...
    def get_language(self, column: 'int') -> 'str': ...
    def set_suffix(self, column: 'int', text: 'str') -> None: ...
    def get_suffix(self, column: 'int') -> 'str': ...
    def set_icon(self, column: 'int', texture: 'Texture2D') -> None: ...
    def get_icon(self, column: 'int') -> 'Texture2D': ...
    def set_icon_overlay(self, column: 'int', texture: 'Texture2D') -> None: ...
    def get_icon_overlay(self, column: 'int') -> 'Texture2D': ...
    def set_icon_region(self, column: 'int', region: 'Rect2') -> None: ...
    def get_icon_region(self, column: 'int') -> 'Rect2': ...
    def set_icon_max_width(self, column: 'int', width: 'int') -> None: ...
    def get_icon_max_width(self, column: 'int') -> 'int': ...
    def set_icon_modulate(self, column: 'int', modulate: 'Color') -> None: ...
    def get_icon_modulate(self, column: 'int') -> 'Color': ...
    def set_range(self, column: 'int', value: 'float') -> None: ...
    def get_range(self, column: 'int') -> 'float': ...
    def set_range_config(self, column: 'int', min: 'float', max: 'float', step: 'float', expr: 'bool' = False) -> None: ...
    def get_range_config(self, column: 'int') -> 'Dictionary': ...
    def set_metadata(self, column: 'int', meta: 'Variant') -> None: ...
    def get_metadata(self, column: 'int') -> 'Variant': ...
    def set_custom_draw(self, column: 'int', object: 'Object', callback: 'StringName') -> None: ...
    def set_custom_draw_callback(self, column: 'int', callback: 'Callable') -> None: ...
    def get_custom_draw_callback(self, column: 'int') -> 'Callable': ...
    def set_collapsed(self, enable: 'bool') -> None: ...
    def is_collapsed(self) -> 'bool': ...
    def set_collapsed_recursive(self, enable: 'bool') -> None: ...
    def is_any_collapsed(self, only_visible: 'bool' = False) -> 'bool': ...
    def set_visible(self, enable: 'bool') -> None: ...
    def is_visible(self) -> 'bool': ...
    def is_visible_in_tree(self) -> 'bool': ...
    def uncollapse_tree(self) -> None: ...
    def set_custom_minimum_height(self, height: 'int') -> None: ...
    def get_custom_minimum_height(self) -> 'int': ...
    def set_selectable(self, column: 'int', selectable: 'bool') -> None: ...
    def is_selectable(self, column: 'int') -> 'bool': ...
    def is_selected(self, column: 'int') -> 'bool': ...
    def select(self, column: 'int') -> None: ...
    def deselect(self, column: 'int') -> None: ...
    def set_editable(self, column: 'int', enabled: 'bool') -> None: ...
    def is_editable(self, column: 'int') -> 'bool': ...
    def set_custom_color(self, column: 'int', color: 'Color') -> None: ...
    def get_custom_color(self, column: 'int') -> 'Color': ...
    def clear_custom_color(self, column: 'int') -> None: ...
    def set_custom_font(self, column: 'int', font: 'Font') -> None: ...
    def get_custom_font(self, column: 'int') -> 'Font': ...
    def set_custom_font_size(self, column: 'int', font_size: 'int') -> None: ...
    def get_custom_font_size(self, column: 'int') -> 'int': ...
    def set_custom_bg_color(self, column: 'int', color: 'Color', just_outline: 'bool' = False) -> None: ...
    def clear_custom_bg_color(self, column: 'int') -> None: ...
    def get_custom_bg_color(self, column: 'int') -> 'Color': ...
    def set_custom_as_button(self, column: 'int', enable: 'bool') -> None: ...
    def is_custom_set_as_button(self, column: 'int') -> 'bool': ...
    def clear_buttons(self) -> None: ...
    def add_button(self, column: 'int', button: 'Texture2D', id: 'int' = -1, disabled: 'bool' = False, tooltip_text: 'str' = "") -> None: ...
    def get_button_count(self, column: 'int') -> 'int': ...
    def get_button_tooltip_text(self, column: 'int', button_index: 'int') -> 'str': ...
    def get_button_id(self, column: 'int', button_index: 'int') -> 'int': ...
    def get_button_by_id(self, column: 'int', id: 'int') -> 'int': ...
    def get_button_color(self, column: 'int', id: 'int') -> 'Color': ...
    def get_button(self, column: 'int', button_index: 'int') -> 'Texture2D': ...
    def set_button_tooltip_text(self, column: 'int', button_index: 'int', tooltip: 'str') -> None: ...
    def set_button(self, column: 'int', button_index: 'int', button: 'Texture2D') -> None: ...
    def erase_button(self, column: 'int', button_index: 'int') -> None: ...
    def set_button_disabled(self, column: 'int', button_index: 'int', disabled: 'bool') -> None: ...
    def set_button_color(self, column: 'int', button_index: 'int', color: 'Color') -> None: ...
    def is_button_disabled(self, column: 'int', button_index: 'int') -> 'bool': ...
    def set_tooltip_text(self, column: 'int', tooltip: 'str') -> None: ...
    def get_tooltip_text(self, column: 'int') -> 'str': ...
    def set_text_alignment(self, column: 'int', text_alignment: 'HorizontalAlignment') -> None: ...
    def get_text_alignment(self, column: 'int') -> 'HorizontalAlignment': ...
    def set_expand_right(self, column: 'int', enable: 'bool') -> None: ...
    def get_expand_right(self, column: 'int') -> 'bool': ...
    def set_disable_folding(self, disable: 'bool') -> None: ...
    def is_folding_disabled(self) -> 'bool': ...
    def create_child(self, index: 'int' = -1) -> 'TreeItem': ...
    def add_child(self, child: 'TreeItem') -> None: ...
    def remove_child(self, child: 'TreeItem') -> None: ...
    def get_tree(self) -> 'Tree': ...
    def get_next(self) -> 'TreeItem': ...
    def get_prev(self) -> 'TreeItem': ...
    def get_parent(self) -> 'TreeItem': ...
    def get_first_child(self) -> 'TreeItem': ...
    def get_next_in_tree(self, wrap: 'bool' = False) -> 'TreeItem': ...
    def get_prev_in_tree(self, wrap: 'bool' = False) -> 'TreeItem': ...
    def get_next_visible(self, wrap: 'bool' = False) -> 'TreeItem': ...
    def get_prev_visible(self, wrap: 'bool' = False) -> 'TreeItem': ...
    def get_child(self, index: 'int') -> 'TreeItem': ...
    def get_child_count(self) -> 'int': ...
    def get_children(self) -> 'Array'['TreeItem']: ...
    def get_index(self) -> 'int': ...
    def move_before(self, item: 'TreeItem') -> None: ...
    def move_after(self, item: 'TreeItem') -> None: ...
    def call_recursive(self, method: 'StringName') -> None: ...


class TriangleMesh(RefCounted): ...


class TubeTrailMesh(PrimitiveMesh):


    radius: 'float'
    radial_steps: 'int'
    sections: 'int'
    section_length: 'float'
    section_rings: 'int'
    cap_top: 'bool'
    cap_bottom: 'bool'
    curve: 'Curve'

    def set_radius(self, radius: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_radial_steps(self, radial_steps: 'int') -> None: ...
    def get_radial_steps(self) -> 'int': ...
    def set_sections(self, sections: 'int') -> None: ...
    def get_sections(self) -> 'int': ...
    def set_section_length(self, section_length: 'float') -> None: ...
    def get_section_length(self) -> 'float': ...
    def set_section_rings(self, section_rings: 'int') -> None: ...
    def get_section_rings(self) -> 'int': ...
    def set_cap_top(self, cap_top: 'bool') -> None: ...
    def is_cap_top(self) -> 'bool': ...
    def set_cap_bottom(self, cap_bottom: 'bool') -> None: ...
    def is_cap_bottom(self) -> 'bool': ...
    def set_curve(self, curve: 'Curve') -> None: ...
    def get_curve(self) -> 'Curve': ...


class Tween(RefCounted):


    step_finished: 'Signal[Callable[[int], None]]'  # step_finished(idx: int)
    loop_finished: 'Signal[Callable[[int], None]]'  # loop_finished(loop_count: int)
    finished: 'Signal[Callable[[], None]]'  # finished()

    def tween_property(self, object: 'Object', property: 'NodePath', final_val: 'Variant', duration: 'float') -> 'PropertyTweener': ...
    def tween_interval(self, time: 'float') -> 'IntervalTweener': ...
    def tween_callback(self, callback: 'Callable') -> 'CallbackTweener': ...
    def tween_method(self, method: 'Callable', from_: 'Variant', to: 'Variant', duration: 'float') -> 'MethodTweener': ...
    def tween_subtween(self, subtween: 'Tween') -> 'SubtweenTweener': ...
    def custom_step(self, delta: 'float') -> 'bool': ...
    def stop(self) -> None: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def kill(self) -> None: ...
    def get_total_elapsed_time(self) -> 'float': ...
    def is_running(self) -> 'bool': ...
    def is_valid(self) -> 'bool': ...
    def bind_node(self, node: 'Node') -> 'Tween': ...
    def set_process_mode(self, mode: 'Tween__TweenProcessMode') -> 'Tween': ...
    def set_pause_mode(self, mode: 'Tween__TweenPauseMode') -> 'Tween': ...
    def set_ignore_time_scale(self, ignore: 'bool' = True) -> 'Tween': ...
    def set_parallel(self, parallel: 'bool' = True) -> 'Tween': ...
    def set_loops(self, loops: 'int' = 0) -> 'Tween': ...
    def get_loops_left(self) -> 'int': ...
    def set_speed_scale(self, speed: 'float') -> 'Tween': ...
    def set_trans(self, trans: 'Tween__TransitionType') -> 'Tween': ...
    def set_ease(self, ease: 'Tween__EaseType') -> 'Tween': ...
    def parallel(self) -> 'Tween': ...
    def chain(self) -> 'Tween': ...
    @staticmethod
    def interpolate_value(initial_value: 'Variant', delta_value: 'Variant', elapsed_time: 'float', duration: 'float', trans_type: 'Tween__TransitionType', ease_type: 'Tween__EaseType') -> 'Variant': ...


class Tweener(RefCounted):


    finished: 'Signal[Callable[[], None]]'  # finished()



class UDPServer(RefCounted):


    max_pending_connections: 'int'

    def listen(self, port: 'int', bind_address: 'str' = "*") -> 'Error': ...
    def poll(self) -> 'Error': ...
    def is_connection_available(self) -> 'bool': ...
    def get_local_port(self) -> 'int': ...
    def is_listening(self) -> 'bool': ...
    def take_connection(self) -> 'PacketPeerUDP': ...
    def stop(self) -> None: ...
    def set_max_pending_connections(self, max_pending_connections: 'int') -> None: ...
    def get_max_pending_connections(self) -> 'int': ...


class UPNP(RefCounted):


    discover_multicast_if: 'str'
    discover_local_port: 'int'
    discover_ipv6: 'bool'

    def get_device_count(self) -> 'int': ...
    def get_device(self, index: 'int') -> 'UPNPDevice': ...
    def add_device(self, device: 'UPNPDevice') -> None: ...
    def set_device(self, index: 'int', device: 'UPNPDevice') -> None: ...
    def remove_device(self, index: 'int') -> None: ...
    def clear_devices(self) -> None: ...
    def get_gateway(self) -> 'UPNPDevice': ...
    def discover(self, timeout: 'int' = 2000, ttl: 'int' = 2, device_filter: 'str' = "InternetGatewayDevice") -> 'int': ...
    def query_external_address(self) -> 'str': ...
    def add_port_mapping(self, port: 'int', port_internal: 'int' = 0, desc: 'str' = "", proto: 'str' = "UDP", duration: 'int' = 0) -> 'int': ...
    def delete_port_mapping(self, port: 'int', proto: 'str' = "UDP") -> 'int': ...
    def set_discover_multicast_if(self, m_if: 'str') -> None: ...
    def get_discover_multicast_if(self) -> 'str': ...
    def set_discover_local_port(self, port: 'int') -> None: ...
    def get_discover_local_port(self) -> 'int': ...
    def set_discover_ipv6(self, ipv6: 'bool') -> None: ...
    def is_discover_ipv6(self) -> 'bool': ...


class UPNPDevice(RefCounted):


    description_url: 'str'
    service_type: 'str'
    igd_control_url: 'str'
    igd_service_type: 'str'
    igd_our_addr: 'str'
    igd_status: 'int'

    def is_valid_gateway(self) -> 'bool': ...
    def query_external_address(self) -> 'str': ...
    def add_port_mapping(self, port: 'int', port_internal: 'int' = 0, desc: 'str' = "", proto: 'str' = "UDP", duration: 'int' = 0) -> 'int': ...
    def delete_port_mapping(self, port: 'int', proto: 'str' = "UDP") -> 'int': ...
    def set_description_url(self, url: 'str') -> None: ...
    def get_description_url(self) -> 'str': ...
    def set_service_type(self, type: 'str') -> None: ...
    def get_service_type(self) -> 'str': ...
    def set_igd_control_url(self, url: 'str') -> None: ...
    def get_igd_control_url(self) -> 'str': ...
    def set_igd_service_type(self, type: 'str') -> None: ...
    def get_igd_service_type(self) -> 'str': ...
    def set_igd_our_addr(self, addr: 'str') -> None: ...
    def get_igd_our_addr(self) -> 'str': ...
    def set_igd_status(self, status: 'UPNPDevice__IGDStatus') -> None: ...
    def get_igd_status(self) -> 'UPNPDevice__IGDStatus': ...


class UndoRedo(Object):


    max_steps: 'int'
    version_changed: 'Signal[Callable[[], None]]'  # version_changed()

    def create_action(self, name: 'str', merge_mode: 'UndoRedo__MergeMode' = 0, backward_undo_ops: 'bool' = False) -> None: ...
    def commit_action(self, execute: 'bool' = True) -> None: ...
    def is_committing_action(self) -> 'bool': ...
    def add_do_method(self, callable: 'Callable') -> None: ...
    def add_undo_method(self, callable: 'Callable') -> None: ...
    def add_do_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_undo_property(self, object: 'Object', property: 'StringName', value: 'Variant') -> None: ...
    def add_do_reference(self, object: 'Object') -> None: ...
    def add_undo_reference(self, object: 'Object') -> None: ...
    def start_force_keep_in_merge_ends(self) -> None: ...
    def end_force_keep_in_merge_ends(self) -> None: ...
    def get_history_count(self) -> 'int': ...
    def get_current_action(self) -> 'int': ...
    def get_action_name(self, id: 'int') -> 'str': ...
    def clear_history(self, increase_version: 'bool' = True) -> None: ...
    def get_current_action_name(self) -> 'str': ...
    def has_undo(self) -> 'bool': ...
    def has_redo(self) -> 'bool': ...
    def get_version(self) -> 'int': ...
    def set_max_steps(self, max_steps: 'int') -> None: ...
    def get_max_steps(self) -> 'int': ...
    def redo(self) -> 'bool': ...
    def undo(self) -> 'bool': ...


class UniformSetCacheRD(Object):



    @staticmethod
    def get_cache(shader: 'RID', set: 'int', uniforms: 'Array'['RDUniform']) -> 'RID': ...


class VBoxContainer(BoxContainer): ...


class VFlowContainer(FlowContainer): ...


class VScrollBar(ScrollBar): ...


class VSeparator(Separator): ...


class VSlider(Slider): ...


class VSplitContainer(SplitContainer): ...


class VehicleBody3D(RigidBody3D):


    engine_force: 'float'
    brake: 'float'
    steering: 'float'

    def set_engine_force(self, engine_force: 'float') -> None: ...
    def get_engine_force(self) -> 'float': ...
    def set_brake(self, brake: 'float') -> None: ...
    def get_brake(self) -> 'float': ...
    def set_steering(self, steering: 'float') -> None: ...
    def get_steering(self) -> 'float': ...


class VehicleWheel3D(Node3D):


    engine_force: 'float'
    brake: 'float'
    steering: 'float'
    use_as_traction: 'bool'
    use_as_steering: 'bool'
    wheel_roll_influence: 'float'
    wheel_radius: 'float'
    wheel_rest_length: 'float'
    wheel_friction_slip: 'float'
    suspension_travel: 'float'
    suspension_stiffness: 'float'
    suspension_max_force: 'float'
    damping_compression: 'float'
    damping_relaxation: 'float'

    def set_radius(self, length: 'float') -> None: ...
    def get_radius(self) -> 'float': ...
    def set_suspension_rest_length(self, length: 'float') -> None: ...
    def get_suspension_rest_length(self) -> 'float': ...
    def set_suspension_travel(self, length: 'float') -> None: ...
    def get_suspension_travel(self) -> 'float': ...
    def set_suspension_stiffness(self, length: 'float') -> None: ...
    def get_suspension_stiffness(self) -> 'float': ...
    def set_suspension_max_force(self, length: 'float') -> None: ...
    def get_suspension_max_force(self) -> 'float': ...
    def set_damping_compression(self, length: 'float') -> None: ...
    def get_damping_compression(self) -> 'float': ...
    def set_damping_relaxation(self, length: 'float') -> None: ...
    def get_damping_relaxation(self) -> 'float': ...
    def set_use_as_traction(self, enable: 'bool') -> None: ...
    def is_used_as_traction(self) -> 'bool': ...
    def set_use_as_steering(self, enable: 'bool') -> None: ...
    def is_used_as_steering(self) -> 'bool': ...
    def set_friction_slip(self, length: 'float') -> None: ...
    def get_friction_slip(self) -> 'float': ...
    def is_in_contact(self) -> 'bool': ...
    def get_contact_body(self) -> 'Node3D': ...
    def get_contact_point(self) -> 'Vector3': ...
    def get_contact_normal(self) -> 'Vector3': ...
    def set_roll_influence(self, roll_influence: 'float') -> None: ...
    def get_roll_influence(self) -> 'float': ...
    def get_skidinfo(self) -> 'float': ...
    def get_rpm(self) -> 'float': ...
    def set_engine_force(self, engine_force: 'float') -> None: ...
    def get_engine_force(self) -> 'float': ...
    def set_brake(self, brake: 'float') -> None: ...
    def get_brake(self) -> 'float': ...
    def set_steering(self, steering: 'float') -> None: ...
    def get_steering(self) -> 'float': ...


class VideoStream(Resource):


    file: 'str'

    def _instantiate_playback(self) -> 'VideoStreamPlayback': ...
    def set_file(self, file: 'str') -> None: ...
    def get_file(self) -> 'str': ...


class VideoStreamPlayback(Resource):



    def _stop(self) -> None: ...
    def _play(self) -> None: ...
    def _is_playing(self) -> 'bool': ...
    def _set_paused(self, paused: 'bool') -> None: ...
    def _is_paused(self) -> 'bool': ...
    def _get_length(self) -> 'float': ...
    def _get_playback_position(self) -> 'float': ...
    def _seek(self, time: 'float') -> None: ...
    def _set_audio_track(self, idx: 'int') -> None: ...
    def _get_texture(self) -> 'Texture2D': ...
    def _update(self, delta: 'float') -> None: ...
    def _get_channels(self) -> 'int': ...
    def _get_mix_rate(self) -> 'int': ...
    def mix_audio(self, num_frames: 'int', buffer: 'PackedFloat32Array' = default('''PackedFloat32Array()'''), offset: 'int' = 0) -> 'int': ...


class VideoStreamPlayer(Control):


    audio_track: 'int'
    stream: 'VideoStream'
    volume_db: 'float'
    volume: 'float'
    autoplay: 'bool'
    paused: 'bool'
    expand: 'bool'
    loop: 'bool'
    buffering_msec: 'int'
    stream_position: 'float'
    bus: 'StringName'
    finished: 'Signal[Callable[[], None]]'  # finished()

    def set_stream(self, stream: 'VideoStream') -> None: ...
    def get_stream(self) -> 'VideoStream': ...
    def play(self) -> None: ...
    def stop(self) -> None: ...
    def is_playing(self) -> 'bool': ...
    def set_paused(self, paused: 'bool') -> None: ...
    def is_paused(self) -> 'bool': ...
    def set_loop(self, loop: 'bool') -> None: ...
    def has_loop(self) -> 'bool': ...
    def set_volume(self, volume: 'float') -> None: ...
    def get_volume(self) -> 'float': ...
    def set_volume_db(self, db: 'float') -> None: ...
    def get_volume_db(self) -> 'float': ...
    def set_audio_track(self, track: 'int') -> None: ...
    def get_audio_track(self) -> 'int': ...
    def get_stream_name(self) -> 'str': ...
    def get_stream_length(self) -> 'float': ...
    def set_stream_position(self, position: 'float') -> None: ...
    def get_stream_position(self) -> 'float': ...
    def set_autoplay(self, enabled: 'bool') -> None: ...
    def has_autoplay(self) -> 'bool': ...
    def set_expand(self, enable: 'bool') -> None: ...
    def has_expand(self) -> 'bool': ...
    def set_buffering_msec(self, msec: 'int') -> None: ...
    def get_buffering_msec(self) -> 'int': ...
    def set_bus(self, bus: 'StringName') -> None: ...
    def get_bus(self) -> 'StringName': ...
    def get_video_texture(self) -> 'Texture2D': ...


class VideoStreamTheora(VideoStream): ...


class Viewport(Node):


    disable_3d: 'bool'
    use_xr: 'bool'
    own_world_3d: 'bool'
    world_3d: 'World3D'
    world_2d: 'World2D'
    transparent_bg: 'bool'
    handle_input_locally: 'bool'
    snap_2d_transforms_to_pixel: 'bool'
    snap_2d_vertices_to_pixel: 'bool'
    msaa_2d: 'int'
    msaa_3d: 'int'
    screen_space_aa: 'int'
    use_taa: 'bool'
    use_debanding: 'bool'
    use_occlusion_culling: 'bool'
    mesh_lod_threshold: 'float'
    debug_draw: 'int'
    use_hdr_2d: 'bool'
    scaling_3d_mode: 'int'
    scaling_3d_scale: 'float'
    texture_mipmap_bias: 'float'
    anisotropic_filtering_level: 'int'
    fsr_sharpness: 'float'
    vrs_mode: 'int'
    vrs_update_mode: 'int'
    vrs_texture: 'Texture2D'
    canvas_item_default_texture_filter: 'int'
    canvas_item_default_texture_repeat: 'int'
    audio_listener_enable_2d: 'bool'
    audio_listener_enable_3d: 'bool'
    physics_object_picking: 'bool'
    physics_object_picking_sort: 'bool'
    physics_object_picking_first_only: 'bool'
    gui_disable_input: 'bool'
    gui_snap_controls_to_pixels: 'bool'
    gui_embed_subwindows: 'bool'
    sdf_oversize: 'int'
    sdf_scale: 'int'
    positional_shadow_atlas_size: 'int'
    positional_shadow_atlas_16_bits: 'bool'
    positional_shadow_atlas_quad_0: 'int'
    positional_shadow_atlas_quad_1: 'int'
    positional_shadow_atlas_quad_2: 'int'
    positional_shadow_atlas_quad_3: 'int'
    canvas_transform: 'Transform2D'
    global_canvas_transform: 'Transform2D'
    canvas_cull_mask: 'int'
    size_changed: 'Signal[Callable[[], None]]'  # size_changed()
    gui_focus_changed: 'Signal[Callable[[Control], None]]'  # gui_focus_changed(node: Control)

    def set_world_2d(self, world_2d: 'World2D') -> None: ...
    def get_world_2d(self) -> 'World2D': ...
    def find_world_2d(self) -> 'World2D': ...
    def set_canvas_transform(self, xform: 'Transform2D') -> None: ...
    def get_canvas_transform(self) -> 'Transform2D': ...
    def set_global_canvas_transform(self, xform: 'Transform2D') -> None: ...
    def get_global_canvas_transform(self) -> 'Transform2D': ...
    def get_stretch_transform(self) -> 'Transform2D': ...
    def get_final_transform(self) -> 'Transform2D': ...
    def get_screen_transform(self) -> 'Transform2D': ...
    def get_visible_rect(self) -> 'Rect2': ...
    def set_transparent_background(self, enable: 'bool') -> None: ...
    def has_transparent_background(self) -> 'bool': ...
    def set_use_hdr_2d(self, enable: 'bool') -> None: ...
    def is_using_hdr_2d(self) -> 'bool': ...
    def set_msaa_2d(self, msaa: 'Viewport__MSAA') -> None: ...
    def get_msaa_2d(self) -> 'Viewport__MSAA': ...
    def set_msaa_3d(self, msaa: 'Viewport__MSAA') -> None: ...
    def get_msaa_3d(self) -> 'Viewport__MSAA': ...
    def set_screen_space_aa(self, screen_space_aa: 'Viewport__ScreenSpaceAA') -> None: ...
    def get_screen_space_aa(self) -> 'Viewport__ScreenSpaceAA': ...
    def set_use_taa(self, enable: 'bool') -> None: ...
    def is_using_taa(self) -> 'bool': ...
    def set_use_debanding(self, enable: 'bool') -> None: ...
    def is_using_debanding(self) -> 'bool': ...
    def set_use_occlusion_culling(self, enable: 'bool') -> None: ...
    def is_using_occlusion_culling(self) -> 'bool': ...
    def set_debug_draw(self, debug_draw: 'Viewport__DebugDraw') -> None: ...
    def get_debug_draw(self) -> 'Viewport__DebugDraw': ...
    def get_render_info(self, type: 'Viewport__RenderInfoType', info: 'Viewport__RenderInfo') -> 'int': ...
    def get_texture(self) -> 'ViewportTexture': ...
    def set_physics_object_picking(self, enable: 'bool') -> None: ...
    def get_physics_object_picking(self) -> 'bool': ...
    def set_physics_object_picking_sort(self, enable: 'bool') -> None: ...
    def get_physics_object_picking_sort(self) -> 'bool': ...
    def set_physics_object_picking_first_only(self, enable: 'bool') -> None: ...
    def get_physics_object_picking_first_only(self) -> 'bool': ...
    def get_viewport_rid(self) -> 'RID': ...
    def push_text_input(self, text: 'str') -> None: ...
    def push_input(self, event: 'InputEvent', in_local_coords: 'bool' = False) -> None: ...
    def push_unhandled_input(self, event: 'InputEvent', in_local_coords: 'bool' = False) -> None: ...
    def notify_mouse_entered(self) -> None: ...
    def notify_mouse_exited(self) -> None: ...
    def get_mouse_position(self) -> 'Vector2': ...
    def warp_mouse(self, position: 'Vector2') -> None: ...
    def update_mouse_cursor_state(self) -> None: ...
    def gui_cancel_drag(self) -> None: ...
    def gui_get_drag_data(self) -> 'Variant': ...
    def gui_is_dragging(self) -> 'bool': ...
    def gui_is_drag_successful(self) -> 'bool': ...
    def gui_release_focus(self) -> None: ...
    def gui_get_focus_owner(self) -> 'Control': ...
    def gui_get_hovered_control(self) -> 'Control': ...
    def set_disable_input(self, disable: 'bool') -> None: ...
    def is_input_disabled(self) -> 'bool': ...
    def set_positional_shadow_atlas_size(self, size: 'int') -> None: ...
    def get_positional_shadow_atlas_size(self) -> 'int': ...
    def set_positional_shadow_atlas_16_bits(self, enable: 'bool') -> None: ...
    def get_positional_shadow_atlas_16_bits(self) -> 'bool': ...
    def set_snap_controls_to_pixels(self, enabled: 'bool') -> None: ...
    def is_snap_controls_to_pixels_enabled(self) -> 'bool': ...
    def set_snap_2d_transforms_to_pixel(self, enabled: 'bool') -> None: ...
    def is_snap_2d_transforms_to_pixel_enabled(self) -> 'bool': ...
    def set_snap_2d_vertices_to_pixel(self, enabled: 'bool') -> None: ...
    def is_snap_2d_vertices_to_pixel_enabled(self) -> 'bool': ...
    def set_positional_shadow_atlas_quadrant_subdiv(self, quadrant: 'int', subdiv: 'Viewport__PositionalShadowAtlasQuadrantSubdiv') -> None: ...
    def get_positional_shadow_atlas_quadrant_subdiv(self, quadrant: 'int') -> 'Viewport__PositionalShadowAtlasQuadrantSubdiv': ...
    def set_input_as_handled(self) -> None: ...
    def is_input_handled(self) -> 'bool': ...
    def set_handle_input_locally(self, enable: 'bool') -> None: ...
    def is_handling_input_locally(self) -> 'bool': ...
    def set_default_canvas_item_texture_filter(self, mode: 'Viewport__DefaultCanvasItemTextureFilter') -> None: ...
    def get_default_canvas_item_texture_filter(self) -> 'Viewport__DefaultCanvasItemTextureFilter': ...
    def set_embedding_subwindows(self, enable: 'bool') -> None: ...
    def is_embedding_subwindows(self) -> 'bool': ...
    def get_embedded_subwindows(self) -> 'Array'['Window']: ...
    def set_canvas_cull_mask(self, mask: 'int') -> None: ...
    def get_canvas_cull_mask(self) -> 'int': ...
    def set_canvas_cull_mask_bit(self, layer: 'int', enable: 'bool') -> None: ...
    def get_canvas_cull_mask_bit(self, layer: 'int') -> 'bool': ...
    def set_default_canvas_item_texture_repeat(self, mode: 'Viewport__DefaultCanvasItemTextureRepeat') -> None: ...
    def get_default_canvas_item_texture_repeat(self) -> 'Viewport__DefaultCanvasItemTextureRepeat': ...
    def set_sdf_oversize(self, oversize: 'Viewport__SDFOversize') -> None: ...
    def get_sdf_oversize(self) -> 'Viewport__SDFOversize': ...
    def set_sdf_scale(self, scale: 'Viewport__SDFScale') -> None: ...
    def get_sdf_scale(self) -> 'Viewport__SDFScale': ...
    def set_mesh_lod_threshold(self, pixels: 'float') -> None: ...
    def get_mesh_lod_threshold(self) -> 'float': ...
    def set_as_audio_listener_2d(self, enable: 'bool') -> None: ...
    def is_audio_listener_2d(self) -> 'bool': ...
    def get_audio_listener_2d(self) -> 'AudioListener2D': ...
    def get_camera_2d(self) -> 'Camera2D': ...
    def set_world_3d(self, world_3d: 'World3D') -> None: ...
    def get_world_3d(self) -> 'World3D': ...
    def find_world_3d(self) -> 'World3D': ...
    def set_use_own_world_3d(self, enable: 'bool') -> None: ...
    def is_using_own_world_3d(self) -> 'bool': ...
    def get_audio_listener_3d(self) -> 'AudioListener3D': ...
    def get_camera_3d(self) -> 'Camera3D': ...
    def set_as_audio_listener_3d(self, enable: 'bool') -> None: ...
    def is_audio_listener_3d(self) -> 'bool': ...
    def set_disable_3d(self, disable: 'bool') -> None: ...
    def is_3d_disabled(self) -> 'bool': ...
    def set_use_xr(self, use: 'bool') -> None: ...
    def is_using_xr(self) -> 'bool': ...
    def set_scaling_3d_mode(self, scaling_3d_mode: 'Viewport__Scaling3DMode') -> None: ...
    def get_scaling_3d_mode(self) -> 'Viewport__Scaling3DMode': ...
    def set_scaling_3d_scale(self, scale: 'float') -> None: ...
    def get_scaling_3d_scale(self) -> 'float': ...
    def set_fsr_sharpness(self, fsr_sharpness: 'float') -> None: ...
    def get_fsr_sharpness(self) -> 'float': ...
    def set_texture_mipmap_bias(self, texture_mipmap_bias: 'float') -> None: ...
    def get_texture_mipmap_bias(self) -> 'float': ...
    def set_anisotropic_filtering_level(self, anisotropic_filtering_level: 'Viewport__AnisotropicFiltering') -> None: ...
    def get_anisotropic_filtering_level(self) -> 'Viewport__AnisotropicFiltering': ...
    def set_vrs_mode(self, mode: 'Viewport__VRSMode') -> None: ...
    def get_vrs_mode(self) -> 'Viewport__VRSMode': ...
    def set_vrs_update_mode(self, mode: 'Viewport__VRSUpdateMode') -> None: ...
    def get_vrs_update_mode(self) -> 'Viewport__VRSUpdateMode': ...
    def set_vrs_texture(self, texture: 'Texture2D') -> None: ...
    def get_vrs_texture(self) -> 'Texture2D': ...


class ViewportTexture(Texture2D):


    viewport_path: 'NodePath'

    def set_viewport_path_in_scene(self, path: 'NodePath') -> None: ...
    def get_viewport_path_in_scene(self) -> 'NodePath': ...


class VisibleOnScreenEnabler2D(VisibleOnScreenNotifier2D):


    enable_mode: 'int'
    enable_node_path: 'NodePath'

    def set_enable_mode(self, mode: 'VisibleOnScreenEnabler2D__EnableMode') -> None: ...
    def get_enable_mode(self) -> 'VisibleOnScreenEnabler2D__EnableMode': ...
    def set_enable_node_path(self, path: 'NodePath') -> None: ...
    def get_enable_node_path(self) -> 'NodePath': ...


class VisibleOnScreenEnabler3D(VisibleOnScreenNotifier3D):


    enable_mode: 'int'
    enable_node_path: 'NodePath'

    def set_enable_mode(self, mode: 'VisibleOnScreenEnabler3D__EnableMode') -> None: ...
    def get_enable_mode(self) -> 'VisibleOnScreenEnabler3D__EnableMode': ...
    def set_enable_node_path(self, path: 'NodePath') -> None: ...
    def get_enable_node_path(self) -> 'NodePath': ...


class VisibleOnScreenNotifier2D(Node2D):


    rect: 'Rect2'
    screen_entered: 'Signal[Callable[[], None]]'  # screen_entered()
    screen_exited: 'Signal[Callable[[], None]]'  # screen_exited()

    def set_rect(self, rect: 'Rect2') -> None: ...
    def get_rect(self) -> 'Rect2': ...
    def is_on_screen(self) -> 'bool': ...


class VisibleOnScreenNotifier3D(VisualInstance3D):


    aabb: 'AABB'
    screen_entered: 'Signal[Callable[[], None]]'  # screen_entered()
    screen_exited: 'Signal[Callable[[], None]]'  # screen_exited()

    def set_aabb(self, rect: 'AABB') -> None: ...
    def is_on_screen(self) -> 'bool': ...


class VisualInstance3D(Node3D):


    layers: 'int'
    sorting_offset: 'float'
    sorting_use_aabb_center: 'bool'

    def _get_aabb(self) -> 'AABB': ...
    def set_base(self, base: 'RID') -> None: ...
    def get_base(self) -> 'RID': ...
    def get_instance(self) -> 'RID': ...
    def set_layer_mask(self, mask: 'int') -> None: ...
    def get_layer_mask(self) -> 'int': ...
    def set_layer_mask_value(self, layer_number: 'int', value: 'bool') -> None: ...
    def get_layer_mask_value(self, layer_number: 'int') -> 'bool': ...
    def set_sorting_offset(self, offset: 'float') -> None: ...
    def get_sorting_offset(self) -> 'float': ...
    def set_sorting_use_aabb_center(self, enabled: 'bool') -> None: ...
    def is_sorting_use_aabb_center(self) -> 'bool': ...
    def get_aabb(self) -> 'AABB': ...


class VisualShader(Shader):


    graph_offset: 'Vector2'
    NODE_ID_INVALID: 'int' = -1
    NODE_ID_OUTPUT: 'int' = 0

    def set_mode(self, mode: 'Shader__Mode') -> None: ...
    def add_node(self, type: 'VisualShader__Type', node: 'VisualShaderNode', position: 'Vector2', id: 'int') -> None: ...
    def get_node(self, type: 'VisualShader__Type', id: 'int') -> 'VisualShaderNode': ...
    def set_node_position(self, type: 'VisualShader__Type', id: 'int', position: 'Vector2') -> None: ...
    def get_node_position(self, type: 'VisualShader__Type', id: 'int') -> 'Vector2': ...
    def get_node_list(self, type: 'VisualShader__Type') -> 'PackedInt32Array': ...
    def get_valid_node_id(self, type: 'VisualShader__Type') -> 'int': ...
    def remove_node(self, type: 'VisualShader__Type', id: 'int') -> None: ...
    def replace_node(self, type: 'VisualShader__Type', id: 'int', new_class: 'StringName') -> None: ...
    def is_node_connection(self, type: 'VisualShader__Type', from_node: 'int', from_port: 'int', to_node: 'int', to_port: 'int') -> 'bool': ...
    def can_connect_nodes(self, type: 'VisualShader__Type', from_node: 'int', from_port: 'int', to_node: 'int', to_port: 'int') -> 'bool': ...
    def connect_nodes(self, type: 'VisualShader__Type', from_node: 'int', from_port: 'int', to_node: 'int', to_port: 'int') -> 'Error': ...
    def disconnect_nodes(self, type: 'VisualShader__Type', from_node: 'int', from_port: 'int', to_node: 'int', to_port: 'int') -> None: ...
    def connect_nodes_forced(self, type: 'VisualShader__Type', from_node: 'int', from_port: 'int', to_node: 'int', to_port: 'int') -> None: ...
    def get_node_connections(self, type: 'VisualShader__Type') -> 'Array'['Dictionary']: ...
    def set_graph_offset(self, offset: 'Vector2') -> None: ...
    def get_graph_offset(self) -> 'Vector2': ...
    def attach_node_to_frame(self, type: 'VisualShader__Type', id: 'int', frame: 'int') -> None: ...
    def detach_node_from_frame(self, type: 'VisualShader__Type', id: 'int') -> None: ...
    def add_varying(self, name: 'str', mode: 'VisualShader__VaryingMode', type: 'VisualShader__VaryingType') -> None: ...
    def remove_varying(self, name: 'str') -> None: ...
    def has_varying(self, name: 'str') -> 'bool': ...


class VisualShaderNode(Resource):


    output_port_for_preview: 'int'
    default_input_values: 'Array'
    expanded_output_ports: 'Array'
    linked_parent_graph_frame: 'int'

    def get_default_input_port(self, type: 'VisualShaderNode__PortType') -> 'int': ...
    def set_output_port_for_preview(self, port: 'int') -> None: ...
    def get_output_port_for_preview(self) -> 'int': ...
    def set_input_port_default_value(self, port: 'int', value: 'Variant', prev_value: 'Variant' = default('''null''')) -> None: ...
    def get_input_port_default_value(self, port: 'int') -> 'Variant': ...
    def remove_input_port_default_value(self, port: 'int') -> None: ...
    def clear_default_input_values(self) -> None: ...
    def set_default_input_values(self, values: 'Array') -> None: ...
    def get_default_input_values(self) -> 'Array': ...
    def set_frame(self, frame: 'int') -> None: ...
    def get_frame(self) -> 'int': ...


class VisualShaderNodeBillboard(VisualShaderNode):


    billboard_type: 'int'
    keep_scale: 'bool'

    def set_billboard_type(self, billboard_type: 'VisualShaderNodeBillboard__BillboardType') -> None: ...
    def get_billboard_type(self) -> 'VisualShaderNodeBillboard__BillboardType': ...
    def set_keep_scale_enabled(self, enabled: 'bool') -> None: ...
    def is_keep_scale_enabled(self) -> 'bool': ...


class VisualShaderNodeBooleanConstant(VisualShaderNodeConstant):


    constant: 'bool'

    def set_constant(self, constant: 'bool') -> None: ...
    def get_constant(self) -> 'bool': ...


class VisualShaderNodeBooleanParameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'bool'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'bool') -> None: ...
    def get_default_value(self) -> 'bool': ...


class VisualShaderNodeClamp(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, op_type: 'VisualShaderNodeClamp__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeClamp__OpType': ...


class VisualShaderNodeColorConstant(VisualShaderNodeConstant):


    constant: 'Color'

    def set_constant(self, constant: 'Color') -> None: ...
    def get_constant(self) -> 'Color': ...


class VisualShaderNodeColorFunc(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeColorFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeColorFunc__Function': ...


class VisualShaderNodeColorOp(VisualShaderNode):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeColorOp__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeColorOp__Operator': ...


class VisualShaderNodeColorParameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'Color'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'Color') -> None: ...
    def get_default_value(self) -> 'Color': ...


class VisualShaderNodeComment(VisualShaderNodeFrame):


    description: 'str'

    def set_description(self, description: 'str') -> None: ...
    def get_description(self) -> 'str': ...


class VisualShaderNodeCompare(VisualShaderNode):


    type: 'int'
    function: 'int'
    condition: 'int'

    def set_comparison_type(self, type: 'VisualShaderNodeCompare__ComparisonType') -> None: ...
    def get_comparison_type(self) -> 'VisualShaderNodeCompare__ComparisonType': ...
    def set_function(self, func: 'VisualShaderNodeCompare__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeCompare__Function': ...
    def set_condition(self, condition: 'VisualShaderNodeCompare__Condition') -> None: ...
    def get_condition(self) -> 'VisualShaderNodeCompare__Condition': ...


class VisualShaderNodeConstant(VisualShaderNode): ...


class VisualShaderNodeCubemap(VisualShaderNode):


    source: 'int'
    cube_map: 'Cubemap' | 'CompressedCubemap' | 'PlaceholderCubemap' | 'TextureCubemapRD'
    texture_type: 'int'

    def set_source(self, value: 'VisualShaderNodeCubemap__Source') -> None: ...
    def get_source(self) -> 'VisualShaderNodeCubemap__Source': ...
    def set_cube_map(self, value: 'TextureLayered') -> None: ...
    def get_cube_map(self) -> 'TextureLayered': ...
    def set_texture_type(self, value: 'VisualShaderNodeCubemap__TextureType') -> None: ...
    def get_texture_type(self) -> 'VisualShaderNodeCubemap__TextureType': ...


class VisualShaderNodeCubemapParameter(VisualShaderNodeTextureParameter): ...


class VisualShaderNodeCurveTexture(VisualShaderNodeResizableBase):


    texture: 'CurveTexture'

    def set_texture(self, texture: 'CurveTexture') -> None: ...
    def get_texture(self) -> 'CurveTexture': ...


class VisualShaderNodeCurveXYZTexture(VisualShaderNodeResizableBase):


    texture: 'CurveXYZTexture'

    def set_texture(self, texture: 'CurveXYZTexture') -> None: ...
    def get_texture(self) -> 'CurveXYZTexture': ...


class VisualShaderNodeCustom(VisualShaderNode):


    initialized: 'bool'
    properties: 'str'

    def _get_name(self) -> 'str': ...
    def _get_description(self) -> 'str': ...
    def _get_category(self) -> 'str': ...
    def _get_return_icon_type(self) -> 'VisualShaderNode__PortType': ...
    def _get_input_port_count(self) -> 'int': ...
    def _get_input_port_type(self, port: 'int') -> 'VisualShaderNode__PortType': ...
    def _get_input_port_name(self, port: 'int') -> 'str': ...
    def _get_input_port_default_value(self, port: 'int') -> 'Variant': ...
    def _get_default_input_port(self, type: 'VisualShaderNode__PortType') -> 'int': ...
    def _get_output_port_count(self) -> 'int': ...
    def _get_output_port_type(self, port: 'int') -> 'VisualShaderNode__PortType': ...
    def _get_output_port_name(self, port: 'int') -> 'str': ...
    def _get_property_count(self) -> 'int': ...
    def _get_property_name(self, index: 'int') -> 'str': ...
    def _get_property_default_index(self, index: 'int') -> 'int': ...
    def _get_property_options(self, index: 'int') -> 'PackedStringArray': ...
    def _get_code(self, input_vars: 'Array'['str'], output_vars: 'Array'['str'], mode: 'Shader__Mode', type: 'VisualShader__Type') -> 'str': ...
    def _get_func_code(self, mode: 'Shader__Mode', type: 'VisualShader__Type') -> 'str': ...
    def _get_global_code(self, mode: 'Shader__Mode') -> 'str': ...
    def _is_highend(self) -> 'bool': ...
    def _is_available(self, mode: 'Shader__Mode', type: 'VisualShader__Type') -> 'bool': ...
    def get_option_index(self, option: 'int') -> 'int': ...


class VisualShaderNodeDerivativeFunc(VisualShaderNode):


    op_type: 'int'
    function: 'int'
    precision: 'int'

    def set_op_type(self, type: 'VisualShaderNodeDerivativeFunc__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeDerivativeFunc__OpType': ...
    def set_function(self, func: 'VisualShaderNodeDerivativeFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeDerivativeFunc__Function': ...
    def set_precision(self, precision: 'VisualShaderNodeDerivativeFunc__Precision') -> None: ...
    def get_precision(self) -> 'VisualShaderNodeDerivativeFunc__Precision': ...


class VisualShaderNodeDeterminant(VisualShaderNode): ...


class VisualShaderNodeDistanceFade(VisualShaderNode): ...


class VisualShaderNodeDotProduct(VisualShaderNode): ...


class VisualShaderNodeExpression(VisualShaderNodeGroupBase):


    expression: 'str'

    def set_expression(self, expression: 'str') -> None: ...
    def get_expression(self) -> 'str': ...


class VisualShaderNodeFaceForward(VisualShaderNodeVectorBase): ...


class VisualShaderNodeFloatConstant(VisualShaderNodeConstant):


    constant: 'float'

    def set_constant(self, constant: 'float') -> None: ...
    def get_constant(self) -> 'float': ...


class VisualShaderNodeFloatFunc(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeFloatFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeFloatFunc__Function': ...


class VisualShaderNodeFloatOp(VisualShaderNode):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeFloatOp__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeFloatOp__Operator': ...


class VisualShaderNodeFloatParameter(VisualShaderNodeParameter):


    hint: 'int'
    min: 'float'
    max: 'float'
    step: 'float'
    default_value_enabled: 'bool'
    default_value: 'float'

    def set_hint(self, hint: 'VisualShaderNodeFloatParameter__Hint') -> None: ...
    def get_hint(self) -> 'VisualShaderNodeFloatParameter__Hint': ...
    def set_min(self, value: 'float') -> None: ...
    def get_min(self) -> 'float': ...
    def set_max(self, value: 'float') -> None: ...
    def get_max(self) -> 'float': ...
    def set_step(self, value: 'float') -> None: ...
    def get_step(self) -> 'float': ...
    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'float') -> None: ...
    def get_default_value(self) -> 'float': ...


class VisualShaderNodeFrame(VisualShaderNodeResizableBase):


    title: 'str'
    tint_color_enabled: 'bool'
    tint_color: 'Color'
    autoshrink: 'bool'
    attached_nodes: 'PackedInt32Array'

    def set_title(self, title: 'str') -> None: ...
    def get_title(self) -> 'str': ...
    def set_tint_color_enabled(self, enable: 'bool') -> None: ...
    def is_tint_color_enabled(self) -> 'bool': ...
    def set_tint_color(self, color: 'Color') -> None: ...
    def get_tint_color(self) -> 'Color': ...
    def set_autoshrink_enabled(self, enable: 'bool') -> None: ...
    def is_autoshrink_enabled(self) -> 'bool': ...
    def add_attached_node(self, node: 'int') -> None: ...
    def remove_attached_node(self, node: 'int') -> None: ...
    def set_attached_nodes(self, attached_nodes: 'PackedInt32Array') -> None: ...
    def get_attached_nodes(self) -> 'PackedInt32Array': ...


class VisualShaderNodeFresnel(VisualShaderNode): ...


class VisualShaderNodeGlobalExpression(VisualShaderNodeExpression): ...


class VisualShaderNodeGroupBase(VisualShaderNodeResizableBase):



    def set_inputs(self, inputs: 'str') -> None: ...
    def get_inputs(self) -> 'str': ...
    def set_outputs(self, outputs: 'str') -> None: ...
    def get_outputs(self) -> 'str': ...
    def is_valid_port_name(self, name: 'str') -> 'bool': ...
    def add_input_port(self, id: 'int', type: 'int', name: 'str') -> None: ...
    def remove_input_port(self, id: 'int') -> None: ...
    def get_input_port_count(self) -> 'int': ...
    def has_input_port(self, id: 'int') -> 'bool': ...
    def clear_input_ports(self) -> None: ...
    def add_output_port(self, id: 'int', type: 'int', name: 'str') -> None: ...
    def remove_output_port(self, id: 'int') -> None: ...
    def get_output_port_count(self) -> 'int': ...
    def has_output_port(self, id: 'int') -> 'bool': ...
    def clear_output_ports(self) -> None: ...
    def set_input_port_name(self, id: 'int', name: 'str') -> None: ...
    def set_input_port_type(self, id: 'int', type: 'int') -> None: ...
    def set_output_port_name(self, id: 'int', name: 'str') -> None: ...
    def set_output_port_type(self, id: 'int', type: 'int') -> None: ...
    def get_free_input_port_id(self) -> 'int': ...
    def get_free_output_port_id(self) -> 'int': ...


class VisualShaderNodeIf(VisualShaderNode): ...


class VisualShaderNodeInput(VisualShaderNode):


    input_name: 'StringName'
    input_type_changed: 'Signal[Callable[[], None]]'  # input_type_changed()

    def set_input_name(self, name: 'str') -> None: ...
    def get_input_name(self) -> 'str': ...
    def get_input_real_name(self) -> 'str': ...


class VisualShaderNodeIntConstant(VisualShaderNodeConstant):


    constant: 'int'

    def set_constant(self, constant: 'int') -> None: ...
    def get_constant(self) -> 'int': ...


class VisualShaderNodeIntFunc(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeIntFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeIntFunc__Function': ...


class VisualShaderNodeIntOp(VisualShaderNode):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeIntOp__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeIntOp__Operator': ...


class VisualShaderNodeIntParameter(VisualShaderNodeParameter):


    hint: 'int'
    min: 'int'
    max: 'int'
    step: 'int'
    enum_names: 'PackedStringArray'
    default_value_enabled: 'bool'
    default_value: 'int'

    def set_hint(self, hint: 'VisualShaderNodeIntParameter__Hint') -> None: ...
    def get_hint(self) -> 'VisualShaderNodeIntParameter__Hint': ...
    def set_min(self, value: 'int') -> None: ...
    def get_min(self) -> 'int': ...
    def set_max(self, value: 'int') -> None: ...
    def get_max(self) -> 'int': ...
    def set_step(self, value: 'int') -> None: ...
    def get_step(self) -> 'int': ...
    def set_enum_names(self, names: 'PackedStringArray') -> None: ...
    def get_enum_names(self) -> 'PackedStringArray': ...
    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'int') -> None: ...
    def get_default_value(self) -> 'int': ...


class VisualShaderNodeIs(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeIs__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeIs__Function': ...


class VisualShaderNodeLinearSceneDepth(VisualShaderNode): ...


class VisualShaderNodeMix(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, op_type: 'VisualShaderNodeMix__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeMix__OpType': ...


class VisualShaderNodeMultiplyAdd(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, type: 'VisualShaderNodeMultiplyAdd__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeMultiplyAdd__OpType': ...


class VisualShaderNodeOuterProduct(VisualShaderNode): ...


class VisualShaderNodeOutput(VisualShaderNode): ...


class VisualShaderNodeParameter(VisualShaderNode):


    parameter_name: 'StringName'
    qualifier: 'int'

    def set_parameter_name(self, name: 'str') -> None: ...
    def get_parameter_name(self) -> 'str': ...
    def set_qualifier(self, qualifier: 'VisualShaderNodeParameter__Qualifier') -> None: ...
    def get_qualifier(self) -> 'VisualShaderNodeParameter__Qualifier': ...


class VisualShaderNodeParameterRef(VisualShaderNode):


    parameter_name: 'StringName'
    param_type: 'int'

    def set_parameter_name(self, name: 'str') -> None: ...
    def get_parameter_name(self) -> 'str': ...


class VisualShaderNodeParticleAccelerator(VisualShaderNode):


    mode: 'int'

    def set_mode(self, mode: 'VisualShaderNodeParticleAccelerator__Mode') -> None: ...
    def get_mode(self) -> 'VisualShaderNodeParticleAccelerator__Mode': ...


class VisualShaderNodeParticleBoxEmitter(VisualShaderNodeParticleEmitter): ...


class VisualShaderNodeParticleConeVelocity(VisualShaderNode): ...


class VisualShaderNodeParticleEmit(VisualShaderNode):


    flags: 'int'

    def set_flags(self, flags: 'VisualShaderNodeParticleEmit__EmitFlags') -> None: ...
    def get_flags(self) -> 'VisualShaderNodeParticleEmit__EmitFlags': ...


class VisualShaderNodeParticleEmitter(VisualShaderNode):


    mode_2d: 'bool'

    def set_mode_2d(self, enabled: 'bool') -> None: ...
    def is_mode_2d(self) -> 'bool': ...


class VisualShaderNodeParticleMeshEmitter(VisualShaderNodeParticleEmitter):


    mesh: 'Mesh'
    use_all_surfaces: 'bool'
    surface_index: 'int'

    def set_mesh(self, mesh: 'Mesh') -> None: ...
    def get_mesh(self) -> 'Mesh': ...
    def set_use_all_surfaces(self, enabled: 'bool') -> None: ...
    def is_use_all_surfaces(self) -> 'bool': ...
    def set_surface_index(self, surface_index: 'int') -> None: ...
    def get_surface_index(self) -> 'int': ...


class VisualShaderNodeParticleMultiplyByAxisAngle(VisualShaderNode):


    degrees_mode: 'bool'

    def set_degrees_mode(self, enabled: 'bool') -> None: ...
    def is_degrees_mode(self) -> 'bool': ...


class VisualShaderNodeParticleOutput(VisualShaderNodeOutput): ...


class VisualShaderNodeParticleRandomness(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, type: 'VisualShaderNodeParticleRandomness__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeParticleRandomness__OpType': ...


class VisualShaderNodeParticleRingEmitter(VisualShaderNodeParticleEmitter): ...


class VisualShaderNodeParticleSphereEmitter(VisualShaderNodeParticleEmitter): ...


class VisualShaderNodeProximityFade(VisualShaderNode): ...


class VisualShaderNodeRandomRange(VisualShaderNode): ...


class VisualShaderNodeRemap(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, op_type: 'VisualShaderNodeRemap__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeRemap__OpType': ...


class VisualShaderNodeReroute(VisualShaderNode):


    port_type: 'int'

    def get_port_type(self) -> 'VisualShaderNode__PortType': ...


class VisualShaderNodeResizableBase(VisualShaderNode):


    size: 'Vector2'

    def set_size(self, size: 'Vector2') -> None: ...
    def get_size(self) -> 'Vector2': ...


class VisualShaderNodeRotationByAxis(VisualShaderNode): ...


class VisualShaderNodeSDFRaymarch(VisualShaderNode): ...


class VisualShaderNodeSDFToScreenUV(VisualShaderNode): ...


class VisualShaderNodeSample3D(VisualShaderNode):


    source: 'int'

    def set_source(self, value: 'VisualShaderNodeSample3D__Source') -> None: ...
    def get_source(self) -> 'VisualShaderNodeSample3D__Source': ...


class VisualShaderNodeScreenNormalWorldSpace(VisualShaderNode): ...


class VisualShaderNodeScreenUVToSDF(VisualShaderNode): ...


class VisualShaderNodeSmoothStep(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, op_type: 'VisualShaderNodeSmoothStep__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeSmoothStep__OpType': ...


class VisualShaderNodeStep(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, op_type: 'VisualShaderNodeStep__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeStep__OpType': ...


class VisualShaderNodeSwitch(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, type: 'VisualShaderNodeSwitch__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeSwitch__OpType': ...


class VisualShaderNodeTexture(VisualShaderNode):


    source: 'int'
    texture: 'Texture2D'
    texture_type: 'int'

    def set_source(self, value: 'VisualShaderNodeTexture__Source') -> None: ...
    def get_source(self) -> 'VisualShaderNodeTexture__Source': ...
    def set_texture(self, value: 'Texture2D') -> None: ...
    def get_texture(self) -> 'Texture2D': ...
    def set_texture_type(self, value: 'VisualShaderNodeTexture__TextureType') -> None: ...
    def get_texture_type(self) -> 'VisualShaderNodeTexture__TextureType': ...


class VisualShaderNodeTexture2DArray(VisualShaderNodeSample3D):


    texture_array: 'Texture2DArray' | 'CompressedTexture2DArray' | 'PlaceholderTexture2DArray' | 'Texture2DArrayRD'

    def set_texture_array(self, value: 'TextureLayered') -> None: ...
    def get_texture_array(self) -> 'TextureLayered': ...


class VisualShaderNodeTexture2DArrayParameter(VisualShaderNodeTextureParameter): ...


class VisualShaderNodeTexture2DParameter(VisualShaderNodeTextureParameter): ...


class VisualShaderNodeTexture3D(VisualShaderNodeSample3D):


    texture: 'Texture3D'

    def set_texture(self, value: 'Texture3D') -> None: ...
    def get_texture(self) -> 'Texture3D': ...


class VisualShaderNodeTexture3DParameter(VisualShaderNodeTextureParameter): ...


class VisualShaderNodeTextureParameter(VisualShaderNodeParameter):


    texture_type: 'int'
    color_default: 'int'
    texture_filter: 'int'
    texture_repeat: 'int'
    texture_source: 'int'

    def set_texture_type(self, type: 'VisualShaderNodeTextureParameter__TextureType') -> None: ...
    def get_texture_type(self) -> 'VisualShaderNodeTextureParameter__TextureType': ...
    def set_color_default(self, color: 'VisualShaderNodeTextureParameter__ColorDefault') -> None: ...
    def get_color_default(self) -> 'VisualShaderNodeTextureParameter__ColorDefault': ...
    def set_texture_filter(self, filter: 'VisualShaderNodeTextureParameter__TextureFilter') -> None: ...
    def get_texture_filter(self) -> 'VisualShaderNodeTextureParameter__TextureFilter': ...
    def set_texture_repeat(self, repeat: 'VisualShaderNodeTextureParameter__TextureRepeat') -> None: ...
    def get_texture_repeat(self) -> 'VisualShaderNodeTextureParameter__TextureRepeat': ...
    def set_texture_source(self, source: 'VisualShaderNodeTextureParameter__TextureSource') -> None: ...
    def get_texture_source(self) -> 'VisualShaderNodeTextureParameter__TextureSource': ...


class VisualShaderNodeTextureParameterTriplanar(VisualShaderNodeTextureParameter): ...


class VisualShaderNodeTextureSDF(VisualShaderNode): ...


class VisualShaderNodeTextureSDFNormal(VisualShaderNode): ...


class VisualShaderNodeTransformCompose(VisualShaderNode): ...


class VisualShaderNodeTransformConstant(VisualShaderNodeConstant):


    constant: 'Transform3D'

    def set_constant(self, constant: 'Transform3D') -> None: ...
    def get_constant(self) -> 'Transform3D': ...


class VisualShaderNodeTransformDecompose(VisualShaderNode): ...


class VisualShaderNodeTransformFunc(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeTransformFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeTransformFunc__Function': ...


class VisualShaderNodeTransformOp(VisualShaderNode):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeTransformOp__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeTransformOp__Operator': ...


class VisualShaderNodeTransformParameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'Transform3D'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'Transform3D') -> None: ...
    def get_default_value(self) -> 'Transform3D': ...


class VisualShaderNodeTransformVecMult(VisualShaderNode):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeTransformVecMult__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeTransformVecMult__Operator': ...


class VisualShaderNodeUIntConstant(VisualShaderNodeConstant):


    constant: 'int'

    def set_constant(self, constant: 'int') -> None: ...
    def get_constant(self) -> 'int': ...


class VisualShaderNodeUIntFunc(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeUIntFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeUIntFunc__Function': ...


class VisualShaderNodeUIntOp(VisualShaderNode):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeUIntOp__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeUIntOp__Operator': ...


class VisualShaderNodeUIntParameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'int'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'int') -> None: ...
    def get_default_value(self) -> 'int': ...


class VisualShaderNodeUVFunc(VisualShaderNode):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeUVFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeUVFunc__Function': ...


class VisualShaderNodeUVPolarCoord(VisualShaderNode): ...


class VisualShaderNodeVarying(VisualShaderNode):


    varying_name: 'StringName'
    varying_type: 'int'

    def set_varying_name(self, name: 'str') -> None: ...
    def get_varying_name(self) -> 'str': ...
    def set_varying_type(self, type: 'VisualShader__VaryingType') -> None: ...
    def get_varying_type(self) -> 'VisualShader__VaryingType': ...


class VisualShaderNodeVaryingGetter(VisualShaderNodeVarying): ...


class VisualShaderNodeVaryingSetter(VisualShaderNodeVarying): ...


class VisualShaderNodeVec2Constant(VisualShaderNodeConstant):


    constant: 'Vector2'

    def set_constant(self, constant: 'Vector2') -> None: ...
    def get_constant(self) -> 'Vector2': ...


class VisualShaderNodeVec2Parameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'Vector2'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'Vector2') -> None: ...
    def get_default_value(self) -> 'Vector2': ...


class VisualShaderNodeVec3Constant(VisualShaderNodeConstant):


    constant: 'Vector3'

    def set_constant(self, constant: 'Vector3') -> None: ...
    def get_constant(self) -> 'Vector3': ...


class VisualShaderNodeVec3Parameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'Vector3'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'Vector3') -> None: ...
    def get_default_value(self) -> 'Vector3': ...


class VisualShaderNodeVec4Constant(VisualShaderNodeConstant):


    constant: 'Quaternion'
    constant_v4: 'Vector4'

    def set_constant(self, constant: 'Quaternion') -> None: ...
    def get_constant(self) -> 'Quaternion': ...


class VisualShaderNodeVec4Parameter(VisualShaderNodeParameter):


    default_value_enabled: 'bool'
    default_value: 'Vector4'

    def set_default_value_enabled(self, enabled: 'bool') -> None: ...
    def is_default_value_enabled(self) -> 'bool': ...
    def set_default_value(self, value: 'Vector4') -> None: ...
    def get_default_value(self) -> 'Vector4': ...


class VisualShaderNodeVectorBase(VisualShaderNode):


    op_type: 'int'

    def set_op_type(self, type: 'VisualShaderNodeVectorBase__OpType') -> None: ...
    def get_op_type(self) -> 'VisualShaderNodeVectorBase__OpType': ...


class VisualShaderNodeVectorCompose(VisualShaderNodeVectorBase): ...


class VisualShaderNodeVectorDecompose(VisualShaderNodeVectorBase): ...


class VisualShaderNodeVectorDistance(VisualShaderNodeVectorBase): ...


class VisualShaderNodeVectorFunc(VisualShaderNodeVectorBase):


    function: 'int'

    def set_function(self, func: 'VisualShaderNodeVectorFunc__Function') -> None: ...
    def get_function(self) -> 'VisualShaderNodeVectorFunc__Function': ...


class VisualShaderNodeVectorLen(VisualShaderNodeVectorBase): ...


class VisualShaderNodeVectorOp(VisualShaderNodeVectorBase):


    operator: 'int'

    def set_operator(self, op: 'VisualShaderNodeVectorOp__Operator') -> None: ...
    def get_operator(self) -> 'VisualShaderNodeVectorOp__Operator': ...


class VisualShaderNodeVectorRefract(VisualShaderNodeVectorBase): ...


class VisualShaderNodeWorldPositionFromDepth(VisualShaderNode): ...


class VoxelGI(VisualInstance3D):


    subdiv: 'int'
    size: 'Vector3'
    camera_attributes: 'CameraAttributesPractical' | 'CameraAttributesPhysical'
    data: 'VoxelGIData'

    def set_probe_data(self, data: 'VoxelGIData') -> None: ...
    def get_probe_data(self) -> 'VoxelGIData': ...
    def set_subdiv(self, subdiv: 'VoxelGI__Subdiv') -> None: ...
    def get_subdiv(self) -> 'VoxelGI__Subdiv': ...
    def set_size(self, size: 'Vector3') -> None: ...
    def get_size(self) -> 'Vector3': ...
    def set_camera_attributes(self, camera_attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    def bake(self, from_node: 'Node' = default('''null'''), create_visual_debug: 'bool' = False) -> None: ...
    def debug_bake(self) -> None: ...


class VoxelGIData(Resource):


    dynamic_range: 'float'
    energy: 'float'
    bias: 'float'
    normal_bias: 'float'
    propagation: 'float'
    use_two_bounces: 'bool'
    interior: 'bool'

    def allocate(self, to_cell_xform: 'Transform3D', aabb: 'AABB', octree_size: 'Vector3', octree_cells: 'PackedByteArray', data_cells: 'PackedByteArray', distance_field: 'PackedByteArray', level_counts: 'PackedInt32Array') -> None: ...
    def get_bounds(self) -> 'AABB': ...
    def get_octree_size(self) -> 'Vector3': ...
    def get_to_cell_xform(self) -> 'Transform3D': ...
    def get_octree_cells(self) -> 'PackedByteArray': ...
    def get_data_cells(self) -> 'PackedByteArray': ...
    def get_level_counts(self) -> 'PackedInt32Array': ...
    def set_dynamic_range(self, dynamic_range: 'float') -> None: ...
    def get_dynamic_range(self) -> 'float': ...
    def set_energy(self, energy: 'float') -> None: ...
    def get_energy(self) -> 'float': ...
    def set_bias(self, bias: 'float') -> None: ...
    def get_bias(self) -> 'float': ...
    def set_normal_bias(self, bias: 'float') -> None: ...
    def get_normal_bias(self) -> 'float': ...
    def set_propagation(self, propagation: 'float') -> None: ...
    def get_propagation(self) -> 'float': ...
    def set_interior(self, interior: 'bool') -> None: ...
    def is_interior(self) -> 'bool': ...
    def set_use_two_bounces(self, enable: 'bool') -> None: ...
    def is_using_two_bounces(self) -> 'bool': ...


class WeakRef(RefCounted):



    def get_ref(self) -> 'Variant': ...


class WebRTCDataChannel(PacketPeer):


    write_mode: 'int'

    def poll(self) -> 'Error': ...
    def close(self) -> None: ...
    def was_string_packet(self) -> 'bool': ...
    def set_write_mode(self, write_mode: 'WebRTCDataChannel__WriteMode') -> None: ...
    def get_write_mode(self) -> 'WebRTCDataChannel__WriteMode': ...
    def get_ready_state(self) -> 'WebRTCDataChannel__ChannelState': ...
    def get_label(self) -> 'str': ...
    def is_ordered(self) -> 'bool': ...
    def get_id(self) -> 'int': ...
    def get_max_packet_life_time(self) -> 'int': ...
    def get_max_retransmits(self) -> 'int': ...
    def get_protocol(self) -> 'str': ...
    def is_negotiated(self) -> 'bool': ...
    def get_buffered_amount(self) -> 'int': ...


class WebRTCDataChannelExtension(WebRTCDataChannel):



    def _get_packet(self, r_buffer: 'intptr', r_buffer_size: 'intptr') -> 'Error': ...
    def _put_packet(self, p_buffer: 'intptr', p_buffer_size: 'int') -> 'Error': ...
    def _get_available_packet_count(self) -> 'int': ...
    def _get_max_packet_size(self) -> 'int': ...
    def _poll(self) -> 'Error': ...
    def _close(self) -> None: ...
    def _set_write_mode(self, p_write_mode: 'WebRTCDataChannel__WriteMode') -> None: ...
    def _get_write_mode(self) -> 'WebRTCDataChannel__WriteMode': ...
    def _was_string_packet(self) -> 'bool': ...
    def _get_ready_state(self) -> 'WebRTCDataChannel__ChannelState': ...
    def _get_label(self) -> 'str': ...
    def _is_ordered(self) -> 'bool': ...
    def _get_id(self) -> 'int': ...
    def _get_max_packet_life_time(self) -> 'int': ...
    def _get_max_retransmits(self) -> 'int': ...
    def _get_protocol(self) -> 'str': ...
    def _is_negotiated(self) -> 'bool': ...
    def _get_buffered_amount(self) -> 'int': ...


class WebRTCMultiplayerPeer(MultiplayerPeer):



    def create_server(self, channels_config: 'Array' = default('''[]''')) -> 'Error': ...
    def create_client(self, peer_id: 'int', channels_config: 'Array' = default('''[]''')) -> 'Error': ...
    def create_mesh(self, peer_id: 'int', channels_config: 'Array' = default('''[]''')) -> 'Error': ...
    def add_peer(self, peer: 'WebRTCPeerConnection', peer_id: 'int', unreliable_lifetime: 'int' = 1) -> 'Error': ...
    def remove_peer(self, peer_id: 'int') -> None: ...
    def has_peer(self, peer_id: 'int') -> 'bool': ...
    def get_peer(self, peer_id: 'int') -> 'Dictionary': ...
    def get_peers(self) -> 'Dictionary': ...


class WebRTCPeerConnection(RefCounted):


    session_description_created: 'Signal[Callable[[str, str], None]]'  # session_description_created(type: String, sdp: String)
    ice_candidate_created: 'Signal[Callable[[str, int, str], None]]'  # ice_candidate_created(media: String, index: int, name: String)
    data_channel_received: 'Signal[Callable[[WebRTCDataChannel], None]]'  # data_channel_received(channel: WebRTCDataChannel)

    @staticmethod
    def set_default_extension(extension_class: 'StringName') -> None: ...
    def initialize(self, configuration: 'Dictionary' = default('''{}''')) -> 'Error': ...
    def create_data_channel(self, label: 'str', options: 'Dictionary' = default('''{}''')) -> 'WebRTCDataChannel': ...
    def create_offer(self) -> 'Error': ...
    def set_local_description(self, type: 'str', sdp: 'str') -> 'Error': ...
    def set_remote_description(self, type: 'str', sdp: 'str') -> 'Error': ...
    def add_ice_candidate(self, media: 'str', index: 'int', name: 'str') -> 'Error': ...
    def poll(self) -> 'Error': ...
    def close(self) -> None: ...
    def get_connection_state(self) -> 'WebRTCPeerConnection__ConnectionState': ...
    def get_gathering_state(self) -> 'WebRTCPeerConnection__GatheringState': ...
    def get_signaling_state(self) -> 'WebRTCPeerConnection__SignalingState': ...


class WebRTCPeerConnectionExtension(WebRTCPeerConnection):



    def _get_connection_state(self) -> 'WebRTCPeerConnection__ConnectionState': ...
    def _get_gathering_state(self) -> 'WebRTCPeerConnection__GatheringState': ...
    def _get_signaling_state(self) -> 'WebRTCPeerConnection__SignalingState': ...
    def _initialize(self, p_config: 'Dictionary') -> 'Error': ...
    def _create_data_channel(self, p_label: 'str', p_config: 'Dictionary') -> 'WebRTCDataChannel': ...
    def _create_offer(self) -> 'Error': ...
    def _set_remote_description(self, p_type: 'str', p_sdp: 'str') -> 'Error': ...
    def _set_local_description(self, p_type: 'str', p_sdp: 'str') -> 'Error': ...
    def _add_ice_candidate(self, p_sdp_mid_name: 'str', p_sdp_mline_index: 'int', p_sdp_name: 'str') -> 'Error': ...
    def _poll(self) -> 'Error': ...
    def _close(self) -> None: ...


class WebSocketMultiplayerPeer(MultiplayerPeer):


    supported_protocols: 'PackedStringArray'
    handshake_headers: 'PackedStringArray'
    inbound_buffer_size: 'int'
    outbound_buffer_size: 'int'
    handshake_timeout: 'float'
    max_queued_packets: 'int'

    def create_client(self, url: 'str', tls_client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def create_server(self, port: 'int', bind_address: 'str' = "*", tls_server_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def get_peer(self, peer_id: 'int') -> 'WebSocketPeer': ...
    def get_peer_address(self, id: 'int') -> 'str': ...
    def get_peer_port(self, id: 'int') -> 'int': ...
    def get_supported_protocols(self) -> 'PackedStringArray': ...
    def set_supported_protocols(self, protocols: 'PackedStringArray') -> None: ...
    def get_handshake_headers(self) -> 'PackedStringArray': ...
    def set_handshake_headers(self, protocols: 'PackedStringArray') -> None: ...
    def get_inbound_buffer_size(self) -> 'int': ...
    def set_inbound_buffer_size(self, buffer_size: 'int') -> None: ...
    def get_outbound_buffer_size(self) -> 'int': ...
    def set_outbound_buffer_size(self, buffer_size: 'int') -> None: ...
    def get_handshake_timeout(self) -> 'float': ...
    def set_handshake_timeout(self, timeout: 'float') -> None: ...
    def set_max_queued_packets(self, max_queued_packets: 'int') -> None: ...
    def get_max_queued_packets(self) -> 'int': ...


class WebSocketPeer(PacketPeer):


    supported_protocols: 'PackedStringArray'
    handshake_headers: 'PackedStringArray'
    inbound_buffer_size: 'int'
    outbound_buffer_size: 'int'
    max_queued_packets: 'int'
    heartbeat_interval: 'int'

    def connect_to_url(self, url: 'str', tls_client_options: 'TLSOptions' = default('''null''')) -> 'Error': ...
    def accept_stream(self, stream: 'StreamPeer') -> 'Error': ...
    def send(self, message: 'PackedByteArray', write_mode: 'WebSocketPeer__WriteMode' = 1) -> 'Error': ...
    def send_text(self, message: 'str') -> 'Error': ...
    def was_string_packet(self) -> 'bool': ...
    def poll(self) -> None: ...
    def close(self, code: 'int' = 1000, reason: 'str' = "") -> None: ...
    def get_connected_host(self) -> 'str': ...
    def get_connected_port(self) -> 'int': ...
    def get_selected_protocol(self) -> 'str': ...
    def get_requested_url(self) -> 'str': ...
    def set_no_delay(self, enabled: 'bool') -> None: ...
    def get_current_outbound_buffered_amount(self) -> 'int': ...
    def get_ready_state(self) -> 'WebSocketPeer__State': ...
    def get_close_code(self) -> 'int': ...
    def get_close_reason(self) -> 'str': ...
    def get_supported_protocols(self) -> 'PackedStringArray': ...
    def set_supported_protocols(self, protocols: 'PackedStringArray') -> None: ...
    def get_handshake_headers(self) -> 'PackedStringArray': ...
    def set_handshake_headers(self, protocols: 'PackedStringArray') -> None: ...
    def get_inbound_buffer_size(self) -> 'int': ...
    def set_inbound_buffer_size(self, buffer_size: 'int') -> None: ...
    def get_outbound_buffer_size(self) -> 'int': ...
    def set_outbound_buffer_size(self, buffer_size: 'int') -> None: ...
    def set_max_queued_packets(self, buffer_size: 'int') -> None: ...
    def get_max_queued_packets(self) -> 'int': ...
    def set_heartbeat_interval(self, interval: 'float') -> None: ...
    def get_heartbeat_interval(self) -> 'float': ...


class WebXRInterface(XRInterface):


    session_mode: 'str'
    required_features: 'str'
    optional_features: 'str'
    requested_reference_space_types: 'str'
    reference_space_type: 'str'
    enabled_features: 'str'
    visibility_state: 'str'
    session_supported: 'Signal[Callable[[str, bool], None]]'  # session_supported(session_mode: String, supported: bool)
    session_started: 'Signal[Callable[[], None]]'  # session_started()
    session_ended: 'Signal[Callable[[], None]]'  # session_ended()
    session_failed: 'Signal[Callable[[str], None]]'  # session_failed(message: String)
    selectstart: 'Signal[Callable[[int], None]]'  # selectstart(input_source_id: int)
    select: 'Signal[Callable[[int], None]]'  # select(input_source_id: int)
    selectend: 'Signal[Callable[[int], None]]'  # selectend(input_source_id: int)
    squeezestart: 'Signal[Callable[[int], None]]'  # squeezestart(input_source_id: int)
    squeeze: 'Signal[Callable[[int], None]]'  # squeeze(input_source_id: int)
    squeezeend: 'Signal[Callable[[int], None]]'  # squeezeend(input_source_id: int)
    visibility_state_changed: 'Signal[Callable[[], None]]'  # visibility_state_changed()
    reference_space_reset: 'Signal[Callable[[], None]]'  # reference_space_reset()
    display_refresh_rate_changed: 'Signal[Callable[[], None]]'  # display_refresh_rate_changed()

    def is_session_supported(self, session_mode: 'str') -> None: ...
    def set_session_mode(self, session_mode: 'str') -> None: ...
    def get_session_mode(self) -> 'str': ...
    def set_required_features(self, required_features: 'str') -> None: ...
    def get_required_features(self) -> 'str': ...
    def set_optional_features(self, optional_features: 'str') -> None: ...
    def get_optional_features(self) -> 'str': ...
    def get_reference_space_type(self) -> 'str': ...
    def get_enabled_features(self) -> 'str': ...
    def set_requested_reference_space_types(self, requested_reference_space_types: 'str') -> None: ...
    def get_requested_reference_space_types(self) -> 'str': ...
    def is_input_source_active(self, input_source_id: 'int') -> 'bool': ...
    def get_input_source_tracker(self, input_source_id: 'int') -> 'XRControllerTracker': ...
    def get_input_source_target_ray_mode(self, input_source_id: 'int') -> 'WebXRInterface__TargetRayMode': ...
    def get_visibility_state(self) -> 'str': ...
    def get_display_refresh_rate(self) -> 'float': ...
    def set_display_refresh_rate(self, refresh_rate: 'float') -> None: ...
    def get_available_display_refresh_rates(self) -> 'Array': ...


class Window(Viewport):


    mode: 'int'
    title: 'str'
    initial_position: 'int'
    position: 'Vector2i'
    size: 'Vector2i'
    current_screen: 'int'
    mouse_passthrough_polygon: 'PackedVector2Array'
    visible: 'bool'
    wrap_controls: 'bool'
    transient: 'bool'
    transient_to_focused: 'bool'
    exclusive: 'bool'
    unresizable: 'bool'
    borderless: 'bool'
    always_on_top: 'bool'
    transparent: 'bool'
    unfocusable: 'bool'
    popup_window: 'bool'
    extend_to_title: 'bool'
    mouse_passthrough: 'bool'
    sharp_corners: 'bool'
    exclude_from_capture: 'bool'
    force_native: 'bool'
    min_size: 'Vector2i'
    max_size: 'Vector2i'
    keep_title_visible: 'bool'
    content_scale_size: 'Vector2i'
    content_scale_mode: 'int'
    content_scale_aspect: 'int'
    content_scale_stretch: 'int'
    content_scale_factor: 'float'
    auto_translate: 'bool'
    theme: 'Theme'
    theme_type_variation: 'str'
    NOTIFICATION_VISIBILITY_CHANGED: 'int' = 30
    NOTIFICATION_THEME_CHANGED: 'int' = 32
    window_input: 'Signal[Callable[[InputEvent], None]]'  # window_input(event: InputEvent)
    files_dropped: 'Signal[Callable[[PackedStringArray], None]]'  # files_dropped(files: PackedStringArray)
    mouse_entered: 'Signal[Callable[[], None]]'  # mouse_entered()
    mouse_exited: 'Signal[Callable[[], None]]'  # mouse_exited()
    focus_entered: 'Signal[Callable[[], None]]'  # focus_entered()
    focus_exited: 'Signal[Callable[[], None]]'  # focus_exited()
    close_requested: 'Signal[Callable[[], None]]'  # close_requested()
    go_back_requested: 'Signal[Callable[[], None]]'  # go_back_requested()
    visibility_changed: 'Signal[Callable[[], None]]'  # visibility_changed()
    about_to_popup: 'Signal[Callable[[], None]]'  # about_to_popup()
    theme_changed: 'Signal[Callable[[], None]]'  # theme_changed()
    dpi_changed: 'Signal[Callable[[], None]]'  # dpi_changed()
    titlebar_changed: 'Signal[Callable[[], None]]'  # titlebar_changed()
    title_changed: 'Signal[Callable[[], None]]'  # title_changed()

    def _get_contents_minimum_size(self) -> 'Vector2': ...
    def set_title(self, title: 'str') -> None: ...
    def get_title(self) -> 'str': ...
    def get_window_id(self) -> 'int': ...
    def set_initial_position(self, initial_position: 'Window__WindowInitialPosition') -> None: ...
    def get_initial_position(self) -> 'Window__WindowInitialPosition': ...
    def set_current_screen(self, index: 'int') -> None: ...
    def get_current_screen(self) -> 'int': ...
    def set_position(self, position: 'Vector2i') -> None: ...
    def get_position(self) -> 'Vector2i': ...
    def move_to_center(self) -> None: ...
    def set_size(self, size: 'Vector2i') -> None: ...
    def get_size(self) -> 'Vector2i': ...
    def reset_size(self) -> None: ...
    def get_position_with_decorations(self) -> 'Vector2i': ...
    def get_size_with_decorations(self) -> 'Vector2i': ...
    def set_max_size(self, max_size: 'Vector2i') -> None: ...
    def get_max_size(self) -> 'Vector2i': ...
    def set_min_size(self, min_size: 'Vector2i') -> None: ...
    def get_min_size(self) -> 'Vector2i': ...
    def set_mode(self, mode: 'Window__Mode') -> None: ...
    def get_mode(self) -> 'Window__Mode': ...
    def set_flag(self, flag: 'Window__Flags', enabled: 'bool') -> None: ...
    def get_flag(self, flag: 'Window__Flags') -> 'bool': ...
    def is_maximize_allowed(self) -> 'bool': ...
    def request_attention(self) -> None: ...
    def move_to_foreground(self) -> None: ...
    def set_visible(self, visible: 'bool') -> None: ...
    def is_visible(self) -> 'bool': ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def set_transient(self, transient: 'bool') -> None: ...
    def is_transient(self) -> 'bool': ...
    def set_transient_to_focused(self, enable: 'bool') -> None: ...
    def is_transient_to_focused(self) -> 'bool': ...
    def set_exclusive(self, exclusive: 'bool') -> None: ...
    def is_exclusive(self) -> 'bool': ...
    def set_unparent_when_invisible(self, unparent: 'bool') -> None: ...
    def can_draw(self) -> 'bool': ...
    def has_focus(self) -> 'bool': ...
    def grab_focus(self) -> None: ...
    def start_drag(self) -> None: ...
    def start_resize(self, edge: 'DisplayServer__WindowResizeEdge') -> None: ...
    def set_ime_active(self, active: 'bool') -> None: ...
    def set_ime_position(self, position: 'Vector2i') -> None: ...
    def is_embedded(self) -> 'bool': ...
    def get_contents_minimum_size(self) -> 'Vector2': ...
    def set_force_native(self, force_native: 'bool') -> None: ...
    def get_force_native(self) -> 'bool': ...
    def set_content_scale_size(self, size: 'Vector2i') -> None: ...
    def get_content_scale_size(self) -> 'Vector2i': ...
    def set_content_scale_mode(self, mode: 'Window__ContentScaleMode') -> None: ...
    def get_content_scale_mode(self) -> 'Window__ContentScaleMode': ...
    def set_content_scale_aspect(self, aspect: 'Window__ContentScaleAspect') -> None: ...
    def get_content_scale_aspect(self) -> 'Window__ContentScaleAspect': ...
    def set_content_scale_stretch(self, stretch: 'Window__ContentScaleStretch') -> None: ...
    def get_content_scale_stretch(self) -> 'Window__ContentScaleStretch': ...
    def set_keep_title_visible(self, title_visible: 'bool') -> None: ...
    def get_keep_title_visible(self) -> 'bool': ...
    def set_content_scale_factor(self, factor: 'float') -> None: ...
    def get_content_scale_factor(self) -> 'float': ...
    def set_use_font_oversampling(self, enable: 'bool') -> None: ...
    def is_using_font_oversampling(self) -> 'bool': ...
    def set_mouse_passthrough_polygon(self, polygon: 'PackedVector2Array') -> None: ...
    def get_mouse_passthrough_polygon(self) -> 'PackedVector2Array': ...
    def set_wrap_controls(self, enable: 'bool') -> None: ...
    def is_wrapping_controls(self) -> 'bool': ...
    def child_controls_changed(self) -> None: ...
    def set_theme(self, theme: 'Theme') -> None: ...
    def get_theme(self) -> 'Theme': ...
    def set_theme_type_variation(self, theme_type: 'StringName') -> None: ...
    def get_theme_type_variation(self) -> 'StringName': ...
    def begin_bulk_theme_override(self) -> None: ...
    def end_bulk_theme_override(self) -> None: ...
    def add_theme_icon_override(self, name: 'StringName', texture: 'Texture2D') -> None: ...
    def add_theme_stylebox_override(self, name: 'StringName', stylebox: 'StyleBox') -> None: ...
    def add_theme_font_override(self, name: 'StringName', font: 'Font') -> None: ...
    def add_theme_font_size_override(self, name: 'StringName', font_size: 'int') -> None: ...
    def add_theme_color_override(self, name: 'StringName', color: 'Color') -> None: ...
    def add_theme_constant_override(self, name: 'StringName', constant: 'int') -> None: ...
    def remove_theme_icon_override(self, name: 'StringName') -> None: ...
    def remove_theme_stylebox_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_override(self, name: 'StringName') -> None: ...
    def remove_theme_font_size_override(self, name: 'StringName') -> None: ...
    def remove_theme_color_override(self, name: 'StringName') -> None: ...
    def remove_theme_constant_override(self, name: 'StringName') -> None: ...
    def get_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Texture2D': ...
    def get_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'StyleBox': ...
    def get_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Font': ...
    def get_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'int': ...
    def get_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'Color': ...
    def get_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'int': ...
    def has_theme_icon_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_stylebox_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_font_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_font_size_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_color_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_constant_override(self, name: 'StringName') -> 'bool': ...
    def has_theme_icon(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_stylebox(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_font(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_font_size(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_color(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def has_theme_constant(self, name: 'StringName', theme_type: 'StringName' = default('''&""''')) -> 'bool': ...
    def get_theme_default_base_scale(self) -> 'float': ...
    def get_theme_default_font(self) -> 'Font': ...
    def get_theme_default_font_size(self) -> 'int': ...
    def set_layout_direction(self, direction: 'Window__LayoutDirection') -> None: ...
    def get_layout_direction(self) -> 'Window__LayoutDirection': ...
    def is_layout_rtl(self) -> 'bool': ...
    def set_auto_translate(self, enable: 'bool') -> None: ...
    def is_auto_translating(self) -> 'bool': ...
    def popup(self, rect: 'Rect2i' = default('''Rect2i(0, 0, 0, 0)''')) -> None: ...
    def popup_on_parent(self, parent_rect: 'Rect2i') -> None: ...
    def popup_centered(self, minsize: 'Vector2i' = default('''Vector2i(0, 0)''')) -> None: ...
    def popup_centered_ratio(self, ratio: 'float' = 0.8) -> None: ...
    def popup_centered_clamped(self, minsize: 'Vector2i' = default('''Vector2i(0, 0)'''), fallback_ratio: 'float' = 0.75) -> None: ...
    def popup_exclusive(self, from_node: 'Node', rect: 'Rect2i' = default('''Rect2i(0, 0, 0, 0)''')) -> None: ...
    def popup_exclusive_on_parent(self, from_node: 'Node', parent_rect: 'Rect2i') -> None: ...
    def popup_exclusive_centered(self, from_node: 'Node', minsize: 'Vector2i' = default('''Vector2i(0, 0)''')) -> None: ...
    def popup_exclusive_centered_ratio(self, from_node: 'Node', ratio: 'float' = 0.8) -> None: ...
    def popup_exclusive_centered_clamped(self, from_node: 'Node', minsize: 'Vector2i' = default('''Vector2i(0, 0)'''), fallback_ratio: 'float' = 0.75) -> None: ...


class WorkerThreadPool(Object):



    def add_task(self, action: 'Callable', high_priority: 'bool' = False, description: 'str' = "") -> 'int': ...
    def is_task_completed(self, task_id: 'int') -> 'bool': ...
    def wait_for_task_completion(self, task_id: 'int') -> 'Error': ...
    def add_group_task(self, action: 'Callable', elements: 'int', tasks_needed: 'int' = -1, high_priority: 'bool' = False, description: 'str' = "") -> 'int': ...
    def is_group_task_completed(self, group_id: 'int') -> 'bool': ...
    def get_group_processed_element_count(self, group_id: 'int') -> 'int': ...
    def wait_for_group_task_completion(self, group_id: 'int') -> None: ...


class World2D(Resource):


    canvas: 'RID'
    space: 'RID'
    navigation_map: 'RID'
    direct_space_state: 'PhysicsDirectSpaceState2D'

    def get_canvas(self) -> 'RID': ...
    def get_space(self) -> 'RID': ...
    def get_navigation_map(self) -> 'RID': ...
    def get_direct_space_state(self) -> 'PhysicsDirectSpaceState2D': ...


class World3D(Resource):


    environment: 'Environment'
    fallback_environment: 'Environment'
    camera_attributes: 'CameraAttributesPractical' | 'CameraAttributesPhysical'
    space: 'RID'
    navigation_map: 'RID'
    scenario: 'RID'
    direct_space_state: 'PhysicsDirectSpaceState3D'

    def get_space(self) -> 'RID': ...
    def get_navigation_map(self) -> 'RID': ...
    def get_scenario(self) -> 'RID': ...
    def set_environment(self, env: 'Environment') -> None: ...
    def get_environment(self) -> 'Environment': ...
    def set_fallback_environment(self, env: 'Environment') -> None: ...
    def get_fallback_environment(self) -> 'Environment': ...
    def set_camera_attributes(self, attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    def get_direct_space_state(self) -> 'PhysicsDirectSpaceState3D': ...


class WorldBoundaryShape2D(Shape2D):


    normal: 'Vector2'
    distance: 'float'

    def set_normal(self, normal: 'Vector2') -> None: ...
    def get_normal(self) -> 'Vector2': ...
    def set_distance(self, distance: 'float') -> None: ...
    def get_distance(self) -> 'float': ...


class WorldBoundaryShape3D(Shape3D):


    plane: 'Plane'

    def set_plane(self, plane: 'Plane') -> None: ...
    def get_plane(self) -> 'Plane': ...


class WorldEnvironment(Node):


    environment: 'Environment'
    camera_attributes: 'CameraAttributesPractical' | 'CameraAttributesPhysical'
    compositor: 'Compositor'

    def set_environment(self, env: 'Environment') -> None: ...
    def get_environment(self) -> 'Environment': ...
    def set_camera_attributes(self, camera_attributes: 'CameraAttributes') -> None: ...
    def get_camera_attributes(self) -> 'CameraAttributes': ...
    def set_compositor(self, compositor: 'Compositor') -> None: ...
    def get_compositor(self) -> 'Compositor': ...


class X509Certificate(Resource):



    def save(self, path: 'str') -> 'Error': ...
    def load(self, path: 'str') -> 'Error': ...
    def save_to_string(self) -> 'str': ...
    def load_from_string(self, string: 'str') -> 'Error': ...


class XMLParser(RefCounted):



    def read(self) -> 'Error': ...
    def get_node_type(self) -> 'XMLParser__NodeType': ...
    def get_node_name(self) -> 'str': ...
    def get_node_data(self) -> 'str': ...
    def get_node_offset(self) -> 'int': ...
    def get_attribute_count(self) -> 'int': ...
    def get_attribute_name(self, idx: 'int') -> 'str': ...
    def get_attribute_value(self, idx: 'int') -> 'str': ...
    def has_attribute(self, name: 'str') -> 'bool': ...
    def get_named_attribute_value(self, name: 'str') -> 'str': ...
    def get_named_attribute_value_safe(self, name: 'str') -> 'str': ...
    def is_empty(self) -> 'bool': ...
    def get_current_line(self) -> 'int': ...
    def skip_section(self) -> None: ...
    def seek(self, position: 'int') -> 'Error': ...
    def open(self, file: 'str') -> 'Error': ...
    def open_buffer(self, buffer: 'PackedByteArray') -> 'Error': ...


class XRAnchor3D(XRNode3D):



    def get_size(self) -> 'Vector3': ...
    def get_plane(self) -> 'Plane': ...


class XRBodyModifier3D(SkeletonModifier3D):


    body_tracker: 'str'
    body_update: 'int'
    bone_update: 'int'

    def set_body_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_body_tracker(self) -> 'StringName': ...
    def set_body_update(self, body_update: 'XRBodyModifier3D__BodyUpdate') -> None: ...
    def get_body_update(self) -> 'XRBodyModifier3D__BodyUpdate': ...
    def set_bone_update(self, bone_update: 'XRBodyModifier3D__BoneUpdate') -> None: ...
    def get_bone_update(self) -> 'XRBodyModifier3D__BoneUpdate': ...


class XRBodyTracker(XRPositionalTracker):


    has_tracking_data: 'bool'
    body_flags: 'int'

    def set_has_tracking_data(self, has_data: 'bool') -> None: ...
    def get_has_tracking_data(self) -> 'bool': ...
    def set_body_flags(self, flags: 'XRBodyTracker__BodyFlags') -> None: ...
    def get_body_flags(self) -> 'XRBodyTracker__BodyFlags': ...
    def set_joint_flags(self, joint: 'XRBodyTracker__Joint', flags: 'XRBodyTracker__JointFlags') -> None: ...
    def get_joint_flags(self, joint: 'XRBodyTracker__Joint') -> 'XRBodyTracker__JointFlags': ...
    def set_joint_transform(self, joint: 'XRBodyTracker__Joint', transform: 'Transform3D') -> None: ...
    def get_joint_transform(self, joint: 'XRBodyTracker__Joint') -> 'Transform3D': ...


class XRCamera3D(Camera3D): ...


class XRController3D(XRNode3D):


    button_pressed: 'Signal[Callable[[str], None]]'  # button_pressed(name: String)
    button_released: 'Signal[Callable[[str], None]]'  # button_released(name: String)
    input_float_changed: 'Signal[Callable[[str, float], None]]'  # input_float_changed(name: String, value: float)
    input_vector2_changed: 'Signal[Callable[[str, Vector2], None]]'  # input_vector2_changed(name: String, value: Vector2)
    profile_changed: 'Signal[Callable[[str], None]]'  # profile_changed(role: String)

    def is_button_pressed(self, name: 'StringName') -> 'bool': ...
    def get_input(self, name: 'StringName') -> 'Variant': ...
    def get_float(self, name: 'StringName') -> 'float': ...
    def get_vector2(self, name: 'StringName') -> 'Vector2': ...
    def get_tracker_hand(self) -> 'XRPositionalTracker__TrackerHand': ...


class XRControllerTracker(XRPositionalTracker): ...


class XRFaceModifier3D(Node3D):


    face_tracker: 'str'
    target: 'NodePath'

    def set_face_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_face_tracker(self) -> 'StringName': ...
    def set_target(self, target: 'NodePath') -> None: ...
    def get_target(self) -> 'NodePath': ...


class XRFaceTracker(XRTracker):


    blend_shapes: 'PackedFloat32Array'

    def get_blend_shape(self, blend_shape: 'XRFaceTracker__BlendShapeEntry') -> 'float': ...
    def set_blend_shape(self, blend_shape: 'XRFaceTracker__BlendShapeEntry', weight: 'float') -> None: ...
    def get_blend_shapes(self) -> 'PackedFloat32Array': ...
    def set_blend_shapes(self, weights: 'PackedFloat32Array') -> None: ...


class XRHandModifier3D(SkeletonModifier3D):


    hand_tracker: 'str'
    bone_update: 'int'

    def set_hand_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_hand_tracker(self) -> 'StringName': ...
    def set_bone_update(self, bone_update: 'XRHandModifier3D__BoneUpdate') -> None: ...
    def get_bone_update(self) -> 'XRHandModifier3D__BoneUpdate': ...


class XRHandTracker(XRPositionalTracker):


    has_tracking_data: 'bool'
    hand_tracking_source: 'int'

    def set_has_tracking_data(self, has_data: 'bool') -> None: ...
    def get_has_tracking_data(self) -> 'bool': ...
    def set_hand_tracking_source(self, source: 'XRHandTracker__HandTrackingSource') -> None: ...
    def get_hand_tracking_source(self) -> 'XRHandTracker__HandTrackingSource': ...
    def set_hand_joint_flags(self, joint: 'XRHandTracker__HandJoint', flags: 'XRHandTracker__HandJointFlags') -> None: ...
    def get_hand_joint_flags(self, joint: 'XRHandTracker__HandJoint') -> 'XRHandTracker__HandJointFlags': ...
    def set_hand_joint_transform(self, joint: 'XRHandTracker__HandJoint', transform: 'Transform3D') -> None: ...
    def get_hand_joint_transform(self, joint: 'XRHandTracker__HandJoint') -> 'Transform3D': ...
    def set_hand_joint_radius(self, joint: 'XRHandTracker__HandJoint', radius: 'float') -> None: ...
    def get_hand_joint_radius(self, joint: 'XRHandTracker__HandJoint') -> 'float': ...
    def set_hand_joint_linear_velocity(self, joint: 'XRHandTracker__HandJoint', linear_velocity: 'Vector3') -> None: ...
    def get_hand_joint_linear_velocity(self, joint: 'XRHandTracker__HandJoint') -> 'Vector3': ...
    def set_hand_joint_angular_velocity(self, joint: 'XRHandTracker__HandJoint', angular_velocity: 'Vector3') -> None: ...
    def get_hand_joint_angular_velocity(self, joint: 'XRHandTracker__HandJoint') -> 'Vector3': ...


class XRInterface(RefCounted):


    interface_is_primary: 'bool'
    xr_play_area_mode: 'int'
    environment_blend_mode: 'int'
    ar_is_anchor_detection_enabled: 'bool'
    play_area_changed: 'Signal[Callable[[int], None]]'  # play_area_changed(mode: int)

    def get_name(self) -> 'StringName': ...
    def get_capabilities(self) -> 'int': ...
    def is_primary(self) -> 'bool': ...
    def set_primary(self, primary: 'bool') -> None: ...
    def is_initialized(self) -> 'bool': ...
    def initialize(self) -> 'bool': ...
    def uninitialize(self) -> None: ...
    def get_system_info(self) -> 'Dictionary': ...
    def get_tracking_status(self) -> 'XRInterface__TrackingStatus': ...
    def get_render_target_size(self) -> 'Vector2': ...
    def get_view_count(self) -> 'int': ...
    def trigger_haptic_pulse(self, action_name: 'str', tracker_name: 'StringName', frequency: 'float', amplitude: 'float', duration_sec: 'float', delay_sec: 'float') -> None: ...
    def supports_play_area_mode(self, mode: 'XRInterface__PlayAreaMode') -> 'bool': ...
    def get_play_area_mode(self) -> 'XRInterface__PlayAreaMode': ...
    def set_play_area_mode(self, mode: 'XRInterface__PlayAreaMode') -> 'bool': ...
    def get_play_area(self) -> 'PackedVector3Array': ...
    def get_anchor_detection_is_enabled(self) -> 'bool': ...
    def set_anchor_detection_is_enabled(self, enable: 'bool') -> None: ...
    def get_camera_feed_id(self) -> 'int': ...
    def is_passthrough_supported(self) -> 'bool': ...
    def is_passthrough_enabled(self) -> 'bool': ...
    def start_passthrough(self) -> 'bool': ...
    def stop_passthrough(self) -> None: ...
    def get_transform_for_view(self, view: 'int', cam_transform: 'Transform3D') -> 'Transform3D': ...
    def get_projection_for_view(self, view: 'int', aspect: 'float', near: 'float', far: 'float') -> 'Projection': ...
    def get_supported_environment_blend_modes(self) -> 'Array': ...
    def set_environment_blend_mode(self, mode: 'XRInterface__EnvironmentBlendMode') -> 'bool': ...
    def get_environment_blend_mode(self) -> 'XRInterface__EnvironmentBlendMode': ...


class XRInterfaceExtension(XRInterface):



    def _get_name(self) -> 'StringName': ...
    def _get_capabilities(self) -> 'int': ...
    def _is_initialized(self) -> 'bool': ...
    def _initialize(self) -> 'bool': ...
    def _uninitialize(self) -> None: ...
    def _get_system_info(self) -> 'Dictionary': ...
    def _supports_play_area_mode(self, mode: 'XRInterface__PlayAreaMode') -> 'bool': ...
    def _get_play_area_mode(self) -> 'XRInterface__PlayAreaMode': ...
    def _set_play_area_mode(self, mode: 'XRInterface__PlayAreaMode') -> 'bool': ...
    def _get_play_area(self) -> 'PackedVector3Array': ...
    def _get_render_target_size(self) -> 'Vector2': ...
    def _get_view_count(self) -> 'int': ...
    def _get_camera_transform(self) -> 'Transform3D': ...
    def _get_transform_for_view(self, view: 'int', cam_transform: 'Transform3D') -> 'Transform3D': ...
    def _get_projection_for_view(self, view: 'int', aspect: 'float', z_near: 'float', z_far: 'float') -> 'PackedFloat64Array': ...
    def _get_vrs_texture(self) -> 'RID': ...
    def _process(self) -> None: ...
    def _pre_render(self) -> None: ...
    def _pre_draw_viewport(self, render_target: 'RID') -> 'bool': ...
    def _post_draw_viewport(self, render_target: 'RID', screen_rect: 'Rect2') -> None: ...
    def _end_frame(self) -> None: ...
    def _get_suggested_tracker_names(self) -> 'PackedStringArray': ...
    def _get_suggested_pose_names(self, tracker_name: 'StringName') -> 'PackedStringArray': ...
    def _get_tracking_status(self) -> 'XRInterface__TrackingStatus': ...
    def _trigger_haptic_pulse(self, action_name: 'str', tracker_name: 'StringName', frequency: 'float', amplitude: 'float', duration_sec: 'float', delay_sec: 'float') -> None: ...
    def _get_anchor_detection_is_enabled(self) -> 'bool': ...
    def _set_anchor_detection_is_enabled(self, enabled: 'bool') -> None: ...
    def _get_camera_feed_id(self) -> 'int': ...
    def _get_color_texture(self) -> 'RID': ...
    def _get_depth_texture(self) -> 'RID': ...
    def _get_velocity_texture(self) -> 'RID': ...
    def get_color_texture(self) -> 'RID': ...
    def get_depth_texture(self) -> 'RID': ...
    def get_velocity_texture(self) -> 'RID': ...
    def add_blit(self, render_target: 'RID', src_rect: 'Rect2', dst_rect: 'Rect2i', use_layer: 'bool', layer: 'int', apply_lens_distortion: 'bool', eye_center: 'Vector2', k1: 'float', k2: 'float', upscale: 'float', aspect_ratio: 'float') -> None: ...
    def get_render_target_texture(self, render_target: 'RID') -> 'RID': ...


class XRNode3D(Node3D):


    tracker: 'str'
    pose: 'str'
    show_when_tracked: 'bool'
    tracking_changed: 'Signal[Callable[[bool], None]]'  # tracking_changed(tracking: bool)

    def set_tracker(self, tracker_name: 'StringName') -> None: ...
    def get_tracker(self) -> 'StringName': ...
    def set_pose_name(self, pose: 'StringName') -> None: ...
    def get_pose_name(self) -> 'StringName': ...
    def set_show_when_tracked(self, show: 'bool') -> None: ...
    def get_show_when_tracked(self) -> 'bool': ...
    def get_is_active(self) -> 'bool': ...
    def get_has_tracking_data(self) -> 'bool': ...
    def get_pose(self) -> 'XRPose': ...
    def trigger_haptic_pulse(self, action_name: 'str', frequency: 'float', amplitude: 'float', duration_sec: 'float', delay_sec: 'float') -> None: ...


class XROrigin3D(Node3D):


    world_scale: 'float'
    current: 'bool'

    def set_world_scale(self, world_scale: 'float') -> None: ...
    def get_world_scale(self) -> 'float': ...
    def set_current(self, enabled: 'bool') -> None: ...
    def is_current(self) -> 'bool': ...


class XRPose(RefCounted):


    has_tracking_data: 'bool'
    name: 'str'
    transform: 'str'
    linear_velocity: 'str'
    angular_velocity: 'str'
    tracking_confidence: 'int'

    def set_has_tracking_data(self, has_tracking_data: 'bool') -> None: ...
    def get_has_tracking_data(self) -> 'bool': ...
    def set_name(self, name: 'StringName') -> None: ...
    def get_name(self) -> 'StringName': ...
    def set_transform(self, transform: 'Transform3D') -> None: ...
    def get_transform(self) -> 'Transform3D': ...
    def get_adjusted_transform(self) -> 'Transform3D': ...
    def set_linear_velocity(self, velocity: 'Vector3') -> None: ...
    def get_linear_velocity(self) -> 'Vector3': ...
    def set_angular_velocity(self, velocity: 'Vector3') -> None: ...
    def get_angular_velocity(self) -> 'Vector3': ...
    def set_tracking_confidence(self, tracking_confidence: 'XRPose__TrackingConfidence') -> None: ...
    def get_tracking_confidence(self) -> 'XRPose__TrackingConfidence': ...


class XRPositionalTracker(XRTracker):


    profile: 'str'
    hand: 'int'
    pose_changed: 'Signal[Callable[[XRPose], None]]'  # pose_changed(pose: XRPose)
    pose_lost_tracking: 'Signal[Callable[[XRPose], None]]'  # pose_lost_tracking(pose: XRPose)
    button_pressed: 'Signal[Callable[[str], None]]'  # button_pressed(name: String)
    button_released: 'Signal[Callable[[str], None]]'  # button_released(name: String)
    input_float_changed: 'Signal[Callable[[str, float], None]]'  # input_float_changed(name: String, value: float)
    input_vector2_changed: 'Signal[Callable[[str, Vector2], None]]'  # input_vector2_changed(name: String, vector: Vector2)
    profile_changed: 'Signal[Callable[[str], None]]'  # profile_changed(role: String)

    def get_tracker_profile(self) -> 'str': ...
    def set_tracker_profile(self, profile: 'str') -> None: ...
    def get_tracker_hand(self) -> 'XRPositionalTracker__TrackerHand': ...
    def set_tracker_hand(self, hand: 'XRPositionalTracker__TrackerHand') -> None: ...
    def has_pose(self, name: 'StringName') -> 'bool': ...
    def get_pose(self, name: 'StringName') -> 'XRPose': ...
    def invalidate_pose(self, name: 'StringName') -> None: ...
    def set_pose(self, name: 'StringName', transform: 'Transform3D', linear_velocity: 'Vector3', angular_velocity: 'Vector3', tracking_confidence: 'XRPose__TrackingConfidence') -> None: ...
    def get_input(self, name: 'StringName') -> 'Variant': ...
    def set_input(self, name: 'StringName', value: 'Variant') -> None: ...


class XRServer(Object):


    world_scale: 'float'
    world_origin: 'Vector3'
    camera_locked_to_origin: 'bool'
    primary_interface: 'Object'
    reference_frame_changed: 'Signal[Callable[[], None]]'  # reference_frame_changed()
    interface_added: 'Signal[Callable[[StringName], None]]'  # interface_added(interface_name: StringName)
    interface_removed: 'Signal[Callable[[StringName], None]]'  # interface_removed(interface_name: StringName)
    tracker_added: 'Signal[Callable[[StringName, int], None]]'  # tracker_added(tracker_name: StringName, type: int)
    tracker_updated: 'Signal[Callable[[StringName, int], None]]'  # tracker_updated(tracker_name: StringName, type: int)
    tracker_removed: 'Signal[Callable[[StringName, int], None]]'  # tracker_removed(tracker_name: StringName, type: int)

    def get_world_scale(self) -> 'float': ...
    def set_world_scale(self, scale: 'float') -> None: ...
    def get_world_origin(self) -> 'Transform3D': ...
    def set_world_origin(self, world_origin: 'Transform3D') -> None: ...
    def get_reference_frame(self) -> 'Transform3D': ...
    def clear_reference_frame(self) -> None: ...
    def center_on_hmd(self, rotation_mode: 'XRServer__RotationMode', keep_height: 'bool') -> None: ...
    def get_hmd_transform(self) -> 'Transform3D': ...
    def set_camera_locked_to_origin(self, enabled: 'bool') -> None: ...
    def is_camera_locked_to_origin(self) -> 'bool': ...
    def add_interface(self, interface: 'XRInterface') -> None: ...
    def get_interface_count(self) -> 'int': ...
    def remove_interface(self, interface: 'XRInterface') -> None: ...
    def get_interface(self, idx: 'int') -> 'XRInterface': ...
    def get_interfaces(self) -> 'Array'['Dictionary']: ...
    def find_interface(self, name: 'str') -> 'XRInterface': ...
    def add_tracker(self, tracker: 'XRTracker') -> None: ...
    def remove_tracker(self, tracker: 'XRTracker') -> None: ...
    def get_trackers(self, tracker_types: 'int') -> 'Dictionary': ...
    def get_tracker(self, tracker_name: 'StringName') -> 'XRTracker': ...
    def get_primary_interface(self) -> 'XRInterface': ...
    def set_primary_interface(self, interface: 'XRInterface') -> None: ...


class XRTracker(RefCounted):


    type: 'int'
    name: 'str'
    description: 'str'

    def get_tracker_type(self) -> 'XRServer__TrackerType': ...
    def set_tracker_type(self, type: 'XRServer__TrackerType') -> None: ...
    def get_tracker_name(self) -> 'StringName': ...
    def set_tracker_name(self, name: 'StringName') -> None: ...
    def get_tracker_desc(self) -> 'str': ...
    def set_tracker_desc(self, description: 'str') -> None: ...


class XRVRS(Object):


    vrs_min_radius: 'float'
    vrs_strength: 'float'
    vrs_render_region: 'Rect2i'

    def get_vrs_min_radius(self) -> 'float': ...
    def set_vrs_min_radius(self, radius: 'float') -> None: ...
    def get_vrs_strength(self) -> 'float': ...
    def set_vrs_strength(self, strength: 'float') -> None: ...
    def get_vrs_render_region(self) -> 'Rect2i': ...
    def set_vrs_render_region(self, render_region: 'Rect2i') -> None: ...
    def make_vrs_texture(self, target_size: 'Vector2', eye_foci: 'PackedVector2Array') -> 'RID': ...


class ZIPPacker(RefCounted):



    def open(self, path: 'str', append: 'ZIPPacker__ZipAppend' = 0) -> 'Error': ...
    def start_file(self, path: 'str') -> 'Error': ...
    def write_file(self, data: 'PackedByteArray') -> 'Error': ...
    def close_file(self) -> 'Error': ...
    def close(self) -> 'Error': ...


class ZIPReader(RefCounted):



    def open(self, path: 'str') -> 'Error': ...
    def close(self) -> 'Error': ...
    def get_files(self) -> 'PackedStringArray': ...
    def read_file(self, path: 'str', case_sensitive: 'bool' = True) -> 'PackedByteArray': ...
    def file_exists(self, path: 'str', case_sensitive: 'bool' = True) -> 'bool': ...




class Bool:



    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, bool: 'bool') -> 'bool': ...
    def __ne__(self, bool: 'bool') -> 'bool': ...
    def __lt__(self, bool: 'bool') -> 'bool': ...
    def __gt__(self, bool: 'bool') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Int:



    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'int': ...
    def __invert__(self) -> 'int': ...
    def __eq__(self, int: 'int') -> 'bool': ...
    def __ne__(self, int: 'int') -> 'bool': ...
    def __lt__(self, int: 'int') -> 'bool': ...
    def __le__(self, int: 'int') -> 'bool': ...
    def __gt__(self, int: 'int') -> 'bool': ...
    def __ge__(self, int: 'int') -> 'bool': ...
    def __add__(self, int: 'int') -> 'int': ...
    def __sub__(self, int: 'int') -> 'int': ...
    def __mul__(self, int: 'int') -> 'int': ...
    def __truediv__(self, int: 'int') -> 'int': ...
    def __mod__(self, int: 'int') -> 'int': ...
    def __pow__(self, int: 'int') -> 'int': ...
    def __lshift__(self, int: 'int') -> 'int': ...
    def __rshift__(self, int: 'int') -> 'int': ...
    def __and__(self, int: 'int') -> 'int': ...
    def __or__(self, int: 'int') -> 'int': ...
    def __xor__(self, int: 'int') -> 'int': ...
    def __eq__(self, float: 'float') -> 'bool': ...
    def __ne__(self, float: 'float') -> 'bool': ...
    def __lt__(self, float: 'float') -> 'bool': ...
    def __le__(self, float: 'float') -> 'bool': ...
    def __gt__(self, float: 'float') -> 'bool': ...
    def __ge__(self, float: 'float') -> 'bool': ...
    def __add__(self, float: 'float') -> 'float': ...
    def __sub__(self, float: 'float') -> 'float': ...
    def __mul__(self, float: 'float') -> 'float': ...
    def __truediv__(self, float: 'float') -> 'float': ...
    def __pow__(self, float: 'float') -> 'float': ...
    def __mul__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __mul__(self, Vector2i: 'Vector2i') -> 'Vector2i': ...
    def __mul__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __mul__(self, Vector3i: 'Vector3i') -> 'Vector3i': ...
    def __mul__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __mul__(self, Vector4i: 'Vector4i') -> 'Vector4i': ...
    def __mul__(self, Quaternion: 'Quaternion') -> 'Quaternion': ...
    def __mul__(self, Color: 'Color') -> 'Color': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __contains__(self, PackedByteArray: 'PackedByteArray') -> 'bool': ...
    def __contains__(self, PackedInt32Array: 'PackedInt32Array') -> 'bool': ...
    def __contains__(self, PackedInt64Array: 'PackedInt64Array') -> 'bool': ...
    def __contains__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'bool': ...
    def __contains__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'bool': ...


class Float:



    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'float': ...
    def __eq__(self, int: 'int') -> 'bool': ...
    def __ne__(self, int: 'int') -> 'bool': ...
    def __lt__(self, int: 'int') -> 'bool': ...
    def __le__(self, int: 'int') -> 'bool': ...
    def __gt__(self, int: 'int') -> 'bool': ...
    def __ge__(self, int: 'int') -> 'bool': ...
    def __add__(self, int: 'int') -> 'float': ...
    def __sub__(self, int: 'int') -> 'float': ...
    def __mul__(self, int: 'int') -> 'float': ...
    def __truediv__(self, int: 'int') -> 'float': ...
    def __pow__(self, int: 'int') -> 'float': ...
    def __eq__(self, float: 'float') -> 'bool': ...
    def __ne__(self, float: 'float') -> 'bool': ...
    def __lt__(self, float: 'float') -> 'bool': ...
    def __le__(self, float: 'float') -> 'bool': ...
    def __gt__(self, float: 'float') -> 'bool': ...
    def __ge__(self, float: 'float') -> 'bool': ...
    def __add__(self, float: 'float') -> 'float': ...
    def __sub__(self, float: 'float') -> 'float': ...
    def __mul__(self, float: 'float') -> 'float': ...
    def __truediv__(self, float: 'float') -> 'float': ...
    def __pow__(self, float: 'float') -> 'float': ...
    def __mul__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __mul__(self, Vector2i: 'Vector2i') -> 'Vector2': ...
    def __mul__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __mul__(self, Vector3i: 'Vector3i') -> 'Vector3': ...
    def __mul__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __mul__(self, Vector4i: 'Vector4i') -> 'Vector4': ...
    def __mul__(self, Quaternion: 'Quaternion') -> 'Quaternion': ...
    def __mul__(self, Color: 'Color') -> 'Color': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __contains__(self, PackedByteArray: 'PackedByteArray') -> 'bool': ...
    def __contains__(self, PackedInt32Array: 'PackedInt32Array') -> 'bool': ...
    def __contains__(self, PackedInt64Array: 'PackedInt64Array') -> 'bool': ...
    def __contains__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'bool': ...
    def __contains__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'bool': ...


class String:



    def casecmp_to(self, to: 'str') -> 'int': ...
    def nocasecmp_to(self, to: 'str') -> 'int': ...
    def naturalcasecmp_to(self, to: 'str') -> 'int': ...
    def naturalnocasecmp_to(self, to: 'str') -> 'int': ...
    def filecasecmp_to(self, to: 'str') -> 'int': ...
    def filenocasecmp_to(self, to: 'str') -> 'int': ...
    def length(self) -> 'int': ...
    def substr(self, from_: 'int', len: 'int' = -1) -> 'str': ...
    def get_slice(self, delimiter: 'str', slice: 'int') -> 'str': ...
    def get_slicec(self, delimiter: 'int', slice: 'int') -> 'str': ...
    def get_slice_count(self, delimiter: 'str') -> 'int': ...
    def find(self, what: 'str', from_: 'int' = 0) -> 'int': ...
    def findn(self, what: 'str', from_: 'int' = 0) -> 'int': ...
    def count(self, what: 'str', from_: 'int' = 0, to: 'int' = 0) -> 'int': ...
    def countn(self, what: 'str', from_: 'int' = 0, to: 'int' = 0) -> 'int': ...
    def rfind(self, what: 'str', from_: 'int' = -1) -> 'int': ...
    def rfindn(self, what: 'str', from_: 'int' = -1) -> 'int': ...
    def match(self, expr: 'str') -> 'bool': ...
    def matchn(self, expr: 'str') -> 'bool': ...
    def begins_with(self, text: 'str') -> 'bool': ...
    def ends_with(self, text: 'str') -> 'bool': ...
    def is_subsequence_of(self, text: 'str') -> 'bool': ...
    def is_subsequence_ofn(self, text: 'str') -> 'bool': ...
    def bigrams(self) -> 'PackedStringArray': ...
    def similarity(self, text: 'str') -> 'float': ...
    def format(self, values: 'Variant', placeholder: 'str' = "{_}") -> 'str': ...
    def replace(self, what: 'str', forwhat: 'str') -> 'str': ...
    def replacen(self, what: 'str', forwhat: 'str') -> 'str': ...
    def repeat(self, count: 'int') -> 'str': ...
    def reverse(self) -> 'str': ...
    def insert(self, position: 'int', what: 'str') -> 'str': ...
    def erase(self, position: 'int', chars: 'int' = 1) -> 'str': ...
    def capitalize(self) -> 'str': ...
    def to_camel_case(self) -> 'str': ...
    def to_pascal_case(self) -> 'str': ...
    def to_snake_case(self) -> 'str': ...
    def split(self, delimiter: 'str' = "", allow_empty: 'bool' = True, maxsplit: 'int' = 0) -> 'PackedStringArray': ...
    def rsplit(self, delimiter: 'str' = "", allow_empty: 'bool' = True, maxsplit: 'int' = 0) -> 'PackedStringArray': ...
    def split_floats(self, delimiter: 'str', allow_empty: 'bool' = True) -> 'PackedFloat64Array': ...
    def join(self, parts: 'PackedStringArray') -> 'str': ...
    def to_upper(self) -> 'str': ...
    def to_lower(self) -> 'str': ...
    def left(self, length: 'int') -> 'str': ...
    def right(self, length: 'int') -> 'str': ...
    def strip_edges(self, left: 'bool' = True, right: 'bool' = True) -> 'str': ...
    def strip_escapes(self) -> 'str': ...
    def lstrip(self, chars: 'str') -> 'str': ...
    def rstrip(self, chars: 'str') -> 'str': ...
    def get_extension(self) -> 'str': ...
    def get_basename(self) -> 'str': ...
    def path_join(self, file: 'str') -> 'str': ...
    def unicode_at(self, at: 'int') -> 'int': ...
    def indent(self, prefix: 'str') -> 'str': ...
    def dedent(self) -> 'str': ...
    def hash(self) -> 'int': ...
    def md5_text(self) -> 'str': ...
    def sha1_text(self) -> 'str': ...
    def sha256_text(self) -> 'str': ...
    def md5_buffer(self) -> 'PackedByteArray': ...
    def sha1_buffer(self) -> 'PackedByteArray': ...
    def sha256_buffer(self) -> 'PackedByteArray': ...
    def is_empty(self) -> 'bool': ...
    def contains(self, what: 'str') -> 'bool': ...
    def containsn(self, what: 'str') -> 'bool': ...
    def is_absolute_path(self) -> 'bool': ...
    def is_relative_path(self) -> 'bool': ...
    def simplify_path(self) -> 'str': ...
    def get_base_dir(self) -> 'str': ...
    def get_file(self) -> 'str': ...
    def xml_escape(self, escape_quotes: 'bool' = False) -> 'str': ...
    def xml_unescape(self) -> 'str': ...
    def uri_encode(self) -> 'str': ...
    def uri_decode(self) -> 'str': ...
    def c_escape(self) -> 'str': ...
    def c_unescape(self) -> 'str': ...
    def json_escape(self) -> 'str': ...
    def validate_node_name(self) -> 'str': ...
    def validate_filename(self) -> 'str': ...
    def is_valid_ascii_identifier(self) -> 'bool': ...
    def is_valid_unicode_identifier(self) -> 'bool': ...
    def is_valid_identifier(self) -> 'bool': ...
    def is_valid_int(self) -> 'bool': ...
    def is_valid_float(self) -> 'bool': ...
    def is_valid_hex_number(self, with_prefix: 'bool' = False) -> 'bool': ...
    def is_valid_html_color(self) -> 'bool': ...
    def is_valid_ip_address(self) -> 'bool': ...
    def is_valid_filename(self) -> 'bool': ...
    def to_int(self) -> 'int': ...
    def to_float(self) -> 'float': ...
    def hex_to_int(self) -> 'int': ...
    def bin_to_int(self) -> 'int': ...
    def lpad(self, min_length: 'int', character: 'str' = " ") -> 'str': ...
    def rpad(self, min_length: 'int', character: 'str' = " ") -> 'str': ...
    def pad_decimals(self, digits: 'int') -> 'str': ...
    def pad_zeros(self, digits: 'int') -> 'str': ...
    def trim_prefix(self, prefix: 'str') -> 'str': ...
    def trim_suffix(self, suffix: 'str') -> 'str': ...
    def to_ascii_buffer(self) -> 'PackedByteArray': ...
    def to_utf8_buffer(self) -> 'PackedByteArray': ...
    def to_utf16_buffer(self) -> 'PackedByteArray': ...
    def to_utf32_buffer(self) -> 'PackedByteArray': ...
    def hex_decode(self) -> 'PackedByteArray': ...
    def to_wchar_buffer(self) -> 'PackedByteArray': ...
    @staticmethod
    def num_scientific(number: 'float') -> 'str': ...
    @staticmethod
    def num(number: 'float', decimals: 'int' = -1) -> 'str': ...
    @staticmethod
    def num_int64(number: 'int', base: 'int' = 10, capitalize_hex: 'bool' = False) -> 'str': ...
    @staticmethod
    def num_uint64(number: 'int', base: 'int' = 10, capitalize_hex: 'bool' = False) -> 'str': ...
    @staticmethod
    def chr(char: 'int') -> 'str': ...
    @staticmethod
    def humanize_size(size: 'int') -> 'str': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mod__(self, Variant: 'Variant') -> 'str': ...
    def __mod__(self, bool: 'bool') -> 'str': ...
    def __mod__(self, int: 'int') -> 'str': ...
    def __mod__(self, float: 'float') -> 'str': ...
    def __eq__(self, String: 'str') -> 'bool': ...
    def __ne__(self, String: 'str') -> 'bool': ...
    def __lt__(self, String: 'str') -> 'bool': ...
    def __le__(self, String: 'str') -> 'bool': ...
    def __gt__(self, String: 'str') -> 'bool': ...
    def __ge__(self, String: 'str') -> 'bool': ...
    def __add__(self, String: 'str') -> 'str': ...
    def __mod__(self, String: 'str') -> 'str': ...
    def __contains__(self, String: 'str') -> 'bool': ...
    def __mod__(self, Vector2: 'Vector2') -> 'str': ...
    def __mod__(self, Vector2i: 'Vector2i') -> 'str': ...
    def __mod__(self, Rect2: 'Rect2') -> 'str': ...
    def __mod__(self, Rect2i: 'Rect2i') -> 'str': ...
    def __mod__(self, Vector3: 'Vector3') -> 'str': ...
    def __mod__(self, Vector3i: 'Vector3i') -> 'str': ...
    def __mod__(self, Transform2D: 'Transform2D') -> 'str': ...
    def __mod__(self, Vector4: 'Vector4') -> 'str': ...
    def __mod__(self, Vector4i: 'Vector4i') -> 'str': ...
    def __mod__(self, Plane: 'Plane') -> 'str': ...
    def __mod__(self, Quaternion: 'Quaternion') -> 'str': ...
    def __mod__(self, AABB: 'AABB') -> 'str': ...
    def __mod__(self, Basis: 'Basis') -> 'str': ...
    def __mod__(self, Transform3D: 'Transform3D') -> 'str': ...
    def __mod__(self, Projection: 'Projection') -> 'str': ...
    def __mod__(self, Color: 'Color') -> 'str': ...
    def __eq__(self, StringName: 'StringName') -> 'bool': ...
    def __ne__(self, StringName: 'StringName') -> 'bool': ...
    def __add__(self, StringName: 'StringName') -> 'str': ...
    def __mod__(self, StringName: 'StringName') -> 'str': ...
    def __contains__(self, StringName: 'StringName') -> 'bool': ...
    def __mod__(self, NodePath: 'NodePath') -> 'str': ...
    def __mod__(self, Object: 'Object') -> 'str': ...
    def __contains__(self, Object: 'Object') -> 'bool': ...
    def __mod__(self, Callable: 'Callable') -> 'str': ...
    def __mod__(self, Signal: 'Signal') -> 'str': ...
    def __mod__(self, Dictionary: 'Dictionary') -> 'str': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __mod__(self, Array: 'Array') -> 'str': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __mod__(self, PackedByteArray: 'PackedByteArray') -> 'str': ...
    def __mod__(self, PackedInt32Array: 'PackedInt32Array') -> 'str': ...
    def __mod__(self, PackedInt64Array: 'PackedInt64Array') -> 'str': ...
    def __mod__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'str': ...
    def __mod__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'str': ...
    def __mod__(self, PackedStringArray: 'PackedStringArray') -> 'str': ...
    def __contains__(self, PackedStringArray: 'PackedStringArray') -> 'bool': ...
    def __mod__(self, PackedVector2Array: 'PackedVector2Array') -> 'str': ...
    def __mod__(self, PackedVector3Array: 'PackedVector3Array') -> 'str': ...
    def __mod__(self, PackedColorArray: 'PackedColorArray') -> 'str': ...
    def __mod__(self, PackedVector4Array: 'PackedVector4Array') -> 'str': ...


class Vector2:


    ZERO: 'Vector2' = default('''Vector2(0, 0)''')
    ONE: 'Vector2' = default('''Vector2(1, 1)''')
    INF: 'Vector2' = default('''Vector2(inf, inf)''')
    LEFT: 'Vector2' = default('''Vector2(-1, 0)''')
    RIGHT: 'Vector2' = default('''Vector2(1, 0)''')
    UP: 'Vector2' = default('''Vector2(0, -1)''')
    DOWN: 'Vector2' = default('''Vector2(0, 1)''')

    def angle(self) -> 'float': ...
    def angle_to(self, to: 'Vector2') -> 'float': ...
    def angle_to_point(self, to: 'Vector2') -> 'float': ...
    def direction_to(self, to: 'Vector2') -> 'Vector2': ...
    def distance_to(self, to: 'Vector2') -> 'float': ...
    def distance_squared_to(self, to: 'Vector2') -> 'float': ...
    def length(self) -> 'float': ...
    def length_squared(self) -> 'float': ...
    def limit_length(self, length: 'float' = 1.0) -> 'Vector2': ...
    def normalized(self) -> 'Vector2': ...
    def is_normalized(self) -> 'bool': ...
    def is_equal_approx(self, to: 'Vector2') -> 'bool': ...
    def is_zero_approx(self) -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def posmod(self, mod: 'float') -> 'Vector2': ...
    def posmodv(self, modv: 'Vector2') -> 'Vector2': ...
    def project(self, b: 'Vector2') -> 'Vector2': ...
    def lerp(self, to: 'Vector2', weight: 'float') -> 'Vector2': ...
    def slerp(self, to: 'Vector2', weight: 'float') -> 'Vector2': ...
    def cubic_interpolate(self, b: 'Vector2', pre_a: 'Vector2', post_b: 'Vector2', weight: 'float') -> 'Vector2': ...
    def cubic_interpolate_in_time(self, b: 'Vector2', pre_a: 'Vector2', post_b: 'Vector2', weight: 'float', b_t: 'float', pre_a_t: 'float', post_b_t: 'float') -> 'Vector2': ...
    def bezier_interpolate(self, control_1: 'Vector2', control_2: 'Vector2', end: 'Vector2', t: 'float') -> 'Vector2': ...
    def bezier_derivative(self, control_1: 'Vector2', control_2: 'Vector2', end: 'Vector2', t: 'float') -> 'Vector2': ...
    def max_axis_index(self) -> 'int': ...
    def min_axis_index(self) -> 'int': ...
    def move_toward(self, to: 'Vector2', delta: 'float') -> 'Vector2': ...
    def rotated(self, angle: 'float') -> 'Vector2': ...
    def orthogonal(self) -> 'Vector2': ...
    def floor(self) -> 'Vector2': ...
    def ceil(self) -> 'Vector2': ...
    def round(self) -> 'Vector2': ...
    def aspect(self) -> 'float': ...
    def dot(self, with_: 'Vector2') -> 'float': ...
    def slide(self, n: 'Vector2') -> 'Vector2': ...
    def bounce(self, n: 'Vector2') -> 'Vector2': ...
    def reflect(self, line: 'Vector2') -> 'Vector2': ...
    def cross(self, with_: 'Vector2') -> 'float': ...
    def abs(self) -> 'Vector2': ...
    def sign(self) -> 'Vector2': ...
    def clamp(self, min: 'Vector2', max: 'Vector2') -> 'Vector2': ...
    def clampf(self, min: 'float', max: 'float') -> 'Vector2': ...
    def snapped(self, step: 'Vector2') -> 'Vector2': ...
    def snappedf(self, step: 'float') -> 'Vector2': ...
    def min(self, with_: 'Vector2') -> 'Vector2': ...
    def minf(self, with_: 'float') -> 'Vector2': ...
    def max(self, with_: 'Vector2') -> 'Vector2': ...
    def maxf(self, with_: 'float') -> 'Vector2': ...
    @staticmethod
    def from_angle(angle: 'float') -> 'Vector2': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Vector2': ...
    def __mul__(self, int: 'int') -> 'Vector2': ...
    def __truediv__(self, int: 'int') -> 'Vector2': ...
    def __mul__(self, float: 'float') -> 'Vector2': ...
    def __truediv__(self, float: 'float') -> 'Vector2': ...
    def __eq__(self, Vector2: 'Vector2') -> 'bool': ...
    def __ne__(self, Vector2: 'Vector2') -> 'bool': ...
    def __lt__(self, Vector2: 'Vector2') -> 'bool': ...
    def __le__(self, Vector2: 'Vector2') -> 'bool': ...
    def __gt__(self, Vector2: 'Vector2') -> 'bool': ...
    def __ge__(self, Vector2: 'Vector2') -> 'bool': ...
    def __add__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __sub__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __mul__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __truediv__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __mul__(self, Transform2D: 'Transform2D') -> 'Vector2': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __contains__(self, PackedVector2Array: 'PackedVector2Array') -> 'bool': ...


class Vector2i:


    ZERO: 'Vector2i' = default('''Vector2i(0, 0)''')
    ONE: 'Vector2i' = default('''Vector2i(1, 1)''')
    MIN: 'Vector2i' = default('''Vector2i(-2147483648, -2147483648)''')
    MAX: 'Vector2i' = default('''Vector2i(2147483647, 2147483647)''')
    LEFT: 'Vector2i' = default('''Vector2i(-1, 0)''')
    RIGHT: 'Vector2i' = default('''Vector2i(1, 0)''')
    UP: 'Vector2i' = default('''Vector2i(0, -1)''')
    DOWN: 'Vector2i' = default('''Vector2i(0, 1)''')

    def aspect(self) -> 'float': ...
    def max_axis_index(self) -> 'int': ...
    def min_axis_index(self) -> 'int': ...
    def distance_to(self, to: 'Vector2i') -> 'float': ...
    def distance_squared_to(self, to: 'Vector2i') -> 'int': ...
    def length(self) -> 'float': ...
    def length_squared(self) -> 'int': ...
    def sign(self) -> 'Vector2i': ...
    def abs(self) -> 'Vector2i': ...
    def clamp(self, min: 'Vector2i', max: 'Vector2i') -> 'Vector2i': ...
    def clampi(self, min: 'int', max: 'int') -> 'Vector2i': ...
    def snapped(self, step: 'Vector2i') -> 'Vector2i': ...
    def snappedi(self, step: 'int') -> 'Vector2i': ...
    def min(self, with_: 'Vector2i') -> 'Vector2i': ...
    def mini(self, with_: 'int') -> 'Vector2i': ...
    def max(self, with_: 'Vector2i') -> 'Vector2i': ...
    def maxi(self, with_: 'int') -> 'Vector2i': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Vector2i': ...
    def __mul__(self, int: 'int') -> 'Vector2i': ...
    def __truediv__(self, int: 'int') -> 'Vector2i': ...
    def __mod__(self, int: 'int') -> 'Vector2i': ...
    def __mul__(self, float: 'float') -> 'Vector2': ...
    def __truediv__(self, float: 'float') -> 'Vector2': ...
    def __eq__(self, Vector2i: 'Vector2i') -> 'bool': ...
    def __ne__(self, Vector2i: 'Vector2i') -> 'bool': ...
    def __lt__(self, Vector2i: 'Vector2i') -> 'bool': ...
    def __le__(self, Vector2i: 'Vector2i') -> 'bool': ...
    def __gt__(self, Vector2i: 'Vector2i') -> 'bool': ...
    def __ge__(self, Vector2i: 'Vector2i') -> 'bool': ...
    def __add__(self, Vector2i: 'Vector2i') -> 'Vector2i': ...
    def __sub__(self, Vector2i: 'Vector2i') -> 'Vector2i': ...
    def __mul__(self, Vector2i: 'Vector2i') -> 'Vector2i': ...
    def __truediv__(self, Vector2i: 'Vector2i') -> 'Vector2i': ...
    def __mod__(self, Vector2i: 'Vector2i') -> 'Vector2i': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Rect2:



    def get_center(self) -> 'Vector2': ...
    def get_area(self) -> 'float': ...
    def has_area(self) -> 'bool': ...
    def has_point(self, point: 'Vector2') -> 'bool': ...
    def is_equal_approx(self, rect: 'Rect2') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def intersects(self, b: 'Rect2', include_borders: 'bool' = False) -> 'bool': ...
    def encloses(self, b: 'Rect2') -> 'bool': ...
    def intersection(self, b: 'Rect2') -> 'Rect2': ...
    def merge(self, b: 'Rect2') -> 'Rect2': ...
    def expand(self, to: 'Vector2') -> 'Rect2': ...
    def get_support(self, direction: 'Vector2') -> 'Vector2': ...
    def grow(self, amount: 'float') -> 'Rect2': ...
    def grow_side(self, side: 'int', amount: 'float') -> 'Rect2': ...
    def grow_individual(self, left: 'float', top: 'float', right: 'float', bottom: 'float') -> 'Rect2': ...
    def abs(self) -> 'Rect2': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, Rect2: 'Rect2') -> 'bool': ...
    def __ne__(self, Rect2: 'Rect2') -> 'bool': ...
    def __mul__(self, Transform2D: 'Transform2D') -> 'Rect2': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Rect2i:



    def get_center(self) -> 'Vector2i': ...
    def get_area(self) -> 'int': ...
    def has_area(self) -> 'bool': ...
    def has_point(self, point: 'Vector2i') -> 'bool': ...
    def intersects(self, b: 'Rect2i') -> 'bool': ...
    def encloses(self, b: 'Rect2i') -> 'bool': ...
    def intersection(self, b: 'Rect2i') -> 'Rect2i': ...
    def merge(self, b: 'Rect2i') -> 'Rect2i': ...
    def expand(self, to: 'Vector2i') -> 'Rect2i': ...
    def grow(self, amount: 'int') -> 'Rect2i': ...
    def grow_side(self, side: 'int', amount: 'int') -> 'Rect2i': ...
    def grow_individual(self, left: 'int', top: 'int', right: 'int', bottom: 'int') -> 'Rect2i': ...
    def abs(self) -> 'Rect2i': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, Rect2i: 'Rect2i') -> 'bool': ...
    def __ne__(self, Rect2i: 'Rect2i') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Vector3:


    ZERO: 'Vector3' = default('''Vector3(0, 0, 0)''')
    ONE: 'Vector3' = default('''Vector3(1, 1, 1)''')
    INF: 'Vector3' = default('''Vector3(inf, inf, inf)''')
    LEFT: 'Vector3' = default('''Vector3(-1, 0, 0)''')
    RIGHT: 'Vector3' = default('''Vector3(1, 0, 0)''')
    UP: 'Vector3' = default('''Vector3(0, 1, 0)''')
    DOWN: 'Vector3' = default('''Vector3(0, -1, 0)''')
    FORWARD: 'Vector3' = default('''Vector3(0, 0, -1)''')
    BACK: 'Vector3' = default('''Vector3(0, 0, 1)''')
    MODEL_LEFT: 'Vector3' = default('''Vector3(1, 0, 0)''')
    MODEL_RIGHT: 'Vector3' = default('''Vector3(-1, 0, 0)''')
    MODEL_TOP: 'Vector3' = default('''Vector3(0, 1, 0)''')
    MODEL_BOTTOM: 'Vector3' = default('''Vector3(0, -1, 0)''')
    MODEL_FRONT: 'Vector3' = default('''Vector3(0, 0, 1)''')
    MODEL_REAR: 'Vector3' = default('''Vector3(0, 0, -1)''')

    def min_axis_index(self) -> 'int': ...
    def max_axis_index(self) -> 'int': ...
    def angle_to(self, to: 'Vector3') -> 'float': ...
    def signed_angle_to(self, to: 'Vector3', axis: 'Vector3') -> 'float': ...
    def direction_to(self, to: 'Vector3') -> 'Vector3': ...
    def distance_to(self, to: 'Vector3') -> 'float': ...
    def distance_squared_to(self, to: 'Vector3') -> 'float': ...
    def length(self) -> 'float': ...
    def length_squared(self) -> 'float': ...
    def limit_length(self, length: 'float' = 1.0) -> 'Vector3': ...
    def normalized(self) -> 'Vector3': ...
    def is_normalized(self) -> 'bool': ...
    def is_equal_approx(self, to: 'Vector3') -> 'bool': ...
    def is_zero_approx(self) -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def inverse(self) -> 'Vector3': ...
    def clamp(self, min: 'Vector3', max: 'Vector3') -> 'Vector3': ...
    def clampf(self, min: 'float', max: 'float') -> 'Vector3': ...
    def snapped(self, step: 'Vector3') -> 'Vector3': ...
    def snappedf(self, step: 'float') -> 'Vector3': ...
    def rotated(self, axis: 'Vector3', angle: 'float') -> 'Vector3': ...
    def lerp(self, to: 'Vector3', weight: 'float') -> 'Vector3': ...
    def slerp(self, to: 'Vector3', weight: 'float') -> 'Vector3': ...
    def cubic_interpolate(self, b: 'Vector3', pre_a: 'Vector3', post_b: 'Vector3', weight: 'float') -> 'Vector3': ...
    def cubic_interpolate_in_time(self, b: 'Vector3', pre_a: 'Vector3', post_b: 'Vector3', weight: 'float', b_t: 'float', pre_a_t: 'float', post_b_t: 'float') -> 'Vector3': ...
    def bezier_interpolate(self, control_1: 'Vector3', control_2: 'Vector3', end: 'Vector3', t: 'float') -> 'Vector3': ...
    def bezier_derivative(self, control_1: 'Vector3', control_2: 'Vector3', end: 'Vector3', t: 'float') -> 'Vector3': ...
    def move_toward(self, to: 'Vector3', delta: 'float') -> 'Vector3': ...
    def dot(self, with_: 'Vector3') -> 'float': ...
    def cross(self, with_: 'Vector3') -> 'Vector3': ...
    def outer(self, with_: 'Vector3') -> 'Basis': ...
    def abs(self) -> 'Vector3': ...
    def floor(self) -> 'Vector3': ...
    def ceil(self) -> 'Vector3': ...
    def round(self) -> 'Vector3': ...
    def posmod(self, mod: 'float') -> 'Vector3': ...
    def posmodv(self, modv: 'Vector3') -> 'Vector3': ...
    def project(self, b: 'Vector3') -> 'Vector3': ...
    def slide(self, n: 'Vector3') -> 'Vector3': ...
    def bounce(self, n: 'Vector3') -> 'Vector3': ...
    def reflect(self, n: 'Vector3') -> 'Vector3': ...
    def sign(self) -> 'Vector3': ...
    def octahedron_encode(self) -> 'Vector2': ...
    def min(self, with_: 'Vector3') -> 'Vector3': ...
    def minf(self, with_: 'float') -> 'Vector3': ...
    def max(self, with_: 'Vector3') -> 'Vector3': ...
    def maxf(self, with_: 'float') -> 'Vector3': ...
    @staticmethod
    def octahedron_decode(uv: 'Vector2') -> 'Vector3': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Vector3': ...
    def __mul__(self, int: 'int') -> 'Vector3': ...
    def __truediv__(self, int: 'int') -> 'Vector3': ...
    def __mul__(self, float: 'float') -> 'Vector3': ...
    def __truediv__(self, float: 'float') -> 'Vector3': ...
    def __eq__(self, Vector3: 'Vector3') -> 'bool': ...
    def __ne__(self, Vector3: 'Vector3') -> 'bool': ...
    def __lt__(self, Vector3: 'Vector3') -> 'bool': ...
    def __le__(self, Vector3: 'Vector3') -> 'bool': ...
    def __gt__(self, Vector3: 'Vector3') -> 'bool': ...
    def __ge__(self, Vector3: 'Vector3') -> 'bool': ...
    def __add__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __sub__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __mul__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __truediv__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __mul__(self, Quaternion: 'Quaternion') -> 'Vector3': ...
    def __mul__(self, Basis: 'Basis') -> 'Vector3': ...
    def __mul__(self, Transform3D: 'Transform3D') -> 'Vector3': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __contains__(self, PackedVector3Array: 'PackedVector3Array') -> 'bool': ...


class Vector3i:


    ZERO: 'Vector3i' = default('''Vector3i(0, 0, 0)''')
    ONE: 'Vector3i' = default('''Vector3i(1, 1, 1)''')
    MIN: 'Vector3i' = default('''Vector3i(-2147483648, -2147483648, -2147483648)''')
    MAX: 'Vector3i' = default('''Vector3i(2147483647, 2147483647, 2147483647)''')
    LEFT: 'Vector3i' = default('''Vector3i(-1, 0, 0)''')
    RIGHT: 'Vector3i' = default('''Vector3i(1, 0, 0)''')
    UP: 'Vector3i' = default('''Vector3i(0, 1, 0)''')
    DOWN: 'Vector3i' = default('''Vector3i(0, -1, 0)''')
    FORWARD: 'Vector3i' = default('''Vector3i(0, 0, -1)''')
    BACK: 'Vector3i' = default('''Vector3i(0, 0, 1)''')

    def min_axis_index(self) -> 'int': ...
    def max_axis_index(self) -> 'int': ...
    def distance_to(self, to: 'Vector3i') -> 'float': ...
    def distance_squared_to(self, to: 'Vector3i') -> 'int': ...
    def length(self) -> 'float': ...
    def length_squared(self) -> 'int': ...
    def sign(self) -> 'Vector3i': ...
    def abs(self) -> 'Vector3i': ...
    def clamp(self, min: 'Vector3i', max: 'Vector3i') -> 'Vector3i': ...
    def clampi(self, min: 'int', max: 'int') -> 'Vector3i': ...
    def snapped(self, step: 'Vector3i') -> 'Vector3i': ...
    def snappedi(self, step: 'int') -> 'Vector3i': ...
    def min(self, with_: 'Vector3i') -> 'Vector3i': ...
    def mini(self, with_: 'int') -> 'Vector3i': ...
    def max(self, with_: 'Vector3i') -> 'Vector3i': ...
    def maxi(self, with_: 'int') -> 'Vector3i': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Vector3i': ...
    def __mul__(self, int: 'int') -> 'Vector3i': ...
    def __truediv__(self, int: 'int') -> 'Vector3i': ...
    def __mod__(self, int: 'int') -> 'Vector3i': ...
    def __mul__(self, float: 'float') -> 'Vector3': ...
    def __truediv__(self, float: 'float') -> 'Vector3': ...
    def __eq__(self, Vector3i: 'Vector3i') -> 'bool': ...
    def __ne__(self, Vector3i: 'Vector3i') -> 'bool': ...
    def __lt__(self, Vector3i: 'Vector3i') -> 'bool': ...
    def __le__(self, Vector3i: 'Vector3i') -> 'bool': ...
    def __gt__(self, Vector3i: 'Vector3i') -> 'bool': ...
    def __ge__(self, Vector3i: 'Vector3i') -> 'bool': ...
    def __add__(self, Vector3i: 'Vector3i') -> 'Vector3i': ...
    def __sub__(self, Vector3i: 'Vector3i') -> 'Vector3i': ...
    def __mul__(self, Vector3i: 'Vector3i') -> 'Vector3i': ...
    def __truediv__(self, Vector3i: 'Vector3i') -> 'Vector3i': ...
    def __mod__(self, Vector3i: 'Vector3i') -> 'Vector3i': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Transform2D:


    IDENTITY: 'Transform2D' = default('''Transform2D(1, 0, 0, 1, 0, 0)''')
    FLIP_X: 'Transform2D' = default('''Transform2D(-1, 0, 0, 1, 0, 0)''')
    FLIP_Y: 'Transform2D' = default('''Transform2D(1, 0, 0, -1, 0, 0)''')

    def inverse(self) -> 'Transform2D': ...
    def affine_inverse(self) -> 'Transform2D': ...
    def get_rotation(self) -> 'float': ...
    def get_origin(self) -> 'Vector2': ...
    def get_scale(self) -> 'Vector2': ...
    def get_skew(self) -> 'float': ...
    def orthonormalized(self) -> 'Transform2D': ...
    def rotated(self, angle: 'float') -> 'Transform2D': ...
    def rotated_local(self, angle: 'float') -> 'Transform2D': ...
    def scaled(self, scale: 'Vector2') -> 'Transform2D': ...
    def scaled_local(self, scale: 'Vector2') -> 'Transform2D': ...
    def translated(self, offset: 'Vector2') -> 'Transform2D': ...
    def translated_local(self, offset: 'Vector2') -> 'Transform2D': ...
    def determinant(self) -> 'float': ...
    def basis_xform(self, v: 'Vector2') -> 'Vector2': ...
    def basis_xform_inv(self, v: 'Vector2') -> 'Vector2': ...
    def interpolate_with(self, xform: 'Transform2D', weight: 'float') -> 'Transform2D': ...
    def is_conformal(self) -> 'bool': ...
    def is_equal_approx(self, xform: 'Transform2D') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def looking_at(self, target: 'Vector2' = default('''Vector2(0, 0)''')) -> 'Transform2D': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mul__(self, int: 'int') -> 'Transform2D': ...
    def __truediv__(self, int: 'int') -> 'Transform2D': ...
    def __mul__(self, float: 'float') -> 'Transform2D': ...
    def __truediv__(self, float: 'float') -> 'Transform2D': ...
    def __mul__(self, Vector2: 'Vector2') -> 'Vector2': ...
    def __mul__(self, Rect2: 'Rect2') -> 'Rect2': ...
    def __eq__(self, Transform2D: 'Transform2D') -> 'bool': ...
    def __ne__(self, Transform2D: 'Transform2D') -> 'bool': ...
    def __mul__(self, Transform2D: 'Transform2D') -> 'Transform2D': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __mul__(self, PackedVector2Array: 'PackedVector2Array') -> 'PackedVector2Array': ...


class Vector4:


    ZERO: 'Vector4' = default('''Vector4(0, 0, 0, 0)''')
    ONE: 'Vector4' = default('''Vector4(1, 1, 1, 1)''')
    INF: 'Vector4' = default('''Vector4(inf, inf, inf, inf)''')

    def min_axis_index(self) -> 'int': ...
    def max_axis_index(self) -> 'int': ...
    def length(self) -> 'float': ...
    def length_squared(self) -> 'float': ...
    def abs(self) -> 'Vector4': ...
    def sign(self) -> 'Vector4': ...
    def floor(self) -> 'Vector4': ...
    def ceil(self) -> 'Vector4': ...
    def round(self) -> 'Vector4': ...
    def lerp(self, to: 'Vector4', weight: 'float') -> 'Vector4': ...
    def cubic_interpolate(self, b: 'Vector4', pre_a: 'Vector4', post_b: 'Vector4', weight: 'float') -> 'Vector4': ...
    def cubic_interpolate_in_time(self, b: 'Vector4', pre_a: 'Vector4', post_b: 'Vector4', weight: 'float', b_t: 'float', pre_a_t: 'float', post_b_t: 'float') -> 'Vector4': ...
    def posmod(self, mod: 'float') -> 'Vector4': ...
    def posmodv(self, modv: 'Vector4') -> 'Vector4': ...
    def snapped(self, step: 'Vector4') -> 'Vector4': ...
    def snappedf(self, step: 'float') -> 'Vector4': ...
    def clamp(self, min: 'Vector4', max: 'Vector4') -> 'Vector4': ...
    def clampf(self, min: 'float', max: 'float') -> 'Vector4': ...
    def normalized(self) -> 'Vector4': ...
    def is_normalized(self) -> 'bool': ...
    def direction_to(self, to: 'Vector4') -> 'Vector4': ...
    def distance_to(self, to: 'Vector4') -> 'float': ...
    def distance_squared_to(self, to: 'Vector4') -> 'float': ...
    def dot(self, with_: 'Vector4') -> 'float': ...
    def inverse(self) -> 'Vector4': ...
    def is_equal_approx(self, to: 'Vector4') -> 'bool': ...
    def is_zero_approx(self) -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def min(self, with_: 'Vector4') -> 'Vector4': ...
    def minf(self, with_: 'float') -> 'Vector4': ...
    def max(self, with_: 'Vector4') -> 'Vector4': ...
    def maxf(self, with_: 'float') -> 'Vector4': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Vector4': ...
    def __mul__(self, int: 'int') -> 'Vector4': ...
    def __truediv__(self, int: 'int') -> 'Vector4': ...
    def __mul__(self, float: 'float') -> 'Vector4': ...
    def __truediv__(self, float: 'float') -> 'Vector4': ...
    def __eq__(self, Vector4: 'Vector4') -> 'bool': ...
    def __ne__(self, Vector4: 'Vector4') -> 'bool': ...
    def __lt__(self, Vector4: 'Vector4') -> 'bool': ...
    def __le__(self, Vector4: 'Vector4') -> 'bool': ...
    def __gt__(self, Vector4: 'Vector4') -> 'bool': ...
    def __ge__(self, Vector4: 'Vector4') -> 'bool': ...
    def __add__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __sub__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __mul__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __truediv__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __mul__(self, Projection: 'Projection') -> 'Vector4': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __contains__(self, PackedVector4Array: 'PackedVector4Array') -> 'bool': ...


class Vector4i:


    ZERO: 'Vector4i' = default('''Vector4i(0, 0, 0, 0)''')
    ONE: 'Vector4i' = default('''Vector4i(1, 1, 1, 1)''')
    MIN: 'Vector4i' = default('''Vector4i(-2147483648, -2147483648, -2147483648, -2147483648)''')
    MAX: 'Vector4i' = default('''Vector4i(2147483647, 2147483647, 2147483647, 2147483647)''')

    def min_axis_index(self) -> 'int': ...
    def max_axis_index(self) -> 'int': ...
    def length(self) -> 'float': ...
    def length_squared(self) -> 'int': ...
    def sign(self) -> 'Vector4i': ...
    def abs(self) -> 'Vector4i': ...
    def clamp(self, min: 'Vector4i', max: 'Vector4i') -> 'Vector4i': ...
    def clampi(self, min: 'int', max: 'int') -> 'Vector4i': ...
    def snapped(self, step: 'Vector4i') -> 'Vector4i': ...
    def snappedi(self, step: 'int') -> 'Vector4i': ...
    def min(self, with_: 'Vector4i') -> 'Vector4i': ...
    def mini(self, with_: 'int') -> 'Vector4i': ...
    def max(self, with_: 'Vector4i') -> 'Vector4i': ...
    def maxi(self, with_: 'int') -> 'Vector4i': ...
    def distance_to(self, to: 'Vector4i') -> 'float': ...
    def distance_squared_to(self, to: 'Vector4i') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Vector4i': ...
    def __mul__(self, int: 'int') -> 'Vector4i': ...
    def __truediv__(self, int: 'int') -> 'Vector4i': ...
    def __mod__(self, int: 'int') -> 'Vector4i': ...
    def __mul__(self, float: 'float') -> 'Vector4': ...
    def __truediv__(self, float: 'float') -> 'Vector4': ...
    def __eq__(self, Vector4i: 'Vector4i') -> 'bool': ...
    def __ne__(self, Vector4i: 'Vector4i') -> 'bool': ...
    def __lt__(self, Vector4i: 'Vector4i') -> 'bool': ...
    def __le__(self, Vector4i: 'Vector4i') -> 'bool': ...
    def __gt__(self, Vector4i: 'Vector4i') -> 'bool': ...
    def __ge__(self, Vector4i: 'Vector4i') -> 'bool': ...
    def __add__(self, Vector4i: 'Vector4i') -> 'Vector4i': ...
    def __sub__(self, Vector4i: 'Vector4i') -> 'Vector4i': ...
    def __mul__(self, Vector4i: 'Vector4i') -> 'Vector4i': ...
    def __truediv__(self, Vector4i: 'Vector4i') -> 'Vector4i': ...
    def __mod__(self, Vector4i: 'Vector4i') -> 'Vector4i': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Plane:


    PLANE_YZ: 'Plane' = default('''Plane(1, 0, 0, 0)''')
    PLANE_XZ: 'Plane' = default('''Plane(0, 1, 0, 0)''')
    PLANE_XY: 'Plane' = default('''Plane(0, 0, 1, 0)''')

    def normalized(self) -> 'Plane': ...
    def get_center(self) -> 'Vector3': ...
    def is_equal_approx(self, to_plane: 'Plane') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def is_point_over(self, point: 'Vector3') -> 'bool': ...
    def distance_to(self, point: 'Vector3') -> 'float': ...
    def has_point(self, point: 'Vector3', tolerance: 'float' = 1e-05) -> 'bool': ...
    def project(self, point: 'Vector3') -> 'Vector3': ...
    def intersect_3(self, b: 'Plane', c: 'Plane') -> 'Variant': ...
    def intersects_ray(self, from_: 'Vector3', dir: 'Vector3') -> 'Variant': ...
    def intersects_segment(self, from_: 'Vector3', to: 'Vector3') -> 'Variant': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Plane': ...
    def __eq__(self, Plane: 'Plane') -> 'bool': ...
    def __ne__(self, Plane: 'Plane') -> 'bool': ...
    def __mul__(self, Transform3D: 'Transform3D') -> 'Plane': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Quaternion:


    IDENTITY: 'Quaternion' = default('''Quaternion(0, 0, 0, 1)''')

    def length(self) -> 'float': ...
    def length_squared(self) -> 'float': ...
    def normalized(self) -> 'Quaternion': ...
    def is_normalized(self) -> 'bool': ...
    def is_equal_approx(self, to: 'Quaternion') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def inverse(self) -> 'Quaternion': ...
    def log(self) -> 'Quaternion': ...
    def exp(self) -> 'Quaternion': ...
    def angle_to(self, to: 'Quaternion') -> 'float': ...
    def dot(self, with_: 'Quaternion') -> 'float': ...
    def slerp(self, to: 'Quaternion', weight: 'float') -> 'Quaternion': ...
    def slerpni(self, to: 'Quaternion', weight: 'float') -> 'Quaternion': ...
    def spherical_cubic_interpolate(self, b: 'Quaternion', pre_a: 'Quaternion', post_b: 'Quaternion', weight: 'float') -> 'Quaternion': ...
    def spherical_cubic_interpolate_in_time(self, b: 'Quaternion', pre_a: 'Quaternion', post_b: 'Quaternion', weight: 'float', b_t: 'float', pre_a_t: 'float', post_b_t: 'float') -> 'Quaternion': ...
    def get_euler(self, order: 'int' = 2) -> 'Vector3': ...
    @staticmethod
    def from_euler(euler: 'Vector3') -> 'Quaternion': ...
    def get_axis(self) -> 'Vector3': ...
    def get_angle(self) -> 'float': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Quaternion': ...
    def __mul__(self, int: 'int') -> 'Quaternion': ...
    def __truediv__(self, int: 'int') -> 'Quaternion': ...
    def __mul__(self, float: 'float') -> 'Quaternion': ...
    def __truediv__(self, float: 'float') -> 'Quaternion': ...
    def __mul__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __eq__(self, Quaternion: 'Quaternion') -> 'bool': ...
    def __ne__(self, Quaternion: 'Quaternion') -> 'bool': ...
    def __add__(self, Quaternion: 'Quaternion') -> 'Quaternion': ...
    def __sub__(self, Quaternion: 'Quaternion') -> 'Quaternion': ...
    def __mul__(self, Quaternion: 'Quaternion') -> 'Quaternion': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class AABB:



    def abs(self) -> 'AABB': ...
    def get_center(self) -> 'Vector3': ...
    def get_volume(self) -> 'float': ...
    def has_volume(self) -> 'bool': ...
    def has_surface(self) -> 'bool': ...
    def has_point(self, point: 'Vector3') -> 'bool': ...
    def is_equal_approx(self, aabb: 'AABB') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def intersects(self, with_: 'AABB') -> 'bool': ...
    def encloses(self, with_: 'AABB') -> 'bool': ...
    def intersects_plane(self, plane: 'Plane') -> 'bool': ...
    def intersection(self, with_: 'AABB') -> 'AABB': ...
    def merge(self, with_: 'AABB') -> 'AABB': ...
    def expand(self, to_point: 'Vector3') -> 'AABB': ...
    def grow(self, by: 'float') -> 'AABB': ...
    def get_support(self, direction: 'Vector3') -> 'Vector3': ...
    def get_longest_axis(self) -> 'Vector3': ...
    def get_longest_axis_index(self) -> 'int': ...
    def get_longest_axis_size(self) -> 'float': ...
    def get_shortest_axis(self) -> 'Vector3': ...
    def get_shortest_axis_index(self) -> 'int': ...
    def get_shortest_axis_size(self) -> 'float': ...
    def get_endpoint(self, idx: 'int') -> 'Vector3': ...
    def intersects_segment(self, from_: 'Vector3', to: 'Vector3') -> 'Variant': ...
    def intersects_ray(self, from_: 'Vector3', dir: 'Vector3') -> 'Variant': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, AABB: 'AABB') -> 'bool': ...
    def __ne__(self, AABB: 'AABB') -> 'bool': ...
    def __mul__(self, Transform3D: 'Transform3D') -> 'AABB': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Basis:


    IDENTITY: 'Basis' = default('''Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)''')
    FLIP_X: 'Basis' = default('''Basis(-1, 0, 0, 0, 1, 0, 0, 0, 1)''')
    FLIP_Y: 'Basis' = default('''Basis(1, 0, 0, 0, -1, 0, 0, 0, 1)''')
    FLIP_Z: 'Basis' = default('''Basis(1, 0, 0, 0, 1, 0, 0, 0, -1)''')

    def inverse(self) -> 'Basis': ...
    def transposed(self) -> 'Basis': ...
    def orthonormalized(self) -> 'Basis': ...
    def determinant(self) -> 'float': ...
    def rotated(self, axis: 'Vector3', angle: 'float') -> 'Basis': ...
    def scaled(self, scale: 'Vector3') -> 'Basis': ...
    def get_scale(self) -> 'Vector3': ...
    def get_euler(self, order: 'int' = 2) -> 'Vector3': ...
    def tdotx(self, with_: 'Vector3') -> 'float': ...
    def tdoty(self, with_: 'Vector3') -> 'float': ...
    def tdotz(self, with_: 'Vector3') -> 'float': ...
    def slerp(self, to: 'Basis', weight: 'float') -> 'Basis': ...
    def is_conformal(self) -> 'bool': ...
    def is_equal_approx(self, b: 'Basis') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def get_rotation_quaternion(self) -> 'Quaternion': ...
    @staticmethod
    def looking_at(target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: 'bool' = False) -> 'Basis': ...
    @staticmethod
    def from_scale(scale: 'Vector3') -> 'Basis': ...
    @staticmethod
    def from_euler(euler: 'Vector3', order: 'int' = 2) -> 'Basis': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mul__(self, int: 'int') -> 'Basis': ...
    def __truediv__(self, int: 'int') -> 'Basis': ...
    def __mul__(self, float: 'float') -> 'Basis': ...
    def __truediv__(self, float: 'float') -> 'Basis': ...
    def __mul__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __eq__(self, Basis: 'Basis') -> 'bool': ...
    def __ne__(self, Basis: 'Basis') -> 'bool': ...
    def __mul__(self, Basis: 'Basis') -> 'Basis': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Transform3D:


    IDENTITY: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)''')
    FLIP_X: 'Transform3D' = default('''Transform3D(-1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)''')
    FLIP_Y: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0)''')
    FLIP_Z: 'Transform3D' = default('''Transform3D(1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0)''')

    def inverse(self) -> 'Transform3D': ...
    def affine_inverse(self) -> 'Transform3D': ...
    def orthonormalized(self) -> 'Transform3D': ...
    def rotated(self, axis: 'Vector3', angle: 'float') -> 'Transform3D': ...
    def rotated_local(self, axis: 'Vector3', angle: 'float') -> 'Transform3D': ...
    def scaled(self, scale: 'Vector3') -> 'Transform3D': ...
    def scaled_local(self, scale: 'Vector3') -> 'Transform3D': ...
    def translated(self, offset: 'Vector3') -> 'Transform3D': ...
    def translated_local(self, offset: 'Vector3') -> 'Transform3D': ...
    def looking_at(self, target: 'Vector3', up: 'Vector3' = default('''Vector3(0, 1, 0)'''), use_model_front: 'bool' = False) -> 'Transform3D': ...
    def interpolate_with(self, xform: 'Transform3D', weight: 'float') -> 'Transform3D': ...
    def is_equal_approx(self, xform: 'Transform3D') -> 'bool': ...
    def is_finite(self) -> 'bool': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mul__(self, int: 'int') -> 'Transform3D': ...
    def __truediv__(self, int: 'int') -> 'Transform3D': ...
    def __mul__(self, float: 'float') -> 'Transform3D': ...
    def __truediv__(self, float: 'float') -> 'Transform3D': ...
    def __mul__(self, Vector3: 'Vector3') -> 'Vector3': ...
    def __mul__(self, Plane: 'Plane') -> 'Plane': ...
    def __mul__(self, AABB: 'AABB') -> 'AABB': ...
    def __eq__(self, Transform3D: 'Transform3D') -> 'bool': ...
    def __ne__(self, Transform3D: 'Transform3D') -> 'bool': ...
    def __mul__(self, Transform3D: 'Transform3D') -> 'Transform3D': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __mul__(self, PackedVector3Array: 'PackedVector3Array') -> 'PackedVector3Array': ...


class Projection:


    IDENTITY: 'Projection' = default('''Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)''')
    ZERO: 'Projection' = default('''Projection(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)''')

    @staticmethod
    def create_depth_correction(flip_y: 'bool') -> 'Projection': ...
    @staticmethod
    def create_light_atlas_rect(rect: 'Rect2') -> 'Projection': ...
    @staticmethod
    def create_perspective(fovy: 'float', aspect: 'float', z_near: 'float', z_far: 'float', flip_fov: 'bool' = False) -> 'Projection': ...
    @staticmethod
    def create_perspective_hmd(fovy: 'float', aspect: 'float', z_near: 'float', z_far: 'float', flip_fov: 'bool', eye: 'int', intraocular_dist: 'float', convergence_dist: 'float') -> 'Projection': ...
    @staticmethod
    def create_for_hmd(eye: 'int', aspect: 'float', intraocular_dist: 'float', display_width: 'float', display_to_lens: 'float', oversample: 'float', z_near: 'float', z_far: 'float') -> 'Projection': ...
    @staticmethod
    def create_orthogonal(left: 'float', right: 'float', bottom: 'float', top: 'float', z_near: 'float', z_far: 'float') -> 'Projection': ...
    @staticmethod
    def create_orthogonal_aspect(size: 'float', aspect: 'float', z_near: 'float', z_far: 'float', flip_fov: 'bool' = False) -> 'Projection': ...
    @staticmethod
    def create_frustum(left: 'float', right: 'float', bottom: 'float', top: 'float', z_near: 'float', z_far: 'float') -> 'Projection': ...
    @staticmethod
    def create_frustum_aspect(size: 'float', aspect: 'float', offset: 'Vector2', z_near: 'float', z_far: 'float', flip_fov: 'bool' = False) -> 'Projection': ...
    @staticmethod
    def create_fit_aabb(aabb: 'AABB') -> 'Projection': ...
    def determinant(self) -> 'float': ...
    def perspective_znear_adjusted(self, new_znear: 'float') -> 'Projection': ...
    def get_projection_plane(self, plane: 'int') -> 'Plane': ...
    def flipped_y(self) -> 'Projection': ...
    def jitter_offseted(self, offset: 'Vector2') -> 'Projection': ...
    @staticmethod
    def get_fovy(fovx: 'float', aspect: 'float') -> 'float': ...
    def get_z_far(self) -> 'float': ...
    def get_z_near(self) -> 'float': ...
    def get_aspect(self) -> 'float': ...
    def get_fov(self) -> 'float': ...
    def is_orthogonal(self) -> 'bool': ...
    def get_viewport_half_extents(self) -> 'Vector2': ...
    def get_far_plane_half_extents(self) -> 'Vector2': ...
    def inverse(self) -> 'Projection': ...
    def get_pixels_per_meter(self, for_pixel_width: 'int') -> 'int': ...
    def get_lod_multiplier(self) -> 'float': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mul__(self, Vector4: 'Vector4') -> 'Vector4': ...
    def __eq__(self, Projection: 'Projection') -> 'bool': ...
    def __ne__(self, Projection: 'Projection') -> 'bool': ...
    def __mul__(self, Projection: 'Projection') -> 'Projection': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Color:


    ALICE_BLUE: 'Color' = default('''Color(0.941176, 0.972549, 1, 1)''')
    ANTIQUE_WHITE: 'Color' = default('''Color(0.980392, 0.921569, 0.843137, 1)''')
    AQUA: 'Color' = default('''Color(0, 1, 1, 1)''')
    AQUAMARINE: 'Color' = default('''Color(0.498039, 1, 0.831373, 1)''')
    AZURE: 'Color' = default('''Color(0.941176, 1, 1, 1)''')
    BEIGE: 'Color' = default('''Color(0.960784, 0.960784, 0.862745, 1)''')
    BISQUE: 'Color' = default('''Color(1, 0.894118, 0.768627, 1)''')
    BLACK: 'Color' = default('''Color(0, 0, 0, 1)''')
    BLANCHED_ALMOND: 'Color' = default('''Color(1, 0.921569, 0.803922, 1)''')
    BLUE: 'Color' = default('''Color(0, 0, 1, 1)''')
    BLUE_VIOLET: 'Color' = default('''Color(0.541176, 0.168627, 0.886275, 1)''')
    BROWN: 'Color' = default('''Color(0.647059, 0.164706, 0.164706, 1)''')
    BURLYWOOD: 'Color' = default('''Color(0.870588, 0.721569, 0.529412, 1)''')
    CADET_BLUE: 'Color' = default('''Color(0.372549, 0.619608, 0.627451, 1)''')
    CHARTREUSE: 'Color' = default('''Color(0.498039, 1, 0, 1)''')
    CHOCOLATE: 'Color' = default('''Color(0.823529, 0.411765, 0.117647, 1)''')
    CORAL: 'Color' = default('''Color(1, 0.498039, 0.313726, 1)''')
    CORNFLOWER_BLUE: 'Color' = default('''Color(0.392157, 0.584314, 0.929412, 1)''')
    CORNSILK: 'Color' = default('''Color(1, 0.972549, 0.862745, 1)''')
    CRIMSON: 'Color' = default('''Color(0.862745, 0.0784314, 0.235294, 1)''')
    CYAN: 'Color' = default('''Color(0, 1, 1, 1)''')
    DARK_BLUE: 'Color' = default('''Color(0, 0, 0.545098, 1)''')
    DARK_CYAN: 'Color' = default('''Color(0, 0.545098, 0.545098, 1)''')
    DARK_GOLDENROD: 'Color' = default('''Color(0.721569, 0.52549, 0.0431373, 1)''')
    DARK_GRAY: 'Color' = default('''Color(0.662745, 0.662745, 0.662745, 1)''')
    DARK_GREEN: 'Color' = default('''Color(0, 0.392157, 0, 1)''')
    DARK_KHAKI: 'Color' = default('''Color(0.741176, 0.717647, 0.419608, 1)''')
    DARK_MAGENTA: 'Color' = default('''Color(0.545098, 0, 0.545098, 1)''')
    DARK_OLIVE_GREEN: 'Color' = default('''Color(0.333333, 0.419608, 0.184314, 1)''')
    DARK_ORANGE: 'Color' = default('''Color(1, 0.54902, 0, 1)''')
    DARK_ORCHID: 'Color' = default('''Color(0.6, 0.196078, 0.8, 1)''')
    DARK_RED: 'Color' = default('''Color(0.545098, 0, 0, 1)''')
    DARK_SALMON: 'Color' = default('''Color(0.913725, 0.588235, 0.478431, 1)''')
    DARK_SEA_GREEN: 'Color' = default('''Color(0.560784, 0.737255, 0.560784, 1)''')
    DARK_SLATE_BLUE: 'Color' = default('''Color(0.282353, 0.239216, 0.545098, 1)''')
    DARK_SLATE_GRAY: 'Color' = default('''Color(0.184314, 0.309804, 0.309804, 1)''')
    DARK_TURQUOISE: 'Color' = default('''Color(0, 0.807843, 0.819608, 1)''')
    DARK_VIOLET: 'Color' = default('''Color(0.580392, 0, 0.827451, 1)''')
    DEEP_PINK: 'Color' = default('''Color(1, 0.0784314, 0.576471, 1)''')
    DEEP_SKY_BLUE: 'Color' = default('''Color(0, 0.74902, 1, 1)''')
    DIM_GRAY: 'Color' = default('''Color(0.411765, 0.411765, 0.411765, 1)''')
    DODGER_BLUE: 'Color' = default('''Color(0.117647, 0.564706, 1, 1)''')
    FIREBRICK: 'Color' = default('''Color(0.698039, 0.133333, 0.133333, 1)''')
    FLORAL_WHITE: 'Color' = default('''Color(1, 0.980392, 0.941176, 1)''')
    FOREST_GREEN: 'Color' = default('''Color(0.133333, 0.545098, 0.133333, 1)''')
    FUCHSIA: 'Color' = default('''Color(1, 0, 1, 1)''')
    GAINSBORO: 'Color' = default('''Color(0.862745, 0.862745, 0.862745, 1)''')
    GHOST_WHITE: 'Color' = default('''Color(0.972549, 0.972549, 1, 1)''')
    GOLD: 'Color' = default('''Color(1, 0.843137, 0, 1)''')
    GOLDENROD: 'Color' = default('''Color(0.854902, 0.647059, 0.12549, 1)''')
    GRAY: 'Color' = default('''Color(0.745098, 0.745098, 0.745098, 1)''')
    GREEN: 'Color' = default('''Color(0, 1, 0, 1)''')
    GREEN_YELLOW: 'Color' = default('''Color(0.678431, 1, 0.184314, 1)''')
    HONEYDEW: 'Color' = default('''Color(0.941176, 1, 0.941176, 1)''')
    HOT_PINK: 'Color' = default('''Color(1, 0.411765, 0.705882, 1)''')
    INDIAN_RED: 'Color' = default('''Color(0.803922, 0.360784, 0.360784, 1)''')
    INDIGO: 'Color' = default('''Color(0.294118, 0, 0.509804, 1)''')
    IVORY: 'Color' = default('''Color(1, 1, 0.941176, 1)''')
    KHAKI: 'Color' = default('''Color(0.941176, 0.901961, 0.54902, 1)''')
    LAVENDER: 'Color' = default('''Color(0.901961, 0.901961, 0.980392, 1)''')
    LAVENDER_BLUSH: 'Color' = default('''Color(1, 0.941176, 0.960784, 1)''')
    LAWN_GREEN: 'Color' = default('''Color(0.486275, 0.988235, 0, 1)''')
    LEMON_CHIFFON: 'Color' = default('''Color(1, 0.980392, 0.803922, 1)''')
    LIGHT_BLUE: 'Color' = default('''Color(0.678431, 0.847059, 0.901961, 1)''')
    LIGHT_CORAL: 'Color' = default('''Color(0.941176, 0.501961, 0.501961, 1)''')
    LIGHT_CYAN: 'Color' = default('''Color(0.878431, 1, 1, 1)''')
    LIGHT_GOLDENROD: 'Color' = default('''Color(0.980392, 0.980392, 0.823529, 1)''')
    LIGHT_GRAY: 'Color' = default('''Color(0.827451, 0.827451, 0.827451, 1)''')
    LIGHT_GREEN: 'Color' = default('''Color(0.564706, 0.933333, 0.564706, 1)''')
    LIGHT_PINK: 'Color' = default('''Color(1, 0.713726, 0.756863, 1)''')
    LIGHT_SALMON: 'Color' = default('''Color(1, 0.627451, 0.478431, 1)''')
    LIGHT_SEA_GREEN: 'Color' = default('''Color(0.12549, 0.698039, 0.666667, 1)''')
    LIGHT_SKY_BLUE: 'Color' = default('''Color(0.529412, 0.807843, 0.980392, 1)''')
    LIGHT_SLATE_GRAY: 'Color' = default('''Color(0.466667, 0.533333, 0.6, 1)''')
    LIGHT_STEEL_BLUE: 'Color' = default('''Color(0.690196, 0.768627, 0.870588, 1)''')
    LIGHT_YELLOW: 'Color' = default('''Color(1, 1, 0.878431, 1)''')
    LIME: 'Color' = default('''Color(0, 1, 0, 1)''')
    LIME_GREEN: 'Color' = default('''Color(0.196078, 0.803922, 0.196078, 1)''')
    LINEN: 'Color' = default('''Color(0.980392, 0.941176, 0.901961, 1)''')
    MAGENTA: 'Color' = default('''Color(1, 0, 1, 1)''')
    MAROON: 'Color' = default('''Color(0.690196, 0.188235, 0.376471, 1)''')
    MEDIUM_AQUAMARINE: 'Color' = default('''Color(0.4, 0.803922, 0.666667, 1)''')
    MEDIUM_BLUE: 'Color' = default('''Color(0, 0, 0.803922, 1)''')
    MEDIUM_ORCHID: 'Color' = default('''Color(0.729412, 0.333333, 0.827451, 1)''')
    MEDIUM_PURPLE: 'Color' = default('''Color(0.576471, 0.439216, 0.858824, 1)''')
    MEDIUM_SEA_GREEN: 'Color' = default('''Color(0.235294, 0.701961, 0.443137, 1)''')
    MEDIUM_SLATE_BLUE: 'Color' = default('''Color(0.482353, 0.407843, 0.933333, 1)''')
    MEDIUM_SPRING_GREEN: 'Color' = default('''Color(0, 0.980392, 0.603922, 1)''')
    MEDIUM_TURQUOISE: 'Color' = default('''Color(0.282353, 0.819608, 0.8, 1)''')
    MEDIUM_VIOLET_RED: 'Color' = default('''Color(0.780392, 0.0823529, 0.521569, 1)''')
    MIDNIGHT_BLUE: 'Color' = default('''Color(0.0980392, 0.0980392, 0.439216, 1)''')
    MINT_CREAM: 'Color' = default('''Color(0.960784, 1, 0.980392, 1)''')
    MISTY_ROSE: 'Color' = default('''Color(1, 0.894118, 0.882353, 1)''')
    MOCCASIN: 'Color' = default('''Color(1, 0.894118, 0.709804, 1)''')
    NAVAJO_WHITE: 'Color' = default('''Color(1, 0.870588, 0.678431, 1)''')
    NAVY_BLUE: 'Color' = default('''Color(0, 0, 0.501961, 1)''')
    OLD_LACE: 'Color' = default('''Color(0.992157, 0.960784, 0.901961, 1)''')
    OLIVE: 'Color' = default('''Color(0.501961, 0.501961, 0, 1)''')
    OLIVE_DRAB: 'Color' = default('''Color(0.419608, 0.556863, 0.137255, 1)''')
    ORANGE: 'Color' = default('''Color(1, 0.647059, 0, 1)''')
    ORANGE_RED: 'Color' = default('''Color(1, 0.270588, 0, 1)''')
    ORCHID: 'Color' = default('''Color(0.854902, 0.439216, 0.839216, 1)''')
    PALE_GOLDENROD: 'Color' = default('''Color(0.933333, 0.909804, 0.666667, 1)''')
    PALE_GREEN: 'Color' = default('''Color(0.596078, 0.984314, 0.596078, 1)''')
    PALE_TURQUOISE: 'Color' = default('''Color(0.686275, 0.933333, 0.933333, 1)''')
    PALE_VIOLET_RED: 'Color' = default('''Color(0.858824, 0.439216, 0.576471, 1)''')
    PAPAYA_WHIP: 'Color' = default('''Color(1, 0.937255, 0.835294, 1)''')
    PEACH_PUFF: 'Color' = default('''Color(1, 0.854902, 0.72549, 1)''')
    PERU: 'Color' = default('''Color(0.803922, 0.521569, 0.247059, 1)''')
    PINK: 'Color' = default('''Color(1, 0.752941, 0.796078, 1)''')
    PLUM: 'Color' = default('''Color(0.866667, 0.627451, 0.866667, 1)''')
    POWDER_BLUE: 'Color' = default('''Color(0.690196, 0.878431, 0.901961, 1)''')
    PURPLE: 'Color' = default('''Color(0.627451, 0.12549, 0.941176, 1)''')
    REBECCA_PURPLE: 'Color' = default('''Color(0.4, 0.2, 0.6, 1)''')
    RED: 'Color' = default('''Color(1, 0, 0, 1)''')
    ROSY_BROWN: 'Color' = default('''Color(0.737255, 0.560784, 0.560784, 1)''')
    ROYAL_BLUE: 'Color' = default('''Color(0.254902, 0.411765, 0.882353, 1)''')
    SADDLE_BROWN: 'Color' = default('''Color(0.545098, 0.270588, 0.0745098, 1)''')
    SALMON: 'Color' = default('''Color(0.980392, 0.501961, 0.447059, 1)''')
    SANDY_BROWN: 'Color' = default('''Color(0.956863, 0.643137, 0.376471, 1)''')
    SEA_GREEN: 'Color' = default('''Color(0.180392, 0.545098, 0.341176, 1)''')
    SEASHELL: 'Color' = default('''Color(1, 0.960784, 0.933333, 1)''')
    SIENNA: 'Color' = default('''Color(0.627451, 0.321569, 0.176471, 1)''')
    SILVER: 'Color' = default('''Color(0.752941, 0.752941, 0.752941, 1)''')
    SKY_BLUE: 'Color' = default('''Color(0.529412, 0.807843, 0.921569, 1)''')
    SLATE_BLUE: 'Color' = default('''Color(0.415686, 0.352941, 0.803922, 1)''')
    SLATE_GRAY: 'Color' = default('''Color(0.439216, 0.501961, 0.564706, 1)''')
    SNOW: 'Color' = default('''Color(1, 0.980392, 0.980392, 1)''')
    SPRING_GREEN: 'Color' = default('''Color(0, 1, 0.498039, 1)''')
    STEEL_BLUE: 'Color' = default('''Color(0.27451, 0.509804, 0.705882, 1)''')
    TAN: 'Color' = default('''Color(0.823529, 0.705882, 0.54902, 1)''')
    TEAL: 'Color' = default('''Color(0, 0.501961, 0.501961, 1)''')
    THISTLE: 'Color' = default('''Color(0.847059, 0.74902, 0.847059, 1)''')
    TOMATO: 'Color' = default('''Color(1, 0.388235, 0.278431, 1)''')
    TRANSPARENT: 'Color' = default('''Color(1, 1, 1, 0)''')
    TURQUOISE: 'Color' = default('''Color(0.25098, 0.878431, 0.815686, 1)''')
    VIOLET: 'Color' = default('''Color(0.933333, 0.509804, 0.933333, 1)''')
    WEB_GRAY: 'Color' = default('''Color(0.501961, 0.501961, 0.501961, 1)''')
    WEB_GREEN: 'Color' = default('''Color(0, 0.501961, 0, 1)''')
    WEB_MAROON: 'Color' = default('''Color(0.501961, 0, 0, 1)''')
    WEB_PURPLE: 'Color' = default('''Color(0.501961, 0, 0.501961, 1)''')
    WHEAT: 'Color' = default('''Color(0.960784, 0.870588, 0.701961, 1)''')
    WHITE: 'Color' = default('''Color(1, 1, 1, 1)''')
    WHITE_SMOKE: 'Color' = default('''Color(0.960784, 0.960784, 0.960784, 1)''')
    YELLOW: 'Color' = default('''Color(1, 1, 0, 1)''')
    YELLOW_GREEN: 'Color' = default('''Color(0.603922, 0.803922, 0.196078, 1)''')

    def to_argb32(self) -> 'int': ...
    def to_abgr32(self) -> 'int': ...
    def to_rgba32(self) -> 'int': ...
    def to_argb64(self) -> 'int': ...
    def to_abgr64(self) -> 'int': ...
    def to_rgba64(self) -> 'int': ...
    def to_html(self, with_alpha: 'bool' = True) -> 'str': ...
    def clamp(self, min: 'Color' = default('''Color(0, 0, 0, 0)'''), max: 'Color' = default('''Color(1, 1, 1, 1)''')) -> 'Color': ...
    def inverted(self) -> 'Color': ...
    def lerp(self, to: 'Color', weight: 'float') -> 'Color': ...
    def lightened(self, amount: 'float') -> 'Color': ...
    def darkened(self, amount: 'float') -> 'Color': ...
    def blend(self, over: 'Color') -> 'Color': ...
    def get_luminance(self) -> 'float': ...
    def srgb_to_linear(self) -> 'Color': ...
    def linear_to_srgb(self) -> 'Color': ...
    def is_equal_approx(self, to: 'Color') -> 'bool': ...
    @staticmethod
    def hex(hex: 'int') -> 'Color': ...
    @staticmethod
    def hex64(hex: 'int') -> 'Color': ...
    @staticmethod
    def html(rgba: 'str') -> 'Color': ...
    @staticmethod
    def html_is_valid(color: 'str') -> 'bool': ...
    @staticmethod
    def from_string(str: 'str', default: 'Color') -> 'Color': ...
    @staticmethod
    def from_hsv(h: 'float', s: 'float', v: 'float', alpha: 'float' = 1.0) -> 'Color': ...
    @staticmethod
    def from_ok_hsl(h: 'float', s: 'float', l: 'float', alpha: 'float' = 1.0) -> 'Color': ...
    @staticmethod
    def from_rgbe9995(rgbe: 'int') -> 'Color': ...
    @staticmethod
    def from_rgba8(r8: 'int', g8: 'int', b8: 'int', a8: 'int' = 255) -> 'Color': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __neg__(self) -> 'Color': ...
    def __mul__(self, int: 'int') -> 'Color': ...
    def __truediv__(self, int: 'int') -> 'Color': ...
    def __mul__(self, float: 'float') -> 'Color': ...
    def __truediv__(self, float: 'float') -> 'Color': ...
    def __eq__(self, Color: 'Color') -> 'bool': ...
    def __ne__(self, Color: 'Color') -> 'bool': ...
    def __add__(self, Color: 'Color') -> 'Color': ...
    def __sub__(self, Color: 'Color') -> 'Color': ...
    def __mul__(self, Color: 'Color') -> 'Color': ...
    def __truediv__(self, Color: 'Color') -> 'Color': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __contains__(self, PackedColorArray: 'PackedColorArray') -> 'bool': ...


class StringName:



    def casecmp_to(self, to: 'str') -> 'int': ...
    def nocasecmp_to(self, to: 'str') -> 'int': ...
    def naturalcasecmp_to(self, to: 'str') -> 'int': ...
    def naturalnocasecmp_to(self, to: 'str') -> 'int': ...
    def filecasecmp_to(self, to: 'str') -> 'int': ...
    def filenocasecmp_to(self, to: 'str') -> 'int': ...
    def length(self) -> 'int': ...
    def substr(self, from_: 'int', len: 'int' = -1) -> 'str': ...
    def get_slice(self, delimiter: 'str', slice: 'int') -> 'str': ...
    def get_slicec(self, delimiter: 'int', slice: 'int') -> 'str': ...
    def get_slice_count(self, delimiter: 'str') -> 'int': ...
    def find(self, what: 'str', from_: 'int' = 0) -> 'int': ...
    def findn(self, what: 'str', from_: 'int' = 0) -> 'int': ...
    def count(self, what: 'str', from_: 'int' = 0, to: 'int' = 0) -> 'int': ...
    def countn(self, what: 'str', from_: 'int' = 0, to: 'int' = 0) -> 'int': ...
    def rfind(self, what: 'str', from_: 'int' = -1) -> 'int': ...
    def rfindn(self, what: 'str', from_: 'int' = -1) -> 'int': ...
    def match(self, expr: 'str') -> 'bool': ...
    def matchn(self, expr: 'str') -> 'bool': ...
    def begins_with(self, text: 'str') -> 'bool': ...
    def ends_with(self, text: 'str') -> 'bool': ...
    def is_subsequence_of(self, text: 'str') -> 'bool': ...
    def is_subsequence_ofn(self, text: 'str') -> 'bool': ...
    def bigrams(self) -> 'PackedStringArray': ...
    def similarity(self, text: 'str') -> 'float': ...
    def format(self, values: 'Variant', placeholder: 'str' = "{_}") -> 'str': ...
    def replace(self, what: 'str', forwhat: 'str') -> 'str': ...
    def replacen(self, what: 'str', forwhat: 'str') -> 'str': ...
    def repeat(self, count: 'int') -> 'str': ...
    def reverse(self) -> 'str': ...
    def insert(self, position: 'int', what: 'str') -> 'str': ...
    def erase(self, position: 'int', chars: 'int' = 1) -> 'str': ...
    def capitalize(self) -> 'str': ...
    def to_camel_case(self) -> 'str': ...
    def to_pascal_case(self) -> 'str': ...
    def to_snake_case(self) -> 'str': ...
    def split(self, delimiter: 'str' = "", allow_empty: 'bool' = True, maxsplit: 'int' = 0) -> 'PackedStringArray': ...
    def rsplit(self, delimiter: 'str' = "", allow_empty: 'bool' = True, maxsplit: 'int' = 0) -> 'PackedStringArray': ...
    def split_floats(self, delimiter: 'str', allow_empty: 'bool' = True) -> 'PackedFloat64Array': ...
    def join(self, parts: 'PackedStringArray') -> 'str': ...
    def to_upper(self) -> 'str': ...
    def to_lower(self) -> 'str': ...
    def left(self, length: 'int') -> 'str': ...
    def right(self, length: 'int') -> 'str': ...
    def strip_edges(self, left: 'bool' = True, right: 'bool' = True) -> 'str': ...
    def strip_escapes(self) -> 'str': ...
    def lstrip(self, chars: 'str') -> 'str': ...
    def rstrip(self, chars: 'str') -> 'str': ...
    def get_extension(self) -> 'str': ...
    def get_basename(self) -> 'str': ...
    def path_join(self, file: 'str') -> 'str': ...
    def unicode_at(self, at: 'int') -> 'int': ...
    def indent(self, prefix: 'str') -> 'str': ...
    def dedent(self) -> 'str': ...
    def md5_text(self) -> 'str': ...
    def sha1_text(self) -> 'str': ...
    def sha256_text(self) -> 'str': ...
    def md5_buffer(self) -> 'PackedByteArray': ...
    def sha1_buffer(self) -> 'PackedByteArray': ...
    def sha256_buffer(self) -> 'PackedByteArray': ...
    def is_empty(self) -> 'bool': ...
    def contains(self, what: 'str') -> 'bool': ...
    def containsn(self, what: 'str') -> 'bool': ...
    def is_absolute_path(self) -> 'bool': ...
    def is_relative_path(self) -> 'bool': ...
    def simplify_path(self) -> 'str': ...
    def get_base_dir(self) -> 'str': ...
    def get_file(self) -> 'str': ...
    def xml_escape(self, escape_quotes: 'bool' = False) -> 'str': ...
    def xml_unescape(self) -> 'str': ...
    def uri_encode(self) -> 'str': ...
    def uri_decode(self) -> 'str': ...
    def c_escape(self) -> 'str': ...
    def c_unescape(self) -> 'str': ...
    def json_escape(self) -> 'str': ...
    def validate_node_name(self) -> 'str': ...
    def validate_filename(self) -> 'str': ...
    def is_valid_ascii_identifier(self) -> 'bool': ...
    def is_valid_unicode_identifier(self) -> 'bool': ...
    def is_valid_identifier(self) -> 'bool': ...
    def is_valid_int(self) -> 'bool': ...
    def is_valid_float(self) -> 'bool': ...
    def is_valid_hex_number(self, with_prefix: 'bool' = False) -> 'bool': ...
    def is_valid_html_color(self) -> 'bool': ...
    def is_valid_ip_address(self) -> 'bool': ...
    def is_valid_filename(self) -> 'bool': ...
    def to_int(self) -> 'int': ...
    def to_float(self) -> 'float': ...
    def hex_to_int(self) -> 'int': ...
    def bin_to_int(self) -> 'int': ...
    def lpad(self, min_length: 'int', character: 'str' = " ") -> 'str': ...
    def rpad(self, min_length: 'int', character: 'str' = " ") -> 'str': ...
    def pad_decimals(self, digits: 'int') -> 'str': ...
    def pad_zeros(self, digits: 'int') -> 'str': ...
    def trim_prefix(self, prefix: 'str') -> 'str': ...
    def trim_suffix(self, suffix: 'str') -> 'str': ...
    def to_ascii_buffer(self) -> 'PackedByteArray': ...
    def to_utf8_buffer(self) -> 'PackedByteArray': ...
    def to_utf16_buffer(self) -> 'PackedByteArray': ...
    def to_utf32_buffer(self) -> 'PackedByteArray': ...
    def hex_decode(self) -> 'PackedByteArray': ...
    def to_wchar_buffer(self) -> 'PackedByteArray': ...
    def hash(self) -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mod__(self, Variant: 'Variant') -> 'str': ...
    def __mod__(self, bool: 'bool') -> 'str': ...
    def __mod__(self, int: 'int') -> 'str': ...
    def __mod__(self, float: 'float') -> 'str': ...
    def __eq__(self, String: 'str') -> 'bool': ...
    def __ne__(self, String: 'str') -> 'bool': ...
    def __add__(self, String: 'str') -> 'str': ...
    def __mod__(self, String: 'str') -> 'str': ...
    def __contains__(self, String: 'str') -> 'bool': ...
    def __mod__(self, Vector2: 'Vector2') -> 'str': ...
    def __mod__(self, Vector2i: 'Vector2i') -> 'str': ...
    def __mod__(self, Rect2: 'Rect2') -> 'str': ...
    def __mod__(self, Rect2i: 'Rect2i') -> 'str': ...
    def __mod__(self, Vector3: 'Vector3') -> 'str': ...
    def __mod__(self, Vector3i: 'Vector3i') -> 'str': ...
    def __mod__(self, Transform2D: 'Transform2D') -> 'str': ...
    def __mod__(self, Vector4: 'Vector4') -> 'str': ...
    def __mod__(self, Vector4i: 'Vector4i') -> 'str': ...
    def __mod__(self, Plane: 'Plane') -> 'str': ...
    def __mod__(self, Quaternion: 'Quaternion') -> 'str': ...
    def __mod__(self, AABB: 'AABB') -> 'str': ...
    def __mod__(self, Basis: 'Basis') -> 'str': ...
    def __mod__(self, Transform3D: 'Transform3D') -> 'str': ...
    def __mod__(self, Projection: 'Projection') -> 'str': ...
    def __mod__(self, Color: 'Color') -> 'str': ...
    def __eq__(self, StringName: 'StringName') -> 'bool': ...
    def __ne__(self, StringName: 'StringName') -> 'bool': ...
    def __lt__(self, StringName: 'StringName') -> 'bool': ...
    def __le__(self, StringName: 'StringName') -> 'bool': ...
    def __gt__(self, StringName: 'StringName') -> 'bool': ...
    def __ge__(self, StringName: 'StringName') -> 'bool': ...
    def __add__(self, StringName: 'StringName') -> 'str': ...
    def __mod__(self, StringName: 'StringName') -> 'str': ...
    def __contains__(self, StringName: 'StringName') -> 'bool': ...
    def __mod__(self, NodePath: 'NodePath') -> 'str': ...
    def __mod__(self, Object: 'Object') -> 'str': ...
    def __contains__(self, Object: 'Object') -> 'bool': ...
    def __mod__(self, Callable: 'Callable') -> 'str': ...
    def __mod__(self, Signal: 'Signal') -> 'str': ...
    def __mod__(self, Dictionary: 'Dictionary') -> 'str': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __mod__(self, Array: 'Array') -> 'str': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __mod__(self, PackedByteArray: 'PackedByteArray') -> 'str': ...
    def __mod__(self, PackedInt32Array: 'PackedInt32Array') -> 'str': ...
    def __mod__(self, PackedInt64Array: 'PackedInt64Array') -> 'str': ...
    def __mod__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'str': ...
    def __mod__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'str': ...
    def __mod__(self, PackedStringArray: 'PackedStringArray') -> 'str': ...
    def __contains__(self, PackedStringArray: 'PackedStringArray') -> 'bool': ...
    def __mod__(self, PackedVector2Array: 'PackedVector2Array') -> 'str': ...
    def __mod__(self, PackedVector3Array: 'PackedVector3Array') -> 'str': ...
    def __mod__(self, PackedColorArray: 'PackedColorArray') -> 'str': ...
    def __mod__(self, PackedVector4Array: 'PackedVector4Array') -> 'str': ...


class NodePath:



    def is_absolute(self) -> 'bool': ...
    def get_name_count(self) -> 'int': ...
    def get_name(self, idx: 'int') -> 'StringName': ...
    def get_subname_count(self) -> 'int': ...
    def hash(self) -> 'int': ...
    def get_subname(self, idx: 'int') -> 'StringName': ...
    def get_concatenated_names(self) -> 'StringName': ...
    def get_concatenated_subnames(self) -> 'StringName': ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'NodePath': ...
    def get_as_property_path(self) -> 'NodePath': ...
    def is_empty(self) -> 'bool': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, NodePath: 'NodePath') -> 'bool': ...
    def __ne__(self, NodePath: 'NodePath') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class RID:



    def is_valid(self) -> 'bool': ...
    def get_id(self) -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, RID: 'RID') -> 'bool': ...
    def __ne__(self, RID: 'RID') -> 'bool': ...
    def __lt__(self, RID: 'RID') -> 'bool': ...
    def __le__(self, RID: 'RID') -> 'bool': ...
    def __gt__(self, RID: 'RID') -> 'bool': ...
    def __ge__(self, RID: 'RID') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Callable:



    @staticmethod
    def create(variant: 'Variant', method: 'StringName') -> 'Callable': ...
    def callv(self, arguments: 'Array') -> 'Variant': ...
    def is_null(self) -> 'bool': ...
    def is_custom(self) -> 'bool': ...
    def is_standard(self) -> 'bool': ...
    def is_valid(self) -> 'bool': ...
    def get_object(self) -> 'Object': ...
    def get_object_id(self) -> 'int': ...
    def get_method(self) -> 'StringName': ...
    def get_argument_count(self) -> 'int': ...
    def get_bound_arguments_count(self) -> 'int': ...
    def get_bound_arguments(self) -> 'Array': ...
    def get_unbound_arguments_count(self) -> 'int': ...
    def hash(self) -> 'int': ...
    def bindv(self, arguments: 'Array') -> 'Callable': ...
    def unbind(self, argcount: 'int') -> 'Callable': ...
    def call(self) -> 'Variant': ...
    def call_deferred(self) -> None: ...
    def rpc(self) -> None: ...
    def rpc_id(self, peer_id: 'int') -> None: ...
    def bind(self) -> 'Callable': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, Callable: 'Callable') -> 'bool': ...
    def __ne__(self, Callable: 'Callable') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Signal:



    def is_null(self) -> 'bool': ...
    def get_object(self) -> 'Object': ...
    def get_object_id(self) -> 'int': ...
    def get_name(self) -> 'StringName': ...
    def connect(self, callable: 'Callable', flags: 'int' = 0) -> 'int': ...
    def disconnect(self, callable: 'Callable') -> None: ...
    def is_connected(self, callable: 'Callable') -> 'bool': ...
    def get_connections(self) -> 'Array': ...
    def has_connections(self) -> 'bool': ...
    def emit(self) -> None: ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, Signal: 'Signal') -> 'bool': ...
    def __ne__(self, Signal: 'Signal') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Dictionary:



    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def clear(self) -> None: ...
    def assign(self, dictionary: 'Dictionary') -> None: ...
    def sort(self) -> None: ...
    def merge(self, dictionary: 'Dictionary', overwrite: 'bool' = False) -> None: ...
    def merged(self, dictionary: 'Dictionary', overwrite: 'bool' = False) -> 'Dictionary': ...
    def has(self, key: 'Variant') -> 'bool': ...
    def has_all(self, keys: 'Array') -> 'bool': ...
    def find_key(self, value: 'Variant') -> 'Variant': ...
    def erase(self, key: 'Variant') -> 'bool': ...
    def hash(self) -> 'int': ...
    def keys(self) -> 'Array': ...
    def values(self) -> 'Array': ...
    def duplicate(self, deep: 'bool' = False) -> 'Dictionary': ...
    def get(self, key: 'Variant', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def get_or_add(self, key: 'Variant', default: 'Variant' = default('''null''')) -> 'Variant': ...
    def set(self, key: 'Variant', value: 'Variant') -> 'bool': ...
    def is_typed(self) -> 'bool': ...
    def is_typed_key(self) -> 'bool': ...
    def is_typed_value(self) -> 'bool': ...
    def is_same_typed(self, dictionary: 'Dictionary') -> 'bool': ...
    def is_same_typed_key(self, dictionary: 'Dictionary') -> 'bool': ...
    def is_same_typed_value(self, dictionary: 'Dictionary') -> 'bool': ...
    def get_typed_key_builtin(self) -> 'int': ...
    def get_typed_value_builtin(self) -> 'int': ...
    def get_typed_key_class_name(self) -> 'StringName': ...
    def get_typed_value_class_name(self) -> 'StringName': ...
    def get_typed_key_script(self) -> 'Variant': ...
    def get_typed_value_script(self) -> 'Variant': ...
    def make_read_only(self) -> None: ...
    def is_read_only(self) -> 'bool': ...
    def recursive_equal(self, dictionary: 'Dictionary', recursion_count: 'int') -> 'bool': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __eq__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __ne__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class Array:



    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def clear(self) -> None: ...
    def hash(self) -> 'int': ...
    def assign(self, array: 'Array') -> None: ...
    def get(self, index: 'int') -> 'Variant': ...
    def set(self, index: 'int', value: 'Variant') -> None: ...
    def push_back(self, value: 'Variant') -> None: ...
    def push_front(self, value: 'Variant') -> None: ...
    def append(self, value: 'Variant') -> None: ...
    def append_array(self, array: 'Array') -> None: ...
    def resize(self, size: 'int') -> 'int': ...
    def insert(self, position: 'int', value: 'Variant') -> 'int': ...
    def remove_at(self, position: 'int') -> None: ...
    def fill(self, value: 'Variant') -> None: ...
    def erase(self, value: 'Variant') -> None: ...
    def front(self) -> 'Variant': ...
    def back(self) -> 'Variant': ...
    def pick_random(self) -> 'Variant': ...
    def find(self, what: 'Variant', from_: 'int' = 0) -> 'int': ...
    def find_custom(self, method: 'Callable', from_: 'int' = 0) -> 'int': ...
    def rfind(self, what: 'Variant', from_: 'int' = -1) -> 'int': ...
    def rfind_custom(self, method: 'Callable', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'Variant') -> 'int': ...
    def has(self, value: 'Variant') -> 'bool': ...
    def pop_back(self) -> 'Variant': ...
    def pop_front(self) -> 'Variant': ...
    def pop_at(self, position: 'int') -> 'Variant': ...
    def sort(self) -> None: ...
    def sort_custom(self, func: 'Callable') -> None: ...
    def shuffle(self) -> None: ...
    def bsearch(self, value: 'Variant', before: 'bool' = True) -> 'int': ...
    def bsearch_custom(self, value: 'Variant', func: 'Callable', before: 'bool' = True) -> 'int': ...
    def reverse(self) -> None: ...
    def duplicate(self, deep: 'bool' = False) -> 'Array': ...
    def slice(self, begin: 'int', end: 'int' = 2147483647, step: 'int' = 1, deep: 'bool' = False) -> 'Array': ...
    def filter(self, method: 'Callable') -> 'Array': ...
    def map(self, method: 'Callable') -> 'Array': ...
    def reduce(self, method: 'Callable', accum: 'Variant' = default('''null''')) -> 'Variant': ...
    def any(self, method: 'Callable') -> 'bool': ...
    def all(self, method: 'Callable') -> 'bool': ...
    def max(self) -> 'Variant': ...
    def min(self) -> 'Variant': ...
    def is_typed(self) -> 'bool': ...
    def is_same_typed(self, array: 'Array') -> 'bool': ...
    def get_typed_builtin(self) -> 'int': ...
    def get_typed_class_name(self) -> 'StringName': ...
    def get_typed_script(self) -> 'Variant': ...
    def make_read_only(self) -> None: ...
    def is_read_only(self) -> 'bool': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __eq__(self, Array: 'Array') -> 'bool': ...
    def __ne__(self, Array: 'Array') -> 'bool': ...
    def __lt__(self, Array: 'Array') -> 'bool': ...
    def __le__(self, Array: 'Array') -> 'bool': ...
    def __gt__(self, Array: 'Array') -> 'bool': ...
    def __ge__(self, Array: 'Array') -> 'bool': ...
    def __add__(self, Array: 'Array') -> 'Array': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...


class PackedByteArray:



    def get(self, index: 'int') -> 'int': ...
    def set(self, index: 'int', value: 'int') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'int') -> 'bool': ...
    def append(self, value: 'int') -> 'bool': ...
    def append_array(self, array: 'PackedByteArray') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'int') -> 'int': ...
    def fill(self, value: 'int') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'int') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'int', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedByteArray': ...
    def find(self, value: 'int', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'int', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'int') -> 'int': ...
    def get_string_from_ascii(self) -> 'str': ...
    def get_string_from_utf8(self) -> 'str': ...
    def get_string_from_utf16(self) -> 'str': ...
    def get_string_from_utf32(self) -> 'str': ...
    def get_string_from_wchar(self) -> 'str': ...
    def hex_encode(self) -> 'str': ...
    def compress(self, compression_mode: 'int' = 0) -> 'PackedByteArray': ...
    def decompress(self, buffer_size: 'int', compression_mode: 'int' = 0) -> 'PackedByteArray': ...
    def decompress_dynamic(self, max_output_size: 'int', compression_mode: 'int' = 0) -> 'PackedByteArray': ...
    def decode_u8(self, byte_offset: 'int') -> 'int': ...
    def decode_s8(self, byte_offset: 'int') -> 'int': ...
    def decode_u16(self, byte_offset: 'int') -> 'int': ...
    def decode_s16(self, byte_offset: 'int') -> 'int': ...
    def decode_u32(self, byte_offset: 'int') -> 'int': ...
    def decode_s32(self, byte_offset: 'int') -> 'int': ...
    def decode_u64(self, byte_offset: 'int') -> 'int': ...
    def decode_s64(self, byte_offset: 'int') -> 'int': ...
    def decode_half(self, byte_offset: 'int') -> 'float': ...
    def decode_float(self, byte_offset: 'int') -> 'float': ...
    def decode_double(self, byte_offset: 'int') -> 'float': ...
    def has_encoded_var(self, byte_offset: 'int', allow_objects: 'bool' = False) -> 'bool': ...
    def decode_var(self, byte_offset: 'int', allow_objects: 'bool' = False) -> 'Variant': ...
    def decode_var_size(self, byte_offset: 'int', allow_objects: 'bool' = False) -> 'int': ...
    def to_int32_array(self) -> 'PackedInt32Array': ...
    def to_int64_array(self) -> 'PackedInt64Array': ...
    def to_float32_array(self) -> 'PackedFloat32Array': ...
    def to_float64_array(self) -> 'PackedFloat64Array': ...
    def encode_u8(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_s8(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_u16(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_s16(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_u32(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_s32(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_u64(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_s64(self, byte_offset: 'int', value: 'int') -> None: ...
    def encode_half(self, byte_offset: 'int', value: 'float') -> None: ...
    def encode_float(self, byte_offset: 'int', value: 'float') -> None: ...
    def encode_double(self, byte_offset: 'int', value: 'float') -> None: ...
    def encode_var(self, byte_offset: 'int', value: 'Variant', allow_objects: 'bool' = False) -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedByteArray: 'PackedByteArray') -> 'bool': ...
    def __ne__(self, PackedByteArray: 'PackedByteArray') -> 'bool': ...
    def __add__(self, PackedByteArray: 'PackedByteArray') -> 'PackedByteArray': ...


class PackedInt32Array:



    def get(self, index: 'int') -> 'int': ...
    def set(self, index: 'int', value: 'int') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'int') -> 'bool': ...
    def append(self, value: 'int') -> 'bool': ...
    def append_array(self, array: 'PackedInt32Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'int') -> 'int': ...
    def fill(self, value: 'int') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'int') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedInt32Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'int', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedInt32Array': ...
    def find(self, value: 'int', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'int', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'int') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedInt32Array: 'PackedInt32Array') -> 'bool': ...
    def __ne__(self, PackedInt32Array: 'PackedInt32Array') -> 'bool': ...
    def __add__(self, PackedInt32Array: 'PackedInt32Array') -> 'PackedInt32Array': ...


class PackedInt64Array:



    def get(self, index: 'int') -> 'int': ...
    def set(self, index: 'int', value: 'int') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'int') -> 'bool': ...
    def append(self, value: 'int') -> 'bool': ...
    def append_array(self, array: 'PackedInt64Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'int') -> 'int': ...
    def fill(self, value: 'int') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'int') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedInt64Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'int', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedInt64Array': ...
    def find(self, value: 'int', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'int', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'int') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedInt64Array: 'PackedInt64Array') -> 'bool': ...
    def __ne__(self, PackedInt64Array: 'PackedInt64Array') -> 'bool': ...
    def __add__(self, PackedInt64Array: 'PackedInt64Array') -> 'PackedInt64Array': ...


class PackedFloat32Array:



    def get(self, index: 'int') -> 'float': ...
    def set(self, index: 'int', value: 'float') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'float') -> 'bool': ...
    def append(self, value: 'float') -> 'bool': ...
    def append_array(self, array: 'PackedFloat32Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'float') -> 'int': ...
    def fill(self, value: 'float') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'float') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedFloat32Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'float', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedFloat32Array': ...
    def find(self, value: 'float', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'float', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'float') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'bool': ...
    def __ne__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'bool': ...
    def __add__(self, PackedFloat32Array: 'PackedFloat32Array') -> 'PackedFloat32Array': ...


class PackedFloat64Array:



    def get(self, index: 'int') -> 'float': ...
    def set(self, index: 'int', value: 'float') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'float') -> 'bool': ...
    def append(self, value: 'float') -> 'bool': ...
    def append_array(self, array: 'PackedFloat64Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'float') -> 'int': ...
    def fill(self, value: 'float') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'float') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedFloat64Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'float', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedFloat64Array': ...
    def find(self, value: 'float', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'float', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'float') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'bool': ...
    def __ne__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'bool': ...
    def __add__(self, PackedFloat64Array: 'PackedFloat64Array') -> 'PackedFloat64Array': ...


class PackedStringArray:



    def get(self, index: 'int') -> 'str': ...
    def set(self, index: 'int', value: 'str') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'str') -> 'bool': ...
    def append(self, value: 'str') -> 'bool': ...
    def append_array(self, array: 'PackedStringArray') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'str') -> 'int': ...
    def fill(self, value: 'str') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'str') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedStringArray': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'str', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedStringArray': ...
    def find(self, value: 'str', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'str', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'str') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedStringArray: 'PackedStringArray') -> 'bool': ...
    def __ne__(self, PackedStringArray: 'PackedStringArray') -> 'bool': ...
    def __add__(self, PackedStringArray: 'PackedStringArray') -> 'PackedStringArray': ...


class PackedVector2Array:



    def get(self, index: 'int') -> 'Vector2': ...
    def set(self, index: 'int', value: 'Vector2') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'Vector2') -> 'bool': ...
    def append(self, value: 'Vector2') -> 'bool': ...
    def append_array(self, array: 'PackedVector2Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'Vector2') -> 'int': ...
    def fill(self, value: 'Vector2') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'Vector2') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedVector2Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Vector2', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedVector2Array': ...
    def find(self, value: 'Vector2', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'Vector2', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'Vector2') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mul__(self, Transform2D: 'Transform2D') -> 'PackedVector2Array': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedVector2Array: 'PackedVector2Array') -> 'bool': ...
    def __ne__(self, PackedVector2Array: 'PackedVector2Array') -> 'bool': ...
    def __add__(self, PackedVector2Array: 'PackedVector2Array') -> 'PackedVector2Array': ...


class PackedVector3Array:



    def get(self, index: 'int') -> 'Vector3': ...
    def set(self, index: 'int', value: 'Vector3') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'Vector3') -> 'bool': ...
    def append(self, value: 'Vector3') -> 'bool': ...
    def append_array(self, array: 'PackedVector3Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'Vector3') -> 'int': ...
    def fill(self, value: 'Vector3') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'Vector3') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedVector3Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Vector3', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedVector3Array': ...
    def find(self, value: 'Vector3', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'Vector3', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'Vector3') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __mul__(self, Transform3D: 'Transform3D') -> 'PackedVector3Array': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedVector3Array: 'PackedVector3Array') -> 'bool': ...
    def __ne__(self, PackedVector3Array: 'PackedVector3Array') -> 'bool': ...
    def __add__(self, PackedVector3Array: 'PackedVector3Array') -> 'PackedVector3Array': ...


class PackedColorArray:



    def get(self, index: 'int') -> 'Color': ...
    def set(self, index: 'int', value: 'Color') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'Color') -> 'bool': ...
    def append(self, value: 'Color') -> 'bool': ...
    def append_array(self, array: 'PackedColorArray') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'Color') -> 'int': ...
    def fill(self, value: 'Color') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'Color') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedColorArray': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Color', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedColorArray': ...
    def find(self, value: 'Color', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'Color', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'Color') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedColorArray: 'PackedColorArray') -> 'bool': ...
    def __ne__(self, PackedColorArray: 'PackedColorArray') -> 'bool': ...
    def __add__(self, PackedColorArray: 'PackedColorArray') -> 'PackedColorArray': ...


class PackedVector4Array:



    def get(self, index: 'int') -> 'Vector4': ...
    def set(self, index: 'int', value: 'Vector4') -> None: ...
    def size(self) -> 'int': ...
    def is_empty(self) -> 'bool': ...
    def push_back(self, value: 'Vector4') -> 'bool': ...
    def append(self, value: 'Vector4') -> 'bool': ...
    def append_array(self, array: 'PackedVector4Array') -> None: ...
    def remove_at(self, index: 'int') -> None: ...
    def insert(self, at_index: 'int', value: 'Vector4') -> 'int': ...
    def fill(self, value: 'Vector4') -> None: ...
    def resize(self, new_size: 'int') -> 'int': ...
    def clear(self) -> None: ...
    def has(self, value: 'Vector4') -> 'bool': ...
    def reverse(self) -> None: ...
    def slice(self, begin: 'int', end: 'int' = 2147483647) -> 'PackedVector4Array': ...
    def to_byte_array(self) -> 'PackedByteArray': ...
    def sort(self) -> None: ...
    def bsearch(self, value: 'Vector4', before: 'bool' = True) -> 'int': ...
    def duplicate(self) -> 'PackedVector4Array': ...
    def find(self, value: 'Vector4', from_: 'int' = 0) -> 'int': ...
    def rfind(self, value: 'Vector4', from_: 'int' = -1) -> 'int': ...
    def count(self, value: 'Vector4') -> 'int': ...
    def __eq__(self, Variant: 'Variant') -> 'bool': ...
    def __ne__(self, Variant: 'Variant') -> 'bool': ...
    def __contains__(self, Dictionary: 'Dictionary') -> 'bool': ...
    def __contains__(self, Array: 'Array') -> 'bool': ...
    def __eq__(self, PackedVector4Array: 'PackedVector4Array') -> 'bool': ...
    def __ne__(self, PackedVector4Array: 'PackedVector4Array') -> 'bool': ...
    def __add__(self, PackedVector4Array: 'PackedVector4Array') -> 'PackedVector4Array': ...


class Variant: ...

